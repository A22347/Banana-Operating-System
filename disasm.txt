
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f9 9d 00 00       	call   c0009e19 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 01 30 02 00       	call   c0023026 <_init>
c0000025:	c3                   	ret    
c0000026:	bb aa 3c 02 c0       	mov    ebx,0xc0023caa
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b8 3c 02 c0    	cmp    ebx,0xc0023cb8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 84 02 c0       	mov    eax,0xc0028498
c0000049:	3d 98 84 02 c0       	cmp    eax,0xc0028498
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 84 02 c0       	push   0xc0028498
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 84 02 c0       	mov    eax,0xc0028498
c0000075:	2d 98 84 02 c0       	sub    eax,0xc0028498
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 84 02 c0       	push   0xc0028498
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 86 02 c0 00 	cmp    BYTE PTR ds:0xc0028620,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c0 3c 02 c0       	mov    ebx,0xc0023cc0
c00000bb:	81 eb bc 3c 02 c0    	sub    ebx,0xc0023cbc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be bc 3c 02 c0       	mov    esi,0xc0023cbc
c00000ca:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 86 02 c0       	mov    ds:0xc0028624,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 86 02 c0       	mov    eax,ds:0xc0028624
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 84 02 c0       	push   0xc0028498
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 86 02 c0 01 	mov    BYTE PTR ds:0xc0028620,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 86 02 c0       	push   0xc0028628
c000012c:	68 98 84 02 c0       	push   0xc0028498
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 dc 81 01 00       	call   c00184ac <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 c4 ca 00 00       	call   c000cdac <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 ba 81 01 00       	call   c00184ac <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 a7 87 01 00       	call   c0018ab8 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 ea 8d 01 00       	call   c0019104 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 70 8a 02 c0 	lgdtd  ds:0xc0028a70
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 32 e9 00 00       	call   c000ee41 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 40 86 02 c0       	mov    ds:0xc0028640,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 40 86 02 c0    	mov    DWORD PTR ds:0xc0028640,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d 40 86 02 c0    	mov    ebx,DWORD PTR ds:0xc0028640
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 e0 3c 02 c0 02 	test   BYTE PTR [edx-0x3ffdc320],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 e0 3c 02 c0 01 	test   BYTE PTR [edx-0x3ffdc320],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 e0 3c 02 c0 08 	test   BYTE PTR [edx-0x3ffdc320],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 e0 3c 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc320],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 e0 3c 02 c0 01 	test   BYTE PTR [edx-0x3ffdc320],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d 60 86 02 c0    	mov    ecx,DWORD PTR ds:0xc0028660
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d 60 86 02 c0    	mov    DWORD PTR ds:0xc0028660,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 64 86 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd799c]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 64 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd799c],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d 60 86 02 c0    	mov    DWORD PTR ds:0xc0028660,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 8c 86 02 c0    	cmp    DWORD PTR ds:0xc002868c,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d 9c 86 02 c0    	mov    ecx,DWORD PTR ds:0xc002869c
c0000d64:	c7 42 0c 94 86 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028694
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 9c 86 02 c0    	mov    DWORD PTR ds:0xc002869c,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 8c 86 02 c0    	mov    DWORD PTR ds:0xc002868c,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 60 86 02 c0 02 	test   BYTE PTR ds:0xc0028660,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 60 86 02 c0       	mov    eax,0xc0028660
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 d7 8d 00 00       	call   c0009c1c <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 19 8d 00 00       	call   c0009c1c <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 03 8d 00 00       	call   c0009c1c <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 df 8c 00 00       	call   c0009c1c <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d 60 86 02 c0    	mov    edi,DWORD PTR ds:0xc0028660
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 60 86 02 c0       	mov    eax,0xc0028660
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 64 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd799c]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 64 86 02 c0 	mov    DWORD PTR [edx*4-0x3ffd799c],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 94 86 02 c0 	lea    edx,[eax*8-0x3ffd796c]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 60 86 02 c0       	mov    eax,0xc0028660
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d a0 86 02 c0    	mov    ebx,DWORD PTR ds:0xc00286a0
c00010e6:	81 fb 94 86 02 c0    	cmp    ebx,0xc0028694
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d 94 86 02 c0       	cmp    eax,0xc0028694
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d 90 86 02 c0    	cmp    DWORD PTR ds:0xc0028690,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 9c 86 02 c0       	mov    ds:0xc002869c,eax
c0001122:	a3 a0 86 02 c0       	mov    ds:0xc00286a0,eax
c0001127:	a3 90 86 02 c0       	mov    ds:0xc0028690,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 94 86 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028694
c0001135:	c7 40 0c 94 86 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028694
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 a0 86 02 c0       	mov    ds:0xc00286a0,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 94 86 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028694
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 58 86 02 c0 	lea    ebp,[edx*4-0x3ffd79a8]
c0001186:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 60 86 02 c0 	lea    ecx,[edx*4-0x3ffd79a0]
c00011a1:	8b 14 95 60 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd79a0]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd 94 89 02 c0 	or     DWORD PTR [edi*4-0x3ffd766c],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 94 86 02 c0 	lea    eax,[eax*8-0x3ffd796c]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d 9c 86 02 c0    	mov    DWORD PTR ds:0xc002869c,ecx
c000125b:	89 0d a0 86 02 c0    	mov    DWORD PTR ds:0xc00286a0,ecx
c0001261:	c7 41 08 94 86 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028694
c0001268:	c7 41 0c 94 86 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028694
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd 8c 86 02 c0 	lea    edx,[ecx*8-0x3ffd7974]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d 94 89 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd766c]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d 94 89 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd766c]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 8c 86 02 c0 	lea    edx,[eax*4-0x3ffd7974]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d 94 89 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd766c],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d 9c 86 02 c0    	mov    DWORD PTR ds:0xc002869c,edi
c000132e:	89 3d a0 86 02 c0    	mov    DWORD PTR ds:0xc00286a0,edi
c0001334:	c7 47 08 94 86 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028694
c000133b:	c7 47 0c 94 86 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028694
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d 90 86 02 c0    	mov    DWORD PTR ds:0xc0028690,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 8c 86 02 c0       	mov    eax,ds:0xc002868c
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d 8c 86 02 c0    	mov    DWORD PTR ds:0xc002868c,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba 60 86 02 c0       	mov    edx,0xc0028660
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d 60 86 02 c0 00 	cmp    DWORD PTR ds:0xc0028660,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 60 86 02 c0       	mov    eax,0xc0028660
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d b4 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289b4
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 b4 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00289b4,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d b4 89 02 c0    	mov    DWORD PTR ds:0xc00289b4,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 8c 86 02 c0    	cmp    DWORD PTR ds:0xc002868c,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d 8c 86 02 c0    	mov    DWORD PTR ds:0xc002868c,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d 60 86 02 c0 00 	cmp    DWORD PTR ds:0xc0028660,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 60 86 02 c0       	mov    eax,0xc0028660
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 bc 89 02 c0    	push   DWORD PTR ds:0xc00289bc
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d 60 86 02 c0 00 	cmp    DWORD PTR ds:0xc0028660,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 60 86 02 c0       	mov    eax,0xc0028660
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 bc 89 02 c0       	mov    eax,ds:0xc00289bc
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 60 86 02 c0       	mov    eax,0xc0028660
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d 8c 86 02 c0 00 	cmp    DWORD PTR ds:0xc002868c,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 60 86 02 c0       	mov    eax,0xc0028660
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 8c 86 02 c0       	mov    eax,ds:0xc002868c
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 64 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd799c]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 94 86 02 c0       	mov    eax,0xc0028694
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d 8c 89 02 c0       	cmp    eax,0xc002898c
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 c8 89 02 c0       	mov    eax,ds:0xc00289c8
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 b0 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289b0
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 c4 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289c4
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 d4 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289d4
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 60 86 02 c0       	mov    eax,0xc0028660
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 e4 3d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc21c]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 60 86 02 c0       	mov    eax,ds:0xc0028660
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 60 86 02 c0       	mov    ds:0xc0028660,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d a4 89 02 c0    	mov    DWORD PTR ds:0xc00289a4,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d a8 89 02 c0    	mov    DWORD PTR ds:0xc00289a8,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d ac 89 02 c0    	mov    DWORD PTR ds:0xc00289ac,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 b4 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00289b4,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 20 a1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5ee0]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 a2 a3 01 00       	jmp    c001bec0 <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 20 a1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5ee0]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 d4 a3 01 00       	jmp    c001bf08 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 20 a1 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5ee0]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 fd a3 01 00       	jmp    c001bf50 <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 d6 0f 02 00       	call   c0022e0c <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 00 3f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc100]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 00 3f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc100]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 00 3e 02 c0       	mov    edx,0xc0023e00
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 20 3f 02 c0       	mov    edx,0xc0023f20
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba 30 6e 02 c0       	mov    edx,0xc0026e30
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 2c 3f 02 c0       	mov    edx,0xc0023f2c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 10 3f 02 c0       	mov    edx,0xc0023f10
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 00 8a 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7600]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 e0 89 02 c0    	mov    ax,ds:0xc00289e0
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 e0 89 02 c0    	mov    ds:0xc00289e0,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 d3 fd 01 00       	call   c0022e0c <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 32 3f 02 c0       	mov    eax,0xc0023f32
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad 80 3e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc180]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 3b 3f 02 c0       	mov    eax,0xc0023f3b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 9e e7 01 00       	call   c0022e0c <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 10 3f 02 c0       	mov    edx,0xc0023f10
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 00 3e 02 c0       	mov    edx,0xc0023e00
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 10 3e 02 c0       	mov    edx,0xc0023e10
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 00 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7600]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 00 8a 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7600],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 65 d1 01 00       	call   c0022e0c <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 4b d1 01 00       	call   c0022e0c <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 57 3e 02 c0       	mov    eax,0xc0023e57
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 e4 bc 01 00       	call   c0022e0c <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 00 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7600]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 40 3e 02 c0       	mov    esi,0xc0023e40
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 58 b6 01 00       	call   c0022e0c <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 20 3f 02 c0       	mov    edx,0xc0023f20
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 20 3e 02 c0       	mov    edx,0xc0023e20
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 30 3e 02 c0       	mov    edx,0xc0023e30
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 42 3f 02 c0       	mov    edx,0xc0023f42
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 4e 3f 02 c0       	mov    edx,0xc0023f4e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba 62 3f 02 c0       	mov    edx,0xc0023f62
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 88 17 00 00       	call   c0009d53 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 80 17 00 00       	call   c0009d63 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c 80 42 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024280
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 80 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024280
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 80 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc080]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 e2 14 00 00       	jmp    c0009d53 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 fd 14 00 00       	jmp    c0009d73 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0008883:	48                   	dec    eax
c0008884:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000889a:	48                   	dec    eax
c000889b:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00088ab:	ff 05 84 9f 02 c0    	inc    DWORD PTR ds:0xc0029f84
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c00088ba:	48                   	dec    eax
c00088bb:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d 80 9f 02 c0 00 	cmp    DWORD PTR ds:0xc0029f80,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c00088d5:	e8 4a 04 01 00       	call   c0018d24 <schedule()>
c00088da:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00088df:	48                   	dec    eax
c00088e0:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 90 8b 02 c0       	mov    eax,ds:0xc0028b90
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 80 43 02 c0       	push   0xc0024380
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 68 8a 02 c0       	mov    eax,0xc0028a68
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 89 43 02 c0       	push   0xc0024389
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 0c 2e 02 c0       	mov    eax,0xc0022e0c
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 93 43 02 c0       	push   0xc0024393
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 40 2b 02 c0       	mov    eax,0xc0022b40
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 9c 43 02 c0       	push   0xc002439c
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 0c 2f 02 c0       	mov    eax,0xc0022f0c
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 a6 43 02 c0       	push   0xc00243a6
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 8c 2c 02 c0       	mov    eax,0xc0022c8c
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 af 43 02 c0       	push   0xc00243af
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 6c 8a 02 c0       	mov    eax,0xc0028a6c
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 bc 43 02 c0       	push   0xc00243bc
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 6d 8a 02 c0       	mov    eax,0xc0028a6d
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 ff 5c 00 00       	call   c000e73c <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 c9 43 02 c0       	push   0xc00243c9
c0008a6d:	e8 3b 13 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 e0 43 02 c0 	mov    DWORD PTR [esp],0xc00243e0
c0008a7a:	e8 2e 13 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 c8 12 00 00       	call   c0009d53 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0008a9a:	68 f9 43 02 c0       	push   0xc00243f9
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 59 fe 00 00       	call   c0018900 <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 4b 97 00 c0       	push   0xc000974b
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 4c 00 01 00       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 4c 95 01 c0       	push   0xc001954c
c0008ac5:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0008acb:	e8 38 00 01 00       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 68 9f 02 c0       	mov    ds:0xc0029f68,eax
c0008ad8:	68 ec 46 02 c0       	push   0xc00246ec
c0008add:	c6 05 6d 8a 02 c0 01 	mov    BYTE PTR ds:0xc0028a6d,0x1
c0008ae4:	e8 c4 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 39 0e 01 00       	call   c0019927 <Vm::initialise8086()>
c0008aee:	e8 e3 48 00 00       	call   c000d3d6 <Fs::initVFS()>
c0008af3:	c7 04 24 06 44 02 c0 	mov    DWORD PTR [esp],0xc0024406
c0008afa:	e8 ae 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008aff:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 ec 46 02 c0       	push   0xc00246ec
c0008b1e:	e8 8a 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b23:	e8 22 e5 00 00       	call   c001704a <Sys::loadSyscalls()>
c0008b28:	e8 bf c3 00 00       	call   c0014eec <Krnl::loadSystemEnv()>
c0008b2d:	e8 11 c8 00 00       	call   c0015343 <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 20 44 02 c0       	push   0xc0024420
c0008b3c:	68 29 44 02 c0       	push   0xc0024429
c0008b41:	e8 c7 d2 00 00       	call   c0015e0d <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 a6 54 00 00       	call   c000dff4 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 10 47 02 c0 	mov    DWORD PTR [esp],0xc0024710
c0008b55:	e8 53 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 91 5b 00 00       	call   c000e6fc <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 31 44 02 c0 	mov    DWORD PTR [esp],0xc0024431
c0008b72:	e8 36 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b77:	e8 d8 be 00 00       	call   c0014a54 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 4b 44 02 c0 	mov    DWORD PTR [esp],0xc002444b
c0008b83:	e8 25 12 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 5c 44 02 c0       	push   0xc002445c
c0008b97:	e8 7e f6 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 a6 f8 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 6a 03 01 00       	call   c0018f1c <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 78 44 02 c0       	push   0xc0024478
c0008bc7:	50                   	push   eax
c0008bc8:	e8 e9 5b 00 00       	call   c000e7b6 <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba c0 47 02 c0       	mov    edx,0xc00247c0
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 81 8a 02 c0 04 	test   BYTE PTR ds:0xc0028a81,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 75 9d 01 00       	call   c0022ad6 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 7e a8 00 00       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 57 a8 00 00       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 35 a8 00 00       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 13 a8 00 00       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 80 8a 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028a80,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 21 a7 00 00       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 fc a6 00 00       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 df 9b 01 00       	call   c0022a90 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 9c 9b 01 00       	call   c0022a70 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 18 a7 00 00       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 88 44 02 c0       	push   0xc0024488
c0008f2d:	e8 0d 41 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 9b 44 02 c0       	push   0xc002449b
c0008f50:	e8 ea 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 ac 44 02 c0       	push   0xc00244ac
c0008f73:	e8 c7 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 bd 44 02 c0       	push   0xc00244bd
c0008f96:	e8 a4 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 ce 44 02 c0       	push   0xc00244ce
c0008fb9:	e8 81 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 df 44 02 c0       	push   0xc00244df
c0008fdc:	e8 5e 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 f0 44 02 c0       	push   0xc00244f0
c0008fff:	e8 3b 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 01 45 02 c0       	push   0xc0024501
c0009022:	e8 18 40 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 12 45 02 c0       	push   0xc0024512
c0009045:	e8 f5 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 23 45 02 c0       	push   0xc0024523
c0009068:	e8 d2 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 34 45 02 c0       	push   0xc0024534
c000908b:	e8 af 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 45 45 02 c0       	push   0xc0024545
c00090ae:	e8 8c 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 56 45 02 c0       	push   0xc0024556
c00090d1:	e8 69 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 67 45 02 c0       	push   0xc0024567
c00090f4:	e8 46 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 85 44 02 c0       	mov    eax,0xc0024485
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 78 45 02 c0       	push   0xc0024578
c0009117:	e8 23 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 89 45 02 c0       	push   0xc0024589
c000913a:	e8 00 3f 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 9a 45 02 c0       	push   0xc002459a
c000915d:	e8 dd 3e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 ab 45 02 c0       	push   0xc00245ab
c0009180:	e8 ba 3e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 bc 45 02 c0       	push   0xc00245bc
c000919f:	e8 9b 3e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 4b 65 02 c0 	mov    DWORD PTR [esp+0x20],0xc002654b
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 8a 3e 00 00       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 81 44 02 c0       	mov    eax,0xc0024481
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 cd 45 02 c0       	push   0xc00245cd
c0009288:	e8 68 bd 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 d3 45 02 c0       	push   0xc00245d3
c00092c0:	e8 30 bd 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 db 98 00 00       	jmp    c0012be8 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 30 47 02 c0       	push   0xc0024730
c000935a:	e8 4e 0a 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000935f:	58                   	pop    eax
c0009360:	f6 05 80 8a 02 c0 04 	test   BYTE PTR ds:0xc0028a80,0x4
c0009367:	5a                   	pop    edx
c0009368:	0f 94 05 40 7e 02 c0 	sete   BYTE PTR ds:0xc0027e40
c000936f:	68 58 01 00 00       	push   0x158
c0009374:	68 d9 45 02 c0       	push   0xc00245d9
c0009379:	e8 c1 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000937e:	59                   	pop    ecx
c000937f:	5e                   	pop    esi
c0009380:	68 14 01 00 00       	push   0x114
c0009385:	68 ef 45 02 c0       	push   0xc00245ef
c000938a:	e8 b0 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000938f:	58                   	pop    eax
c0009390:	5a                   	pop    edx
c0009391:	6a 14                	push   0x14
c0009393:	68 03 46 02 c0       	push   0xc0024603
c0009398:	e8 a2 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000939d:	59                   	pop    ecx
c000939e:	5e                   	pop    esi
c000939f:	68 1f 07 00 00       	push   0x71f
c00093a4:	68 16 46 02 c0       	push   0xc0024616
c00093a9:	e8 91 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00093ae:	58                   	pop    eax
c00093af:	5a                   	pop    edx
c00093b0:	6a 5f                	push   0x5f
c00093b2:	68 2d 46 02 c0       	push   0xc002462d
c00093b7:	e8 83 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00093bc:	c7 04 24 43 46 02 c0 	mov    DWORD PTR [esp],0xc0024643
c00093c3:	e8 77 3c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00093c8:	c7 04 24 55 46 02 c0 	mov    DWORD PTR [esp],0xc0024655
c00093cf:	e8 d9 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00093d4:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093db:	e8 73 09 00 00       	call   c0009d53 <malloc>
c00093e0:	89 c6                	mov    esi,eax
c00093e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093e5:	e8 b6 90 00 00       	call   c00124a0 <ACPI::ACPI()>
c00093ea:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00093f0:	c7 04 24 6f 46 02 c0 	mov    DWORD PTR [esp],0xc002466f
c00093f7:	e8 b1 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00093fc:	59                   	pop    ecx
c00093fd:	5e                   	pop    esi
c00093fe:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0009404:	53                   	push   ebx
c0009405:	e8 a8 51 00 00       	call   c000e5b2 <Device::addChild(Device*)>
c000940a:	c7 04 24 54 47 02 c0 	mov    DWORD PTR [esp],0xc0024754
c0009411:	e8 97 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009416:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009419:	e8 f8 f8 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c000941e:	c7 04 24 74 47 02 c0 	mov    DWORD PTR [esp],0xc0024774
c0009425:	e8 83 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000942a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000942d:	e8 ee fa ff ff       	call   c0008f20 <Computer::displayFeatures()>
c0009432:	c7 04 24 89 46 02 c0 	mov    DWORD PTR [esp],0xc0024689
c0009439:	e8 6f 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000943e:	58                   	pop    eax
c000943f:	5a                   	pop    edx
c0009440:	6a 01                	push   0x1
c0009442:	53                   	push   ebx
c0009443:	e8 ec fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c0009448:	c7 04 24 31 44 02 c0 	mov    DWORD PTR [esp],0xc0024431
c000944f:	e8 59 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009454:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000945b:	e8 f3 08 00 00       	call   c0009d53 <malloc>
c0009460:	89 04 24             	mov    DWORD PTR [esp],eax
c0009463:	89 c6                	mov    esi,eax
c0009465:	e8 68 a2 00 00       	call   c00136d2 <CPU::CPU()>
c000946a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009470:	59                   	pop    ecx
c0009471:	58                   	pop    eax
c0009472:	56                   	push   esi
c0009473:	53                   	push   ebx
c0009474:	e8 39 51 00 00       	call   c000e5b2 <Device::addChild(Device*)>
c0009479:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000947f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009481:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009485:	6a 00                	push   0x0
c0009487:	6a 00                	push   0x0
c0009489:	50                   	push   eax
c000948a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000948d:	83 c4 14             	add    esp,0x14
c0009490:	68 94 47 02 c0       	push   0xc0024794
c0009495:	e8 13 09 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000949a:	e8 af 56 00 00       	call   c000eb4e <setupFPU()>
c000949f:	83 c4 10             	add    esp,0x10
c00094a2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094a8:	85 c0                	test   eax,eax
c00094aa:	74 1f                	je     c00094cb <Computer::open(int, int, void*)+0x17f>
c00094ac:	83 ec 08             	sub    esp,0x8
c00094af:	50                   	push   eax
c00094b0:	53                   	push   ebx
c00094b1:	e8 fc 50 00 00       	call   c000e5b2 <Device::addChild(Device*)>
c00094b6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094be:	6a 00                	push   0x0
c00094c0:	6a 00                	push   0x0
c00094c2:	6a 00                	push   0x0
c00094c4:	50                   	push   eax
c00094c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094c8:	83 c4 20             	add    esp,0x20
c00094cb:	83 ec 0c             	sub    esp,0xc
c00094ce:	68 9a 46 02 c0       	push   0xc002469a
c00094d3:	e8 d5 08 00 00       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00094d8:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c00094df:	e8 38 f7 00 00       	call   c0018c1c <setupMultitasking(void (*)())>
c00094e4:	83 c4 14             	add    esp,0x14
c00094e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <Computer::disableNMI()>:
c00094f0:	6a 00                	push   0x0
c00094f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00094f6:	e8 39 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00094fb:	58                   	pop    eax
c00094fc:	5a                   	pop    edx
c00094fd:	c3                   	ret    

c00094fe <Computer::writeCMOS(unsigned char, unsigned char)>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009509:	19 c0                	sbb    eax,eax
c000950b:	83 e0 80             	and    eax,0xffffff80
c000950e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009512:	e6 70                	out    0x70,al
c0009514:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009518:	e6 71                	out    0x71,al
c000951a:	c3                   	ret    
c000951b:	90                   	nop

c000951c <Computer::handleNMI()>:
c000951c:	56                   	push   esi
c000951d:	53                   	push   ebx
c000951e:	83 ec 10             	sub    esp,0x10
c0009521:	e4 92                	in     al,0x92
c0009523:	89 c6                	mov    esi,eax
c0009525:	e4 61                	in     al,0x61
c0009527:	68 b5 46 02 c0       	push   0xc00246b5
c000952c:	88 c3                	mov    bl,al
c000952e:	e8 0c 3b 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009533:	83 c4 10             	add    esp,0x10
c0009536:	83 e6 10             	and    esi,0x10
c0009539:	75 0d                	jne    c0009548 <Computer::handleNMI()+0x2c>
c000953b:	f6 c3 40             	test   bl,0x40
c000953e:	75 1d                	jne    c000955d <Computer::handleNMI()+0x41>
c0009540:	84 db                	test   bl,bl
c0009542:	78 2d                	js     c0009571 <Computer::handleNMI()+0x55>
c0009544:	58                   	pop    eax
c0009545:	5b                   	pop    ebx
c0009546:	5e                   	pop    esi
c0009547:	c3                   	ret    
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	68 c6 46 02 c0       	push   0xc00246c6
c0009550:	e8 a0 ba 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c0009555:	83 c4 10             	add    esp,0x10
c0009558:	f6 c3 40             	test   bl,0x40
c000955b:	74 e3                	je     c0009540 <Computer::handleNMI()+0x24>
c000955d:	83 ec 0c             	sub    esp,0xc
c0009560:	68 d3 46 02 c0       	push   0xc00246d3
c0009565:	e8 8b ba 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000956a:	83 c4 10             	add    esp,0x10
c000956d:	84 db                	test   bl,bl
c000956f:	79 d3                	jns    c0009544 <Computer::handleNMI()+0x28>
c0009571:	c7 44 24 10 dd 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc00246dd
c0009579:	5a                   	pop    edx
c000957a:	5b                   	pop    ebx
c000957b:	5e                   	pop    esi
c000957c:	e9 74 ba 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c0009581:	90                   	nop

c0009582 <Computer::setDiskActivityLight(int, bool)>:
c0009582:	56                   	push   esi
c0009583:	53                   	push   ebx
c0009584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009588:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000958d:	77 1b                	ja     c00095aa <Computer::setDiskActivityLight(int, bool)+0x28>
c000958f:	e4 92                	in     al,0x92
c0009591:	bb 40 00 00 00       	mov    ebx,0x40
c0009596:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000959a:	89 da                	mov    edx,ebx
c000959c:	d3 e2                	shl    edx,cl
c000959e:	89 f1                	mov    ecx,esi
c00095a0:	f7 d2                	not    edx
c00095a2:	d3 e3                	shl    ebx,cl
c00095a4:	21 d0                	and    eax,edx
c00095a6:	09 d8                	or     eax,ebx
c00095a8:	e6 92                	out    0x92,al
c00095aa:	5b                   	pop    ebx
c00095ab:	5e                   	pop    esi
c00095ac:	c3                   	ret    
c00095ad:	90                   	nop

c00095ae <GDTEntry::setBase(unsigned int)>:
c00095ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095b6:	89 c1                	mov    ecx,eax
c00095b8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095bc:	c1 e9 10             	shr    ecx,0x10
c00095bf:	c1 e8 18             	shr    eax,0x18
c00095c2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095c5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095c8:	c3                   	ret    
c00095c9:	90                   	nop

c00095ca <GDTEntry::setLimit(unsigned int)>:
c00095ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095d5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095d8:	83 e2 f0             	and    edx,0xfffffff0
c00095db:	c1 e8 10             	shr    eax,0x10
c00095de:	83 e0 0f             	and    eax,0xf
c00095e1:	09 d0                	or     eax,edx
c00095e3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00095e6:	c3                   	ret    
c00095e7:	90                   	nop

c00095e8 <GDT::GDT()>:
c00095e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00095fc:	90                   	nop
c00095fd:	c3                   	ret    

c00095fe <GDT::addEntry(GDTEntry)>:
c00095fe:	53                   	push   ebx
c00095ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009607:	8b 02                	mov    eax,DWORD PTR [edx]
c0009609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000960d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009611:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009615:	8d 48 01             	lea    ecx,[eax+0x1]
c0009618:	c1 e0 03             	shl    eax,0x3
c000961b:	89 0a                	mov    DWORD PTR [edx],ecx
c000961d:	5b                   	pop    ebx
c000961e:	c3                   	ret    
c000961f:	90                   	nop

c0009620 <GDT::getNumberOfEntries()>:
c0009620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009624:	8b 00                	mov    eax,DWORD PTR [eax]
c0009626:	c3                   	ret    
c0009627:	90                   	nop

c0009628 <GDT::flush()>:
c0009628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000962c:	8b 10                	mov    edx,DWORD PTR [eax]
c000962e:	83 c0 04             	add    eax,0x4
c0009631:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009638:	a3 72 8a 02 c0       	mov    ds:0xc0028a72,eax
c000963d:	66 89 15 70 8a 02 c0 	mov    WORD PTR ds:0xc0028a70,dx
c0009644:	e9 34 6d ff ff       	jmp    c000037d <loadGDT>
c0009649:	90                   	nop

c000964a <GDT::setup()>:
c000964a:	55                   	push   ebp
c000964b:	57                   	push   edi
c000964c:	56                   	push   esi
c000964d:	53                   	push   ebx
c000964e:	83 ec 3c             	sub    esp,0x3c
c0009651:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009655:	6a 00                	push   0x0
c0009657:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000965b:	53                   	push   ebx
c000965c:	e8 4d ff ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c0009661:	6a 00                	push   0x0
c0009663:	53                   	push   ebx
c0009664:	e8 61 ff ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c0009669:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009671:	6a 00                	push   0x0
c0009673:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009677:	53                   	push   ebx
c0009678:	e8 31 ff ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c000967d:	68 ff ff ff 00       	push   0xffffff
c0009682:	53                   	push   ebx
c0009683:	e8 42 ff ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c0009688:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000968c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009691:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009696:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000969a:	83 c4 20             	add    esp,0x20
c000969d:	6a 00                	push   0x0
c000969f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00096a3:	53                   	push   ebx
c00096a4:	e8 05 ff ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c00096a9:	68 ff ff ff 00       	push   0xffffff
c00096ae:	53                   	push   ebx
c00096af:	e8 16 ff ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c00096b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00096bc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096c0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00096c4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00096c8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096cd:	0d 00 92 c0 00       	or     eax,0xc09200
c00096d2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00096d6:	89 d8                	mov    eax,ebx
c00096d8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00096dc:	80 cc 60             	or     ah,0x60
c00096df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096e3:	83 c4 0c             	add    esp,0xc
c00096e6:	89 f8                	mov    eax,edi
c00096e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096ec:	80 cc 60             	or     ah,0x60
c00096ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096f3:	89 c7                	mov    edi,eax
c00096f5:	55                   	push   ebp
c00096f6:	e8 03 ff ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c00096fb:	83 c4 0c             	add    esp,0xc
c00096fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009702:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009706:	55                   	push   ebp
c0009707:	e8 f2 fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000970c:	83 c4 0c             	add    esp,0xc
c000970f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009713:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009717:	55                   	push   ebp
c0009718:	e8 e1 fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000971d:	83 c4 0c             	add    esp,0xc
c0009720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009724:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009728:	53                   	push   ebx
c0009729:	51                   	push   ecx
c000972a:	55                   	push   ebp
c000972b:	e8 ce fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c0009730:	83 c4 0c             	add    esp,0xc
c0009733:	57                   	push   edi
c0009734:	56                   	push   esi
c0009735:	55                   	push   ebp
c0009736:	e8 c3 fe ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000973b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000973e:	e8 e5 fe ff ff       	call   c0009628 <GDT::flush()>
c0009743:	83 c4 4c             	add    esp,0x4c
c0009746:	5b                   	pop    ebx
c0009747:	5e                   	pop    esi
c0009748:	5f                   	pop    edi
c0009749:	5d                   	pop    ebp
c000974a:	c3                   	ret    

c000974b <idleFunction(void*)>:
c000974b:	53                   	push   ebx
c000974c:	83 ec 08             	sub    esp,0x8
c000974f:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0009754:	48                   	dec    eax
c0009755:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000975a:	75 01                	jne    c000975d <idleFunction(void*)+0x12>
c000975c:	fb                   	sti    
c000975d:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0009762:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009768:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000976f:	74 3c                	je     c00097ad <idleFunction(void*)+0x62>
c0009771:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009778:	74 33                	je     c00097ad <idleFunction(void*)+0x62>
c000977a:	31 db                	xor    ebx,ebx
c000977c:	52                   	push   edx
c000977d:	52                   	push   edx
c000977e:	68 e1 00 00 00       	push   0xe1
c0009783:	50                   	push   eax
c0009784:	e8 dd fa ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0009789:	53                   	push   ebx
c000978a:	83 e0 02             	and    eax,0x2
c000978d:	50                   	push   eax
c000978e:	68 e1 00 00 00       	push   0xe1
c0009793:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0009799:	e8 f4 fa ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c000979e:	83 c4 20             	add    esp,0x20
c00097a1:	e8 0e 6a ff ff       	call   c00001b4 <doTPAUSE>
c00097a6:	e8 e3 98 01 00       	call   c002308e <idleCommon()>
c00097ab:	eb f4                	jmp    c00097a1 <idleFunction(void*)+0x56>
c00097ad:	fb                   	sti    
c00097ae:	f4                   	hlt    
c00097af:	e8 da 98 01 00       	call   c002308e <idleCommon()>
c00097b4:	eb f7                	jmp    c00097ad <idleFunction(void*)+0x62>
c00097b6:	66 90                	xchg   ax,ax

c00097b8 <IDTEntry::IDTEntry(bool)>:
c00097b8:	83 ec 04             	sub    esp,0x4
c00097bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097bf:	88 04 24             	mov    BYTE PTR [esp],al
c00097c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097c6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097d8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097db:	83 e2 f0             	and    edx,0xfffffff0
c00097de:	83 ca 0e             	or     edx,0xe
c00097e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097eb:	83 e2 ef             	and    edx,0xffffffef
c00097ee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00097f1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00097f5:	74 05                	je     c00097fc <IDTEntry::IDTEntry(bool)+0x44>
c00097f7:	b2 03                	mov    dl,0x3
c00097f9:	eb 05                	jmp    c0009800 <IDTEntry::IDTEntry(bool)+0x48>
c00097fb:	90                   	nop
c00097fc:	b2 00                	mov    dl,0x0
c00097fe:	66 90                	xchg   ax,ax
c0009800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009804:	83 e2 03             	and    edx,0x3
c0009807:	88 d1                	mov    cl,dl
c0009809:	c1 e1 05             	shl    ecx,0x5
c000980c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000980f:	83 e2 9f             	and    edx,0xffffff9f
c0009812:	09 ca                	or     edx,ecx
c0009814:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000981b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000981e:	83 ca 80             	or     edx,0xffffff80
c0009821:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009824:	90                   	nop
c0009825:	83 c4 04             	add    esp,0x4
c0009828:	c3                   	ret    
c0009829:	90                   	nop

c000982a <IDTEntry::setOffset(unsigned int)>:
c000982a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000982e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009832:	66 89 02             	mov    WORD PTR [edx],ax
c0009835:	c1 e8 10             	shr    eax,0x10
c0009838:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000983c:	c3                   	ret    
c000983d:	90                   	nop
c000983e:	66 90                	xchg   ax,ax

c0009840 <IDT::IDT()>:
c0009840:	90                   	nop
c0009841:	c3                   	ret    

c0009842 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009846:	83 c0 30             	add    eax,0x30
c0009849:	c3                   	ret    

c000984a <IDT::addEntry(IDTEntry, int)>:
c000984a:	53                   	push   ebx
c000984b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000984f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009853:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000985b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000985e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0009862:	5b                   	pop    ebx
c0009863:	c3                   	ret    

c0009864 <IDT::addEntry(int, void (*)(), bool)>:
c0009864:	53                   	push   ebx
c0009865:	83 ec 10             	sub    esp,0x10
c0009868:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000986d:	50                   	push   eax
c000986e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009872:	53                   	push   ebx
c0009873:	e8 40 ff ff ff       	call   c00097b8 <IDTEntry::IDTEntry(bool)>
c0009878:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000987c:	53                   	push   ebx
c000987d:	e8 a8 ff ff ff       	call   c000982a <IDTEntry::setOffset(unsigned int)>
c0009882:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009886:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000988a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000988e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009892:	e8 b3 ff ff ff       	call   c000984a <IDT::addEntry(IDTEntry, int)>
c0009897:	83 c4 30             	add    esp,0x30
c000989a:	5b                   	pop    ebx
c000989b:	c3                   	ret    

c000989c <IDT::flush()>:
c000989c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098a0:	66 c7 05 78 8a 02 c0 ff 07 	mov    WORD PTR ds:0xc0028a78,0x7ff
c00098a9:	a3 7a 8a 02 c0       	mov    ds:0xc0028a7a,eax
c00098ae:	0f 01 1d 78 8a 02 c0 	lidtd  ds:0xc0028a78
c00098b5:	c3                   	ret    

c00098b6 <IDT::setup()>:
c00098b6:	57                   	push   edi
c00098b7:	56                   	push   esi
c00098b8:	53                   	push   ebx
c00098b9:	83 ec 10             	sub    esp,0x10
c00098bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098c0:	6a 00                	push   0x0
c00098c2:	68 9d 03 00 c0       	push   0xc000039d
c00098c7:	6a 00                	push   0x0
c00098c9:	53                   	push   ebx
c00098ca:	e8 95 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098cf:	6a 00                	push   0x0
c00098d1:	68 ad 03 00 c0       	push   0xc00003ad
c00098d6:	6a 01                	push   0x1
c00098d8:	53                   	push   ebx
c00098d9:	e8 86 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098de:	83 c4 20             	add    esp,0x20
c00098e1:	6a 00                	push   0x0
c00098e3:	68 b7 03 00 c0       	push   0xc00003b7
c00098e8:	6a 02                	push   0x2
c00098ea:	53                   	push   ebx
c00098eb:	e8 74 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098f0:	6a 00                	push   0x0
c00098f2:	68 c1 03 00 c0       	push   0xc00003c1
c00098f7:	6a 03                	push   0x3
c00098f9:	53                   	push   ebx
c00098fa:	e8 65 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00098ff:	83 c4 20             	add    esp,0x20
c0009902:	6a 00                	push   0x0
c0009904:	68 cb 03 00 c0       	push   0xc00003cb
c0009909:	6a 04                	push   0x4
c000990b:	53                   	push   ebx
c000990c:	e8 53 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009911:	6a 00                	push   0x0
c0009913:	68 d5 03 00 c0       	push   0xc00003d5
c0009918:	6a 05                	push   0x5
c000991a:	53                   	push   ebx
c000991b:	e8 44 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009920:	83 c4 20             	add    esp,0x20
c0009923:	6a 00                	push   0x0
c0009925:	68 df 03 00 c0       	push   0xc00003df
c000992a:	6a 06                	push   0x6
c000992c:	53                   	push   ebx
c000992d:	e8 32 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009932:	6a 00                	push   0x0
c0009934:	68 e9 03 00 c0       	push   0xc00003e9
c0009939:	6a 07                	push   0x7
c000993b:	53                   	push   ebx
c000993c:	e8 23 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009941:	83 c4 20             	add    esp,0x20
c0009944:	6a 00                	push   0x0
c0009946:	68 f3 03 00 c0       	push   0xc00003f3
c000994b:	6a 08                	push   0x8
c000994d:	53                   	push   ebx
c000994e:	e8 11 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009953:	6a 00                	push   0x0
c0009955:	68 fb 03 00 c0       	push   0xc00003fb
c000995a:	6a 09                	push   0x9
c000995c:	53                   	push   ebx
c000995d:	e8 02 ff ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009962:	83 c4 20             	add    esp,0x20
c0009965:	6a 00                	push   0x0
c0009967:	68 05 04 00 c0       	push   0xc0000405
c000996c:	6a 0a                	push   0xa
c000996e:	53                   	push   ebx
c000996f:	e8 f0 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009974:	6a 00                	push   0x0
c0009976:	68 0d 04 00 c0       	push   0xc000040d
c000997b:	6a 0b                	push   0xb
c000997d:	53                   	push   ebx
c000997e:	e8 e1 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009983:	83 c4 20             	add    esp,0x20
c0009986:	6a 00                	push   0x0
c0009988:	68 15 04 00 c0       	push   0xc0000415
c000998d:	6a 0c                	push   0xc
c000998f:	53                   	push   ebx
c0009990:	e8 cf fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009995:	6a 00                	push   0x0
c0009997:	68 1d 04 00 c0       	push   0xc000041d
c000999c:	6a 0d                	push   0xd
c000999e:	53                   	push   ebx
c000999f:	e8 c0 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099a4:	83 c4 20             	add    esp,0x20
c00099a7:	6a 00                	push   0x0
c00099a9:	68 25 04 00 c0       	push   0xc0000425
c00099ae:	6a 0e                	push   0xe
c00099b0:	53                   	push   ebx
c00099b1:	e8 ae fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099b6:	6a 00                	push   0x0
c00099b8:	68 2d 04 00 c0       	push   0xc000042d
c00099bd:	6a 0f                	push   0xf
c00099bf:	53                   	push   ebx
c00099c0:	e8 9f fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099c5:	83 c4 20             	add    esp,0x20
c00099c8:	6a 00                	push   0x0
c00099ca:	68 37 04 00 c0       	push   0xc0000437
c00099cf:	6a 10                	push   0x10
c00099d1:	53                   	push   ebx
c00099d2:	e8 8d fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099d7:	6a 00                	push   0x0
c00099d9:	68 41 04 00 c0       	push   0xc0000441
c00099de:	6a 11                	push   0x11
c00099e0:	53                   	push   ebx
c00099e1:	e8 7e fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099e6:	83 c4 20             	add    esp,0x20
c00099e9:	6a 00                	push   0x0
c00099eb:	68 4b 04 00 c0       	push   0xc000044b
c00099f0:	6a 12                	push   0x12
c00099f2:	53                   	push   ebx
c00099f3:	e8 6c fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c00099f8:	6a 01                	push   0x1
c00099fa:	68 e5 04 00 c0       	push   0xc00004e5
c00099ff:	6a 60                	push   0x60
c0009a01:	53                   	push   ebx
c0009a02:	e8 5d fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a07:	83 c4 20             	add    esp,0x20
c0009a0a:	6a 00                	push   0x0
c0009a0c:	68 ec 04 00 c0       	push   0xc00004ec
c0009a11:	6a 20                	push   0x20
c0009a13:	53                   	push   ebx
c0009a14:	e8 4b fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a19:	6a 00                	push   0x0
c0009a1b:	68 d7 04 00 c0       	push   0xc00004d7
c0009a20:	6a 21                	push   0x21
c0009a22:	53                   	push   ebx
c0009a23:	e8 3c fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a28:	83 c4 20             	add    esp,0x20
c0009a2b:	6a 00                	push   0x0
c0009a2d:	68 de 04 00 c0       	push   0xc00004de
c0009a32:	6a 22                	push   0x22
c0009a34:	53                   	push   ebx
c0009a35:	e8 2a fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a3a:	6a 00                	push   0x0
c0009a3c:	68 55 04 00 c0       	push   0xc0000455
c0009a41:	6a 23                	push   0x23
c0009a43:	53                   	push   ebx
c0009a44:	e8 1b fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a49:	83 c4 20             	add    esp,0x20
c0009a4c:	6a 00                	push   0x0
c0009a4e:	68 5f 04 00 c0       	push   0xc000045f
c0009a53:	6a 24                	push   0x24
c0009a55:	53                   	push   ebx
c0009a56:	e8 09 fe ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a5b:	6a 00                	push   0x0
c0009a5d:	68 69 04 00 c0       	push   0xc0000469
c0009a62:	6a 25                	push   0x25
c0009a64:	53                   	push   ebx
c0009a65:	e8 fa fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a6a:	83 c4 20             	add    esp,0x20
c0009a6d:	6a 00                	push   0x0
c0009a6f:	68 73 04 00 c0       	push   0xc0000473
c0009a74:	6a 26                	push   0x26
c0009a76:	53                   	push   ebx
c0009a77:	e8 e8 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a7c:	6a 00                	push   0x0
c0009a7e:	68 7d 04 00 c0       	push   0xc000047d
c0009a83:	6a 27                	push   0x27
c0009a85:	53                   	push   ebx
c0009a86:	e8 d9 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a8b:	83 c4 20             	add    esp,0x20
c0009a8e:	6a 00                	push   0x0
c0009a90:	68 87 04 00 c0       	push   0xc0000487
c0009a95:	6a 28                	push   0x28
c0009a97:	53                   	push   ebx
c0009a98:	e8 c7 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009a9d:	6a 00                	push   0x0
c0009a9f:	68 91 04 00 c0       	push   0xc0000491
c0009aa4:	6a 29                	push   0x29
c0009aa6:	53                   	push   ebx
c0009aa7:	e8 b8 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009aac:	83 c4 20             	add    esp,0x20
c0009aaf:	6a 00                	push   0x0
c0009ab1:	68 9b 04 00 c0       	push   0xc000049b
c0009ab6:	6a 2a                	push   0x2a
c0009ab8:	53                   	push   ebx
c0009ab9:	e8 a6 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009abe:	6a 00                	push   0x0
c0009ac0:	68 a5 04 00 c0       	push   0xc00004a5
c0009ac5:	6a 2b                	push   0x2b
c0009ac7:	53                   	push   ebx
c0009ac8:	e8 97 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009acd:	83 c4 20             	add    esp,0x20
c0009ad0:	6a 00                	push   0x0
c0009ad2:	68 af 04 00 c0       	push   0xc00004af
c0009ad7:	6a 2c                	push   0x2c
c0009ad9:	53                   	push   ebx
c0009ada:	e8 85 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009adf:	6a 00                	push   0x0
c0009ae1:	68 b9 04 00 c0       	push   0xc00004b9
c0009ae6:	6a 2d                	push   0x2d
c0009ae8:	53                   	push   ebx
c0009ae9:	e8 76 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009aee:	83 c4 20             	add    esp,0x20
c0009af1:	6a 00                	push   0x0
c0009af3:	68 c3 04 00 c0       	push   0xc00004c3
c0009af8:	6a 2e                	push   0x2e
c0009afa:	53                   	push   ebx
c0009afb:	e8 64 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b00:	6a 00                	push   0x0
c0009b02:	68 cd 04 00 c0       	push   0xc00004cd
c0009b07:	6a 2f                	push   0x2f
c0009b09:	53                   	push   ebx
c0009b0a:	e8 55 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b0f:	83 c4 20             	add    esp,0x20
c0009b12:	6a 00                	push   0x0
c0009b14:	68 23 05 00 c0       	push   0xc0000523
c0009b19:	6a 30                	push   0x30
c0009b1b:	53                   	push   ebx
c0009b1c:	e8 43 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b21:	6a 00                	push   0x0
c0009b23:	68 2d 05 00 c0       	push   0xc000052d
c0009b28:	6a 31                	push   0x31
c0009b2a:	53                   	push   ebx
c0009b2b:	e8 34 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b30:	83 c4 20             	add    esp,0x20
c0009b33:	6a 00                	push   0x0
c0009b35:	68 37 05 00 c0       	push   0xc0000537
c0009b3a:	6a 32                	push   0x32
c0009b3c:	53                   	push   ebx
c0009b3d:	e8 22 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b42:	6a 00                	push   0x0
c0009b44:	68 41 05 00 c0       	push   0xc0000541
c0009b49:	6a 33                	push   0x33
c0009b4b:	53                   	push   ebx
c0009b4c:	e8 13 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b51:	83 c4 20             	add    esp,0x20
c0009b54:	6a 00                	push   0x0
c0009b56:	68 4b 05 00 c0       	push   0xc000054b
c0009b5b:	6a 34                	push   0x34
c0009b5d:	53                   	push   ebx
c0009b5e:	e8 01 fd ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b63:	6a 00                	push   0x0
c0009b65:	68 55 05 00 c0       	push   0xc0000555
c0009b6a:	6a 35                	push   0x35
c0009b6c:	53                   	push   ebx
c0009b6d:	e8 f2 fc ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b72:	83 c4 20             	add    esp,0x20
c0009b75:	6a 00                	push   0x0
c0009b77:	68 5f 05 00 c0       	push   0xc000055f
c0009b7c:	6a 36                	push   0x36
c0009b7e:	53                   	push   ebx
c0009b7f:	e8 e0 fc ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b84:	6a 00                	push   0x0
c0009b86:	68 69 05 00 c0       	push   0xc0000569
c0009b8b:	6a 37                	push   0x37
c0009b8d:	53                   	push   ebx
c0009b8e:	e8 d1 fc ff ff       	call   c0009864 <IDT::addEntry(int, void (*)(), bool)>
c0009b93:	83 c4 1c             	add    esp,0x1c
c0009b96:	6a 03                	push   0x3
c0009b98:	6a 02                	push   0x2
c0009b9a:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c0009ba0:	e8 1d 29 00 00       	call   c000c4c2 <VAS::allocatePages(int, int)>
c0009ba5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009bac:	89 c6                	mov    esi,eax
c0009bae:	e8 a0 01 00 00       	call   c0009d53 <malloc>
c0009bb3:	81 c6 00 20 00 00    	add    esi,0x2000
c0009bb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bbc:	89 c7                	mov    edi,eax
c0009bbe:	e8 99 1a 00 00       	call   c000b65c <TSS::TSS()>
c0009bc3:	83 c4 0c             	add    esp,0xc
c0009bc6:	68 f3 03 00 c0       	push   0xc00003f3
c0009bcb:	56                   	push   esi
c0009bcc:	57                   	push   edi
c0009bcd:	e8 ce 1a 00 00       	call   c000b6a0 <TSS::setup(unsigned long, unsigned long)>
c0009bd2:	89 c6                	mov    esi,eax
c0009bd4:	58                   	pop    eax
c0009bd5:	5a                   	pop    edx
c0009bd6:	6a 00                	push   0x0
c0009bd8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009bdc:	50                   	push   eax
c0009bdd:	e8 d6 fb ff ff       	call   c00097b8 <IDTEntry::IDTEntry(bool)>
c0009be2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009beb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009bf2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009bf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfc:	80 ce 05             	or     dh,0x5
c0009bff:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c0a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009c0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009c10:	e8 87 fc ff ff       	call   c000989c <IDT::flush()>
c0009c15:	83 c4 20             	add    esp,0x20
c0009c18:	5b                   	pop    ebx
c0009c19:	5e                   	pop    esi
c0009c1a:	5f                   	pop    edi
c0009c1b:	c3                   	ret    

c0009c1c <sbrk>:
c0009c1c:	55                   	push   ebp
c0009c1d:	57                   	push   edi
c0009c1e:	56                   	push   esi
c0009c1f:	53                   	push   ebx
c0009c20:	83 ec 24             	sub    esp,0x24
c0009c23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c27:	53                   	push   ebx
c0009c28:	68 e4 47 02 c0       	push   0xc00247e4
c0009c2d:	e8 0d 34 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009c32:	83 c4 10             	add    esp,0x10
c0009c35:	85 db                	test   ebx,ebx
c0009c37:	74 5f                	je     c0009c98 <sbrk+0x7c>
c0009c39:	78 64                	js     c0009c9f <sbrk+0x83>
c0009c3b:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c0009c40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c44:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c4a:	89 dd                	mov    ebp,ebx
c0009c4c:	78 69                	js     c0009cb7 <sbrk+0x9b>
c0009c4e:	c1 fd 0c             	sar    ebp,0xc
c0009c51:	bb 00 00 00 00       	mov    ebx,0x0
c0009c56:	8b 35 90 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b90
c0009c5c:	8b 3d d8 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027cd8
c0009c62:	e8 a3 07 00 00       	call   c000a40a <Phys::allocatePage()>
c0009c67:	68 01 04 00 00       	push   0x401
c0009c6c:	57                   	push   edi
c0009c6d:	50                   	push   eax
c0009c6e:	56                   	push   esi
c0009c6f:	e8 4c 27 00 00       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c74:	81 05 d8 7c 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027cd8,0x1000
c0009c7e:	43                   	inc    ebx
c0009c7f:	83 c4 10             	add    esp,0x10
c0009c82:	39 dd                	cmp    ebp,ebx
c0009c84:	75 d0                	jne    c0009c56 <sbrk+0x3a>
c0009c86:	0f 20 d8             	mov    eax,cr3
c0009c89:	0f 22 d8             	mov    cr3,eax
c0009c8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c90:	83 c4 1c             	add    esp,0x1c
c0009c93:	5b                   	pop    ebx
c0009c94:	5e                   	pop    esi
c0009c95:	5f                   	pop    edi
c0009c96:	5d                   	pop    ebp
c0009c97:	c3                   	ret    
c0009c98:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c0009c9d:	eb f1                	jmp    c0009c90 <sbrk+0x74>
c0009c9f:	83 ec 08             	sub    esp,0x8
c0009ca2:	53                   	push   ebx
c0009ca3:	68 10 48 02 c0       	push   0xc0024810
c0009ca8:	e8 92 33 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009cad:	83 c4 10             	add    esp,0x10
c0009cb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009cb5:	eb d9                	jmp    c0009c90 <sbrk+0x74>
c0009cb7:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009cbd:	eb 8f                	jmp    c0009c4e <sbrk+0x32>

c0009cbf <mmap>:
c0009cbf:	83 ec 18             	sub    esp,0x18
c0009cc2:	68 02 48 02 c0       	push   0xc0024802
c0009cc7:	e8 29 b3 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c0009ccc:	b8 00 00 00 00       	mov    eax,0x0
c0009cd1:	83 c4 1c             	add    esp,0x1c
c0009cd4:	c3                   	ret    

c0009cd5 <munmap>:
c0009cd5:	83 ec 18             	sub    esp,0x18
c0009cd8:	68 07 48 02 c0       	push   0xc0024807
c0009cdd:	e8 13 b3 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c0009ce2:	b8 00 00 00 00       	mov    eax,0x0
c0009ce7:	83 c4 1c             	add    esp,0x1c
c0009cea:	c3                   	ret    

c0009ceb <liballoc_lock()>:
c0009ceb:	fa                   	cli    
c0009cec:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0009cf2:	b8 00 00 00 00       	mov    eax,0x0
c0009cf7:	c3                   	ret    

c0009cf8 <liballoc_unlock()>:
c0009cf8:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0009cfd:	48                   	dec    eax
c0009cfe:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0009d03:	75 01                	jne    c0009d06 <liballoc_unlock()+0xe>
c0009d05:	fb                   	sti    
c0009d06:	b8 00 00 00 00       	mov    eax,0x0
c0009d0b:	c3                   	ret    

c0009d0c <liballoc_alloc(int)>:
c0009d0c:	83 ec 10             	sub    esp,0x10
c0009d0f:	6a 01                	push   0x1
c0009d11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d15:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c0009d1b:	e8 a2 27 00 00       	call   c000c4c2 <VAS::allocatePages(int, int)>
c0009d20:	83 c4 1c             	add    esp,0x1c
c0009d23:	c3                   	ret    

c0009d24 <liballoc_free(void*, int)>:
c0009d24:	83 ec 14             	sub    esp,0x14
c0009d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d2b:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c0009d31:	e8 36 24 00 00       	call   c000c16c <VAS::freeAllocatedPages(unsigned long)>
c0009d36:	b8 00 00 00 00       	mov    eax,0x0
c0009d3b:	83 c4 1c             	add    esp,0x1c
c0009d3e:	c3                   	ret    

c0009d3f <realloc>:
c0009d3f:	83 ec 14             	sub    esp,0x14
c0009d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4a:	e8 09 78 ff ff       	call   c0001558 <dlrealloc>
c0009d4f:	83 c4 1c             	add    esp,0x1c
c0009d52:	c3                   	ret    

c0009d53 <malloc>:
c0009d53:	83 ec 18             	sub    esp,0x18
c0009d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5a:	e8 bc 72 ff ff       	call   c000101b <dlmalloc>
c0009d5f:	83 c4 1c             	add    esp,0x1c
c0009d62:	c3                   	ret    

c0009d63 <free>:
c0009d63:	83 ec 18             	sub    esp,0x18
c0009d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d6a:	e8 51 6f ff ff       	call   c0000cc0 <dlfree>
c0009d6f:	83 c4 1c             	add    esp,0x1c
c0009d72:	c3                   	ret    

c0009d73 <rfree>:
c0009d73:	83 ec 18             	sub    esp,0x18
c0009d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d7a:	e8 41 6f ff ff       	call   c0000cc0 <dlfree>
c0009d7f:	83 c4 1c             	add    esp,0x1c
c0009d82:	c3                   	ret    

c0009d83 <calloc>:
c0009d83:	56                   	push   esi
c0009d84:	53                   	push   ebx
c0009d85:	83 ec 10             	sub    esp,0x10
c0009d88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009d8c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009d91:	53                   	push   ebx
c0009d92:	e8 bc ff ff ff       	call   c0009d53 <malloc>
c0009d97:	89 c6                	mov    esi,eax
c0009d99:	83 c4 0c             	add    esp,0xc
c0009d9c:	53                   	push   ebx
c0009d9d:	6a 00                	push   0x0
c0009d9f:	50                   	push   eax
c0009da0:	e8 d7 68 ff ff       	call   c000067c <memset>
c0009da5:	89 f0                	mov    eax,esi
c0009da7:	83 c4 14             	add    esp,0x14
c0009daa:	5b                   	pop    ebx
c0009dab:	5e                   	pop    esi
c0009dac:	c3                   	ret    

c0009dad <Krnl::setBootMessage(char const*)>:
c0009dad:	57                   	push   edi
c0009dae:	56                   	push   esi
c0009daf:	53                   	push   ebx
c0009db0:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009db6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009dbd:	68 9e 00 00 00       	push   0x9e
c0009dc2:	6a 00                	push   0x0
c0009dc4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009dc8:	56                   	push   esi
c0009dc9:	e8 ae 68 ff ff       	call   c000067c <memset>
c0009dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009dd1:	e8 c2 68 ff ff       	call   c0000698 <strlen>
c0009dd6:	ba 50 00 00 00       	mov    edx,0x50
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	29 c2                	sub    edx,eax
c0009de0:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009de4:	d1 ea                	shr    edx,1
c0009de6:	84 c0                	test   al,al
c0009de8:	74 19                	je     c0009e03 <Krnl::setBootMessage(char const*)+0x56>
c0009dea:	01 d2                	add    edx,edx
c0009dec:	43                   	inc    ebx
c0009ded:	01 f2                	add    edx,esi
c0009def:	80 cc 0f             	or     ah,0xf
c0009df2:	83 c2 02             	add    edx,0x2
c0009df5:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009df9:	43                   	inc    ebx
c0009dfa:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009dff:	84 c0                	test   al,al
c0009e01:	75 ec                	jne    c0009def <Krnl::setBootMessage(char const*)+0x42>
c0009e03:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e08:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e0f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e15:	5b                   	pop    ebx
c0009e16:	5e                   	pop    esi
c0009e17:	5f                   	pop    edi
c0009e18:	c3                   	ret    

c0009e19 <kernel_main>:
c0009e19:	57                   	push   edi
c0009e1a:	56                   	push   esi
c0009e1b:	53                   	push   ebx
c0009e1c:	83 ec 20             	sub    esp,0x20
c0009e1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e24:	a3 80 8a 02 c0       	mov    ds:0xc0028a80,eax
c0009e29:	f6 c4 08             	test   ah,0x8
c0009e2c:	0f 85 7a 03 00 00    	jne    c000a1ac <kernel_main+0x393>
c0009e32:	31 f6                	xor    esi,esi
c0009e34:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e39:	89 f0                	mov    eax,esi
c0009e3b:	89 fa                	mov    edx,edi
c0009e3d:	ee                   	out    dx,al
c0009e3e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e43:	b0 80                	mov    al,0x80
c0009e45:	89 da                	mov    edx,ebx
c0009e47:	ee                   	out    dx,al
c0009e48:	b1 03                	mov    cl,0x3
c0009e4a:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e4f:	88 c8                	mov    al,cl
c0009e51:	ee                   	out    dx,al
c0009e52:	89 f0                	mov    eax,esi
c0009e54:	89 fa                	mov    edx,edi
c0009e56:	ee                   	out    dx,al
c0009e57:	88 c8                	mov    al,cl
c0009e59:	89 da                	mov    edx,ebx
c0009e5b:	ee                   	out    dx,al
c0009e5c:	b0 c7                	mov    al,0xc7
c0009e5e:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e63:	ee                   	out    dx,al
c0009e64:	b0 0b                	mov    al,0xb
c0009e66:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e6b:	ee                   	out    dx,al
c0009e6c:	83 ec 0c             	sub    esp,0xc
c0009e6f:	68 40 48 02 c0       	push   0xc0024840
c0009e74:	e8 c6 31 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009e83:	0f 85 eb 02 00 00    	jne    c000a174 <kernel_main+0x35b>
c0009e89:	e8 d2 0c 00 00       	call   c000ab60 <installVgaTextImplementation()>
c0009e8e:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009e95:	0f 85 94 02 00 00    	jne    c000a12f <kernel_main+0x316>
c0009e9b:	0f b6 05 e0 7c 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ce0
c0009ea2:	84 c0                	test   al,al
c0009ea4:	74 7b                	je     c0009f21 <kernel_main+0x108>
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	bf 0a 00 00 00       	mov    edi,0xa
c0009ead:	be 05 00 00 00       	mov    esi,0x5
c0009eb2:	31 c9                	xor    ecx,ecx
c0009eb4:	eb 2a                	jmp    c0009ee0 <kernel_main+0xc7>
c0009eb6:	3c 0d                	cmp    al,0xd
c0009eb8:	74 1a                	je     c0009ed4 <kernel_main+0xbb>
c0009eba:	3c 0a                	cmp    al,0xa
c0009ebc:	74 40                	je     c0009efe <kernel_main+0xe5>
c0009ebe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ec1:	80 cc 0e             	or     ah,0xe
c0009ec4:	c1 e2 04             	shl    edx,0x4
c0009ec7:	01 ca                	add    edx,ecx
c0009ec9:	41                   	inc    ecx
c0009eca:	01 fa                	add    edx,edi
c0009ecc:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009ed4:	43                   	inc    ebx
c0009ed5:	0f b6 83 e0 7c 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8320]
c0009edc:	84 c0                	test   al,al
c0009ede:	74 32                	je     c0009f12 <kernel_main+0xf9>
c0009ee0:	80 b9 16 7d 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd82ea],0xdb
c0009ee7:	75 cd                	jne    c0009eb6 <kernel_main+0x9d>
c0009ee9:	0f b6 91 15 7d 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd82eb]
c0009ef0:	83 e2 fe             	and    edx,0xfffffffe
c0009ef3:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009ef9:	75 bb                	jne    c0009eb6 <kernel_main+0x9d>
c0009efb:	47                   	inc    edi
c0009efc:	eb b8                	jmp    c0009eb6 <kernel_main+0x9d>
c0009efe:	43                   	inc    ebx
c0009eff:	46                   	inc    esi
c0009f00:	31 c9                	xor    ecx,ecx
c0009f02:	0f b6 83 e0 7c 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8320]
c0009f09:	bf 0a 00 00 00       	mov    edi,0xa
c0009f0e:	84 c0                	test   al,al
c0009f10:	75 ce                	jne    c0009ee0 <kernel_main+0xc7>
c0009f12:	8b 15 80 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a80
c0009f18:	80 e6 08             	and    dh,0x8
c0009f1b:	0f 85 bf 00 00 00    	jne    c0009fe0 <kernel_main+0x1c7>
c0009f21:	83 ec 0c             	sub    esp,0xc
c0009f24:	68 dc 48 02 c0       	push   0xc00248dc
c0009f29:	e8 7f fe ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009f2e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f33:	05 ff 0f 00 00       	add    eax,0xfff
c0009f38:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f40:	e8 44 06 00 00       	call   c000a589 <Phys::physicalMemorySetup(unsigned int)>
c0009f45:	83 c4 10             	add    esp,0x10
c0009f48:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009f4f:	0f 85 a2 01 00 00    	jne    c000a0f7 <kernel_main+0x2de>
c0009f55:	e8 7e 1f 00 00       	call   c000bed8 <Virt::virtualMemorySetup()>
c0009f5a:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009f61:	0f 85 58 01 00 00    	jne    c000a0bf <kernel_main+0x2a6>
c0009f67:	83 ec 0c             	sub    esp,0xc
c0009f6a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f6e:	56                   	push   esi
c0009f6f:	e8 20 20 00 00       	call   c000bf94 <VAS::VAS()>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	89 35 90 8b 02 c0    	mov    DWORD PTR ds:0xc0028b90,esi
c0009f7d:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009f84:	0f 85 fd 00 00 00    	jne    c000a087 <kernel_main+0x26e>
c0009f8a:	e8 91 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009f8f:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009f96:	0f 85 b3 00 00 00    	jne    c000a04f <kernel_main+0x236>
c0009f9c:	83 ec 0c             	sub    esp,0xc
c0009f9f:	68 ec 01 00 00       	push   0x1ec
c0009fa4:	e8 aa fd ff ff       	call   c0009d53 <malloc>
c0009fa9:	89 c3                	mov    ebx,eax
c0009fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fae:	e8 05 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009fb3:	83 c4 10             	add    esp,0x10
c0009fb6:	89 1d 68 8a 02 c0    	mov    DWORD PTR ds:0xc0028a68,ebx
c0009fbc:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0009fc3:	75 53                	jne    c000a018 <kernel_main+0x1ff>
c0009fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fc7:	6a 00                	push   0x0
c0009fc9:	6a 00                	push   0x0
c0009fcb:	6a 00                	push   0x0
c0009fcd:	53                   	push   ebx
c0009fce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009fd1:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fd4:	e8 6b 22 00 00       	call   c000c244 <VAS::~VAS()>
c0009fd9:	83 c4 30             	add    esp,0x30
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	c3                   	ret    
c0009fe0:	83 ec 0c             	sub    esp,0xc
c0009fe3:	68 8b 48 02 c0       	push   0xc002488b
c0009fe8:	e8 c0 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0009fed:	83 c4 10             	add    esp,0x10
c0009ff0:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0009ff7:	0f 85 24 ff ff ff    	jne    c0009f21 <kernel_main+0x108>
c0009ffd:	eb 04                	jmp    c000a003 <kernel_main+0x1ea>
c0009fff:	3c 1c                	cmp    al,0x1c
c000a001:	74 06                	je     c000a009 <kernel_main+0x1f0>
c000a003:	e4 60                	in     al,0x60
c000a005:	3c 5a                	cmp    al,0x5a
c000a007:	75 f6                	jne    c0009fff <kernel_main+0x1e6>
c000a009:	e4 60                	in     al,0x60
c000a00b:	3c 5a                	cmp    al,0x5a
c000a00d:	74 fa                	je     c000a009 <kernel_main+0x1f0>
c000a00f:	3c 1c                	cmp    al,0x1c
c000a011:	74 f6                	je     c000a009 <kernel_main+0x1f0>
c000a013:	e9 09 ff ff ff       	jmp    c0009f21 <kernel_main+0x108>
c000a018:	83 ec 0c             	sub    esp,0xc
c000a01b:	68 ca 48 02 c0       	push   0xc00248ca
c000a020:	e8 88 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a025:	83 c4 10             	add    esp,0x10
c000a028:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a02f:	74 0c                	je     c000a03d <kernel_main+0x224>
c000a031:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c000a037:	eb 8c                	jmp    c0009fc5 <kernel_main+0x1ac>
c000a039:	3c 1c                	cmp    al,0x1c
c000a03b:	74 06                	je     c000a043 <kernel_main+0x22a>
c000a03d:	e4 60                	in     al,0x60
c000a03f:	3c 5a                	cmp    al,0x5a
c000a041:	75 f6                	jne    c000a039 <kernel_main+0x220>
c000a043:	e4 60                	in     al,0x60
c000a045:	3c 5a                	cmp    al,0x5a
c000a047:	74 fa                	je     c000a043 <kernel_main+0x22a>
c000a049:	3c 1c                	cmp    al,0x1c
c000a04b:	74 f6                	je     c000a043 <kernel_main+0x22a>
c000a04d:	eb e2                	jmp    c000a031 <kernel_main+0x218>
c000a04f:	83 ec 0c             	sub    esp,0xc
c000a052:	68 b7 48 02 c0       	push   0xc00248b7
c000a057:	e8 51 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a066:	0f 85 30 ff ff ff    	jne    c0009f9c <kernel_main+0x183>
c000a06c:	eb 04                	jmp    c000a072 <kernel_main+0x259>
c000a06e:	3c 1c                	cmp    al,0x1c
c000a070:	74 06                	je     c000a078 <kernel_main+0x25f>
c000a072:	e4 60                	in     al,0x60
c000a074:	3c 5a                	cmp    al,0x5a
c000a076:	75 f6                	jne    c000a06e <kernel_main+0x255>
c000a078:	e4 60                	in     al,0x60
c000a07a:	3c 5a                	cmp    al,0x5a
c000a07c:	74 fa                	je     c000a078 <kernel_main+0x25f>
c000a07e:	3c 1c                	cmp    al,0x1c
c000a080:	74 f6                	je     c000a078 <kernel_main+0x25f>
c000a082:	e9 15 ff ff ff       	jmp    c0009f9c <kernel_main+0x183>
c000a087:	83 ec 0c             	sub    esp,0xc
c000a08a:	68 ad 48 02 c0       	push   0xc00248ad
c000a08f:	e8 19 fd ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a09e:	0f 85 e6 fe ff ff    	jne    c0009f8a <kernel_main+0x171>
c000a0a4:	eb 04                	jmp    c000a0aa <kernel_main+0x291>
c000a0a6:	3c 1c                	cmp    al,0x1c
c000a0a8:	74 06                	je     c000a0b0 <kernel_main+0x297>
c000a0aa:	e4 60                	in     al,0x60
c000a0ac:	3c 5a                	cmp    al,0x5a
c000a0ae:	75 f6                	jne    c000a0a6 <kernel_main+0x28d>
c000a0b0:	e4 60                	in     al,0x60
c000a0b2:	3c 5a                	cmp    al,0x5a
c000a0b4:	74 fa                	je     c000a0b0 <kernel_main+0x297>
c000a0b6:	3c 1c                	cmp    al,0x1c
c000a0b8:	74 f6                	je     c000a0b0 <kernel_main+0x297>
c000a0ba:	e9 cb fe ff ff       	jmp    c0009f8a <kernel_main+0x171>
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	68 a2 48 02 c0       	push   0xc00248a2
c000a0c7:	e8 e1 fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a0cc:	83 c4 10             	add    esp,0x10
c000a0cf:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a0d6:	0f 85 8b fe ff ff    	jne    c0009f67 <kernel_main+0x14e>
c000a0dc:	eb 04                	jmp    c000a0e2 <kernel_main+0x2c9>
c000a0de:	3c 1c                	cmp    al,0x1c
c000a0e0:	74 06                	je     c000a0e8 <kernel_main+0x2cf>
c000a0e2:	e4 60                	in     al,0x60
c000a0e4:	3c 5a                	cmp    al,0x5a
c000a0e6:	75 f6                	jne    c000a0de <kernel_main+0x2c5>
c000a0e8:	e4 60                	in     al,0x60
c000a0ea:	3c 5a                	cmp    al,0x5a
c000a0ec:	74 fa                	je     c000a0e8 <kernel_main+0x2cf>
c000a0ee:	3c 1c                	cmp    al,0x1c
c000a0f0:	74 f6                	je     c000a0e8 <kernel_main+0x2cf>
c000a0f2:	e9 70 fe ff ff       	jmp    c0009f67 <kernel_main+0x14e>
c000a0f7:	83 ec 0c             	sub    esp,0xc
c000a0fa:	68 97 48 02 c0       	push   0xc0024897
c000a0ff:	e8 a9 fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a10e:	0f 85 41 fe ff ff    	jne    c0009f55 <kernel_main+0x13c>
c000a114:	eb 04                	jmp    c000a11a <kernel_main+0x301>
c000a116:	3c 1c                	cmp    al,0x1c
c000a118:	74 06                	je     c000a120 <kernel_main+0x307>
c000a11a:	e4 60                	in     al,0x60
c000a11c:	3c 5a                	cmp    al,0x5a
c000a11e:	75 f6                	jne    c000a116 <kernel_main+0x2fd>
c000a120:	e4 60                	in     al,0x60
c000a122:	3c 5a                	cmp    al,0x5a
c000a124:	74 fa                	je     c000a120 <kernel_main+0x307>
c000a126:	3c 1c                	cmp    al,0x1c
c000a128:	74 f6                	je     c000a120 <kernel_main+0x307>
c000a12a:	e9 26 fe ff ff       	jmp    c0009f55 <kernel_main+0x13c>
c000a12f:	83 ec 0c             	sub    esp,0xc
c000a132:	68 79 48 02 c0       	push   0xc0024879
c000a137:	e8 71 fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a13c:	8b 15 80 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a80
c000a142:	83 c4 10             	add    esp,0x10
c000a145:	f6 c2 80             	test   dl,0x80
c000a148:	74 18                	je     c000a162 <kernel_main+0x349>
c000a14a:	0f b6 05 e0 7c 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ce0
c000a151:	84 c0                	test   al,al
c000a153:	0f 85 4d fd ff ff    	jne    c0009ea6 <kernel_main+0x8d>
c000a159:	e9 ba fd ff ff       	jmp    c0009f18 <kernel_main+0xff>
c000a15e:	3c 1c                	cmp    al,0x1c
c000a160:	74 06                	je     c000a168 <kernel_main+0x34f>
c000a162:	e4 60                	in     al,0x60
c000a164:	3c 5a                	cmp    al,0x5a
c000a166:	75 f6                	jne    c000a15e <kernel_main+0x345>
c000a168:	e4 60                	in     al,0x60
c000a16a:	3c 5a                	cmp    al,0x5a
c000a16c:	74 fa                	je     c000a168 <kernel_main+0x34f>
c000a16e:	3c 1c                	cmp    al,0x1c
c000a170:	74 f6                	je     c000a168 <kernel_main+0x34f>
c000a172:	eb d6                	jmp    c000a14a <kernel_main+0x331>
c000a174:	83 ec 0c             	sub    esp,0xc
c000a177:	68 6a 48 02 c0       	push   0xc002486a
c000a17c:	e8 2c fc ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a181:	83 c4 10             	add    esp,0x10
c000a184:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a18b:	0f 85 f8 fc ff ff    	jne    c0009e89 <kernel_main+0x70>
c000a191:	eb 04                	jmp    c000a197 <kernel_main+0x37e>
c000a193:	3c 1c                	cmp    al,0x1c
c000a195:	74 06                	je     c000a19d <kernel_main+0x384>
c000a197:	e4 60                	in     al,0x60
c000a199:	3c 5a                	cmp    al,0x5a
c000a19b:	75 f6                	jne    c000a193 <kernel_main+0x37a>
c000a19d:	e4 60                	in     al,0x60
c000a19f:	3c 5a                	cmp    al,0x5a
c000a1a1:	74 fa                	je     c000a19d <kernel_main+0x384>
c000a1a3:	3c 1c                	cmp    al,0x1c
c000a1a5:	74 f6                	je     c000a19d <kernel_main+0x384>
c000a1a7:	e9 dd fc ff ff       	jmp    c0009e89 <kernel_main+0x70>
c000a1ac:	83 ec 0c             	sub    esp,0xc
c000a1af:	68 57 48 02 c0       	push   0xc0024857
c000a1b4:	e8 f4 fb ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c000a1b9:	83 c4 10             	add    esp,0x10
c000a1bc:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c000a1c3:	0f 85 69 fc ff ff    	jne    c0009e32 <kernel_main+0x19>
c000a1c9:	eb 04                	jmp    c000a1cf <kernel_main+0x3b6>
c000a1cb:	3c 1c                	cmp    al,0x1c
c000a1cd:	74 06                	je     c000a1d5 <kernel_main+0x3bc>
c000a1cf:	e4 60                	in     al,0x60
c000a1d1:	3c 5a                	cmp    al,0x5a
c000a1d3:	75 f6                	jne    c000a1cb <kernel_main+0x3b2>
c000a1d5:	e4 60                	in     al,0x60
c000a1d7:	3c 5a                	cmp    al,0x5a
c000a1d9:	74 fa                	je     c000a1d5 <kernel_main+0x3bc>
c000a1db:	3c 1c                	cmp    al,0x1c
c000a1dd:	74 f6                	je     c000a1d5 <kernel_main+0x3bc>
c000a1df:	e9 4e fc ff ff       	jmp    c0009e32 <kernel_main+0x19>

c000a1e4 <Phys::allocateDMA(unsigned long)>:
c000a1e4:	55                   	push   ebp
c000a1e5:	31 ed                	xor    ebp,ebp
c000a1e7:	57                   	push   edi
c000a1e8:	56                   	push   esi
c000a1e9:	53                   	push   ebx
c000a1ea:	31 db                	xor    ebx,ebx
c000a1ec:	83 ec 28             	sub    esp,0x28
c000a1ef:	68 fb 48 02 c0       	push   0xc00248fb
c000a1f4:	e8 46 2e 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a1f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a1fd:	83 c4 10             	add    esp,0x10
c000a200:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a206:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a20e:	c1 ef 0c             	shr    edi,0xc
c000a211:	31 c0                	xor    eax,eax
c000a213:	eb 19                	jmp    c000a22e <Phys::allocateDMA(unsigned long)+0x4a>
c000a215:	85 c0                	test   eax,eax
c000a217:	75 06                	jne    c000a21f <Phys::allocateDMA(unsigned long)+0x3b>
c000a219:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a21d:	89 dd                	mov    ebp,ebx
c000a21f:	8d 70 01             	lea    esi,[eax+0x1]
c000a222:	39 f7                	cmp    edi,esi
c000a224:	74 3f                	je     c000a265 <Phys::allocateDMA(unsigned long)+0x81>
c000a226:	89 f0                	mov    eax,esi
c000a228:	43                   	inc    ebx
c000a229:	83 fb 0f             	cmp    ebx,0xf
c000a22c:	7f 11                	jg     c000a23f <Phys::allocateDMA(unsigned long)+0x5b>
c000a22e:	80 bb 9c 8a 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7564],0x0
c000a235:	74 de                	je     c000a215 <Phys::allocateDMA(unsigned long)+0x31>
c000a237:	31 c0                	xor    eax,eax
c000a239:	43                   	inc    ebx
c000a23a:	83 fb 0f             	cmp    ebx,0xf
c000a23d:	7e ef                	jle    c000a22e <Phys::allocateDMA(unsigned long)+0x4a>
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	68 fd 6a 02 c0       	push   0xc0026afd
c000a247:	e8 f3 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a24c:	c7 04 24 e4 49 02 c0 	mov    DWORD PTR [esp],0xc00249e4
c000a253:	e8 9d ad 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000a258:	83 c4 10             	add    esp,0x10
c000a25b:	31 c0                	xor    eax,eax
c000a25d:	83 c4 1c             	add    esp,0x1c
c000a260:	5b                   	pop    ebx
c000a261:	5e                   	pop    esi
c000a262:	5f                   	pop    edi
c000a263:	5d                   	pop    ebp
c000a264:	c3                   	ret    
c000a265:	89 e9                	mov    ecx,ebp
c000a267:	c1 f9 04             	sar    ecx,0x4
c000a26a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a26e:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a272:	89 ca                	mov    edx,ecx
c000a274:	4a                   	dec    edx
c000a275:	79 03                	jns    c000a27a <Phys::allocateDMA(unsigned long)+0x96>
c000a277:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a27a:	c1 fa 04             	sar    edx,0x4
c000a27d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a281:	74 08                	je     c000a28b <Phys::allocateDMA(unsigned long)+0xa7>
c000a283:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a287:	31 c0                	xor    eax,eax
c000a289:	eb ae                	jmp    c000a239 <Phys::allocateDMA(unsigned long)+0x55>
c000a28b:	85 f6                	test   esi,esi
c000a28d:	74 15                	je     c000a2a4 <Phys::allocateDMA(unsigned long)+0xc0>
c000a28f:	8d 95 9c 8a 02 c0    	lea    edx,[ebp-0x3ffd7564]
c000a295:	8d 84 05 9d 8a 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7563]
c000a29c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a29f:	42                   	inc    edx
c000a2a0:	39 d0                	cmp    eax,edx
c000a2a2:	75 f8                	jne    c000a29c <Phys::allocateDMA(unsigned long)+0xb8>
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	01 3d 94 8a 02 c0    	add    DWORD PTR ds:0xc0028a94,edi
c000a2ad:	68 14 49 02 c0       	push   0xc0024914
c000a2b2:	e8 88 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2be:	85 c0                	test   eax,eax
c000a2c0:	74 23                	je     c000a2e5 <Phys::allocateDMA(unsigned long)+0x101>
c000a2c2:	83 ec 0c             	sub    esp,0xc
c000a2c5:	68 ca 78 02 c0       	push   0xc00278ca
c000a2ca:	e8 70 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a2cf:	c7 04 24 e4 49 02 c0 	mov    DWORD PTR [esp],0xc00249e4
c000a2d6:	e8 1a ad 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000a2db:	83 c4 10             	add    esp,0x10
c000a2de:	89 f0                	mov    eax,esi
c000a2e0:	e9 43 ff ff ff       	jmp    c000a228 <Phys::allocateDMA(unsigned long)+0x44>
c000a2e5:	c1 e5 0c             	shl    ebp,0xc
c000a2e8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a2ee:	e9 6a ff ff ff       	jmp    c000a25d <Phys::allocateDMA(unsigned long)+0x79>

c000a2f3 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a2f3:	83 ec 18             	sub    esp,0x18
c000a2f6:	68 2b 49 02 c0       	push   0xc002492b
c000a2fb:	e8 3f 2d 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a300:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a304:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a30e:	c1 ea 0c             	shr    edx,0xc
c000a311:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a316:	29 15 94 8a 02 c0    	sub    DWORD PTR ds:0xc0028a94,edx
c000a31c:	c1 e8 0c             	shr    eax,0xc
c000a31f:	83 c4 10             	add    esp,0x10
c000a322:	85 d2                	test   edx,edx
c000a324:	74 0f                	je     c000a335 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a326:	05 9c 8a 02 c0       	add    eax,0xc0028a9c
c000a32b:	01 c2                	add    edx,eax
c000a32d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a330:	40                   	inc    eax
c000a331:	39 d0                	cmp    eax,edx
c000a333:	75 f8                	jne    c000a32d <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a335:	83 c4 0c             	add    esp,0xc
c000a338:	c3                   	ret    

c000a339 <Phys::setPageState(unsigned long, bool)>:
c000a339:	56                   	push   esi
c000a33a:	ba 01 00 00 00       	mov    edx,0x1
c000a33f:	53                   	push   ebx
c000a340:	8b 35 24 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e24
c000a346:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a34a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a34e:	89 c8                	mov    eax,ecx
c000a350:	83 e1 07             	and    ecx,0x7
c000a353:	c1 e8 03             	shr    eax,0x3
c000a356:	d3 e3                	shl    ebx,cl
c000a358:	01 c6                	add    esi,eax
c000a35a:	d3 e2                	shl    edx,cl
c000a35c:	f7 d2                	not    edx
c000a35e:	20 16                	and    BYTE PTR [esi],dl
c000a360:	03 05 24 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027e24
c000a366:	08 18                	or     BYTE PTR [eax],bl
c000a368:	5b                   	pop    ebx
c000a369:	5e                   	pop    esi
c000a36a:	c3                   	ret    

c000a36b <Phys::getPageState(unsigned long)>:
c000a36b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a36f:	8b 15 24 7e 02 c0    	mov    edx,DWORD PTR ds:0xc0027e24
c000a375:	89 c8                	mov    eax,ecx
c000a377:	83 e1 07             	and    ecx,0x7
c000a37a:	c1 e8 03             	shr    eax,0x3
c000a37d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a381:	d3 f8                	sar    eax,cl
c000a383:	83 e0 01             	and    eax,0x1
c000a386:	c3                   	ret    

c000a387 <Phys::freePage(unsigned long)>:
c000a387:	53                   	push   ebx
c000a388:	83 ec 10             	sub    esp,0x10
c000a38b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a38f:	53                   	push   ebx
c000a390:	68 41 49 02 c0       	push   0xc0024941
c000a395:	e8 a5 2c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a39a:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	3d ff ff 00 00       	cmp    eax,0xffff
c000a3a8:	76 3d                	jbe    c000a3e7 <Phys::freePage(unsigned long)+0x60>
c000a3aa:	83 ec 0c             	sub    esp,0xc
c000a3ad:	c1 eb 0c             	shr    ebx,0xc
c000a3b0:	53                   	push   ebx
c000a3b1:	e8 b5 ff ff ff       	call   c000a36b <Phys::getPageState(unsigned long)>
c000a3b6:	83 c4 10             	add    esp,0x10
c000a3b9:	84 c0                	test   al,al
c000a3bb:	74 19                	je     c000a3d6 <Phys::freePage(unsigned long)+0x4f>
c000a3bd:	83 ec 08             	sub    esp,0x8
c000a3c0:	ff 0d 94 8a 02 c0    	dec    DWORD PTR ds:0xc0028a94
c000a3c6:	6a 00                	push   0x0
c000a3c8:	53                   	push   ebx
c000a3c9:	e8 6b ff ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a3ce:	83 c4 10             	add    esp,0x10
c000a3d1:	83 c4 08             	add    esp,0x8
c000a3d4:	5b                   	pop    ebx
c000a3d5:	c3                   	ret    
c000a3d6:	c7 44 24 10 6b 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc002496b
c000a3de:	83 c4 08             	add    esp,0x8
c000a3e1:	5b                   	pop    ebx
c000a3e2:	e9 0e ac 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c000a3e7:	83 ec 08             	sub    esp,0x8
c000a3ea:	53                   	push   ebx
c000a3eb:	68 54 49 02 c0       	push   0xc0024954
c000a3f0:	e8 4a 2c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a3f5:	58                   	pop    eax
c000a3f6:	5a                   	pop    edx
c000a3f7:	68 00 10 00 00       	push   0x1000
c000a3fc:	53                   	push   ebx
c000a3fd:	e8 f1 fe ff ff       	call   c000a2f3 <Phys::freeDMA(unsigned long, unsigned long)>
c000a402:	83 c4 10             	add    esp,0x10
c000a405:	83 c4 08             	add    esp,0x8
c000a408:	5b                   	pop    ebx
c000a409:	c3                   	ret    

c000a40a <Phys::allocatePage()>:
c000a40a:	56                   	push   esi
c000a40b:	53                   	push   ebx
c000a40c:	83 ec 14             	sub    esp,0x14
c000a40f:	8b 35 88 8a 02 c0    	mov    esi,DWORD PTR ds:0xc0028a88
c000a415:	89 f3                	mov    ebx,esi
c000a417:	eb 0a                	jmp    c000a423 <Phys::allocatePage()+0x19>
c000a419:	89 1d 88 8a 02 c0    	mov    DWORD PTR ds:0xc0028a88,ebx
c000a41f:	39 de                	cmp    esi,ebx
c000a421:	74 24                	je     c000a447 <Phys::allocatePage()+0x3d>
c000a423:	53                   	push   ebx
c000a424:	e8 42 ff ff ff       	call   c000a36b <Phys::getPageState(unsigned long)>
c000a429:	5a                   	pop    edx
c000a42a:	84 c0                	test   al,al
c000a42c:	74 69                	je     c000a497 <Phys::allocatePage()+0x8d>
c000a42e:	43                   	inc    ebx
c000a42f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a435:	75 e2                	jne    c000a419 <Phys::allocatePage()+0xf>
c000a437:	31 db                	xor    ebx,ebx
c000a439:	c7 05 88 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a88,0x0
c000a443:	39 de                	cmp    esi,ebx
c000a445:	75 dc                	jne    c000a423 <Phys::allocatePage()+0x19>
c000a447:	83 ec 0c             	sub    esp,0xc
c000a44a:	80 35 ac 8a 02 c0 01 	xor    BYTE PTR ds:0xc0028aac,0x1
c000a451:	68 0c 4a 02 c0       	push   0xc0024a0c
c000a456:	e8 e4 2b 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a45b:	58                   	pop    eax
c000a45c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a461:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a464:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a46a:	e8 5f 28 00 00       	call   c000ccce <VAS::scanForEviction()>
c000a46f:	83 c4 10             	add    esp,0x10
c000a472:	85 c0                	test   eax,eax
c000a474:	75 62                	jne    c000a4d8 <Phys::allocatePage()+0xce>
c000a476:	83 ec 0c             	sub    esp,0xc
c000a479:	68 30 4a 02 c0       	push   0xc0024a30
c000a47e:	e8 72 ab 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000a483:	83 c4 10             	add    esp,0x10
c000a486:	8b 1d 88 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a88
c000a48c:	53                   	push   ebx
c000a48d:	e8 d9 fe ff ff       	call   c000a36b <Phys::getPageState(unsigned long)>
c000a492:	5a                   	pop    edx
c000a493:	84 c0                	test   al,al
c000a495:	75 97                	jne    c000a42e <Phys::allocatePage()+0x24>
c000a497:	6a 01                	push   0x1
c000a499:	53                   	push   ebx
c000a49a:	e8 9a fe ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a49f:	5a                   	pop    edx
c000a4a0:	a1 94 8a 02 c0       	mov    eax,ds:0xc0028a94
c000a4a5:	59                   	pop    ecx
c000a4a6:	40                   	inc    eax
c000a4a7:	8b 15 88 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a88
c000a4ad:	a3 94 8a 02 c0       	mov    ds:0xc0028a94,eax
c000a4b2:	c1 e2 0c             	shl    edx,0xc
c000a4b5:	52                   	push   edx
c000a4b6:	ff 35 98 8a 02 c0    	push   DWORD PTR ds:0xc0028a98
c000a4bc:	50                   	push   eax
c000a4bd:	68 81 49 02 c0       	push   0xc0024981
c000a4c2:	e8 78 2b 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a4c7:	a1 88 8a 02 c0       	mov    eax,ds:0xc0028a88
c000a4cc:	83 c4 10             	add    esp,0x10
c000a4cf:	c1 e0 0c             	shl    eax,0xc
c000a4d2:	83 c4 14             	add    esp,0x14
c000a4d5:	5b                   	pop    ebx
c000a4d6:	5e                   	pop    esi
c000a4d7:	c3                   	ret    
c000a4d8:	83 ec 08             	sub    esp,0x8
c000a4db:	89 c2                	mov    edx,eax
c000a4dd:	6a 01                	push   0x1
c000a4df:	c1 ea 0c             	shr    edx,0xc
c000a4e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4e6:	52                   	push   edx
c000a4e7:	e8 4d fe ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a4ec:	83 c4 10             	add    esp,0x10
c000a4ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4f3:	eb dd                	jmp    c000a4d2 <Phys::allocatePage()+0xc8>

c000a4f5 <Phys::allocateContiguousPages(int)>:
c000a4f5:	57                   	push   edi
c000a4f6:	56                   	push   esi
c000a4f7:	53                   	push   ebx
c000a4f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a4fc:	fa                   	cli    
c000a4fd:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c000a503:	31 db                	xor    ebx,ebx
c000a505:	85 db                	test   ebx,ebx
c000a507:	75 11                	jne    c000a51a <Phys::allocateContiguousPages(int)+0x25>
c000a509:	e8 fc fe ff ff       	call   c000a40a <Phys::allocatePage()>
c000a50e:	83 fe 01             	cmp    esi,0x1
c000a511:	89 c7                	mov    edi,eax
c000a513:	74 21                	je     c000a536 <Phys::allocateContiguousPages(int)+0x41>
c000a515:	bb 01 00 00 00       	mov    ebx,0x1
c000a51a:	e8 eb fe ff ff       	call   c000a40a <Phys::allocatePage()>
c000a51f:	89 da                	mov    edx,ebx
c000a521:	c1 e2 0c             	shl    edx,0xc
c000a524:	01 fa                	add    edx,edi
c000a526:	39 c2                	cmp    edx,eax
c000a528:	74 20                	je     c000a54a <Phys::allocateContiguousPages(int)+0x55>
c000a52a:	bb 01 00 00 00       	mov    ebx,0x1
c000a52f:	89 c7                	mov    edi,eax
c000a531:	83 fe 01             	cmp    esi,0x1
c000a534:	75 e4                	jne    c000a51a <Phys::allocateContiguousPages(int)+0x25>
c000a536:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000a53b:	48                   	dec    eax
c000a53c:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000a541:	75 01                	jne    c000a544 <Phys::allocateContiguousPages(int)+0x4f>
c000a543:	fb                   	sti    
c000a544:	89 f8                	mov    eax,edi
c000a546:	5b                   	pop    ebx
c000a547:	5e                   	pop    esi
c000a548:	5f                   	pop    edi
c000a549:	c3                   	ret    
c000a54a:	43                   	inc    ebx
c000a54b:	39 f3                	cmp    ebx,esi
c000a54d:	75 b6                	jne    c000a505 <Phys::allocateContiguousPages(int)+0x10>
c000a54f:	eb e5                	jmp    c000a536 <Phys::allocateContiguousPages(int)+0x41>

c000a551 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a551:	56                   	push   esi
c000a552:	53                   	push   ebx
c000a553:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a557:	39 1d 8c 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a8c,ebx
c000a55d:	73 06                	jae    c000a565 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a55f:	89 1d 8c 8a 02 c0    	mov    DWORD PTR ds:0xc0028a8c,ebx
c000a565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a569:	c1 eb 0c             	shr    ebx,0xc
c000a56c:	c1 e8 0c             	shr    eax,0xc
c000a56f:	39 d8                	cmp    eax,ebx
c000a571:	73 13                	jae    c000a586 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a573:	6a 00                	push   0x0
c000a575:	8d 70 01             	lea    esi,[eax+0x1]
c000a578:	50                   	push   eax
c000a579:	e8 bb fd ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a57e:	5a                   	pop    edx
c000a57f:	89 f0                	mov    eax,esi
c000a581:	59                   	pop    ecx
c000a582:	39 f3                	cmp    ebx,esi
c000a584:	75 ed                	jne    c000a573 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a586:	5b                   	pop    ebx
c000a587:	5e                   	pop    esi
c000a588:	c3                   	ret    

c000a589 <Phys::physicalMemorySetup(unsigned int)>:
c000a589:	55                   	push   ebp
c000a58a:	57                   	push   edi
c000a58b:	56                   	push   esi
c000a58c:	53                   	push   ebx
c000a58d:	31 db                	xor    ebx,ebx
c000a58f:	83 ec 40             	sub    esp,0x40
c000a592:	6a 10                	push   0x10
c000a594:	6a 00                	push   0x0
c000a596:	68 9c 8a 02 c0       	push   0xc0028a9c
c000a59b:	e8 dc 60 ff ff       	call   c000067c <memset>
c000a5a0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a5a4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a5a9:	05 00 10 00 00       	add    eax,0x1000
c000a5ae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5b2:	5a                   	pop    edx
c000a5b3:	59                   	pop    ecx
c000a5b4:	50                   	push   eax
c000a5b5:	68 9f 49 02 c0       	push   0xc002499f
c000a5ba:	e8 80 2a 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a5bf:	83 c4 10             	add    esp,0x10
c000a5c2:	83 ec 08             	sub    esp,0x8
c000a5c5:	6a 01                	push   0x1
c000a5c7:	53                   	push   ebx
c000a5c8:	43                   	inc    ebx
c000a5c9:	e8 6b fd ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a5ce:	83 c4 10             	add    esp,0x10
c000a5d1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5d7:	75 e9                	jne    c000a5c2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5d9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a5e0:	66 85 c0             	test   ax,ax
c000a5e3:	0f 84 8e 01 00 00    	je     c000a777 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a5e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a5ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a5f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5f9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a5fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a602:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a60a:	eb 15                	jmp    c000a621 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a60c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a610:	83 c3 18             	add    ebx,0x18
c000a613:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a617:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a61b:	0f 84 66 01 00 00    	je     c000a787 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a621:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a624:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a627:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a62a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a62e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a632:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a634:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a637:	01 f0                	add    eax,esi
c000a639:	55                   	push   ebp
c000a63a:	11 fa                	adc    edx,edi
c000a63c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a640:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a644:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a648:	56                   	push   esi
c000a649:	68 60 4a 02 c0       	push   0xc0024a60
c000a64e:	e8 ec 29 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a657:	83 c4 10             	add    esp,0x10
c000a65a:	09 f8                	or     eax,edi
c000a65c:	0f 85 25 01 00 00    	jne    c000a787 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a662:	4d                   	dec    ebp
c000a663:	75 a7                	jne    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a665:	ba 00 00 08 00       	mov    edx,0x80000
c000a66a:	89 c1                	mov    ecx,eax
c000a66c:	39 f2                	cmp    edx,esi
c000a66e:	19 f9                	sbb    ecx,edi
c000a670:	0f 82 a7 00 00 00    	jb     c000a71d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a676:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a67a:	89 c1                	mov    ecx,eax
c000a67c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a680:	0f 83 97 00 00 00    	jae    c000a71d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a686:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a68b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a68f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a693:	39 fa                	cmp    edx,edi
c000a695:	19 e8                	sbb    eax,ebp
c000a697:	0f 82 a5 01 00 00    	jb     c000a842 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a69d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6a1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6a5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a6ab:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6b0:	83 d5 ff             	adc    ebp,0xffffffff
c000a6b3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6b7:	31 c0                	xor    eax,eax
c000a6b9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6bd:	39 fa                	cmp    edx,edi
c000a6bf:	89 c1                	mov    ecx,eax
c000a6c1:	19 e9                	sbb    ecx,ebp
c000a6c3:	0f 83 43 ff ff ff    	jae    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6c9:	be 00 00 08 00       	mov    esi,0x80000
c000a6ce:	57                   	push   edi
c000a6cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6d3:	57                   	push   edi
c000a6d4:	56                   	push   esi
c000a6d5:	68 84 4a 02 c0       	push   0xc0024a84
c000a6da:	e8 60 29 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a6df:	5d                   	pop    ebp
c000a6e0:	58                   	pop    eax
c000a6e1:	57                   	push   edi
c000a6e2:	56                   	push   esi
c000a6e3:	e8 69 fe ff ff       	call   c000a551 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a6e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a6ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6f0:	83 c4 0c             	add    esp,0xc
c000a6f3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a6f7:	03 05 98 8a 02 c0    	add    eax,DWORD PTR ds:0xc0028a98
c000a6fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a704:	a3 98 8a 02 c0       	mov    ds:0xc0028a98,eax
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	68 c5 49 02 c0       	push   0xc00249c5
c000a710:	e8 2a 29 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	e9 ef fe ff ff       	jmp    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a71d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a721:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a725:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a729:	39 ea                	cmp    edx,ebp
c000a72b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a72f:	0f 82 d7 fe ff ff    	jb     c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a735:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a73a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a73e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a742:	0f 83 c4 fe ff ff    	jae    c000a60c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a748:	39 ee                	cmp    esi,ebp
c000a74a:	89 f8                	mov    eax,edi
c000a74c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a750:	0f 83 78 ff ff ff    	jae    c000a6ce <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a75a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a75e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a762:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a766:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a76a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a76e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a772:	e9 57 ff ff ff       	jmp    c000a6ce <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a777:	83 ec 0c             	sub    esp,0xc
c000a77a:	68 b7 49 02 c0       	push   0xc00249b7
c000a77f:	e8 71 a8 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000a784:	83 c4 10             	add    esp,0x10
c000a787:	83 ec 08             	sub    esp,0x8
c000a78a:	6a 00                	push   0x0
c000a78c:	6a 05                	push   0x5
c000a78e:	e8 a6 fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a793:	58                   	pop    eax
c000a794:	5a                   	pop    edx
c000a795:	6a 00                	push   0x0
c000a797:	6a 06                	push   0x6
c000a799:	e8 9b fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a79e:	59                   	pop    ecx
c000a79f:	5b                   	pop    ebx
c000a7a0:	bb 60 00 00 00       	mov    ebx,0x60
c000a7a5:	6a 00                	push   0x0
c000a7a7:	6a 07                	push   0x7
c000a7a9:	e8 8b fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a7ae:	83 05 98 8a 02 c0 03 	add    DWORD PTR ds:0xc0028a98,0x3
c000a7b5:	83 c4 10             	add    esp,0x10
c000a7b8:	83 ec 08             	sub    esp,0x8
c000a7bb:	6a 00                	push   0x0
c000a7bd:	53                   	push   ebx
c000a7be:	43                   	inc    ebx
c000a7bf:	e8 75 fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a7c4:	83 c4 10             	add    esp,0x10
c000a7c7:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7cd:	75 e9                	jne    c000a7b8 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a7cf:	a1 98 8a 02 c0       	mov    eax,ds:0xc0028a98
c000a7d4:	bb 40 01 00 00       	mov    ebx,0x140
c000a7d9:	83 c0 20             	add    eax,0x20
c000a7dc:	a3 98 8a 02 c0       	mov    ds:0xc0028a98,eax
c000a7e1:	eb 22                	jmp    c000a805 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a7e3:	83 ec 08             	sub    esp,0x8
c000a7e6:	6a 00                	push   0x0
c000a7e8:	53                   	push   ebx
c000a7e9:	43                   	inc    ebx
c000a7ea:	e8 4a fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a7ef:	a1 98 8a 02 c0       	mov    eax,ds:0xc0028a98
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	40                   	inc    eax
c000a7f8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a7fe:	a3 98 8a 02 c0       	mov    ds:0xc0028a98,eax
c000a803:	74 07                	je     c000a80c <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a805:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a80a:	7e d7                	jle    c000a7e3 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a80c:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a811:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a816:	7f 22                	jg     c000a83a <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a818:	83 ec 08             	sub    esp,0x8
c000a81b:	6a 00                	push   0x0
c000a81d:	53                   	push   ebx
c000a81e:	43                   	inc    ebx
c000a81f:	e8 15 fb ff ff       	call   c000a339 <Phys::setPageState(unsigned long, bool)>
c000a824:	a1 98 8a 02 c0       	mov    eax,ds:0xc0028a98
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	40                   	inc    eax
c000a82d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a833:	a3 98 8a 02 c0       	mov    ds:0xc0028a98,eax
c000a838:	75 d7                	jne    c000a811 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a83a:	83 c4 3c             	add    esp,0x3c
c000a83d:	5b                   	pop    ebx
c000a83e:	5e                   	pop    esi
c000a83f:	5f                   	pop    edi
c000a840:	5d                   	pop    ebp
c000a841:	c3                   	ret    
c000a842:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a84a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a852:	e9 46 fe ff ff       	jmp    c000a69d <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a857:	90                   	nop

c000a858 <Pipe::isAtty()>:
c000a858:	31 c0                	xor    eax,eax
c000a85a:	c3                   	ret    
c000a85b:	90                   	nop

c000a85c <Pipe::~Pipe()>:
c000a85c:	83 ec 0c             	sub    esp,0xc
c000a85f:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000a864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a868:	89 10                	mov    DWORD PTR [eax],edx
c000a86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a86e:	83 ec 0c             	sub    esp,0xc
c000a871:	50                   	push   eax
c000a872:	e8 41 12 00 00       	call   c000bab8 <UnixFile::~UnixFile()>
c000a877:	83 c4 10             	add    esp,0x10
c000a87a:	90                   	nop
c000a87b:	83 c4 0c             	add    esp,0xc
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <Pipe::~Pipe()>:
c000a880:	83 ec 0c             	sub    esp,0xc
c000a883:	83 ec 0c             	sub    esp,0xc
c000a886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88a:	e8 cd ff ff ff       	call   c000a85c <Pipe::~Pipe()>
c000a88f:	83 c4 10             	add    esp,0x10
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	6a 20                	push   0x20
c000a897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a89b:	e8 be 26 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	83 c4 0c             	add    esp,0xc
c000a8a6:	c3                   	ret    
c000a8a7:	90                   	nop

c000a8a8 <Pipe::read(unsigned long long, void*, int*)>:
c000a8a8:	55                   	push   ebp
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	53                   	push   ebx
c000a8ac:	83 ec 1c             	sub    esp,0x1c
c000a8af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8b7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8be:	89 c8                	mov    eax,ecx
c000a8c0:	99                   	cdq    
c000a8c1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8c5:	74 24                	je     c000a8eb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8c7:	39 f9                	cmp    ecx,edi
c000a8c9:	89 d1                	mov    ecx,edx
c000a8cb:	19 f1                	sbb    ecx,esi
c000a8cd:	73 1c                	jae    c000a8eb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8cf:	fa                   	cli    
c000a8d0:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c000a8d6:	e8 49 e4 00 00       	call   c0018d24 <schedule()>
c000a8db:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000a8e0:	48                   	dec    eax
c000a8e1:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000a8e6:	75 d3                	jne    c000a8bb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8e8:	fb                   	sti    
c000a8e9:	eb d0                	jmp    c000a8bb <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a8eb:	39 f8                	cmp    eax,edi
c000a8ed:	89 d1                	mov    ecx,edx
c000a8ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a8f2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a8f6:	19 f1                	sbb    ecx,esi
c000a8f8:	73 07                	jae    c000a901 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a901:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a904:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a907:	29 f7                	sub    edi,esi
c000a909:	89 f8                	mov    eax,edi
c000a90b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a90f:	99                   	cdq    
c000a910:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a917:	19 d0                	sbb    eax,edx
c000a919:	73 07                	jae    c000a922 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a91b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a91e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a922:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a925:	89 ea                	mov    edx,ebp
c000a927:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a92b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a930:	74 0d                	je     c000a93f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a932:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a935:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a939:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a93d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a93f:	85 d2                	test   edx,edx
c000a941:	74 11                	je     c000a954 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a947:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a94a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a94e:	89 d1                	mov    ecx,edx
c000a950:	89 c7                	mov    edi,eax
c000a952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a954:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a957:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a95a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a95d:	99                   	cdq    
c000a95e:	89 f7                	mov    edi,esi
c000a960:	03 04 24             	add    eax,DWORD PTR [esp]
c000a963:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a967:	c1 ff 1f             	sar    edi,0x1f
c000a96a:	57                   	push   edi
c000a96b:	56                   	push   esi
c000a96c:	52                   	push   edx
c000a96d:	50                   	push   eax
c000a96e:	e8 99 85 01 00       	call   c0022f0c <__umoddi3>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a979:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a97e:	75 10                	jne    c000a990 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a980:	83 ec 0c             	sub    esp,0xc
c000a983:	68 ad 4a 02 c0       	push   0xc0024aad
c000a988:	e8 68 a6 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000a98d:	83 c4 10             	add    esp,0x10
c000a990:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a994:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a997:	89 10                	mov    DWORD PTR [eax],edx
c000a999:	83 c4 1c             	add    esp,0x1c
c000a99c:	31 c0                	xor    eax,eax
c000a99e:	5b                   	pop    ebx
c000a99f:	5e                   	pop    esi
c000a9a0:	5f                   	pop    edi
c000a9a1:	5d                   	pop    ebp
c000a9a2:	c3                   	ret    
c000a9a3:	90                   	nop

c000a9a4 <Pipe::write(unsigned long long, void*, int*)>:
c000a9a4:	55                   	push   ebp
c000a9a5:	57                   	push   edi
c000a9a6:	56                   	push   esi
c000a9a7:	53                   	push   ebx
c000a9a8:	83 ec 1c             	sub    esp,0x1c
c000a9ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a9af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9b3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a9b6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c1:	89 d8                	mov    eax,ebx
c000a9c3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9c6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9ca:	89 d6                	mov    esi,edx
c000a9cc:	89 d7                	mov    edi,edx
c000a9ce:	c1 ff 1f             	sar    edi,0x1f
c000a9d1:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9d4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9d8:	c1 f8 1f             	sar    eax,0x1f
c000a9db:	39 f3                	cmp    ebx,esi
c000a9dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a9e5:	19 f8                	sbb    eax,edi
c000a9e7:	b8 01 00 00 00       	mov    eax,0x1
c000a9ec:	72 6e                	jb     c000aa5c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a9ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a9f1:	01 d0                	add    eax,edx
c000a9f3:	99                   	cdq    
c000a9f4:	f7 fb                	idiv   ebx
c000a9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9fa:	29 d3                	sub    ebx,edx
c000a9fc:	89 d7                	mov    edi,edx
c000a9fe:	89 de                	mov    esi,ebx
c000aa00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa03:	c1 fb 1f             	sar    ebx,0x1f
c000aa06:	39 f2                	cmp    edx,esi
c000aa08:	19 d8                	sbb    eax,ebx
c000aa0a:	b8 00 00 00 00       	mov    eax,0x0
c000aa0f:	72 04                	jb     c000aa15 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa11:	89 d0                	mov    eax,edx
c000aa13:	29 f0                	sub    eax,esi
c000aa15:	89 d3                	mov    ebx,edx
c000aa17:	29 c3                	sub    ebx,eax
c000aa19:	74 0b                	je     c000aa26 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aa1b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aa1e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa22:	89 d9                	mov    ecx,ebx
c000aa24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa26:	85 c0                	test   eax,eax
c000aa28:	74 0d                	je     c000aa37 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa2a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa2e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa31:	89 de                	mov    esi,ebx
c000aa33:	89 c1                	mov    ecx,eax
c000aa35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa37:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa3a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa3f:	75 10                	jne    c000aa51 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa41:	83 ec 0c             	sub    esp,0xc
c000aa44:	68 c9 4a 02 c0       	push   0xc0024ac9
c000aa49:	e8 a7 a5 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000aa4e:	83 c4 10             	add    esp,0x10
c000aa51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa55:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa58:	89 08                	mov    DWORD PTR [eax],ecx
c000aa5a:	31 c0                	xor    eax,eax
c000aa5c:	83 c4 1c             	add    esp,0x1c
c000aa5f:	5b                   	pop    ebx
c000aa60:	5e                   	pop    esi
c000aa61:	5f                   	pop    edi
c000aa62:	5d                   	pop    ebp
c000aa63:	c3                   	ret    

c000aa64 <Pipe::Pipe(int)>:
c000aa64:	83 ec 0c             	sub    esp,0xc
c000aa67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa6b:	83 ec 08             	sub    esp,0x8
c000aa6e:	6a 00                	push   0x0
c000aa70:	50                   	push   eax
c000aa71:	e8 60 0e 00 00       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000aa76:	83 c4 10             	add    esp,0x10
c000aa79:	ba f0 4a 02 c0       	mov    edx,0xc0024af0
c000aa7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa82:	89 10                	mov    DWORD PTR [eax],edx
c000aa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa8c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aa8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa93:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aaa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaa9:	83 ec 0c             	sub    esp,0xc
c000aaac:	50                   	push   eax
c000aaad:	e8 a1 f2 ff ff       	call   c0009d53 <malloc>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 c2                	mov    edx,eax
c000aab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aac6:	90                   	nop
c000aac7:	83 c4 0c             	add    esp,0xc
c000aaca:	c3                   	ret    
c000aacb:	90                   	nop

c000aacc <VgaText::isAtty()>:
c000aacc:	b0 01                	mov    al,0x1
c000aace:	c3                   	ret    
c000aacf:	90                   	nop

c000aad0 <VgaText::~VgaText()>:
c000aad0:	83 ec 0c             	sub    esp,0xc
c000aad3:	ba 78 4b 02 c0       	mov    edx,0xc0024b78
c000aad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aadc:	89 10                	mov    DWORD PTR [eax],edx
c000aade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae2:	83 ec 0c             	sub    esp,0xc
c000aae5:	50                   	push   eax
c000aae6:	e8 cd 0f 00 00       	call   c000bab8 <UnixFile::~UnixFile()>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	90                   	nop
c000aaef:	83 c4 0c             	add    esp,0xc
c000aaf2:	c3                   	ret    
c000aaf3:	90                   	nop

c000aaf4 <VgaText::~VgaText()>:
c000aaf4:	83 ec 0c             	sub    esp,0xc
c000aaf7:	83 ec 0c             	sub    esp,0xc
c000aafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafe:	e8 cd ff ff ff       	call   c000aad0 <VgaText::~VgaText()>
c000ab03:	83 c4 10             	add    esp,0x10
c000ab06:	83 ec 08             	sub    esp,0x8
c000ab09:	68 b4 01 00 00       	push   0x1b4
c000ab0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab12:	e8 47 24 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000ab17:	83 c4 10             	add    esp,0x10
c000ab1a:	83 c4 0c             	add    esp,0xc
c000ab1d:	c3                   	ret    

c000ab1e <VgaText::read(unsigned long long, void*, int*)>:
c000ab1e:	83 ec 10             	sub    esp,0x10
c000ab21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab2d:	e8 99 58 00 00       	call   c00103cb <readKeyboard(VgaText*, char*, unsigned long)>
c000ab32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab36:	89 02                	mov    DWORD PTR [edx],eax
c000ab38:	31 c0                	xor    eax,eax
c000ab3a:	83 c4 1c             	add    esp,0x1c
c000ab3d:	c3                   	ret    

c000ab3e <setTerminalScrollLock(bool)>:
c000ab3e:	c3                   	ret    

c000ab3f <addToTerminalCycle(VgaText*)>:
c000ab3f:	8b 15 e0 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028ae0
c000ab45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab49:	85 d2                	test   edx,edx
c000ab4b:	75 09                	jne    c000ab56 <addToTerminalCycle(VgaText*)+0x17>
c000ab4d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab50:	a3 e0 8a 02 c0       	mov    ds:0xc0028ae0,eax
c000ab55:	c3                   	ret    
c000ab56:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab59:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab5c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab5f:	c3                   	ret    

c000ab60 <installVgaTextImplementation()>:
c000ab60:	83 ec 10             	sub    esp,0x10
c000ab63:	6a 20                	push   0x20
c000ab65:	6a 00                	push   0x0
c000ab67:	68 c0 8a 02 c0       	push   0xc0028ac0
c000ab6c:	e8 0b 5b ff ff       	call   c000067c <memset>
c000ab71:	83 c4 1c             	add    esp,0x1c
c000ab74:	c3                   	ret    

c000ab75 <scrollTerminalScrollLock(int)>:
c000ab75:	c3                   	ret    

c000ab76 <VgaText::updateTitle()>:
c000ab76:	53                   	push   ebx
c000ab77:	31 c0                	xor    eax,eax
c000ab79:	83 ec 58             	sub    esp,0x58
c000ab7c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ab80:	89 e1                	mov    ecx,esp
c000ab82:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ab86:	40                   	inc    eax
c000ab87:	83 f8 50             	cmp    eax,0x50
c000ab8a:	75 f6                	jne    c000ab82 <VgaText::updateTitle()+0xc>
c000ab8c:	31 c0                	xor    eax,eax
c000ab8e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000ab95:	84 db                	test   bl,bl
c000ab97:	74 06                	je     c000ab9f <VgaText::updateTitle()+0x29>
c000ab99:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ab9c:	40                   	inc    eax
c000ab9d:	eb ef                	jmp    c000ab8e <VgaText::updateTitle()+0x18>
c000ab9f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000aba2:	85 c0                	test   eax,eax
c000aba4:	74 09                	je     c000abaf <VgaText::updateTitle()+0x39>
c000aba6:	53                   	push   ebx
c000aba7:	53                   	push   ebx
c000aba8:	51                   	push   ecx
c000aba9:	52                   	push   edx
c000abaa:	ff d0                	call   eax
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	83 c4 58             	add    esp,0x58
c000abb2:	5b                   	pop    ebx
c000abb3:	c3                   	ret    

c000abb4 <VgaText::load()>:
c000abb4:	53                   	push   ebx
c000abb5:	31 c0                	xor    eax,eax
c000abb7:	83 ec 58             	sub    esp,0x58
c000abba:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abbe:	89 e2                	mov    edx,esp
c000abc0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	75 f6                	jne    c000abc0 <VgaText::load()+0xc>
c000abca:	31 c0                	xor    eax,eax
c000abcc:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abd3:	84 c9                	test   cl,cl
c000abd5:	74 06                	je     c000abdd <VgaText::load()+0x29>
c000abd7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abda:	40                   	inc    eax
c000abdb:	eb ef                	jmp    c000abcc <VgaText::load()+0x18>
c000abdd:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000abe0:	85 c0                	test   eax,eax
c000abe2:	74 09                	je     c000abed <VgaText::load()+0x39>
c000abe4:	51                   	push   ecx
c000abe5:	51                   	push   ecx
c000abe6:	52                   	push   edx
c000abe7:	53                   	push   ebx
c000abe8:	ff d0                	call   eax
c000abea:	83 c4 10             	add    esp,0x10
c000abed:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000abf0:	85 c0                	test   eax,eax
c000abf2:	74 09                	je     c000abfd <VgaText::load()+0x49>
c000abf4:	83 ec 0c             	sub    esp,0xc
c000abf7:	53                   	push   ebx
c000abf8:	ff d0                	call   eax
c000abfa:	83 c4 10             	add    esp,0x10
c000abfd:	83 c4 58             	add    esp,0x58
c000ac00:	5b                   	pop    ebx
c000ac01:	c3                   	ret    

c000ac02 <VgaText::updateCursor()>:
c000ac02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac06:	39 05 e4 8a 02 c0    	cmp    DWORD PTR ds:0xc0028ae4,eax
c000ac0c:	75 09                	jne    c000ac17 <VgaText::updateCursor()+0x15>
c000ac0e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac11:	85 c0                	test   eax,eax
c000ac13:	74 02                	je     c000ac17 <VgaText::updateCursor()+0x15>
c000ac15:	ff e0                	jmp    eax
c000ac17:	c3                   	ret    

c000ac18 <VgaText::doANSI_SGR(int)>:
c000ac18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac20:	85 d2                	test   edx,edx
c000ac22:	75 0b                	jne    c000ac2f <VgaText::doANSI_SGR(int)+0x17>
c000ac24:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac27:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac2a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac2d:	eb 59                	jmp    c000ac88 <VgaText::doANSI_SGR(int)+0x70>
c000ac2f:	83 fa 07             	cmp    edx,0x7
c000ac32:	75 0b                	jne    c000ac3f <VgaText::doANSI_SGR(int)+0x27>
c000ac34:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac37:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac3a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac3d:	eb 49                	jmp    c000ac88 <VgaText::doANSI_SGR(int)+0x70>
c000ac3f:	83 fa 1b             	cmp    edx,0x1b
c000ac42:	74 e0                	je     c000ac24 <VgaText::doANSI_SGR(int)+0xc>
c000ac44:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac47:	83 f9 07             	cmp    ecx,0x7
c000ac4a:	77 09                	ja     c000ac55 <VgaText::doANSI_SGR(int)+0x3d>
c000ac4c:	8b 14 8d 60 7e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd81a0]
c000ac53:	eb 20                	jmp    c000ac75 <VgaText::doANSI_SGR(int)+0x5d>
c000ac55:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac58:	83 f9 07             	cmp    ecx,0x7
c000ac5b:	77 09                	ja     c000ac66 <VgaText::doANSI_SGR(int)+0x4e>
c000ac5d:	8b 14 8d 60 7e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd81a0]
c000ac64:	eb 22                	jmp    c000ac88 <VgaText::doANSI_SGR(int)+0x70>
c000ac66:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac69:	83 f9 07             	cmp    ecx,0x7
c000ac6c:	77 0b                	ja     c000ac79 <VgaText::doANSI_SGR(int)+0x61>
c000ac6e:	8b 14 95 18 7d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd82e8]
c000ac75:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac78:	c3                   	ret    
c000ac79:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac7c:	83 f9 07             	cmp    ecx,0x7
c000ac7f:	77 0a                	ja     c000ac8b <VgaText::doANSI_SGR(int)+0x73>
c000ac81:	8b 14 95 f0 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8310]
c000ac88:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac8b:	c3                   	ret    

c000ac8c <VgaText::setDefaultBgColour(VgaColour)>:
c000ac8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac94:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ac97:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ac9a:	c3                   	ret    
c000ac9b:	90                   	nop

c000ac9c <VgaText::setDefaultFgColour(VgaColour)>:
c000ac9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000aca7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acaa:	c3                   	ret    
c000acab:	90                   	nop

c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000acac:	53                   	push   ebx
c000acad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000acb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acb5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acb9:	51                   	push   ecx
c000acba:	e8 cd ff ff ff       	call   c000ac8c <VgaText::setDefaultBgColour(VgaColour)>
c000acbf:	58                   	pop    eax
c000acc0:	5a                   	pop    edx
c000acc1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000acc5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000acc9:	5b                   	pop    ebx
c000acca:	eb d0                	jmp    c000ac9c <VgaText::setDefaultFgColour(VgaColour)>

c000accc <VgaText::setTitleTextColour(VgaColour)>:
c000accc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acd4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acd7:	e9 9a fe ff ff       	jmp    c000ab76 <VgaText::updateTitle()>

c000acdc <VgaText::setTitleColour(VgaColour)>:
c000acdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ace4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ace7:	e9 8a fe ff ff       	jmp    c000ab76 <VgaText::updateTitle()>

c000acec <VgaText::setTitle(char*)>:
c000acec:	53                   	push   ebx
c000aced:	83 ec 10             	sub    esp,0x10
c000acf0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000acf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acf8:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000acfe:	50                   	push   eax
c000acff:	e8 34 5a ff ff       	call   c0000738 <strcpy>
c000ad04:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad08:	83 c4 18             	add    esp,0x18
c000ad0b:	5b                   	pop    ebx
c000ad0c:	e9 65 fe ff ff       	jmp    c000ab76 <VgaText::updateTitle()>
c000ad11:	90                   	nop

c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad12:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad16:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ad1b:	83 e0 0f             	and    eax,0xf
c000ad1e:	c1 e2 04             	shl    edx,0x4
c000ad21:	09 d0                	or     eax,edx
c000ad23:	c3                   	ret    

c000ad24 <VgaText::scrollScreen()>:
c000ad24:	55                   	push   ebp
c000ad25:	b9 01 00 00 00       	mov    ecx,0x1
c000ad2a:	57                   	push   edi
c000ad2b:	56                   	push   esi
c000ad2c:	53                   	push   ebx
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad34:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad3a:	31 ff                	xor    edi,edi
c000ad3c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad3f:	83 f9 17             	cmp    ecx,0x17
c000ad42:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad45:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad4c:	75 27                	jne    c000ad75 <VgaText::scrollScreen()+0x51>
c000ad4e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad51:	01 f5                	add    ebp,esi
c000ad53:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad59:	74 16                	je     c000ad71 <VgaText::scrollScreen()+0x4d>
c000ad5b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad5f:	50                   	push   eax
c000ad60:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad64:	50                   	push   eax
c000ad65:	e8 a8 ff ff ff       	call   c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>
c000ad6a:	5a                   	pop    edx
c000ad6b:	5a                   	pop    edx
c000ad6c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad6f:	eb 04                	jmp    c000ad75 <VgaText::scrollScreen()+0x51>
c000ad71:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad75:	47                   	inc    edi
c000ad76:	46                   	inc    esi
c000ad77:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad7d:	75 bd                	jne    c000ad3c <VgaText::scrollScreen()+0x18>
c000ad7f:	41                   	inc    ecx
c000ad80:	83 f9 18             	cmp    ecx,0x18
c000ad83:	75 af                	jne    c000ad34 <VgaText::scrollScreen()+0x10>
c000ad85:	39 1d e4 8a 02 c0    	cmp    DWORD PTR ds:0xc0028ae4,ebx
c000ad8b:	75 1b                	jne    c000ada8 <VgaText::scrollScreen()+0x84>
c000ad8d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ad91:	74 05                	je     c000ad98 <VgaText::scrollScreen()+0x74>
c000ad93:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000ad96:	eb 10                	jmp    c000ada8 <VgaText::scrollScreen()+0x84>
c000ad98:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000ad9b:	85 c0                	test   eax,eax
c000ad9d:	74 09                	je     c000ada8 <VgaText::scrollScreen()+0x84>
c000ad9f:	83 ec 0c             	sub    esp,0xc
c000ada2:	53                   	push   ebx
c000ada3:	ff d0                	call   eax
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000adac:	83 c4 0c             	add    esp,0xc
c000adaf:	5b                   	pop    ebx
c000adb0:	5e                   	pop    esi
c000adb1:	5f                   	pop    edi
c000adb2:	5d                   	pop    ebp
c000adb3:	e9 4a fe ff ff       	jmp    c000ac02 <VgaText::updateCursor()>

c000adb8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000adb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000adbd:	c1 e0 08             	shl    eax,0x8
c000adc0:	89 c2                	mov    edx,eax
c000adc2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000adc7:	09 d0                	or     eax,edx
c000adc9:	c3                   	ret    

c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000adca:	56                   	push   esi
c000adcb:	53                   	push   ebx
c000adcc:	51                   	push   ecx
c000adcd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000add1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000add6:	50                   	push   eax
c000add7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000addc:	50                   	push   eax
c000addd:	e8 30 ff ff ff       	call   c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>
c000ade2:	5b                   	pop    ebx
c000ade3:	0f b6 c0             	movzx  eax,al
c000ade6:	5e                   	pop    esi
c000ade7:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000adec:	50                   	push   eax
c000aded:	53                   	push   ebx
c000adee:	e8 c5 ff ff ff       	call   c000adb8 <VgaText::combineCharAndColour(char, unsigned char)>
c000adf3:	5a                   	pop    edx
c000adf4:	5e                   	pop    esi
c000adf5:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000adf8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000adfe:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae02:	0f b7 d2             	movzx  edx,dx
c000ae05:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae09:	39 0d e4 8a 02 c0    	cmp    DWORD PTR ds:0xc0028ae4,ecx
c000ae0f:	75 10                	jne    c000ae21 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae11:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae14:	85 c0                	test   eax,eax
c000ae16:	74 09                	je     c000ae21 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae18:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae1c:	5a                   	pop    edx
c000ae1d:	5b                   	pop    ebx
c000ae1e:	5e                   	pop    esi
c000ae1f:	ff e0                	jmp    eax
c000ae21:	58                   	pop    eax
c000ae22:	5b                   	pop    ebx
c000ae23:	5e                   	pop    esi
c000ae24:	c3                   	ret    
c000ae25:	90                   	nop

c000ae26 <VgaText::getCursorX()>:
c000ae26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae2a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae2d:	c3                   	ret    

c000ae2e <VgaText::getCursorY()>:
c000ae2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae32:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae35:	c3                   	ret    

c000ae36 <VgaText::setCursor(int, int)>:
c000ae36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae3e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae48:	e9 b5 fd ff ff       	jmp    c000ac02 <VgaText::updateCursor()>

c000ae4d <setActiveTerminal(VgaText*)>:
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 08             	sub    esp,0x8
c000ae51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae55:	85 db                	test   ebx,ebx
c000ae57:	75 11                	jne    c000ae6a <setActiveTerminal(VgaText*)+0x1d>
c000ae59:	c7 44 24 10 04 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024b04
c000ae61:	83 c4 08             	add    esp,0x8
c000ae64:	5b                   	pop    ebx
c000ae65:	e9 8b a1 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c000ae6a:	a1 e4 8a 02 c0       	mov    eax,ds:0xc0028ae4
c000ae6f:	85 c0                	test   eax,eax
c000ae71:	74 0c                	je     c000ae7f <setActiveTerminal(VgaText*)+0x32>
c000ae73:	83 ec 0c             	sub    esp,0xc
c000ae76:	50                   	push   eax
c000ae77:	e8 86 fd ff ff       	call   c000ac02 <VgaText::updateCursor()>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 1d e4 8a 02 c0    	mov    DWORD PTR ds:0xc0028ae4,ebx
c000ae85:	51                   	push   ecx
c000ae86:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae89:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae8c:	53                   	push   ebx
c000ae8d:	e8 a4 ff ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ae99:	75 07                	jne    c000aea2 <setActiveTerminal(VgaText*)+0x55>
c000ae9b:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aea2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aea6:	83 c4 08             	add    esp,0x8
c000aea9:	5b                   	pop    ebx
c000aeaa:	e9 05 fd ff ff       	jmp    c000abb4 <VgaText::load()>

c000aeaf <doTerminalCycle()>:
c000aeaf:	83 ec 18             	sub    esp,0x18
c000aeb2:	a1 e0 8a 02 c0       	mov    eax,ds:0xc0028ae0
c000aeb7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aeba:	50                   	push   eax
c000aebb:	a3 e0 8a 02 c0       	mov    ds:0xc0028ae0,eax
c000aec0:	e8 88 ff ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c000aec5:	83 c4 1c             	add    esp,0x1c
c000aec8:	c3                   	ret    
c000aec9:	90                   	nop

c000aeca <VgaText::setCursorX(int)>:
c000aeca:	83 ec 10             	sub    esp,0x10
c000aecd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aed8:	50                   	push   eax
c000aed9:	e8 58 ff ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000aede:	83 c4 1c             	add    esp,0x1c
c000aee1:	c3                   	ret    

c000aee2 <VgaText::setCursorY(int)>:
c000aee2:	83 ec 10             	sub    esp,0x10
c000aee5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aeed:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000aef0:	50                   	push   eax
c000aef1:	e8 40 ff ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000aef6:	83 c4 1c             	add    esp,0x1c
c000aef9:	c3                   	ret    

c000aefa <VgaText::incrementCursor(bool)>:
c000aefa:	56                   	push   esi
c000aefb:	53                   	push   ebx
c000aefc:	51                   	push   ecx
c000aefd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af08:	40                   	inc    eax
c000af09:	83 f8 50             	cmp    eax,0x50
c000af0c:	74 05                	je     c000af13 <VgaText::incrementCursor(bool)+0x19>
c000af0e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af11:	eb 24                	jmp    c000af37 <VgaText::incrementCursor(bool)+0x3d>
c000af13:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af16:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af1d:	8d 50 01             	lea    edx,[eax+0x1]
c000af20:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af23:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af26:	75 0f                	jne    c000af37 <VgaText::incrementCursor(bool)+0x3d>
c000af28:	83 ec 0c             	sub    esp,0xc
c000af2b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af2e:	53                   	push   ebx
c000af2f:	e8 f0 fd ff ff       	call   c000ad24 <VgaText::scrollScreen()>
c000af34:	83 c4 10             	add    esp,0x10
c000af37:	89 f0                	mov    eax,esi
c000af39:	84 c0                	test   al,al
c000af3b:	74 0c                	je     c000af49 <VgaText::incrementCursor(bool)+0x4f>
c000af3d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af41:	5a                   	pop    edx
c000af42:	5b                   	pop    ebx
c000af43:	5e                   	pop    esi
c000af44:	e9 b9 fc ff ff       	jmp    c000ac02 <VgaText::updateCursor()>
c000af49:	58                   	pop    eax
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	c3                   	ret    
c000af4d:	90                   	nop

c000af4e <VgaText::decrementCursor(bool)>:
c000af4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af56:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af59:	85 c0                	test   eax,eax
c000af5b:	74 04                	je     c000af61 <VgaText::decrementCursor(bool)+0x13>
c000af5d:	48                   	dec    eax
c000af5e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af61:	84 c9                	test   cl,cl
c000af63:	74 09                	je     c000af6e <VgaText::decrementCursor(bool)+0x20>
c000af65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af69:	e9 94 fc ff ff       	jmp    c000ac02 <VgaText::updateCursor()>
c000af6e:	c3                   	ret    
c000af6f:	90                   	nop

c000af70 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af70:	53                   	push   ebx
c000af71:	83 ec 08             	sub    esp,0x8
c000af74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af84:	3c 07                	cmp    al,0x7
c000af86:	75 2a                	jne    c000afb2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000af88:	a1 98 8b 02 c0       	mov    eax,ds:0xc0028b98
c000af8d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af95:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000af9d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000afa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afa9:	83 c4 08             	add    esp,0x8
c000afac:	5b                   	pop    ebx
c000afad:	e9 d4 2f 00 00       	jmp    c000df86 <Buzzer::beep(int, int, bool)>
c000afb2:	3c 0d                	cmp    al,0xd
c000afb4:	75 09                	jne    c000afbf <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000afb6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afbd:	eb 2c                	jmp    c000afeb <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000afbf:	3c 0a                	cmp    al,0xa
c000afc1:	75 31                	jne    c000aff4 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000afc3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afc6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afcd:	8d 50 01             	lea    edx,[eax+0x1]
c000afd0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000afd3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000afd6:	75 0f                	jne    c000afe7 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000afde:	53                   	push   ebx
c000afdf:	e8 40 fd ff ff       	call   c000ad24 <VgaText::scrollScreen()>
c000afe4:	83 c4 10             	add    esp,0x10
c000afe7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000afeb:	83 c4 08             	add    esp,0x8
c000afee:	5b                   	pop    ebx
c000afef:	e9 0e fc ff ff       	jmp    c000ac02 <VgaText::updateCursor()>
c000aff4:	3c 08                	cmp    al,0x8
c000aff6:	75 25                	jne    c000b01d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000aff8:	50                   	push   eax
c000aff9:	50                   	push   eax
c000affa:	6a 01                	push   0x1
c000affc:	53                   	push   ebx
c000affd:	e8 4c ff ff ff       	call   c000af4e <VgaText::decrementCursor(bool)>
c000b002:	5a                   	pop    edx
c000b003:	59                   	pop    ecx
c000b004:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b007:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b00a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b00d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b010:	6a 20                	push   0x20
c000b012:	53                   	push   ebx
c000b013:	e8 b2 fd ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b018:	83 c4 28             	add    esp,0x28
c000b01b:	5b                   	pop    ebx
c000b01c:	c3                   	ret    
c000b01d:	83 ec 08             	sub    esp,0x8
c000b020:	0f be c0             	movsx  eax,al
c000b023:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b026:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b029:	51                   	push   ecx
c000b02a:	52                   	push   edx
c000b02b:	50                   	push   eax
c000b02c:	53                   	push   ebx
c000b02d:	e8 98 fd ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b032:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b036:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b03e:	83 c4 28             	add    esp,0x28
c000b041:	5b                   	pop    ebx
c000b042:	e9 b3 fe ff ff       	jmp    c000aefa <VgaText::incrementCursor(bool)>
c000b047:	90                   	nop

c000b048 <VgaText::doUpdate()>:
c000b048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b04c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b04f:	85 c0                	test   eax,eax
c000b051:	74 02                	je     c000b055 <VgaText::doUpdate()+0xd>
c000b053:	ff e0                	jmp    eax
c000b055:	c3                   	ret    

c000b056 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b056:	55                   	push   ebp
c000b057:	31 ed                	xor    ebp,ebp
c000b059:	57                   	push   edi
c000b05a:	56                   	push   esi
c000b05b:	53                   	push   ebx
c000b05c:	83 ec 1c             	sub    esp,0x1c
c000b05f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b063:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b068:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b06f:	50                   	push   eax
c000b070:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b075:	50                   	push   eax
c000b076:	e8 97 fc ff ff       	call   c000ad12 <VgaText::combineColours(unsigned char, unsigned char)>
c000b07b:	59                   	pop    ecx
c000b07c:	0f b6 c0             	movzx  eax,al
c000b07f:	5e                   	pop    esi
c000b080:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b085:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b089:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b08c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b090:	0f b7 f6             	movzx  esi,si
c000b093:	01 f6                	add    esi,esi
c000b095:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b098:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b09b:	84 c0                	test   al,al
c000b09d:	0f 84 fd 00 00 00    	je     c000b1a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b0a3:	3c 0d                	cmp    al,0xd
c000b0a5:	75 0c                	jne    c000b0b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b0a7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0ae:	e9 e7 00 00 00       	jmp    c000b19a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0b3:	3c 0a                	cmp    al,0xa
c000b0b5:	75 47                	jne    c000b0fe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b0b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b0ba:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0c1:	8d 48 01             	lea    ecx,[eax+0x1]
c000b0c4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b0c7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0ca:	75 0f                	jne    c000b0db <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0cc:	83 ec 0c             	sub    esp,0xc
c000b0cf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0d2:	53                   	push   ebx
c000b0d3:	e8 4c fc ff ff       	call   c000ad24 <VgaText::scrollScreen()>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	83 ec 0c             	sub    esp,0xc
c000b0de:	31 ed                	xor    ebp,ebp
c000b0e0:	53                   	push   ebx
c000b0e1:	e8 1c fb ff ff       	call   c000ac02 <VgaText::updateCursor()>
c000b0e6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0f1:	0f b7 f6             	movzx  esi,si
c000b0f4:	01 f6                	add    esi,esi
c000b0f6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0f9:	e9 9c 00 00 00       	jmp    c000b19a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0fe:	3c 08                	cmp    al,0x8
c000b100:	75 35                	jne    c000b137 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b102:	56                   	push   esi
c000b103:	56                   	push   esi
c000b104:	6a 01                	push   0x1
c000b106:	53                   	push   ebx
c000b107:	e8 42 fe ff ff       	call   c000af4e <VgaText::decrementCursor(bool)>
c000b10c:	58                   	pop    eax
c000b10d:	5a                   	pop    edx
c000b10e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b111:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b114:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b117:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b11a:	6a 20                	push   0x20
c000b11c:	53                   	push   ebx
c000b11d:	e8 a8 fc ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b122:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b127:	83 c4 20             	add    esp,0x20
c000b12a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b12d:	0f b7 f6             	movzx  esi,si
c000b130:	01 f6                	add    esi,esi
c000b132:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b135:	eb 63                	jmp    c000b19a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b137:	51                   	push   ecx
c000b138:	51                   	push   ecx
c000b139:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13d:	50                   	push   eax
c000b13e:	e8 75 fc ff ff       	call   c000adb8 <VgaText::combineCharAndColour(char, unsigned char)>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	66 89 06             	mov    WORD PTR [esi],ax
c000b149:	39 1d e4 8a 02 c0    	cmp    DWORD PTR ds:0xc0028ae4,ebx
c000b14f:	75 21                	jne    c000b172 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b151:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b154:	85 c0                	test   eax,eax
c000b156:	74 1a                	je     c000b172 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b158:	52                   	push   edx
c000b159:	52                   	push   edx
c000b15a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b15d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b160:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b164:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b168:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b16b:	51                   	push   ecx
c000b16c:	53                   	push   ebx
c000b16d:	ff d0                	call   eax
c000b16f:	83 c4 20             	add    esp,0x20
c000b172:	83 c6 02             	add    esi,0x2
c000b175:	50                   	push   eax
c000b176:	50                   	push   eax
c000b177:	6a 00                	push   0x0
c000b179:	53                   	push   ebx
c000b17a:	e8 7b fd ff ff       	call   c000aefa <VgaText::incrementCursor(bool)>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b186:	75 0d                	jne    c000b195 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b188:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b18d:	0f b7 f6             	movzx  esi,si
c000b190:	01 f6                	add    esi,esi
c000b192:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b195:	bd 01 00 00 00       	mov    ebp,0x1
c000b19a:	47                   	inc    edi
c000b19b:	e9 f8 fe ff ff       	jmp    c000b098 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	53                   	push   ebx
c000b1a4:	e8 59 fa ff ff       	call   c000ac02 <VgaText::updateCursor()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	89 e8                	mov    eax,ebp
c000b1ae:	84 c0                	test   al,al
c000b1b0:	74 0c                	je     c000b1be <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b1b2:	83 ec 0c             	sub    esp,0xc
c000b1b5:	53                   	push   ebx
c000b1b6:	e8 8d fe ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b1bb:	83 c4 10             	add    esp,0x10
c000b1be:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1c5:	83 c4 1c             	add    esp,0x1c
c000b1c8:	5b                   	pop    ebx
c000b1c9:	5e                   	pop    esi
c000b1ca:	5f                   	pop    edi
c000b1cb:	5d                   	pop    ebp
c000b1cc:	c3                   	ret    
c000b1cd:	90                   	nop

c000b1ce <VgaText::clearScreen()>:
c000b1ce:	57                   	push   edi
c000b1cf:	56                   	push   esi
c000b1d0:	31 f6                	xor    esi,esi
c000b1d2:	53                   	push   ebx
c000b1d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1d7:	52                   	push   edx
c000b1d8:	6a 00                	push   0x0
c000b1da:	6a 00                	push   0x0
c000b1dc:	53                   	push   ebx
c000b1dd:	e8 54 fc ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000b1e2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b1ef:	7e 20                	jle    c000b211 <VgaText::clearScreen()+0x43>
c000b1f1:	31 ff                	xor    edi,edi
c000b1f3:	50                   	push   eax
c000b1f4:	50                   	push   eax
c000b1f5:	56                   	push   esi
c000b1f6:	57                   	push   edi
c000b1f7:	47                   	inc    edi
c000b1f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b1fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b1fe:	6a 20                	push   0x20
c000b200:	53                   	push   ebx
c000b201:	e8 c4 fb ff ff       	call   c000adca <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b206:	83 c4 20             	add    esp,0x20
c000b209:	83 ff 50             	cmp    edi,0x50
c000b20c:	75 e5                	jne    c000b1f3 <VgaText::clearScreen()+0x25>
c000b20e:	46                   	inc    esi
c000b20f:	eb db                	jmp    c000b1ec <VgaText::clearScreen()+0x1e>
c000b211:	83 ec 0c             	sub    esp,0xc
c000b214:	53                   	push   ebx
c000b215:	e8 2e fe ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b21a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	5b                   	pop    ebx
c000b225:	5e                   	pop    esi
c000b226:	5f                   	pop    edi
c000b227:	c3                   	ret    

c000b228 <VgaText::putchar(char)>:
c000b228:	56                   	push   esi
c000b229:	53                   	push   ebx
c000b22a:	83 ec 14             	sub    esp,0x14
c000b22d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b231:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b235:	3c 5b                	cmp    al,0x5b
c000b237:	75 18                	jne    c000b251 <VgaText::putchar(char)+0x29>
c000b239:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b23d:	74 1f                	je     c000b25e <VgaText::putchar(char)+0x36>
c000b23f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b245:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b24c:	e9 bd 00 00 00       	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b251:	3c 1b                	cmp    al,0x1b
c000b253:	75 09                	jne    c000b25e <VgaText::putchar(char)+0x36>
c000b255:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b259:	e9 b0 00 00 00       	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b25e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b261:	84 c9                	test   cl,cl
c000b263:	0f 84 92 00 00 00    	je     c000b2fb <VgaText::putchar(char)+0xd3>
c000b269:	8d 50 c0             	lea    edx,[eax-0x40]
c000b26c:	80 fa 3e             	cmp    dl,0x3e
c000b26f:	77 76                	ja     c000b2e7 <VgaText::putchar(char)+0xbf>
c000b271:	3c 6d                	cmp    al,0x6d
c000b273:	75 47                	jne    c000b2bc <VgaText::putchar(char)+0x94>
c000b275:	31 f6                	xor    esi,esi
c000b277:	31 d2                	xor    edx,edx
c000b279:	31 c0                	xor    eax,eax
c000b27b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b27e:	7e 2d                	jle    c000b2ad <VgaText::putchar(char)+0x85>
c000b280:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b285:	80 fa 3b             	cmp    dl,0x3b
c000b288:	75 17                	jne    c000b2a1 <VgaText::putchar(char)+0x79>
c000b28a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b28e:	50                   	push   eax
c000b28f:	53                   	push   ebx
c000b290:	e8 83 f9 ff ff       	call   c000ac18 <VgaText::doANSI_SGR(int)>
c000b295:	59                   	pop    ecx
c000b296:	31 d2                	xor    edx,edx
c000b298:	58                   	pop    eax
c000b299:	31 c0                	xor    eax,eax
c000b29b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b29f:	eb 09                	jmp    c000b2aa <VgaText::putchar(char)+0x82>
c000b2a1:	6b c0 0a             	imul   eax,eax,0xa
c000b2a4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b2a8:	88 ca                	mov    dl,cl
c000b2aa:	46                   	inc    esi
c000b2ab:	eb ce                	jmp    c000b27b <VgaText::putchar(char)+0x53>
c000b2ad:	84 d2                	test   dl,dl
c000b2af:	74 2e                	je     c000b2df <VgaText::putchar(char)+0xb7>
c000b2b1:	50                   	push   eax
c000b2b2:	53                   	push   ebx
c000b2b3:	e8 60 f9 ff ff       	call   c000ac18 <VgaText::doANSI_SGR(int)>
c000b2b8:	58                   	pop    eax
c000b2b9:	5a                   	pop    edx
c000b2ba:	eb 23                	jmp    c000b2df <VgaText::putchar(char)+0xb7>
c000b2bc:	3c 4a                	cmp    al,0x4a
c000b2be:	75 1f                	jne    c000b2df <VgaText::putchar(char)+0xb7>
c000b2c0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b2c4:	75 19                	jne    c000b2df <VgaText::putchar(char)+0xb7>
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	53                   	push   ebx
c000b2ca:	e8 ff fe ff ff       	call   c000b1ce <VgaText::clearScreen()>
c000b2cf:	83 c4 0c             	add    esp,0xc
c000b2d2:	6a 00                	push   0x0
c000b2d4:	6a 00                	push   0x0
c000b2d6:	53                   	push   ebx
c000b2d7:	e8 5a fb ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000b2dc:	83 c4 10             	add    esp,0x10
c000b2df:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b2e5:	eb 27                	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b2e7:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b2ea:	83 fa 0e             	cmp    edx,0xe
c000b2ed:	7f 1f                	jg     c000b30e <VgaText::putchar(char)+0xe6>
c000b2ef:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b2f2:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b2f5:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b2f9:	eb 13                	jmp    c000b30e <VgaText::putchar(char)+0xe6>
c000b2fb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b2fe:	0f be c0             	movsx  eax,al
c000b301:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b304:	50                   	push   eax
c000b305:	53                   	push   ebx
c000b306:	e8 65 fc ff ff       	call   c000af70 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b30b:	83 c4 10             	add    esp,0x10
c000b30e:	83 c4 14             	add    esp,0x14
c000b311:	5b                   	pop    ebx
c000b312:	5e                   	pop    esi
c000b313:	c3                   	ret    

c000b314 <VgaText::putx(unsigned int)>:
c000b314:	57                   	push   edi
c000b315:	b9 11 00 00 00       	mov    ecx,0x11
c000b31a:	56                   	push   esi
c000b31b:	be 12 4b 02 c0       	mov    esi,0xc0024b12
c000b320:	53                   	push   ebx
c000b321:	83 ec 20             	sub    esp,0x20
c000b324:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b328:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b32c:	fc                   	cld    
c000b32d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b32f:	be 08 00 00 00       	mov    esi,0x8
c000b334:	50                   	push   eax
c000b335:	50                   	push   eax
c000b336:	89 d8                	mov    eax,ebx
c000b338:	c1 e3 04             	shl    ebx,0x4
c000b33b:	c1 e8 1c             	shr    eax,0x1c
c000b33e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b343:	50                   	push   eax
c000b344:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b348:	e8 db fe ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	4e                   	dec    esi
c000b351:	75 e1                	jne    c000b334 <VgaText::putx(unsigned int)+0x20>
c000b353:	83 c4 20             	add    esp,0x20
c000b356:	5b                   	pop    ebx
c000b357:	5e                   	pop    esi
c000b358:	5f                   	pop    edi
c000b359:	c3                   	ret    

c000b35a <VgaText::puts(char const*)>:
c000b35a:	53                   	push   ebx
c000b35b:	83 ec 08             	sub    esp,0x8
c000b35e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b362:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b365:	84 c0                	test   al,al
c000b367:	74 12                	je     c000b37b <VgaText::puts(char const*)+0x21>
c000b369:	43                   	inc    ebx
c000b36a:	51                   	push   ecx
c000b36b:	51                   	push   ecx
c000b36c:	50                   	push   eax
c000b36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b371:	e8 b2 fe ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	eb e7                	jmp    c000b362 <VgaText::puts(char const*)+0x8>
c000b37b:	83 c4 08             	add    esp,0x8
c000b37e:	5b                   	pop    ebx
c000b37f:	c3                   	ret    

c000b380 <VgaText::VgaText(char const*)>:
c000b380:	57                   	push   edi
c000b381:	56                   	push   esi
c000b382:	53                   	push   ebx
c000b383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b387:	83 ec 08             	sub    esp,0x8
c000b38a:	6a 00                	push   0x0
c000b38c:	50                   	push   eax
c000b38d:	e8 44 05 00 00       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	ba 78 4b 02 c0       	mov    edx,0xc0024b78
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	89 10                	mov    DWORD PTR [eax],edx
c000b3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3af:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ba:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ca:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3eb:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f6:	8d 50 60             	lea    edx,[eax+0x60]
c000b3f9:	bb c0 8a 02 c0       	mov    ebx,0xc0028ac0
c000b3fe:	b8 08 00 00 00       	mov    eax,0x8
c000b403:	fc                   	cld    
c000b404:	89 d7                	mov    edi,edx
c000b406:	89 de                	mov    esi,ebx
c000b408:	89 c1                	mov    ecx,eax
c000b40a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	05 82 00 00 00       	add    eax,0x82
c000b415:	83 ec 08             	sub    esp,0x8
c000b418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41c:	50                   	push   eax
c000b41d:	e8 16 53 ff ff       	call   c0000738 <strcpy>
c000b422:	83 c4 10             	add    esp,0x10
c000b425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b429:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b430:	83 ec 0c             	sub    esp,0xc
c000b433:	6a 01                	push   0x1
c000b435:	e8 df 08 00 00       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000b43a:	83 c4 10             	add    esp,0x10
c000b43d:	89 c2                	mov    edx,eax
c000b43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b443:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b446:	8b 1d 90 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b90
c000b44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b450:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b453:	89 c6                	mov    esi,eax
c000b455:	e8 b0 ef ff ff       	call   c000a40a <Phys::allocatePage()>
c000b45a:	68 05 0c 00 00       	push   0xc05
c000b45f:	56                   	push   esi
c000b460:	50                   	push   eax
c000b461:	53                   	push   ebx
c000b462:	e8 59 0f 00 00       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b471:	83 ec 04             	sub    esp,0x4
c000b474:	68 00 0f 00 00       	push   0xf00
c000b479:	6a 00                	push   0x0
c000b47b:	50                   	push   eax
c000b47c:	e8 fb 51 ff ff       	call   c000067c <memset>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	83 ec 04             	sub    esp,0x4
c000b487:	6a 00                	push   0x0
c000b489:	6a 07                	push   0x7
c000b48b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48f:	e8 18 f8 ff ff       	call   c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	83 ec 04             	sub    esp,0x4
c000b49a:	6a 00                	push   0x0
c000b49c:	6a 00                	push   0x0
c000b49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a2:	e8 8f f9 ff ff       	call   c000ae36 <VgaText::setCursor(int, int)>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b1:	e8 18 fd ff ff       	call   c000b1ce <VgaText::clearScreen()>
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4bd:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c5:	05 02 01 00 00       	add    eax,0x102
c000b4ca:	83 ec 04             	sub    esp,0x4
c000b4cd:	6a 30                	push   0x30
c000b4cf:	6a 00                	push   0x0
c000b4d1:	50                   	push   eax
c000b4d2:	e8 a5 51 ff ff       	call   c000067c <memset>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4de:	05 32 01 00 00       	add    eax,0x132
c000b4e3:	83 ec 04             	sub    esp,0x4
c000b4e6:	68 80 00 00 00       	push   0x80
c000b4eb:	6a 00                	push   0x0
c000b4ed:	50                   	push   eax
c000b4ee:	e8 89 51 ff ff       	call   c000067c <memset>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	90                   	nop
c000b4f7:	5b                   	pop    ebx
c000b4f8:	5e                   	pop    esi
c000b4f9:	5f                   	pop    edi
c000b4fa:	c3                   	ret    
c000b4fb:	90                   	nop

c000b4fc <VgaText::receiveKey(unsigned char)>:
c000b4fc:	55                   	push   ebp
c000b4fd:	57                   	push   edi
c000b4fe:	56                   	push   esi
c000b4ff:	53                   	push   ebx
c000b500:	83 ec 1c             	sub    esp,0x1c
c000b503:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b507:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b50b:	84 db                	test   bl,bl
c000b50d:	0f 84 c6 00 00 00    	je     c000b5d9 <VgaText::receiveKey(unsigned char)+0xdd>
c000b513:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b519:	80 fb 08             	cmp    bl,0x8
c000b51c:	75 2c                	jne    c000b54a <VgaText::receiveKey(unsigned char)+0x4e>
c000b51e:	83 ec 0c             	sub    esp,0xc
c000b521:	57                   	push   edi
c000b522:	e8 71 51 ff ff       	call   c0000698 <strlen>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	85 c0                	test   eax,eax
c000b52c:	74 41                	je     c000b56f <VgaText::receiveKey(unsigned char)+0x73>
c000b52e:	50                   	push   eax
c000b52f:	50                   	push   eax
c000b530:	6a 08                	push   0x8
c000b532:	56                   	push   esi
c000b533:	e8 f0 fc ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b538:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b53b:	e8 58 51 ff ff       	call   c0000698 <strlen>
c000b540:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b548:	eb 22                	jmp    c000b56c <VgaText::receiveKey(unsigned char)+0x70>
c000b54a:	0f be c3             	movsx  eax,bl
c000b54d:	52                   	push   edx
c000b54e:	52                   	push   edx
c000b54f:	50                   	push   eax
c000b550:	56                   	push   esi
c000b551:	e8 d2 fc ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b556:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b55a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b55f:	59                   	pop    ecx
c000b560:	5d                   	pop    ebp
c000b561:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b565:	50                   	push   eax
c000b566:	57                   	push   edi
c000b567:	e8 0c 53 ff ff       	call   c0000878 <strcat>
c000b56c:	83 c4 10             	add    esp,0x10
c000b56f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b576:	75 05                	jne    c000b57d <VgaText::receiveKey(unsigned char)+0x81>
c000b578:	80 fb 0a             	cmp    bl,0xa
c000b57b:	75 50                	jne    c000b5cd <VgaText::receiveKey(unsigned char)+0xd1>
c000b57d:	83 ec 0c             	sub    esp,0xc
c000b580:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b586:	53                   	push   ebx
c000b587:	e8 0c 51 ff ff       	call   c0000698 <strlen>
c000b58c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b58f:	89 c5                	mov    ebp,eax
c000b591:	e8 02 51 ff ff       	call   c0000698 <strlen>
c000b596:	83 c4 10             	add    esp,0x10
c000b599:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b59d:	3d 80 00 00 00       	cmp    eax,0x80
c000b5a2:	76 10                	jbe    c000b5b4 <VgaText::receiveKey(unsigned char)+0xb8>
c000b5a4:	83 ec 0c             	sub    esp,0xc
c000b5a7:	68 23 4b 02 c0       	push   0xc0024b23
c000b5ac:	e8 44 9a 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000b5b1:	83 c4 10             	add    esp,0x10
c000b5b4:	50                   	push   eax
c000b5b5:	50                   	push   eax
c000b5b6:	57                   	push   edi
c000b5b7:	53                   	push   ebx
c000b5b8:	e8 bb 52 ff ff       	call   c0000878 <strcat>
c000b5bd:	83 c4 0c             	add    esp,0xc
c000b5c0:	6a 30                	push   0x30
c000b5c2:	6a 00                	push   0x0
c000b5c4:	57                   	push   edi
c000b5c5:	e8 b2 50 ff ff       	call   c000067c <memset>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	83 ec 0c             	sub    esp,0xc
c000b5d0:	56                   	push   esi
c000b5d1:	e8 72 fa ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b5d6:	83 c4 10             	add    esp,0x10
c000b5d9:	83 c4 1c             	add    esp,0x1c
c000b5dc:	5b                   	pop    ebx
c000b5dd:	5e                   	pop    esi
c000b5de:	5f                   	pop    edi
c000b5df:	5d                   	pop    ebp
c000b5e0:	c3                   	ret    
c000b5e1:	90                   	nop

c000b5e2 <VgaText::write(unsigned long long, void*, int*)>:
c000b5e2:	55                   	push   ebp
c000b5e3:	57                   	push   edi
c000b5e4:	56                   	push   esi
c000b5e5:	53                   	push   ebx
c000b5e6:	83 ec 0c             	sub    esp,0xc
c000b5e9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b5ed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b5f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b5f5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b5fc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b5ff:	39 eb                	cmp    ebx,ebp
c000b601:	74 13                	je     c000b616 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b603:	43                   	inc    ebx
c000b604:	50                   	push   eax
c000b605:	50                   	push   eax
c000b606:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b60a:	50                   	push   eax
c000b60b:	56                   	push   esi
c000b60c:	e8 17 fc ff ff       	call   c000b228 <VgaText::putchar(char)>
c000b611:	83 c4 10             	add    esp,0x10
c000b614:	eb e9                	jmp    c000b5ff <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b616:	83 ec 0c             	sub    esp,0xc
c000b619:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b620:	56                   	push   esi
c000b621:	e8 22 fa ff ff       	call   c000b048 <VgaText::doUpdate()>
c000b626:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b62a:	89 38                	mov    DWORD PTR [eax],edi
c000b62c:	83 c4 1c             	add    esp,0x1c
c000b62f:	31 c0                	xor    eax,eax
c000b631:	5b                   	pop    ebx
c000b632:	5e                   	pop    esi
c000b633:	5f                   	pop    edi
c000b634:	5d                   	pop    ebp
c000b635:	c3                   	ret    

c000b636 <newTerminal(char*)>:
c000b636:	83 ec 28             	sub    esp,0x28
c000b639:	68 b4 01 00 00       	push   0x1b4
c000b63e:	e8 10 e7 ff ff       	call   c0009d53 <malloc>
c000b643:	5a                   	pop    edx
c000b644:	59                   	pop    ecx
c000b645:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b649:	50                   	push   eax
c000b64a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b64e:	e8 2d fd ff ff       	call   c000b380 <VgaText::VgaText(char const*)>
c000b653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b657:	83 c4 2c             	add    esp,0x2c
c000b65a:	c3                   	ret    
c000b65b:	90                   	nop

c000b65c <TSS::TSS()>:
c000b65c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b660:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b667:	90                   	nop
c000b668:	c3                   	ret    
c000b669:	90                   	nop
c000b66a:	66 90                	xchg   ax,ax

c000b66c <TSS::setESP(unsigned long)>:
c000b66c:	55                   	push   ebp
c000b66d:	89 e5                	mov    ebp,esp
c000b66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b672:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b675:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b678:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b67b:	90                   	nop
c000b67c:	5d                   	pop    ebp
c000b67d:	c3                   	ret    
c000b67e:	66 90                	xchg   ax,ax

c000b680 <TSS::flush()>:
c000b680:	55                   	push   ebp
c000b681:	89 e5                	mov    ebp,esp
c000b683:	83 ec 10             	sub    esp,0x10
c000b686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b689:	8b 00                	mov    eax,DWORD PTR [eax]
c000b68b:	83 c8 03             	or     eax,0x3
c000b68e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b692:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b696:	66 89 d0             	mov    ax,dx
c000b699:	0f 00 d8             	ltr    ax
c000b69c:	90                   	nop
c000b69d:	c9                   	leave  
c000b69e:	c3                   	ret    
c000b69f:	90                   	nop

c000b6a0 <TSS::setup(unsigned long, unsigned long)>:
c000b6a0:	55                   	push   ebp
c000b6a1:	89 e5                	mov    ebp,esp
c000b6a3:	83 ec 18             	sub    esp,0x18
c000b6a6:	83 ec 0c             	sub    esp,0xc
c000b6a9:	6a 68                	push   0x68
c000b6ab:	e8 a3 e6 ff ff       	call   c0009d53 <malloc>
c000b6b0:	83 c4 10             	add    esp,0x10
c000b6b3:	89 c2                	mov    edx,eax
c000b6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6c1:	83 ec 04             	sub    esp,0x4
c000b6c4:	6a 68                	push   0x68
c000b6c6:	6a 00                	push   0x0
c000b6c8:	50                   	push   eax
c000b6c9:	e8 ae 4f ff ff       	call   c000067c <memset>
c000b6ce:	83 c4 10             	add    esp,0x10
c000b6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6d7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6e3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6fb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b707:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b70d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b710:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b713:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b71c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b72b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b734:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b737:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b73d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b740:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b743:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b746:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b74c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b74f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b752:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b75b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b768:	0f 20 da             	mov    edx,cr3
c000b76b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b76e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b771:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b777:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b77a:	83 ec 08             	sub    esp,0x8
c000b77d:	50                   	push   eax
c000b77e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b781:	50                   	push   eax
c000b782:	e8 27 de ff ff       	call   c00095ae <GDTEntry::setBase(unsigned int)>
c000b787:	83 c4 10             	add    esp,0x10
c000b78a:	83 ec 08             	sub    esp,0x8
c000b78d:	6a 68                	push   0x68
c000b78f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b792:	50                   	push   eax
c000b793:	e8 32 de ff ff       	call   c00095ca <GDTEntry::setLimit(unsigned int)>
c000b798:	83 c4 10             	add    esp,0x10
c000b79b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b79f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7a2:	83 e0 0f             	and    eax,0xf
c000b7a5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7a8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7ab:	83 c8 40             	or     eax,0x40
c000b7ae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7b1:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000b7b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7bc:	05 78 01 00 00       	add    eax,0x178
c000b7c1:	83 ec 04             	sub    esp,0x4
c000b7c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7c7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7ca:	50                   	push   eax
c000b7cb:	e8 2e de ff ff       	call   c00095fe <GDT::addEntry(GDTEntry)>
c000b7d0:	83 c4 10             	add    esp,0x10
c000b7d3:	89 c2                	mov    edx,eax
c000b7d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7d8:	89 10                	mov    DWORD PTR [eax],edx
c000b7da:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000b7df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7e5:	05 78 01 00 00       	add    eax,0x178
c000b7ea:	83 ec 0c             	sub    esp,0xc
c000b7ed:	50                   	push   eax
c000b7ee:	e8 35 de ff ff       	call   c0009628 <GDT::flush()>
c000b7f3:	83 c4 10             	add    esp,0x10
c000b7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b7fb:	c9                   	leave  
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b802:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b809:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b80e:	75 08                	jne    c000b818 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b810:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b816:	eb 38                	jmp    c000b850 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b818:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b81d:	75 17                	jne    c000b836 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b81f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b824:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b827:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b82d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b82f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b833:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b836:	89 c1                	mov    ecx,eax
c000b838:	83 e1 fd             	and    ecx,0xfffffffd
c000b83b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b841:	74 cd                	je     c000b810 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b843:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b848:	83 e0 ef             	and    eax,0xffffffef
c000b84b:	83 f8 08             	cmp    eax,0x8
c000b84e:	76 c0                	jbe    c000b810 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b850:	31 c0                	xor    eax,eax
c000b852:	c3                   	ret    
c000b853:	90                   	nop

c000b854 <ReservedFilename::isAtty()>:
c000b854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b858:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b85b:	31 c0                	xor    eax,eax
c000b85d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b863:	74 09                	je     c000b86e <ReservedFilename::isAtty()+0x1a>
c000b865:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b86b:	0f 94 c0             	sete   al
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b874:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b87b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b87f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b884:	75 08                	jne    c000b88e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b886:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b88c:	eb 3d                	jmp    c000b8cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b88e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b893:	75 17                	jne    c000b8ac <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b895:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b89a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b89d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8a3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8a9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b8ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b8b1:	75 04                	jne    c000b8b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b8b3:	89 0a                	mov    DWORD PTR [edx],ecx
c000b8b5:	eb 14                	jmp    c000b8cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8b7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b8bc:	74 c8                	je     c000b886 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8be:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8c3:	83 e0 ef             	and    eax,0xffffffef
c000b8c6:	83 f8 08             	cmp    eax,0x8
c000b8c9:	76 bb                	jbe    c000b886 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8cb:	31 c0                	xor    eax,eax
c000b8cd:	c3                   	ret    

c000b8ce <UnixFile::getFileDescriptor()>:
c000b8ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8d5:	c3                   	ret    

c000b8d6 <UnixFile::UnixFile(int)>:
c000b8d6:	53                   	push   ebx
c000b8d7:	83 ec 28             	sub    esp,0x28
c000b8da:	ba 40 4c 02 c0       	mov    edx,0xc0024c40
c000b8df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e3:	89 10                	mov    DWORD PTR [eax],edx
c000b8e5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b8ed:	0f 8f 8c 01 00 00    	jg     c000ba7f <UnixFile::UnixFile(int)+0x1a9>
c000b8f3:	a1 a0 7e 02 c0       	mov    eax,ds:0xc0027ea0
c000b8f8:	8d 50 01             	lea    edx,[eax+0x1]
c000b8fb:	89 15 a0 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea0,edx
c000b901:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b905:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b908:	83 ec 08             	sub    esp,0x8
c000b90b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b90f:	68 78 8b 02 c0       	push   0xc0028b78
c000b914:	e8 db 77 01 00       	call   c00230f4 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b919:	83 c4 10             	add    esp,0x10
c000b91c:	a0 74 8b 02 c0       	mov    al,ds:0xc0028b74
c000b921:	83 f0 01             	xor    eax,0x1
c000b924:	84 c0                	test   al,al
c000b926:	0f 84 54 01 00 00    	je     c000ba80 <UnixFile::UnixFile(int)+0x1aa>
c000b92c:	c6 05 74 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b74,0x1
c000b933:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b93b:	83 ec 0c             	sub    esp,0xc
c000b93e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b942:	e8 0c e4 ff ff       	call   c0009d53 <malloc>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	89 c3                	mov    ebx,eax
c000b94c:	83 ec 08             	sub    esp,0x8
c000b94f:	68 03 ff ff 0f       	push   0xfffff03
c000b954:	53                   	push   ebx
c000b955:	e8 2c 01 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	89 1d 6c 8b 02 c0    	mov    DWORD PTR ds:0xc0028b6c,ebx
c000b963:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b96b:	83 ec 0c             	sub    esp,0xc
c000b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b972:	e8 dc e3 ff ff       	call   c0009d53 <malloc>
c000b977:	83 c4 10             	add    esp,0x10
c000b97a:	89 c3                	mov    ebx,eax
c000b97c:	83 ec 08             	sub    esp,0x8
c000b97f:	68 01 ff ff 0f       	push   0xfffff01
c000b984:	53                   	push   ebx
c000b985:	e8 fc 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b98a:	83 c4 10             	add    esp,0x10
c000b98d:	89 1d 70 8b 02 c0    	mov    DWORD PTR ds:0xc0028b70,ebx
c000b993:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b99b:	83 ec 0c             	sub    esp,0xc
c000b99e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9a2:	e8 ac e3 ff ff       	call   c0009d53 <malloc>
c000b9a7:	83 c4 10             	add    esp,0x10
c000b9aa:	89 c3                	mov    ebx,eax
c000b9ac:	83 ec 08             	sub    esp,0x8
c000b9af:	68 00 ff ff 0f       	push   0xfffff00
c000b9b4:	53                   	push   ebx
c000b9b5:	e8 cc 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b9ba:	83 c4 10             	add    esp,0x10
c000b9bd:	89 1d 64 8b 02 c0    	mov    DWORD PTR ds:0xc0028b64,ebx
c000b9c3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9cb:	83 ec 0c             	sub    esp,0xc
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 7c e3 ff ff       	call   c0009d53 <malloc>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 c3                	mov    ebx,eax
c000b9dc:	83 ec 08             	sub    esp,0x8
c000b9df:	68 02 ff ff 0f       	push   0xfffff02
c000b9e4:	53                   	push   ebx
c000b9e5:	e8 9c 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	89 1d 68 8b 02 c0    	mov    DWORD PTR ds:0xc0028b68,ebx
c000b9f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b9fb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba00:	7f 7e                	jg     c000ba80 <UnixFile::UnixFile(int)+0x1aa>
c000ba02:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba0a:	83 ec 0c             	sub    esp,0xc
c000ba0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba11:	e8 3d e3 ff ff       	call   c0009d53 <malloc>
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	89 c3                	mov    ebx,eax
c000ba1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba1f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ba24:	83 ec 08             	sub    esp,0x8
c000ba27:	50                   	push   eax
c000ba28:	53                   	push   ebx
c000ba29:	e8 58 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba35:	89 1c 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],ebx
c000ba3c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba44:	83 ec 0c             	sub    esp,0xc
c000ba47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4b:	e8 03 e3 ff ff       	call   c0009d53 <malloc>
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	89 c3                	mov    ebx,eax
c000ba55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba59:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba5e:	83 ec 08             	sub    esp,0x8
c000ba61:	50                   	push   eax
c000ba62:	53                   	push   ebx
c000ba63:	e8 1e 00 00 00       	call   c000ba86 <ReservedFilename::ReservedFilename(int)>
c000ba68:	83 c4 10             	add    esp,0x10
c000ba6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba6f:	89 1c 85 00 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7500],ebx
c000ba76:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba7a:	e9 7c ff ff ff       	jmp    c000b9fb <UnixFile::UnixFile(int)+0x125>
c000ba7f:	90                   	nop
c000ba80:	83 c4 28             	add    esp,0x28
c000ba83:	5b                   	pop    ebx
c000ba84:	c3                   	ret    
c000ba85:	90                   	nop

c000ba86 <ReservedFilename::ReservedFilename(int)>:
c000ba86:	83 ec 0c             	sub    esp,0xc
c000ba89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8d:	83 ec 08             	sub    esp,0x8
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	50                   	push   eax
c000ba95:	e8 3c fe ff ff       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	ba 5c 4c 02 c0       	mov    edx,0xc0024c5c
c000baa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baa6:	89 10                	mov    DWORD PTR [eax],edx
c000baa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bab0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bab3:	90                   	nop
c000bab4:	83 c4 0c             	add    esp,0xc
c000bab7:	c3                   	ret    

c000bab8 <UnixFile::~UnixFile()>:
c000bab8:	83 ec 1c             	sub    esp,0x1c
c000babb:	ba 40 4c 02 c0       	mov    edx,0xc0024c40
c000bac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac4:	89 10                	mov    DWORD PTR [eax],edx
c000bac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bacd:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000bad2:	7f 73                	jg     c000bb47 <UnixFile::~UnixFile()+0x8f>
c000bad4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000badc:	83 ec 0c             	sub    esp,0xc
c000badf:	68 78 8b 02 c0       	push   0xc0028b78
c000bae4:	e8 df 76 01 00       	call   c00231c8 <LinkedList<UnixFile>::getFirstElement()>
c000bae9:	83 c4 10             	add    esp,0x10
c000baec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baf0:	83 ec 0c             	sub    esp,0xc
c000baf3:	68 78 8b 02 c0       	push   0xc0028b78
c000baf8:	e8 d3 76 01 00       	call   c00231d0 <LinkedList<UnixFile>::removeFirst()>
c000bafd:	83 c4 10             	add    esp,0x10
c000bb00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb04:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb08:	74 40                	je     c000bb4a <UnixFile::~UnixFile()+0x92>
c000bb0a:	83 ec 08             	sub    esp,0x8
c000bb0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb11:	68 78 8b 02 c0       	push   0xc0028b78
c000bb16:	e8 d9 75 01 00       	call   c00230f4 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bb1b:	83 c4 10             	add    esp,0x10
c000bb1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb22:	8d 50 01             	lea    edx,[eax+0x1]
c000bb25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb29:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb2e:	0f 94 c0             	sete   al
c000bb31:	84 c0                	test   al,al
c000bb33:	74 a7                	je     c000badc <UnixFile::~UnixFile()+0x24>
c000bb35:	83 ec 0c             	sub    esp,0xc
c000bb38:	68 18 4c 02 c0       	push   0xc0024c18
c000bb3d:	e8 b3 94 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	eb 95                	jmp    c000badc <UnixFile::~UnixFile()+0x24>
c000bb47:	90                   	nop
c000bb48:	eb 01                	jmp    c000bb4b <UnixFile::~UnixFile()+0x93>
c000bb4a:	90                   	nop
c000bb4b:	90                   	nop
c000bb4c:	83 c4 1c             	add    esp,0x1c
c000bb4f:	c3                   	ret    

c000bb50 <UnixFile::~UnixFile()>:
c000bb50:	83 ec 0c             	sub    esp,0xc
c000bb53:	83 ec 0c             	sub    esp,0xc
c000bb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5a:	e8 59 ff ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000bb5f:	83 c4 10             	add    esp,0x10
c000bb62:	83 ec 08             	sub    esp,0x8
c000bb65:	6a 0c                	push   0xc
c000bb67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb6b:	e8 ee 13 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	83 c4 0c             	add    esp,0xc
c000bb76:	c3                   	ret    
c000bb77:	90                   	nop

c000bb78 <ReservedFilename::~ReservedFilename()>:
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	ba 5c 4c 02 c0       	mov    edx,0xc0024c5c
c000bb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb84:	89 10                	mov    DWORD PTR [eax],edx
c000bb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb8a:	83 ec 0c             	sub    esp,0xc
c000bb8d:	50                   	push   eax
c000bb8e:	e8 25 ff ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000bb93:	83 c4 10             	add    esp,0x10
c000bb96:	90                   	nop
c000bb97:	83 c4 0c             	add    esp,0xc
c000bb9a:	c3                   	ret    
c000bb9b:	90                   	nop

c000bb9c <ReservedFilename::~ReservedFilename()>:
c000bb9c:	83 ec 0c             	sub    esp,0xc
c000bb9f:	83 ec 0c             	sub    esp,0xc
c000bba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba6:	e8 cd ff ff ff       	call   c000bb78 <ReservedFilename::~ReservedFilename()>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	83 ec 08             	sub    esp,0x8
c000bbb1:	6a 0c                	push   0xc
c000bbb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb7:	e8 a2 13 00 00       	call   c000cf5e <operator delete(void*, unsigned long)>
c000bbbc:	83 c4 10             	add    esp,0x10
c000bbbf:	83 c4 0c             	add    esp,0xc
c000bbc2:	c3                   	ret    

c000bbc3 <getFromFileDescriptor(int)>:
c000bbc3:	53                   	push   ebx
c000bbc4:	83 ec 08             	sub    esp,0x8
c000bbc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbcb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bbd1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbd7:	7f 2c                	jg     c000bc05 <getFromFileDescriptor(int)+0x42>
c000bbd9:	83 ec 0c             	sub    esp,0xc
c000bbdc:	68 78 8b 02 c0       	push   0xc0028b78
c000bbe1:	e8 e2 75 01 00       	call   c00231c8 <LinkedList<UnixFile>::getFirstElement()>
c000bbe6:	83 c4 10             	add    esp,0x10
c000bbe9:	85 c0                	test   eax,eax
c000bbeb:	75 04                	jne    c000bbf1 <getFromFileDescriptor(int)+0x2e>
c000bbed:	31 c0                	xor    eax,eax
c000bbef:	eb 6e                	jmp    c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bbf1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bbf4:	74 69                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bbf6:	52                   	push   edx
c000bbf7:	52                   	push   edx
c000bbf8:	50                   	push   eax
c000bbf9:	68 78 8b 02 c0       	push   0xc0028b78
c000bbfe:	e8 6f 76 01 00       	call   c0023272 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc03:	eb e1                	jmp    c000bbe6 <getFromFileDescriptor(int)+0x23>
c000bc05:	a1 6c 8b 02 c0       	mov    eax,ds:0xc0028b6c
c000bc0a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc10:	74 4d                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc12:	a1 70 8b 02 c0       	mov    eax,ds:0xc0028b70
c000bc17:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bc1d:	74 40                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc1f:	a1 68 8b 02 c0       	mov    eax,ds:0xc0028b68
c000bc24:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc2a:	74 33                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc2c:	a1 64 8b 02 c0       	mov    eax,ds:0xc0028b64
c000bc31:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc37:	74 26                	je     c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc39:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc3f:	83 f8 08             	cmp    eax,0x8
c000bc42:	77 09                	ja     c000bc4d <getFromFileDescriptor(int)+0x8a>
c000bc44:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c000bc4b:	eb 12                	jmp    c000bc5f <getFromFileDescriptor(int)+0x9c>
c000bc4d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc53:	83 fb 08             	cmp    ebx,0x8
c000bc56:	77 95                	ja     c000bbed <getFromFileDescriptor(int)+0x2a>
c000bc58:	8b 04 9d 00 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7500]
c000bc5f:	83 c4 08             	add    esp,0x8
c000bc62:	5b                   	pop    ebx
c000bc63:	c3                   	ret    

c000bc64 <__static_initialization_and_destruction_0(int, int)>:
c000bc64:	83 ec 0c             	sub    esp,0xc
c000bc67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc6c:	75 34                	jne    c000bca2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc76:	75 2a                	jne    c000bca2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc78:	83 ec 0c             	sub    esp,0xc
c000bc7b:	68 78 8b 02 c0       	push   0xc0028b78
c000bc80:	e8 2d 74 01 00       	call   c00230b2 <LinkedList<UnixFile>::LinkedList()>
c000bc85:	83 c4 10             	add    esp,0x10
c000bc88:	83 ec 04             	sub    esp,0x4
c000bc8b:	68 d4 7c 02 c0       	push   0xc0027cd4
c000bc90:	68 78 8b 02 c0       	push   0xc0028b78
c000bc95:	68 b0 30 02 c0       	push   0xc00230b0
c000bc9a:	e8 39 12 00 00       	call   c000ced8 <__cxa_atexit>
c000bc9f:	83 c4 10             	add    esp,0x10
c000bca2:	90                   	nop
c000bca3:	83 c4 0c             	add    esp,0xc
c000bca6:	c3                   	ret    

c000bca7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bca7:	83 ec 0c             	sub    esp,0xc
c000bcaa:	83 ec 08             	sub    esp,0x8
c000bcad:	68 ff ff 00 00       	push   0xffff
c000bcb2:	6a 01                	push   0x1
c000bcb4:	e8 ab ff ff ff       	call   c000bc64 <__static_initialization_and_destruction_0(int, int)>
c000bcb9:	83 c4 10             	add    esp,0x10
c000bcbc:	83 c4 0c             	add    esp,0xc
c000bcbf:	c3                   	ret    

c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bcc0:	53                   	push   ebx
c000bcc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcc5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bccf:	89 c8                	mov    eax,ecx
c000bcd1:	d1 e8                	shr    eax,1
c000bcd3:	03 05 a8 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027ea8
c000bcd9:	83 e1 01             	and    ecx,0x1
c000bcdc:	8a 10                	mov    dl,BYTE PTR [eax]
c000bcde:	75 09                	jne    c000bce9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bce0:	83 e2 f0             	and    edx,0xfffffff0
c000bce3:	09 da                	or     edx,ebx
c000bce5:	88 10                	mov    BYTE PTR [eax],dl
c000bce7:	5b                   	pop    ebx
c000bce8:	c3                   	ret    
c000bce9:	c1 e3 04             	shl    ebx,0x4
c000bcec:	83 e2 0f             	and    edx,0xf
c000bcef:	09 da                	or     edx,ebx
c000bcf1:	88 10                	mov    BYTE PTR [eax],dl
c000bcf3:	5b                   	pop    ebx
c000bcf4:	c3                   	ret    

c000bcf5 <Virt::getPageState(unsigned long)>:
c000bcf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcf9:	8b 0d a8 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ea8
c000bcff:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd05:	89 d0                	mov    eax,edx
c000bd07:	d1 e8                	shr    eax,1
c000bd09:	83 e2 01             	and    edx,0x1
c000bd0c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd0f:	75 04                	jne    c000bd15 <Virt::getPageState(unsigned long)+0x20>
c000bd11:	83 e0 0f             	and    eax,0xf
c000bd14:	c3                   	ret    
c000bd15:	c0 e8 04             	shr    al,0x4
c000bd18:	c3                   	ret    

c000bd19 <Virt::allocateKernelVirtualPages(int)>:
c000bd19:	55                   	push   ebp
c000bd1a:	31 ed                	xor    ebp,ebp
c000bd1c:	57                   	push   edi
c000bd1d:	56                   	push   esi
c000bd1e:	53                   	push   ebx
c000bd1f:	31 db                	xor    ebx,ebx
c000bd21:	83 ec 1c             	sub    esp,0x1c
c000bd24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd28:	8b 3d a4 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027ea4
c000bd2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd33:	57                   	push   edi
c000bd34:	e8 bc ff ff ff       	call   c000bcf5 <Virt::getPageState(unsigned long)>
c000bd39:	5a                   	pop    edx
c000bd3a:	84 c0                	test   al,al
c000bd3c:	75 3a                	jne    c000bd78 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd3e:	85 db                	test   ebx,ebx
c000bd40:	75 02                	jne    c000bd44 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd42:	89 fd                	mov    ebp,edi
c000bd44:	43                   	inc    ebx
c000bd45:	39 f3                	cmp    ebx,esi
c000bd47:	74 5a                	je     c000bda3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd49:	47                   	inc    edi
c000bd4a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd50:	76 31                	jbe    c000bd83 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd52:	c7 05 a4 7e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027ea4,0xc8000
c000bd5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd61:	75 28                	jne    c000bd8b <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd63:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd68:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd6d:	57                   	push   edi
c000bd6e:	e8 82 ff ff ff       	call   c000bcf5 <Virt::getPageState(unsigned long)>
c000bd73:	5a                   	pop    edx
c000bd74:	84 c0                	test   al,al
c000bd76:	74 c6                	je     c000bd3e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd78:	31 db                	xor    ebx,ebx
c000bd7a:	47                   	inc    edi
c000bd7b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd81:	77 cf                	ja     c000bd52 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bd83:	89 3d a4 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea4,edi
c000bd89:	eb a8                	jmp    c000bd33 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bd8b:	83 ec 0c             	sub    esp,0xc
c000bd8e:	68 70 4c 02 c0       	push   0xc0024c70
c000bd93:	e8 5d 92 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000bd98:	8b 3d a4 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027ea4
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	eb 90                	jmp    c000bd33 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bda3:	89 2d a4 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea4,ebp
c000bda9:	4b                   	dec    ebx
c000bdaa:	74 5f                	je     c000be0b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bdac:	85 f6                	test   esi,esi
c000bdae:	74 3d                	je     c000bded <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdb0:	89 e8                	mov    eax,ebp
c000bdb2:	31 db                	xor    ebx,ebx
c000bdb4:	8d 7e ff             	lea    edi,[esi-0x1]
c000bdb7:	eb 14                	jmp    c000bdcd <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bdb9:	6a 01                	push   0x1
c000bdbb:	43                   	inc    ebx
c000bdbc:	50                   	push   eax
c000bdbd:	e8 fe fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdc2:	58                   	pop    eax
c000bdc3:	39 f3                	cmp    ebx,esi
c000bdc5:	5a                   	pop    edx
c000bdc6:	74 25                	je     c000bded <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdc8:	a1 a4 7e 02 c0       	mov    eax,ds:0xc0027ea4
c000bdcd:	8d 50 01             	lea    edx,[eax+0x1]
c000bdd0:	85 db                	test   ebx,ebx
c000bdd2:	89 15 a4 7e 02 c0    	mov    DWORD PTR ds:0xc0027ea4,edx
c000bdd8:	74 20                	je     c000bdfa <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bdda:	39 df                	cmp    edi,ebx
c000bddc:	75 db                	jne    c000bdb9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bdde:	6a 03                	push   0x3
c000bde0:	43                   	inc    ebx
c000bde1:	50                   	push   eax
c000bde2:	e8 d9 fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bde7:	59                   	pop    ecx
c000bde8:	39 f3                	cmp    ebx,esi
c000bdea:	58                   	pop    eax
c000bdeb:	75 db                	jne    c000bdc8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bded:	83 c4 1c             	add    esp,0x1c
c000bdf0:	89 e8                	mov    eax,ebp
c000bdf2:	5b                   	pop    ebx
c000bdf3:	c1 e0 0c             	shl    eax,0xc
c000bdf6:	5e                   	pop    esi
c000bdf7:	5f                   	pop    edi
c000bdf8:	5d                   	pop    ebp
c000bdf9:	c3                   	ret    
c000bdfa:	6a 02                	push   0x2
c000bdfc:	bb 01 00 00 00       	mov    ebx,0x1
c000be01:	50                   	push   eax
c000be02:	e8 b9 fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be07:	58                   	pop    eax
c000be08:	5a                   	pop    edx
c000be09:	eb bd                	jmp    c000bdc8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be0b:	6a 04                	push   0x4
c000be0d:	8d 45 01             	lea    eax,[ebp+0x1]
c000be10:	55                   	push   ebp
c000be11:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c000be16:	e8 a5 fe ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be1b:	59                   	pop    ecx
c000be1c:	89 e8                	mov    eax,ebp
c000be1e:	5b                   	pop    ebx
c000be1f:	c1 e0 0c             	shl    eax,0xc
c000be22:	83 c4 1c             	add    esp,0x1c
c000be25:	5b                   	pop    ebx
c000be26:	5e                   	pop    esi
c000be27:	5f                   	pop    edi
c000be28:	5d                   	pop    ebp
c000be29:	c3                   	ret    

c000be2a <Virt::freeSwapfilePage(unsigned long)>:
c000be2a:	53                   	push   ebx
c000be2b:	8b 15 8c 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b8c
c000be31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be35:	b8 01 00 00 00       	mov    eax,0x1
c000be3a:	89 cb                	mov    ebx,ecx
c000be3c:	d3 e0                	shl    eax,cl
c000be3e:	c1 eb 05             	shr    ebx,0x5
c000be41:	f7 d0                	not    eax
c000be43:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be46:	5b                   	pop    ebx
c000be47:	c3                   	ret    

c000be48 <Virt::swapIDToSector(unsigned long)>:
c000be48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be4c:	0f af 05 ac 7e 02 c0 	imul   eax,DWORD PTR ds:0xc0027eac
c000be53:	03 05 b4 7e 02 c0    	add    eax,DWORD PTR ds:0xc0027eb4
c000be59:	c3                   	ret    

c000be5a <Virt::allocateSwapfilePage()>:
c000be5a:	55                   	push   ebp
c000be5b:	31 d2                	xor    edx,edx
c000be5d:	57                   	push   edi
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 0d ac 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eac
c000be69:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c000be6e:	f7 f1                	div    ecx
c000be70:	39 0d b0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027eb0,ecx
c000be76:	72 2d                	jb     c000bea5 <Virt::allocateSwapfilePage()+0x4b>
c000be78:	8b 35 8c 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b8c
c000be7e:	8b 16                	mov    edx,DWORD PTR [esi]
c000be80:	f6 c2 01             	test   dl,0x1
c000be83:	74 3c                	je     c000bec1 <Virt::allocateSwapfilePage()+0x67>
c000be85:	31 c9                	xor    ecx,ecx
c000be87:	bf 01 00 00 00       	mov    edi,0x1
c000be8c:	eb 12                	jmp    c000bea0 <Virt::allocateSwapfilePage()+0x46>
c000be8e:	89 fd                	mov    ebp,edi
c000be90:	89 ca                	mov    edx,ecx
c000be92:	d3 e5                	shl    ebp,cl
c000be94:	c1 ea 05             	shr    edx,0x5
c000be97:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000be9a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be9c:	85 ea                	test   edx,ebp
c000be9e:	74 2a                	je     c000beca <Virt::allocateSwapfilePage()+0x70>
c000bea0:	41                   	inc    ecx
c000bea1:	39 c8                	cmp    eax,ecx
c000bea3:	77 e9                	ja     c000be8e <Virt::allocateSwapfilePage()+0x34>
c000bea5:	83 ec 0c             	sub    esp,0xc
c000bea8:	68 28 4e 02 c0       	push   0xc0024e28
c000bead:	e8 43 91 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000beb2:	83 c4 10             	add    esp,0x10
c000beb5:	31 c9                	xor    ecx,ecx
c000beb7:	83 c4 0c             	add    esp,0xc
c000beba:	89 c8                	mov    eax,ecx
c000bebc:	5b                   	pop    ebx
c000bebd:	5e                   	pop    esi
c000bebe:	5f                   	pop    edi
c000bebf:	5d                   	pop    ebp
c000bec0:	c3                   	ret    
c000bec1:	89 f3                	mov    ebx,esi
c000bec3:	bd 01 00 00 00       	mov    ebp,0x1
c000bec8:	31 c9                	xor    ecx,ecx
c000beca:	09 ea                	or     edx,ebp
c000becc:	89 c8                	mov    eax,ecx
c000bece:	89 13                	mov    DWORD PTR [ebx],edx
c000bed0:	83 c4 0c             	add    esp,0xc
c000bed3:	5b                   	pop    ebx
c000bed4:	5e                   	pop    esi
c000bed5:	5f                   	pop    edi
c000bed6:	5d                   	pop    ebp
c000bed7:	c3                   	ret    

c000bed8 <Virt::virtualMemorySetup()>:
c000bed8:	53                   	push   ebx
c000bed9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bede:	6a 0f                	push   0xf
c000bee0:	53                   	push   ebx
c000bee1:	43                   	inc    ebx
c000bee2:	e8 d9 fd ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bee7:	58                   	pop    eax
c000bee8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000beee:	5a                   	pop    edx
c000beef:	75 ed                	jne    c000bede <Virt::virtualMemorySetup()+0x6>
c000bef1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bef6:	6a 00                	push   0x0
c000bef8:	53                   	push   ebx
c000bef9:	43                   	inc    ebx
c000befa:	e8 c1 fd ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000beff:	59                   	pop    ecx
c000bf00:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf06:	58                   	pop    eax
c000bf07:	75 ed                	jne    c000bef6 <Virt::virtualMemorySetup()+0x1e>
c000bf09:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf0e:	6a 0f                	push   0xf
c000bf10:	53                   	push   ebx
c000bf11:	43                   	inc    ebx
c000bf12:	e8 a9 fd ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf17:	58                   	pop    eax
c000bf18:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bf1e:	5a                   	pop    edx
c000bf1f:	75 ed                	jne    c000bf0e <Virt::virtualMemorySetup()+0x36>
c000bf21:	5b                   	pop    ebx
c000bf22:	c3                   	ret    

c000bf23 <Virt::setupPageSwapping(int)>:
c000bf23:	53                   	push   ebx
c000bf24:	83 ec 0c             	sub    esp,0xc
c000bf27:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf2b:	a1 28 90 02 c0       	mov    eax,ds:0xc0029028
c000bf30:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf36:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf38:	53                   	push   ebx
c000bf39:	c1 e3 0b             	shl    ebx,0xb
c000bf3c:	68 3f 4e 02 c0       	push   0xc0024e3f
c000bf41:	50                   	push   eax
c000bf42:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf45:	89 1d b0 7e 02 c0    	mov    DWORD PTR ds:0xc0027eb0,ebx
c000bf4b:	c6 05 b8 7e 02 c0 43 	mov    BYTE PTR ds:0xc0027eb8,0x43
c000bf52:	c1 eb 08             	shr    ebx,0x8
c000bf55:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c000bf5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf5d:	c7 05 ac 7e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0027eac,0x8
c000bf67:	e8 e7 dd ff ff       	call   c0009d53 <malloc>
c000bf6c:	83 c4 0c             	add    esp,0xc
c000bf6f:	89 c1                	mov    ecx,eax
c000bf71:	a3 8c 8b 02 c0       	mov    ds:0xc0028b8c,eax
c000bf76:	31 d2                	xor    edx,edx
c000bf78:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c000bf7d:	f7 35 ac 7e 02 c0    	div    DWORD PTR ds:0xc0027eac
c000bf83:	c1 e8 05             	shr    eax,0x5
c000bf86:	50                   	push   eax
c000bf87:	6a 00                	push   0x0
c000bf89:	51                   	push   ecx
c000bf8a:	e8 ed 46 ff ff       	call   c000067c <memset>
c000bf8f:	83 c4 18             	add    esp,0x18
c000bf92:	5b                   	pop    ebx
c000bf93:	c3                   	ret    

c000bf94 <VAS::VAS()>:
c000bf94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfa3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfae:	a3 90 8b 02 c0       	mov    ds:0xc0028b90,eax
c000bfb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfb7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bfbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfbf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bfc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bfcd:	90                   	nop
c000bfce:	c3                   	ret    
c000bfcf:	90                   	nop

c000bfd0 <VAS::VAS(VAS*)>:
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfe9:	83 ec 0c             	sub    esp,0xc
c000bfec:	68 90 4c 02 c0       	push   0xc0024c90
c000bff1:	e8 ff 8f 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000bff6:	83 c4 10             	add    esp,0x10
c000bff9:	90                   	nop
c000bffa:	83 c4 0c             	add    esp,0xc
c000bffd:	c3                   	ret    

c000bffe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c002:	89 c2                	mov    edx,eax
c000c004:	c1 e8 0a             	shr    eax,0xa
c000c007:	c1 ea 16             	shr    edx,0x16
c000c00a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c00f:	19 c9                	sbb    ecx,ecx
c000c011:	c1 e2 0c             	shl    edx,0xc
c000c014:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c01a:	25 fc 0f 00 00       	and    eax,0xffc
c000c01f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c026:	01 d0                	add    eax,edx
c000c028:	c3                   	ret    
c000c029:	90                   	nop

c000c02a <VAS::getPageTableEntry(unsigned long)>:
c000c02a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c02e:	89 ca                	mov    edx,ecx
c000c030:	c1 e9 0a             	shr    ecx,0xa
c000c033:	c1 ea 16             	shr    edx,0x16
c000c036:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c03c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c042:	c1 e0 0c             	shl    eax,0xc
c000c045:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c048:	c3                   	ret    

c000c049 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c049:	57                   	push   edi
c000c04a:	56                   	push   esi
c000c04b:	be 01 00 00 00       	mov    esi,0x1
c000c050:	53                   	push   ebx
c000c051:	83 ec 10             	sub    esp,0x10
c000c054:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c058:	c1 eb 0c             	shr    ebx,0xc
c000c05b:	eb 3f                	jmp    c000c09c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c05d:	83 ec 08             	sub    esp,0x8
c000c060:	57                   	push   edi
c000c061:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c000c067:	e8 be ff ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c06c:	83 c4 10             	add    esp,0x10
c000c06f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c071:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c075:	f6 c4 04             	test   ah,0x4
c000c078:	75 5f                	jne    c000c0d9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c07a:	80 fa 04             	cmp    dl,0x4
c000c07d:	74 78                	je     c000c0f7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c07f:	80 fa 02             	cmp    dl,0x2
c000c082:	0f 84 88 00 00 00    	je     c000c110 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c088:	80 fa 03             	cmp    dl,0x3
c000c08b:	0f 84 ad 00 00 00    	je     c000c13e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c091:	fe ca                	dec    dl
c000c093:	0f 84 92 00 00 00    	je     c000c12b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c099:	43                   	inc    ebx
c000c09a:	31 f6                	xor    esi,esi
c000c09c:	53                   	push   ebx
c000c09d:	89 df                	mov    edi,ebx
c000c09f:	e8 51 fc ff ff       	call   c000bcf5 <Virt::getPageState(unsigned long)>
c000c0a4:	c1 e7 0c             	shl    edi,0xc
c000c0a7:	59                   	pop    ecx
c000c0a8:	84 c0                	test   al,al
c000c0aa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0ae:	75 ad                	jne    c000c05d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	68 56 4e 02 c0       	push   0xc0024e56
c000c0b8:	e8 38 8f 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000c0bd:	58                   	pop    eax
c000c0be:	5a                   	pop    edx
c000c0bf:	57                   	push   edi
c000c0c0:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c000c0c6:	e8 5f ff ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c0cb:	83 c4 10             	add    esp,0x10
c000c0ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0d0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0d4:	f6 c4 04             	test   ah,0x4
c000c0d7:	74 c0                	je     c000c099 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0d9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c0dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0e2:	83 ec 0c             	sub    esp,0xc
c000c0e5:	50                   	push   eax
c000c0e6:	e8 9c e2 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0f2:	80 fa 04             	cmp    dl,0x4
c000c0f5:	75 88                	jne    c000c07f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c0f7:	89 f0                	mov    eax,esi
c000c0f9:	84 c0                	test   al,al
c000c0fb:	75 47                	jne    c000c144 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c0fd:	c7 44 24 20 b4 4c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024cb4
c000c105:	83 c4 10             	add    esp,0x10
c000c108:	5b                   	pop    ebx
c000c109:	5e                   	pop    esi
c000c10a:	5f                   	pop    edi
c000c10b:	e9 e5 8e 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c000c110:	89 f0                	mov    eax,esi
c000c112:	84 c0                	test   al,al
c000c114:	75 15                	jne    c000c12b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c116:	83 ec 0c             	sub    esp,0xc
c000c119:	68 72 4e 02 c0       	push   0xc0024e72
c000c11e:	e8 d2 8e 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000c123:	83 c4 10             	add    esp,0x10
c000c126:	e9 6e ff ff ff       	jmp    c000c099 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c12b:	83 ec 08             	sub    esp,0x8
c000c12e:	6a 00                	push   0x0
c000c130:	53                   	push   ebx
c000c131:	e8 8a fb ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c136:	83 c4 10             	add    esp,0x10
c000c139:	e9 5b ff ff ff       	jmp    c000c099 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c13e:	89 f0                	mov    eax,esi
c000c140:	84 c0                	test   al,al
c000c142:	75 15                	jne    c000c159 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c144:	83 ec 08             	sub    esp,0x8
c000c147:	6a 00                	push   0x0
c000c149:	53                   	push   ebx
c000c14a:	e8 71 fb ff ff       	call   c000bcc0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	83 c4 10             	add    esp,0x10
c000c155:	5b                   	pop    ebx
c000c156:	5e                   	pop    esi
c000c157:	5f                   	pop    edi
c000c158:	c3                   	ret    
c000c159:	c7 44 24 20 8e 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024e8e
c000c161:	83 c4 10             	add    esp,0x10
c000c164:	5b                   	pop    ebx
c000c165:	5e                   	pop    esi
c000c166:	5f                   	pop    edi
c000c167:	e9 89 8e 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>

c000c16c <VAS::freeAllocatedPages(unsigned long)>:
c000c16c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c170:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c174:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c178:	74 09                	je     c000c183 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c17a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c17e:	e9 c6 fe ff ff       	jmp    c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c183:	c7 44 24 04 d8 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cd8
c000c18b:	e9 af 0e 00 00       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>

c000c190 <VAS::virtualToPhysical(unsigned long)>:
c000c190:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c194:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c198:	e8 8d fe ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c19d:	5a                   	pop    edx
c000c19e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1a0:	59                   	pop    ecx
c000c1a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1a6:	c3                   	ret    
c000c1a7:	90                   	nop

c000c1a8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1a8:	55                   	push   ebp
c000c1a9:	57                   	push   edi
c000c1aa:	56                   	push   esi
c000c1ab:	53                   	push   ebx
c000c1ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c1b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c1b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1bc:	85 db                	test   ebx,ebx
c000c1be:	7e 22                	jle    c000c1e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c1c0:	c1 e3 0c             	shl    ebx,0xc
c000c1c3:	01 f3                	add    ebx,esi
c000c1c5:	56                   	push   esi
c000c1c6:	81 c6 00 10 00 00    	add    esi,0x1000
c000c1cc:	55                   	push   ebp
c000c1cd:	e8 58 fe ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000c1d2:	5a                   	pop    edx
c000c1d3:	59                   	pop    ecx
c000c1d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1d6:	21 f9                	and    ecx,edi
c000c1d8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c1dc:	39 f3                	cmp    ebx,esi
c000c1de:	89 08                	mov    DWORD PTR [eax],ecx
c000c1e0:	75 e3                	jne    c000c1c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c1e2:	5b                   	pop    ebx
c000c1e3:	5e                   	pop    esi
c000c1e4:	5f                   	pop    edi
c000c1e5:	5d                   	pop    ebp
c000c1e6:	c3                   	ret    
c000c1e7:	90                   	nop

c000c1e8 <VAS::setToWriteCombining(unsigned long, int)>:
c000c1e8:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c1ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c1f3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c1fa:	75 01                	jne    c000c1fd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c1fc:	c3                   	ret    
c000c1fd:	68 80 00 00 00       	push   0x80
c000c202:	6a ff                	push   0xffffffff
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 93 ff ff ff       	call   c000c1a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000c215:	83 c4 14             	add    esp,0x14
c000c218:	c3                   	ret    
c000c219:	90                   	nop

c000c21a <VAS::mapOtherVASIn(bool, VAS*)>:
c000c21a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c223:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c22a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c22d:	19 c0                	sbb    eax,eax
c000c22f:	83 ca 03             	or     edx,0x3
c000c232:	83 e0 fc             	and    eax,0xfffffffc
c000c235:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c23c:	0f 20 d8             	mov    eax,cr3
c000c23f:	0f 22 d8             	mov    cr3,eax
c000c242:	c3                   	ret    
c000c243:	90                   	nop

c000c244 <VAS::~VAS()>:
c000c244:	83 ec 2c             	sub    esp,0x2c
c000c247:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c24f:	fa                   	cli    
c000c250:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000c255:	40                   	inc    eax
c000c256:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000c25b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c260:	8b 00                	mov    eax,DWORD PTR [eax]
c000c262:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c265:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c26b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c26f:	6a 01                	push   0x1
c000c271:	50                   	push   eax
c000c272:	e8 a3 ff ff ff       	call   c000c21a <VAS::mapOtherVASIn(bool, VAS*)>
c000c277:	83 c4 0c             	add    esp,0xc
c000c27a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c282:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c28a:	0f 8f d4 00 00 00    	jg     c000c364 <VAS::~VAS()+0x120>
c000c290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c294:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c29b:	c1 e2 02             	shl    edx,0x2
c000c29e:	01 d0                	add    eax,edx
c000c2a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2aa:	83 e0 01             	and    eax,0x1
c000c2ad:	0f 84 a8 00 00 00    	je     c000c35b <VAS::~VAS()+0x117>
c000c2b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c2bb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c2c3:	7f 72                	jg     c000c337 <VAS::~VAS()+0xf3>
c000c2c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2c9:	c1 e0 0a             	shl    eax,0xa
c000c2cc:	89 c2                	mov    edx,eax
c000c2ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2d2:	01 d0                	add    eax,edx
c000c2d4:	c1 e0 0c             	shl    eax,0xc
c000c2d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2db:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c2e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c2e5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c2eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ef:	6a 01                	push   0x1
c000c2f1:	50                   	push   eax
c000c2f2:	e8 07 fd ff ff       	call   c000bffe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c2f7:	83 c4 0c             	add    esp,0xc
c000c2fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c302:	8b 00                	mov    eax,DWORD PTR [eax]
c000c304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c308:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c30c:	25 01 04 00 00       	and    eax,0x401
c000c311:	3d 01 04 00 00       	cmp    eax,0x401
c000c316:	75 19                	jne    c000c331 <VAS::~VAS()+0xed>
c000c318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c31c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c321:	83 ec 0c             	sub    esp,0xc
c000c324:	50                   	push   eax
c000c325:	e8 5d e0 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c32a:	83 c4 10             	add    esp,0x10
c000c32d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c331:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c335:	eb 84                	jmp    c000c2bb <VAS::~VAS()+0x77>
c000c337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33b:	25 00 04 00 00       	and    eax,0x400
c000c340:	74 19                	je     c000c35b <VAS::~VAS()+0x117>
c000c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c346:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c34b:	83 ec 0c             	sub    esp,0xc
c000c34e:	50                   	push   eax
c000c34f:	e8 33 e0 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c354:	83 c4 10             	add    esp,0x10
c000c357:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c35b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c35f:	e9 1e ff ff ff       	jmp    c000c282 <VAS::~VAS()+0x3e>
c000c364:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c368:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c36b:	83 ec 0c             	sub    esp,0xc
c000c36e:	50                   	push   eax
c000c36f:	e8 d5 fc ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c37b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c37e:	83 ec 0c             	sub    esp,0xc
c000c381:	50                   	push   eax
c000c382:	e8 00 e0 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c38e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c392:	c1 e0 02             	shl    eax,0x2
c000c395:	83 ec 08             	sub    esp,0x8
c000c398:	50                   	push   eax
c000c399:	68 fc 4c 02 c0       	push   0xc0024cfc
c000c39e:	e8 9c 0c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000c3a3:	83 c4 10             	add    esp,0x10
c000c3a6:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000c3ab:	48                   	dec    eax
c000c3ac:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000c3b1:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000c3b6:	85 c0                	test   eax,eax
c000c3b8:	75 01                	jne    c000c3bb <VAS::~VAS()+0x177>
c000c3ba:	fb                   	sti    
c000c3bb:	90                   	nop
c000c3bc:	83 c4 2c             	add    esp,0x2c
c000c3bf:	c3                   	ret    

c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c3c0:	55                   	push   ebp
c000c3c1:	57                   	push   edi
c000c3c2:	56                   	push   esi
c000c3c3:	53                   	push   ebx
c000c3c4:	83 ec 1c             	sub    esp,0x1c
c000c3c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3cf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c3d5:	77 08                	ja     c000c3df <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c3d7:	0f 20 d8             	mov    eax,cr3
c000c3da:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c3dd:	75 47                	jne    c000c426 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c3df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c3e3:	09 d8                	or     eax,ebx
c000c3e5:	a9 ff 0f 00 00       	test   eax,0xfff
c000c3ea:	75 57                	jne    c000c443 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c3ec:	89 de                	mov    esi,ebx
c000c3ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3f1:	c1 ee 16             	shr    esi,0x16
c000c3f4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c3fb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c3ff:	74 54                	je     c000c455 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c401:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c405:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c40b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c40f:	c1 e6 0c             	shl    esi,0xc
c000c412:	c1 eb 0a             	shr    ebx,0xa
c000c415:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c41b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c41e:	83 c4 1c             	add    esp,0x1c
c000c421:	5b                   	pop    ebx
c000c422:	5e                   	pop    esi
c000c423:	5f                   	pop    edi
c000c424:	5d                   	pop    ebp
c000c425:	c3                   	ret    
c000c426:	83 ec 0c             	sub    esp,0xc
c000c429:	68 1c 4d 02 c0       	push   0xc0024d1c
c000c42e:	e8 0c 0c 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000c433:	83 c4 10             	add    esp,0x10
c000c436:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c43a:	09 d8                	or     eax,ebx
c000c43c:	a9 ff 0f 00 00       	test   eax,0xfff
c000c441:	74 a9                	je     c000c3ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c443:	83 ec 0c             	sub    esp,0xc
c000c446:	68 84 4d 02 c0       	push   0xc0024d84
c000c44b:	e8 a5 8b 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000c450:	83 c4 10             	add    esp,0x10
c000c453:	eb 97                	jmp    c000c3ec <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c459:	e8 ac df ff ff       	call   c000a40a <Phys::allocatePage()>
c000c45e:	83 ec 0c             	sub    esp,0xc
c000c461:	89 c5                	mov    ebp,eax
c000c463:	8b 0d 90 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b90
c000c469:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c46d:	6a 01                	push   0x1
c000c46f:	e8 a5 f8 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c474:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c47b:	6a 01                	push   0x1
c000c47d:	50                   	push   eax
c000c47e:	55                   	push   ebp
c000c47f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c485:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c489:	51                   	push   ecx
c000c48a:	e8 27 02 00 00       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c48f:	83 c4 1c             	add    esp,0x1c
c000c492:	68 00 10 00 00       	push   0x1000
c000c497:	6a 00                	push   0x0
c000c499:	50                   	push   eax
c000c49a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c49e:	e8 d9 41 ff ff       	call   c000067c <memset>
c000c4a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4aa:	e8 9a fb ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4b3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c4bc:	e9 40 ff ff ff       	jmp    c000c401 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c4c1:	90                   	nop

c000c4c2 <VAS::allocatePages(int, int)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c4cd:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c4d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4d8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c4de:	83 e0 01             	and    eax,0x1
c000c4e1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c4e5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c4e9:	0f 85 cc 00 00 00    	jne    c000c5bb <VAS::allocatePages(int, int)+0xf9>
c000c4ef:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4f6:	85 c0                	test   eax,eax
c000c4f8:	0f 84 a1 00 00 00    	je     c000c59f <VAS::allocatePages(int, int)+0xdd>
c000c4fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c502:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c506:	c1 e6 0c             	shl    esi,0xc
c000c509:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c50d:	85 c0                	test   eax,eax
c000c50f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c512:	7e 33                	jle    c000c547 <VAS::allocatePages(int, int)+0x85>
c000c514:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c518:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c51c:	81 cd 00 04 00 00    	or     ebp,0x400
c000c522:	e8 e3 de ff ff       	call   c000a40a <Phys::allocatePage()>
c000c527:	55                   	push   ebp
c000c528:	53                   	push   ebx
c000c529:	50                   	push   eax
c000c52a:	57                   	push   edi
c000c52b:	e8 90 fe ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c530:	83 c4 10             	add    esp,0x10
c000c533:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c538:	74 03                	je     c000c53d <VAS::allocatePages(int, int)+0x7b>
c000c53a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c53d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c543:	39 de                	cmp    esi,ebx
c000c545:	75 db                	jne    c000c522 <VAS::allocatePages(int, int)+0x60>
c000c547:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c54c:	75 12                	jne    c000c560 <VAS::allocatePages(int, int)+0x9e>
c000c54e:	0f 20 d8             	mov    eax,cr3
c000c551:	0f 22 d8             	mov    cr3,eax
c000c554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c558:	83 c4 1c             	add    esp,0x1c
c000c55b:	5b                   	pop    ebx
c000c55c:	5e                   	pop    esi
c000c55d:	5f                   	pop    edi
c000c55e:	5d                   	pop    ebp
c000c55f:	c3                   	ret    
c000c560:	c1 ee 0a             	shr    esi,0xa
c000c563:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c567:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c56d:	c1 eb 0a             	shr    ebx,0xa
c000c570:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c576:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c57c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c582:	39 c3                	cmp    ebx,eax
c000c584:	77 ce                	ja     c000c554 <VAS::allocatePages(int, int)+0x92>
c000c586:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c589:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c58f:	39 d8                	cmp    eax,ebx
c000c591:	73 f3                	jae    c000c586 <VAS::allocatePages(int, int)+0xc4>
c000c593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c597:	83 c4 1c             	add    esp,0x1c
c000c59a:	5b                   	pop    ebx
c000c59b:	5e                   	pop    esi
c000c59c:	5f                   	pop    edi
c000c59d:	5d                   	pop    ebp
c000c59e:	c3                   	ret    
c000c59f:	83 ec 0c             	sub    esp,0xc
c000c5a2:	68 a8 4d 02 c0       	push   0xc0024da8
c000c5a7:	e8 49 8a 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000c5ac:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5b3:	83 c4 10             	add    esp,0x10
c000c5b6:	e9 43 ff ff ff       	jmp    c000c4fe <VAS::allocatePages(int, int)+0x3c>
c000c5bb:	83 ec 0c             	sub    esp,0xc
c000c5be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5c2:	e8 52 f7 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c5c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c5d3:	0f 87 9b 00 00 00    	ja     c000c674 <VAS::allocatePages(int, int)+0x1b2>
c000c5d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5dd:	85 d2                	test   edx,edx
c000c5df:	7e 3c                	jle    c000c61d <VAS::allocatePages(int, int)+0x15b>
c000c5e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c5e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c5ed:	c1 e5 0c             	shl    ebp,0xc
c000c5f0:	81 ce 00 04 00 00    	or     esi,0x400
c000c5f6:	01 dd                	add    ebp,ebx
c000c5f8:	e8 0d de ff ff       	call   c000a40a <Phys::allocatePage()>
c000c5fd:	56                   	push   esi
c000c5fe:	53                   	push   ebx
c000c5ff:	50                   	push   eax
c000c600:	57                   	push   edi
c000c601:	e8 ba fd ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c60e:	74 03                	je     c000c613 <VAS::allocatePages(int, int)+0x151>
c000c610:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c613:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c619:	39 dd                	cmp    ebp,ebx
c000c61b:	75 db                	jne    c000c5f8 <VAS::allocatePages(int, int)+0x136>
c000c61d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c622:	0f 84 26 ff ff ff    	je     c000c54e <VAS::allocatePages(int, int)+0x8c>
c000c628:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c62c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c630:	89 d3                	mov    ebx,edx
c000c632:	c1 e0 0c             	shl    eax,0xc
c000c635:	c1 eb 0a             	shr    ebx,0xa
c000c638:	01 d0                	add    eax,edx
c000c63a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c640:	c1 e8 0a             	shr    eax,0xa
c000c643:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c649:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c64e:	2d 00 00 40 00       	sub    eax,0x400000
c000c653:	39 c3                	cmp    ebx,eax
c000c655:	0f 87 f9 fe ff ff    	ja     c000c554 <VAS::allocatePages(int, int)+0x92>
c000c65b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c65e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c664:	39 d8                	cmp    eax,ebx
c000c666:	73 f3                	jae    c000c65b <VAS::allocatePages(int, int)+0x199>
c000c668:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c66c:	83 c4 1c             	add    esp,0x1c
c000c66f:	5b                   	pop    ebx
c000c670:	5e                   	pop    esi
c000c671:	5f                   	pop    edi
c000c672:	5d                   	pop    ebp
c000c673:	c3                   	ret    
c000c674:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c679:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c67f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c686:	0f 84 4d ff ff ff    	je     c000c5d9 <VAS::allocatePages(int, int)+0x117>
c000c68c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c694:	e9 40 ff ff ff       	jmp    c000c5d9 <VAS::allocatePages(int, int)+0x117>
c000c699:	90                   	nop

c000c69a <VAS::setCPUSpecific(unsigned long)>:
c000c69a:	83 ec 0c             	sub    esp,0xc
c000c69d:	6a 05                	push   0x5
c000c69f:	68 00 00 40 c2       	push   0xc2400000
c000c6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ac:	e8 0f fd ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6b1:	83 c4 1c             	add    esp,0x1c
c000c6b4:	c3                   	ret    
c000c6b5:	90                   	nop

c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c6b6:	55                   	push   ebp
c000c6b7:	57                   	push   edi
c000c6b8:	56                   	push   esi
c000c6b9:	53                   	push   ebx
c000c6ba:	83 ec 1c             	sub    esp,0x1c
c000c6bd:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c6c2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c6c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6cc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c6d0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c6d6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c6da:	83 e0 01             	and    eax,0x1
c000c6dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c6e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6e5:	85 c0                	test   eax,eax
c000c6e7:	7e 39                	jle    c000c722 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c6e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6ed:	89 f3                	mov    ebx,esi
c000c6ef:	c1 e0 0c             	shl    eax,0xc
c000c6f2:	01 f0                	add    eax,esi
c000c6f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6f8:	55                   	push   ebp
c000c6f9:	53                   	push   ebx
c000c6fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c6fe:	29 f0                	sub    eax,esi
c000c700:	01 d8                	add    eax,ebx
c000c702:	50                   	push   eax
c000c703:	57                   	push   edi
c000c704:	e8 b7 fc ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c711:	74 03                	je     c000c716 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c713:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c716:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c71c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c720:	75 d6                	jne    c000c6f8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c722:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c727:	75 10                	jne    c000c739 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c729:	0f 20 d8             	mov    eax,cr3
c000c72c:	0f 22 d8             	mov    cr3,eax
c000c72f:	83 c4 1c             	add    esp,0x1c
c000c732:	89 f0                	mov    eax,esi
c000c734:	5b                   	pop    ebx
c000c735:	5e                   	pop    esi
c000c736:	5f                   	pop    edi
c000c737:	5d                   	pop    ebp
c000c738:	c3                   	ret    
c000c739:	89 f3                	mov    ebx,esi
c000c73b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c73f:	c1 eb 0a             	shr    ebx,0xa
c000c742:	c1 e0 0c             	shl    eax,0xc
c000c745:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c74b:	01 f0                	add    eax,esi
c000c74d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c753:	c1 e8 0a             	shr    eax,0xa
c000c756:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c75b:	2d 00 00 40 00       	sub    eax,0x400000
c000c760:	39 c3                	cmp    ebx,eax
c000c762:	77 cb                	ja     c000c72f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c764:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c767:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c76d:	39 d8                	cmp    eax,ebx
c000c76f:	73 f3                	jae    c000c764 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c771:	83 c4 1c             	add    esp,0x1c
c000c774:	89 f0                	mov    eax,esi
c000c776:	5b                   	pop    ebx
c000c777:	5e                   	pop    esi
c000c778:	5f                   	pop    edi
c000c779:	5d                   	pop    ebp
c000c77a:	c3                   	ret    
c000c77b:	90                   	nop

c000c77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c77c:	55                   	push   ebp
c000c77d:	57                   	push   edi
c000c77e:	56                   	push   esi
c000c77f:	53                   	push   ebx
c000c780:	83 ec 1c             	sub    esp,0x1c
c000c783:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c787:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c78b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c78f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c793:	a9 ff 0f 00 00       	test   eax,0xfff
c000c798:	75 4a                	jne    c000c7e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c79a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c79e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7a1:	c1 eb 16             	shr    ebx,0x16
c000c7a4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7ab:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7af:	74 4d                	je     c000c7fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7b5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c7b9:	c1 e8 0a             	shr    eax,0xa
c000c7bc:	80 fa 01             	cmp    dl,0x1
c000c7bf:	19 d2                	sbb    edx,edx
c000c7c1:	c1 e3 0c             	shl    ebx,0xc
c000c7c4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c7c8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c7ce:	25 fc 0f 00 00       	and    eax,0xffc
c000c7d3:	01 d8                	add    eax,ebx
c000c7d5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c7dc:	83 c4 1c             	add    esp,0x1c
c000c7df:	5b                   	pop    ebx
c000c7e0:	5e                   	pop    esi
c000c7e1:	5f                   	pop    edi
c000c7e2:	5d                   	pop    ebp
c000c7e3:	c3                   	ret    
c000c7e4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c7e8:	83 ec 0c             	sub    esp,0xc
c000c7eb:	68 d4 4d 02 c0       	push   0xc0024dd4
c000c7f0:	e8 00 88 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000c7f5:	83 c4 10             	add    esp,0x10
c000c7f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c7fc:	eb 9c                	jmp    c000c79a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c7fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c802:	e8 03 dc ff ff       	call   c000a40a <Phys::allocatePage()>
c000c807:	83 ec 0c             	sub    esp,0xc
c000c80a:	89 c5                	mov    ebp,eax
c000c80c:	8b 0d 90 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b90
c000c812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c816:	6a 01                	push   0x1
c000c818:	e8 fc f4 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c81d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c824:	6a 01                	push   0x1
c000c826:	50                   	push   eax
c000c827:	55                   	push   ebp
c000c828:	81 cd 07 04 00 00    	or     ebp,0x407
c000c82e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c832:	51                   	push   ecx
c000c833:	e8 7e fe ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c838:	83 c4 1c             	add    esp,0x1c
c000c83b:	68 00 10 00 00       	push   0x1000
c000c840:	6a 00                	push   0x0
c000c842:	50                   	push   eax
c000c843:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c847:	e8 30 3e ff ff       	call   c000067c <memset>
c000c84c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c850:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c853:	e8 f1 f7 ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c000c858:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c861:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c865:	e9 47 ff ff ff       	jmp    c000c7b1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c86a <VAS::VAS(bool)>:
c000c86a:	53                   	push   ebx
c000c86b:	83 ec 28             	sub    esp,0x28
c000c86e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c872:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c87a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c881:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c885:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c88c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c890:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c894:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c897:	e8 6e db ff ff       	call   c000a40a <Phys::allocatePage()>
c000c89c:	89 c2                	mov    edx,eax
c000c89e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8a2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8a5:	8b 1d 90 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b90
c000c8ab:	83 ec 0c             	sub    esp,0xc
c000c8ae:	6a 01                	push   0x1
c000c8b0:	e8 64 f4 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c000c8b5:	83 c4 10             	add    esp,0x10
c000c8b8:	89 c2                	mov    edx,eax
c000c8ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c8c1:	83 ec 0c             	sub    esp,0xc
c000c8c4:	6a 03                	push   0x3
c000c8c6:	6a 01                	push   0x1
c000c8c8:	52                   	push   edx
c000c8c9:	50                   	push   eax
c000c8ca:	53                   	push   ebx
c000c8cb:	e8 e6 fd ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8d0:	83 c4 20             	add    esp,0x20
c000c8d3:	89 c2                	mov    edx,eax
c000c8d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8dc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c8e4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c8ec:	7f 1c                	jg     c000c90a <VAS::VAS(bool)+0xa0>
c000c8ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c8f9:	c1 e2 02             	shl    edx,0x2
c000c8fc:	01 d0                	add    eax,edx
c000c8fe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c904:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c908:	eb da                	jmp    c000c8e4 <VAS::VAS(bool)+0x7a>
c000c90a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c912:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c91a:	7f 7a                	jg     c000c996 <VAS::VAS(bool)+0x12c>
c000c91c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c920:	2d 00 02 00 00       	sub    eax,0x200
c000c925:	c1 e0 0c             	shl    eax,0xc
c000c928:	83 c8 03             	or     eax,0x3
c000c92b:	89 c2                	mov    edx,eax
c000c92d:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c932:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c938:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c93e:	83 e0 10             	and    eax,0x10
c000c941:	84 c0                	test   al,al
c000c943:	74 07                	je     c000c94c <VAS::VAS(bool)+0xe2>
c000c945:	b8 00 01 00 00       	mov    eax,0x100
c000c94a:	eb 05                	jmp    c000c951 <VAS::VAS(bool)+0xe7>
c000c94c:	b8 00 00 00 00       	mov    eax,0x0
c000c951:	09 d0                	or     eax,edx
c000c953:	89 c1                	mov    ecx,eax
c000c955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c959:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c95c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c960:	c1 e2 02             	shl    edx,0x2
c000c963:	01 d0                	add    eax,edx
c000c965:	89 ca                	mov    edx,ecx
c000c967:	89 10                	mov    DWORD PTR [eax],edx
c000c969:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c96d:	2d 40 03 00 00       	sub    eax,0x340
c000c972:	83 f8 7f             	cmp    eax,0x7f
c000c975:	77 16                	ja     c000c98d <VAS::VAS(bool)+0x123>
c000c977:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c97b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c97e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c982:	c1 e2 02             	shl    edx,0x2
c000c985:	01 d0                	add    eax,edx
c000c987:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c98d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c991:	e9 7c ff ff ff       	jmp    c000c912 <VAS::VAS(bool)+0xa8>
c000c996:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c99b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9a1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9a7:	83 e0 10             	and    eax,0x10
c000c9aa:	84 c0                	test   al,al
c000c9ac:	74 07                	je     c000c9b5 <VAS::VAS(bool)+0x14b>
c000c9ae:	b8 03 41 00 00       	mov    eax,0x4103
c000c9b3:	eb 05                	jmp    c000c9ba <VAS::VAS(bool)+0x150>
c000c9b5:	b8 03 40 00 00       	mov    eax,0x4003
c000c9ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9be:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c9c1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c9c7:	89 02                	mov    DWORD PTR [edx],eax
c000c9c9:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c9ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c9da:	83 ec 08             	sub    esp,0x8
c000c9dd:	50                   	push   eax
c000c9de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e2:	e8 b3 fc ff ff       	call   c000c69a <VAS::setCPUSpecific(unsigned long)>
c000c9e7:	83 c4 10             	add    esp,0x10
c000c9ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c9f1:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000c9f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9fc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca02:	83 e0 10             	and    eax,0x10
c000ca05:	84 c0                	test   al,al
c000ca07:	74 07                	je     c000ca10 <VAS::VAS(bool)+0x1a6>
c000ca09:	b8 00 01 00 00       	mov    eax,0x100
c000ca0e:	eb 05                	jmp    c000ca15 <VAS::VAS(bool)+0x1ab>
c000ca10:	b8 00 00 00 00       	mov    eax,0x0
c000ca15:	09 c2                	or     edx,eax
c000ca17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca1e:	05 fc 0f 00 00       	add    eax,0xffc
c000ca23:	83 ca 03             	or     edx,0x3
c000ca26:	89 10                	mov    DWORD PTR [eax],edx
c000ca28:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000ca2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca33:	83 ec 0c             	sub    esp,0xc
c000ca36:	50                   	push   eax
c000ca37:	e8 76 1e 00 00       	call   c000e8b2 <Device::getName()>
c000ca3c:	83 c4 10             	add    esp,0x10
c000ca3f:	83 ec 08             	sub    esp,0x8
c000ca42:	68 a8 4e 02 c0       	push   0xc0024ea8
c000ca47:	50                   	push   eax
c000ca48:	e8 77 3d ff ff       	call   c00007c4 <strcmp>
c000ca4d:	83 c4 10             	add    esp,0x10
c000ca50:	85 c0                	test   eax,eax
c000ca52:	0f 94 c0             	sete   al
c000ca55:	84 c0                	test   al,al
c000ca57:	0f 84 87 00 00 00    	je     c000cae4 <VAS::VAS(bool)+0x27a>
c000ca5d:	fa                   	cli    
c000ca5e:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000ca63:	40                   	inc    eax
c000ca64:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000ca69:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000ca6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca74:	05 7c 09 00 00       	add    eax,0x97c
c000ca79:	83 ec 0c             	sub    esp,0xc
c000ca7c:	50                   	push   eax
c000ca7d:	e8 c0 cd ff ff       	call   c0009842 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ca82:	83 c4 10             	add    esp,0x10
c000ca85:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca8a:	89 c3                	mov    ebx,eax
c000ca8c:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000ca91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca97:	05 7c 09 00 00       	add    eax,0x97c
c000ca9c:	83 ec 0c             	sub    esp,0xc
c000ca9f:	50                   	push   eax
c000caa0:	e8 9d cd ff ff       	call   c0009842 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caa5:	83 c4 10             	add    esp,0x10
c000caa8:	83 ec 08             	sub    esp,0x8
c000caab:	50                   	push   eax
c000caac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cab0:	e8 75 f5 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000cab5:	83 c4 10             	add    esp,0x10
c000cab8:	8b 00                	mov    eax,DWORD PTR [eax]
c000caba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cabf:	6a 11                	push   0x11
c000cac1:	53                   	push   ebx
c000cac2:	50                   	push   eax
c000cac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cac7:	e8 f4 f8 ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000cacc:	83 c4 10             	add    esp,0x10
c000cacf:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000cad4:	48                   	dec    eax
c000cad5:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000cada:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000cadf:	85 c0                	test   eax,eax
c000cae1:	75 01                	jne    c000cae4 <VAS::VAS(bool)+0x27a>
c000cae3:	fb                   	sti    
c000cae4:	90                   	nop
c000cae5:	83 c4 28             	add    esp,0x28
c000cae8:	5b                   	pop    ebx
c000cae9:	c3                   	ret    

c000caea <VAS::evict(unsigned long)>:
c000caea:	55                   	push   ebp
c000caeb:	57                   	push   edi
c000caec:	56                   	push   esi
c000caed:	53                   	push   ebx
c000caee:	83 ec 1c             	sub    esp,0x1c
c000caf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000caf5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000caf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cafd:	e8 58 f3 ff ff       	call   c000be5a <Virt::allocateSwapfilePage()>
c000cb02:	89 c7                	mov    edi,eax
c000cb04:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c000cb09:	85 c0                	test   eax,eax
c000cb0b:	7e 3d                	jle    c000cb4a <VAS::evict(unsigned long)+0x60>
c000cb0d:	89 ee                	mov    esi,ebp
c000cb0f:	31 db                	xor    ebx,ebx
c000cb11:	83 ec 0c             	sub    esp,0xc
c000cb14:	57                   	push   edi
c000cb15:	e8 2e f3 ff ff       	call   c000be48 <Virt::swapIDToSector(unsigned long)>
c000cb1a:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb1d:	01 d8                	add    eax,ebx
c000cb1f:	6a 01                	push   0x1
c000cb21:	31 d2                	xor    edx,edx
c000cb23:	43                   	inc    ebx
c000cb24:	52                   	push   edx
c000cb25:	81 c6 00 02 00 00    	add    esi,0x200
c000cb2b:	50                   	push   eax
c000cb2c:	0f be 05 b8 7e 02 c0 	movsx  eax,BYTE PTR ds:0xc0027eb8
c000cb33:	ff 34 85 1c 8f 02 c0 	push   DWORD PTR [eax*4-0x3ffd70e4]
c000cb3a:	e8 c5 3d 00 00       	call   c0010904 <LogicalDisk::write(unsigned long long, int, void*)>
c000cb3f:	83 c4 20             	add    esp,0x20
c000cb42:	39 1d ac 7e 02 c0    	cmp    DWORD PTR ds:0xc0027eac,ebx
c000cb48:	7f c7                	jg     c000cb11 <VAS::evict(unsigned long)+0x27>
c000cb4a:	83 ec 08             	sub    esp,0x8
c000cb4d:	c1 e7 0b             	shl    edi,0xb
c000cb50:	55                   	push   ebp
c000cb51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb55:	e8 d0 f4 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000cb5a:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb5c:	89 d3                	mov    ebx,edx
c000cb5e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb64:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb6a:	09 d7                	or     edi,edx
c000cb6c:	89 38                	mov    DWORD PTR [eax],edi
c000cb6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb71:	ff 05 88 8b 02 c0    	inc    DWORD PTR ds:0xc0028b88
c000cb77:	e8 0b d8 ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c000cb7c:	0f 20 d8             	mov    eax,cr3
c000cb7f:	0f 22 d8             	mov    cr3,eax
c000cb82:	ff 35 88 8b 02 c0    	push   DWORD PTR ds:0xc0028b88
c000cb88:	55                   	push   ebp
c000cb89:	53                   	push   ebx
c000cb8a:	68 f8 4d 02 c0       	push   0xc0024df8
c000cb8f:	e8 ab 04 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cb94:	a1 84 8b 02 c0       	mov    eax,ds:0xc0028b84
c000cb99:	c7 44 24 50 b6 4e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024eb6
c000cba1:	8d 50 01             	lea    edx,[eax+0x1]
c000cba4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cba8:	89 15 84 8b 02 c0    	mov    DWORD PTR ds:0xc0028b84,edx
c000cbae:	83 c4 3c             	add    esp,0x3c
c000cbb1:	5b                   	pop    ebx
c000cbb2:	5e                   	pop    esi
c000cbb3:	5f                   	pop    edi
c000cbb4:	5d                   	pop    ebp
c000cbb5:	e9 85 04 00 00       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>

c000cbba <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbba:	55                   	push   ebp
c000cbbb:	57                   	push   edi
c000cbbc:	56                   	push   esi
c000cbbd:	53                   	push   ebx
c000cbbe:	83 ec 14             	sub    esp,0x14
c000cbc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbc5:	68 c7 4e 02 c0       	push   0xc0024ec7
c000cbca:	e8 70 04 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbd6:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbdc:	74 20                	je     c000cbfe <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbde:	83 ec 08             	sub    esp,0x8
c000cbe1:	55                   	push   ebp
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 3f f4 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	89 c3                	mov    ebx,eax
c000cbf0:	85 c0                	test   eax,eax
c000cbf2:	74 0a                	je     c000cbfe <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbf4:	8b 38                	mov    edi,DWORD PTR [eax]
c000cbf6:	f7 c7 01 00 00 00    	test   edi,0x1
c000cbfc:	74 0a                	je     c000cc08 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cbfe:	31 c0                	xor    eax,eax
c000cc00:	83 c4 0c             	add    esp,0xc
c000cc03:	5b                   	pop    ebx
c000cc04:	5e                   	pop    esi
c000cc05:	5f                   	pop    edi
c000cc06:	5d                   	pop    ebp
c000cc07:	c3                   	ret    
c000cc08:	e8 fd d7 ff ff       	call   c000a40a <Phys::allocatePage()>
c000cc0d:	c1 ef 0b             	shr    edi,0xb
c000cc10:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc12:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc18:	09 c2                	or     edx,eax
c000cc1a:	81 ca 01 08 00 00    	or     edx,0x801
c000cc20:	89 13                	mov    DWORD PTR [ebx],edx
c000cc22:	8b 0d ac 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027eac
c000cc28:	85 c9                	test   ecx,ecx
c000cc2a:	7e 3d                	jle    c000cc69 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc2c:	89 ee                	mov    esi,ebp
c000cc2e:	31 db                	xor    ebx,ebx
c000cc30:	83 ec 0c             	sub    esp,0xc
c000cc33:	57                   	push   edi
c000cc34:	e8 0f f2 ff ff       	call   c000be48 <Virt::swapIDToSector(unsigned long)>
c000cc39:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc3c:	01 d8                	add    eax,ebx
c000cc3e:	6a 01                	push   0x1
c000cc40:	31 d2                	xor    edx,edx
c000cc42:	43                   	inc    ebx
c000cc43:	52                   	push   edx
c000cc44:	81 c6 00 02 00 00    	add    esi,0x200
c000cc4a:	50                   	push   eax
c000cc4b:	0f be 05 b8 7e 02 c0 	movsx  eax,BYTE PTR ds:0xc0027eb8
c000cc52:	ff 34 85 1c 8f 02 c0 	push   DWORD PTR [eax*4-0x3ffd70e4]
c000cc59:	e8 3a 3c 00 00       	call   c0010898 <LogicalDisk::read(unsigned long long, int, void*)>
c000cc5e:	83 c4 20             	add    esp,0x20
c000cc61:	39 1d ac 7e 02 c0    	cmp    DWORD PTR ds:0xc0027eac,ebx
c000cc67:	7f c7                	jg     c000cc30 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc69:	a1 88 8b 02 c0       	mov    eax,ds:0xc0028b88
c000cc6e:	48                   	dec    eax
c000cc6f:	52                   	push   edx
c000cc70:	a3 88 8b 02 c0       	mov    ds:0xc0028b88,eax
c000cc75:	50                   	push   eax
c000cc76:	55                   	push   ebp
c000cc77:	68 da 4e 02 c0       	push   0xc0024eda
c000cc7c:	e8 be 03 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cc81:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc84:	e8 a1 f1 ff ff       	call   c000be2a <Virt::freeSwapfilePage(unsigned long)>
c000cc89:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	48                   	dec    eax
c000cc92:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000cc97:	85 c0                	test   eax,eax
c000cc99:	74 1d                	je     c000ccb8 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc9f:	25 ff 0f 00 00       	and    eax,0xfff
c000cca4:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cca9:	77 10                	ja     c000ccbb <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000ccab:	0f 20 d8             	mov    eax,cr3
c000ccae:	0f 22 d8             	mov    cr3,eax
c000ccb1:	b0 01                	mov    al,0x1
c000ccb3:	e9 48 ff ff ff       	jmp    c000cc00 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccb8:	fb                   	sti    
c000ccb9:	eb e0                	jmp    c000cc9b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccbb:	83 ec 0c             	sub    esp,0xc
c000ccbe:	68 ef 4e 02 c0       	push   0xc0024eef
c000ccc3:	e8 77 03 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ccc8:	83 c4 10             	add    esp,0x10
c000cccb:	eb de                	jmp    c000ccab <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cccd:	90                   	nop

c000ccce <VAS::scanForEviction()>:
c000ccce:	57                   	push   edi
c000cccf:	31 ff                	xor    edi,edi
c000ccd1:	56                   	push   esi
c000ccd2:	53                   	push   ebx
c000ccd3:	83 ec 10             	sub    esp,0x10
c000ccd6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccda:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccdd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cce3:	75 0e                	jne    c000ccf3 <VAS::scanForEviction()+0x25>
c000cce5:	89 da                	mov    edx,ebx
c000cce7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccea:	c1 ea 16             	shr    edx,0x16
c000cced:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccf1:	74 4e                	je     c000cd41 <VAS::scanForEviction()+0x73>
c000ccf3:	53                   	push   ebx
c000ccf4:	56                   	push   esi
c000ccf5:	e8 30 f3 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000ccfa:	5a                   	pop    edx
c000ccfb:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccfd:	59                   	pop    ecx
c000ccfe:	89 d1                	mov    ecx,edx
c000cd00:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd06:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd0c:	74 3e                	je     c000cd4c <VAS::scanForEviction()+0x7e>
c000cd0e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd14:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd1a:	76 2b                	jbe    c000cd47 <VAS::scanForEviction()+0x79>
c000cd1c:	47                   	inc    edi
c000cd1d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd24:	83 ff 03             	cmp    edi,0x3
c000cd27:	74 32                	je     c000cd5b <VAS::scanForEviction()+0x8d>
c000cd29:	31 db                	xor    ebx,ebx
c000cd2b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd31:	75 c0                	jne    c000ccf3 <VAS::scanForEviction()+0x25>
c000cd33:	89 da                	mov    edx,ebx
c000cd35:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd38:	c1 ea 16             	shr    edx,0x16
c000cd3b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd3f:	75 b2                	jne    c000ccf3 <VAS::scanForEviction()+0x25>
c000cd41:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd47:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd4a:	eb 91                	jmp    c000ccdd <VAS::scanForEviction()+0xf>
c000cd4c:	f6 c2 20             	test   dl,0x20
c000cd4f:	74 13                	je     c000cd64 <VAS::scanForEviction()+0x96>
c000cd51:	83 e2 df             	and    edx,0xffffffdf
c000cd54:	89 10                	mov    DWORD PTR [eax],edx
c000cd56:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd59:	eb b3                	jmp    c000cd0e <VAS::scanForEviction()+0x40>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	31 c0                	xor    eax,eax
c000cd60:	5b                   	pop    ebx
c000cd61:	5e                   	pop    esi
c000cd62:	5f                   	pop    edi
c000cd63:	c3                   	ret    
c000cd64:	83 ec 08             	sub    esp,0x8
c000cd67:	89 d0                	mov    eax,edx
c000cd69:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd72:	53                   	push   ebx
c000cd73:	68 ff 4e 02 c0       	push   0xc0024eff
c000cd78:	e8 c2 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cd7d:	58                   	pop    eax
c000cd7e:	5a                   	pop    edx
c000cd7f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd82:	56                   	push   esi
c000cd83:	e8 62 fd ff ff       	call   c000caea <VAS::evict(unsigned long)>
c000cd88:	59                   	pop    ecx
c000cd89:	5b                   	pop    ebx
c000cd8a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd8d:	68 13 4f 02 c0       	push   0xc0024f13
c000cd92:	e8 a8 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cd97:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd9e:	83 c4 10             	add    esp,0x10
c000cda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cda5:	83 c4 10             	add    esp,0x10
c000cda8:	5b                   	pop    ebx
c000cda9:	5e                   	pop    esi
c000cdaa:	5f                   	pop    edi
c000cdab:	c3                   	ret    

c000cdac <mapVASFirstTime>:
c000cdac:	55                   	push   ebp
c000cdad:	57                   	push   edi
c000cdae:	56                   	push   esi
c000cdaf:	53                   	push   ebx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdb8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cdbb:	4a                   	dec    edx
c000cdbc:	0f 84 fe 00 00 00    	je     c000cec0 <mapVASFirstTime+0x114>
c000cdc2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cdc5:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cdc8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cdcd:	c1 e5 15             	shl    ebp,0x15
c000cdd0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cdd5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cddb:	29 eb                	sub    ebx,ebp
c000cddd:	29 ef                	sub    edi,ebp
c000cddf:	83 ec 08             	sub    esp,0x8
c000cde2:	53                   	push   ebx
c000cde3:	68 3f 4f 02 c0       	push   0xc0024f3f
c000cde8:	e8 52 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cded:	e8 18 d6 ff ff       	call   c000a40a <Phys::allocatePage()>
c000cdf2:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cdf9:	6a 01                	push   0x1
c000cdfb:	53                   	push   ebx
c000cdfc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce02:	50                   	push   eax
c000ce03:	56                   	push   esi
c000ce04:	e8 ad f8 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce09:	83 c4 20             	add    esp,0x20
c000ce0c:	39 fb                	cmp    ebx,edi
c000ce0e:	75 cf                	jne    c000cddf <mapVASFirstTime+0x33>
c000ce10:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce15:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce1a:	29 eb                	sub    ebx,ebp
c000ce1c:	29 ef                	sub    edi,ebp
c000ce1e:	83 ec 08             	sub    esp,0x8
c000ce21:	53                   	push   ebx
c000ce22:	68 5b 4f 02 c0       	push   0xc0024f5b
c000ce27:	e8 13 02 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce2c:	58                   	pop    eax
c000ce2d:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce31:	5a                   	pop    edx
c000ce32:	19 c0                	sbb    eax,eax
c000ce34:	83 e0 04             	and    eax,0x4
c000ce37:	05 03 04 00 00       	add    eax,0x403
c000ce3c:	50                   	push   eax
c000ce3d:	68 6f 4f 02 c0       	push   0xc0024f6f
c000ce42:	e8 f8 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce47:	e8 be d5 ff ff       	call   c000a40a <Phys::allocatePage()>
c000ce4c:	59                   	pop    ecx
c000ce4d:	89 c5                	mov    ebp,eax
c000ce4f:	58                   	pop    eax
c000ce50:	55                   	push   ebp
c000ce51:	68 7d 4f 02 c0       	push   0xc0024f7d
c000ce56:	e8 e4 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce5b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce5f:	19 d2                	sbb    edx,edx
c000ce61:	83 e2 04             	and    edx,0x4
c000ce64:	81 c2 03 04 00 00    	add    edx,0x403
c000ce6a:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce6d:	6a 01                	push   0x1
c000ce6f:	53                   	push   ebx
c000ce70:	55                   	push   ebp
c000ce71:	56                   	push   esi
c000ce72:	e8 3f f8 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce77:	83 c4 18             	add    esp,0x18
c000ce7a:	53                   	push   ebx
c000ce7b:	56                   	push   esi
c000ce7c:	e8 a9 f1 ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c000ce81:	5a                   	pop    edx
c000ce82:	59                   	pop    ecx
c000ce83:	ff 30                	push   DWORD PTR [eax]
c000ce85:	68 99 4f 02 c0       	push   0xc0024f99
c000ce8a:	e8 b0 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ce8f:	0f 20 d8             	mov    eax,cr3
c000ce92:	83 c4 0c             	add    esp,0xc
c000ce95:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce9b:	56                   	push   esi
c000ce9c:	50                   	push   eax
c000ce9d:	68 a4 4f 02 c0       	push   0xc0024fa4
c000cea2:	e8 98 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cea7:	83 c4 10             	add    esp,0x10
c000ceaa:	39 df                	cmp    edi,ebx
c000ceac:	0f 85 6c ff ff ff    	jne    c000ce1e <mapVASFirstTime+0x72>
c000ceb2:	0f 20 d8             	mov    eax,cr3
c000ceb5:	0f 22 d8             	mov    cr3,eax
c000ceb8:	83 c4 0c             	add    esp,0xc
c000cebb:	5b                   	pop    ebx
c000cebc:	5e                   	pop    esi
c000cebd:	5f                   	pop    edi
c000cebe:	5d                   	pop    ebp
c000cebf:	c3                   	ret    
c000cec0:	83 ec 0c             	sub    esp,0xc
c000cec3:	68 26 4f 02 c0       	push   0xc0024f26
c000cec8:	e8 72 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	83 c4 0c             	add    esp,0xc
c000ced3:	5b                   	pop    ebx
c000ced4:	5e                   	pop    esi
c000ced5:	5f                   	pop    edi
c000ced6:	5d                   	pop    ebp
c000ced7:	c3                   	ret    

c000ced8 <__cxa_atexit>:
c000ced8:	31 c0                	xor    eax,eax
c000ceda:	c3                   	ret    

c000cedb <__cxa_finalize>:
c000cedb:	c3                   	ret    

c000cedc <__stack_chk_fail>:
c000cedc:	55                   	push   ebp
c000cedd:	89 e5                	mov    ebp,esp
c000cedf:	83 ec 14             	sub    esp,0x14
c000cee2:	68 bc 4f 02 c0       	push   0xc0024fbc
c000cee7:	e8 53 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ceec:	58                   	pop    eax
c000ceed:	5a                   	pop    edx
c000ceee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cef1:	68 0c 50 02 c0       	push   0xc002500c
c000cef6:	e8 44 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cefb:	59                   	pop    ecx
c000cefc:	58                   	pop    eax
c000cefd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf00:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf03:	68 0c 50 02 c0       	push   0xc002500c
c000cf08:	e8 32 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cf0d:	5a                   	pop    edx
c000cf0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf11:	59                   	pop    ecx
c000cf12:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf14:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf17:	68 0c 50 02 c0       	push   0xc002500c
c000cf1c:	e8 1e 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cf21:	5a                   	pop    edx
c000cf22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf25:	59                   	pop    ecx
c000cf26:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf28:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf2a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf2d:	68 0c 50 02 c0       	push   0xc002500c
c000cf32:	e8 08 01 00 00       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000cf37:	c7 04 24 14 50 02 c0 	mov    DWORD PTR [esp],0xc0025014
c000cf3e:	e8 b2 80 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000cf43:	83 c4 10             	add    esp,0x10
c000cf46:	c9                   	leave  
c000cf47:	c3                   	ret    

c000cf48 <__cxa_pure_virtual>:
c000cf48:	83 ec 18             	sub    esp,0x18
c000cf4b:	68 2c 50 02 c0       	push   0xc002502c
c000cf50:	e8 a0 80 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000cf55:	83 c4 1c             	add    esp,0x1c
c000cf58:	c3                   	ret    

c000cf59 <operator new[](unsigned long)>:
c000cf59:	e9 f5 cd ff ff       	jmp    c0009d53 <malloc>

c000cf5e <operator delete(void*, unsigned long)>:
c000cf5e:	e9 10 ce ff ff       	jmp    c0009d73 <rfree>

c000cf63 <operator delete[](void*)>:
c000cf63:	e9 0b ce ff ff       	jmp    c0009d73 <rfree>

c000cf68 <operator delete[](void*, unsigned long)>:
c000cf68:	e9 06 ce ff ff       	jmp    c0009d73 <rfree>

c000cf6d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf6d:	55                   	push   ebp
c000cf6e:	b9 11 00 00 00       	mov    ecx,0x11
c000cf73:	57                   	push   edi
c000cf74:	56                   	push   esi
c000cf75:	be 12 4b 02 c0       	mov    esi,0xc0024b12
c000cf7a:	53                   	push   ebx
c000cf7b:	83 ec 20             	sub    esp,0x20
c000cf7e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf82:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf86:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf8a:	fc                   	cld    
c000cf8b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf8d:	89 ee                	mov    esi,ebp
c000cf8f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf93:	eb 02                	jmp    c000cf97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf95:	89 c6                	mov    esi,eax
c000cf97:	31 d2                	xor    edx,edx
c000cf99:	41                   	inc    ecx
c000cf9a:	89 f0                	mov    eax,esi
c000cf9c:	f7 f3                	div    ebx
c000cf9e:	39 de                	cmp    esi,ebx
c000cfa0:	73 f3                	jae    c000cf95 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfa2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfa5:	eb 02                	jmp    c000cfa9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfa7:	89 c5                	mov    ebp,eax
c000cfa9:	31 d2                	xor    edx,edx
c000cfab:	49                   	dec    ecx
c000cfac:	89 e8                	mov    eax,ebp
c000cfae:	f7 f3                	div    ebx
c000cfb0:	39 dd                	cmp    ebp,ebx
c000cfb2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfb6:	88 11                	mov    BYTE PTR [ecx],dl
c000cfb8:	73 ed                	jae    c000cfa7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfbe:	83 c4 20             	add    esp,0x20
c000cfc1:	5b                   	pop    ebx
c000cfc2:	5e                   	pop    esi
c000cfc3:	5f                   	pop    edi
c000cfc4:	5d                   	pop    ebp
c000cfc5:	c3                   	ret    

c000cfc6 <Dbg::logc(char)>:
c000cfc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfca:	f6 05 80 8a 02 c0 10 	test   BYTE PTR ds:0xc0028a80,0x10
c000cfd1:	75 12                	jne    c000cfe5 <Dbg::logc(char)+0x1f>
c000cfd3:	ba fd 03 00 00       	mov    edx,0x3fd
c000cfd8:	ec                   	in     al,dx
c000cfd9:	a8 20                	test   al,0x20
c000cfdb:	74 fb                	je     c000cfd8 <Dbg::logc(char)+0x12>
c000cfdd:	ba f8 03 00 00       	mov    edx,0x3f8
c000cfe2:	88 c8                	mov    al,cl
c000cfe4:	ee                   	out    dx,al
c000cfe5:	c3                   	ret    

c000cfe6 <Dbg::logs(char*)>:
c000cfe6:	53                   	push   ebx
c000cfe7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cfeb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cfee:	84 c0                	test   al,al
c000cff0:	74 0f                	je     c000d001 <Dbg::logs(char*)+0x1b>
c000cff2:	50                   	push   eax
c000cff3:	43                   	inc    ebx
c000cff4:	e8 cd ff ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000cff9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cffc:	5a                   	pop    edx
c000cffd:	84 c0                	test   al,al
c000cfff:	75 f1                	jne    c000cff2 <Dbg::logs(char*)+0xc>
c000d001:	5b                   	pop    ebx
c000d002:	c3                   	ret    

c000d003 <Dbg::logWriteInt(unsigned int)>:
c000d003:	83 ec 10             	sub    esp,0x10
c000d006:	6a 0a                	push   0xa
c000d008:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d00c:	50                   	push   eax
c000d00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d011:	e8 57 ff ff ff       	call   c000cf6d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d016:	50                   	push   eax
c000d017:	e8 ca ff ff ff       	call   c000cfe6 <Dbg::logs(char*)>
c000d01c:	83 c4 20             	add    esp,0x20
c000d01f:	c3                   	ret    

c000d020 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d020:	83 ec 10             	sub    esp,0x10
c000d023:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d027:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d02b:	50                   	push   eax
c000d02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d030:	e8 38 ff ff ff       	call   c000cf6d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d035:	50                   	push   eax
c000d036:	e8 ab ff ff ff       	call   c000cfe6 <Dbg::logs(char*)>
c000d03b:	83 c4 20             	add    esp,0x20
c000d03e:	c3                   	ret    

c000d03f <Dbg::kprintf(char const*, ...)>:
c000d03f:	55                   	push   ebp
c000d040:	57                   	push   edi
c000d041:	56                   	push   esi
c000d042:	53                   	push   ebx
c000d043:	83 ec 0c             	sub    esp,0xc
c000d046:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d04a:	f6 05 80 8a 02 c0 10 	test   BYTE PTR ds:0xc0028a80,0x10
c000d051:	74 08                	je     c000d05b <Dbg::kprintf(char const*, ...)+0x1c>
c000d053:	83 c4 0c             	add    esp,0xc
c000d056:	5b                   	pop    ebx
c000d057:	5e                   	pop    esi
c000d058:	5f                   	pop    edi
c000d059:	5d                   	pop    ebp
c000d05a:	c3                   	ret    
c000d05b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d05f:	31 db                	xor    ebx,ebx
c000d061:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d065:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d068:	84 c0                	test   al,al
c000d06a:	74 e7                	je     c000d053 <Dbg::kprintf(char const*, ...)+0x14>
c000d06c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d06f:	3c 25                	cmp    al,0x25
c000d071:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d074:	75 44                	jne    c000d0ba <Dbg::kprintf(char const*, ...)+0x7b>
c000d076:	83 c3 02             	add    ebx,0x2
c000d079:	8a 07                	mov    al,BYTE PTR [edi]
c000d07b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d07e:	83 e8 25             	sub    eax,0x25
c000d081:	3c 53                	cmp    al,0x53
c000d083:	0f 87 c9 00 00 00    	ja     c000d152 <Dbg::kprintf(char const*, ...)+0x113>
c000d089:	0f b6 c0             	movzx  eax,al
c000d08c:	ff 24 85 40 50 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdafc0]
c000d093:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d097:	89 c8                	mov    eax,ecx
c000d099:	83 c1 04             	add    ecx,0x4
c000d09c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a0:	ff 30                	push   DWORD PTR [eax]
c000d0a2:	e8 5c ff ff ff       	call   c000d003 <Dbg::logWriteInt(unsigned int)>
c000d0a7:	5f                   	pop    edi
c000d0a8:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0ac:	84 c0                	test   al,al
c000d0ae:	74 a3                	je     c000d053 <Dbg::kprintf(char const*, ...)+0x14>
c000d0b0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0b3:	3c 25                	cmp    al,0x25
c000d0b5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0b8:	74 bc                	je     c000d076 <Dbg::kprintf(char const*, ...)+0x37>
c000d0ba:	50                   	push   eax
c000d0bb:	89 eb                	mov    ebx,ebp
c000d0bd:	e8 04 ff ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d0c2:	89 fd                	mov    ebp,edi
c000d0c4:	58                   	pop    eax
c000d0c5:	eb e1                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0cb:	89 c8                	mov    eax,ecx
c000d0cd:	83 c1 04             	add    ecx,0x4
c000d0d0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0d4:	ff 30                	push   DWORD PTR [eax]
c000d0d6:	e8 0b ff ff ff       	call   c000cfe6 <Dbg::logs(char*)>
c000d0db:	58                   	pop    eax
c000d0dc:	eb ca                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0e2:	89 d0                	mov    eax,edx
c000d0e4:	83 c2 04             	add    edx,0x4
c000d0e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0eb:	ff 30                	push   DWORD PTR [eax]
c000d0ed:	e8 11 ff ff ff       	call   c000d003 <Dbg::logWriteInt(unsigned int)>
c000d0f2:	58                   	pop    eax
c000d0f3:	eb b3                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0f9:	89 d0                	mov    eax,edx
c000d0fb:	83 c2 04             	add    edx,0x4
c000d0fe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d101:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d105:	50                   	push   eax
c000d106:	e8 bb fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d10b:	58                   	pop    eax
c000d10c:	eb 9a                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d10e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d112:	89 c8                	mov    eax,ecx
c000d114:	83 c1 04             	add    ecx,0x4
c000d117:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d11b:	6a 10                	push   0x10
c000d11d:	ff 30                	push   DWORD PTR [eax]
c000d11f:	e8 fc fe ff ff       	call   c000d020 <Dbg::logWriteIntBase(unsigned int, int)>
c000d124:	59                   	pop    ecx
c000d125:	5f                   	pop    edi
c000d126:	eb 80                	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d128:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d12c:	89 d0                	mov    eax,edx
c000d12e:	83 c2 08             	add    edx,0x8
c000d131:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d135:	6a 10                	push   0x10
c000d137:	ff 30                	push   DWORD PTR [eax]
c000d139:	e8 e2 fe ff ff       	call   c000d020 <Dbg::logWriteIntBase(unsigned int, int)>
c000d13e:	58                   	pop    eax
c000d13f:	5a                   	pop    edx
c000d140:	e9 63 ff ff ff       	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d145:	6a 25                	push   0x25
c000d147:	e8 7a fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d14c:	58                   	pop    eax
c000d14d:	e9 56 ff ff ff       	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d152:	6a 25                	push   0x25
c000d154:	e8 6d fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d159:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d15c:	50                   	push   eax
c000d15d:	e8 64 fe ff ff       	call   c000cfc6 <Dbg::logc(char)>
c000d162:	5a                   	pop    edx
c000d163:	59                   	pop    ecx
c000d164:	e9 3f ff ff ff       	jmp    c000d0a8 <Dbg::kprintf(char const*, ...)+0x69>
c000d169:	90                   	nop

c000d16a <File::read(unsigned long long, void*, int*)>:
c000d16a:	53                   	push   ebx
c000d16b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d16f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d173:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d17a:	3c 19                	cmp    al,0x19
c000d17c:	77 35                	ja     c000d1b3 <File::read(unsigned long long, void*, int*)+0x49>
c000d17e:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000d185:	85 c0                	test   eax,eax
c000d187:	74 2a                	je     c000d1b3 <File::read(unsigned long long, void*, int*)+0x49>
c000d189:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d18f:	85 c0                	test   eax,eax
c000d191:	74 20                	je     c000d1b3 <File::read(unsigned long long, void*, int*)+0x49>
c000d193:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d197:	74 21                	je     c000d1ba <File::read(unsigned long long, void*, int*)+0x50>
c000d199:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d19b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d19f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1ad:	5b                   	pop    ebx
c000d1ae:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1b1:	ff e0                	jmp    eax
c000d1b3:	b8 0b 00 00 00       	mov    eax,0xb
c000d1b8:	eb 05                	jmp    c000d1bf <File::read(unsigned long long, void*, int*)+0x55>
c000d1ba:	b8 05 00 00 00       	mov    eax,0x5
c000d1bf:	5b                   	pop    ebx
c000d1c0:	c3                   	ret    
c000d1c1:	90                   	nop

c000d1c2 <File::write(unsigned long long, void*, int*)>:
c000d1c2:	53                   	push   ebx
c000d1c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1cb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1d2:	3c 19                	cmp    al,0x19
c000d1d4:	77 35                	ja     c000d20b <File::write(unsigned long long, void*, int*)+0x49>
c000d1d6:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000d1dd:	85 c0                	test   eax,eax
c000d1df:	74 2a                	je     c000d20b <File::write(unsigned long long, void*, int*)+0x49>
c000d1e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1e7:	85 c0                	test   eax,eax
c000d1e9:	74 20                	je     c000d20b <File::write(unsigned long long, void*, int*)+0x49>
c000d1eb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1ef:	74 21                	je     c000d212 <File::write(unsigned long long, void*, int*)+0x50>
c000d1f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1f7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d201:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d205:	5b                   	pop    ebx
c000d206:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d209:	ff e0                	jmp    eax
c000d20b:	b8 0b 00 00 00       	mov    eax,0xb
c000d210:	eb 05                	jmp    c000d217 <File::write(unsigned long long, void*, int*)+0x55>
c000d212:	b8 05 00 00 00       	mov    eax,0x5
c000d217:	5b                   	pop    ebx
c000d218:	c3                   	ret    
c000d219:	90                   	nop

c000d21a <Directory::read(unsigned long long, void*, int*)>:
c000d21a:	53                   	push   ebx
c000d21b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d21f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d223:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d22a:	3c 19                	cmp    al,0x19
c000d22c:	77 35                	ja     c000d263 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d22e:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000d235:	85 c0                	test   eax,eax
c000d237:	74 2a                	je     c000d263 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d239:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d23f:	85 c0                	test   eax,eax
c000d241:	74 20                	je     c000d263 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d243:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d247:	74 21                	je     c000d26a <Directory::read(unsigned long long, void*, int*)+0x50>
c000d249:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d24b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d24f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d255:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d259:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d25d:	5b                   	pop    ebx
c000d25e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d261:	ff e0                	jmp    eax
c000d263:	b8 0b 00 00 00       	mov    eax,0xb
c000d268:	eb 05                	jmp    c000d26f <Directory::read(unsigned long long, void*, int*)+0x55>
c000d26a:	b8 05 00 00 00       	mov    eax,0x5
c000d26f:	5b                   	pop    ebx
c000d270:	c3                   	ret    
c000d271:	90                   	nop

c000d272 <Directory::write(unsigned long long, void*, int*)>:
c000d272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d276:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d27d:	b8 0b 00 00 00       	mov    eax,0xb
c000d282:	80 fa 19             	cmp    dl,0x19
c000d285:	77 18                	ja     c000d29f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d287:	8b 14 95 20 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fe0]
c000d28e:	85 d2                	test   edx,edx
c000d290:	74 0d                	je     c000d29f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d292:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d299:	19 c0                	sbb    eax,eax
c000d29b:	83 e0 0a             	and    eax,0xa
c000d29e:	40                   	inc    eax
c000d29f:	c3                   	ret    

c000d2a0 <File::isAtty()>:
c000d2a0:	31 c0                	xor    eax,eax
c000d2a2:	c3                   	ret    
c000d2a3:	90                   	nop

c000d2a4 <Directory::isAtty()>:
c000d2a4:	31 c0                	xor    eax,eax
c000d2a6:	c3                   	ret    
c000d2a7:	90                   	nop

c000d2a8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2a8:	b8 0a 00 00 00       	mov    eax,0xa
c000d2ad:	c3                   	ret    

c000d2ae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2ae:	b8 0a 00 00 00       	mov    eax,0xa
c000d2b3:	c3                   	ret    

c000d2b4 <Filesystem::allocateSwapfile(char const*, int)>:
c000d2b4:	31 c0                	xor    eax,eax
c000d2b6:	31 d2                	xor    edx,edx
c000d2b8:	c3                   	ret    
c000d2b9:	90                   	nop

c000d2ba <File::~File()>:
c000d2ba:	83 ec 0c             	sub    esp,0xc
c000d2bd:	ba 7c 52 02 c0       	mov    edx,0xc002527c
c000d2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c6:	89 10                	mov    DWORD PTR [eax],edx
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	83 ec 0c             	sub    esp,0xc
c000d2cf:	50                   	push   eax
c000d2d0:	e8 e3 e7 ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	90                   	nop
c000d2d9:	83 c4 0c             	add    esp,0xc
c000d2dc:	c3                   	ret    
c000d2dd:	90                   	nop

c000d2de <File::~File()>:
c000d2de:	83 ec 0c             	sub    esp,0xc
c000d2e1:	83 ec 0c             	sub    esp,0xc
c000d2e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e8:	e8 cd ff ff ff       	call   c000d2ba <File::~File()>
c000d2ed:	83 c4 10             	add    esp,0x10
c000d2f0:	83 ec 08             	sub    esp,0x8
c000d2f3:	68 14 01 00 00       	push   0x114
c000d2f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fc:	e8 5d fc ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000d301:	83 c4 10             	add    esp,0x10
c000d304:	83 c4 0c             	add    esp,0xc
c000d307:	c3                   	ret    

c000d308 <Directory::~Directory()>:
c000d308:	83 ec 0c             	sub    esp,0xc
c000d30b:	ba 98 52 02 c0       	mov    edx,0xc0025298
c000d310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d314:	89 10                	mov    DWORD PTR [eax],edx
c000d316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31a:	83 ec 0c             	sub    esp,0xc
c000d31d:	50                   	push   eax
c000d31e:	e8 95 e7 ff ff       	call   c000bab8 <UnixFile::~UnixFile()>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <Directory::~Directory()>:
c000d32c:	83 ec 0c             	sub    esp,0xc
c000d32f:	83 ec 0c             	sub    esp,0xc
c000d332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d336:	e8 cd ff ff ff       	call   c000d308 <Directory::~Directory()>
c000d33b:	83 c4 10             	add    esp,0x10
c000d33e:	83 ec 08             	sub    esp,0x8
c000d341:	68 14 01 00 00       	push   0x114
c000d346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d34a:	e8 0f fc ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	83 c4 0c             	add    esp,0xc
c000d355:	c3                   	ret    

c000d356 <Filesystem::Filesystem()>:
c000d356:	ba 14 52 02 c0       	mov    edx,0xc0025214
c000d35b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d35f:	89 10                	mov    DWORD PTR [eax],edx
c000d361:	8b 15 94 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b94
c000d367:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d36b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d372:	a3 94 8b 02 c0       	mov    ds:0xc0028b94,eax
c000d377:	90                   	nop
c000d378:	c3                   	ret    
c000d379:	90                   	nop

c000d37a <Filesystem::~Filesystem()>:
c000d37a:	ba 14 52 02 c0       	mov    edx,0xc0025214
c000d37f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d383:	89 10                	mov    DWORD PTR [eax],edx
c000d385:	90                   	nop
c000d386:	c3                   	ret    
c000d387:	90                   	nop

c000d388 <Filesystem::~Filesystem()>:
c000d388:	83 ec 0c             	sub    esp,0xc
c000d38b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d38f:	e8 e6 ff ff ff       	call   c000d37a <Filesystem::~Filesystem()>
c000d394:	83 c4 04             	add    esp,0x4
c000d397:	83 ec 08             	sub    esp,0x8
c000d39a:	6a 08                	push   0x8
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	e8 b9 fb ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000d3a5:	83 c4 10             	add    esp,0x10
c000d3a8:	83 c4 0c             	add    esp,0xc
c000d3ab:	c3                   	ret    

c000d3ac <Fs::getcwd(Process*, char*, int)>:
c000d3ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3b0:	31 c0                	xor    eax,eax
c000d3b2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3b5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3b9:	7d 15                	jge    c000d3d0 <Fs::getcwd(Process*, char*, int)+0x24>
c000d3bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3bf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3c6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3c9:	84 c9                	test   cl,cl
c000d3cb:	74 06                	je     c000d3d3 <Fs::getcwd(Process*, char*, int)+0x27>
c000d3cd:	40                   	inc    eax
c000d3ce:	eb e2                	jmp    c000d3b2 <Fs::getcwd(Process*, char*, int)+0x6>
c000d3d0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3d3:	31 c0                	xor    eax,eax
c000d3d5:	c3                   	ret    

c000d3d6 <Fs::initVFS()>:
c000d3d6:	83 ec 18             	sub    esp,0x18
c000d3d9:	6a 08                	push   0x8
c000d3db:	e8 73 c9 ff ff       	call   c0009d53 <malloc>
c000d3e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3e3:	e8 78 ec 00 00       	call   c001c060 <FAT::FAT()>
c000d3e8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d3ef:	e8 5f c9 ff ff       	call   c0009d53 <malloc>
c000d3f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3f7:	e8 f4 fe 00 00       	call   c001d2f0 <ISO9660::ISO9660()>
c000d3fc:	83 c4 1c             	add    esp,0x1c
c000d3ff:	c3                   	ret    

c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d400:	55                   	push   ebp
c000d401:	57                   	push   edi
c000d402:	56                   	push   esi
c000d403:	53                   	push   ebx
c000d404:	81 ec 10 04 00 00    	sub    esp,0x410
c000d40a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d411:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d418:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d41f:	68 00 04 00 00       	push   0x400
c000d424:	6a 00                	push   0x0
c000d426:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d42a:	56                   	push   esi
c000d42b:	e8 4c 32 ff ff       	call   c000067c <memset>
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d437:	75 0b                	jne    c000d444 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d439:	50                   	push   eax
c000d43a:	50                   	push   eax
c000d43b:	57                   	push   edi
c000d43c:	56                   	push   esi
c000d43d:	e8 f6 32 ff ff       	call   c0000738 <strcpy>
c000d442:	eb 41                	jmp    c000d485 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d444:	8a 07                	mov    al,BYTE PTR [edi]
c000d446:	3c 5c                	cmp    al,0x5c
c000d448:	74 04                	je     c000d44e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d44a:	3c 2f                	cmp    al,0x2f
c000d44c:	75 18                	jne    c000d466 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d44e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d451:	3c 60                	cmp    al,0x60
c000d453:	7e 03                	jle    c000d458 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d455:	83 e8 20             	sub    eax,0x20
c000d458:	88 04 24             	mov    BYTE PTR [esp],al
c000d45b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d462:	50                   	push   eax
c000d463:	50                   	push   eax
c000d464:	eb 18                	jmp    c000d47e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d466:	50                   	push   eax
c000d467:	50                   	push   eax
c000d468:	55                   	push   ebp
c000d469:	56                   	push   esi
c000d46a:	e8 c9 32 ff ff       	call   c0000738 <strcpy>
c000d46f:	5a                   	pop    edx
c000d470:	59                   	pop    ecx
c000d471:	68 44 6b 02 c0       	push   0xc0026b44
c000d476:	56                   	push   esi
c000d477:	e8 fc 33 ff ff       	call   c0000878 <strcat>
c000d47c:	5d                   	pop    ebp
c000d47d:	58                   	pop    eax
c000d47e:	57                   	push   edi
c000d47f:	56                   	push   esi
c000d480:	e8 f3 33 ff ff       	call   c0000878 <strcat>
c000d485:	83 c4 10             	add    esp,0x10
c000d488:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d48b:	3c 60                	cmp    al,0x60
c000d48d:	7e 03                	jle    c000d492 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d48f:	83 e8 20             	sub    eax,0x20
c000d492:	88 04 24             	mov    BYTE PTR [esp],al
c000d495:	88 03                	mov    BYTE PTR [ebx],al
c000d497:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d49e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4a4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4a8:	bf 03 00 00 00       	mov    edi,0x3
c000d4ad:	b8 03 00 00 00       	mov    eax,0x3
c000d4b2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4b5:	84 d2                	test   dl,dl
c000d4b7:	0f 84 91 00 00 00    	je     c000d54e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4bd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4c0:	80 fa 5c             	cmp    dl,0x5c
c000d4c3:	74 05                	je     c000d4ca <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4c5:	80 fa 2f             	cmp    dl,0x2f
c000d4c8:	75 12                	jne    c000d4dc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4ca:	89 c5                	mov    ebp,eax
c000d4cc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4d1:	74 09                	je     c000d4dc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4d3:	40                   	inc    eax
c000d4d4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4d8:	89 cf                	mov    edi,ecx
c000d4da:	eb d6                	jmp    c000d4b2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4dc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d4e1:	75 5b                	jne    c000d53e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4e3:	80 fa 2e             	cmp    dl,0x2e
c000d4e6:	75 56                	jne    c000d53e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d4e8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d4ec:	74 19                	je     c000d507 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d4ee:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d4f3:	74 53                	je     c000d548 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d4f5:	89 f9                	mov    ecx,edi
c000d4f7:	41                   	inc    ecx
c000d4f8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d4fb:	80 fa 2f             	cmp    dl,0x2f
c000d4fe:	74 f7                	je     c000d4f7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d500:	80 fa 5c             	cmp    dl,0x5c
c000d503:	74 f2                	je     c000d4f7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d505:	eb d1                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d507:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d50c:	74 3a                	je     c000d548 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d50e:	83 f8 03             	cmp    eax,0x3
c000d511:	74 c5                	je     c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d513:	41                   	inc    ecx
c000d514:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d517:	80 fa 2f             	cmp    dl,0x2f
c000d51a:	74 f7                	je     c000d513 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d51c:	80 fa 5c             	cmp    dl,0x5c
c000d51f:	74 f2                	je     c000d513 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d521:	48                   	dec    eax
c000d522:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d526:	75 06                	jne    c000d52e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d528:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d52c:	eb f3                	jmp    c000d521 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d52e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d532:	74 07                	je     c000d53b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d534:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d538:	48                   	dec    eax
c000d539:	eb f3                	jmp    c000d52e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d53b:	40                   	inc    eax
c000d53c:	eb 9a                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d53e:	80 fa 2f             	cmp    dl,0x2f
c000d541:	74 95                	je     c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d543:	80 fa 5c             	cmp    dl,0x5c
c000d546:	74 90                	je     c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d548:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d54b:	40                   	inc    eax
c000d54c:	eb 8a                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d54e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d552:	83 ec 0c             	sub    esp,0xc
c000d555:	53                   	push   ebx
c000d556:	e8 3d 31 ff ff       	call   c0000698 <strlen>
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d563:	75 26                	jne    c000d58b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d565:	83 ec 0c             	sub    esp,0xc
c000d568:	53                   	push   ebx
c000d569:	e8 2a 31 ff ff       	call   c0000698 <strlen>
c000d56e:	83 c4 10             	add    esp,0x10
c000d571:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d576:	74 26                	je     c000d59e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d578:	83 ec 0c             	sub    esp,0xc
c000d57b:	53                   	push   ebx
c000d57c:	e8 17 31 ff ff       	call   c0000698 <strlen>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d589:	eb c7                	jmp    c000d552 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d58b:	83 ec 0c             	sub    esp,0xc
c000d58e:	53                   	push   ebx
c000d58f:	e8 04 31 ff ff       	call   c0000698 <strlen>
c000d594:	83 c4 10             	add    esp,0x10
c000d597:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d59c:	74 c7                	je     c000d565 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d59e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5a4:	5b                   	pop    ebx
c000d5a5:	5e                   	pop    esi
c000d5a6:	5f                   	pop    edi
c000d5a7:	5d                   	pop    ebp
c000d5a8:	c3                   	ret    
c000d5a9:	90                   	nop

c000d5aa <File::File(char const*, Process*)>:
c000d5aa:	83 ec 0c             	sub    esp,0xc
c000d5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b1:	83 ec 08             	sub    esp,0x8
c000d5b4:	6a 00                	push   0x0
c000d5b6:	50                   	push   eax
c000d5b7:	e8 1a e3 ff ff       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000d5bc:	83 c4 10             	add    esp,0x10
c000d5bf:	ba 7c 52 02 c0       	mov    edx,0xc002527c
c000d5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c8:	89 10                	mov    DWORD PTR [eax],edx
c000d5ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	83 c0 0d             	add    eax,0xd
c000d5db:	83 ec 04             	sub    esp,0x4
c000d5de:	52                   	push   edx
c000d5df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e3:	50                   	push   eax
c000d5e4:	e8 17 fe ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d5f3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d604:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d60c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d612:	0f b6 c0             	movzx  eax,al
c000d615:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000d61c:	85 c0                	test   eax,eax
c000d61e:	74 5e                	je     c000d67e <File::File(char const*, Process*)+0xd4>
c000d620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d624:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d62a:	0f b6 c0             	movzx  eax,al
c000d62d:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000d634:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d63a:	85 c0                	test   eax,eax
c000d63c:	75 40                	jne    c000d67e <File::File(char const*, Process*)+0xd4>
c000d63e:	83 ec 0c             	sub    esp,0xc
c000d641:	68 b8 51 02 c0       	push   0xc00251b8
c000d646:	e8 f4 f9 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000d64b:	83 c4 10             	add    esp,0x10
c000d64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d652:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d658:	0f b6 c0             	movzx  eax,al
c000d65b:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000d662:	83 ec 0c             	sub    esp,0xc
c000d665:	50                   	push   eax
c000d666:	e8 2b 31 00 00       	call   c0010796 <LogicalDisk::mount()>
c000d66b:	83 c4 10             	add    esp,0x10
c000d66e:	83 ec 0c             	sub    esp,0xc
c000d671:	68 35 75 02 c0       	push   0xc0027535
c000d676:	e8 c4 f9 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	90                   	nop
c000d67f:	83 c4 0c             	add    esp,0xc
c000d682:	c3                   	ret    
c000d683:	90                   	nop

c000d684 <File::open(FileOpenMode)>:
c000d684:	53                   	push   ebx
c000d685:	b8 0b 00 00 00       	mov    eax,0xb
c000d68a:	83 ec 08             	sub    esp,0x8
c000d68d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d691:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d698:	80 fa 19             	cmp    dl,0x19
c000d69b:	77 40                	ja     c000d6dd <File::open(FileOpenMode)+0x59>
c000d69d:	8b 14 95 20 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fe0]
c000d6a4:	85 d2                	test   edx,edx
c000d6a6:	74 35                	je     c000d6dd <File::open(FileOpenMode)+0x59>
c000d6a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6ae:	85 d2                	test   edx,edx
c000d6b0:	74 2b                	je     c000d6dd <File::open(FileOpenMode)+0x59>
c000d6b2:	b8 06 00 00 00       	mov    eax,0x6
c000d6b7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6bb:	75 20                	jne    c000d6dd <File::open(FileOpenMode)+0x59>
c000d6bd:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6bf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c9:	51                   	push   ecx
c000d6ca:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6cd:	51                   	push   ecx
c000d6ce:	52                   	push   edx
c000d6cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6d2:	83 c4 10             	add    esp,0x10
c000d6d5:	85 c0                	test   eax,eax
c000d6d7:	75 04                	jne    c000d6dd <File::open(FileOpenMode)+0x59>
c000d6d9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6dd:	83 c4 08             	add    esp,0x8
c000d6e0:	5b                   	pop    ebx
c000d6e1:	c3                   	ret    

c000d6e2 <File::close()>:
c000d6e2:	53                   	push   ebx
c000d6e3:	b8 0b 00 00 00       	mov    eax,0xb
c000d6e8:	83 ec 08             	sub    esp,0x8
c000d6eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d6ef:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6f6:	80 fa 19             	cmp    dl,0x19
c000d6f9:	77 41                	ja     c000d73c <File::close()+0x5a>
c000d6fb:	8b 1c 95 20 90 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6fe0]
c000d702:	85 db                	test   ebx,ebx
c000d704:	74 36                	je     c000d73c <File::close()+0x5a>
c000d706:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d70d:	74 2d                	je     c000d73c <File::close()+0x5a>
c000d70f:	b8 05 00 00 00       	mov    eax,0x5
c000d714:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d718:	74 22                	je     c000d73c <File::close()+0x5a>
c000d71a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d71e:	8b 04 95 20 90 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6fe0]
c000d725:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d72b:	53                   	push   ebx
c000d72c:	53                   	push   ebx
c000d72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d72f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d735:	50                   	push   eax
c000d736:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d739:	83 c4 10             	add    esp,0x10
c000d73c:	83 c4 08             	add    esp,0x8
c000d73f:	5b                   	pop    ebx
c000d740:	c3                   	ret    
c000d741:	90                   	nop

c000d742 <File::seek(unsigned long long)>:
c000d742:	56                   	push   esi
c000d743:	53                   	push   ebx
c000d744:	b8 0b 00 00 00       	mov    eax,0xb
c000d749:	51                   	push   ecx
c000d74a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d74e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d752:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d759:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d75d:	80 fa 19             	cmp    dl,0x19
c000d760:	77 31                	ja     c000d793 <File::seek(unsigned long long)+0x51>
c000d762:	8b 14 95 20 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fe0]
c000d769:	85 d2                	test   edx,edx
c000d76b:	74 26                	je     c000d793 <File::seek(unsigned long long)+0x51>
c000d76d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d773:	85 d2                	test   edx,edx
c000d775:	74 1c                	je     c000d793 <File::seek(unsigned long long)+0x51>
c000d777:	b8 05 00 00 00       	mov    eax,0x5
c000d77c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d780:	74 11                	je     c000d793 <File::seek(unsigned long long)+0x51>
c000d782:	8b 02                	mov    eax,DWORD PTR [edx]
c000d784:	53                   	push   ebx
c000d785:	51                   	push   ecx
c000d786:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d78c:	52                   	push   edx
c000d78d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	5a                   	pop    edx
c000d794:	5b                   	pop    ebx
c000d795:	5e                   	pop    esi
c000d796:	c3                   	ret    
c000d797:	90                   	nop

c000d798 <File::tell(unsigned long long*)>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	b8 0b 00 00 00       	mov    eax,0xb
c000d7a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7a4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7ab:	80 fa 19             	cmp    dl,0x19
c000d7ae:	77 34                	ja     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7b0:	8b 14 95 20 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fe0]
c000d7b7:	85 d2                	test   edx,edx
c000d7b9:	74 29                	je     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7bb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7c1:	85 d2                	test   edx,edx
c000d7c3:	74 1f                	je     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7c5:	b8 05 00 00 00       	mov    eax,0x5
c000d7ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7ce:	74 14                	je     c000d7e4 <File::tell(unsigned long long*)+0x4c>
c000d7d0:	50                   	push   eax
c000d7d1:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7dd:	52                   	push   edx
c000d7de:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	83 c4 0c             	add    esp,0xc
c000d7e7:	c3                   	ret    

c000d7e8 <File::rewind()>:
c000d7e8:	83 ec 10             	sub    esp,0x10
c000d7eb:	6a 00                	push   0x0
c000d7ed:	6a 00                	push   0x0
c000d7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f3:	e8 4a ff ff ff       	call   c000d742 <File::seek(unsigned long long)>
c000d7f8:	83 c4 1c             	add    esp,0x1c
c000d7fb:	c3                   	ret    

c000d7fc <File::unlink()>:
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	b8 0b 00 00 00       	mov    eax,0xb
c000d804:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d808:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d80f:	80 f9 19             	cmp    cl,0x19
c000d812:	77 2f                	ja     c000d843 <File::unlink()+0x47>
c000d814:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000d81b:	85 c9                	test   ecx,ecx
c000d81d:	74 24                	je     c000d843 <File::unlink()+0x47>
c000d81f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d825:	85 c9                	test   ecx,ecx
c000d827:	74 1a                	je     c000d843 <File::unlink()+0x47>
c000d829:	b8 06 00 00 00       	mov    eax,0x6
c000d82e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d832:	75 0f                	jne    c000d843 <File::unlink()+0x47>
c000d834:	83 c2 0d             	add    edx,0xd
c000d837:	50                   	push   eax
c000d838:	50                   	push   eax
c000d839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d83b:	52                   	push   edx
c000d83c:	51                   	push   ecx
c000d83d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d840:	83 c4 10             	add    esp,0x10
c000d843:	83 c4 0c             	add    esp,0xc
c000d846:	c3                   	ret    
c000d847:	90                   	nop

c000d848 <File::rename(char const*)>:
c000d848:	83 ec 0c             	sub    esp,0xc
c000d84b:	b8 0b 00 00 00       	mov    eax,0xb
c000d850:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d85b:	80 f9 19             	cmp    cl,0x19
c000d85e:	77 32                	ja     c000d892 <File::rename(char const*)+0x4a>
c000d860:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000d867:	85 c9                	test   ecx,ecx
c000d869:	74 27                	je     c000d892 <File::rename(char const*)+0x4a>
c000d86b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d871:	85 c9                	test   ecx,ecx
c000d873:	74 1d                	je     c000d892 <File::rename(char const*)+0x4a>
c000d875:	b8 06 00 00 00       	mov    eax,0x6
c000d87a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d87e:	75 12                	jne    c000d892 <File::rename(char const*)+0x4a>
c000d880:	83 c2 0d             	add    edx,0xd
c000d883:	50                   	push   eax
c000d884:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d886:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d88a:	52                   	push   edx
c000d88b:	51                   	push   ecx
c000d88c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d88f:	83 c4 10             	add    esp,0x10
c000d892:	83 c4 0c             	add    esp,0xc
c000d895:	c3                   	ret    

c000d896 <File::chfatattr(unsigned char, unsigned char)>:
c000d896:	57                   	push   edi
c000d897:	b8 0b 00 00 00       	mov    eax,0xb
c000d89c:	56                   	push   esi
c000d89d:	53                   	push   ebx
c000d89e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8b1:	80 f9 19             	cmp    cl,0x19
c000d8b4:	77 37                	ja     c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8b6:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000d8bd:	85 c9                	test   ecx,ecx
c000d8bf:	74 2c                	je     c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8c1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8c7:	85 c9                	test   ecx,ecx
c000d8c9:	74 22                	je     c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8cb:	b8 06 00 00 00       	mov    eax,0x6
c000d8d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8d4:	75 17                	jne    c000d8ed <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8d8:	89 f0                	mov    eax,esi
c000d8da:	83 c2 0d             	add    edx,0xd
c000d8dd:	0f b6 f0             	movzx  esi,al
c000d8e0:	0f b6 db             	movzx  ebx,bl
c000d8e3:	56                   	push   esi
c000d8e4:	53                   	push   ebx
c000d8e5:	52                   	push   edx
c000d8e6:	51                   	push   ecx
c000d8e7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	5b                   	pop    ebx
c000d8ee:	5e                   	pop    esi
c000d8ef:	5f                   	pop    edi
c000d8f0:	c3                   	ret    
c000d8f1:	90                   	nop

c000d8f2 <File::exists()>:
c000d8f2:	83 ec 0c             	sub    esp,0xc
c000d8f5:	31 c0                	xor    eax,eax
c000d8f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d902:	80 f9 19             	cmp    cl,0x19
c000d905:	77 24                	ja     c000d92b <File::exists()+0x39>
c000d907:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000d90e:	85 c9                	test   ecx,ecx
c000d910:	74 19                	je     c000d92b <File::exists()+0x39>
c000d912:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d918:	85 c9                	test   ecx,ecx
c000d91a:	74 0f                	je     c000d92b <File::exists()+0x39>
c000d91c:	83 c2 0d             	add    edx,0xd
c000d91f:	50                   	push   eax
c000d920:	50                   	push   eax
c000d921:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d923:	52                   	push   edx
c000d924:	51                   	push   ecx
c000d925:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	83 c4 0c             	add    esp,0xc
c000d92e:	c3                   	ret    
c000d92f:	90                   	nop

c000d930 <File::stat(unsigned long long*, bool*)>:
c000d930:	56                   	push   esi
c000d931:	53                   	push   ebx
c000d932:	50                   	push   eax
c000d933:	b8 0b 00 00 00       	mov    eax,0xb
c000d938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d93c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d940:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d947:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d94b:	80 f9 19             	cmp    cl,0x19
c000d94e:	77 3d                	ja     c000d98d <File::stat(unsigned long long*, bool*)+0x5d>
c000d950:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000d957:	85 c9                	test   ecx,ecx
c000d959:	74 32                	je     c000d98d <File::stat(unsigned long long*, bool*)+0x5d>
c000d95b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d961:	85 c9                	test   ecx,ecx
c000d963:	74 28                	je     c000d98d <File::stat(unsigned long long*, bool*)+0x5d>
c000d965:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d967:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d96b:	74 13                	je     c000d980 <File::stat(unsigned long long*, bool*)+0x50>
c000d96d:	83 ec 04             	sub    esp,0x4
c000d970:	56                   	push   esi
c000d971:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d977:	51                   	push   ecx
c000d978:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d97b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d97e:	eb 0a                	jmp    c000d98a <File::stat(unsigned long long*, bool*)+0x5a>
c000d980:	53                   	push   ebx
c000d981:	83 c2 0d             	add    edx,0xd
c000d984:	56                   	push   esi
c000d985:	52                   	push   edx
c000d986:	51                   	push   ecx
c000d987:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d98a:	83 c4 10             	add    esp,0x10
c000d98d:	5a                   	pop    edx
c000d98e:	5b                   	pop    ebx
c000d98f:	5e                   	pop    esi
c000d990:	c3                   	ret    

c000d991 <Fs::setcwd(Process*, char*)>:
c000d991:	55                   	push   ebp
c000d992:	57                   	push   edi
c000d993:	56                   	push   esi
c000d994:	53                   	push   ebx
c000d995:	81 ec 20 02 00 00    	sub    esp,0x220
c000d99b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9a2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9a8:	57                   	push   edi
c000d9a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9b0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9b4:	56                   	push   esi
c000d9b5:	e8 46 fa ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9ba:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9bd:	e8 d6 2c ff ff       	call   c0000698 <strlen>
c000d9c2:	83 c4 10             	add    esp,0x10
c000d9c5:	83 f8 02             	cmp    eax,0x2
c000d9c8:	77 15                	ja     c000d9df <Fs::setcwd(Process*, char*)+0x4e>
c000d9ca:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9cf:	83 eb 41             	sub    ebx,0x41
c000d9d2:	8b 04 9d 20 90 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6fe0]
c000d9d9:	85 c0                	test   eax,eax
c000d9db:	75 1c                	jne    c000d9f9 <Fs::setcwd(Process*, char*)+0x68>
c000d9dd:	eb 4c                	jmp    c000da2b <Fs::setcwd(Process*, char*)+0x9a>
c000d9df:	83 ec 0c             	sub    esp,0xc
c000d9e2:	56                   	push   esi
c000d9e3:	e8 b0 2c ff ff       	call   c0000698 <strlen>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	83 f8 03             	cmp    eax,0x3
c000d9ee:	75 74                	jne    c000da64 <Fs::setcwd(Process*, char*)+0xd3>
c000d9f0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d9f5:	75 6d                	jne    c000da64 <Fs::setcwd(Process*, char*)+0xd3>
c000d9f7:	eb d1                	jmp    c000d9ca <Fs::setcwd(Process*, char*)+0x39>
c000d9f9:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da00:	75 29                	jne    c000da2b <Fs::setcwd(Process*, char*)+0x9a>
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	68 90 51 02 c0       	push   0xc0025190
c000da0a:	e8 30 f6 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000da0f:	5a                   	pop    edx
c000da10:	ff 34 9d 20 90 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6fe0]
c000da17:	e8 7a 2d 00 00       	call   c0010796 <LogicalDisk::mount()>
c000da1c:	c7 04 24 35 75 02 c0 	mov    DWORD PTR [esp],0xc0027535
c000da23:	e8 17 f6 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000da28:	83 c4 10             	add    esp,0x10
c000da2b:	b8 03 00 00 00       	mov    eax,0x3
c000da30:	83 fb 19             	cmp    ebx,0x19
c000da33:	0f 87 c6 00 00 00    	ja     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000da39:	8b 14 9d 20 90 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6fe0]
c000da40:	b8 05 00 00 00       	mov    eax,0x5
c000da45:	85 d2                	test   edx,edx
c000da47:	0f 84 b2 00 00 00    	je     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000da4d:	b8 06 00 00 00       	mov    eax,0x6
c000da52:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da59:	0f 85 92 00 00 00    	jne    c000daf1 <Fs::setcwd(Process*, char*)+0x160>
c000da5f:	e9 9b 00 00 00       	jmp    c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000da64:	83 ec 0c             	sub    esp,0xc
c000da67:	68 14 01 00 00       	push   0x114
c000da6c:	e8 e2 c2 ff ff       	call   c0009d53 <malloc>
c000da71:	83 c4 0c             	add    esp,0xc
c000da74:	89 c3                	mov    ebx,eax
c000da76:	55                   	push   ebp
c000da77:	56                   	push   esi
c000da78:	50                   	push   eax
c000da79:	e8 2c fb ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c000da7e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da83:	83 c4 0c             	add    esp,0xc
c000da86:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da8a:	50                   	push   eax
c000da8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da8f:	50                   	push   eax
c000da90:	53                   	push   ebx
c000da91:	e8 9a fe ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c000da96:	83 c4 10             	add    esp,0x10
c000da99:	83 f8 02             	cmp    eax,0x2
c000da9c:	74 04                	je     c000daa2 <Fs::setcwd(Process*, char*)+0x111>
c000da9e:	85 c0                	test   eax,eax
c000daa0:	74 1c                	je     c000dabe <Fs::setcwd(Process*, char*)+0x12d>
c000daa2:	b8 01 00 00 00       	mov    eax,0x1
c000daa7:	85 db                	test   ebx,ebx
c000daa9:	74 54                	je     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000daab:	83 ec 0c             	sub    esp,0xc
c000daae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dab0:	53                   	push   ebx
c000dab1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dab4:	83 c4 10             	add    esp,0x10
c000dab7:	b8 01 00 00 00       	mov    eax,0x1
c000dabc:	eb 41                	jmp    c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000dabe:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dac3:	75 1c                	jne    c000dae1 <Fs::setcwd(Process*, char*)+0x150>
c000dac5:	b8 02 00 00 00       	mov    eax,0x2
c000daca:	85 db                	test   ebx,ebx
c000dacc:	74 31                	je     c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000dace:	83 ec 0c             	sub    esp,0xc
c000dad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad3:	53                   	push   ebx
c000dad4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	b8 02 00 00 00       	mov    eax,0x2
c000dadf:	eb 1e                	jmp    c000daff <Fs::setcwd(Process*, char*)+0x16e>
c000dae1:	85 db                	test   ebx,ebx
c000dae3:	74 0c                	je     c000daf1 <Fs::setcwd(Process*, char*)+0x160>
c000dae5:	83 ec 0c             	sub    esp,0xc
c000dae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daea:	53                   	push   ebx
c000daeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daee:	83 c4 10             	add    esp,0x10
c000daf1:	50                   	push   eax
c000daf2:	50                   	push   eax
c000daf3:	56                   	push   esi
c000daf4:	57                   	push   edi
c000daf5:	e8 3e 2c ff ff       	call   c0000738 <strcpy>
c000dafa:	83 c4 10             	add    esp,0x10
c000dafd:	31 c0                	xor    eax,eax
c000daff:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db05:	5b                   	pop    ebx
c000db06:	5e                   	pop    esi
c000db07:	5f                   	pop    edi
c000db08:	5d                   	pop    ebp
c000db09:	c3                   	ret    

c000db0a <Directory::Directory(char const*, Process*)>:
c000db0a:	83 ec 0c             	sub    esp,0xc
c000db0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db11:	83 ec 08             	sub    esp,0x8
c000db14:	6a 00                	push   0x0
c000db16:	50                   	push   eax
c000db17:	e8 ba dd ff ff       	call   c000b8d6 <UnixFile::UnixFile(int)>
c000db1c:	83 c4 10             	add    esp,0x10
c000db1f:	ba 98 52 02 c0       	mov    edx,0xc0025298
c000db24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db28:	89 10                	mov    DWORD PTR [eax],edx
c000db2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	83 c0 0d             	add    eax,0xd
c000db3b:	83 ec 04             	sub    esp,0x4
c000db3e:	52                   	push   edx
c000db3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db43:	50                   	push   eax
c000db44:	e8 b7 f8 ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db50:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db53:	8d 50 bf             	lea    edx,[eax-0x41]
c000db56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db64:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db72:	0f b6 c0             	movzx  eax,al
c000db75:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000db7c:	85 c0                	test   eax,eax
c000db7e:	74 5e                	je     c000dbde <Directory::Directory(char const*, Process*)+0xd4>
c000db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db84:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db8a:	0f b6 c0             	movzx  eax,al
c000db8d:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000db94:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db9a:	85 c0                	test   eax,eax
c000db9c:	75 40                	jne    c000dbde <Directory::Directory(char const*, Process*)+0xd4>
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	68 e0 51 02 c0       	push   0xc00251e0
c000dba6:	e8 94 f4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbb8:	0f b6 c0             	movzx  eax,al
c000dbbb:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c000dbc2:	83 ec 0c             	sub    esp,0xc
c000dbc5:	50                   	push   eax
c000dbc6:	e8 cb 2b 00 00       	call   c0010796 <LogicalDisk::mount()>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	68 35 75 02 c0       	push   0xc0027535
c000dbd6:	e8 64 f4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000dbdb:	83 c4 10             	add    esp,0x10
c000dbde:	90                   	nop
c000dbdf:	83 c4 0c             	add    esp,0xc
c000dbe2:	c3                   	ret    
c000dbe3:	90                   	nop

c000dbe4 <Directory::open()>:
c000dbe4:	53                   	push   ebx
c000dbe5:	b8 0b 00 00 00       	mov    eax,0xb
c000dbea:	83 ec 08             	sub    esp,0x8
c000dbed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbf1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dbf8:	80 fa 19             	cmp    dl,0x19
c000dbfb:	77 3d                	ja     c000dc3a <Directory::open()+0x56>
c000dbfd:	8b 14 95 20 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fe0]
c000dc04:	85 d2                	test   edx,edx
c000dc06:	74 32                	je     c000dc3a <Directory::open()+0x56>
c000dc08:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc0e:	85 d2                	test   edx,edx
c000dc10:	74 28                	je     c000dc3a <Directory::open()+0x56>
c000dc12:	b8 06 00 00 00       	mov    eax,0x6
c000dc17:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc1b:	75 1d                	jne    c000dc3a <Directory::open()+0x56>
c000dc1d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc23:	50                   	push   eax
c000dc24:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc26:	51                   	push   ecx
c000dc27:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc2a:	51                   	push   ecx
c000dc2b:	52                   	push   edx
c000dc2c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	85 c0                	test   eax,eax
c000dc34:	75 04                	jne    c000dc3a <Directory::open()+0x56>
c000dc36:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc3a:	83 c4 08             	add    esp,0x8
c000dc3d:	5b                   	pop    ebx
c000dc3e:	c3                   	ret    
c000dc3f:	90                   	nop

c000dc40 <Directory::close()>:
c000dc40:	53                   	push   ebx
c000dc41:	b8 0b 00 00 00       	mov    eax,0xb
c000dc46:	83 ec 08             	sub    esp,0x8
c000dc49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc4d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc54:	80 fa 19             	cmp    dl,0x19
c000dc57:	77 41                	ja     c000dc9a <Directory::close()+0x5a>
c000dc59:	8b 1c 95 20 90 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6fe0]
c000dc60:	85 db                	test   ebx,ebx
c000dc62:	74 36                	je     c000dc9a <Directory::close()+0x5a>
c000dc64:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc6b:	74 2d                	je     c000dc9a <Directory::close()+0x5a>
c000dc6d:	b8 05 00 00 00       	mov    eax,0x5
c000dc72:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc76:	74 22                	je     c000dc9a <Directory::close()+0x5a>
c000dc78:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc7c:	8b 04 95 20 90 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6fe0]
c000dc83:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc89:	53                   	push   ebx
c000dc8a:	53                   	push   ebx
c000dc8b:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc8d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc93:	50                   	push   eax
c000dc94:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	83 c4 08             	add    esp,0x8
c000dc9d:	5b                   	pop    ebx
c000dc9e:	c3                   	ret    
c000dc9f:	90                   	nop

c000dca0 <Directory::unlink()>:
c000dca0:	83 ec 0c             	sub    esp,0xc
c000dca3:	b8 0b 00 00 00       	mov    eax,0xb
c000dca8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcb3:	80 f9 19             	cmp    cl,0x19
c000dcb6:	77 2f                	ja     c000dce7 <Directory::unlink()+0x47>
c000dcb8:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000dcbf:	85 c9                	test   ecx,ecx
c000dcc1:	74 24                	je     c000dce7 <Directory::unlink()+0x47>
c000dcc3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dcc9:	85 c9                	test   ecx,ecx
c000dccb:	74 1a                	je     c000dce7 <Directory::unlink()+0x47>
c000dccd:	b8 06 00 00 00       	mov    eax,0x6
c000dcd2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcd6:	75 0f                	jne    c000dce7 <Directory::unlink()+0x47>
c000dcd8:	83 c2 0d             	add    edx,0xd
c000dcdb:	50                   	push   eax
c000dcdc:	50                   	push   eax
c000dcdd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcdf:	52                   	push   edx
c000dce0:	51                   	push   ecx
c000dce1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dce4:	83 c4 10             	add    esp,0x10
c000dce7:	83 c4 0c             	add    esp,0xc
c000dcea:	c3                   	ret    
c000dceb:	90                   	nop

c000dcec <Directory::rename(char const*)>:
c000dcec:	83 ec 0c             	sub    esp,0xc
c000dcef:	b8 0b 00 00 00       	mov    eax,0xb
c000dcf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcf8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcff:	80 f9 19             	cmp    cl,0x19
c000dd02:	77 32                	ja     c000dd36 <Directory::rename(char const*)+0x4a>
c000dd04:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000dd0b:	85 c9                	test   ecx,ecx
c000dd0d:	74 27                	je     c000dd36 <Directory::rename(char const*)+0x4a>
c000dd0f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd15:	85 c9                	test   ecx,ecx
c000dd17:	74 1d                	je     c000dd36 <Directory::rename(char const*)+0x4a>
c000dd19:	b8 06 00 00 00       	mov    eax,0x6
c000dd1e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd22:	75 12                	jne    c000dd36 <Directory::rename(char const*)+0x4a>
c000dd24:	83 c2 0d             	add    edx,0xd
c000dd27:	50                   	push   eax
c000dd28:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd2e:	52                   	push   edx
c000dd2f:	51                   	push   ecx
c000dd30:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd33:	83 c4 10             	add    esp,0x10
c000dd36:	83 c4 0c             	add    esp,0xc
c000dd39:	c3                   	ret    

c000dd3a <Directory::exists()>:
c000dd3a:	83 ec 0c             	sub    esp,0xc
c000dd3d:	31 c0                	xor    eax,eax
c000dd3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd43:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd4a:	80 f9 19             	cmp    cl,0x19
c000dd4d:	77 24                	ja     c000dd73 <Directory::exists()+0x39>
c000dd4f:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000dd56:	85 c9                	test   ecx,ecx
c000dd58:	74 19                	je     c000dd73 <Directory::exists()+0x39>
c000dd5a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd60:	85 c9                	test   ecx,ecx
c000dd62:	74 0f                	je     c000dd73 <Directory::exists()+0x39>
c000dd64:	83 c2 0d             	add    edx,0xd
c000dd67:	50                   	push   eax
c000dd68:	50                   	push   eax
c000dd69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd6b:	52                   	push   edx
c000dd6c:	51                   	push   ecx
c000dd6d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd70:	83 c4 10             	add    esp,0x10
c000dd73:	83 c4 0c             	add    esp,0xc
c000dd76:	c3                   	ret    
c000dd77:	90                   	nop

c000dd78 <Directory::read(dirent*)>:
c000dd78:	83 ec 1c             	sub    esp,0x1c
c000dd7b:	b8 0b 00 00 00       	mov    eax,0xb
c000dd80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd84:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd8b:	80 fa 19             	cmp    dl,0x19
c000dd8e:	77 30                	ja     c000ddc0 <Directory::read(dirent*)+0x48>
c000dd90:	8b 14 95 20 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fe0]
c000dd97:	85 d2                	test   edx,edx
c000dd99:	74 25                	je     c000ddc0 <Directory::read(dirent*)+0x48>
c000dd9b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dda2:	74 1c                	je     c000ddc0 <Directory::read(dirent*)+0x48>
c000dda4:	83 ec 0c             	sub    esp,0xc
c000dda7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dda9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddad:	52                   	push   edx
c000ddae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddb2:	6a 00                	push   0x0
c000ddb4:	68 10 01 00 00       	push   0x110
c000ddb9:	51                   	push   ecx
c000ddba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ddbd:	83 c4 20             	add    esp,0x20
c000ddc0:	83 c4 1c             	add    esp,0x1c
c000ddc3:	c3                   	ret    

c000ddc4 <Directory::create()>:
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	b8 0b 00 00 00       	mov    eax,0xb
c000ddcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddd0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddd7:	80 f9 19             	cmp    cl,0x19
c000ddda:	77 2f                	ja     c000de0b <Directory::create()+0x47>
c000dddc:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c000dde3:	85 c9                	test   ecx,ecx
c000dde5:	74 24                	je     c000de0b <Directory::create()+0x47>
c000dde7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dded:	85 c9                	test   ecx,ecx
c000ddef:	74 1a                	je     c000de0b <Directory::create()+0x47>
c000ddf1:	b8 06 00 00 00       	mov    eax,0x6
c000ddf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ddfa:	75 0f                	jne    c000de0b <Directory::create()+0x47>
c000ddfc:	83 c2 0d             	add    edx,0xd
c000ddff:	50                   	push   eax
c000de00:	50                   	push   eax
c000de01:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de03:	52                   	push   edx
c000de04:	51                   	push   ecx
c000de05:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de08:	83 c4 10             	add    esp,0x10
c000de0b:	83 c4 0c             	add    esp,0xc
c000de0e:	c3                   	ret    
c000de0f:	90                   	nop

c000de10 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de10:	b8 0a 00 00 00       	mov    eax,0xa
c000de15:	c3                   	ret    
c000de16:	66 90                	xchg   ax,ax

c000de18 <Bus::Bus(char const*)>:
c000de18:	83 ec 0c             	sub    esp,0xc
c000de1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de1f:	83 ec 08             	sub    esp,0x8
c000de22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de26:	50                   	push   eax
c000de27:	e8 8a 09 00 00       	call   c000e7b6 <Device::Device(char const*)>
c000de2c:	83 c4 10             	add    esp,0x10
c000de2f:	ba b4 52 02 c0       	mov    edx,0xc00252b4
c000de34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de38:	89 10                	mov    DWORD PTR [eax],edx
c000de3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de48:	90                   	nop
c000de49:	83 c4 0c             	add    esp,0xc
c000de4c:	c3                   	ret    
c000de4d:	90                   	nop
c000de4e:	66 90                	xchg   ax,ax

c000de50 <Bus::~Bus()>:
c000de50:	83 ec 0c             	sub    esp,0xc
c000de53:	ba b4 52 02 c0       	mov    edx,0xc00252b4
c000de58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de5c:	89 10                	mov    DWORD PTR [eax],edx
c000de5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de62:	83 ec 0c             	sub    esp,0xc
c000de65:	50                   	push   eax
c000de66:	e8 15 06 00 00       	call   c000e480 <Device::~Device()>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	90                   	nop
c000de6f:	83 c4 0c             	add    esp,0xc
c000de72:	c3                   	ret    
c000de73:	90                   	nop

c000de74 <Bus::~Bus()>:
c000de74:	83 ec 0c             	sub    esp,0xc
c000de77:	83 ec 0c             	sub    esp,0xc
c000de7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7e:	e8 cd ff ff ff       	call   c000de50 <Bus::~Bus()>
c000de83:	83 c4 10             	add    esp,0x10
c000de86:	83 ec 08             	sub    esp,0x8
c000de89:	68 58 01 00 00       	push   0x158
c000de8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de92:	e8 c7 f0 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	83 c4 0c             	add    esp,0xc
c000de9d:	c3                   	ret    
c000de9e:	66 90                	xchg   ax,ax

c000dea0 <Buzzer::Buzzer(char const*)>:
c000dea0:	83 ec 0c             	sub    esp,0xc
c000dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dea7:	83 ec 08             	sub    esp,0x8
c000deaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deae:	50                   	push   eax
c000deaf:	e8 02 09 00 00       	call   c000e7b6 <Device::Device(char const*)>
c000deb4:	83 c4 10             	add    esp,0x10
c000deb7:	ba e0 52 02 c0       	mov    edx,0xc00252e0
c000debc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec0:	89 10                	mov    DWORD PTR [eax],edx
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ded0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dede:	90                   	nop
c000dedf:	83 c4 0c             	add    esp,0xc
c000dee2:	c3                   	ret    
c000dee3:	90                   	nop

c000dee4 <Buzzer::~Buzzer()>:
c000dee4:	83 ec 0c             	sub    esp,0xc
c000dee7:	ba e0 52 02 c0       	mov    edx,0xc00252e0
c000deec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def0:	89 10                	mov    DWORD PTR [eax],edx
c000def2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def6:	83 ec 0c             	sub    esp,0xc
c000def9:	50                   	push   eax
c000defa:	e8 81 05 00 00       	call   c000e480 <Device::~Device()>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	90                   	nop
c000df03:	83 c4 0c             	add    esp,0xc
c000df06:	c3                   	ret    
c000df07:	90                   	nop

c000df08 <Buzzer::~Buzzer()>:
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	83 ec 0c             	sub    esp,0xc
c000df0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df12:	e8 cd ff ff ff       	call   c000dee4 <Buzzer::~Buzzer()>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	83 ec 08             	sub    esp,0x8
c000df1d:	68 5c 01 00 00       	push   0x15c
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	e8 33 f0 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	83 c4 0c             	add    esp,0xc
c000df31:	c3                   	ret    

c000df32 <Buzzer::stop()>:
c000df32:	83 ec 14             	sub    esp,0x14
c000df35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df39:	8b 10                	mov    edx,DWORD PTR [eax]
c000df3b:	6a 00                	push   0x0
c000df3d:	50                   	push   eax
c000df3e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df41:	83 c4 1c             	add    esp,0x1c
c000df44:	c3                   	ret    

c000df45 <beepThread(void*)>:
c000df45:	53                   	push   ebx
c000df46:	83 ec 08             	sub    esp,0x8
c000df49:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000df4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df52:	48                   	dec    eax
c000df53:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000df58:	75 02                	jne    c000df5c <beepThread(void*)+0x17>
c000df5a:	fb                   	sti    
c000df5b:	90                   	nop
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000df66:	50                   	push   eax
c000df67:	e8 b0 b0 00 00       	call   c001901c <milliTenthSleep(unsigned int)>
c000df6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df6f:	e8 be ff ff ff       	call   c000df32 <Buzzer::stop()>
c000df74:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000df7c:	83 c4 18             	add    esp,0x18
c000df7f:	5b                   	pop    ebx
c000df80:	e9 97 af 00 00       	jmp    c0018f1c <blockTask(TaskState)>
c000df85:	90                   	nop

c000df86 <Buzzer::beep(int, int, bool)>:
c000df86:	57                   	push   edi
c000df87:	56                   	push   esi
c000df88:	53                   	push   ebx
c000df89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df8d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df91:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000df95:	50                   	push   eax
c000df96:	50                   	push   eax
c000df97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9d:	53                   	push   ebx
c000df9e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfa1:	83 c4 10             	add    esp,0x10
c000dfa4:	89 f8                	mov    eax,edi
c000dfa6:	84 c0                	test   al,al
c000dfa8:	74 1e                	je     c000dfc8 <Buzzer::beep(int, int, bool)+0x42>
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	6b f6 0a             	imul   esi,esi,0xa
c000dfb0:	56                   	push   esi
c000dfb1:	e8 66 b0 00 00       	call   c001901c <milliTenthSleep(unsigned int)>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dfbd:	5b                   	pop    ebx
c000dfbe:	5e                   	pop    esi
c000dfbf:	5f                   	pop    edi
c000dfc0:	e9 6d ff ff ff       	jmp    c000df32 <Buzzer::stop()>
c000dfc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc8:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfce:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000dfd3:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dfdb:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dfdf:	c7 44 24 14 45 df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000df45
c000dfe7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfeb:	5b                   	pop    ebx
c000dfec:	5e                   	pop    esi
c000dfed:	5f                   	pop    edi
c000dfee:	e9 15 ab 00 00       	jmp    c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c000dff3:	90                   	nop

c000dff4 <User::loadClockSettings(int)>:
c000dff4:	53                   	push   ebx
c000dff5:	83 ec 14             	sub    esp,0x14
c000dff8:	68 14 01 00 00       	push   0x114
c000dffd:	e8 51 bd ff ff       	call   c0009d53 <malloc>
c000e002:	83 c4 0c             	add    esp,0xc
c000e005:	89 c3                	mov    ebx,eax
c000e007:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c000e00d:	68 08 53 02 c0       	push   0xc0025308
c000e012:	50                   	push   eax
c000e013:	e8 92 f5 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c000e018:	58                   	pop    eax
c000e019:	5a                   	pop    edx
c000e01a:	6a 01                	push   0x1
c000e01c:	53                   	push   ebx
c000e01d:	e8 62 f6 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c000e022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e025:	e8 b8 f6 ff ff       	call   c000d6e2 <File::close()>
c000e02a:	83 c4 10             	add    esp,0x10
c000e02d:	85 db                	test   ebx,ebx
c000e02f:	74 0f                	je     c000e040 <User::loadClockSettings(int)+0x4c>
c000e031:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e033:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e037:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e03a:	83 c4 08             	add    esp,0x8
c000e03d:	5b                   	pop    ebx
c000e03e:	ff e0                	jmp    eax
c000e040:	83 c4 08             	add    esp,0x8
c000e043:	5b                   	pop    ebx
c000e044:	c3                   	ret    
c000e045:	90                   	nop

c000e046 <Clock::Clock(char const*)>:
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04d:	83 ec 08             	sub    esp,0x8
c000e050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e054:	50                   	push   eax
c000e055:	e8 5c 07 00 00       	call   c000e7b6 <Device::Device(char const*)>
c000e05a:	83 c4 10             	add    esp,0x10
c000e05d:	ba 30 53 02 c0       	mov    edx,0xc0025330
c000e062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e066:	89 10                	mov    DWORD PTR [eax],edx
c000e068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e076:	90                   	nop
c000e077:	83 c4 0c             	add    esp,0xc
c000e07a:	c3                   	ret    
c000e07b:	90                   	nop

c000e07c <Clock::~Clock()>:
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	ba 30 53 02 c0       	mov    edx,0xc0025330
c000e084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e088:	89 10                	mov    DWORD PTR [eax],edx
c000e08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08e:	83 ec 0c             	sub    esp,0xc
c000e091:	50                   	push   eax
c000e092:	e8 e9 03 00 00       	call   c000e480 <Device::~Device()>
c000e097:	83 c4 10             	add    esp,0x10
c000e09a:	90                   	nop
c000e09b:	83 c4 0c             	add    esp,0xc
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <Clock::~Clock()>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0aa:	e8 cd ff ff ff       	call   c000e07c <Clock::~Clock()>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	83 ec 08             	sub    esp,0x8
c000e0b5:	68 58 01 00 00       	push   0x158
c000e0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0be:	e8 9b ee ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 c4 0c             	add    esp,0xc
c000e0c9:	c3                   	ret    

c000e0ca <Clock::timeInSecondsLocal()>:
c000e0ca:	53                   	push   ebx
c000e0cb:	83 ec 14             	sub    esp,0x14
c000e0ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0d4:	50                   	push   eax
c000e0d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0d8:	0f b6 0d 9c 8b 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028b9c
c000e0df:	03 0d a0 8b 02 c0    	add    ecx,DWORD PTR ds:0xc0028ba0
c000e0e5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e0eb:	89 cb                	mov    ebx,ecx
c000e0ed:	c1 fb 1f             	sar    ebx,0x1f
c000e0f0:	01 c8                	add    eax,ecx
c000e0f2:	11 da                	adc    edx,ebx
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	31 c9                	xor    ecx,ecx
c000e0f9:	80 3d 9d 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b9d,0x0
c000e100:	74 05                	je     c000e107 <Clock::timeInSecondsLocal()+0x3d>
c000e102:	b9 08 07 00 00       	mov    ecx,0x708
c000e107:	31 db                	xor    ebx,ebx
c000e109:	01 c8                	add    eax,ecx
c000e10b:	11 da                	adc    edx,ebx
c000e10d:	83 c4 08             	add    esp,0x8
c000e110:	5b                   	pop    ebx
c000e111:	c3                   	ret    

c000e112 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e112:	57                   	push   edi
c000e113:	56                   	push   esi
c000e114:	53                   	push   ebx
c000e115:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e119:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e11d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e11f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e123:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e126:	0f b6 05 9c 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028b9c
c000e12d:	03 05 a0 8b 02 c0    	add    eax,DWORD PTR ds:0xc0028ba0
c000e133:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e139:	99                   	cdq    
c000e13a:	29 c6                	sub    esi,eax
c000e13c:	19 d7                	sbb    edi,edx
c000e13e:	89 f0                	mov    eax,esi
c000e140:	89 fa                	mov    edx,edi
c000e142:	31 f6                	xor    esi,esi
c000e144:	80 3d 9d 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b9d,0x0
c000e14b:	74 05                	je     c000e152 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e14d:	be 08 07 00 00       	mov    esi,0x708
c000e152:	31 ff                	xor    edi,edi
c000e154:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e158:	29 f0                	sub    eax,esi
c000e15a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e15e:	19 fa                	sbb    edx,edi
c000e160:	89 d8                	mov    eax,ebx
c000e162:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e166:	5b                   	pop    ebx
c000e167:	5e                   	pop    esi
c000e168:	5f                   	pop    edi
c000e169:	ff e0                	jmp    eax

c000e16b <datetimeToSeconds(datetime_t)>:
c000e16b:	55                   	push   ebp
c000e16c:	57                   	push   edi
c000e16d:	56                   	push   esi
c000e16e:	53                   	push   ebx
c000e16f:	83 ec 14             	sub    esp,0x14
c000e172:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e176:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e17a:	89 d3                	mov    ebx,edx
c000e17c:	0f b6 c6             	movzx  eax,dh
c000e17f:	c1 eb 10             	shr    ebx,0x10
c000e182:	48                   	dec    eax
c000e183:	66 81 eb 6c 07       	sub    bx,0x76c
c000e188:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e18c:	0f b6 f5             	movzx  esi,ch
c000e18f:	89 cf                	mov    edi,ecx
c000e191:	6b f6 3c             	imul   esi,esi,0x3c
c000e194:	c1 ef 10             	shr    edi,0x10
c000e197:	0f b6 c9             	movzx  ecx,cl
c000e19a:	89 f8                	mov    eax,edi
c000e19c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1a2:	0f b6 f8             	movzx  edi,al
c000e1a5:	0f b6 d2             	movzx  edx,dl
c000e1a8:	01 fe                	add    esi,edi
c000e1aa:	01 f1                	add    ecx,esi
c000e1ac:	0f b7 f3             	movzx  esi,bx
c000e1af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1b3:	c1 f9 1f             	sar    ecx,0x1f
c000e1b6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e1bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e1bf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e1c4:	8b 0c 8d 80 53 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdac80]
c000e1cb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e1cf:	76 29                	jbe    c000e1fa <datetimeToSeconds(datetime_t)+0x8f>
c000e1d1:	f6 c3 03             	test   bl,0x3
c000e1d4:	75 24                	jne    c000e1fa <datetimeToSeconds(datetime_t)+0x8f>
c000e1d6:	31 d2                	xor    edx,edx
c000e1d8:	bf 64 00 00 00       	mov    edi,0x64
c000e1dd:	89 d8                	mov    eax,ebx
c000e1df:	66 f7 f7             	div    di
c000e1e2:	66 85 d2             	test   dx,dx
c000e1e5:	75 12                	jne    c000e1f9 <datetimeToSeconds(datetime_t)+0x8e>
c000e1e7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e1ed:	bf 90 01 00 00       	mov    edi,0x190
c000e1f2:	99                   	cdq    
c000e1f3:	f7 ff                	idiv   edi
c000e1f5:	85 d2                	test   edx,edx
c000e1f7:	75 01                	jne    c000e1fa <datetimeToSeconds(datetime_t)+0x8f>
c000e1f9:	41                   	inc    ecx
c000e1fa:	66 83 fb 46          	cmp    bx,0x46
c000e1fe:	76 45                	jbe    c000e245 <datetimeToSeconds(datetime_t)+0xda>
c000e200:	bb 46 00 00 00       	mov    ebx,0x46
c000e205:	bf 64 00 00 00       	mov    edi,0x64
c000e20a:	bd 90 01 00 00       	mov    ebp,0x190
c000e20f:	b8 6d 01 00 00       	mov    eax,0x16d
c000e214:	f6 c3 03             	test   bl,0x3
c000e217:	75 23                	jne    c000e23c <datetimeToSeconds(datetime_t)+0xd1>
c000e219:	89 d8                	mov    eax,ebx
c000e21b:	99                   	cdq    
c000e21c:	f7 ff                	idiv   edi
c000e21e:	b8 6e 01 00 00       	mov    eax,0x16e
c000e223:	85 d2                	test   edx,edx
c000e225:	75 15                	jne    c000e23c <datetimeToSeconds(datetime_t)+0xd1>
c000e227:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e22d:	99                   	cdq    
c000e22e:	f7 fd                	idiv   ebp
c000e230:	83 fa 01             	cmp    edx,0x1
c000e233:	19 c0                	sbb    eax,eax
c000e235:	f7 d0                	not    eax
c000e237:	05 6e 01 00 00       	add    eax,0x16e
c000e23c:	01 c1                	add    ecx,eax
c000e23e:	43                   	inc    ebx
c000e23f:	39 f3                	cmp    ebx,esi
c000e241:	7c cc                	jl     c000e20f <datetimeToSeconds(datetime_t)+0xa4>
c000e243:	eb 35                	jmp    c000e27a <datetimeToSeconds(datetime_t)+0x10f>
c000e245:	74 33                	je     c000e27a <datetimeToSeconds(datetime_t)+0x10f>
c000e247:	b8 45 00 00 00       	mov    eax,0x45
c000e24c:	89 c2                	mov    edx,eax
c000e24e:	83 e2 03             	and    edx,0x3
c000e251:	39 f0                	cmp    eax,esi
c000e253:	7e 0f                	jle    c000e264 <datetimeToSeconds(datetime_t)+0xf9>
c000e255:	83 fa 01             	cmp    edx,0x1
c000e258:	19 d2                	sbb    edx,edx
c000e25a:	48                   	dec    eax
c000e25b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e262:	eb e8                	jmp    c000e24c <datetimeToSeconds(datetime_t)+0xe1>
c000e264:	b8 6d 01 00 00       	mov    eax,0x16d
c000e269:	85 d2                	test   edx,edx
c000e26b:	75 0b                	jne    c000e278 <datetimeToSeconds(datetime_t)+0x10d>
c000e26d:	66 83 fb 01          	cmp    bx,0x1
c000e271:	19 c0                	sbb    eax,eax
c000e273:	05 6e 01 00 00       	add    eax,0x16e
c000e278:	29 c1                	sub    ecx,eax
c000e27a:	b8 80 51 01 00       	mov    eax,0x15180
c000e27f:	f7 e9                	imul   ecx
c000e281:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e285:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e289:	83 c4 14             	add    esp,0x14
c000e28c:	5b                   	pop    ebx
c000e28d:	5e                   	pop    esi
c000e28e:	5f                   	pop    edi
c000e28f:	5d                   	pop    ebp
c000e290:	c3                   	ret    
c000e291:	90                   	nop

c000e292 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e292:	57                   	push   edi
c000e293:	56                   	push   esi
c000e294:	53                   	push   ebx
c000e295:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e299:	8b 06                	mov    eax,DWORD PTR [esi]
c000e29b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e29e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2a6:	e8 c0 fe ff ff       	call   c000e16b <datetimeToSeconds(datetime_t)>
c000e2ab:	59                   	pop    ecx
c000e2ac:	0f b6 0d 9c 8b 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028b9c
c000e2b3:	5b                   	pop    ebx
c000e2b4:	03 0d a0 8b 02 c0    	add    ecx,DWORD PTR ds:0xc0028ba0
c000e2ba:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2c0:	89 cb                	mov    ebx,ecx
c000e2c2:	c1 fb 1f             	sar    ebx,0x1f
c000e2c5:	29 c8                	sub    eax,ecx
c000e2c7:	19 da                	sbb    edx,ebx
c000e2c9:	31 c9                	xor    ecx,ecx
c000e2cb:	80 3d 9d 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b9d,0x0
c000e2d2:	74 05                	je     c000e2d9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e2d4:	b9 08 07 00 00       	mov    ecx,0x708
c000e2d9:	31 db                	xor    ebx,ebx
c000e2db:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e2df:	29 c8                	sub    eax,ecx
c000e2e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e2e5:	19 da                	sbb    edx,ebx
c000e2e7:	89 f8                	mov    eax,edi
c000e2e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e2ed:	5b                   	pop    ebx
c000e2ee:	5e                   	pop    esi
c000e2ef:	5f                   	pop    edi
c000e2f0:	ff e0                	jmp    eax

c000e2f2 <secondsToDatetime(unsigned long long)>:
c000e2f2:	55                   	push   ebp
c000e2f3:	57                   	push   edi
c000e2f4:	56                   	push   esi
c000e2f5:	53                   	push   ebx
c000e2f6:	83 ec 1c             	sub    esp,0x1c
c000e2f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e2fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e301:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e305:	6a 00                	push   0x0
c000e307:	68 80 51 01 00       	push   0x15180
c000e30c:	55                   	push   ebp
c000e30d:	57                   	push   edi
c000e30e:	e8 f9 4a 01 00       	call   c0022e0c <__udivdi3>
c000e313:	83 c4 10             	add    esp,0x10
c000e316:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e31c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e320:	6a 00                	push   0x0
c000e322:	68 80 51 01 00       	push   0x15180
c000e327:	55                   	push   ebp
c000e328:	57                   	push   edi
c000e329:	bf 10 0e 00 00       	mov    edi,0xe10
c000e32e:	e8 d9 4b 01 00       	call   c0022f0c <__umoddi3>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	99                   	cdq    
c000e337:	f7 ff                	idiv   edi
c000e339:	bf 3c 00 00 00       	mov    edi,0x3c
c000e33e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e341:	89 d0                	mov    eax,edx
c000e343:	99                   	cdq    
c000e344:	f7 ff                	idiv   edi
c000e346:	85 db                	test   ebx,ebx
c000e348:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e34b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e34e:	79 11                	jns    c000e361 <secondsToDatetime(unsigned long long)+0x6f>
c000e350:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e354:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e35a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e35f:	eb 07                	jmp    c000e368 <secondsToDatetime(unsigned long long)+0x76>
c000e361:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e366:	89 d8                	mov    eax,ebx
c000e368:	bf b4 05 00 00       	mov    edi,0x5b4
c000e36d:	99                   	cdq    
c000e36e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e373:	f7 f9                	idiv   ecx
c000e375:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e37a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e37e:	31 d2                	xor    edx,edx
c000e380:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e388:	01 c3                	add    ebx,eax
c000e38a:	89 d8                	mov    eax,ebx
c000e38c:	f7 f1                	div    ecx
c000e38e:	31 d2                	xor    edx,edx
c000e390:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e393:	89 d8                	mov    eax,ebx
c000e395:	f7 f7                	div    edi
c000e397:	31 d2                	xor    edx,edx
c000e399:	29 c1                	sub    ecx,eax
c000e39b:	89 d8                	mov    eax,ebx
c000e39d:	f7 f5                	div    ebp
c000e39f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e3a4:	29 c1                	sub    ecx,eax
c000e3a6:	31 d2                	xor    edx,edx
c000e3a8:	89 c8                	mov    eax,ecx
c000e3aa:	f7 f5                	div    ebp
c000e3ac:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e3b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3b5:	31 d2                	xor    edx,edx
c000e3b7:	89 c8                	mov    eax,ecx
c000e3b9:	f7 f5                	div    ebp
c000e3bb:	31 d2                	xor    edx,edx
c000e3bd:	01 c3                	add    ebx,eax
c000e3bf:	89 c8                	mov    eax,ecx
c000e3c1:	f7 f7                	div    edi
c000e3c3:	bf 99 00 00 00       	mov    edi,0x99
c000e3c8:	29 c3                	sub    ebx,eax
c000e3ca:	31 d2                	xor    edx,edx
c000e3cc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e3d4:	29 c3                	sub    ebx,eax
c000e3d6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3d9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e3dc:	bb 05 00 00 00       	mov    ebx,0x5
c000e3e1:	83 c1 02             	add    ecx,0x2
c000e3e4:	89 c8                	mov    eax,ecx
c000e3e6:	f7 f7                	div    edi
c000e3e8:	31 d2                	xor    edx,edx
c000e3ea:	89 c7                	mov    edi,eax
c000e3ec:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e3f2:	83 c0 02             	add    eax,0x2
c000e3f5:	f7 f3                	div    ebx
c000e3f7:	89 eb                	mov    ebx,ebp
c000e3f9:	29 c3                	sub    ebx,eax
c000e3fb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e401:	88 1e                	mov    BYTE PTR [esi],bl
c000e403:	19 c0                	sbb    eax,eax
c000e405:	31 d2                	xor    edx,edx
c000e407:	83 e0 0c             	and    eax,0xc
c000e40a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e40e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e416:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e41a:	83 f9 01             	cmp    ecx,0x1
c000e41d:	0f 96 c2             	setbe  dl
c000e420:	41                   	inc    ecx
c000e421:	01 d0                	add    eax,edx
c000e423:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e426:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e42a:	83 c4 1c             	add    esp,0x1c
c000e42d:	89 f0                	mov    eax,esi
c000e42f:	5b                   	pop    ebx
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	5d                   	pop    ebp
c000e433:	c2 04 00             	ret    0x4

c000e436 <Clock::timeInDatetimeLocal()>:
c000e436:	53                   	push   ebx
c000e437:	83 ec 14             	sub    esp,0x14
c000e43a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e43e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e442:	e8 83 fc ff ff       	call   c000e0ca <Clock::timeInSecondsLocal()>
c000e447:	83 c4 0c             	add    esp,0xc
c000e44a:	52                   	push   edx
c000e44b:	50                   	push   eax
c000e44c:	53                   	push   ebx
c000e44d:	e8 a0 fe ff ff       	call   c000e2f2 <secondsToDatetime(unsigned long long)>
c000e452:	89 d8                	mov    eax,ebx
c000e454:	83 c4 14             	add    esp,0x14
c000e457:	5b                   	pop    ebx
c000e458:	c2 04 00             	ret    0x4
c000e45b:	90                   	nop

c000e45c <Device::hibernate()>:
c000e45c:	c3                   	ret    
c000e45d:	90                   	nop

c000e45e <Device::wake()>:
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <Device::detect()>:
c000e460:	c3                   	ret    
c000e461:	90                   	nop

c000e462 <Device::disableLegacy()>:
c000e462:	c3                   	ret    
c000e463:	90                   	nop

c000e464 <Device::powerSaving(PowerSavingLevel)>:
c000e464:	c3                   	ret    
c000e465:	90                   	nop

c000e466 <DriverlessDevice::close(int, int, void*)>:
c000e466:	31 c0                	xor    eax,eax
c000e468:	c3                   	ret    
c000e469:	90                   	nop

c000e46a <DriverlessDevice::detect()>:
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <DriverlessDevice::open(int, int, void*)>:
c000e46c:	83 ec 18             	sub    esp,0x18
c000e46f:	68 b0 53 02 c0       	push   0xc00253b0
c000e474:	e8 7c 6b 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000e479:	83 c8 ff             	or     eax,0xffffffff
c000e47c:	83 c4 1c             	add    esp,0x1c
c000e47f:	c3                   	ret    

c000e480 <Device::~Device()>:
c000e480:	ba 10 54 02 c0       	mov    edx,0xc0025410
c000e485:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e489:	89 10                	mov    DWORD PTR [eax],edx
c000e48b:	90                   	nop
c000e48c:	c3                   	ret    
c000e48d:	90                   	nop

c000e48e <Device::~Device()>:
c000e48e:	83 ec 0c             	sub    esp,0xc
c000e491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e495:	e8 e6 ff ff ff       	call   c000e480 <Device::~Device()>
c000e49a:	83 c4 04             	add    esp,0x4
c000e49d:	83 ec 08             	sub    esp,0x8
c000e4a0:	68 58 01 00 00       	push   0x158
c000e4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4a9:	e8 b0 ea ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000e4ae:	83 c4 10             	add    esp,0x10
c000e4b1:	83 c4 0c             	add    esp,0xc
c000e4b4:	c3                   	ret    
c000e4b5:	90                   	nop

c000e4b6 <Device::findAndLoadDriver()>:
c000e4b6:	c7 44 24 04 ce 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc00253ce
c000e4be:	e9 7c eb ff ff       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c000e4c3:	90                   	nop

c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e4c4:	57                   	push   edi
c000e4c5:	b9 09 00 00 00       	mov    ecx,0x9
c000e4ca:	56                   	push   esi
c000e4cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e4d3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e4dd:	81 c7 18 01 00 00    	add    edi,0x118
c000e4e3:	fc                   	cld    
c000e4e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e4e6:	5e                   	pop    esi
c000e4e7:	5f                   	pop    edi
c000e4e8:	c3                   	ret    
c000e4e9:	90                   	nop

c000e4ea <Device::preOpenACPI(void*, char*, char*)>:
c000e4ea:	57                   	push   edi
c000e4eb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e4f0:	56                   	push   esi
c000e4f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e4f9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e503:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e509:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e50f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e513:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e515:	b9 0e 00 00 00       	mov    ecx,0xe
c000e51a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e520:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e524:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e526:	5e                   	pop    esi
c000e527:	5f                   	pop    edi
c000e528:	c3                   	ret    
c000e529:	90                   	nop

c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e52e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e533:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e53a:	75 0b                	jne    c000e547 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e53c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e53e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e542:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e545:	eb 1e                	jmp    c000e565 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e547:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000e54c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e552:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e558:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e55a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e55e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e562:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e565:	ff e0                	jmp    eax
c000e567:	90                   	nop

c000e568 <Device::getParent()>:
c000e568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e56c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e572:	c3                   	ret    
c000e573:	90                   	nop

c000e574 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e578:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e57d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e584:	75 0b                	jne    c000e591 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e586:	8b 00                	mov    eax,DWORD PTR [eax]
c000e588:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e58c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e58f:	eb 1e                	jmp    c000e5af <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e591:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000e596:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e59c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ac:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e5af:	ff e0                	jmp    eax
c000e5b1:	90                   	nop

c000e5b2 <Device::addChild(Device*)>:
c000e5b2:	53                   	push   ebx
c000e5b3:	83 ec 08             	sub    esp,0x8
c000e5b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5be:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e5c4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e5ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5cc:	85 d2                	test   edx,edx
c000e5ce:	74 04                	je     c000e5d4 <Device::addChild(Device*)+0x22>
c000e5d0:	89 d3                	mov    ebx,edx
c000e5d2:	eb f6                	jmp    c000e5ca <Device::addChild(Device*)+0x18>
c000e5d4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5d7:	83 ec 0c             	sub    esp,0xc
c000e5da:	6a 08                	push   0x8
c000e5dc:	e8 72 b7 ff ff       	call   c0009d53 <malloc>
c000e5e1:	89 03                	mov    DWORD PTR [ebx],eax
c000e5e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e5e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e5f0:	83 c4 18             	add    esp,0x18
c000e5f3:	5b                   	pop    ebx
c000e5f4:	c3                   	ret    
c000e5f5:	90                   	nop

c000e5f6 <Device::removeAllChildren()>:
c000e5f6:	56                   	push   esi
c000e5f7:	53                   	push   ebx
c000e5f8:	52                   	push   edx
c000e5f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5fd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e603:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e606:	74 17                	je     c000e61f <Device::removeAllChildren()+0x29>
c000e608:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e60b:	85 c0                	test   eax,eax
c000e60d:	74 0c                	je     c000e61b <Device::removeAllChildren()+0x25>
c000e60f:	83 ec 0c             	sub    esp,0xc
c000e612:	8b 10                	mov    edx,DWORD PTR [eax]
c000e614:	50                   	push   eax
c000e615:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e618:	83 c4 10             	add    esp,0x10
c000e61b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e61d:	eb e4                	jmp    c000e603 <Device::removeAllChildren()+0xd>
c000e61f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e625:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e62b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e631:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e638:	58                   	pop    eax
c000e639:	5b                   	pop    ebx
c000e63a:	5e                   	pop    esi
c000e63b:	c3                   	ret    

c000e63c <Device::hibernateAll()>:
c000e63c:	53                   	push   ebx
c000e63d:	83 ec 14             	sub    esp,0x14
c000e640:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e644:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e646:	53                   	push   ebx
c000e647:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e64a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e656:	74 0f                	je     c000e667 <Device::hibernateAll()+0x2b>
c000e658:	83 ec 0c             	sub    esp,0xc
c000e65b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e65e:	e8 d9 ff ff ff       	call   c000e63c <Device::hibernateAll()>
c000e663:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e665:	eb e9                	jmp    c000e650 <Device::hibernateAll()+0x14>
c000e667:	83 c4 08             	add    esp,0x8
c000e66a:	5b                   	pop    ebx
c000e66b:	c3                   	ret    

c000e66c <Device::wakeAll()>:
c000e66c:	53                   	push   ebx
c000e66d:	83 ec 14             	sub    esp,0x14
c000e670:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e674:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e676:	53                   	push   ebx
c000e677:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e67a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e680:	83 c4 10             	add    esp,0x10
c000e683:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e686:	74 0f                	je     c000e697 <Device::wakeAll()+0x2b>
c000e688:	83 ec 0c             	sub    esp,0xc
c000e68b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e68e:	e8 d9 ff ff ff       	call   c000e66c <Device::wakeAll()>
c000e693:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e695:	eb e9                	jmp    c000e680 <Device::wakeAll()+0x14>
c000e697:	83 c4 08             	add    esp,0x8
c000e69a:	5b                   	pop    ebx
c000e69b:	c3                   	ret    

c000e69c <Device::detectAll()>:
c000e69c:	53                   	push   ebx
c000e69d:	83 ec 14             	sub    esp,0x14
c000e6a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6a6:	53                   	push   ebx
c000e6a7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e6aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6b0:	83 c4 10             	add    esp,0x10
c000e6b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6b6:	74 0f                	je     c000e6c7 <Device::detectAll()+0x2b>
c000e6b8:	83 ec 0c             	sub    esp,0xc
c000e6bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6be:	e8 d9 ff ff ff       	call   c000e69c <Device::detectAll()>
c000e6c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6c5:	eb e9                	jmp    c000e6b0 <Device::detectAll()+0x14>
c000e6c7:	83 c4 08             	add    esp,0x8
c000e6ca:	5b                   	pop    ebx
c000e6cb:	c3                   	ret    

c000e6cc <Device::disableLegacyAll()>:
c000e6cc:	53                   	push   ebx
c000e6cd:	83 ec 14             	sub    esp,0x14
c000e6d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6d6:	53                   	push   ebx
c000e6d7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e6da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6e0:	83 c4 10             	add    esp,0x10
c000e6e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6e6:	74 0f                	je     c000e6f7 <Device::disableLegacyAll()+0x2b>
c000e6e8:	83 ec 0c             	sub    esp,0xc
c000e6eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6ee:	e8 d9 ff ff ff       	call   c000e6cc <Device::disableLegacyAll()>
c000e6f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6f5:	eb e9                	jmp    c000e6e0 <Device::disableLegacyAll()+0x14>
c000e6f7:	83 c4 08             	add    esp,0x8
c000e6fa:	5b                   	pop    ebx
c000e6fb:	c3                   	ret    

c000e6fc <Device::loadDriversForAll()>:
c000e6fc:	53                   	push   ebx
c000e6fd:	83 ec 08             	sub    esp,0x8
c000e700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e704:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e70b:	75 0c                	jne    c000e719 <Device::loadDriversForAll()+0x1d>
c000e70d:	83 ec 0c             	sub    esp,0xc
c000e710:	53                   	push   ebx
c000e711:	e8 a0 fd ff ff       	call   c000e4b6 <Device::findAndLoadDriver()>
c000e716:	83 c4 10             	add    esp,0x10
c000e719:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e71f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e722:	74 12                	je     c000e736 <Device::loadDriversForAll()+0x3a>
c000e724:	83 ec 0c             	sub    esp,0xc
c000e727:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e72a:	e8 cd ff ff ff       	call   c000e6fc <Device::loadDriversForAll()>
c000e72f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e731:	83 c4 10             	add    esp,0x10
c000e734:	eb e9                	jmp    c000e71f <Device::loadDriversForAll()+0x23>
c000e736:	83 c4 08             	add    esp,0x8
c000e739:	5b                   	pop    ebx
c000e73a:	c3                   	ret    
c000e73b:	90                   	nop

c000e73c <Device::closeAll()>:
c000e73c:	53                   	push   ebx
c000e73d:	83 ec 08             	sub    esp,0x8
c000e740:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e744:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e746:	6a 00                	push   0x0
c000e748:	6a 00                	push   0x0
c000e74a:	6a 00                	push   0x0
c000e74c:	53                   	push   ebx
c000e74d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e750:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e75c:	74 0f                	je     c000e76d <Device::closeAll()+0x31>
c000e75e:	83 ec 0c             	sub    esp,0xc
c000e761:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e764:	e8 d3 ff ff ff       	call   c000e73c <Device::closeAll()>
c000e769:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e76b:	eb e9                	jmp    c000e756 <Device::closeAll()+0x1a>
c000e76d:	83 c4 08             	add    esp,0x8
c000e770:	5b                   	pop    ebx
c000e771:	c3                   	ret    

c000e772 <Device::powerSavingAll(PowerSavingLevel)>:
c000e772:	56                   	push   esi
c000e773:	53                   	push   ebx
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e77b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e77f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e781:	56                   	push   esi
c000e782:	53                   	push   ebx
c000e783:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e786:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e78c:	83 c4 10             	add    esp,0x10
c000e78f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e792:	74 0f                	je     c000e7a3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e794:	52                   	push   edx
c000e795:	52                   	push   edx
c000e796:	56                   	push   esi
c000e797:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e79a:	e8 d3 ff ff ff       	call   c000e772 <Device::powerSavingAll(PowerSavingLevel)>
c000e79f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7a1:	eb e9                	jmp    c000e78c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e7a3:	58                   	pop    eax
c000e7a4:	5b                   	pop    ebx
c000e7a5:	5e                   	pop    esi
c000e7a6:	c3                   	ret    
c000e7a7:	90                   	nop

c000e7a8 <Device::setName(char const*)>:
c000e7a8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e7b0:	e9 83 1f ff ff       	jmp    c0000738 <strcpy>
c000e7b5:	90                   	nop

c000e7b6 <Device::Device(char const*)>:
c000e7b6:	83 ec 1c             	sub    esp,0x1c
c000e7b9:	ba 10 54 02 c0       	mov    edx,0xc0025410
c000e7be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c2:	89 10                	mov    DWORD PTR [eax],edx
c000e7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e7fc:	83 ec 08             	sub    esp,0x8
c000e7ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e807:	e8 9c ff ff ff       	call   c000e7a8 <Device::setName(char const*)>
c000e80c:	83 c4 10             	add    esp,0x10
c000e80f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e817:	83 ec 0c             	sub    esp,0xc
c000e81a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e81e:	e8 30 b5 ff ff       	call   c0009d53 <malloc>
c000e823:	83 c4 10             	add    esp,0x10
c000e826:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e82c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e833:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e837:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e841:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e847:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e84d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e851:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e857:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e862:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e878:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e886:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e894:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e89e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e8ac:	90                   	nop
c000e8ad:	83 c4 1c             	add    esp,0x1c
c000e8b0:	c3                   	ret    
c000e8b1:	90                   	nop

c000e8b2 <Device::getName()>:
c000e8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8b6:	05 d0 00 00 00       	add    eax,0xd0
c000e8bb:	c3                   	ret    

c000e8bc <DriverlessDevice::DriverlessDevice(char const*)>:
c000e8bc:	83 ec 0c             	sub    esp,0xc
c000e8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c3:	83 ec 08             	sub    esp,0x8
c000e8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ca:	50                   	push   eax
c000e8cb:	e8 e6 fe ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000e8d0:	83 c4 10             	add    esp,0x10
c000e8d3:	ba 3c 54 02 c0       	mov    edx,0xc002543c
c000e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8dc:	89 10                	mov    DWORD PTR [eax],edx
c000e8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e8ec:	90                   	nop
c000e8ed:	83 c4 0c             	add    esp,0xc
c000e8f0:	c3                   	ret    
c000e8f1:	90                   	nop

c000e8f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e8f2:	57                   	push   edi
c000e8f3:	56                   	push   esi
c000e8f4:	53                   	push   ebx
c000e8f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e8fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e901:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e907:	75 0c                	jne    c000e915 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e909:	52                   	push   edx
c000e90a:	52                   	push   edx
c000e90b:	53                   	push   ebx
c000e90c:	56                   	push   esi
c000e90d:	e8 ac 49 01 00       	call   c00232be <LinkedList<Device>::addElement(Device*)>
c000e912:	83 c4 10             	add    esp,0x10
c000e915:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e91b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e91e:	74 12                	je     c000e932 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e920:	50                   	push   eax
c000e921:	57                   	push   edi
c000e922:	56                   	push   esi
c000e923:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e926:	e8 c7 ff ff ff       	call   c000e8f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e92b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e92d:	83 c4 10             	add    esp,0x10
c000e930:	eb e9                	jmp    c000e91b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e932:	5b                   	pop    ebx
c000e933:	5e                   	pop    esi
c000e934:	5f                   	pop    edi
c000e935:	c3                   	ret    

c000e936 <getDevicesOfType(DeviceType)>:
c000e936:	53                   	push   ebx
c000e937:	83 ec 14             	sub    esp,0x14
c000e93a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e93e:	53                   	push   ebx
c000e93f:	e8 56 4a 01 00       	call   c002339a <LinkedList<Device>::LinkedList()>
c000e944:	83 c4 0c             	add    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	53                   	push   ebx
c000e94c:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c000e952:	e8 9b ff ff ff       	call   c000e8f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e957:	89 d8                	mov    eax,ebx
c000e959:	83 c4 18             	add    esp,0x18
c000e95c:	5b                   	pop    ebx
c000e95d:	c2 04 00             	ret    0x4

c000e960 <HardDiskController::HardDiskController(char const*)>:
c000e960:	83 ec 0c             	sub    esp,0xc
c000e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e967:	83 ec 08             	sub    esp,0x8
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	50                   	push   eax
c000e96f:	e8 42 fe ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000e974:	83 c4 10             	add    esp,0x10
c000e977:	ba 68 54 02 c0       	mov    edx,0xc0025468
c000e97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e980:	89 10                	mov    DWORD PTR [eax],edx
c000e982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e986:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e990:	90                   	nop
c000e991:	83 c4 0c             	add    esp,0xc
c000e994:	c3                   	ret    
c000e995:	90                   	nop
c000e996:	66 90                	xchg   ax,ax

c000e998 <HardDiskController::~HardDiskController()>:
c000e998:	83 ec 0c             	sub    esp,0xc
c000e99b:	ba 68 54 02 c0       	mov    edx,0xc0025468
c000e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a4:	89 10                	mov    DWORD PTR [eax],edx
c000e9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9aa:	83 ec 0c             	sub    esp,0xc
c000e9ad:	50                   	push   eax
c000e9ae:	e8 cd fa ff ff       	call   c000e480 <Device::~Device()>
c000e9b3:	83 c4 10             	add    esp,0x10
c000e9b6:	90                   	nop
c000e9b7:	83 c4 0c             	add    esp,0xc
c000e9ba:	c3                   	ret    
c000e9bb:	90                   	nop

c000e9bc <HardDiskController::~HardDiskController()>:
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	83 ec 0c             	sub    esp,0xc
c000e9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9c6:	e8 cd ff ff ff       	call   c000e998 <HardDiskController::~HardDiskController()>
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	83 ec 08             	sub    esp,0x8
c000e9d1:	68 58 01 00 00       	push   0x158
c000e9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9da:	e8 7f e5 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000e9df:	83 c4 10             	add    esp,0x10
c000e9e2:	83 c4 0c             	add    esp,0xc
c000e9e5:	c3                   	ret    

c000e9e6 <PhysicalDisk::eject()>:
c000e9e6:	83 c8 ff             	or     eax,0xffffffff
c000e9e9:	c3                   	ret    

c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e9ea:	83 ec 0c             	sub    esp,0xc
c000e9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f1:	83 ec 08             	sub    esp,0x8
c000e9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9f8:	50                   	push   eax
c000e9f9:	e8 b8 fd ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000e9fe:	83 c4 10             	add    esp,0x10
c000ea01:	ba 94 54 02 c0       	mov    edx,0xc0025494
c000ea06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea0a:	89 10                	mov    DWORD PTR [eax],edx
c000ea0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea10:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea1b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ea22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea26:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ea30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea38:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea42:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea4c:	90                   	nop
c000ea4d:	83 c4 0c             	add    esp,0xc
c000ea50:	c3                   	ret    
c000ea51:	90                   	nop

c000ea52 <PhysicalDisk::startCache()>:
c000ea52:	56                   	push   esi
c000ea53:	53                   	push   ebx
c000ea54:	83 ec 10             	sub    esp,0x10
c000ea57:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea5b:	6a 44                	push   0x44
c000ea5d:	e8 f1 b2 ff ff       	call   c0009d53 <malloc>
c000ea62:	89 c6                	mov    esi,eax
c000ea64:	58                   	pop    eax
c000ea65:	5a                   	pop    edx
c000ea66:	53                   	push   ebx
c000ea67:	56                   	push   esi
c000ea68:	e8 3f 26 00 00       	call   c00110ac <VCache::VCache(PhysicalDisk*)>
c000ea6d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ea73:	83 c4 14             	add    esp,0x14
c000ea76:	5b                   	pop    ebx
c000ea77:	5e                   	pop    esi
c000ea78:	c3                   	ret    
c000ea79:	90                   	nop

c000ea7a <PhysicalDisk::~PhysicalDisk()>:
c000ea7a:	83 ec 0c             	sub    esp,0xc
c000ea7d:	ba 94 54 02 c0       	mov    edx,0xc0025494
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	89 10                	mov    DWORD PTR [eax],edx
c000ea88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	50                   	push   eax
c000ea90:	e8 eb f9 ff ff       	call   c000e480 <Device::~Device()>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	90                   	nop
c000ea99:	83 c4 0c             	add    esp,0xc
c000ea9c:	c3                   	ret    
c000ea9d:	90                   	nop

c000ea9e <PhysicalDisk::~PhysicalDisk()>:
c000ea9e:	83 ec 0c             	sub    esp,0xc
c000eaa1:	83 ec 0c             	sub    esp,0xc
c000eaa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaa8:	e8 cd ff ff ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c000eaad:	83 c4 10             	add    esp,0x10
c000eab0:	83 ec 08             	sub    esp,0x8
c000eab3:	68 6c 01 00 00       	push   0x16c
c000eab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eabc:	e8 9d e4 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000eac1:	83 c4 10             	add    esp,0x10
c000eac4:	83 c4 0c             	add    esp,0xc
c000eac7:	c3                   	ret    

c000eac8 <FPU::FPU(char const*)>:
c000eac8:	83 ec 0c             	sub    esp,0xc
c000eacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eacf:	83 ec 08             	sub    esp,0x8
c000ead2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ead6:	50                   	push   eax
c000ead7:	e8 da fc ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000eadc:	83 c4 10             	add    esp,0x10
c000eadf:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000eae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eae8:	89 10                	mov    DWORD PTR [eax],edx
c000eaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaee:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eaf8:	90                   	nop
c000eaf9:	83 c4 0c             	add    esp,0xc
c000eafc:	c3                   	ret    
c000eafd:	90                   	nop
c000eafe:	66 90                	xchg   ax,ax

c000eb00 <FPU::~FPU()>:
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	ba f4 54 02 c0       	mov    edx,0xc00254f4
c000eb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0c:	89 10                	mov    DWORD PTR [eax],edx
c000eb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb12:	83 ec 0c             	sub    esp,0xc
c000eb15:	50                   	push   eax
c000eb16:	e8 65 f9 ff ff       	call   c000e480 <Device::~Device()>
c000eb1b:	83 c4 10             	add    esp,0x10
c000eb1e:	90                   	nop
c000eb1f:	83 c4 0c             	add    esp,0xc
c000eb22:	c3                   	ret    
c000eb23:	90                   	nop

c000eb24 <FPU::~FPU()>:
c000eb24:	83 ec 0c             	sub    esp,0xc
c000eb27:	83 ec 0c             	sub    esp,0xc
c000eb2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb2e:	e8 cd ff ff ff       	call   c000eb00 <FPU::~FPU()>
c000eb33:	83 c4 10             	add    esp,0x10
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	68 58 01 00 00       	push   0x158
c000eb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb42:	e8 17 e4 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000eb47:	83 c4 10             	add    esp,0x10
c000eb4a:	83 c4 0c             	add    esp,0xc
c000eb4d:	c3                   	ret    

c000eb4e <setupFPU()>:
c000eb4e:	83 ec 28             	sub    esp,0x28
c000eb51:	68 c4 54 02 c0       	push   0xc00254c4
c000eb56:	e8 e4 e4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000eb5b:	8b 15 68 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a68
c000eb61:	83 c4 10             	add    esp,0x10
c000eb64:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000eb6a:	a8 10                	test   al,0x10
c000eb6c:	74 2e                	je     c000eb9c <setupFPU()+0x4e>
c000eb6e:	83 ec 0c             	sub    esp,0xc
c000eb71:	68 d7 54 02 c0       	push   0xc00254d7
c000eb76:	e8 c4 e4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000eb7b:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000eb82:	e8 cc b1 ff ff       	call   c0009d53 <malloc>
c000eb87:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb8e:	e8 d1 2f 01 00       	call   c0021b64 <x87::x87()>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb9a:	eb 24                	jmp    c000ebc0 <setupFPU()+0x72>
c000eb9c:	83 e0 ef             	and    eax,0xffffffef
c000eb9f:	83 ec 0c             	sub    esp,0xc
c000eba2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000eba8:	68 e1 54 02 c0       	push   0xc00254e1
c000ebad:	e8 8d e4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000ebb2:	0f 20 c0             	mov    eax,cr0
c000ebb5:	83 c8 04             	or     eax,0x4
c000ebb8:	0f 22 c0             	mov    cr0,eax
c000ebbb:	31 c0                	xor    eax,eax
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	83 c4 1c             	add    esp,0x1c
c000ebc3:	c3                   	ret    

c000ebc4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ebc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebcc:	c1 e0 04             	shl    eax,0x4
c000ebcf:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ebd3:	8d 50 10             	lea    edx,[eax+0x10]
c000ebd6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ebdc:	74 08                	je     c000ebe6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ebde:	83 c0 04             	add    eax,0x4
c000ebe1:	39 d0                	cmp    eax,edx
c000ebe3:	75 f1                	jne    c000ebd6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ebe5:	c3                   	ret    
c000ebe6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ebf0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ebfa:	eb e2                	jmp    c000ebde <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ebfc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ebfc:	57                   	push   edi
c000ebfd:	31 c0                	xor    eax,eax
c000ebff:	56                   	push   esi
c000ec00:	53                   	push   ebx
c000ec01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec09:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec0d:	89 da                	mov    edx,ebx
c000ec0f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec13:	c1 e2 04             	shl    edx,0x4
c000ec16:	01 ca                	add    edx,ecx
c000ec18:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000ec20:	74 16                	je     c000ec38 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000ec22:	40                   	inc    eax
c000ec23:	83 f8 04             	cmp    eax,0x4
c000ec26:	75 f0                	jne    c000ec18 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ec28:	c7 44 24 10 24 55 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025524
c000ec30:	5b                   	pop    ebx
c000ec31:	5e                   	pop    esi
c000ec32:	5f                   	pop    edi
c000ec33:	e9 bd 63 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c000ec38:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ec3b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ec3e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ec44:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ec4a:	5b                   	pop    ebx
c000ec4b:	5e                   	pop    esi
c000ec4c:	5f                   	pop    edi
c000ec4d:	c3                   	ret    

c000ec4e <doubleFault(regs*, void*)>:
c000ec4e:	55                   	push   ebp
c000ec4f:	89 e5                	mov    ebp,esp
c000ec51:	83 ec 08             	sub    esp,0x8
c000ec54:	83 ec 0c             	sub    esp,0xc
c000ec57:	68 31 55 02 c0       	push   0xc0025531
c000ec5c:	e8 94 63 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	90                   	nop
c000ec65:	c9                   	leave  
c000ec66:	c3                   	ret    
c000ec67:	90                   	nop

c000ec68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ec68:	56                   	push   esi
c000ec69:	53                   	push   ebx
c000ec6a:	50                   	push   eax
c000ec6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ec6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec73:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ec78:	75 35                	jne    c000ecaf <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ec7a:	8d 43 20             	lea    eax,[ebx+0x20]
c000ec7d:	31 d2                	xor    edx,edx
c000ec7f:	89 c1                	mov    ecx,eax
c000ec81:	c1 e1 04             	shl    ecx,0x4
c000ec84:	01 f1                	add    ecx,esi
c000ec86:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ec8e:	74 3e                	je     c000ecce <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ec90:	42                   	inc    edx
c000ec91:	83 fa 04             	cmp    edx,0x4
c000ec94:	75 f0                	jne    c000ec86 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ec96:	83 ec 0c             	sub    esp,0xc
c000ec99:	68 4b 55 02 c0       	push   0xc002554b
c000ec9e:	e8 52 63 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecab:	5a                   	pop    edx
c000ecac:	5b                   	pop    ebx
c000ecad:	5e                   	pop    esi
c000ecae:	c3                   	ret    
c000ecaf:	83 ec 0c             	sub    esp,0xc
c000ecb2:	56                   	push   esi
c000ecb3:	e8 fa fb ff ff       	call   c000e8b2 <Device::getName()>
c000ecb8:	83 c4 10             	add    esp,0x10
c000ecbb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ecbe:	75 ba                	jne    c000ec7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecc0:	83 fb 0f             	cmp    ebx,0xf
c000ecc3:	7f 29                	jg     c000ecee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ecc5:	0f b6 9b 60 81 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7ea0]
c000eccc:	eb ac                	jmp    c000ec7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ecce:	8d 04 82             	lea    eax,[edx+eax*4]
c000ecd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecd5:	8d 04 86             	lea    eax,[esi+eax*4]
c000ecd8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ecde:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ece2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ece8:	89 d8                	mov    eax,ebx
c000ecea:	5a                   	pop    edx
c000eceb:	5b                   	pop    ebx
c000ecec:	5e                   	pop    esi
c000eced:	c3                   	ret    
c000ecee:	83 ec 0c             	sub    esp,0xc
c000ecf1:	68 3e 55 02 c0       	push   0xc002553e
c000ecf6:	e8 fa 62 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000ecfb:	83 c4 10             	add    esp,0x10
c000ecfe:	e9 77 ff ff ff       	jmp    c000ec7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed03:	90                   	nop

c000ed04 <InterruptController::clearAllHandlers(int, bool)>:
c000ed04:	56                   	push   esi
c000ed05:	53                   	push   ebx
c000ed06:	52                   	push   edx
c000ed07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed0f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ed14:	75 61                	jne    c000ed77 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ed16:	8d 46 20             	lea    eax,[esi+0x20]
c000ed19:	c1 e6 04             	shl    esi,0x4
c000ed1c:	c1 e0 04             	shl    eax,0x4
c000ed1f:	01 de                	add    esi,ebx
c000ed21:	01 d8                	add    eax,ebx
c000ed23:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ed2d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ed37:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ed41:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed4b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ed55:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ed5f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ed69:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ed73:	58                   	pop    eax
c000ed74:	5b                   	pop    ebx
c000ed75:	5e                   	pop    esi
c000ed76:	c3                   	ret    
c000ed77:	83 ec 0c             	sub    esp,0xc
c000ed7a:	53                   	push   ebx
c000ed7b:	e8 32 fb ff ff       	call   c000e8b2 <Device::getName()>
c000ed80:	83 c4 10             	add    esp,0x10
c000ed83:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed86:	75 8e                	jne    c000ed16 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed88:	83 fe 0f             	cmp    esi,0xf
c000ed8b:	7f 09                	jg     c000ed96 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ed8d:	0f b6 b6 60 81 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7ea0]
c000ed94:	eb 80                	jmp    c000ed16 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ed96:	83 ec 0c             	sub    esp,0xc
c000ed99:	68 58 55 02 c0       	push   0xc0025558
c000ed9e:	e8 52 62 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000eda3:	83 c4 10             	add    esp,0x10
c000eda6:	e9 6b ff ff ff       	jmp    c000ed16 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000edab:	90                   	nop

c000edac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000edac:	56                   	push   esi
c000edad:	53                   	push   ebx
c000edae:	52                   	push   edx
c000edaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000edb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000edb7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000edbc:	75 3a                	jne    c000edf8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000edbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000edc2:	8d 50 20             	lea    edx,[eax+0x20]
c000edc5:	c1 e2 04             	shl    edx,0x4
c000edc8:	8d 04 16             	lea    eax,[esi+edx*1]
c000edcb:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000edcf:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000edd5:	74 0b                	je     c000ede2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000edd7:	83 c0 04             	add    eax,0x4
c000edda:	39 d0                	cmp    eax,edx
c000eddc:	75 f1                	jne    c000edcf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000edde:	58                   	pop    eax
c000eddf:	5b                   	pop    ebx
c000ede0:	5e                   	pop    esi
c000ede1:	c3                   	ret    
c000ede2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000edec:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000edf6:	eb df                	jmp    c000edd7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000edf8:	83 ec 0c             	sub    esp,0xc
c000edfb:	56                   	push   esi
c000edfc:	e8 b1 fa ff ff       	call   c000e8b2 <Device::getName()>
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee07:	75 b5                	jne    c000edbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee09:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ee0e:	7f 11                	jg     c000ee21 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ee10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee14:	0f b6 80 60 81 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7ea0]
c000ee1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee1f:	eb 9d                	jmp    c000edbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee21:	83 ec 0c             	sub    esp,0xc
c000ee24:	68 65 55 02 c0       	push   0xc0025565
c000ee29:	e8 c7 61 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000ee2e:	83 c4 10             	add    esp,0x10
c000ee31:	eb 8b                	jmp    c000edbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ee33 <nmiHandler(regs*, void*)>:
c000ee33:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000ee38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee3c:	e9 db a6 ff ff       	jmp    c000951c <Computer::handleNMI()>

c000ee41 <int_handler>:
c000ee41:	55                   	push   ebp
c000ee42:	57                   	push   edi
c000ee43:	56                   	push   esi
c000ee44:	53                   	push   ebx
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ee4c:	80 3d 44 95 02 c0 00 	cmp    BYTE PTR ds:0xc0029544,0x0
c000ee53:	74 0b                	je     c000ee60 <int_handler+0x1f>
c000ee55:	fa                   	cli    
c000ee56:	f4                   	hlt    
c000ee57:	80 3d 44 95 02 c0 00 	cmp    BYTE PTR ds:0xc0029544,0x0
c000ee5e:	75 f5                	jne    c000ee55 <int_handler+0x14>
c000ee60:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000ee65:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ee68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ee6e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ee74:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee77:	83 f8 17             	cmp    eax,0x17
c000ee7a:	77 13                	ja     c000ee8f <int_handler+0x4e>
c000ee7c:	83 ec 08             	sub    esp,0x8
c000ee7f:	8b 17                	mov    edx,DWORD PTR [edi]
c000ee81:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ee84:	0f b6 c0             	movzx  eax,al
c000ee87:	50                   	push   eax
c000ee88:	57                   	push   edi
c000ee89:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	83 c3 15             	add    ebx,0x15
c000ee92:	c1 e3 04             	shl    ebx,0x4
c000ee95:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ee99:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eea0:	31 db                	xor    ebx,ebx
c000eea2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eea6:	85 c0                	test   eax,eax
c000eea8:	74 13                	je     c000eebd <int_handler+0x7c>
c000eeaa:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eead:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eeb1:	74 1c                	je     c000eecf <int_handler+0x8e>
c000eeb3:	83 ec 08             	sub    esp,0x8
c000eeb6:	52                   	push   edx
c000eeb7:	56                   	push   esi
c000eeb8:	ff d0                	call   eax
c000eeba:	83 c4 10             	add    esp,0x10
c000eebd:	43                   	inc    ebx
c000eebe:	83 fb 04             	cmp    ebx,0x4
c000eec1:	75 df                	jne    c000eea2 <int_handler+0x61>
c000eec3:	83 c4 0c             	add    esp,0xc
c000eec6:	31 c0                	xor    eax,eax
c000eec8:	5b                   	pop    ebx
c000eec9:	31 d2                	xor    edx,edx
c000eecb:	5e                   	pop    esi
c000eecc:	5f                   	pop    edi
c000eecd:	5d                   	pop    ebp
c000eece:	c3                   	ret    
c000eecf:	83 ec 08             	sub    esp,0x8
c000eed2:	52                   	push   edx
c000eed3:	56                   	push   esi
c000eed4:	ff d0                	call   eax
c000eed6:	83 c4 10             	add    esp,0x10
c000eed9:	83 c4 0c             	add    esp,0xc
c000eedc:	5b                   	pop    ebx
c000eedd:	5e                   	pop    esi
c000eede:	5f                   	pop    edi
c000eedf:	5d                   	pop    ebp
c000eee0:	c3                   	ret    
c000eee1:	90                   	nop

c000eee2 <InterruptController::InterruptController(char const*)>:
c000eee2:	83 ec 1c             	sub    esp,0x1c
c000eee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eee9:	83 ec 08             	sub    esp,0x8
c000eeec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eef0:	50                   	push   eax
c000eef1:	e8 c0 f8 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c000eef6:	83 c4 10             	add    esp,0x10
c000eef9:	ba 2c 58 02 c0       	mov    edx,0xc002582c
c000eefe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef02:	89 10                	mov    DWORD PTR [eax],edx
c000ef04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef08:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ef12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef1a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ef22:	7f 5e                	jg     c000ef82 <InterruptController::InterruptController(char const*)+0xa0>
c000ef24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ef2c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ef31:	7f 49                	jg     c000ef7c <InterruptController::InterruptController(char const*)+0x9a>
c000ef33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef3b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef46:	01 ca                	add    edx,ecx
c000ef48:	83 c2 54             	add    edx,0x54
c000ef4b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ef62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef66:	01 ca                	add    edx,ecx
c000ef68:	81 c2 54 04 00 00    	add    edx,0x454
c000ef6e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ef76:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ef7a:	eb b0                	jmp    c000ef2c <InterruptController::InterruptController(char const*)+0x4a>
c000ef7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ef80:	eb 98                	jmp    c000ef1a <InterruptController::InterruptController(char const*)+0x38>
c000ef82:	90                   	nop
c000ef83:	83 c4 1c             	add    esp,0x1c
c000ef86:	c3                   	ret    
c000ef87:	90                   	nop

c000ef88 <InterruptController::~InterruptController()>:
c000ef88:	83 ec 0c             	sub    esp,0xc
c000ef8b:	ba 2c 58 02 c0       	mov    edx,0xc002582c
c000ef90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef94:	89 10                	mov    DWORD PTR [eax],edx
c000ef96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef9a:	83 ec 0c             	sub    esp,0xc
c000ef9d:	50                   	push   eax
c000ef9e:	e8 dd f4 ff ff       	call   c000e480 <Device::~Device()>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	90                   	nop
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	c3                   	ret    
c000efab:	90                   	nop

c000efac <InterruptController::~InterruptController()>:
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	83 ec 0c             	sub    esp,0xc
c000efb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efb6:	e8 cd ff ff ff       	call   c000ef88 <InterruptController::~InterruptController()>
c000efbb:	83 c4 10             	add    esp,0x10
c000efbe:	83 ec 08             	sub    esp,0x8
c000efc1:	68 58 21 00 00       	push   0x2158
c000efc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efca:	e8 8f df ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c000efcf:	83 c4 10             	add    esp,0x10
c000efd2:	83 c4 0c             	add    esp,0xc
c000efd5:	c3                   	ret    

c000efd6 <displayDebugInfo(regs*)>:
c000efd6:	55                   	push   ebp
c000efd7:	57                   	push   edi
c000efd8:	56                   	push   esi
c000efd9:	53                   	push   ebx
c000efda:	83 ec 24             	sub    esp,0x24
c000efdd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000efe1:	0f 20 c2             	mov    edx,cr0
c000efe4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000efe8:	0f 20 d7             	mov    edi,cr2
c000efeb:	0f 20 de             	mov    esi,cr3
c000efee:	0f 20 e5             	mov    ebp,cr4
c000eff1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000eff4:	68 72 55 02 c0       	push   0xc0025572
c000eff9:	e8 41 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000effe:	59                   	pop    ecx
c000efff:	58                   	pop    eax
c000f000:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f003:	68 7d 55 02 c0       	push   0xc002557d
c000f008:	e8 32 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f00d:	58                   	pop    eax
c000f00e:	5a                   	pop    edx
c000f00f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f012:	68 88 55 02 c0       	push   0xc0025588
c000f017:	e8 23 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f01c:	59                   	pop    ecx
c000f01d:	58                   	pop    eax
c000f01e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f021:	68 93 55 02 c0       	push   0xc0025593
c000f026:	e8 14 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f02b:	58                   	pop    eax
c000f02c:	5a                   	pop    edx
c000f02d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f030:	68 9e 55 02 c0       	push   0xc002559e
c000f035:	e8 05 e0 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f03a:	59                   	pop    ecx
c000f03b:	58                   	pop    eax
c000f03c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f03f:	68 a9 55 02 c0       	push   0xc00255a9
c000f044:	e8 f6 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f049:	58                   	pop    eax
c000f04a:	5a                   	pop    edx
c000f04b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f04e:	68 b4 55 02 c0       	push   0xc00255b4
c000f053:	e8 e7 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f058:	59                   	pop    ecx
c000f059:	58                   	pop    eax
c000f05a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f05d:	68 bf 55 02 c0       	push   0xc00255bf
c000f062:	e8 d8 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f067:	58                   	pop    eax
c000f068:	5a                   	pop    edx
c000f069:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f06c:	68 ca 55 02 c0       	push   0xc00255ca
c000f071:	e8 c9 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f076:	59                   	pop    ecx
c000f077:	58                   	pop    eax
c000f078:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f07b:	68 d9 55 02 c0       	push   0xc00255d9
c000f080:	e8 ba df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f085:	58                   	pop    eax
c000f086:	5a                   	pop    edx
c000f087:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f08a:	68 e4 55 02 c0       	push   0xc00255e4
c000f08f:	e8 ab df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f094:	59                   	pop    ecx
c000f095:	58                   	pop    eax
c000f096:	57                   	push   edi
c000f097:	68 ef 55 02 c0       	push   0xc00255ef
c000f09c:	e8 9e df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f0a1:	58                   	pop    eax
c000f0a2:	5a                   	pop    edx
c000f0a3:	56                   	push   esi
c000f0a4:	68 fa 55 02 c0       	push   0xc00255fa
c000f0a9:	e8 91 df ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f0ae:	59                   	pop    ecx
c000f0af:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f0b4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0ba:	e8 8e bd ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c000f0bf:	58                   	pop    eax
c000f0c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f0c3:	5a                   	pop    edx
c000f0c4:	c1 e0 05             	shl    eax,0x5
c000f0c7:	05 c0 7e 02 c0       	add    eax,0xc0027ec0
c000f0cc:	50                   	push   eax
c000f0cd:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f0d2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d8:	e8 7d c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f0dd:	59                   	pop    ecx
c000f0de:	58                   	pop    eax
c000f0df:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f0e4:	68 05 56 02 c0       	push   0xc0025605
c000f0e9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0ef:	e8 66 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f0f4:	58                   	pop    eax
c000f0f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0fa:	5a                   	pop    edx
c000f0fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f0fe:	83 c0 0c             	add    eax,0xc
c000f101:	50                   	push   eax
c000f102:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f107:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f10d:	e8 48 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f112:	59                   	pop    ecx
c000f113:	58                   	pop    eax
c000f114:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f119:	68 0e 56 02 c0       	push   0xc002560e
c000f11e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f124:	e8 31 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f129:	58                   	pop    eax
c000f12a:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f12f:	5a                   	pop    edx
c000f130:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f133:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f139:	e8 d6 c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f13e:	59                   	pop    ecx
c000f13f:	58                   	pop    eax
c000f140:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f145:	68 16 56 02 c0       	push   0xc0025616
c000f14a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f150:	e8 05 c2 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f155:	58                   	pop    eax
c000f156:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f15b:	5a                   	pop    edx
c000f15c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f15f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f165:	e8 aa c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f16a:	59                   	pop    ecx
c000f16b:	58                   	pop    eax
c000f16c:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f171:	68 1e 56 02 c0       	push   0xc002561e
c000f176:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f17c:	e8 d9 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f181:	58                   	pop    eax
c000f182:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f187:	5a                   	pop    edx
c000f188:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f18b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f191:	e8 7e c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f196:	59                   	pop    ecx
c000f197:	58                   	pop    eax
c000f198:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f19d:	68 26 56 02 c0       	push   0xc0025626
c000f1a2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1a8:	e8 ad c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f1ad:	58                   	pop    eax
c000f1ae:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f1b3:	5a                   	pop    edx
c000f1b4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f1b7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1bd:	e8 52 c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f1c2:	59                   	pop    ecx
c000f1c3:	58                   	pop    eax
c000f1c4:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f1c9:	68 2e 56 02 c0       	push   0xc002562e
c000f1ce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1d4:	e8 81 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f1d9:	58                   	pop    eax
c000f1da:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f1df:	5a                   	pop    edx
c000f1e0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f1e3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e9:	e8 26 c1 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f1ee:	59                   	pop    ecx
c000f1ef:	58                   	pop    eax
c000f1f0:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f1f5:	68 36 56 02 c0       	push   0xc0025636
c000f1fa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f200:	e8 55 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f205:	58                   	pop    eax
c000f206:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f20b:	5a                   	pop    edx
c000f20c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f20f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f215:	e8 fa c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f21a:	59                   	pop    ecx
c000f21b:	58                   	pop    eax
c000f21c:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f221:	68 3e 56 02 c0       	push   0xc002563e
c000f226:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f22c:	e8 29 c1 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f231:	58                   	pop    eax
c000f232:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f237:	5a                   	pop    edx
c000f238:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f23c:	52                   	push   edx
c000f23d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f243:	e8 cc c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f248:	59                   	pop    ecx
c000f249:	58                   	pop    eax
c000f24a:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f24f:	68 47 56 02 c0       	push   0xc0025647
c000f254:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f25a:	e8 fb c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f25f:	58                   	pop    eax
c000f260:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f265:	5a                   	pop    edx
c000f266:	57                   	push   edi
c000f267:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f26d:	e8 a2 c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f272:	59                   	pop    ecx
c000f273:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f278:	5f                   	pop    edi
c000f279:	68 4f 56 02 c0       	push   0xc002564f
c000f27e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f284:	e8 d1 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f289:	58                   	pop    eax
c000f28a:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f28f:	5a                   	pop    edx
c000f290:	56                   	push   esi
c000f291:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f297:	e8 78 c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f29c:	59                   	pop    ecx
c000f29d:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f2a2:	5e                   	pop    esi
c000f2a3:	68 57 56 02 c0       	push   0xc0025657
c000f2a8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2ae:	e8 a7 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f2b3:	5f                   	pop    edi
c000f2b4:	58                   	pop    eax
c000f2b5:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f2ba:	55                   	push   ebp
c000f2bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c1:	e8 4e c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f2c6:	58                   	pop    eax
c000f2c7:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f2cc:	5a                   	pop    edx
c000f2cd:	68 5f 56 02 c0       	push   0xc002565f
c000f2d2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2d8:	e8 7d c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f2dd:	0f 21 c0             	mov    eax,db0
c000f2e0:	59                   	pop    ecx
c000f2e1:	5e                   	pop    esi
c000f2e2:	50                   	push   eax
c000f2e3:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f2e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2ee:	e8 21 c0 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f2f3:	5f                   	pop    edi
c000f2f4:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f2f9:	5d                   	pop    ebp
c000f2fa:	68 68 56 02 c0       	push   0xc0025668
c000f2ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f305:	e8 50 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f30a:	0f 21 c8             	mov    eax,db1
c000f30d:	5a                   	pop    edx
c000f30e:	59                   	pop    ecx
c000f30f:	50                   	push   eax
c000f310:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f315:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f31b:	e8 f4 bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f320:	5e                   	pop    esi
c000f321:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f326:	5f                   	pop    edi
c000f327:	68 70 56 02 c0       	push   0xc0025670
c000f32c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f332:	e8 23 c0 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f337:	0f 21 d0             	mov    eax,db2
c000f33a:	5d                   	pop    ebp
c000f33b:	5a                   	pop    edx
c000f33c:	50                   	push   eax
c000f33d:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f342:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f348:	e8 c7 bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f34d:	59                   	pop    ecx
c000f34e:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f353:	5e                   	pop    esi
c000f354:	68 78 56 02 c0       	push   0xc0025678
c000f359:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f35f:	e8 f6 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f364:	0f 21 d8             	mov    eax,db3
c000f367:	5f                   	pop    edi
c000f368:	5d                   	pop    ebp
c000f369:	50                   	push   eax
c000f36a:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f36f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f375:	e8 9a bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f37a:	58                   	pop    eax
c000f37b:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f380:	5a                   	pop    edx
c000f381:	68 80 56 02 c0       	push   0xc0025680
c000f386:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f38c:	e8 c9 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f391:	0f 21 f0             	mov    eax,db6
c000f394:	59                   	pop    ecx
c000f395:	5e                   	pop    esi
c000f396:	50                   	push   eax
c000f397:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f39c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3a2:	e8 6d bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f3a7:	5f                   	pop    edi
c000f3a8:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f3ad:	5d                   	pop    ebp
c000f3ae:	68 88 56 02 c0       	push   0xc0025688
c000f3b3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b9:	e8 9c bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f3be:	0f 21 f8             	mov    eax,db7
c000f3c1:	5a                   	pop    edx
c000f3c2:	59                   	pop    ecx
c000f3c3:	50                   	push   eax
c000f3c4:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f3c9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3cf:	e8 40 bf ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f3d4:	5e                   	pop    esi
c000f3d5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f3d8:	e8 ec 8d 00 00       	call   c00181c9 <Thr::getDriverNameFromAddress(unsigned long)>
c000f3dd:	83 c4 10             	add    esp,0x10
c000f3e0:	85 c0                	test   eax,eax
c000f3e2:	74 7d                	je     c000f461 <displayDebugInfo(regs*)+0x48b>
c000f3e4:	89 c6                	mov    esi,eax
c000f3e6:	50                   	push   eax
c000f3e7:	50                   	push   eax
c000f3e8:	56                   	push   esi
c000f3e9:	68 90 56 02 c0       	push   0xc0025690
c000f3ee:	e8 4c dc ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f3f3:	5a                   	pop    edx
c000f3f4:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f3f9:	59                   	pop    ecx
c000f3fa:	68 9e 56 02 c0       	push   0xc002569e
c000f3ff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f405:	e8 50 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f40a:	5f                   	pop    edi
c000f40b:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f410:	5d                   	pop    ebp
c000f411:	56                   	push   esi
c000f412:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f418:	e8 3d bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f41d:	58                   	pop    eax
c000f41e:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f423:	5a                   	pop    edx
c000f424:	68 aa 56 02 c0       	push   0xc00256aa
c000f429:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f42f:	e8 26 bf ff ff       	call   c000b35a <VgaText::puts(char const*)>
c000f434:	59                   	pop    ecx
c000f435:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c000f43a:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f440:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f443:	e8 b8 8d 00 00       	call   c0018200 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f448:	5b                   	pop    ebx
c000f449:	5d                   	pop    ebp
c000f44a:	50                   	push   eax
c000f44b:	57                   	push   edi
c000f44c:	e8 c3 be ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c000f451:	58                   	pop    eax
c000f452:	5a                   	pop    edx
c000f453:	56                   	push   esi
c000f454:	68 b6 56 02 c0       	push   0xc00256b6
c000f459:	e8 e1 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f45e:	83 c4 10             	add    esp,0x10
c000f461:	fa                   	cli    
c000f462:	f4                   	hlt    
c000f463:	eb fe                	jmp    c000f463 <displayDebugInfo(regs*)+0x48d>

c000f465 <x87EmulHandler(regs*, void*)>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	0f 20 c2             	mov    edx,cr0
c000f46b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f470:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f474:	75 4b                	jne    c000f4c1 <x87EmulHandler(regs*, void*)+0x5c>
c000f476:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000f47b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f481:	85 c0                	test   eax,eax
c000f483:	74 05                	je     c000f48a <x87EmulHandler(regs*, void*)+0x25>
c000f485:	83 e2 08             	and    edx,0x8
c000f488:	75 17                	jne    c000f4a1 <x87EmulHandler(regs*, void*)+0x3c>
c000f48a:	83 ec 0c             	sub    esp,0xc
c000f48d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f491:	e8 bc b3 00 00       	call   c001a852 <Vm::x87Handler(regs*)>
c000f496:	83 c4 10             	add    esp,0x10
c000f499:	84 c0                	test   al,al
c000f49b:	74 24                	je     c000f4c1 <x87EmulHandler(regs*, void*)+0x5c>
c000f49d:	83 c4 0c             	add    esp,0xc
c000f4a0:	c3                   	ret    
c000f4a1:	83 ec 0c             	sub    esp,0xc
c000f4a4:	68 dc 56 02 c0       	push   0xc00256dc
c000f4a9:	e8 91 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f4ae:	0f 06                	clts   
c000f4b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	a3 a8 8b 02 c0       	mov    ds:0xc0028ba8,eax
c000f4bd:	83 c4 0c             	add    esp,0xc
c000f4c0:	c3                   	ret    
c000f4c1:	83 ec 0c             	sub    esp,0xc
c000f4c4:	68 c6 56 02 c0       	push   0xc00256c6
c000f4c9:	e8 71 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f4ce:	5a                   	pop    edx
c000f4cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d3:	e8 fe fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f4d8 <gpFault(regs*, void*)>:
c000f4d8:	53                   	push   ebx
c000f4d9:	83 ec 14             	sub    esp,0x14
c000f4dc:	c7 05 a4 8b 02 c0 0f 9d 01 c0 	mov    DWORD PTR ds:0xc0028ba4,0xc0019d0f
c000f4e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f4ea:	53                   	push   ebx
c000f4eb:	e8 1f a8 00 00       	call   c0019d0f <Vm::faultHandler(regs*)>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	84 c0                	test   al,al
c000f4f5:	74 05                	je     c000f4fc <gpFault(regs*, void*)+0x24>
c000f4f7:	83 c4 08             	add    esp,0x8
c000f4fa:	5b                   	pop    ebx
c000f4fb:	c3                   	ret    
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	68 e9 56 02 c0       	push   0xc00256e9
c000f504:	e8 36 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f509:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f50c:	e8 c5 fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f511 <pgFault(regs*, void*)>:
c000f511:	53                   	push   ebx
c000f512:	83 ec 10             	sub    esp,0x10
c000f515:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f519:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f51c:	68 04 57 02 c0       	push   0xc0025704
c000f521:	e8 19 db ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f526:	0f 20 d0             	mov    eax,cr2
c000f529:	5a                   	pop    edx
c000f52a:	59                   	pop    ecx
c000f52b:	50                   	push   eax
c000f52c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f531:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f534:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f53a:	e8 7b d6 ff ff       	call   c000cbba <VAS::tryLoadBackOffDisk(unsigned long)>
c000f53f:	83 c4 10             	add    esp,0x10
c000f542:	84 c0                	test   al,al
c000f544:	74 05                	je     c000f54b <pgFault(regs*, void*)+0x3a>
c000f546:	83 c4 08             	add    esp,0x8
c000f549:	5b                   	pop    ebx
c000f54a:	c3                   	ret    
c000f54b:	83 ec 0c             	sub    esp,0xc
c000f54e:	68 19 57 02 c0       	push   0xc0025719
c000f553:	e8 e7 da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f558:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f55b:	e8 76 fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f560 <otherISRHandler(regs*, void*)>:
c000f560:	53                   	push   ebx
c000f561:	83 ec 0c             	sub    esp,0xc
c000f564:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f568:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f56b:	50                   	push   eax
c000f56c:	50                   	push   eax
c000f56d:	68 26 57 02 c0       	push   0xc0025726
c000f572:	e8 c8 da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f57a:	e8 57 fa ff ff       	call   c000efd6 <displayDebugInfo(regs*)>

c000f57f <opcodeFault(regs*, void*)>:
c000f57f:	55                   	push   ebp
c000f580:	89 e5                	mov    ebp,esp
c000f582:	56                   	push   esi
c000f583:	53                   	push   ebx
c000f584:	83 ec 30             	sub    esp,0x30
c000f587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f58a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f58d:	83 ec 08             	sub    esp,0x8
c000f590:	50                   	push   eax
c000f591:	68 43 57 02 c0       	push   0xc0025743
c000f596:	e8 a4 da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f59b:	83 c4 10             	add    esp,0x10
c000f59e:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000f5a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f5a9:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f5af:	84 c0                	test   al,al
c000f5b1:	74 24                	je     c000f5d7 <opcodeFault(regs*, void*)+0x58>
c000f5b3:	83 ec 0c             	sub    esp,0xc
c000f5b6:	68 54 57 02 c0       	push   0xc0025754
c000f5bb:	e8 7f da ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f5c0:	83 c4 10             	add    esp,0x10
c000f5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5c9:	8d 50 19             	lea    edx,[eax+0x19]
c000f5cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5cf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f5d2:	e9 7b 03 00 00       	jmp    c000f952 <opcodeFault(regs*, void*)+0x3d3>
c000f5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f5e0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f5ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5f0:	8a 00                	mov    al,BYTE PTR [eax]
c000f5f2:	3c f0                	cmp    al,0xf0
c000f5f4:	75 17                	jne    c000f60d <opcodeFault(regs*, void*)+0x8e>
c000f5f6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000f602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f605:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f608:	e9 d6 00 00 00       	jmp    c000f6e3 <opcodeFault(regs*, void*)+0x164>
c000f60d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f610:	8a 00                	mov    al,BYTE PTR [eax]
c000f612:	3c f2                	cmp    al,0xf2
c000f614:	74 09                	je     c000f61f <opcodeFault(regs*, void*)+0xa0>
c000f616:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f619:	8a 00                	mov    al,BYTE PTR [eax]
c000f61b:	3c f3                	cmp    al,0xf3
c000f61d:	75 1b                	jne    c000f63a <opcodeFault(regs*, void*)+0xbb>
c000f61f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f623:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f629:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f62c:	8d 50 01             	lea    edx,[eax+0x1]
c000f62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f632:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f635:	e9 a9 00 00 00       	jmp    c000f6e3 <opcodeFault(regs*, void*)+0x164>
c000f63a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f63d:	8a 00                	mov    al,BYTE PTR [eax]
c000f63f:	3c 66                	cmp    al,0x66
c000f641:	75 1b                	jne    c000f65e <opcodeFault(regs*, void*)+0xdf>
c000f643:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f647:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f64a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f64d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f650:	8d 50 01             	lea    edx,[eax+0x1]
c000f653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f656:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f659:	e9 85 00 00 00       	jmp    c000f6e3 <opcodeFault(regs*, void*)+0x164>
c000f65e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f661:	8a 00                	mov    al,BYTE PTR [eax]
c000f663:	3c 67                	cmp    al,0x67
c000f665:	75 18                	jne    c000f67f <opcodeFault(regs*, void*)+0x100>
c000f667:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f66b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f671:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f674:	8d 50 01             	lea    edx,[eax+0x1]
c000f677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f67a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f67d:	eb 64                	jmp    c000f6e3 <opcodeFault(regs*, void*)+0x164>
c000f67f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f682:	8a 00                	mov    al,BYTE PTR [eax]
c000f684:	3c 2e                	cmp    al,0x2e
c000f686:	74 09                	je     c000f691 <opcodeFault(regs*, void*)+0x112>
c000f688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f68b:	8a 00                	mov    al,BYTE PTR [eax]
c000f68d:	3c 3e                	cmp    al,0x3e
c000f68f:	75 18                	jne    c000f6a9 <opcodeFault(regs*, void*)+0x12a>
c000f691:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f695:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f69b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f69e:	8d 50 01             	lea    edx,[eax+0x1]
c000f6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6a7:	eb 3a                	jmp    c000f6e3 <opcodeFault(regs*, void*)+0x164>
c000f6a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6ac:	8a 00                	mov    al,BYTE PTR [eax]
c000f6ae:	3c 36                	cmp    al,0x36
c000f6b0:	74 1b                	je     c000f6cd <opcodeFault(regs*, void*)+0x14e>
c000f6b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f6b7:	3c 26                	cmp    al,0x26
c000f6b9:	74 12                	je     c000f6cd <opcodeFault(regs*, void*)+0x14e>
c000f6bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6be:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c0:	3c 64                	cmp    al,0x64
c000f6c2:	74 09                	je     c000f6cd <opcodeFault(regs*, void*)+0x14e>
c000f6c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6c7:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c9:	3c 65                	cmp    al,0x65
c000f6cb:	75 16                	jne    c000f6e3 <opcodeFault(regs*, void*)+0x164>
c000f6cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f6d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f6d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6da:	8d 50 01             	lea    edx,[eax+0x1]
c000f6dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f6e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e6:	8a 00                	mov    al,BYTE PTR [eax]
c000f6e8:	3c 0f                	cmp    al,0xf
c000f6ea:	0f 85 8d 01 00 00    	jne    c000f87d <opcodeFault(regs*, void*)+0x2fe>
c000f6f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f3:	40                   	inc    eax
c000f6f4:	8a 00                	mov    al,BYTE PTR [eax]
c000f6f6:	3c c7                	cmp    al,0xc7
c000f6f8:	0f 85 7f 01 00 00    	jne    c000f87d <opcodeFault(regs*, void*)+0x2fe>
c000f6fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f704:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f707:	8d 50 01             	lea    edx,[eax+0x1]
c000f70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f70d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f710:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f713:	50                   	push   eax
c000f714:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f717:	50                   	push   eax
c000f718:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f71b:	50                   	push   eax
c000f71c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f71f:	e8 ea 4f 00 00       	call   c001470e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f724:	83 c4 10             	add    esp,0x10
c000f727:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f72a:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f72d:	83 f0 01             	xor    eax,0x1
c000f730:	84 c0                	test   al,al
c000f732:	0f 84 45 01 00 00    	je     c000f87d <opcodeFault(regs*, void*)+0x2fe>
c000f738:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f73b:	3c 01                	cmp    al,0x1
c000f73d:	0f 85 3a 01 00 00    	jne    c000f87d <opcodeFault(regs*, void*)+0x2fe>
c000f743:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f746:	83 f0 01             	xor    eax,0x1
c000f749:	84 c0                	test   al,al
c000f74b:	0f 84 2c 01 00 00    	je     c000f87d <opcodeFault(regs*, void*)+0x2fe>
c000f751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f754:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f757:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f75a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f761:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f764:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f767:	89 c2                	mov    edx,eax
c000f769:	b8 00 00 00 00       	mov    eax,0x0
c000f76e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f771:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f777:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f77a:	ba 00 00 00 00       	mov    edx,0x0
c000f77f:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f782:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f788:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f78b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f78e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f795:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f798:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f79b:	89 c2                	mov    edx,eax
c000f79d:	b8 00 00 00 00       	mov    eax,0x0
c000f7a2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f7a5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f7ae:	ba 00 00 00 00       	mov    edx,0x0
c000f7b3:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f7b6:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f7b9:	fa                   	cli    
c000f7ba:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000f7bf:	40                   	inc    eax
c000f7c0:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000f7c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f7c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f7cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7cd:	89 c1                	mov    ecx,eax
c000f7cf:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f7d2:	89 cb                	mov    ebx,ecx
c000f7d4:	89 d0                	mov    eax,edx
c000f7d6:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f7d9:	89 c6                	mov    esi,eax
c000f7db:	89 f0                	mov    eax,esi
c000f7dd:	09 d8                	or     eax,ebx
c000f7df:	85 c0                	test   eax,eax
c000f7e1:	75 21                	jne    c000f804 <opcodeFault(regs*, void*)+0x285>
c000f7e3:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f7e6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f7e9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f7ec:	89 01                	mov    DWORD PTR [ecx],eax
c000f7ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f7f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f7f7:	83 c8 40             	or     eax,0x40
c000f7fa:	89 c2                	mov    edx,eax
c000f7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ff:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f802:	eb 3e                	jmp    c000f842 <opcodeFault(regs*, void*)+0x2c3>
c000f804:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f807:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f80a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f80c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f80f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f812:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f818:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f81b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f81e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f821:	89 d0                	mov    eax,edx
c000f823:	31 d2                	xor    edx,edx
c000f825:	89 c3                	mov    ebx,eax
c000f827:	89 d6                	mov    esi,edx
c000f829:	89 da                	mov    edx,ebx
c000f82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f82e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f834:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f837:	83 e0 bf             	and    eax,0xffffffbf
c000f83a:	89 c2                	mov    edx,eax
c000f83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f83f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f842:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000f847:	48                   	dec    eax
c000f848:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000f84d:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000f852:	85 c0                	test   eax,eax
c000f854:	75 01                	jne    c000f857 <opcodeFault(regs*, void*)+0x2d8>
c000f856:	fb                   	sti    
c000f857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f85a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f85d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f860:	01 c2                	add    edx,eax
c000f862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f865:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f868:	83 ec 0c             	sub    esp,0xc
c000f86b:	68 77 57 02 c0       	push   0xc0025777
c000f870:	e8 ca d7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	e9 d5 00 00 00       	jmp    c000f952 <opcodeFault(regs*, void*)+0x3d3>
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	68 8a 57 02 c0       	push   0xc002578a
c000f885:	e8 b5 d7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f88a:	83 c4 10             	add    esp,0x10
c000f88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f890:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f896:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f899:	c1 e0 04             	shl    eax,0x4
c000f89c:	01 d0                	add    eax,edx
c000f89e:	83 c0 03             	add    eax,0x3
c000f8a1:	8a 00                	mov    al,BYTE PTR [eax]
c000f8a3:	0f b6 d8             	movzx  ebx,al
c000f8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8a9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f8ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8b2:	c1 e0 04             	shl    eax,0x4
c000f8b5:	01 d0                	add    eax,edx
c000f8b7:	83 c0 02             	add    eax,0x2
c000f8ba:	8a 00                	mov    al,BYTE PTR [eax]
c000f8bc:	0f b6 c8             	movzx  ecx,al
c000f8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f8c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8cb:	c1 e0 04             	shl    eax,0x4
c000f8ce:	01 d0                	add    eax,edx
c000f8d0:	40                   	inc    eax
c000f8d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f8d3:	0f b6 d0             	movzx  edx,al
c000f8d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d9:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f8dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f8e2:	c1 e0 04             	shl    eax,0x4
c000f8e5:	01 f0                	add    eax,esi
c000f8e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f8e9:	0f b6 c0             	movzx  eax,al
c000f8ec:	83 ec 0c             	sub    esp,0xc
c000f8ef:	53                   	push   ebx
c000f8f0:	51                   	push   ecx
c000f8f1:	52                   	push   edx
c000f8f2:	50                   	push   eax
c000f8f3:	68 9c 57 02 c0       	push   0xc002579c
c000f8f8:	e8 42 d7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f8fd:	83 c4 20             	add    esp,0x20
c000f900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f903:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f906:	83 c0 03             	add    eax,0x3
c000f909:	8a 00                	mov    al,BYTE PTR [eax]
c000f90b:	0f b6 d8             	movzx  ebx,al
c000f90e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f911:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f914:	83 c0 02             	add    eax,0x2
c000f917:	8a 00                	mov    al,BYTE PTR [eax]
c000f919:	0f b6 c8             	movzx  ecx,al
c000f91c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f922:	40                   	inc    eax
c000f923:	8a 00                	mov    al,BYTE PTR [eax]
c000f925:	0f b6 d0             	movzx  edx,al
c000f928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f92b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f92e:	8a 00                	mov    al,BYTE PTR [eax]
c000f930:	0f b6 c0             	movzx  eax,al
c000f933:	83 ec 0c             	sub    esp,0xc
c000f936:	53                   	push   ebx
c000f937:	51                   	push   ecx
c000f938:	52                   	push   edx
c000f939:	50                   	push   eax
c000f93a:	68 c4 57 02 c0       	push   0xc00257c4
c000f93f:	e8 fb d6 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c000f944:	83 c4 20             	add    esp,0x20
c000f947:	83 ec 0c             	sub    esp,0xc
c000f94a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f94d:	e8 84 f6 ff ff       	call   c000efd6 <displayDebugInfo(regs*)>
c000f952:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f955:	5b                   	pop    ebx
c000f956:	5e                   	pop    esi
c000f957:	5d                   	pop    ebp
c000f958:	c3                   	ret    

c000f959 <displayProgramFault(char const*)>:
c000f959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f95e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f961:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f967:	85 c0                	test   eax,eax
c000f969:	74 15                	je     c000f980 <displayProgramFault(char const*)+0x27>
c000f96b:	83 ec 0c             	sub    esp,0xc
c000f96e:	6a 04                	push   0x4
c000f970:	6a 0f                	push   0xf
c000f972:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f976:	50                   	push   eax
c000f977:	e8 da b6 ff ff       	call   c000b056 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f97c:	83 c4 1c             	add    esp,0x1c
c000f97f:	c3                   	ret    
c000f980:	c3                   	ret    

c000f981 <setupInterruptController()>:
c000f981:	55                   	push   ebp
c000f982:	89 e5                	mov    ebp,esp
c000f984:	53                   	push   ebx
c000f985:	83 ec 24             	sub    esp,0x24
c000f988:	b8 00 00 00 00       	mov    eax,0x0
c000f98d:	85 c0                	test   eax,eax
c000f98f:	0f 95 c0             	setne  al
c000f992:	84 c0                	test   al,al
c000f994:	74 5b                	je     c000f9f1 <setupInterruptController()+0x70>
c000f996:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f99d:	83 ec 0c             	sub    esp,0xc
c000f9a0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f9a3:	e8 ab a3 ff ff       	call   c0009d53 <malloc>
c000f9a8:	83 c4 10             	add    esp,0x10
c000f9ab:	89 c3                	mov    ebx,eax
c000f9ad:	83 ec 0c             	sub    esp,0xc
c000f9b0:	53                   	push   ebx
c000f9b1:	e8 ec 23 01 00       	call   c0021da2 <APIC::APIC()>
c000f9b6:	83 c4 10             	add    esp,0x10
c000f9b9:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f9bc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f9bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f9c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c4:	83 c0 08             	add    eax,0x8
c000f9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c9:	6a 00                	push   0x0
c000f9cb:	6a 00                	push   0x0
c000f9cd:	6a 00                	push   0x0
c000f9cf:	52                   	push   edx
c000f9d0:	ff d0                	call   eax
c000f9d2:	83 c4 10             	add    esp,0x10
c000f9d5:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000f9da:	83 ec 08             	sub    esp,0x8
c000f9dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f9e0:	50                   	push   eax
c000f9e1:	e8 cc eb ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c000f9e6:	83 c4 10             	add    esp,0x10
c000f9e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f9ec:	e9 79 03 00 00       	jmp    c000fd6a <setupInterruptController()+0x3e9>
c000f9f1:	a0 80 93 02 c0       	mov    al,ds:0xc0029380
c000f9f6:	84 c0                	test   al,al
c000f9f8:	75 14                	jne    c000fa0e <setupInterruptController()+0x8d>
c000f9fa:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000f9ff:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fa05:	83 e2 fe             	and    edx,0xfffffffe
c000fa08:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fa0e:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000fa13:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fa19:	83 e0 01             	and    eax,0x1
c000fa1c:	84 c0                	test   al,al
c000fa1e:	0f 95 c0             	setne  al
c000fa21:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fa24:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fa2b:	83 ec 0c             	sub    esp,0xc
c000fa2e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fa31:	e8 1d a3 ff ff       	call   c0009d53 <malloc>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	89 c3                	mov    ebx,eax
c000fa3b:	83 ec 0c             	sub    esp,0xc
c000fa3e:	53                   	push   ebx
c000fa3f:	e8 b6 28 01 00       	call   c00222fa <PIC::PIC()>
c000fa44:	83 c4 10             	add    esp,0x10
c000fa47:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fa4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fa4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa50:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa52:	83 c0 08             	add    eax,0x8
c000fa55:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa57:	6a 00                	push   0x0
c000fa59:	6a 00                	push   0x0
c000fa5b:	6a 00                	push   0x0
c000fa5d:	52                   	push   edx
c000fa5e:	ff d0                	call   eax
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fa67:	74 73                	je     c000fadc <setupInterruptController()+0x15b>
c000fa69:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fa6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa6f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa71:	83 c0 0c             	add    eax,0xc
c000fa74:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa76:	6a 00                	push   0x0
c000fa78:	6a 00                	push   0x0
c000fa7a:	6a 00                	push   0x0
c000fa7c:	52                   	push   edx
c000fa7d:	ff d0                	call   eax
c000fa7f:	83 c4 10             	add    esp,0x10
c000fa82:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fa86:	74 15                	je     c000fa9d <setupInterruptController()+0x11c>
c000fa88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8d:	83 c0 04             	add    eax,0x4
c000fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa92:	83 ec 0c             	sub    esp,0xc
c000fa95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa98:	ff d0                	call   eax
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000faa4:	83 ec 0c             	sub    esp,0xc
c000faa7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000faaa:	e8 a4 a2 ff ff       	call   c0009d53 <malloc>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	89 c3                	mov    ebx,eax
c000fab4:	83 ec 0c             	sub    esp,0xc
c000fab7:	53                   	push   ebx
c000fab8:	e8 e5 22 01 00       	call   c0021da2 <APIC::APIC()>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fac3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fac9:	8b 00                	mov    eax,DWORD PTR [eax]
c000facb:	83 c0 08             	add    eax,0x8
c000face:	8b 00                	mov    eax,DWORD PTR [eax]
c000fad0:	6a 00                	push   0x0
c000fad2:	6a 00                	push   0x0
c000fad4:	6a 00                	push   0x0
c000fad6:	52                   	push   edx
c000fad7:	ff d0                	call   eax
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c000fae1:	83 ec 08             	sub    esp,0x8
c000fae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fae7:	50                   	push   eax
c000fae8:	e8 c5 ea ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c000faed:	83 c4 10             	add    esp,0x10
c000faf0:	c7 05 a8 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ba8,0x0
c000fafa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fafd:	8b 00                	mov    eax,DWORD PTR [eax]
c000faff:	83 c0 24             	add    eax,0x24
c000fb02:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb04:	6a 00                	push   0x0
c000fb06:	68 60 f5 00 c0       	push   0xc000f560
c000fb0b:	6a 00                	push   0x0
c000fb0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb10:	ff d0                	call   eax
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb18:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb1a:	83 c0 24             	add    eax,0x24
c000fb1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb1f:	6a 00                	push   0x0
c000fb21:	68 60 f5 00 c0       	push   0xc000f560
c000fb26:	6a 01                	push   0x1
c000fb28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb2b:	ff d0                	call   eax
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb33:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb35:	83 c0 24             	add    eax,0x24
c000fb38:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb3a:	6a 00                	push   0x0
c000fb3c:	68 33 ee 00 c0       	push   0xc000ee33
c000fb41:	6a 02                	push   0x2
c000fb43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb46:	ff d0                	call   eax
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb50:	83 c0 24             	add    eax,0x24
c000fb53:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb55:	6a 00                	push   0x0
c000fb57:	68 60 f5 00 c0       	push   0xc000f560
c000fb5c:	6a 03                	push   0x3
c000fb5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb61:	ff d0                	call   eax
c000fb63:	83 c4 10             	add    esp,0x10
c000fb66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb69:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb6b:	83 c0 24             	add    eax,0x24
c000fb6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb70:	6a 00                	push   0x0
c000fb72:	68 60 f5 00 c0       	push   0xc000f560
c000fb77:	6a 04                	push   0x4
c000fb79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb7c:	ff d0                	call   eax
c000fb7e:	83 c4 10             	add    esp,0x10
c000fb81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb84:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb86:	83 c0 24             	add    eax,0x24
c000fb89:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8b:	6a 00                	push   0x0
c000fb8d:	68 60 f5 00 c0       	push   0xc000f560
c000fb92:	6a 05                	push   0x5
c000fb94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fb97:	ff d0                	call   eax
c000fb99:	83 c4 10             	add    esp,0x10
c000fb9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba1:	83 c0 24             	add    eax,0x24
c000fba4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba6:	6a 00                	push   0x0
c000fba8:	68 7f f5 00 c0       	push   0xc000f57f
c000fbad:	6a 06                	push   0x6
c000fbaf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbb2:	ff d0                	call   eax
c000fbb4:	83 c4 10             	add    esp,0x10
c000fbb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbba:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbbc:	83 c0 24             	add    eax,0x24
c000fbbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbc1:	6a 00                	push   0x0
c000fbc3:	68 65 f4 00 c0       	push   0xc000f465
c000fbc8:	6a 07                	push   0x7
c000fbca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbcd:	ff d0                	call   eax
c000fbcf:	83 c4 10             	add    esp,0x10
c000fbd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd7:	83 c0 24             	add    eax,0x24
c000fbda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbdc:	6a 00                	push   0x0
c000fbde:	68 4e ec 00 c0       	push   0xc000ec4e
c000fbe3:	6a 08                	push   0x8
c000fbe5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbe8:	ff d0                	call   eax
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbf2:	83 c0 24             	add    eax,0x24
c000fbf5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbf7:	6a 00                	push   0x0
c000fbf9:	68 60 f5 00 c0       	push   0xc000f560
c000fbfe:	6a 09                	push   0x9
c000fc00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc03:	ff d0                	call   eax
c000fc05:	83 c4 10             	add    esp,0x10
c000fc08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc0d:	83 c0 24             	add    eax,0x24
c000fc10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc12:	6a 00                	push   0x0
c000fc14:	68 60 f5 00 c0       	push   0xc000f560
c000fc19:	6a 0a                	push   0xa
c000fc1b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc1e:	ff d0                	call   eax
c000fc20:	83 c4 10             	add    esp,0x10
c000fc23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc26:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc28:	83 c0 24             	add    eax,0x24
c000fc2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc2d:	6a 00                	push   0x0
c000fc2f:	68 60 f5 00 c0       	push   0xc000f560
c000fc34:	6a 0b                	push   0xb
c000fc36:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc39:	ff d0                	call   eax
c000fc3b:	83 c4 10             	add    esp,0x10
c000fc3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc41:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc43:	83 c0 24             	add    eax,0x24
c000fc46:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc48:	6a 00                	push   0x0
c000fc4a:	68 60 f5 00 c0       	push   0xc000f560
c000fc4f:	6a 0c                	push   0xc
c000fc51:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc54:	ff d0                	call   eax
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc5e:	83 c0 24             	add    eax,0x24
c000fc61:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc63:	6a 00                	push   0x0
c000fc65:	68 d8 f4 00 c0       	push   0xc000f4d8
c000fc6a:	6a 0d                	push   0xd
c000fc6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc6f:	ff d0                	call   eax
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc77:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc79:	83 c0 24             	add    eax,0x24
c000fc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc7e:	6a 00                	push   0x0
c000fc80:	68 11 f5 00 c0       	push   0xc000f511
c000fc85:	6a 0e                	push   0xe
c000fc87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc8a:	ff d0                	call   eax
c000fc8c:	83 c4 10             	add    esp,0x10
c000fc8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc92:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc94:	83 c0 24             	add    eax,0x24
c000fc97:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc99:	6a 00                	push   0x0
c000fc9b:	68 60 f5 00 c0       	push   0xc000f560
c000fca0:	6a 0f                	push   0xf
c000fca2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fca5:	ff d0                	call   eax
c000fca7:	83 c4 10             	add    esp,0x10
c000fcaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcad:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcaf:	83 c0 24             	add    eax,0x24
c000fcb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb4:	6a 00                	push   0x0
c000fcb6:	68 60 f5 00 c0       	push   0xc000f560
c000fcbb:	6a 10                	push   0x10
c000fcbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcc0:	ff d0                	call   eax
c000fcc2:	83 c4 10             	add    esp,0x10
c000fcc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcca:	83 c0 24             	add    eax,0x24
c000fccd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fccf:	6a 00                	push   0x0
c000fcd1:	68 60 f5 00 c0       	push   0xc000f560
c000fcd6:	6a 11                	push   0x11
c000fcd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcdb:	ff d0                	call   eax
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fce3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fce5:	83 c0 24             	add    eax,0x24
c000fce8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcea:	6a 00                	push   0x0
c000fcec:	68 60 f5 00 c0       	push   0xc000f560
c000fcf1:	6a 12                	push   0x12
c000fcf3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcf6:	ff d0                	call   eax
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd00:	83 c0 24             	add    eax,0x24
c000fd03:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd05:	6a 00                	push   0x0
c000fd07:	68 60 f5 00 c0       	push   0xc000f560
c000fd0c:	6a 13                	push   0x13
c000fd0e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd11:	ff d0                	call   eax
c000fd13:	83 c4 10             	add    esp,0x10
c000fd16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd19:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1b:	83 c0 24             	add    eax,0x24
c000fd1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd20:	6a 00                	push   0x0
c000fd22:	68 60 f5 00 c0       	push   0xc000f560
c000fd27:	6a 14                	push   0x14
c000fd29:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd2c:	ff d0                	call   eax
c000fd2e:	83 c4 10             	add    esp,0x10
c000fd31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd34:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd36:	83 c0 24             	add    eax,0x24
c000fd39:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3b:	6a 00                	push   0x0
c000fd3d:	68 60 f5 00 c0       	push   0xc000f560
c000fd42:	6a 1e                	push   0x1e
c000fd44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd47:	ff d0                	call   eax
c000fd49:	83 c4 10             	add    esp,0x10
c000fd4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd4f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd51:	83 c0 24             	add    eax,0x24
c000fd54:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd56:	6a 00                	push   0x0
c000fd58:	68 3f 72 01 c0       	push   0xc001723f
c000fd5d:	6a 60                	push   0x60
c000fd5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd62:	ff d0                	call   eax
c000fd64:	83 c4 10             	add    esp,0x10
c000fd67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd6a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fd6d:	c9                   	leave  
c000fd6e:	c3                   	ret    
c000fd6f:	90                   	nop

c000fd70 <InterruptController::convertLegacyIRQNumber(int)>:
c000fd70:	55                   	push   ebp
c000fd71:	89 e5                	mov    ebp,esp
c000fd73:	83 ec 08             	sub    esp,0x8
c000fd76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd79:	83 ec 0c             	sub    esp,0xc
c000fd7c:	50                   	push   eax
c000fd7d:	e8 30 eb ff ff       	call   c000e8b2 <Device::getName()>
c000fd82:	83 c4 10             	add    esp,0x10
c000fd85:	8a 00                	mov    al,BYTE PTR [eax]
c000fd87:	3c 41                	cmp    al,0x41
c000fd89:	0f 94 c0             	sete   al
c000fd8c:	84 c0                	test   al,al
c000fd8e:	74 28                	je     c000fdb8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fd90:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fd94:	7f 12                	jg     c000fda8 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fd96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd99:	05 60 81 02 c0       	add    eax,0xc0028160
c000fd9e:	8a 00                	mov    al,BYTE PTR [eax]
c000fda0:	0f b6 c0             	movzx  eax,al
c000fda3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fda6:	eb 10                	jmp    c000fdb8 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	68 ec 57 02 c0       	push   0xc00257ec
c000fdb0:	e8 40 52 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fdbb:	c9                   	leave  
c000fdbc:	c3                   	ret    
c000fdbd:	90                   	nop

c000fdbe <startGUI(void*)>:
c000fdbe:	55                   	push   ebp
c000fdbf:	89 e5                	mov    ebp,esp
c000fdc1:	53                   	push   ebx
c000fdc2:	83 ec 04             	sub    esp,0x4
c000fdc5:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000fdca:	48                   	dec    eax
c000fdcb:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000fdd0:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000fdd5:	85 c0                	test   eax,eax
c000fdd7:	75 01                	jne    c000fdda <startGUI(void*)+0x1c>
c000fdd9:	fb                   	sti    
c000fdda:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c000fde0:	83 ec 08             	sub    esp,0x8
c000fde3:	6a 01                	push   0x1
c000fde5:	68 6c 58 02 c0       	push   0xc002586c
c000fdea:	e8 2b 84 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c000fdef:	83 c4 10             	add    esp,0x10
c000fdf2:	83 ec 08             	sub    esp,0x8
c000fdf5:	53                   	push   ebx
c000fdf6:	50                   	push   eax
c000fdf7:	e8 4f 86 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c000fe05:	83 ec 08             	sub    esp,0x8
c000fe08:	6a 01                	push   0x1
c000fe0a:	68 86 58 02 c0       	push   0xc0025886
c000fe0f:	e8 06 84 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	83 ec 08             	sub    esp,0x8
c000fe1a:	53                   	push   ebx
c000fe1b:	50                   	push   eax
c000fe1c:	e8 2a 86 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	90                   	nop
c000fe25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe28:	c9                   	leave  
c000fe29:	c3                   	ret    

c000fe2a <startGUIVESA(void*)>:
c000fe2a:	55                   	push   ebp
c000fe2b:	89 e5                	mov    ebp,esp
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 04             	sub    esp,0x4
c000fe31:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000fe36:	48                   	dec    eax
c000fe37:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000fe3c:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000fe41:	85 c0                	test   eax,eax
c000fe43:	75 01                	jne    c000fe46 <startGUIVESA(void*)+0x1c>
c000fe45:	fb                   	sti    
c000fe46:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c000fe4c:	83 ec 08             	sub    esp,0x8
c000fe4f:	6a 01                	push   0x1
c000fe51:	68 a4 58 02 c0       	push   0xc00258a4
c000fe56:	e8 bf 83 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	83 ec 08             	sub    esp,0x8
c000fe61:	53                   	push   ebx
c000fe62:	50                   	push   eax
c000fe63:	e8 e3 85 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c000fe68:	83 c4 10             	add    esp,0x10
c000fe6b:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c000fe71:	83 ec 08             	sub    esp,0x8
c000fe74:	6a 01                	push   0x1
c000fe76:	68 86 58 02 c0       	push   0xc0025886
c000fe7b:	e8 9a 83 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	83 ec 08             	sub    esp,0x8
c000fe86:	53                   	push   ebx
c000fe87:	50                   	push   eax
c000fe88:	e8 be 85 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	90                   	nop
c000fe91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe94:	c9                   	leave  
c000fe95:	c3                   	ret    

c000fe96 <sendKeyToTerminal(unsigned char)>:
c000fe96:	55                   	push   ebp
c000fe97:	89 e5                	mov    ebp,esp
c000fe99:	83 ec 28             	sub    esp,0x28
c000fe9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fea2:	a1 e4 8a 02 c0       	mov    eax,ds:0xc0028ae4
c000fea7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000feab:	83 ec 08             	sub    esp,0x8
c000feae:	52                   	push   edx
c000feaf:	50                   	push   eax
c000feb0:	e8 47 b6 ff ff       	call   c000b4fc <VgaText::receiveKey(unsigned char)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000febc:	0f 85 8f 00 00 00    	jne    c000ff51 <sendKeyToTerminal(unsigned char)+0xbb>
c000fec2:	fa                   	cli    
c000fec3:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000fec8:	40                   	inc    eax
c000fec9:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000fece:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c000fed3:	40                   	inc    eax
c000fed4:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c000fed9:	a1 c0 8b 02 c0       	mov    eax,ds:0xc0028bc0
c000fede:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fee1:	c7 05 c0 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bc0,0x0
c000feeb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000feef:	74 1f                	je     c000ff10 <sendKeyToTerminal(unsigned char)+0x7a>
c000fef1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fef4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fef7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fefa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fefd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ff00:	83 ec 0c             	sub    esp,0xc
c000ff03:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff06:	e8 d5 92 00 00       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	eb db                	jmp    c000feeb <sendKeyToTerminal(unsigned char)+0x55>
c000ff10:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c000ff15:	48                   	dec    eax
c000ff16:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c000ff1b:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c000ff20:	85 c0                	test   eax,eax
c000ff22:	75 18                	jne    c000ff3c <sendKeyToTerminal(unsigned char)+0xa6>
c000ff24:	a1 80 9f 02 c0       	mov    eax,ds:0xc0029f80
c000ff29:	85 c0                	test   eax,eax
c000ff2b:	74 0f                	je     c000ff3c <sendKeyToTerminal(unsigned char)+0xa6>
c000ff2d:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c000ff37:	e8 e8 8d 00 00       	call   c0018d24 <schedule()>
c000ff3c:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000ff41:	48                   	dec    eax
c000ff42:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c000ff47:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c000ff4c:	85 c0                	test   eax,eax
c000ff4e:	75 01                	jne    c000ff51 <sendKeyToTerminal(unsigned char)+0xbb>
c000ff50:	fb                   	sti    
c000ff51:	90                   	nop
c000ff52:	c9                   	leave  
c000ff53:	c3                   	ret    

c000ff54 <sendKeyboardToken(KeyboardToken)>:
c000ff54:	55                   	push   ebp
c000ff55:	89 e5                	mov    ebp,esp
c000ff57:	83 ec 18             	sub    esp,0x18
c000ff5a:	e8 6f 53 00 00       	call   c00152ce <Krnl::userIOReceived()>
c000ff5f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ff62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff65:	0f b7 c0             	movzx  eax,ax
c000ff68:	83 f2 01             	xor    edx,0x1
c000ff6b:	88 90 e0 8b 02 c0    	mov    BYTE PTR [eax-0x3ffd7420],dl
c000ff71:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c000ff76:	85 c0                	test   eax,eax
c000ff78:	74 24                	je     c000ff9e <sendKeyboardToken(KeyboardToken)+0x4a>
c000ff7a:	8b 0d c8 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028bc8
c000ff80:	83 ec 04             	sub    esp,0x4
c000ff83:	68 e0 8b 02 c0       	push   0xc0028be0
c000ff88:	83 ec 08             	sub    esp,0x8
c000ff8b:	89 e2                	mov    edx,esp
c000ff8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff90:	89 02                	mov    DWORD PTR [edx],eax
c000ff92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff95:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ff99:	ff d1                	call   ecx
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffa1:	66 3d 03 02          	cmp    ax,0x203
c000ffa5:	75 07                	jne    c000ffae <sendKeyboardToken(KeyboardToken)+0x5a>
c000ffa7:	a0 e0 8c 02 c0       	mov    al,ds:0xc0028ce0
c000ffac:	84 c0                	test   al,al
c000ffae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ffb2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ffb5:	a0 e8 8f 02 c0       	mov    al,ds:0xc0028fe8
c000ffba:	38 c2                	cmp    dl,al
c000ffbc:	74 1c                	je     c000ffda <sendKeyboardToken(KeyboardToken)+0x86>
c000ffbe:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ffc1:	a2 e8 8f 02 c0       	mov    ds:0xc0028fe8,al
c000ffc6:	a0 e8 8f 02 c0       	mov    al,ds:0xc0028fe8
c000ffcb:	0f b6 c0             	movzx  eax,al
c000ffce:	83 ec 0c             	sub    esp,0xc
c000ffd1:	50                   	push   eax
c000ffd2:	e8 67 ab ff ff       	call   c000ab3e <setTerminalScrollLock(bool)>
c000ffd7:	83 c4 10             	add    esp,0x10
c000ffda:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000ffdd:	84 c0                	test   al,al
c000ffdf:	0f 84 ae 00 00 00    	je     c0010093 <sendKeyboardToken(KeyboardToken)+0x13f>
c000ffe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe8:	66 3d 10 03          	cmp    ax,0x310
c000ffec:	75 06                	jne    c000fff4 <sendKeyboardToken(KeyboardToken)+0xa0>
c000ffee:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fff7:	66 3d 11 03          	cmp    ax,0x311
c000fffb:	75 06                	jne    c0010003 <sendKeyboardToken(KeyboardToken)+0xaf>
c000fffd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0010003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010006:	66 3d 12 03          	cmp    ax,0x312
c001000a:	75 06                	jne    c0010012 <sendKeyboardToken(KeyboardToken)+0xbe>
c001000c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0010012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010015:	66 3d 13 03          	cmp    ax,0x313
c0010019:	75 06                	jne    c0010021 <sendKeyboardToken(KeyboardToken)+0xcd>
c001001b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0010021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010024:	66 3d 14 03          	cmp    ax,0x314
c0010028:	75 06                	jne    c0010030 <sendKeyboardToken(KeyboardToken)+0xdc>
c001002a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0010030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010033:	66 3d 15 03          	cmp    ax,0x315
c0010037:	75 06                	jne    c001003f <sendKeyboardToken(KeyboardToken)+0xeb>
c0010039:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001003f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010042:	66 3d 16 03          	cmp    ax,0x316
c0010046:	75 06                	jne    c001004e <sendKeyboardToken(KeyboardToken)+0xfa>
c0010048:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001004e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010051:	66 3d 17 03          	cmp    ax,0x317
c0010055:	75 06                	jne    c001005d <sendKeyboardToken(KeyboardToken)+0x109>
c0010057:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001005d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010060:	66 3d 18 03          	cmp    ax,0x318
c0010064:	75 06                	jne    c001006c <sendKeyboardToken(KeyboardToken)+0x118>
c0010066:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001006c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006f:	66 3d 19 03          	cmp    ax,0x319
c0010073:	75 06                	jne    c001007b <sendKeyboardToken(KeyboardToken)+0x127>
c0010075:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001007b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001007e:	66 3d 1a 03          	cmp    ax,0x31a
c0010082:	0f 85 c9 00 00 00    	jne    c0010151 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010088:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001008e:	e9 be 00 00 00       	jmp    c0010151 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010096:	66 3d 10 03          	cmp    ax,0x310
c001009a:	75 0a                	jne    c00100a6 <sendKeyboardToken(KeyboardToken)+0x152>
c001009c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00100a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100a9:	66 3d 11 03          	cmp    ax,0x311
c00100ad:	75 0a                	jne    c00100b9 <sendKeyboardToken(KeyboardToken)+0x165>
c00100af:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00100b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100bc:	66 3d 12 03          	cmp    ax,0x312
c00100c0:	75 0a                	jne    c00100cc <sendKeyboardToken(KeyboardToken)+0x178>
c00100c2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00100c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100cf:	66 3d 13 03          	cmp    ax,0x313
c00100d3:	75 0a                	jne    c00100df <sendKeyboardToken(KeyboardToken)+0x18b>
c00100d5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00100db:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100e2:	66 3d 14 03          	cmp    ax,0x314
c00100e6:	75 0a                	jne    c00100f2 <sendKeyboardToken(KeyboardToken)+0x19e>
c00100e8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00100ee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00100f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100f5:	66 3d 15 03          	cmp    ax,0x315
c00100f9:	75 0a                	jne    c0010105 <sendKeyboardToken(KeyboardToken)+0x1b1>
c00100fb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010101:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010108:	66 3d 16 03          	cmp    ax,0x316
c001010c:	75 0a                	jne    c0010118 <sendKeyboardToken(KeyboardToken)+0x1c4>
c001010e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0010114:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001011b:	66 3d 17 03          	cmp    ax,0x317
c001011f:	75 0a                	jne    c001012b <sendKeyboardToken(KeyboardToken)+0x1d7>
c0010121:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010127:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001012b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001012e:	66 3d 18 03          	cmp    ax,0x318
c0010132:	75 0a                	jne    c001013e <sendKeyboardToken(KeyboardToken)+0x1ea>
c0010134:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001013a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001013e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010141:	66 3d 19 03          	cmp    ax,0x319
c0010145:	75 0a                	jne    c0010151 <sendKeyboardToken(KeyboardToken)+0x1fd>
c0010147:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001014d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010154:	66 3d 00 02          	cmp    ax,0x200
c0010158:	75 2c                	jne    c0010186 <sendKeyboardToken(KeyboardToken)+0x232>
c001015a:	a0 e0 8f 02 c0       	mov    al,ds:0xc0028fe0
c001015f:	83 f0 01             	xor    eax,0x1
c0010162:	84 c0                	test   al,al
c0010164:	74 20                	je     c0010186 <sendKeyboardToken(KeyboardToken)+0x232>
c0010166:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c001016b:	6a 01                	push   0x1
c001016d:	6a 00                	push   0x0
c001016f:	68 be fd 00 c0       	push   0xc000fdbe
c0010174:	50                   	push   eax
c0010175:	e8 8e 89 00 00       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c001017a:	83 c4 10             	add    esp,0x10
c001017d:	c6 05 e0 8f 02 c0 01 	mov    BYTE PTR ds:0xc0028fe0,0x1
c0010184:	eb 33                	jmp    c00101b9 <sendKeyboardToken(KeyboardToken)+0x265>
c0010186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010189:	66 3d 01 02          	cmp    ax,0x201
c001018d:	75 2a                	jne    c00101b9 <sendKeyboardToken(KeyboardToken)+0x265>
c001018f:	a0 e0 8f 02 c0       	mov    al,ds:0xc0028fe0
c0010194:	83 f0 01             	xor    eax,0x1
c0010197:	84 c0                	test   al,al
c0010199:	74 1e                	je     c00101b9 <sendKeyboardToken(KeyboardToken)+0x265>
c001019b:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c00101a0:	6a 01                	push   0x1
c00101a2:	6a 00                	push   0x0
c00101a4:	68 2a fe 00 c0       	push   0xc000fe2a
c00101a9:	50                   	push   eax
c00101aa:	e8 59 89 00 00       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	c6 05 e0 8f 02 c0 01 	mov    BYTE PTR ds:0xc0028fe0,0x1
c00101b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101bc:	66 3d 1d 03          	cmp    ax,0x31d
c00101c0:	75 06                	jne    c00101c8 <sendKeyboardToken(KeyboardToken)+0x274>
c00101c2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00101c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101cb:	66 3d 1c 03          	cmp    ax,0x31c
c00101cf:	75 06                	jne    c00101d7 <sendKeyboardToken(KeyboardToken)+0x283>
c00101d1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00101d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101da:	66 3d 1b 03          	cmp    ax,0x31b
c00101de:	75 06                	jne    c00101e6 <sendKeyboardToken(KeyboardToken)+0x292>
c00101e0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00101e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e9:	66 3d 1e 03          	cmp    ax,0x31e
c00101ed:	75 06                	jne    c00101f5 <sendKeyboardToken(KeyboardToken)+0x2a1>
c00101ef:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00101f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f8:	66 3d 1f 03          	cmp    ax,0x31f
c00101fc:	75 06                	jne    c0010204 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00101fe:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0010204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010207:	66 3d 1a 03          	cmp    ax,0x31a
c001020b:	75 06                	jne    c0010213 <sendKeyboardToken(KeyboardToken)+0x2bf>
c001020d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0010213:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010217:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001021a:	83 f0 01             	xor    eax,0x1
c001021d:	84 c0                	test   al,al
c001021f:	74 77                	je     c0010298 <sendKeyboardToken(KeyboardToken)+0x344>
c0010221:	a0 e1 8c 02 c0       	mov    al,ds:0xc0028ce1
c0010226:	84 c0                	test   al,al
c0010228:	74 41                	je     c001026b <sendKeyboardToken(KeyboardToken)+0x317>
c001022a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001022e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0010232:	74 2b                	je     c001025f <sendKeyboardToken(KeyboardToken)+0x30b>
c0010234:	8b 15 e4 8f 02 c0    	mov    edx,DWORD PTR ds:0xc0028fe4
c001023a:	89 d0                	mov    eax,edx
c001023c:	c1 e0 02             	shl    eax,0x2
c001023f:	01 d0                	add    eax,edx
c0010241:	01 c0                	add    eax,eax
c0010243:	a3 e4 8f 02 c0       	mov    ds:0xc0028fe4,eax
c0010248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001024b:	0f b7 c0             	movzx  eax,ax
c001024e:	8d 50 d0             	lea    edx,[eax-0x30]
c0010251:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c0010256:	01 d0                	add    eax,edx
c0010258:	a3 e4 8f 02 c0       	mov    ds:0xc0028fe4,eax
c001025d:	eb 6d                	jmp    c00102cc <sendKeyboardToken(KeyboardToken)+0x378>
c001025f:	c7 05 e4 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fe4,0x0
c0010269:	eb 61                	jmp    c00102cc <sendKeyboardToken(KeyboardToken)+0x378>
c001026b:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c0010270:	85 c0                	test   eax,eax
c0010272:	74 18                	je     c001028c <sendKeyboardToken(KeyboardToken)+0x338>
c0010274:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c0010279:	0f b6 c0             	movzx  eax,al
c001027c:	83 ec 0c             	sub    esp,0xc
c001027f:	50                   	push   eax
c0010280:	e8 11 fc ff ff       	call   c000fe96 <sendKeyToTerminal(unsigned char)>
c0010285:	83 c4 10             	add    esp,0x10
c0010288:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001028c:	c7 05 e4 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fe4,0x0
c0010296:	eb 34                	jmp    c00102cc <sendKeyboardToken(KeyboardToken)+0x378>
c0010298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001029b:	66 3d 01 01          	cmp    ax,0x101
c001029f:	75 2b                	jne    c00102cc <sendKeyboardToken(KeyboardToken)+0x378>
c00102a1:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c00102a6:	85 c0                	test   eax,eax
c00102a8:	74 18                	je     c00102c2 <sendKeyboardToken(KeyboardToken)+0x36e>
c00102aa:	a1 e4 8f 02 c0       	mov    eax,ds:0xc0028fe4
c00102af:	0f b6 c0             	movzx  eax,al
c00102b2:	83 ec 0c             	sub    esp,0xc
c00102b5:	50                   	push   eax
c00102b6:	e8 db fb ff ff       	call   c000fe96 <sendKeyToTerminal(unsigned char)>
c00102bb:	83 c4 10             	add    esp,0x10
c00102be:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00102c2:	c7 05 e4 8f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028fe4,0x0
c00102cc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00102cf:	83 f0 01             	xor    eax,0x1
c00102d2:	84 c0                	test   al,al
c00102d4:	74 4c                	je     c0010322 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102d6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00102d9:	83 f0 01             	xor    eax,0x1
c00102dc:	84 c0                	test   al,al
c00102de:	74 42                	je     c0010322 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102e0:	a0 e0 8c 02 c0       	mov    al,ds:0xc0028ce0
c00102e5:	83 f0 01             	xor    eax,0x1
c00102e8:	84 c0                	test   al,al
c00102ea:	74 36                	je     c0010322 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00102ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102ef:	66 83 f8 1f          	cmp    ax,0x1f
c00102f3:	76 09                	jbe    c00102fe <sendKeyboardToken(KeyboardToken)+0x3aa>
c00102f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102f8:	66 83 f8 7e          	cmp    ax,0x7e
c00102fc:	76 12                	jbe    c0010310 <sendKeyboardToken(KeyboardToken)+0x3bc>
c00102fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010301:	66 83 f8 0a          	cmp    ax,0xa
c0010305:	74 09                	je     c0010310 <sendKeyboardToken(KeyboardToken)+0x3bc>
c0010307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001030a:	66 83 f8 08          	cmp    ax,0x8
c001030e:	75 12                	jne    c0010322 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0010310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010313:	0f b6 c0             	movzx  eax,al
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	50                   	push   eax
c001031a:	e8 77 fb ff ff       	call   c000fe96 <sendKeyToTerminal(unsigned char)>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010325:	83 f0 01             	xor    eax,0x1
c0010328:	84 c0                	test   al,al
c001032a:	74 4f                	je     c001037b <sendKeyboardToken(KeyboardToken)+0x427>
c001032c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001032f:	83 f0 01             	xor    eax,0x1
c0010332:	84 c0                	test   al,al
c0010334:	74 45                	je     c001037b <sendKeyboardToken(KeyboardToken)+0x427>
c0010336:	a0 e0 8c 02 c0       	mov    al,ds:0xc0028ce0
c001033b:	84 c0                	test   al,al
c001033d:	74 3c                	je     c001037b <sendKeyboardToken(KeyboardToken)+0x427>
c001033f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010342:	66 83 f8 3f          	cmp    ax,0x3f
c0010346:	76 33                	jbe    c001037b <sendKeyboardToken(KeyboardToken)+0x427>
c0010348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001034b:	66 83 f8 7f          	cmp    ax,0x7f
c001034f:	77 2a                	ja     c001037b <sendKeyboardToken(KeyboardToken)+0x427>
c0010351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010354:	88 c2                	mov    dl,al
c0010356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010359:	66 83 f8 5f          	cmp    ax,0x5f
c001035d:	76 04                	jbe    c0010363 <sendKeyboardToken(KeyboardToken)+0x40f>
c001035f:	b0 20                	mov    al,0x20
c0010361:	eb 02                	jmp    c0010365 <sendKeyboardToken(KeyboardToken)+0x411>
c0010363:	b0 00                	mov    al,0x0
c0010365:	29 c2                	sub    edx,eax
c0010367:	88 d0                	mov    al,dl
c0010369:	83 e8 40             	sub    eax,0x40
c001036c:	0f b6 c0             	movzx  eax,al
c001036f:	83 ec 0c             	sub    esp,0xc
c0010372:	50                   	push   eax
c0010373:	e8 1e fb ff ff       	call   c000fe96 <sendKeyToTerminal(unsigned char)>
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001037e:	66 3d 00 03          	cmp    ax,0x300
c0010382:	75 0f                	jne    c0010393 <sendKeyboardToken(KeyboardToken)+0x43f>
c0010384:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010387:	83 f0 01             	xor    eax,0x1
c001038a:	84 c0                	test   al,al
c001038c:	74 05                	je     c0010393 <sendKeyboardToken(KeyboardToken)+0x43f>
c001038e:	e8 1c ab ff ff       	call   c000aeaf <doTerminalCycle()>
c0010393:	90                   	nop
c0010394:	c9                   	leave  
c0010395:	c3                   	ret    

c0010396 <clearInternalKeybuffer(VgaText*)>:
c0010396:	55                   	push   ebp
c0010397:	89 e5                	mov    ebp,esp
c0010399:	83 ec 08             	sub    esp,0x8
c001039c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001039f:	05 32 01 00 00       	add    eax,0x132
c00103a4:	83 ec 0c             	sub    esp,0xc
c00103a7:	50                   	push   eax
c00103a8:	e8 eb 02 ff ff       	call   c0000698 <strlen>
c00103ad:	83 c4 10             	add    esp,0x10
c00103b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00103b3:	81 c2 32 01 00 00    	add    edx,0x132
c00103b9:	83 ec 04             	sub    esp,0x4
c00103bc:	50                   	push   eax
c00103bd:	6a 00                	push   0x0
c00103bf:	52                   	push   edx
c00103c0:	e8 b7 02 ff ff       	call   c000067c <memset>
c00103c5:	83 c4 10             	add    esp,0x10
c00103c8:	90                   	nop
c00103c9:	c9                   	leave  
c00103ca:	c3                   	ret    

c00103cb <readKeyboard(VgaText*, char*, unsigned long)>:
c00103cb:	55                   	push   ebp
c00103cc:	89 e5                	mov    ebp,esp
c00103ce:	83 ec 18             	sub    esp,0x18
c00103d1:	a1 c8 8b 02 c0       	mov    eax,ds:0xc0028bc8
c00103d6:	85 c0                	test   eax,eax
c00103d8:	74 2a                	je     c0010404 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00103da:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00103e0:	8b 0d c8 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028bc8
c00103e6:	83 ec 04             	sub    esp,0x4
c00103e9:	68 e0 8b 02 c0       	push   0xc0028be0
c00103ee:	83 ec 08             	sub    esp,0x8
c00103f1:	89 e2                	mov    edx,esp
c00103f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00103f6:	89 02                	mov    DWORD PTR [edx],eax
c00103f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00103fb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00103ff:	ff d1                	call   ecx
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	fb                   	sti    
c0010405:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001040c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010410:	0f 84 a1 00 00 00    	je     c00104b7 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010419:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c001041f:	84 c0                	test   al,al
c0010421:	75 28                	jne    c001044b <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0010423:	fa                   	cli    
c0010424:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0010429:	40                   	inc    eax
c001042a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001042f:	e8 f0 88 00 00       	call   c0018d24 <schedule()>
c0010434:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0010439:	48                   	dec    eax
c001043a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001043f:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0010444:	85 c0                	test   eax,eax
c0010446:	75 ce                	jne    c0010416 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010448:	fb                   	sti    
c0010449:	eb cb                	jmp    c0010416 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001044b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001044e:	8d 50 01             	lea    edx,[eax+0x1]
c0010451:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010454:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010457:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c001045d:	88 10                	mov    BYTE PTR [eax],dl
c001045f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010462:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010468:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001046e:	05 32 01 00 00       	add    eax,0x132
c0010473:	83 ec 0c             	sub    esp,0xc
c0010476:	50                   	push   eax
c0010477:	e8 1c 02 ff ff       	call   c0000698 <strlen>
c001047c:	83 c4 10             	add    esp,0x10
c001047f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010482:	81 c2 32 01 00 00    	add    edx,0x132
c0010488:	8d 4a 01             	lea    ecx,[edx+0x1]
c001048b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001048e:	81 c2 32 01 00 00    	add    edx,0x132
c0010494:	83 ec 04             	sub    esp,0x4
c0010497:	50                   	push   eax
c0010498:	51                   	push   ecx
c0010499:	52                   	push   edx
c001049a:	e8 15 01 ff ff       	call   c00005b4 <memmove>
c001049f:	83 c4 10             	add    esp,0x10
c00104a2:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00104a5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00104a8:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00104ac:	0f 85 5a ff ff ff    	jne    c001040c <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00104b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00104b5:	eb 03                	jmp    c00104ba <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00104b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00104ba:	c9                   	leave  
c00104bb:	c3                   	ret    

c00104bc <Keyboard::Keyboard(char const*)>:
c00104bc:	83 ec 0c             	sub    esp,0xc
c00104bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c3:	83 ec 08             	sub    esp,0x8
c00104c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ca:	50                   	push   eax
c00104cb:	e8 e6 e2 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c00104d0:	83 c4 10             	add    esp,0x10
c00104d3:	ba c8 58 02 c0       	mov    edx,0xc00258c8
c00104d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dc:	89 10                	mov    DWORD PTR [eax],edx
c00104de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00104ec:	c6 05 c4 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028bc4,0x1
c00104f3:	90                   	nop
c00104f4:	83 c4 0c             	add    esp,0xc
c00104f7:	c3                   	ret    

c00104f8 <Keyboard::~Keyboard()>:
c00104f8:	83 ec 0c             	sub    esp,0xc
c00104fb:	ba c8 58 02 c0       	mov    edx,0xc00258c8
c0010500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010504:	89 10                	mov    DWORD PTR [eax],edx
c0010506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050a:	83 ec 0c             	sub    esp,0xc
c001050d:	50                   	push   eax
c001050e:	e8 6d df ff ff       	call   c000e480 <Device::~Device()>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	90                   	nop
c0010517:	83 c4 0c             	add    esp,0xc
c001051a:	c3                   	ret    
c001051b:	90                   	nop

c001051c <Keyboard::~Keyboard()>:
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	83 ec 0c             	sub    esp,0xc
c0010522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010526:	e8 cd ff ff ff       	call   c00104f8 <Keyboard::~Keyboard()>
c001052b:	83 c4 10             	add    esp,0x10
c001052e:	83 ec 08             	sub    esp,0x8
c0010531:	68 5c 01 00 00       	push   0x15c
c0010536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001053a:	e8 1f ca ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	83 c4 0c             	add    esp,0xc
c0010545:	c3                   	ret    

c0010546 <LogicalDisk::close(int, int, void*)>:
c0010546:	83 c8 ff             	or     eax,0xffffffff
c0010549:	c3                   	ret    

c001054a <LogicalDisk::~LogicalDisk()>:
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	ba 98 59 02 c0       	mov    edx,0xc0025998
c0010552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010556:	89 10                	mov    DWORD PTR [eax],edx
c0010558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055c:	83 ec 0c             	sub    esp,0xc
c001055f:	50                   	push   eax
c0010560:	e8 1b df ff ff       	call   c000e480 <Device::~Device()>
c0010565:	83 c4 10             	add    esp,0x10
c0010568:	90                   	nop
c0010569:	83 c4 0c             	add    esp,0xc
c001056c:	c3                   	ret    
c001056d:	90                   	nop

c001056e <LogicalDisk::~LogicalDisk()>:
c001056e:	83 ec 0c             	sub    esp,0xc
c0010571:	83 ec 0c             	sub    esp,0xc
c0010574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010578:	e8 cd ff ff ff       	call   c001054a <LogicalDisk::~LogicalDisk()>
c001057d:	83 c4 10             	add    esp,0x10
c0010580:	83 ec 08             	sub    esp,0x8
c0010583:	68 74 01 00 00       	push   0x174
c0010588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001058c:	e8 cd c9 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0010591:	83 c4 10             	add    esp,0x10
c0010594:	83 c4 0c             	add    esp,0xc
c0010597:	c3                   	ret    

c0010598 <LogicalDisk::open(int, int, void*)>:
c0010598:	83 ec 18             	sub    esp,0x18
c001059b:	68 f4 58 02 c0       	push   0xc00258f4
c00105a0:	e8 50 4a 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c00105a5:	83 c8 ff             	or     eax,0xffffffff
c00105a8:	83 c4 1c             	add    esp,0x1c
c00105ab:	c3                   	ret    

c00105ac <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00105ac:	53                   	push   ebx
c00105ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105b9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00105bf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00105c5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00105cb:	77 10                	ja     c00105dd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00105cd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00105d3:	89 d3                	mov    ebx,edx
c00105d5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00105db:	72 05                	jb     c00105e2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00105dd:	83 c8 ff             	or     eax,0xffffffff
c00105e0:	89 c2                	mov    edx,eax
c00105e2:	5b                   	pop    ebx
c00105e3:	c3                   	ret    

c00105e4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00105e4:	56                   	push   esi
c00105e5:	83 c8 ff             	or     eax,0xffffffff
c00105e8:	53                   	push   ebx
c00105e9:	89 c2                	mov    edx,eax
c00105eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00105f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105f7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105fd:	77 27                	ja     c0010626 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00105ff:	89 d8                	mov    eax,ebx
c0010601:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010607:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001060d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010612:	89 c2                	mov    edx,eax
c0010614:	73 10                	jae    c0010626 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010616:	89 c8                	mov    eax,ecx
c0010618:	89 da                	mov    edx,ebx
c001061a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010620:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010626:	5b                   	pop    ebx
c0010627:	5e                   	pop    esi
c0010628:	c3                   	ret    
c0010629:	90                   	nop

c001062a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001062a:	83 ec 1c             	sub    esp,0x1c
c001062d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010635:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010641:	89 04 24             	mov    DWORD PTR [esp],eax
c0010644:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010648:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001064c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010650:	83 ec 08             	sub    esp,0x8
c0010653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010657:	50                   	push   eax
c0010658:	e8 59 e1 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c001065d:	83 c4 10             	add    esp,0x10
c0010660:	ba 98 59 02 c0       	mov    edx,0xc0025998
c0010665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010669:	89 10                	mov    DWORD PTR [eax],edx
c001066b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001067a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010685:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001068f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010697:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001069b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00106a1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00106a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00106ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106b2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00106b8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00106be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00106c6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00106cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106d0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00106da:	90                   	nop
c00106db:	83 c4 1c             	add    esp,0x1c
c00106de:	c3                   	ret    
c00106df:	90                   	nop

c00106e0 <LogicalDisk::assignDriveLetter()>:
c00106e0:	55                   	push   ebp
c00106e1:	57                   	push   edi
c00106e2:	56                   	push   esi
c00106e3:	53                   	push   ebx
c00106e4:	83 ec 14             	sub    esp,0x14
c00106e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00106eb:	8b 3d 00 90 02 c0    	mov    edi,DWORD PTR ds:0xc0029000
c00106f1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00106f7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00106fb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010701:	8b 3d 04 90 02 c0    	mov    edi,DWORD PTR ds:0xc0029004
c0010707:	3c 01                	cmp    al,0x1
c0010709:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001070d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010711:	19 c0                	sbb    eax,eax
c0010713:	83 e0 02             	and    eax,0x2
c0010716:	83 c0 41             	add    eax,0x41
c0010719:	0f be e8             	movsx  ebp,al
c001071c:	3c 43                	cmp    al,0x43
c001071e:	75 10                	jne    c0010730 <LogicalDisk::assignDriveLetter()+0x50>
c0010720:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010727:	75 5d                	jne    c0010786 <LogicalDisk::assignDriveLetter()+0xa6>
c0010729:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001072e:	75 56                	jne    c0010786 <LogicalDisk::assignDriveLetter()+0xa6>
c0010730:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010733:	ba 01 00 00 00       	mov    edx,0x1
c0010738:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001073c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010740:	d3 e2                	shl    edx,cl
c0010742:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010746:	89 d7                	mov    edi,edx
c0010748:	89 d6                	mov    esi,edx
c001074a:	c1 ff 1f             	sar    edi,0x1f
c001074d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010751:	21 f9                	and    ecx,edi
c0010753:	09 d1                	or     ecx,edx
c0010755:	75 2f                	jne    c0010786 <LogicalDisk::assignDriveLetter()+0xa6>
c0010757:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001075b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010765:	09 f2                	or     edx,esi
c0010767:	89 15 00 90 02 c0    	mov    DWORD PTR ds:0xc0029000,edx
c001076d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010771:	09 fa                	or     edx,edi
c0010773:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010777:	89 15 04 90 02 c0    	mov    DWORD PTR ds:0xc0029004,edx
c001077d:	89 1c bd 20 90 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6fe0],ebx
c0010784:	eb 08                	jmp    c001078e <LogicalDisk::assignDriveLetter()+0xae>
c0010786:	45                   	inc    ebp
c0010787:	40                   	inc    eax
c0010788:	3c 5b                	cmp    al,0x5b
c001078a:	75 90                	jne    c001071c <LogicalDisk::assignDriveLetter()+0x3c>
c001078c:	31 c0                	xor    eax,eax
c001078e:	83 c4 14             	add    esp,0x14
c0010791:	5b                   	pop    ebx
c0010792:	5e                   	pop    esi
c0010793:	5f                   	pop    edi
c0010794:	5d                   	pop    ebp
c0010795:	c3                   	ret    

c0010796 <LogicalDisk::mount()>:
c0010796:	56                   	push   esi
c0010797:	53                   	push   ebx
c0010798:	83 ec 1c             	sub    esp,0x1c
c001079b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001079f:	8b 1d 94 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b94
c00107a5:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00107ac:	50                   	push   eax
c00107ad:	68 18 59 02 c0       	push   0xc0025918
c00107b2:	e8 88 c8 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00107b7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	85 db                	test   ebx,ebx
c00107c6:	74 4e                	je     c0010816 <LogicalDisk::mount()+0x80>
c00107c8:	83 ec 0c             	sub    esp,0xc
c00107cb:	68 39 59 02 c0       	push   0xc0025939
c00107d0:	e8 6a c8 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00107df:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107e1:	83 e8 41             	sub    eax,0x41
c00107e4:	50                   	push   eax
c00107e5:	56                   	push   esi
c00107e6:	53                   	push   ebx
c00107e7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00107ea:	83 c4 10             	add    esp,0x10
c00107ed:	84 c0                	test   al,al
c00107ef:	74 20                	je     c0010811 <LogicalDisk::mount()+0x7b>
c00107f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00107f5:	83 ec 0c             	sub    esp,0xc
c00107f8:	68 55 59 02 c0       	push   0xc0025955
c00107fd:	e8 3d c8 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0010802:	83 c4 10             	add    esp,0x10
c0010805:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001080b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001080f:	eb 07                	jmp    c0010818 <LogicalDisk::mount()+0x82>
c0010811:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010814:	eb ae                	jmp    c00107c4 <LogicalDisk::mount()+0x2e>
c0010816:	31 c0                	xor    eax,eax
c0010818:	83 c4 14             	add    esp,0x14
c001081b:	5b                   	pop    ebx
c001081c:	5e                   	pop    esi
c001081d:	c3                   	ret    

c001081e <LogicalDisk::unmount()>:
c001081e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010822:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001082c:	c3                   	ret    
c001082d:	90                   	nop

c001082e <LogicalDisk::eject()>:
c001082e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010832:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010838:	8b 10                	mov    edx,DWORD PTR [eax]
c001083a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001083e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010841:	90                   	nop

c0010842 <LogicalDisk::unassignDriveLetter()>:
c0010842:	57                   	push   edi
c0010843:	56                   	push   esi
c0010844:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010848:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001084f:	84 c9                	test   cl,cl
c0010851:	75 0f                	jne    c0010862 <LogicalDisk::unassignDriveLetter()+0x20>
c0010853:	c7 44 24 0c 6e 59 02 c0 	mov    DWORD PTR [esp+0xc],0xc002596e
c001085b:	5e                   	pop    esi
c001085c:	5f                   	pop    edi
c001085d:	e9 93 47 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c0010862:	83 e9 41             	sub    ecx,0x41
c0010865:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001086c:	b8 01 00 00 00       	mov    eax,0x1
c0010871:	c7 04 8d 20 90 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6fe0],0x0
c001087c:	d3 e0                	shl    eax,cl
c001087e:	89 c7                	mov    edi,eax
c0010880:	f7 d0                	not    eax
c0010882:	c1 ff 1f             	sar    edi,0x1f
c0010885:	21 05 00 90 02 c0    	and    DWORD PTR ds:0xc0029000,eax
c001088b:	89 fe                	mov    esi,edi
c001088d:	f7 d6                	not    esi
c001088f:	21 35 04 90 02 c0    	and    DWORD PTR ds:0xc0029004,esi
c0010895:	5e                   	pop    esi
c0010896:	5f                   	pop    edi
c0010897:	c3                   	ret    

c0010898 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010898:	57                   	push   edi
c0010899:	56                   	push   esi
c001089a:	53                   	push   ebx
c001089b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001089f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00108a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108ab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00108b1:	77 41                	ja     c00108f4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00108b3:	99                   	cdq    
c00108b4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00108ba:	01 c8                	add    eax,ecx
c00108bc:	11 da                	adc    edx,ebx
c00108be:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00108c4:	19 d7                	sbb    edi,edx
c00108c6:	72 33                	jb     c00108fb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00108c8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00108ce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00108d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00108d8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00108dc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00108e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00108e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108ec:	5b                   	pop    ebx
c00108ed:	5e                   	pop    esi
c00108ee:	5f                   	pop    edi
c00108ef:	e9 f2 0a 00 00       	jmp    c00113e6 <VCache::read(unsigned long long, int, void*)>
c00108f4:	b8 05 00 00 00       	mov    eax,0x5
c00108f9:	eb 05                	jmp    c0010900 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00108fb:	b8 07 00 00 00       	mov    eax,0x7
c0010900:	5b                   	pop    ebx
c0010901:	5e                   	pop    esi
c0010902:	5f                   	pop    edi
c0010903:	c3                   	ret    

c0010904 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010904:	57                   	push   edi
c0010905:	56                   	push   esi
c0010906:	53                   	push   ebx
c0010907:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001090b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001090f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010917:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001091d:	77 41                	ja     c0010960 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001091f:	99                   	cdq    
c0010920:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010926:	01 c8                	add    eax,ecx
c0010928:	11 da                	adc    edx,ebx
c001092a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010930:	19 d7                	sbb    edi,edx
c0010932:	72 33                	jb     c0010967 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010934:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001093a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010940:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010944:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010948:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001094e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010958:	5b                   	pop    ebx
c0010959:	5e                   	pop    esi
c001095a:	5f                   	pop    edi
c001095b:	e9 8c 09 00 00       	jmp    c00112ec <VCache::write(unsigned long long, int, void*)>
c0010960:	b8 05 00 00 00       	mov    eax,0x5
c0010965:	eb 05                	jmp    c001096c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010967:	b8 07 00 00 00       	mov    eax,0x7
c001096c:	5b                   	pop    ebx
c001096d:	5e                   	pop    esi
c001096e:	5f                   	pop    edi
c001096f:	c3                   	ret    

c0010970 <Mouse::Mouse(char const*)>:
c0010970:	83 ec 0c             	sub    esp,0xc
c0010973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010977:	83 ec 08             	sub    esp,0x8
c001097a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097e:	50                   	push   eax
c001097f:	e8 32 de ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	ba c4 59 02 c0       	mov    edx,0xc00259c4
c001098c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010990:	89 10                	mov    DWORD PTR [eax],edx
c0010992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010996:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00109a0:	90                   	nop
c00109a1:	83 c4 0c             	add    esp,0xc
c00109a4:	c3                   	ret    
c00109a5:	90                   	nop
c00109a6:	66 90                	xchg   ax,ax

c00109a8 <Mouse::~Mouse()>:
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	ba c4 59 02 c0       	mov    edx,0xc00259c4
c00109b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b4:	89 10                	mov    DWORD PTR [eax],edx
c00109b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ba:	83 ec 0c             	sub    esp,0xc
c00109bd:	50                   	push   eax
c00109be:	e8 bd da ff ff       	call   c000e480 <Device::~Device()>
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	90                   	nop
c00109c7:	83 c4 0c             	add    esp,0xc
c00109ca:	c3                   	ret    
c00109cb:	90                   	nop

c00109cc <Mouse::~Mouse()>:
c00109cc:	83 ec 0c             	sub    esp,0xc
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d6:	e8 cd ff ff ff       	call   c00109a8 <Mouse::~Mouse()>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	83 ec 08             	sub    esp,0x8
c00109e1:	68 58 01 00 00       	push   0x158
c00109e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ea:	e8 6f c5 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00109ef:	83 c4 10             	add    esp,0x10
c00109f2:	83 c4 0c             	add    esp,0xc
c00109f5:	c3                   	ret    

c00109f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00109f6:	55                   	push   ebp
c00109f7:	57                   	push   edi
c00109f8:	56                   	push   esi
c00109f9:	53                   	push   ebx
c00109fa:	81 ec 28 01 00 00    	sub    esp,0x128
c0010a00:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010a07:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010a0e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010a15:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010a1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a20:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010a24:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010a2b:	e8 82 de ff ff       	call   c000e8b2 <Device::getName()>
c0010a30:	5a                   	pop    edx
c0010a31:	59                   	pop    ecx
c0010a32:	50                   	push   eax
c0010a33:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010a37:	55                   	push   ebp
c0010a38:	e8 fb fc fe ff       	call   c0000738 <strcpy>
c0010a3d:	5b                   	pop    ebx
c0010a3e:	58                   	pop    eax
c0010a3f:	68 e8 59 02 c0       	push   0xc00259e8
c0010a44:	55                   	push   ebp
c0010a45:	e8 2e fe fe ff       	call   c0000878 <strcat>
c0010a4a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010a51:	e8 fd 92 ff ff       	call   c0009d53 <malloc>
c0010a56:	83 c4 0c             	add    esp,0xc
c0010a59:	89 c3                	mov    ebx,eax
c0010a5b:	57                   	push   edi
c0010a5c:	56                   	push   esi
c0010a5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a65:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010a6c:	55                   	push   ebp
c0010a6d:	50                   	push   eax
c0010a6e:	e8 b7 fb ff ff       	call   c001062a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010a73:	83 c4 14             	add    esp,0x14
c0010a76:	53                   	push   ebx
c0010a77:	e8 64 fc ff ff       	call   c00106e0 <LogicalDisk::assignDriveLetter()>
c0010a7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a7f:	e8 12 fd ff ff       	call   c0010796 <LogicalDisk::mount()>
c0010a84:	58                   	pop    eax
c0010a85:	5a                   	pop    edx
c0010a86:	53                   	push   ebx
c0010a87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010a8e:	e8 1f db ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0010a93:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010a99:	5b                   	pop    ebx
c0010a9a:	5e                   	pop    esi
c0010a9b:	5f                   	pop    edi
c0010a9c:	5d                   	pop    ebp
c0010a9d:	c3                   	ret    

c0010a9e <createPartitionsForDisk(PhysicalDisk*)>:
c0010a9e:	55                   	push   ebp
c0010a9f:	57                   	push   edi
c0010aa0:	56                   	push   esi
c0010aa1:	53                   	push   ebx
c0010aa2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010aa8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010aaf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010ab5:	3d 00 02 00 00       	cmp    eax,0x200
c0010aba:	74 27                	je     c0010ae3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010abc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010ac2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010ac8:	83 ec 10             	sub    esp,0x10
c0010acb:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010acf:	99                   	cdq    
c0010ad0:	c1 e6 0a             	shl    esi,0xa
c0010ad3:	52                   	push   edx
c0010ad4:	89 fd                	mov    ebp,edi
c0010ad6:	50                   	push   eax
c0010ad7:	55                   	push   ebp
c0010ad8:	56                   	push   esi
c0010ad9:	e8 2e 23 01 00       	call   c0022e0c <__udivdi3>
c0010ade:	e9 b1 00 00 00       	jmp    c0010b94 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ae8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010aec:	56                   	push   esi
c0010aed:	6a 01                	push   0x1
c0010aef:	6a 00                	push   0x0
c0010af1:	6a 00                	push   0x0
c0010af3:	53                   	push   ebx
c0010af4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010af7:	83 c4 20             	add    esp,0x20
c0010afa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010b02:	75 0a                	jne    c0010b0e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010b04:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010b0c:	74 2c                	je     c0010b3a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010b0e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b14:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b1a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b20:	83 ec 10             	sub    esp,0x10
c0010b23:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b27:	89 f7                	mov    edi,esi
c0010b29:	c1 e0 0a             	shl    eax,0xa
c0010b2c:	c1 ff 1f             	sar    edi,0x1f
c0010b2f:	57                   	push   edi
c0010b30:	56                   	push   esi
c0010b31:	52                   	push   edx
c0010b32:	50                   	push   eax
c0010b33:	e8 d4 22 01 00       	call   c0022e0c <__udivdi3>
c0010b38:	eb 5a                	jmp    c0010b94 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010b3a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010b41:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010b48:	83 e1 7f             	and    ecx,0x7f
c0010b4b:	83 e0 7f             	and    eax,0x7f
c0010b4e:	01 c1                	add    ecx,eax
c0010b50:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010b57:	83 e0 7f             	and    eax,0x7f
c0010b5a:	01 c1                	add    ecx,eax
c0010b5c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010b63:	83 e0 7f             	and    eax,0x7f
c0010b66:	00 c1                	add    cl,al
c0010b68:	74 41                	je     c0010bab <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010b6a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010b70:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010b76:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010b7c:	83 ec 10             	sub    esp,0x10
c0010b7f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010b83:	89 f7                	mov    edi,esi
c0010b85:	c1 e0 0a             	shl    eax,0xa
c0010b88:	c1 ff 1f             	sar    edi,0x1f
c0010b8b:	57                   	push   edi
c0010b8c:	56                   	push   esi
c0010b8d:	52                   	push   edx
c0010b8e:	50                   	push   eax
c0010b8f:	e8 78 22 01 00       	call   c0022e0c <__udivdi3>
c0010b94:	83 c4 14             	add    esp,0x14
c0010b97:	52                   	push   edx
c0010b98:	50                   	push   eax
c0010b99:	6a 00                	push   0x0
c0010b9b:	6a 00                	push   0x0
c0010b9d:	53                   	push   ebx
c0010b9e:	e8 53 fe ff ff       	call   c00109f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010ba3:	83 c4 20             	add    esp,0x20
c0010ba6:	e9 79 01 00 00       	jmp    c0010d24 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010bab:	89 f0                	mov    eax,esi
c0010bad:	31 f6                	xor    esi,esi
c0010baf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010bb6:	75 02                	jne    c0010bba <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010bb8:	89 f1                	mov    ecx,esi
c0010bba:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010bc1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010bc8:	c1 e2 08             	shl    edx,0x8
c0010bcb:	c1 e7 10             	shl    edi,0x10
c0010bce:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010bd6:	09 fa                	or     edx,edi
c0010bd8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010be0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010be7:	83 c0 10             	add    eax,0x10
c0010bea:	09 fa                	or     edx,edi
c0010bec:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010bf3:	c1 e7 18             	shl    edi,0x18
c0010bf6:	09 fa                	or     edx,edi
c0010bf8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010bff:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010c03:	c1 e7 10             	shl    edi,0x10
c0010c06:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010c0d:	c1 e2 08             	shl    edx,0x8
c0010c10:	09 fa                	or     edx,edi
c0010c12:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010c19:	09 fa                	or     edx,edi
c0010c1b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010c22:	c1 e7 18             	shl    edi,0x18
c0010c25:	09 fa                	or     edx,edi
c0010c27:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010c2b:	46                   	inc    esi
c0010c2c:	83 fe 04             	cmp    esi,0x4
c0010c2f:	0f 85 7a ff ff ff    	jne    c0010baf <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c39:	83 f0 01             	xor    eax,0x1
c0010c3c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c40:	75 57                	jne    c0010c99 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010c46:	83 f0 01             	xor    eax,0x1
c0010c49:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010c4d:	75 4a                	jne    c0010c99 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010c4f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010c53:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010c5b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010c63:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010c69:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010c6f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010c75:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010c79:	89 f7                	mov    edi,esi
c0010c7b:	c1 e0 0a             	shl    eax,0xa
c0010c7e:	c1 ff 1f             	sar    edi,0x1f
c0010c81:	57                   	push   edi
c0010c82:	56                   	push   esi
c0010c83:	52                   	push   edx
c0010c84:	50                   	push   eax
c0010c85:	e8 82 21 01 00       	call   c0022e0c <__udivdi3>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010c95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010c99:	84 c9                	test   cl,cl
c0010c9b:	74 53                	je     c0010cf0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010c9d:	0f b6 c9             	movzx  ecx,cl
c0010ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010ca8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cac:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010cb8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010cbc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010cc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010cd0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010cd4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010cd8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010cdc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010ce0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ce4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010ce8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010cec:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010cf0:	31 ed                	xor    ebp,ebp
c0010cf2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010cf6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010cfa:	89 f8                	mov    eax,edi
c0010cfc:	09 f0                	or     eax,esi
c0010cfe:	74 1e                	je     c0010d1e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010d00:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010d04:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010d08:	89 d1                	mov    ecx,edx
c0010d0a:	09 c1                	or     ecx,eax
c0010d0c:	74 10                	je     c0010d1e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010d0e:	83 ec 0c             	sub    esp,0xc
c0010d11:	57                   	push   edi
c0010d12:	56                   	push   esi
c0010d13:	52                   	push   edx
c0010d14:	50                   	push   eax
c0010d15:	53                   	push   ebx
c0010d16:	e8 db fc ff ff       	call   c00109f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010d1b:	83 c4 20             	add    esp,0x20
c0010d1e:	45                   	inc    ebp
c0010d1f:	83 fd 04             	cmp    ebp,0x4
c0010d22:	75 ce                	jne    c0010cf2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010d24:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010d2a:	5b                   	pop    ebx
c0010d2b:	5e                   	pop    esi
c0010d2c:	5f                   	pop    edi
c0010d2d:	5d                   	pop    ebp
c0010d2e:	c3                   	ret    
c0010d2f:	90                   	nop

c0010d30 <Serial::Serial(char const*)>:
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d37:	83 ec 08             	sub    esp,0x8
c0010d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d3e:	50                   	push   eax
c0010d3f:	e8 72 da ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010d44:	83 c4 10             	add    esp,0x10
c0010d47:	ba fc 59 02 c0       	mov    edx,0xc00259fc
c0010d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d50:	89 10                	mov    DWORD PTR [eax],edx
c0010d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d56:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010d60:	90                   	nop
c0010d61:	83 c4 0c             	add    esp,0xc
c0010d64:	c3                   	ret    
c0010d65:	90                   	nop
c0010d66:	66 90                	xchg   ax,ax

c0010d68 <Serial::~Serial()>:
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	ba fc 59 02 c0       	mov    edx,0xc00259fc
c0010d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d74:	89 10                	mov    DWORD PTR [eax],edx
c0010d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d7a:	83 ec 0c             	sub    esp,0xc
c0010d7d:	50                   	push   eax
c0010d7e:	e8 fd d6 ff ff       	call   c000e480 <Device::~Device()>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	90                   	nop
c0010d87:	83 c4 0c             	add    esp,0xc
c0010d8a:	c3                   	ret    
c0010d8b:	90                   	nop

c0010d8c <Serial::~Serial()>:
c0010d8c:	83 ec 0c             	sub    esp,0xc
c0010d8f:	83 ec 0c             	sub    esp,0xc
c0010d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d96:	e8 cd ff ff ff       	call   c0010d68 <Serial::~Serial()>
c0010d9b:	83 c4 10             	add    esp,0x10
c0010d9e:	83 ec 08             	sub    esp,0x8
c0010da1:	68 58 01 00 00       	push   0x158
c0010da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010daa:	e8 af c1 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	83 c4 0c             	add    esp,0xc
c0010db5:	c3                   	ret    
c0010db6:	66 90                	xchg   ax,ax

c0010db8 <Timer::Timer(char const*)>:
c0010db8:	83 ec 0c             	sub    esp,0xc
c0010dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbf:	83 ec 08             	sub    esp,0x8
c0010dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc6:	50                   	push   eax
c0010dc7:	e8 ea d9 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	ba 40 5a 02 c0       	mov    edx,0xc0025a40
c0010dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd8:	89 10                	mov    DWORD PTR [eax],edx
c0010dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dde:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010de8:	90                   	nop
c0010de9:	83 c4 0c             	add    esp,0xc
c0010dec:	c3                   	ret    
c0010ded:	90                   	nop
c0010dee:	66 90                	xchg   ax,ax

c0010df0 <Timer::~Timer()>:
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	ba 40 5a 02 c0       	mov    edx,0xc0025a40
c0010df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dfc:	89 10                	mov    DWORD PTR [eax],edx
c0010dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e02:	83 ec 0c             	sub    esp,0xc
c0010e05:	50                   	push   eax
c0010e06:	e8 75 d6 ff ff       	call   c000e480 <Device::~Device()>
c0010e0b:	83 c4 10             	add    esp,0x10
c0010e0e:	90                   	nop
c0010e0f:	83 c4 0c             	add    esp,0xc
c0010e12:	c3                   	ret    
c0010e13:	90                   	nop

c0010e14 <Timer::~Timer()>:
c0010e14:	83 ec 0c             	sub    esp,0xc
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1e:	e8 cd ff ff ff       	call   c0010df0 <Timer::~Timer()>
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	83 ec 08             	sub    esp,0x8
c0010e29:	68 5c 01 00 00       	push   0x15c
c0010e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e32:	e8 27 c1 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	83 c4 0c             	add    esp,0xc
c0010e3d:	c3                   	ret    

c0010e3e <Timer::read()>:
c0010e3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e42:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010e48:	c3                   	ret    

c0010e49 <timerHandler(unsigned int)>:
c0010e49:	56                   	push   esi
c0010e4a:	53                   	push   ebx
c0010e4b:	51                   	push   ecx
c0010e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e50:	01 05 8c 90 02 c0    	add    DWORD PTR ds:0xc002908c,eax
c0010e56:	80 3d 6d 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a6d,0x0
c0010e5d:	0f 84 49 01 00 00    	je     c0010fac <timerHandler(unsigned int)+0x163>
c0010e63:	fa                   	cli    
c0010e64:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0010e6a:	83 ec 0c             	sub    esp,0xc
c0010e6d:	ff 05 84 9f 02 c0    	inc    DWORD PTR ds:0xc0029f84
c0010e73:	68 98 9f 02 c0       	push   0xc0029f98
c0010e78:	e8 5f 25 01 00       	call   c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	84 c0                	test   al,al
c0010e82:	0f 85 a0 00 00 00    	jne    c0010f28 <timerHandler(unsigned int)+0xdf>
c0010e88:	83 ec 0c             	sub    esp,0xc
c0010e8b:	68 98 9f 02 c0       	push   0xc0029f98
c0010e90:	e8 63 25 01 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	89 c6                	mov    esi,eax
c0010e9a:	66 90                	xchg   ax,ax
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	68 98 9f 02 c0       	push   0xc0029f98
c0010ea4:	e8 4f 25 01 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ea9:	c7 04 24 98 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f98
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	e8 49 25 01 00       	call   c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010eb7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	3b 05 8c 90 02 c0    	cmp    eax,DWORD PTR ds:0xc002908c
c0010ec3:	77 23                	ja     c0010ee8 <timerHandler(unsigned int)+0x9f>
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	53                   	push   ebx
c0010ec9:	e8 12 83 00 00       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	39 de                	cmp    esi,ebx
c0010ed3:	75 27                	jne    c0010efc <timerHandler(unsigned int)+0xb3>
c0010ed5:	83 ec 0c             	sub    esp,0xc
c0010ed8:	68 98 9f 02 c0       	push   0xc0029f98
c0010edd:	e8 16 25 01 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ee2:	89 c6                	mov    esi,eax
c0010ee4:	eb 12                	jmp    c0010ef8 <timerHandler(unsigned int)+0xaf>
c0010ee6:	66 90                	xchg   ax,ax
c0010ee8:	52                   	push   edx
c0010ee9:	52                   	push   edx
c0010eea:	53                   	push   ebx
c0010eeb:	68 98 9f 02 c0       	push   0xc0029f98
c0010ef0:	e8 c3 25 01 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef8:	83 c4 10             	add    esp,0x10
c0010efb:	90                   	nop
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	68 98 9f 02 c0       	push   0xc0029f98
c0010f04:	e8 d3 24 01 00       	call   c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	84 c0                	test   al,al
c0010f0e:	75 18                	jne    c0010f28 <timerHandler(unsigned int)+0xdf>
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	68 98 9f 02 c0       	push   0xc0029f98
c0010f18:	e8 db 24 01 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010f1d:	83 c4 10             	add    esp,0x10
c0010f20:	39 f0                	cmp    eax,esi
c0010f22:	0f 85 74 ff ff ff    	jne    c0010e9c <timerHandler(unsigned int)+0x53>
c0010f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f2d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010f31:	74 41                	je     c0010f74 <timerHandler(unsigned int)+0x12b>
c0010f33:	80 3d 6c 8a 02 c0 00 	cmp    BYTE PTR ds:0xc0028a6c,0x0
c0010f3a:	74 38                	je     c0010f74 <timerHandler(unsigned int)+0x12b>
c0010f3c:	fa                   	cli    
c0010f3d:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0010f43:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c0010f48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f4e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010f51:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010f57:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010f5a:	72 08                	jb     c0010f64 <timerHandler(unsigned int)+0x11b>
c0010f5c:	e8 c3 7d 00 00       	call   c0018d24 <schedule()>
c0010f61:	8d 76 00             	lea    esi,[esi+0x0]
c0010f64:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0010f69:	48                   	dec    eax
c0010f6a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0010f6f:	75 03                	jne    c0010f74 <timerHandler(unsigned int)+0x12b>
c0010f71:	fb                   	sti    
c0010f72:	66 90                	xchg   ax,ax
c0010f74:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0010f79:	48                   	dec    eax
c0010f7a:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c0010f7f:	75 1b                	jne    c0010f9c <timerHandler(unsigned int)+0x153>
c0010f81:	83 3d 80 9f 02 c0 00 	cmp    DWORD PTR ds:0xc0029f80,0x0
c0010f88:	74 12                	je     c0010f9c <timerHandler(unsigned int)+0x153>
c0010f8a:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c0010f94:	e8 8b 7d 00 00       	call   c0018d24 <schedule()>
c0010f99:	8d 76 00             	lea    esi,[esi+0x0]
c0010f9c:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0010fa1:	48                   	dec    eax
c0010fa2:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0010fa7:	75 03                	jne    c0010fac <timerHandler(unsigned int)+0x163>
c0010fa9:	fb                   	sti    
c0010faa:	66 90                	xchg   ax,ax
c0010fac:	58                   	pop    eax
c0010fad:	5b                   	pop    ebx
c0010fae:	5e                   	pop    esi
c0010faf:	c3                   	ret    

c0010fb0 <setupTimer(int)>:
c0010fb0:	57                   	push   edi
c0010fb1:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0010fb6:	56                   	push   esi
c0010fb7:	53                   	push   ebx
c0010fb8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010fcb:	e8 e2 d8 ff ff       	call   c000e8b2 <Device::getName()>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010fd6:	0f 85 94 00 00 00    	jne    c0011070 <setupTimer(int)+0xc0>
c0010fdc:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0010fe1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010fe8:	0f 84 82 00 00 00    	je     c0011070 <setupTimer(int)+0xc0>
c0010fee:	83 ec 0c             	sub    esp,0xc
c0010ff1:	68 5c 01 00 00       	push   0x15c
c0010ff6:	e8 58 8d ff ff       	call   c0009d53 <malloc>
c0010ffb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ffe:	89 c3                	mov    ebx,eax
c0011000:	e8 df 19 01 00       	call   c00229e4 <PIT::PIT()>
c0011005:	59                   	pop    ecx
c0011006:	5f                   	pop    edi
c0011007:	53                   	push   ebx
c0011008:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c001100e:	e8 9f d5 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0011013:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011015:	6a 00                	push   0x0
c0011017:	6a 00                	push   0x0
c0011019:	56                   	push   esi
c001101a:	53                   	push   ebx
c001101b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001101e:	83 c4 14             	add    esp,0x14
c0011021:	68 60 01 00 00       	push   0x160
c0011026:	e8 28 8d ff ff       	call   c0009d53 <malloc>
c001102b:	89 04 24             	mov    DWORD PTR [esp],eax
c001102e:	89 c7                	mov    edi,eax
c0011030:	e8 63 18 01 00       	call   c0022898 <APICTimer::APICTimer()>
c0011035:	6a 00                	push   0x0
c0011037:	6a 00                	push   0x0
c0011039:	56                   	push   esi
c001103a:	57                   	push   edi
c001103b:	e8 58 17 01 00       	call   c0022798 <APICTimer::open(int, int, void*)>
c0011040:	83 c4 20             	add    esp,0x20
c0011043:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011045:	6a 00                	push   0x0
c0011047:	6a 00                	push   0x0
c0011049:	6a 00                	push   0x0
c001104b:	53                   	push   ebx
c001104c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001104f:	58                   	pop    eax
c0011050:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011055:	5a                   	pop    edx
c0011056:	57                   	push   edi
c0011057:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001105d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011063:	e8 4a d5 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	eb 37                	jmp    c00110a4 <setupTimer(int)+0xf4>
c001106d:	8d 76 00             	lea    esi,[esi+0x0]
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	68 5c 01 00 00       	push   0x15c
c0011078:	e8 d6 8c ff ff       	call   c0009d53 <malloc>
c001107d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011080:	89 c3                	mov    ebx,eax
c0011082:	e8 5d 19 01 00       	call   c00229e4 <PIT::PIT()>
c0011087:	58                   	pop    eax
c0011088:	5a                   	pop    edx
c0011089:	53                   	push   ebx
c001108a:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0011090:	e8 1d d5 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0011095:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011097:	6a 00                	push   0x0
c0011099:	6a 00                	push   0x0
c001109b:	56                   	push   esi
c001109c:	53                   	push   ebx
c001109d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110a0:	83 c4 20             	add    esp,0x20
c00110a3:	90                   	nop
c00110a4:	89 d8                	mov    eax,ebx
c00110a6:	5b                   	pop    ebx
c00110a7:	5e                   	pop    esi
c00110a8:	5f                   	pop    edi
c00110a9:	c3                   	ret    
c00110aa:	66 90                	xchg   ax,ax

c00110ac <VCache::VCache(PhysicalDisk*)>:
c00110ac:	53                   	push   ebx
c00110ad:	83 ec 18             	sub    esp,0x18
c00110b0:	ba 70 5a 02 c0       	mov    edx,0xc0025a70
c00110b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110b9:	89 10                	mov    DWORD PTR [eax],edx
c00110bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110bf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00110c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ca:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00110d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110d5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00110dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00110e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00110ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00110f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0011100:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011104:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001110c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0011113:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001111a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001111e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0011122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011126:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001112a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001112e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011136:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001113d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011145:	83 ec 0c             	sub    esp,0xc
c0011148:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001114c:	e8 02 8c ff ff       	call   c0009d53 <malloc>
c0011151:	83 c4 10             	add    esp,0x10
c0011154:	89 c3                	mov    ebx,eax
c0011156:	83 ec 0c             	sub    esp,0xc
c0011159:	53                   	push   ebx
c001115a:	e8 95 79 00 00       	call   c0018af4 <Mutex::Mutex()>
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011166:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0011169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001116d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011171:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011174:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011178:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001117f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011183:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0011189:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001118d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011190:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011194:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001119a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00111a4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00111a7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00111aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00111b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111bc:	05 00 01 00 00       	add    eax,0x100
c00111c1:	c1 e0 04             	shl    eax,0x4
c00111c4:	83 ec 0c             	sub    esp,0xc
c00111c7:	50                   	push   eax
c00111c8:	e8 86 8b ff ff       	call   c0009d53 <malloc>
c00111cd:	83 c4 10             	add    esp,0x10
c00111d0:	89 c2                	mov    edx,eax
c00111d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111dd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00111e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00111ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00111f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111f6:	c1 e0 06             	shl    eax,0x6
c00111f9:	83 ec 0c             	sub    esp,0xc
c00111fc:	50                   	push   eax
c00111fd:	e8 51 8b ff ff       	call   c0009d53 <malloc>
c0011202:	83 c4 10             	add    esp,0x10
c0011205:	89 c2                	mov    edx,eax
c0011207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001120b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001120e:	90                   	nop
c001120f:	83 c4 18             	add    esp,0x18
c0011212:	5b                   	pop    ebx
c0011213:	c3                   	ret    

c0011214 <VCache::invalidateReadBuffer()>:
c0011214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011218:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001121e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0011222:	c3                   	ret    
c0011223:	90                   	nop

c0011224 <VCache::writeWriteBuffer()>:
c0011224:	53                   	push   ebx
c0011225:	83 ec 08             	sub    esp,0x8
c0011228:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001122c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011230:	74 1e                	je     c0011250 <VCache::writeWriteBuffer()+0x2c>
c0011232:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011235:	83 ec 0c             	sub    esp,0xc
c0011238:	8b 10                	mov    edx,DWORD PTR [eax]
c001123a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001123d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011240:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011243:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011246:	50                   	push   eax
c0011247:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001124a:	83 c4 20             	add    esp,0x20
c001124d:	8d 76 00             	lea    esi,[esi+0x0]
c0011250:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0011257:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001125e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0011262:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0011269:	83 c4 08             	add    esp,0x8
c001126c:	5b                   	pop    ebx
c001126d:	c3                   	ret    
c001126e:	66 90                	xchg   ax,ax

c0011270 <VCache::~VCache()>:
c0011270:	83 ec 0c             	sub    esp,0xc
c0011273:	ba 70 5a 02 c0       	mov    edx,0xc0025a70
c0011278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127c:	89 10                	mov    DWORD PTR [eax],edx
c001127e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011282:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0011285:	84 c0                	test   al,al
c0011287:	74 0f                	je     c0011298 <VCache::~VCache()+0x28>
c0011289:	83 ec 0c             	sub    esp,0xc
c001128c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011290:	e8 8f ff ff ff       	call   c0011224 <VCache::writeWriteBuffer()>
c0011295:	83 c4 10             	add    esp,0x10
c0011298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001129f:	83 ec 0c             	sub    esp,0xc
c00112a2:	50                   	push   eax
c00112a3:	e8 bb 8a ff ff       	call   c0009d63 <free>
c00112a8:	83 c4 10             	add    esp,0x10
c00112ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00112b2:	83 ec 0c             	sub    esp,0xc
c00112b5:	50                   	push   eax
c00112b6:	e8 a8 8a ff ff       	call   c0009d63 <free>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	90                   	nop
c00112bf:	83 c4 0c             	add    esp,0xc
c00112c2:	c3                   	ret    
c00112c3:	90                   	nop

c00112c4 <VCache::~VCache()>:
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	83 ec 0c             	sub    esp,0xc
c00112ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ce:	e8 9d ff ff ff       	call   c0011270 <VCache::~VCache()>
c00112d3:	83 c4 10             	add    esp,0x10
c00112d6:	83 ec 08             	sub    esp,0x8
c00112d9:	6a 44                	push   0x44
c00112db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112df:	e8 7a bc ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00112e4:	83 c4 10             	add    esp,0x10
c00112e7:	83 c4 0c             	add    esp,0xc
c00112ea:	c3                   	ret    
c00112eb:	90                   	nop

c00112ec <VCache::write(unsigned long long, int, void*)>:
c00112ec:	55                   	push   ebp
c00112ed:	31 c0                	xor    eax,eax
c00112ef:	57                   	push   edi
c00112f0:	56                   	push   esi
c00112f1:	53                   	push   ebx
c00112f2:	83 ec 0c             	sub    esp,0xc
c00112f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112f9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00112fd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011301:	8d 76 00             	lea    esi,[esi+0x0]
c0011304:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0011308:	7d 1a                	jge    c0011324 <VCache::write(unsigned long long, int, void*)+0x38>
c001130a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001130d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011313:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011317:	0f af c8             	imul   ecx,eax
c001131a:	01 ca                	add    edx,ecx
c001131c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001131e:	40                   	inc    eax
c001131f:	eb e3                	jmp    c0011304 <VCache::write(unsigned long long, int, void*)+0x18>
c0011321:	8d 76 00             	lea    esi,[esi+0x0]
c0011324:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011328:	74 0a                	je     c0011334 <VCache::write(unsigned long long, int, void*)+0x48>
c001132a:	53                   	push   ebx
c001132b:	e8 e4 fe ff ff       	call   c0011214 <VCache::invalidateReadBuffer()>
c0011330:	58                   	pop    eax
c0011331:	8d 76 00             	lea    esi,[esi+0x0]
c0011334:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011338:	74 5e                	je     c0011398 <VCache::write(unsigned long long, int, void*)+0xac>
c001133a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001133d:	89 e8                	mov    eax,ebp
c001133f:	99                   	cdq    
c0011340:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0011343:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011346:	89 c1                	mov    ecx,eax
c0011348:	89 d0                	mov    eax,edx
c001134a:	31 f1                	xor    ecx,esi
c001134c:	31 f8                	xor    eax,edi
c001134e:	09 c1                	or     ecx,eax
c0011350:	75 3a                	jne    c001138c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011352:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011357:	75 33                	jne    c001138c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011359:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001135c:	89 ef                	mov    edi,ebp
c001135e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011364:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011368:	0f af f9             	imul   edi,ecx
c001136b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001136e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011370:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011373:	40                   	inc    eax
c0011374:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011377:	83 f8 40             	cmp    eax,0x40
c001137a:	75 60                	jne    c00113dc <VCache::write(unsigned long long, int, void*)+0xf0>
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	53                   	push   ebx
c0011380:	e8 9f fe ff ff       	call   c0011224 <VCache::writeWriteBuffer()>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	eb 52                	jmp    c00113dc <VCache::write(unsigned long long, int, void*)+0xf0>
c001138a:	66 90                	xchg   ax,ax
c001138c:	83 ec 0c             	sub    esp,0xc
c001138f:	53                   	push   ebx
c0011390:	e8 8f fe ff ff       	call   c0011224 <VCache::writeWriteBuffer()>
c0011395:	83 c4 10             	add    esp,0x10
c0011398:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001139b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00113a0:	7f 22                	jg     c00113c4 <VCache::write(unsigned long long, int, void*)+0xd8>
c00113a2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00113a5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00113a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00113ac:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00113b0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00113b3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00113b6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00113bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00113c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00113c2:	eb 18                	jmp    c00113dc <VCache::write(unsigned long long, int, void*)+0xf0>
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00113c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113d1:	57                   	push   edi
c00113d2:	56                   	push   esi
c00113d3:	50                   	push   eax
c00113d4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00113d7:	83 c4 20             	add    esp,0x20
c00113da:	66 90                	xchg   ax,ax
c00113dc:	83 c4 0c             	add    esp,0xc
c00113df:	31 c0                	xor    eax,eax
c00113e1:	5b                   	pop    ebx
c00113e2:	5e                   	pop    esi
c00113e3:	5f                   	pop    edi
c00113e4:	5d                   	pop    ebp
c00113e5:	c3                   	ret    

c00113e6 <VCache::read(unsigned long long, int, void*)>:
c00113e6:	55                   	push   ebp
c00113e7:	31 c0                	xor    eax,eax
c00113e9:	57                   	push   edi
c00113ea:	56                   	push   esi
c00113eb:	53                   	push   ebx
c00113ec:	83 ec 1c             	sub    esp,0x1c
c00113ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00113f3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00113f7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00113fb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00113ff:	90                   	nop
c0011400:	39 e8                	cmp    eax,ebp
c0011402:	7d 18                	jge    c001141c <VCache::read(unsigned long long, int, void*)+0x36>
c0011404:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011407:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001140d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011411:	0f af c8             	imul   ecx,eax
c0011414:	01 ca                	add    edx,ecx
c0011416:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011418:	40                   	inc    eax
c0011419:	eb e5                	jmp    c0011400 <VCache::read(unsigned long long, int, void*)+0x1a>
c001141b:	90                   	nop
c001141c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011420:	74 0e                	je     c0011430 <VCache::read(unsigned long long, int, void*)+0x4a>
c0011422:	83 ec 0c             	sub    esp,0xc
c0011425:	53                   	push   ebx
c0011426:	e8 f9 fd ff ff       	call   c0011224 <VCache::writeWriteBuffer()>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	66 90                	xchg   ax,ax
c0011430:	83 fd 01             	cmp    ebp,0x1
c0011433:	0f 85 87 00 00 00    	jne    c00114c0 <VCache::read(unsigned long long, int, void*)+0xda>
c0011439:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001143c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011440:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011447:	75 77                	jne    c00114c0 <VCache::read(unsigned long long, int, void*)+0xda>
c0011449:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001144c:	89 e9                	mov    ecx,ebp
c001144e:	f7 d9                	neg    ecx
c0011450:	89 c8                	mov    eax,ecx
c0011452:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011456:	c1 f8 1f             	sar    eax,0x1f
c0011459:	21 f1                	and    ecx,esi
c001145b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001145f:	89 c8                	mov    eax,ecx
c0011461:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011465:	21 f9                	and    ecx,edi
c0011467:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001146b:	89 ca                	mov    edx,ecx
c001146d:	74 0d                	je     c001147c <VCache::read(unsigned long long, int, void*)+0x96>
c001146f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011472:	75 08                	jne    c001147c <VCache::read(unsigned long long, int, void*)+0x96>
c0011474:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011477:	74 27                	je     c00114a0 <VCache::read(unsigned long long, int, void*)+0xba>
c0011479:	8d 76 00             	lea    esi,[esi+0x0]
c001147c:	83 ec 0c             	sub    esp,0xc
c001147f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011483:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011487:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001148a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001148d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001148f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011492:	55                   	push   ebp
c0011493:	52                   	push   edx
c0011494:	50                   	push   eax
c0011495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011499:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001149c:	83 c4 20             	add    esp,0x20
c001149f:	90                   	nop
c00114a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00114a7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00114ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00114b0:	48                   	dec    eax
c00114b1:	21 c6                	and    esi,eax
c00114b3:	0f af f1             	imul   esi,ecx
c00114b6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00114b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114bb:	eb 23                	jmp    c00114e0 <VCache::read(unsigned long long, int, void*)+0xfa>
c00114bd:	8d 76 00             	lea    esi,[esi+0x0]
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	53                   	push   ebx
c00114c4:	e8 4b fd ff ff       	call   c0011214 <VCache::invalidateReadBuffer()>
c00114c9:	5a                   	pop    edx
c00114ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00114cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00114d3:	55                   	push   ebp
c00114d4:	57                   	push   edi
c00114d5:	56                   	push   esi
c00114d6:	50                   	push   eax
c00114d7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00114da:	83 c4 20             	add    esp,0x20
c00114dd:	8d 76 00             	lea    esi,[esi+0x0]
c00114e0:	83 c4 1c             	add    esp,0x1c
c00114e3:	31 c0                	xor    eax,eax
c00114e5:	5b                   	pop    ebx
c00114e6:	5e                   	pop    esi
c00114e7:	5f                   	pop    edi
c00114e8:	5d                   	pop    ebp
c00114e9:	c3                   	ret    

c00114ea <Video::putrect(int, int, int, int, unsigned int)>:
c00114ea:	55                   	push   ebp
c00114eb:	57                   	push   edi
c00114ec:	56                   	push   esi
c00114ed:	53                   	push   ebx
c00114ee:	83 ec 1c             	sub    esp,0x1c
c00114f1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00114f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00114fd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011501:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011505:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011509:	01 df                	add    edi,ebx
c001150b:	39 fb                	cmp    ebx,edi
c001150d:	7d 1f                	jge    c001152e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001150f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011513:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011517:	7d 12                	jge    c001152b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011519:	8b 16                	mov    edx,DWORD PTR [esi]
c001151b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001151f:	53                   	push   ebx
c0011520:	55                   	push   ebp
c0011521:	45                   	inc    ebp
c0011522:	56                   	push   esi
c0011523:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	eb e8                	jmp    c0011513 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001152b:	43                   	inc    ebx
c001152c:	eb dd                	jmp    c001150b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001152e:	83 c4 1c             	add    esp,0x1c
c0011531:	5b                   	pop    ebx
c0011532:	5e                   	pop    esi
c0011533:	5f                   	pop    edi
c0011534:	5d                   	pop    ebp
c0011535:	c3                   	ret    

c0011536 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011536:	55                   	push   ebp
c0011537:	57                   	push   edi
c0011538:	31 ff                	xor    edi,edi
c001153a:	56                   	push   esi
c001153b:	53                   	push   ebx
c001153c:	83 ec 1c             	sub    esp,0x1c
c001153f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0011543:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011547:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001154e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011557:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001155b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001155f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011562:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011566:	01 f9                	add    ecx,edi
c0011568:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001156c:	7d 2f                	jge    c001159d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001156e:	31 f6                	xor    esi,esi
c0011570:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011574:	01 f2                	add    edx,esi
c0011576:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001157a:	7d 1a                	jge    c0011596 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001157c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001157f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011582:	46                   	inc    esi
c0011583:	51                   	push   ecx
c0011584:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011588:	52                   	push   edx
c0011589:	55                   	push   ebp
c001158a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001158d:	83 c4 10             	add    esp,0x10
c0011590:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011594:	eb da                	jmp    c0011570 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011596:	47                   	inc    edi
c0011597:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001159b:	eb c5                	jmp    c0011562 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001159d:	83 c4 1c             	add    esp,0x1c
c00115a0:	5b                   	pop    ebx
c00115a1:	5e                   	pop    esi
c00115a2:	5f                   	pop    edi
c00115a3:	5d                   	pop    ebp
c00115a4:	c3                   	ret    
c00115a5:	90                   	nop

c00115a6 <Video::blit(unsigned int*, int, int, int, int)>:
c00115a6:	55                   	push   ebp
c00115a7:	57                   	push   edi
c00115a8:	56                   	push   esi
c00115a9:	53                   	push   ebx
c00115aa:	83 ec 1c             	sub    esp,0x1c
c00115ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115b5:	85 c0                	test   eax,eax
c00115b7:	79 02                	jns    c00115bb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00115b9:	31 c0                	xor    eax,eax
c00115bb:	c1 e0 02             	shl    eax,0x2
c00115be:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00115c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00115c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115ca:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00115ce:	39 d8                	cmp    eax,ebx
c00115d0:	7e 49                	jle    c001161b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00115d2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00115d8:	7c 41                	jl     c001161b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00115da:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00115de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00115e2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00115e6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00115ea:	39 f9                	cmp    ecx,edi
c00115ec:	7e 22                	jle    c0011610 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00115ee:	83 c5 04             	add    ebp,0x4
c00115f1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00115f7:	7c 14                	jl     c001160d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00115f9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00115fb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00115fe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011602:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011606:	56                   	push   esi
c0011607:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	47                   	inc    edi
c001160e:	eb d2                	jmp    c00115e2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011614:	43                   	inc    ebx
c0011615:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011619:	eb ab                	jmp    c00115c6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001161b:	83 c4 1c             	add    esp,0x1c
c001161e:	5b                   	pop    ebx
c001161f:	5e                   	pop    esi
c0011620:	5f                   	pop    edi
c0011621:	5d                   	pop    ebp
c0011622:	c3                   	ret    
c0011623:	90                   	nop

c0011624 <Video::clearScreen(unsigned int)>:
c0011624:	57                   	push   edi
c0011625:	56                   	push   esi
c0011626:	53                   	push   ebx
c0011627:	31 db                	xor    ebx,ebx
c0011629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001162d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011633:	7e 1f                	jle    c0011654 <Video::clearScreen(unsigned int)+0x30>
c0011635:	31 ff                	xor    edi,edi
c0011637:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001163d:	7e 12                	jle    c0011651 <Video::clearScreen(unsigned int)+0x2d>
c001163f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011645:	53                   	push   ebx
c0011646:	57                   	push   edi
c0011647:	47                   	inc    edi
c0011648:	56                   	push   esi
c0011649:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001164c:	83 c4 10             	add    esp,0x10
c001164f:	eb e6                	jmp    c0011637 <Video::clearScreen(unsigned int)+0x13>
c0011651:	43                   	inc    ebx
c0011652:	eb d9                	jmp    c001162d <Video::clearScreen(unsigned int)+0x9>
c0011654:	5b                   	pop    ebx
c0011655:	5e                   	pop    esi
c0011656:	5f                   	pop    edi
c0011657:	c3                   	ret    

c0011658 <Video::putpixel(int, int, unsigned int)>:
c0011658:	c7 44 24 04 78 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a78
c0011660:	e9 90 39 00 00       	jmp    c0014ff5 <Krnl::panic(char const*)>
c0011665:	90                   	nop

c0011666 <Video::Video(char const*)>:
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166d:	83 ec 08             	sub    esp,0x8
c0011670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011674:	50                   	push   eax
c0011675:	e8 3c d1 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c001167a:	83 c4 10             	add    esp,0x10
c001167d:	ba e8 5a 02 c0       	mov    edx,0xc0025ae8
c0011682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011686:	89 10                	mov    DWORD PTR [eax],edx
c0011688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011696:	90                   	nop
c0011697:	83 c4 0c             	add    esp,0xc
c001169a:	c3                   	ret    
c001169b:	90                   	nop

c001169c <Video::~Video()>:
c001169c:	83 ec 0c             	sub    esp,0xc
c001169f:	ba e8 5a 02 c0       	mov    edx,0xc0025ae8
c00116a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a8:	89 10                	mov    DWORD PTR [eax],edx
c00116aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	50                   	push   eax
c00116b2:	e8 c9 cd ff ff       	call   c000e480 <Device::~Device()>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	90                   	nop
c00116bb:	83 c4 0c             	add    esp,0xc
c00116be:	c3                   	ret    
c00116bf:	90                   	nop

c00116c0 <Video::~Video()>:
c00116c0:	83 ec 0c             	sub    esp,0xc
c00116c3:	83 ec 0c             	sub    esp,0xc
c00116c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ca:	e8 cd ff ff ff       	call   c001169c <Video::~Video()>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	83 ec 08             	sub    esp,0x8
c00116d5:	68 64 01 00 00       	push   0x164
c00116da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116de:	e8 7b b8 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00116e3:	83 c4 10             	add    esp,0x10
c00116e6:	83 c4 0c             	add    esp,0xc
c00116e9:	c3                   	ret    

c00116ea <Video::isMonochrome()>:
c00116ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ee:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00116f4:	c3                   	ret    
c00116f5:	90                   	nop

c00116f6 <Video::getWidth()>:
c00116f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011700:	c3                   	ret    
c0011701:	90                   	nop

c0011702 <Video::getHeight()>:
c0011702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011706:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001170c:	c3                   	ret    
c001170d:	90                   	nop

c001170e <Video::drawCursor(int, int, unsigned char*, int)>:
c001170e:	55                   	push   ebp
c001170f:	57                   	push   edi
c0011710:	56                   	push   esi
c0011711:	53                   	push   ebx
c0011712:	83 ec 2c             	sub    esp,0x2c
c0011715:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011719:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001171d:	83 f8 01             	cmp    eax,0x1
c0011720:	19 c9                	sbb    ecx,ecx
c0011722:	31 db                	xor    ebx,ebx
c0011724:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011728:	89 cd                	mov    ebp,ecx
c001172a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011732:	f7 d5                	not    ebp
c0011734:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001173a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001173e:	01 d8                	add    eax,ebx
c0011740:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011744:	56                   	push   esi
c0011745:	e8 b8 ff ff ff       	call   c0011702 <Video::getHeight()>
c001174a:	59                   	pop    ecx
c001174b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001174f:	7e 70                	jle    c00117c1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011751:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011755:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011759:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001175c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011760:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011764:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001176b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001176f:	89 f8                	mov    eax,edi
c0011771:	83 c0 20             	add    eax,0x20
c0011774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011778:	56                   	push   esi
c0011779:	e8 78 ff ff ff       	call   c00116f6 <Video::getWidth()>
c001177e:	5a                   	pop    edx
c001177f:	39 c7                	cmp    edi,eax
c0011781:	7d 34                	jge    c00117b7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011783:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011788:	74 05                	je     c001178f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001178a:	8b 06                	mov    eax,DWORD PTR [esi]
c001178c:	55                   	push   ebp
c001178d:	eb 0d                	jmp    c001179c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001178f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011794:	74 12                	je     c00117a8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011796:	8b 06                	mov    eax,DWORD PTR [esi]
c0011798:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001179c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117a0:	57                   	push   edi
c00117a1:	56                   	push   esi
c00117a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00117ac:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00117b0:	47                   	inc    edi
c00117b1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00117b5:	75 c1                	jne    c0011778 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00117b7:	43                   	inc    ebx
c00117b8:	83 fb 20             	cmp    ebx,0x20
c00117bb:	0f 85 79 ff ff ff    	jne    c001173a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00117c1:	83 c4 2c             	add    esp,0x2c
c00117c4:	5b                   	pop    ebx
c00117c5:	5e                   	pop    esi
c00117c6:	5f                   	pop    edi
c00117c7:	5d                   	pop    ebp
c00117c8:	c3                   	ret    
c00117c9:	90                   	nop

c00117ca <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00117ca:	55                   	push   ebp
c00117cb:	57                   	push   edi
c00117cc:	56                   	push   esi
c00117cd:	53                   	push   ebx
c00117ce:	83 ec 28             	sub    esp,0x28
c00117d1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00117d5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00117d9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00117dd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00117e1:	c1 e6 08             	shl    esi,0x8
c00117e4:	01 c6                	add    esi,eax
c00117e6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00117ea:	c1 e0 08             	shl    eax,0x8
c00117ed:	01 d0                	add    eax,edx
c00117ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117f7:	0f af c6             	imul   eax,esi
c00117fa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011801:	50                   	push   eax
c0011802:	e8 4c 85 ff ff       	call   c0009d53 <malloc>
c0011807:	83 c4 10             	add    esp,0x10
c001180a:	89 c7                	mov    edi,eax
c001180c:	85 c0                	test   eax,eax
c001180e:	75 10                	jne    c0011820 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011810:	83 ec 0c             	sub    esp,0xc
c0011813:	68 99 5a 02 c0       	push   0xc0025a99
c0011818:	e8 d8 37 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0011823:	ba 12 00 00 00       	mov    edx,0x12
c0011828:	84 c0                	test   al,al
c001182a:	74 11                	je     c001183d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c001182c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011830:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011834:	c1 fa 03             	sar    edx,0x3
c0011837:	0f af d1             	imul   edx,ecx
c001183a:	83 c2 12             	add    edx,0x12
c001183d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011841:	74 04                	je     c0011847 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011843:	85 f6                	test   esi,esi
c0011845:	75 12                	jne    c0011859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011847:	83 ec 0c             	sub    esp,0xc
c001184a:	68 a9 5a 02 c0       	push   0xc0025aa9
c001184f:	e8 eb b7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011854:	e9 b8 00 00 00       	jmp    c0011911 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011859:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001185d:	80 f9 02             	cmp    cl,0x2
c0011860:	0f 85 96 00 00 00    	jne    c00118fc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011866:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001186b:	75 0e                	jne    c001187b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001186d:	84 c0                	test   al,al
c001186f:	75 0a                	jne    c001187b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011871:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011874:	83 e8 18             	sub    eax,0x18
c0011877:	a8 f7                	test   al,0xf7
c0011879:	74 0a                	je     c0011885 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001187b:	83 ec 0c             	sub    esp,0xc
c001187e:	68 be 5a 02 c0       	push   0xc0025abe
c0011883:	eb 7f                	jmp    c0011904 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011885:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001188d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011895:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011899:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00118a1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00118a5:	75 0c                	jne    c00118b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00118a7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00118ac:	c1 e0 18             	shl    eax,0x18
c00118af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118b3:	45                   	inc    ebp
c00118b4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00118b9:	c1 e1 10             	shl    ecx,0x10
c00118bc:	89 c8                	mov    eax,ecx
c00118be:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00118c3:	c1 e1 08             	shl    ecx,0x8
c00118c6:	09 c1                	or     ecx,eax
c00118c8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00118cc:	09 c1                	or     ecx,eax
c00118ce:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00118d2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00118d6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00118da:	c1 f8 03             	sar    eax,0x3
c00118dd:	01 c2                	add    edx,eax
c00118df:	89 e8                	mov    eax,ebp
c00118e1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00118e5:	39 c6                	cmp    esi,eax
c00118e7:	7f b0                	jg     c0011899 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00118e9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00118ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00118f1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00118f4:	7e 22                	jle    c0011918 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00118f6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00118fa:	eb 99                	jmp    c0011895 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00118fc:	50                   	push   eax
c00118fd:	50                   	push   eax
c00118fe:	51                   	push   ecx
c00118ff:	68 cc 5a 02 c0       	push   0xc0025acc
c0011904:	e8 36 b7 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011909:	89 3c 24             	mov    DWORD PTR [esp],edi
c001190c:	e8 52 84 ff ff       	call   c0009d63 <free>
c0011911:	83 c4 10             	add    esp,0x10
c0011914:	31 ff                	xor    edi,edi
c0011916:	eb 0f                	jmp    c0011927 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011918:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001191c:	89 30                	mov    DWORD PTR [eax],esi
c001191e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011922:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011925:	89 30                	mov    DWORD PTR [eax],esi
c0011927:	83 c4 1c             	add    esp,0x1c
c001192a:	89 f8                	mov    eax,edi
c001192c:	5b                   	pop    ebx
c001192d:	5e                   	pop    esi
c001192e:	5f                   	pop    edi
c001192f:	5d                   	pop    ebp
c0011930:	c3                   	ret    
c0011931:	90                   	nop

c0011932 <Video::putTGA(int, int, unsigned char*, int)>:
c0011932:	55                   	push   ebp
c0011933:	57                   	push   edi
c0011934:	56                   	push   esi
c0011935:	53                   	push   ebx
c0011936:	83 ec 28             	sub    esp,0x28
c0011939:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001193d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011941:	50                   	push   eax
c0011942:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011946:	50                   	push   eax
c0011947:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001194b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001194f:	56                   	push   esi
c0011950:	e8 75 fe ff ff       	call   c00117ca <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011955:	83 c4 20             	add    esp,0x20
c0011958:	85 c0                	test   eax,eax
c001195a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001195e:	74 35                	je     c0011995 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011960:	89 c7                	mov    edi,eax
c0011962:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011966:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001196a:	39 d8                	cmp    eax,ebx
c001196c:	7e 27                	jle    c0011995 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001196e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011972:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011976:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001197a:	39 e8                	cmp    eax,ebp
c001197c:	7e 14                	jle    c0011992 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001197e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011980:	83 c7 04             	add    edi,0x4
c0011983:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011986:	53                   	push   ebx
c0011987:	55                   	push   ebp
c0011988:	45                   	inc    ebp
c0011989:	56                   	push   esi
c001198a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001198d:	83 c4 10             	add    esp,0x10
c0011990:	eb e0                	jmp    c0011972 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011992:	43                   	inc    ebx
c0011993:	eb cd                	jmp    c0011962 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011995:	83 c4 1c             	add    esp,0x1c
c0011998:	5b                   	pop    ebx
c0011999:	5e                   	pop    esi
c001199a:	5f                   	pop    edi
c001199b:	5d                   	pop    ebp
c001199c:	c3                   	ret    
c001199d:	66 90                	xchg   ax,ax
c001199f:	90                   	nop

c00119a0 <ACPI::close(int, int, void*)>:
c00119a0:	83 ec 1c             	sub    esp,0x1c
c00119a3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00119ab:	74 0b                	je     c00119b8 <ACPI::close(int, int, void*)+0x18>
c00119ad:	b8 00 00 00 00       	mov    eax,0x0
c00119b2:	e9 99 00 00 00       	jmp    c0011a50 <ACPI::close(int, int, void*)+0xb0>
c00119b7:	90                   	nop
c00119b8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00119bd:	75 29                	jne    c00119e8 <ACPI::close(int, int, void*)+0x48>
c00119bf:	a1 a8 90 02 c0       	mov    eax,ds:0xc00290a8
c00119c4:	85 c0                	test   eax,eax
c00119c6:	74 08                	je     c00119d0 <ACPI::close(int, int, void*)+0x30>
c00119c8:	a1 a8 90 02 c0       	mov    eax,ds:0xc00290a8
c00119cd:	ff d0                	call   eax
c00119cf:	90                   	nop
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	68 28 5b 02 c0       	push   0xc0025b28
c00119d8:	e8 18 36 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c00119dd:	83 c4 10             	add    esp,0x10
c00119e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119e5:	eb 69                	jmp    c0011a50 <ACPI::close(int, int, void*)+0xb0>
c00119e7:	90                   	nop
c00119e8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00119ed:	75 59                	jne    c0011a48 <ACPI::close(int, int, void*)+0xa8>
c00119ef:	a1 a4 90 02 c0       	mov    eax,ds:0xc00290a4
c00119f4:	85 c0                	test   eax,eax
c00119f6:	74 08                	je     c0011a00 <ACPI::close(int, int, void*)+0x60>
c00119f8:	a1 a4 90 02 c0       	mov    eax,ds:0xc00290a4
c00119fd:	ff d0                	call   eax
c00119ff:	90                   	nop
c0011a00:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011a05:	8d 76 00             	lea    esi,[esi+0x0]
c0011a08:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a0d:	83 e0 02             	and    eax,0x2
c0011a10:	74 1e                	je     c0011a30 <ACPI::close(int, int, void*)+0x90>
c0011a12:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a1d:	89 c2                	mov    edx,eax
c0011a1f:	ec                   	in     al,dx
c0011a20:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a24:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011a28:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a2c:	eb da                	jmp    c0011a08 <ACPI::close(int, int, void*)+0x68>
c0011a2e:	66 90                	xchg   ax,ax
c0011a30:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011a37:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011a3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011a40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a44:	ee                   	out    dx,al
c0011a45:	8d 76 00             	lea    esi,[esi+0x0]
c0011a48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a50:	83 c4 1c             	add    esp,0x1c
c0011a53:	c3                   	ret    

c0011a54 <findRSDP()>:
c0011a54:	83 ec 1c             	sub    esp,0x1c
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	68 4b 5c 02 c0       	push   0xc0025c4b
c0011a5f:	e8 49 83 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011a6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a72:	83 e0 04             	and    eax,0x4
c0011a75:	84 c0                	test   al,al
c0011a77:	75 0b                	jne    c0011a84 <findRSDP()+0x30>
c0011a79:	b8 00 00 00 00       	mov    eax,0x0
c0011a7e:	e9 a1 00 00 00       	jmp    c0011b24 <findRSDP()+0xd0>
c0011a83:	90                   	nop
c0011a84:	a1 98 8a 02 c0       	mov    eax,ds:0xc0028a98
c0011a89:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011a8e:	7f 1c                	jg     c0011aac <findRSDP()+0x58>
c0011a90:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011a95:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a9b:	83 e2 fb             	and    edx,0xfffffffb
c0011a9e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011aa4:	b8 00 00 00 00       	mov    eax,0x0
c0011aa9:	eb 79                	jmp    c0011b24 <findRSDP()+0xd0>
c0011aab:	90                   	nop
c0011aac:	83 ec 0c             	sub    esp,0xc
c0011aaf:	68 5b 5c 02 c0       	push   0xc0025c5b
c0011ab4:	e8 f4 82 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011ac4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011acc:	77 3e                	ja     c0011b0c <findRSDP()+0xb8>
c0011ace:	83 ec 04             	sub    esp,0x4
c0011ad1:	6a 08                	push   0x8
c0011ad3:	68 74 5c 02 c0       	push   0xc0025c74
c0011ad8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011adc:	e8 97 ea fe ff       	call   c0000578 <memcmp>
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	85 c0                	test   eax,eax
c0011ae6:	0f 94 c0             	sete   al
c0011ae9:	84 c0                	test   al,al
c0011aeb:	74 17                	je     c0011b04 <findRSDP()+0xb0>
c0011aed:	83 ec 0c             	sub    esp,0xc
c0011af0:	68 7d 5c 02 c0       	push   0xc0025c7d
c0011af5:	e8 b3 82 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b01:	eb 21                	jmp    c0011b24 <findRSDP()+0xd0>
c0011b03:	90                   	nop
c0011b04:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011b09:	eb b9                	jmp    c0011ac4 <findRSDP()+0x70>
c0011b0b:	90                   	nop
c0011b0c:	83 ec 0c             	sub    esp,0xc
c0011b0f:	68 8b 5c 02 c0       	push   0xc0025c8b
c0011b14:	e8 94 82 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011b19:	83 c4 10             	add    esp,0x10
c0011b1c:	b8 00 00 00 00       	mov    eax,0x0
c0011b21:	8d 76 00             	lea    esi,[esi+0x0]
c0011b24:	83 c4 1c             	add    esp,0x1c
c0011b27:	c3                   	ret    

c0011b28 <loadACPITables(unsigned char*)>:
c0011b28:	57                   	push   edi
c0011b29:	56                   	push   esi
c0011b2a:	53                   	push   ebx
c0011b2b:	83 ec 60             	sub    esp,0x60
c0011b2e:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011b33:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b39:	83 e0 04             	and    eax,0x4
c0011b3c:	84 c0                	test   al,al
c0011b3e:	0f 84 3c 02 00 00    	je     c0011d80 <loadACPITables(unsigned char*)+0x258>
c0011b44:	a0 c0 92 02 c0       	mov    al,ds:0xc00292c0
c0011b49:	84 c0                	test   al,al
c0011b4b:	74 77                	je     c0011bc4 <loadACPITables(unsigned char*)+0x9c>
c0011b4d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011b55:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011b59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b5c:	83 e8 24             	sub    eax,0x24
c0011b5f:	c1 e8 03             	shr    eax,0x3
c0011b62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011b66:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011b6e:	66 90                	xchg   ax,ax
c0011b70:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011b74:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011b78:	0f 8d b6 00 00 00    	jge    c0011c34 <loadACPITables(unsigned char*)+0x10c>
c0011b7e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011b82:	83 c0 24             	add    eax,0x24
c0011b85:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011b89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011b8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b91:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011b95:	c1 e0 03             	shl    eax,0x3
c0011b98:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011b9c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011ba0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba5:	89 c1                	mov    ecx,eax
c0011ba7:	a1 ac 90 02 c0       	mov    eax,ds:0xc00290ac
c0011bac:	8d 50 01             	lea    edx,[eax+0x1]
c0011baf:	89 15 ac 90 02 c0    	mov    DWORD PTR ds:0xc00290ac,edx
c0011bb5:	89 ca                	mov    edx,ecx
c0011bb7:	89 14 c5 c4 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f3c],edx
c0011bbe:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011bc2:	eb ac                	jmp    c0011b70 <loadACPITables(unsigned char*)+0x48>
c0011bc4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011bc8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011bcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bd3:	83 e8 24             	sub    eax,0x24
c0011bd6:	c1 e8 02             	shr    eax,0x2
c0011bd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011bdd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011be5:	8d 76 00             	lea    esi,[esi+0x0]
c0011be8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011bec:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011bf0:	7d 42                	jge    c0011c34 <loadACPITables(unsigned char*)+0x10c>
c0011bf2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011bf6:	83 c0 24             	add    eax,0x24
c0011bf9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011bfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011c01:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011c05:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011c09:	c1 e0 02             	shl    eax,0x2
c0011c0c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011c10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c14:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c16:	a1 ac 90 02 c0       	mov    eax,ds:0xc00290ac
c0011c1b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c1e:	89 15 ac 90 02 c0    	mov    DWORD PTR ds:0xc00290ac,edx
c0011c24:	89 ca                	mov    edx,ecx
c0011c26:	89 14 c5 c4 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f3c],edx
c0011c2d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011c31:	eb b5                	jmp    c0011be8 <loadACPITables(unsigned char*)+0xc0>
c0011c33:	90                   	nop
c0011c34:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011c3c:	a1 ac 90 02 c0       	mov    eax,ds:0xc00290ac
c0011c41:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011c45:	0f 8d 39 01 00 00    	jge    c0011d84 <loadACPITables(unsigned char*)+0x25c>
c0011c4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011c4f:	8b 04 c5 c4 90 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6f3c]
c0011c56:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c66:	25 ff 0f 00 00       	and    eax,0xfff
c0011c6b:	89 c6                	mov    esi,eax
c0011c6d:	8b 1d 90 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b90
c0011c73:	83 ec 0c             	sub    esp,0xc
c0011c76:	6a 01                	push   0x1
c0011c78:	e8 9c a0 ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011c84:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	6a 01                	push   0x1
c0011c8f:	6a 01                	push   0x1
c0011c91:	50                   	push   eax
c0011c92:	52                   	push   edx
c0011c93:	53                   	push   ebx
c0011c94:	e8 1d aa ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011c99:	83 c4 20             	add    esp,0x20
c0011c9c:	09 f0                	or     eax,esi
c0011c9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011ca2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ca6:	c1 e0 03             	shl    eax,0x3
c0011ca9:	05 c0 90 02 c0       	add    eax,0xc00290c0
c0011cae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011cba:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011cc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011cce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011cd2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cd6:	89 c6                	mov    esi,eax
c0011cd8:	89 d7                	mov    edi,edx
c0011cda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011cdc:	89 c8                	mov    eax,ecx
c0011cde:	89 fa                	mov    edx,edi
c0011ce0:	89 f3                	mov    ebx,esi
c0011ce2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011ce6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011cea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011cf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cfd:	05 00 10 00 00       	add    eax,0x1000
c0011d02:	c1 e8 0c             	shr    eax,0xc
c0011d05:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d15:	25 ff 0f 00 00       	and    eax,0xfff
c0011d1a:	89 c6                	mov    esi,eax
c0011d1c:	8b 1d 90 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b90
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d29:	e8 eb 9f ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011d2e:	83 c4 10             	add    esp,0x10
c0011d31:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d35:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011d3b:	83 ec 0c             	sub    esp,0xc
c0011d3e:	6a 01                	push   0x1
c0011d40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d44:	50                   	push   eax
c0011d45:	52                   	push   edx
c0011d46:	53                   	push   ebx
c0011d47:	e8 6a a9 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d4c:	83 c4 20             	add    esp,0x20
c0011d4f:	09 f0                	or     eax,esi
c0011d51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d59:	83 ec 0c             	sub    esp,0xc
c0011d5c:	50                   	push   eax
c0011d5d:	e8 e7 a2 ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d62:	83 c4 10             	add    esp,0x10
c0011d65:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d69:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d6d:	89 14 c5 c4 90 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6f3c],edx
c0011d74:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011d78:	e9 bf fe ff ff       	jmp    c0011c3c <loadACPITables(unsigned char*)+0x114>
c0011d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0011d80:	90                   	nop
c0011d81:	8d 76 00             	lea    esi,[esi+0x0]
c0011d84:	83 c4 60             	add    esp,0x60
c0011d87:	5b                   	pop    ebx
c0011d88:	5e                   	pop    esi
c0011d89:	5f                   	pop    edi
c0011d8a:	c3                   	ret    
c0011d8b:	90                   	nop

c0011d8c <findRSDT(unsigned char*)>:
c0011d8c:	57                   	push   edi
c0011d8d:	56                   	push   esi
c0011d8e:	53                   	push   ebx
c0011d8f:	83 ec 50             	sub    esp,0x50
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	68 9f 5c 02 c0       	push   0xc0025c9f
c0011d9a:	e8 0e 80 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011d9f:	83 c4 10             	add    esp,0x10
c0011da2:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011da7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011dad:	83 e0 04             	and    eax,0x4
c0011db0:	84 c0                	test   al,al
c0011db2:	75 0c                	jne    c0011dc0 <findRSDT(unsigned char*)+0x34>
c0011db4:	b8 00 00 00 00       	mov    eax,0x0
c0011db9:	e9 86 01 00 00       	jmp    c0011f44 <findRSDT(unsigned char*)+0x1b8>
c0011dbe:	66 90                	xchg   ax,ax
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	68 b1 5c 02 c0       	push   0xc0025cb1
c0011dc8:	e8 e0 7f ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	89 e0                	mov    eax,esp
c0011dd2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011dd6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011dda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011dde:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011de6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011dee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011df2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011df6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011dfa:	89 c6                	mov    esi,eax
c0011dfc:	89 d7                	mov    edi,edx
c0011dfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e00:	89 c8                	mov    eax,ecx
c0011e02:	89 fa                	mov    edx,edi
c0011e04:	89 f3                	mov    ebx,esi
c0011e06:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011e0a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011e0e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e12:	83 ec 0c             	sub    esp,0xc
c0011e15:	68 c3 5c 02 c0       	push   0xc0025cc3
c0011e1a:	e8 8e 7f ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011e26:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011e2a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011e32:	83 ec 0c             	sub    esp,0xc
c0011e35:	68 d5 5c 02 c0       	push   0xc0025cd5
c0011e3a:	e8 6e 7f ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e52:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011e56:	83 ec 04             	sub    esp,0x4
c0011e59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011e5d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011e61:	68 4c 5b 02 c0       	push   0xc0025b4c
c0011e66:	e8 d4 b1 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011e72:	25 ff 0f 00 00       	and    eax,0xfff
c0011e77:	89 c6                	mov    esi,eax
c0011e79:	8b 1d 90 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b90
c0011e7f:	83 ec 0c             	sub    esp,0xc
c0011e82:	6a 02                	push   0x2
c0011e84:	e8 90 9e ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011e90:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e96:	83 ec 0c             	sub    esp,0xc
c0011e99:	6a 01                	push   0x1
c0011e9b:	6a 02                	push   0x2
c0011e9d:	50                   	push   eax
c0011e9e:	52                   	push   edx
c0011e9f:	53                   	push   ebx
c0011ea0:	e8 11 a8 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ea5:	83 c4 20             	add    esp,0x20
c0011ea8:	09 f0                	or     eax,esi
c0011eaa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011eae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011eb2:	25 ff 0f 00 00       	and    eax,0xfff
c0011eb7:	89 c6                	mov    esi,eax
c0011eb9:	8b 1d 90 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b90
c0011ebf:	83 ec 0c             	sub    esp,0xc
c0011ec2:	6a 02                	push   0x2
c0011ec4:	e8 50 9e ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0011ec9:	83 c4 10             	add    esp,0x10
c0011ecc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011ed0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ed6:	83 ec 0c             	sub    esp,0xc
c0011ed9:	6a 01                	push   0x1
c0011edb:	6a 02                	push   0x2
c0011edd:	50                   	push   eax
c0011ede:	52                   	push   edx
c0011edf:	53                   	push   ebx
c0011ee0:	e8 d1 a7 ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ee5:	83 c4 20             	add    esp,0x20
c0011ee8:	09 f0                	or     eax,esi
c0011eea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011eee:	83 ec 04             	sub    esp,0x4
c0011ef1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ef5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ef9:	68 6c 5b 02 c0       	push   0xc0025b6c
c0011efe:	e8 3c b1 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0011f03:	83 c4 10             	add    esp,0x10
c0011f06:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011f0b:	75 13                	jne    c0011f20 <findRSDT(unsigned char*)+0x194>
c0011f0d:	c6 05 c0 92 02 c0 00 	mov    BYTE PTR ds:0xc00292c0,0x0
c0011f14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f18:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f1c:	eb 22                	jmp    c0011f40 <findRSDT(unsigned char*)+0x1b4>
c0011f1e:	66 90                	xchg   ax,ax
c0011f20:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011f25:	75 11                	jne    c0011f38 <findRSDT(unsigned char*)+0x1ac>
c0011f27:	c6 05 c0 92 02 c0 01 	mov    BYTE PTR ds:0xc00292c0,0x1
c0011f2e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011f32:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011f36:	eb 08                	jmp    c0011f40 <findRSDT(unsigned char*)+0x1b4>
c0011f38:	b8 00 00 00 00       	mov    eax,0x0
c0011f3d:	eb 05                	jmp    c0011f44 <findRSDT(unsigned char*)+0x1b8>
c0011f3f:	90                   	nop
c0011f40:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f44:	83 c4 50             	add    esp,0x50
c0011f47:	5b                   	pop    ebx
c0011f48:	5e                   	pop    esi
c0011f49:	5f                   	pop    edi
c0011f4a:	c3                   	ret    
c0011f4b:	90                   	nop

c0011f4c <findDataTable(unsigned char*, char*)>:
c0011f4c:	83 ec 1c             	sub    esp,0x1c
c0011f4f:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011f54:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011f5a:	83 e0 04             	and    eax,0x4
c0011f5d:	84 c0                	test   al,al
c0011f5f:	75 07                	jne    c0011f68 <findDataTable(unsigned char*, char*)+0x1c>
c0011f61:	b8 00 00 00 00       	mov    eax,0x0
c0011f66:	eb 58                	jmp    c0011fc0 <findDataTable(unsigned char*, char*)+0x74>
c0011f68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f70:	a1 ac 90 02 c0       	mov    eax,ds:0xc00290ac
c0011f75:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011f79:	7d 3d                	jge    c0011fb8 <findDataTable(unsigned char*, char*)+0x6c>
c0011f7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f7f:	c1 e0 03             	shl    eax,0x3
c0011f82:	05 c0 90 02 c0       	add    eax,0xc00290c0
c0011f87:	83 ec 04             	sub    esp,0x4
c0011f8a:	6a 04                	push   0x4
c0011f8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011f90:	50                   	push   eax
c0011f91:	e8 e2 e5 fe ff       	call   c0000578 <memcmp>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	85 c0                	test   eax,eax
c0011f9b:	0f 94 c0             	sete   al
c0011f9e:	84 c0                	test   al,al
c0011fa0:	74 0e                	je     c0011fb0 <findDataTable(unsigned char*, char*)+0x64>
c0011fa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fa6:	8b 04 c5 c4 90 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6f3c]
c0011fad:	eb 11                	jmp    c0011fc0 <findDataTable(unsigned char*, char*)+0x74>
c0011faf:	90                   	nop
c0011fb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011fb4:	eb ba                	jmp    c0011f70 <findDataTable(unsigned char*, char*)+0x24>
c0011fb6:	66 90                	xchg   ax,ax
c0011fb8:	b8 00 00 00 00       	mov    eax,0x0
c0011fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0011fc0:	83 c4 1c             	add    esp,0x1c
c0011fc3:	c3                   	ret    

c0011fc4 <scanMADT()>:
c0011fc4:	53                   	push   ebx
c0011fc5:	83 ec 38             	sub    esp,0x38
c0011fc8:	83 ec 0c             	sub    esp,0xc
c0011fcb:	68 e7 5c 02 c0       	push   0xc0025ce7
c0011fd0:	e8 d8 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0011fdd:	25 00 04 00 00       	and    eax,0x400
c0011fe2:	74 14                	je     c0011ff8 <scanMADT()+0x34>
c0011fe4:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011fe9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011fef:	83 e2 fb             	and    edx,0xfffffffb
c0011ff2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ff8:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0011ffd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012003:	83 e0 04             	and    eax,0x4
c0012006:	84 c0                	test   al,al
c0012008:	0f 84 82 04 00 00    	je     c0012490 <scanMADT()+0x4cc>
c001200e:	83 ec 0c             	sub    esp,0xc
c0012011:	68 f4 5c 02 c0       	push   0xc0025cf4
c0012016:	e8 92 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001201b:	83 c4 10             	add    esp,0x10
c001201e:	e8 31 fa ff ff       	call   c0011a54 <findRSDP()>
c0012023:	a3 cc 92 02 c0       	mov    ds:0xc00292cc,eax
c0012028:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c001202d:	85 c0                	test   eax,eax
c001202f:	75 1b                	jne    c001204c <scanMADT()+0x88>
c0012031:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0012036:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001203c:	83 e2 fb             	and    edx,0xfffffffb
c001203f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012045:	e9 4e 04 00 00       	jmp    c0012498 <scanMADT()+0x4d4>
c001204a:	66 90                	xchg   ax,ax
c001204c:	83 ec 0c             	sub    esp,0xc
c001204f:	68 06 5d 02 c0       	push   0xc0025d06
c0012054:	e8 54 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012059:	83 c4 10             	add    esp,0x10
c001205c:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c0012061:	83 ec 0c             	sub    esp,0xc
c0012064:	50                   	push   eax
c0012065:	e8 22 fd ff ff       	call   c0011d8c <findRSDT(unsigned char*)>
c001206a:	83 c4 10             	add    esp,0x10
c001206d:	a3 c8 92 02 c0       	mov    ds:0xc00292c8,eax
c0012072:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c0012077:	85 c0                	test   eax,eax
c0012079:	75 19                	jne    c0012094 <scanMADT()+0xd0>
c001207b:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0012080:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012086:	83 e2 fb             	and    edx,0xfffffffb
c0012089:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001208f:	e9 04 04 00 00       	jmp    c0012498 <scanMADT()+0x4d4>
c0012094:	83 ec 0c             	sub    esp,0xc
c0012097:	68 16 5d 02 c0       	push   0xc0025d16
c001209c:	e8 0c 7d ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00120a1:	83 c4 10             	add    esp,0x10
c00120a4:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c00120a9:	83 ec 0c             	sub    esp,0xc
c00120ac:	50                   	push   eax
c00120ad:	e8 76 fa ff ff       	call   c0011b28 <loadACPITables(unsigned char*)>
c00120b2:	83 c4 10             	add    esp,0x10
c00120b5:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c00120ba:	83 ec 08             	sub    esp,0x8
c00120bd:	68 2e 5d 02 c0       	push   0xc0025d2e
c00120c2:	50                   	push   eax
c00120c3:	e8 84 fe ff ff       	call   c0011f4c <findDataTable(unsigned char*, char*)>
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00120cf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00120d4:	75 1a                	jne    c00120f0 <scanMADT()+0x12c>
c00120d6:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00120db:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00120e1:	83 e2 fe             	and    edx,0xfffffffe
c00120e4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00120ea:	e9 a9 03 00 00       	jmp    c0012498 <scanMADT()+0x4d4>
c00120ef:	90                   	nop
c00120f0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120ff:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0012103:	0f 87 8f 03 00 00    	ja     c0012498 <scanMADT()+0x4d4>
c0012109:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0012111:	0f 87 81 03 00 00    	ja     c0012498 <scanMADT()+0x4d4>
c0012117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001211b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001211f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012123:	8d 50 01             	lea    edx,[eax+0x1]
c0012126:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001212a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001212e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012132:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0012136:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001213a:	8d 50 01             	lea    edx,[eax+0x1]
c001213d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012141:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012145:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012149:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001214d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0012152:	0f 86 3c 03 00 00    	jbe    c0012494 <scanMADT()+0x4d0>
c0012158:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001215d:	75 59                	jne    c00121b8 <scanMADT()+0x1f4>
c001215f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012163:	8d 50 01             	lea    edx,[eax+0x1]
c0012166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001216a:	8a 15 c0 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294c0
c0012170:	0f b6 d2             	movzx  edx,dl
c0012173:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012177:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001217b:	88 82 00 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6b00],al
c0012181:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012185:	8d 50 01             	lea    edx,[eax+0x1]
c0012188:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001218c:	8a 15 c0 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294c0
c0012192:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012195:	88 0d c0 94 02 c0    	mov    BYTE PTR ds:0xc00294c0,cl
c001219b:	0f b6 d2             	movzx  edx,dl
c001219e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00121a2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00121a6:	88 82 e0 94 02 c0    	mov    BYTE PTR [edx-0x3ffd6b20],al
c00121ac:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00121b1:	e9 c6 02 00 00       	jmp    c001247c <scanMADT()+0x4b8>
c00121b6:	66 90                	xchg   ax,ax
c00121b8:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00121bd:	0f 85 15 01 00 00    	jne    c00122d8 <scanMADT()+0x314>
c00121c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121c7:	8d 50 01             	lea    edx,[eax+0x1]
c00121ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00121ce:	8a 15 80 93 02 c0    	mov    dl,BYTE PTR ds:0xc0029380
c00121d4:	0f b6 d2             	movzx  edx,dl
c00121d7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00121db:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00121df:	88 82 a0 93 02 c0    	mov    BYTE PTR [edx-0x3ffd6c60],al
c00121e5:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00121e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00121ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121f1:	01 d0                	add    eax,edx
c00121f3:	83 c0 2c             	add    eax,0x2c
c00121f6:	8a 00                	mov    al,BYTE PTR [eax]
c00121f8:	0f b6 d0             	movzx  edx,al
c00121fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00121ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0012202:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012206:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001220a:	0f b6 c0             	movzx  eax,al
c001220d:	c1 e0 08             	shl    eax,0x8
c0012210:	89 d1                	mov    ecx,edx
c0012212:	09 c1                	or     ecx,eax
c0012214:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012218:	8d 50 02             	lea    edx,[eax+0x2]
c001221b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001221f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012223:	0f b6 c0             	movzx  eax,al
c0012226:	c1 e0 10             	shl    eax,0x10
c0012229:	09 c1                	or     ecx,eax
c001222b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001222f:	8d 50 03             	lea    edx,[eax+0x3]
c0012232:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012236:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001223a:	0f b6 c0             	movzx  eax,al
c001223d:	c1 e0 18             	shl    eax,0x18
c0012240:	09 c1                	or     ecx,eax
c0012242:	89 ca                	mov    edx,ecx
c0012244:	a0 80 93 02 c0       	mov    al,ds:0xc0029380
c0012249:	0f b6 c0             	movzx  eax,al
c001224c:	89 14 85 c0 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c40],edx
c0012253:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012258:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001225c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012260:	01 d0                	add    eax,edx
c0012262:	83 c0 2c             	add    eax,0x2c
c0012265:	8a 00                	mov    al,BYTE PTR [eax]
c0012267:	0f b6 d0             	movzx  edx,al
c001226a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001226e:	8d 48 01             	lea    ecx,[eax+0x1]
c0012271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012275:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012279:	0f b6 c0             	movzx  eax,al
c001227c:	c1 e0 08             	shl    eax,0x8
c001227f:	89 d1                	mov    ecx,edx
c0012281:	09 c1                	or     ecx,eax
c0012283:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012287:	8d 50 02             	lea    edx,[eax+0x2]
c001228a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001228e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012292:	0f b6 c0             	movzx  eax,al
c0012295:	c1 e0 10             	shl    eax,0x10
c0012298:	09 c1                	or     ecx,eax
c001229a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001229e:	8d 50 03             	lea    edx,[eax+0x3]
c00122a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00122a9:	0f b6 c0             	movzx  eax,al
c00122ac:	c1 e0 18             	shl    eax,0x18
c00122af:	09 c1                	or     ecx,eax
c00122b1:	89 ca                	mov    edx,ecx
c00122b3:	a0 80 93 02 c0       	mov    al,ds:0xc0029380
c00122b8:	0f b6 c0             	movzx  eax,al
c00122bb:	89 14 85 40 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6bc0],edx
c00122c2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00122c7:	a0 80 93 02 c0       	mov    al,ds:0xc0029380
c00122cc:	40                   	inc    eax
c00122cd:	a2 80 93 02 c0       	mov    ds:0xc0029380,al
c00122d2:	e9 a5 01 00 00       	jmp    c001247c <scanMADT()+0x4b8>
c00122d7:	90                   	nop
c00122d8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00122dd:	0f 85 e9 00 00 00    	jne    c00123cc <scanMADT()+0x408>
c00122e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122e7:	8d 50 01             	lea    edx,[eax+0x1]
c00122ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00122f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00122f6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00122fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122fe:	8d 50 01             	lea    edx,[eax+0x1]
c0012301:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012305:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012309:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001230d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0012311:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012315:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012319:	01 d0                	add    eax,edx
c001231b:	83 c0 2c             	add    eax,0x2c
c001231e:	8a 00                	mov    al,BYTE PTR [eax]
c0012320:	0f b6 d0             	movzx  edx,al
c0012323:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012327:	8d 48 01             	lea    ecx,[eax+0x1]
c001232a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001232e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012332:	0f b6 c0             	movzx  eax,al
c0012335:	c1 e0 08             	shl    eax,0x8
c0012338:	89 d1                	mov    ecx,edx
c001233a:	09 c1                	or     ecx,eax
c001233c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012340:	8d 50 02             	lea    edx,[eax+0x2]
c0012343:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012347:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001234b:	0f b6 c0             	movzx  eax,al
c001234e:	c1 e0 10             	shl    eax,0x10
c0012351:	09 c1                	or     ecx,eax
c0012353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012357:	8d 50 03             	lea    edx,[eax+0x3]
c001235a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001235e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012362:	0f b6 c0             	movzx  eax,al
c0012365:	c1 e0 18             	shl    eax,0x18
c0012368:	09 c8                	or     eax,ecx
c001236a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001236e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012373:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012377:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001237b:	01 d0                	add    eax,edx
c001237d:	83 c0 2c             	add    eax,0x2c
c0012380:	8a 00                	mov    al,BYTE PTR [eax]
c0012382:	0f b6 c0             	movzx  eax,al
c0012385:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012389:	8d 4a 01             	lea    ecx,[edx+0x1]
c001238c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012390:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012394:	0f b6 d2             	movzx  edx,dl
c0012397:	c1 e2 08             	shl    edx,0x8
c001239a:	09 d0                	or     eax,edx
c001239c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00123a1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00123a6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00123ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123af:	88 90 60 81 02 c0    	mov    BYTE PTR [eax-0x3ffd7ea0],dl
c00123b5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00123ba:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00123bf:	66 89 84 12 60 93 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6ca0],ax
c00123c7:	e9 b0 00 00 00       	jmp    c001247c <scanMADT()+0x4b8>
c00123cc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00123d1:	0f 85 99 00 00 00    	jne    c0012470 <scanMADT()+0x4ac>
c00123d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123db:	8d 50 01             	lea    edx,[eax+0x1]
c00123de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00123e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00123ea:	0f b6 c0             	movzx  eax,al
c00123ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00123f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123f9:	01 d0                	add    eax,edx
c00123fb:	83 c0 2c             	add    eax,0x2c
c00123fe:	8a 00                	mov    al,BYTE PTR [eax]
c0012400:	0f b6 d0             	movzx  edx,al
c0012403:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012407:	8d 48 01             	lea    ecx,[eax+0x1]
c001240a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001240e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012412:	0f b6 c0             	movzx  eax,al
c0012415:	c1 e0 08             	shl    eax,0x8
c0012418:	09 d0                	or     eax,edx
c001241a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001241e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012423:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012427:	8d 50 01             	lea    edx,[eax+0x1]
c001242a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001242e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012432:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012436:	0f b6 c0             	movzx  eax,al
c0012439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001243d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012441:	c1 e0 08             	shl    eax,0x8
c0012444:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012448:	89 c1                	mov    ecx,eax
c001244a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001244e:	c1 e0 18             	shl    eax,0x18
c0012451:	89 c3                	mov    ebx,eax
c0012453:	a1 d0 92 02 c0       	mov    eax,ds:0xc00292d0
c0012458:	8d 50 01             	lea    edx,[eax+0x1]
c001245b:	89 15 d0 92 02 c0    	mov    DWORD PTR ds:0xc00292d0,edx
c0012461:	09 d9                	or     ecx,ebx
c0012463:	89 ca                	mov    edx,ecx
c0012465:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001246c:	eb 0e                	jmp    c001247c <scanMADT()+0x4b8>
c001246e:	66 90                	xchg   ax,ax
c0012470:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012475:	75 05                	jne    c001247c <scanMADT()+0x4b8>
c0012477:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001247c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012481:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012485:	01 d0                	add    eax,edx
c0012487:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001248b:	e9 68 fc ff ff       	jmp    c00120f8 <scanMADT()+0x134>
c0012490:	90                   	nop
c0012491:	eb 05                	jmp    c0012498 <scanMADT()+0x4d4>
c0012493:	90                   	nop
c0012494:	90                   	nop
c0012495:	8d 76 00             	lea    esi,[esi+0x0]
c0012498:	83 c4 38             	add    esp,0x38
c001249b:	5b                   	pop    ebx
c001249c:	c3                   	ret    
c001249d:	90                   	nop
c001249e:	66 90                	xchg   ax,ax

c00124a0 <ACPI::ACPI()>:
c00124a0:	83 ec 0c             	sub    esp,0xc
c00124a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a7:	83 ec 08             	sub    esp,0x8
c00124aa:	68 33 5d 02 c0       	push   0xc0025d33
c00124af:	50                   	push   eax
c00124b0:	e8 01 c3 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c00124b5:	83 c4 10             	add    esp,0x10
c00124b8:	ba f4 5e 02 c0       	mov    edx,0xc0025ef4
c00124bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c1:	89 10                	mov    DWORD PTR [eax],edx
c00124c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00124ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00124dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00124ea:	83 ec 0c             	sub    esp,0xc
c00124ed:	68 38 5d 02 c0       	push   0xc0025d38
c00124f2:	e8 b6 78 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00124f7:	83 c4 10             	add    esp,0x10
c00124fa:	e8 c5 fa ff ff       	call   c0011fc4 <scanMADT()>
c00124ff:	90                   	nop
c0012500:	83 c4 0c             	add    esp,0xc
c0012503:	c3                   	ret    

c0012504 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012504:	83 ec 2c             	sub    esp,0x2c
c0012507:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001250b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001250f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0012513:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012517:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001251c:	88 d0                	mov    al,dl
c001251e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012522:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012527:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001252f:	90                   	nop
c0012530:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012534:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001253a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001253e:	0f 8d 9c 00 00 00    	jge    c00125e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012544:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012548:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001254c:	83 c2 2a             	add    edx,0x2a
c001254f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012553:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012558:	75 7a                	jne    c00125d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001255a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001255e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012562:	83 c2 2a             	add    edx,0x2a
c0012565:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012569:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001256d:	75 65                	jne    c00125d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001256f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012574:	74 3a                	je     c00125b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012576:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001257a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001257e:	83 c2 2a             	add    edx,0x2a
c0012581:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012585:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012589:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001258c:	39 c2                	cmp    edx,eax
c001258e:	74 10                	je     c00125a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012590:	83 ec 0c             	sub    esp,0xc
c0012593:	68 8c 5b 02 c0       	push   0xc0025b8c
c0012598:	e8 58 2a 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c001259d:	83 c4 10             	add    esp,0x10
c00125a0:	83 ec 0c             	sub    esp,0xc
c00125a3:	68 46 5d 02 c0       	push   0xc0025d46
c00125a8:	e8 48 2a 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c00125ad:	83 c4 10             	add    esp,0x10
c00125b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125bc:	83 c2 2a             	add    edx,0x2a
c00125bf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00125c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00125c5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00125c8:	89 01                	mov    DWORD PTR [ecx],eax
c00125ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00125cd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00125d2:	66 90                	xchg   ax,ax
c00125d4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00125d8:	e9 53 ff ff ff       	jmp    c0012530 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00125dd:	8d 76 00             	lea    esi,[esi+0x0]
c00125e0:	90                   	nop
c00125e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125e5:	83 c4 2c             	add    esp,0x2c
c00125e8:	c2 04 00             	ret    0x4
c00125eb:	90                   	nop

c00125ec <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00125ec:	83 ec 1c             	sub    esp,0x1c
c00125ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125f3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00125f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125fb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012600:	88 c8                	mov    al,cl
c0012602:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012606:	88 d0                	mov    al,dl
c0012608:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001260c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012610:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001261a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001261d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012621:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012629:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001262f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012633:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012636:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001263a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001263f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012643:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012649:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001264d:	8d 48 01             	lea    ecx,[eax+0x1]
c0012650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012654:	83 c2 2a             	add    edx,0x2a
c0012657:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001265b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001265f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012669:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001266c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012670:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012678:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001267e:	8d 50 01             	lea    edx,[eax+0x1]
c0012681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012685:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001268b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001268f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012695:	3d 00 02 00 00       	cmp    eax,0x200
c001269a:	75 10                	jne    c00126ac <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001269c:	83 ec 0c             	sub    esp,0xc
c001269f:	68 55 5d 02 c0       	push   0xc0025d55
c00126a4:	e8 4c 29 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	90                   	nop
c00126ad:	83 c4 1c             	add    esp,0x1c
c00126b0:	c3                   	ret    
c00126b1:	90                   	nop
c00126b2:	66 90                	xchg   ax,ax

c00126b4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00126b4:	b8 00 00 00 00       	mov    eax,0x0
c00126b9:	c3                   	ret    
c00126ba:	66 90                	xchg   ax,ax

c00126bc <ACPI::detectPCI()>:
c00126bc:	53                   	push   ebx
c00126bd:	83 ec 68             	sub    esp,0x68
c00126c0:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00126c5:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00126ca:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00126cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00126d5:	83 e0 04             	and    eax,0x4
c00126d8:	84 c0                	test   al,al
c00126da:	74 2c                	je     c0012708 <ACPI::detectPCI()+0x4c>
c00126dc:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c00126e1:	83 ec 08             	sub    esp,0x8
c00126e4:	68 72 5d 02 c0       	push   0xc0025d72
c00126e9:	50                   	push   eax
c00126ea:	e8 5d f8 ff ff       	call   c0011f4c <findDataTable(unsigned char*, char*)>
c00126ef:	83 c4 10             	add    esp,0x10
c00126f2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00126f6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00126fb:	74 0b                	je     c0012708 <ACPI::detectPCI()+0x4c>
c00126fd:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012702:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012707:	90                   	nop
c0012708:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012710:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012714:	8a 00                	mov    al,BYTE PTR [eax]
c0012716:	3c 01                	cmp    al,0x1
c0012718:	75 0e                	jne    c0012728 <ACPI::detectPCI()+0x6c>
c001271a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001271f:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012724:	eb 2a                	jmp    c0012750 <ACPI::detectPCI()+0x94>
c0012726:	66 90                	xchg   ax,ax
c0012728:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001272c:	8a 00                	mov    al,BYTE PTR [eax]
c001272e:	3c 02                	cmp    al,0x2
c0012730:	75 1e                	jne    c0012750 <ACPI::detectPCI()+0x94>
c0012732:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012737:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001273c:	74 12                	je     c0012750 <ACPI::detectPCI()+0x94>
c001273e:	83 ec 0c             	sub    esp,0xc
c0012741:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012746:	e8 aa 28 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c001274b:	83 c4 10             	add    esp,0x10
c001274e:	66 90                	xchg   ax,ax
c0012750:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012754:	83 f0 01             	xor    eax,0x1
c0012757:	84 c0                	test   al,al
c0012759:	74 41                	je     c001279c <ACPI::detectPCI()+0xe0>
c001275b:	e8 f0 d9 fe ff       	call   c0000150 <manualPCIProbe>
c0012760:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012764:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012769:	75 0d                	jne    c0012778 <ACPI::detectPCI()+0xbc>
c001276b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012770:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012775:	eb 25                	jmp    c001279c <ACPI::detectPCI()+0xe0>
c0012777:	90                   	nop
c0012778:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c001277d:	75 1d                	jne    c001279c <ACPI::detectPCI()+0xe0>
c001277f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012784:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012789:	74 11                	je     c001279c <ACPI::detectPCI()+0xe0>
c001278b:	83 ec 0c             	sub    esp,0xc
c001278e:	68 bc 5b 02 c0       	push   0xc0025bbc
c0012793:	e8 5d 28 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c0012798:	83 c4 10             	add    esp,0x10
c001279b:	90                   	nop
c001279c:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00127a1:	0f 84 49 03 00 00    	je     c0012af0 <ACPI::detectPCI()+0x434>
c00127a7:	83 ec 0c             	sub    esp,0xc
c00127aa:	68 77 5d 02 c0       	push   0xc0025d77
c00127af:	e8 f9 75 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00127b4:	83 c4 10             	add    esp,0x10
c00127b7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00127bc:	0f 84 8e 00 00 00    	je     c0012850 <ACPI::detectPCI()+0x194>
c00127c2:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c00127c7:	25 00 08 00 00       	and    eax,0x800
c00127cc:	0f 84 16 01 00 00    	je     c00128e8 <ACPI::detectPCI()+0x22c>
c00127d2:	83 ec 0c             	sub    esp,0xc
c00127d5:	68 e4 5b 02 c0       	push   0xc0025be4
c00127da:	e8 ce 75 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c00127e7:	25 80 00 00 00       	and    eax,0x80
c00127ec:	0f 85 f6 00 00 00    	jne    c00128e8 <ACPI::detectPCI()+0x22c>
c00127f2:	66 90                	xchg   ax,ax
c00127f4:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00127fb:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012800:	89 c2                	mov    edx,eax
c0012802:	ec                   	in     al,dx
c0012803:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012807:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001280b:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c001280f:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012814:	74 0a                	je     c0012820 <ACPI::detectPCI()+0x164>
c0012816:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c001281b:	74 03                	je     c0012820 <ACPI::detectPCI()+0x164>
c001281d:	eb d5                	jmp    c00127f4 <ACPI::detectPCI()+0x138>
c001281f:	90                   	nop
c0012820:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012827:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c001282c:	89 c2                	mov    edx,eax
c001282e:	ec                   	in     al,dx
c001282f:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c0012833:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012837:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c001283b:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012840:	74 de                	je     c0012820 <ACPI::detectPCI()+0x164>
c0012842:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012847:	0f 85 93 00 00 00    	jne    c00128e0 <ACPI::detectPCI()+0x224>
c001284d:	eb d1                	jmp    c0012820 <ACPI::detectPCI()+0x164>
c001284f:	90                   	nop
c0012850:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012854:	83 f0 01             	xor    eax,0x1
c0012857:	84 c0                	test   al,al
c0012859:	0f 84 89 00 00 00    	je     c00128e8 <ACPI::detectPCI()+0x22c>
c001285f:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0012864:	25 00 08 00 00       	and    eax,0x800
c0012869:	74 7d                	je     c00128e8 <ACPI::detectPCI()+0x22c>
c001286b:	83 ec 0c             	sub    esp,0xc
c001286e:	68 08 5c 02 c0       	push   0xc0025c08
c0012873:	e8 35 75 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0012880:	25 80 00 00 00       	and    eax,0x80
c0012885:	75 61                	jne    c00128e8 <ACPI::detectPCI()+0x22c>
c0012887:	90                   	nop
c0012888:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001288f:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012894:	89 c2                	mov    edx,eax
c0012896:	ec                   	in     al,dx
c0012897:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001289b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001289f:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00128a3:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00128a8:	74 0a                	je     c00128b4 <ACPI::detectPCI()+0x1f8>
c00128aa:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00128af:	74 03                	je     c00128b4 <ACPI::detectPCI()+0x1f8>
c00128b1:	eb d5                	jmp    c0012888 <ACPI::detectPCI()+0x1cc>
c00128b3:	90                   	nop
c00128b4:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00128bb:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00128c0:	89 c2                	mov    edx,eax
c00128c2:	ec                   	in     al,dx
c00128c3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00128c7:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00128cb:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00128cf:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00128d4:	74 de                	je     c00128b4 <ACPI::detectPCI()+0x1f8>
c00128d6:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00128db:	75 07                	jne    c00128e4 <ACPI::detectPCI()+0x228>
c00128dd:	eb d5                	jmp    c00128b4 <ACPI::detectPCI()+0x1f8>
c00128df:	90                   	nop
c00128e0:	90                   	nop
c00128e1:	eb 05                	jmp    c00128e8 <ACPI::detectPCI()+0x22c>
c00128e3:	90                   	nop
c00128e4:	90                   	nop
c00128e5:	8d 76 00             	lea    esi,[esi+0x0]
c00128e8:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00128f0:	83 ec 0c             	sub    esp,0xc
c00128f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00128f7:	e8 57 74 ff ff       	call   c0009d53 <malloc>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	89 c3                	mov    ebx,eax
c0012901:	83 ec 0c             	sub    esp,0xc
c0012904:	53                   	push   ebx
c0012905:	e8 c0 b0 00 00       	call   c001d9ca <PCI::PCI()>
c001290a:	83 c4 10             	add    esp,0x10
c001290d:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012911:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0012916:	25 00 08 00 00       	and    eax,0x800
c001291b:	74 7b                	je     c0012998 <ACPI::detectPCI()+0x2dc>
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	68 8f 5d 02 c0       	push   0xc0025d8f
c0012925:	e8 83 74 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0012932:	25 80 00 00 00       	and    eax,0x80
c0012937:	75 5f                	jne    c0012998 <ACPI::detectPCI()+0x2dc>
c0012939:	8d 76 00             	lea    esi,[esi+0x0]
c001293c:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012943:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012948:	89 c2                	mov    edx,eax
c001294a:	ec                   	in     al,dx
c001294b:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001294f:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012953:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012957:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c001295c:	74 0a                	je     c0012968 <ACPI::detectPCI()+0x2ac>
c001295e:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012963:	74 03                	je     c0012968 <ACPI::detectPCI()+0x2ac>
c0012965:	eb d5                	jmp    c001293c <ACPI::detectPCI()+0x280>
c0012967:	90                   	nop
c0012968:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001296f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012974:	89 c2                	mov    edx,eax
c0012976:	ec                   	in     al,dx
c0012977:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001297b:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001297f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012983:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012988:	74 de                	je     c0012968 <ACPI::detectPCI()+0x2ac>
c001298a:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001298f:	75 03                	jne    c0012994 <ACPI::detectPCI()+0x2d8>
c0012991:	eb d5                	jmp    c0012968 <ACPI::detectPCI()+0x2ac>
c0012993:	90                   	nop
c0012994:	90                   	nop
c0012995:	8d 76 00             	lea    esi,[esi+0x0]
c0012998:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001299c:	83 ec 08             	sub    esp,0x8
c001299f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00129a3:	50                   	push   eax
c00129a4:	e8 09 bc ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c00129a9:	83 c4 10             	add    esp,0x10
c00129ac:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c00129b1:	25 00 08 00 00       	and    eax,0x800
c00129b6:	74 78                	je     c0012a30 <ACPI::detectPCI()+0x374>
c00129b8:	83 ec 0c             	sub    esp,0xc
c00129bb:	68 95 5d 02 c0       	push   0xc0025d95
c00129c0:	e8 e8 73 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00129c5:	83 c4 10             	add    esp,0x10
c00129c8:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c00129cd:	25 80 00 00 00       	and    eax,0x80
c00129d2:	75 5c                	jne    c0012a30 <ACPI::detectPCI()+0x374>
c00129d4:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00129db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00129e0:	89 c2                	mov    edx,eax
c00129e2:	ec                   	in     al,dx
c00129e3:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00129e7:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00129eb:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00129ef:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00129f4:	74 0a                	je     c0012a00 <ACPI::detectPCI()+0x344>
c00129f6:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00129fb:	74 03                	je     c0012a00 <ACPI::detectPCI()+0x344>
c00129fd:	eb d5                	jmp    c00129d4 <ACPI::detectPCI()+0x318>
c00129ff:	90                   	nop
c0012a00:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012a07:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012a0c:	89 c2                	mov    edx,eax
c0012a0e:	ec                   	in     al,dx
c0012a0f:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012a13:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012a17:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012a1b:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012a20:	74 de                	je     c0012a00 <ACPI::detectPCI()+0x344>
c0012a22:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012a27:	75 03                	jne    c0012a2c <ACPI::detectPCI()+0x370>
c0012a29:	eb d5                	jmp    c0012a00 <ACPI::detectPCI()+0x344>
c0012a2b:	90                   	nop
c0012a2c:	90                   	nop
c0012a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a30:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a36:	83 c0 08             	add    eax,0x8
c0012a39:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a3b:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012a40:	74 0a                	je     c0012a4c <ACPI::detectPCI()+0x390>
c0012a42:	ba 01 00 00 00       	mov    edx,0x1
c0012a47:	eb 0b                	jmp    c0012a54 <ACPI::detectPCI()+0x398>
c0012a49:	8d 76 00             	lea    esi,[esi+0x0]
c0012a4c:	ba 02 00 00 00       	mov    edx,0x2
c0012a51:	8d 76 00             	lea    esi,[esi+0x0]
c0012a54:	6a 00                	push   0x0
c0012a56:	6a 00                	push   0x0
c0012a58:	52                   	push   edx
c0012a59:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a5d:	ff d0                	call   eax
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0012a67:	25 00 08 00 00       	and    eax,0x800
c0012a6c:	0f 84 26 01 00 00    	je     c0012b98 <ACPI::detectPCI()+0x4dc>
c0012a72:	83 ec 0c             	sub    esp,0xc
c0012a75:	68 9b 5d 02 c0       	push   0xc0025d9b
c0012a7a:	e8 2e 73 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c0012a87:	25 80 00 00 00       	and    eax,0x80
c0012a8c:	0f 85 06 01 00 00    	jne    c0012b98 <ACPI::detectPCI()+0x4dc>
c0012a92:	66 90                	xchg   ax,ax
c0012a94:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012a9b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012aa0:	89 c2                	mov    edx,eax
c0012aa2:	ec                   	in     al,dx
c0012aa3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012aa7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012aab:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012aaf:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012ab4:	74 0a                	je     c0012ac0 <ACPI::detectPCI()+0x404>
c0012ab6:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012abb:	74 03                	je     c0012ac0 <ACPI::detectPCI()+0x404>
c0012abd:	eb d5                	jmp    c0012a94 <ACPI::detectPCI()+0x3d8>
c0012abf:	90                   	nop
c0012ac0:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012ac7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012acc:	89 c2                	mov    edx,eax
c0012ace:	ec                   	in     al,dx
c0012acf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012ad3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012ad7:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012adb:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012ae0:	74 de                	je     c0012ac0 <ACPI::detectPCI()+0x404>
c0012ae2:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012ae7:	0f 85 a7 00 00 00    	jne    c0012b94 <ACPI::detectPCI()+0x4d8>
c0012aed:	eb d1                	jmp    c0012ac0 <ACPI::detectPCI()+0x404>
c0012aef:	90                   	nop
c0012af0:	83 ec 0c             	sub    esp,0xc
c0012af3:	68 a1 5d 02 c0       	push   0xc0025da1
c0012af8:	e8 42 a5 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0012afd:	83 c4 10             	add    esp,0x10
c0012b00:	83 ec 0c             	sub    esp,0xc
c0012b03:	68 ac 5d 02 c0       	push   0xc0025dac
c0012b08:	e8 a0 72 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012b18:	83 ec 0c             	sub    esp,0xc
c0012b1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b1f:	e8 2f 72 ff ff       	call   c0009d53 <malloc>
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	89 c3                	mov    ebx,eax
c0012b29:	83 ec 0c             	sub    esp,0xc
c0012b2c:	53                   	push   ebx
c0012b2d:	e8 02 c0 00 00       	call   c001eb34 <IDE::IDE()>
c0012b32:	83 c4 10             	add    esp,0x10
c0012b35:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012b39:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012b3d:	83 ec 08             	sub    esp,0x8
c0012b40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b44:	50                   	push   eax
c0012b45:	e8 68 ba ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c0012b4a:	83 c4 10             	add    esp,0x10
c0012b4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b51:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012b5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b5f:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012b68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b6c:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012b75:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b7b:	83 c0 08             	add    eax,0x8
c0012b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b80:	6a 00                	push   0x0
c0012b82:	6a 00                	push   0x0
c0012b84:	6a 00                	push   0x0
c0012b86:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012b8a:	ff d0                	call   eax
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	eb 07                	jmp    c0012b98 <ACPI::detectPCI()+0x4dc>
c0012b91:	8d 76 00             	lea    esi,[esi+0x0]
c0012b94:	90                   	nop
c0012b95:	8d 76 00             	lea    esi,[esi+0x0]
c0012b98:	90                   	nop
c0012b99:	83 c4 68             	add    esp,0x68
c0012b9c:	5b                   	pop    ebx
c0012b9d:	c3                   	ret    
c0012b9e:	66 90                	xchg   ax,ax

c0012ba0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012ba0:	83 ec 1c             	sub    esp,0x1c
c0012ba3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ba7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012baa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012bae:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0012bb3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012bb8:	83 ec 08             	sub    esp,0x8
c0012bbb:	52                   	push   edx
c0012bbc:	50                   	push   eax
c0012bbd:	e8 58 67 ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c0012bc2:	83 c4 10             	add    esp,0x10
c0012bc5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012bc9:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0012bce:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012bd3:	83 ec 04             	sub    esp,0x4
c0012bd6:	6a 01                	push   0x1
c0012bd8:	52                   	push   edx
c0012bd9:	50                   	push   eax
c0012bda:	e8 1f 69 ff ff       	call   c00094fe <Computer::writeCMOS(unsigned char, unsigned char)>
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	90                   	nop
c0012be3:	83 c4 1c             	add    esp,0x1c
c0012be6:	c3                   	ret    
c0012be7:	90                   	nop

c0012be8 <ACPI::sleep()>:
c0012be8:	83 ec 0c             	sub    esp,0xc
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	68 c1 5d 02 c0       	push   0xc0025dc1
c0012bf3:	e8 47 a4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0012bf8:	83 c4 10             	add    esp,0x10
c0012bfb:	a1 a0 90 02 c0       	mov    eax,ds:0xc00290a0
c0012c00:	85 c0                	test   eax,eax
c0012c02:	74 18                	je     c0012c1c <ACPI::sleep()+0x34>
c0012c04:	83 ec 0c             	sub    esp,0xc
c0012c07:	68 ce 5d 02 c0       	push   0xc0025dce
c0012c0c:	e8 2e a4 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0012c11:	83 c4 10             	add    esp,0x10
c0012c14:	a1 a0 90 02 c0       	mov    eax,ds:0xc00290a0
c0012c19:	ff d0                	call   eax
c0012c1b:	90                   	nop
c0012c1c:	90                   	nop
c0012c1d:	83 c4 0c             	add    esp,0xc
c0012c20:	c3                   	ret    
c0012c21:	90                   	nop
c0012c22:	66 90                	xchg   ax,ax

c0012c24 <ACPI::open(int, int, void*)>:
c0012c24:	57                   	push   edi
c0012c25:	56                   	push   esi
c0012c26:	53                   	push   ebx
c0012c27:	81 ec 70 01 00 00    	sub    esp,0x170
c0012c2d:	83 ec 0c             	sub    esp,0xc
c0012c30:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012c37:	e8 80 fa ff ff       	call   c00126bc <ACPI::detectPCI()>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	83 ec 0c             	sub    esp,0xc
c0012c42:	68 2c 5c 02 c0       	push   0xc0025c2c
c0012c47:	e8 61 71 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012c4c:	83 c4 10             	add    esp,0x10
c0012c4f:	83 ec 0c             	sub    esp,0xc
c0012c52:	68 e8 5d 02 c0       	push   0xc0025de8
c0012c57:	e8 47 4b 00 00       	call   c00177a3 <Thr::loadKernelSymbolTable(char const*)>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012c67:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012c72:	83 ec 0c             	sub    esp,0xc
c0012c75:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012c7c:	e8 d2 70 ff ff       	call   c0009d53 <malloc>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	89 c3                	mov    ebx,eax
c0012c86:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c0012c8b:	83 ec 04             	sub    esp,0x4
c0012c8e:	50                   	push   eax
c0012c8f:	68 06 5e 02 c0       	push   0xc0025e06
c0012c94:	53                   	push   ebx
c0012c95:	e8 10 a9 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0012c9a:	83 c4 10             	add    esp,0x10
c0012c9d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012ca4:	83 ec 08             	sub    esp,0x8
c0012ca7:	6a 01                	push   0x1
c0012ca9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012cb0:	e8 cf a9 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012cbf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012cc7:	75 17                	jne    c0012ce0 <ACPI::open(int, int, void*)+0xbc>
c0012cc9:	83 ec 0c             	sub    esp,0xc
c0012ccc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012cd3:	e8 0a aa ff ff       	call   c000d6e2 <File::close()>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	eb 0b                	jmp    c0012ce8 <ACPI::open(int, int, void*)+0xc4>
c0012cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ce0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012ce8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012cf0:	74 1e                	je     c0012d10 <ACPI::open(int, int, void*)+0xec>
c0012cf2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cfb:	83 c0 08             	add    eax,0x8
c0012cfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d00:	83 ec 0c             	sub    esp,0xc
c0012d03:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012d0a:	ff d0                	call   eax
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	90                   	nop
c0012d10:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012d17:	83 f0 01             	xor    eax,0x1
c0012d1a:	84 c0                	test   al,al
c0012d1c:	74 42                	je     c0012d60 <ACPI::open(int, int, void*)+0x13c>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	68 24 5e 02 c0       	push   0xc0025e24
c0012d26:	e8 82 70 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	83 ec 04             	sub    esp,0x4
c0012d31:	6a 0c                	push   0xc
c0012d33:	68 3f 5e 02 c0       	push   0xc0025e3f
c0012d38:	68 50 5e 02 c0       	push   0xc0025e50
c0012d3d:	e8 cb 30 00 00       	call   c0015e0d <Reg::readIntWithDefault(char*, char*, int)>
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012d4c:	83 ec 0c             	sub    esp,0xc
c0012d4f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012d56:	e8 c8 91 ff ff       	call   c000bf23 <Virt::setupPageSwapping(int)>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	66 90                	xchg   ax,ax
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	68 06 44 02 c0       	push   0xc0024406
c0012d68:	e8 40 70 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c0012d76:	83 ec 08             	sub    esp,0x8
c0012d79:	6a 01                	push   0x1
c0012d7b:	68 57 5e 02 c0       	push   0xc0025e57
c0012d80:	e8 95 54 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	83 ec 08             	sub    esp,0x8
c0012d8b:	53                   	push   ebx
c0012d8c:	50                   	push   eax
c0012d8d:	e8 b9 56 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c0012d92:	83 c4 10             	add    esp,0x10
c0012d95:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012d9c:	83 ec 08             	sub    esp,0x8
c0012d9f:	6a 12                	push   0x12
c0012da1:	50                   	push   eax
c0012da2:	e8 8f bb ff ff       	call   c000e936 <getDevicesOfType(DeviceType)>
c0012da7:	83 c4 0c             	add    esp,0xc
c0012daa:	66 90                	xchg   ax,ax
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012db6:	50                   	push   eax
c0012db7:	e8 2c 08 01 00       	call   c00235e8 <LinkedList<Device>::isEmpty()>
c0012dbc:	83 c4 10             	add    esp,0x10
c0012dbf:	83 f0 01             	xor    eax,0x1
c0012dc2:	84 c0                	test   al,al
c0012dc4:	0f 84 46 01 00 00    	je     c0012f10 <ACPI::open(int, int, void*)+0x2ec>
c0012dca:	83 ec 0c             	sub    esp,0xc
c0012dcd:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012dd4:	50                   	push   eax
c0012dd5:	e8 2a 08 01 00       	call   c0023604 <LinkedList<Device>::getFirstElement()>
c0012dda:	83 c4 10             	add    esp,0x10
c0012ddd:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012dee:	50                   	push   eax
c0012def:	e8 18 08 01 00       	call   c002360c <LinkedList<Device>::removeFirst()>
c0012df4:	83 c4 10             	add    esp,0x10
c0012df7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012dfe:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012e05:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012e0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012e10:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012e16:	ba 09 00 00 00       	mov    edx,0x9
c0012e1b:	fc                   	cld    
c0012e1c:	89 c7                	mov    edi,eax
c0012e1e:	89 de                	mov    esi,ebx
c0012e20:	89 d1                	mov    ecx,edx
c0012e22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e24:	83 ec 08             	sub    esp,0x8
c0012e27:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012e2b:	50                   	push   eax
c0012e2c:	83 ec 24             	sub    esp,0x24
c0012e2f:	89 e0                	mov    eax,esp
c0012e31:	89 c3                	mov    ebx,eax
c0012e33:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012e37:	ba 09 00 00 00       	mov    edx,0x9
c0012e3c:	89 df                	mov    edi,ebx
c0012e3e:	89 c6                	mov    esi,eax
c0012e40:	89 d1                	mov    ecx,edx
c0012e42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012e44:	e8 5f b0 00 00       	call   c001dea8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012e49:	83 c4 30             	add    esp,0x30
c0012e4c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012e53:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012e5b:	0f 84 4b ff ff ff    	je     c0012dac <ACPI::open(int, int, void*)+0x188>
c0012e61:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012e76:	e8 d8 6e ff ff       	call   c0009d53 <malloc>
c0012e7b:	83 c4 10             	add    esp,0x10
c0012e7e:	89 c3                	mov    ebx,eax
c0012e80:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c0012e85:	83 ec 04             	sub    esp,0x4
c0012e88:	50                   	push   eax
c0012e89:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012e90:	53                   	push   ebx
c0012e91:	e8 14 a7 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012eaa:	e8 43 aa ff ff       	call   c000d8f2 <File::exists()>
c0012eaf:	83 c4 10             	add    esp,0x10
c0012eb2:	84 c0                	test   al,al
c0012eb4:	74 2a                	je     c0012ee0 <ACPI::open(int, int, void*)+0x2bc>
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	6a 01                	push   0x1
c0012ebb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ec2:	e8 53 53 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c0012ec7:	83 c4 10             	add    esp,0x10
c0012eca:	83 ec 08             	sub    esp,0x8
c0012ecd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ed4:	50                   	push   eax
c0012ed5:	e8 71 55 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c0012eda:	83 c4 10             	add    esp,0x10
c0012edd:	8d 76 00             	lea    esi,[esi+0x0]
c0012ee0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012ee8:	0f 84 be fe ff ff    	je     c0012dac <ACPI::open(int, int, void*)+0x188>
c0012eee:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012ef5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ef7:	83 c0 08             	add    eax,0x8
c0012efa:	8b 00                	mov    eax,DWORD PTR [eax]
c0012efc:	83 ec 0c             	sub    esp,0xc
c0012eff:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012f06:	ff d0                	call   eax
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	e9 9c fe ff ff       	jmp    c0012dac <ACPI::open(int, int, void*)+0x188>
c0012f10:	83 ec 0c             	sub    esp,0xc
c0012f13:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f1a:	50                   	push   eax
c0012f1b:	e8 c4 06 01 00       	call   c00235e4 <LinkedList<Device>::~LinkedList()>
c0012f20:	83 c4 10             	add    esp,0x10
c0012f23:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c0012f29:	83 ec 08             	sub    esp,0x8
c0012f2c:	6a 01                	push   0x1
c0012f2e:	68 72 5e 02 c0       	push   0xc0025e72
c0012f33:	e8 e2 52 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	83 ec 08             	sub    esp,0x8
c0012f3e:	53                   	push   ebx
c0012f3f:	50                   	push   eax
c0012f40:	e8 06 55 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c0012f45:	83 c4 10             	add    esp,0x10
c0012f48:	8b 1d 68 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a68
c0012f4e:	83 ec 08             	sub    esp,0x8
c0012f51:	6a 01                	push   0x1
c0012f53:	68 8f 5e 02 c0       	push   0xc0025e8f
c0012f58:	e8 bd 52 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	83 ec 08             	sub    esp,0x8
c0012f63:	53                   	push   ebx
c0012f64:	50                   	push   eax
c0012f65:	e8 e1 54 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0012f72:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f78:	83 e0 04             	and    eax,0x4
c0012f7b:	84 c0                	test   al,al
c0012f7d:	0f 84 15 01 00 00    	je     c0013098 <ACPI::open(int, int, void*)+0x474>
c0012f83:	83 ec 0c             	sub    esp,0xc
c0012f86:	68 ac 5e 02 c0       	push   0xc0025eac
c0012f8b:	e8 1d 6e ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012f9e:	83 ec 0c             	sub    esp,0xc
c0012fa1:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012fa8:	e8 a6 6d ff ff       	call   c0009d53 <malloc>
c0012fad:	83 c4 10             	add    esp,0x10
c0012fb0:	89 c3                	mov    ebx,eax
c0012fb2:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c0012fb7:	83 ec 04             	sub    esp,0x4
c0012fba:	50                   	push   eax
c0012fbb:	68 c9 5e 02 c0       	push   0xc0025ec9
c0012fc0:	53                   	push   ebx
c0012fc1:	e8 e4 a5 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012fd0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012fd8:	74 1a                	je     c0012ff4 <ACPI::open(int, int, void*)+0x3d0>
c0012fda:	83 ec 0c             	sub    esp,0xc
c0012fdd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012fe4:	e8 09 a9 ff ff       	call   c000d8f2 <File::exists()>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	84 c0                	test   al,al
c0012fee:	74 04                	je     c0012ff4 <ACPI::open(int, int, void*)+0x3d0>
c0012ff0:	b0 01                	mov    al,0x1
c0012ff2:	eb 04                	jmp    c0012ff8 <ACPI::open(int, int, void*)+0x3d4>
c0012ff4:	b0 00                	mov    al,0x0
c0012ff6:	66 90                	xchg   ax,ax
c0012ff8:	84 c0                	test   al,al
c0012ffa:	74 28                	je     c0013024 <ACPI::open(int, int, void*)+0x400>
c0012ffc:	83 ec 08             	sub    esp,0x8
c0012fff:	6a 01                	push   0x1
c0013001:	68 c9 5e 02 c0       	push   0xc0025ec9
c0013006:	e8 0f 52 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c001300b:	83 c4 10             	add    esp,0x10
c001300e:	83 ec 08             	sub    esp,0x8
c0013011:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0013018:	50                   	push   eax
c0013019:	e8 2d 54 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	8d 76 00             	lea    esi,[esi+0x0]
c0013024:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001302c:	74 2a                	je     c0013058 <ACPI::open(int, int, void*)+0x434>
c001302e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013036:	74 20                	je     c0013058 <ACPI::open(int, int, void*)+0x434>
c0013038:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001303f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013041:	83 c0 08             	add    eax,0x8
c0013044:	8b 00                	mov    eax,DWORD PTR [eax]
c0013046:	83 ec 0c             	sub    esp,0xc
c0013049:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013050:	ff d0                	call   eax
c0013052:	83 c4 10             	add    esp,0x10
c0013055:	8d 76 00             	lea    esi,[esi+0x0]
c0013058:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c001305d:	83 ec 08             	sub    esp,0x8
c0013060:	68 e6 5e 02 c0       	push   0xc0025ee6
c0013065:	50                   	push   eax
c0013066:	e8 e1 ee ff ff       	call   c0011f4c <findDataTable(unsigned char*, char*)>
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0013075:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001307d:	74 19                	je     c0013098 <ACPI::open(int, int, void*)+0x474>
c001307f:	83 ec 08             	sub    esp,0x8
c0013082:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0013089:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0013090:	e8 0b fb ff ff       	call   c0012ba0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	b8 00 00 00 00       	mov    eax,0x0
c001309d:	81 c4 70 01 00 00    	add    esp,0x170
c00130a3:	5b                   	pop    ebx
c00130a4:	5e                   	pop    esi
c00130a5:	5f                   	pop    edi
c00130a6:	c3                   	ret    
c00130a7:	90                   	nop

c00130a8 <CPU::close(int, int, void*)>:
c00130a8:	31 c0                	xor    eax,eax
c00130aa:	c3                   	ret    
c00130ab:	90                   	nop

c00130ac <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00130ac:	55                   	push   ebp
c00130ad:	57                   	push   edi
c00130ae:	56                   	push   esi
c00130af:	53                   	push   ebx
c00130b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00130b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130b8:	89 ce                	mov    esi,ecx
c00130ba:	89 d5                	mov    ebp,edx
c00130bc:	80 f9 04             	cmp    cl,0x4
c00130bf:	75 28                	jne    c00130e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00130c1:	8d 42 f9             	lea    eax,[edx-0x7]
c00130c4:	3c 03                	cmp    al,0x3
c00130c6:	0f 86 63 01 00 00    	jbe    c001322f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00130cc:	80 fa 03             	cmp    dl,0x3
c00130cf:	0f 84 5a 01 00 00    	je     c001322f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00130d5:	8d 7a f2             	lea    edi,[edx-0xe]
c00130d8:	b8 30 83 02 c0       	mov    eax,0xc0028330
c00130dd:	89 fb                	mov    ebx,edi
c00130df:	80 fb 01             	cmp    bl,0x1
c00130e2:	77 4e                	ja     c0013132 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00130e4:	e9 52 01 00 00       	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00130e9:	80 f9 05             	cmp    cl,0x5
c00130ec:	75 4d                	jne    c001313b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00130ee:	b8 40 83 02 c0       	mov    eax,0xc0028340
c00130f3:	80 fa 03             	cmp    dl,0x3
c00130f6:	0f 86 3f 01 00 00    	jbe    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00130fc:	8d 7a fa             	lea    edi,[edx-0x6]
c00130ff:	b8 50 83 02 c0       	mov    eax,0xc0028350
c0013104:	89 fb                	mov    ebx,edi
c0013106:	80 fb 01             	cmp    bl,0x1
c0013109:	0f 86 2c 01 00 00    	jbe    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001310f:	b8 60 83 02 c0       	mov    eax,0xc0028360
c0013114:	80 fa 08             	cmp    dl,0x8
c0013117:	0f 84 1e 01 00 00    	je     c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001311d:	89 d7                	mov    edi,edx
c001311f:	b8 70 83 02 c0       	mov    eax,0xc0028370
c0013124:	83 e7 fb             	and    edi,0xfffffffb
c0013127:	89 fb                	mov    ebx,edi
c0013129:	80 fb 09             	cmp    bl,0x9
c001312c:	0f 84 09 01 00 00    	je     c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013132:	31 c0                	xor    eax,eax
c0013134:	89 eb                	mov    ebx,ebp
c0013136:	0f b6 fb             	movzx  edi,bl
c0013139:	eb 30                	jmp    c001316b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001313b:	31 c0                	xor    eax,eax
c001313d:	80 f9 06             	cmp    cl,0x6
c0013140:	75 f2                	jne    c0013134 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013142:	80 fa 0a             	cmp    dl,0xa
c0013145:	77 ed                	ja     c0013134 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013147:	bf de 05 00 00       	mov    edi,0x5de
c001314c:	0f a3 d7             	bt     edi,edx
c001314f:	73 e3                	jae    c0013134 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013151:	b8 80 83 02 c0       	mov    eax,0xc0028380
c0013156:	e9 e0 00 00 00       	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001315b:	39 c7                	cmp    edi,eax
c001315d:	0f 84 d3 00 00 00    	je     c0013236 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0013163:	40                   	inc    eax
c0013164:	3d d0 00 00 00       	cmp    eax,0xd0
c0013169:	74 09                	je     c0013174 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001316b:	89 f3                	mov    ebx,esi
c001316d:	80 fb 0f             	cmp    bl,0xf
c0013170:	75 f1                	jne    c0013163 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0013172:	eb e7                	jmp    c001315b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0013174:	80 f9 10             	cmp    cl,0x10
c0013177:	75 14                	jne    c001318d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0013179:	8d 42 fc             	lea    eax,[edx-0x4]
c001317c:	83 e0 fb             	and    eax,0xfffffffb
c001317f:	3c 02                	cmp    al,0x2
c0013181:	76 34                	jbe    c00131b7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0013183:	b8 21 62 02 c0       	mov    eax,0xc0026221
c0013188:	80 fa 02             	cmp    dl,0x2
c001318b:	eb 24                	jmp    c00131b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001318d:	80 f9 11             	cmp    cl,0x11
c0013190:	75 13                	jne    c00131a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0013192:	b8 21 62 02 c0       	mov    eax,0xc0026221
c0013197:	80 fa 03             	cmp    dl,0x3
c001319a:	0f 85 9b 00 00 00    	jne    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131a0:	e9 91 00 00 00       	jmp    c0013236 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00131a5:	80 f9 12             	cmp    cl,0x12
c00131a8:	75 14                	jne    c00131be <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00131aa:	b8 21 62 02 c0       	mov    eax,0xc0026221
c00131af:	fe ca                	dec    dl
c00131b1:	0f 85 84 00 00 00    	jne    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131b7:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c00131bc:	eb 7d                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131be:	80 f9 14             	cmp    cl,0x14
c00131c1:	75 12                	jne    c00131d5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00131c3:	4a                   	dec    edx
c00131c4:	b8 21 62 02 c0       	mov    eax,0xc0026221
c00131c9:	80 fa 01             	cmp    dl,0x1
c00131cc:	77 6d                	ja     c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131ce:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c00131d3:	eb 66                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131d5:	80 f9 15             	cmp    cl,0x15
c00131d8:	75 31                	jne    c001320b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00131da:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c00131df:	80 fa 01             	cmp    dl,0x1
c00131e2:	74 57                	je     c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131e4:	b8 21 62 02 c0       	mov    eax,0xc0026221
c00131e9:	80 fa 13             	cmp    dl,0x13
c00131ec:	76 0c                	jbe    c00131fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00131ee:	80 fa 30             	cmp    dl,0x30
c00131f1:	75 48                	jne    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131f3:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00131f8:	eb 41                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00131fa:	b9 04 00 09 00       	mov    ecx,0x90004
c00131ff:	0f a3 d1             	bt     ecx,edx
c0013202:	73 37                	jae    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013204:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c0013209:	eb 30                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001320b:	b8 21 62 02 c0       	mov    eax,0xc0026221
c0013210:	80 f9 16             	cmp    cl,0x16
c0013213:	75 26                	jne    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013215:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c001321a:	84 d2                	test   dl,dl
c001321c:	74 1d                	je     c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001321e:	b8 21 62 02 c0       	mov    eax,0xc0026221
c0013223:	80 fa 30             	cmp    dl,0x30
c0013226:	75 13                	jne    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013228:	b8 00 84 02 c0       	mov    eax,0xc0028400
c001322d:	eb 0c                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001322f:	b8 20 83 02 c0       	mov    eax,0xc0028320
c0013234:	eb 05                	jmp    c001323b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013236:	b8 90 83 02 c0       	mov    eax,0xc0028390
c001323b:	5b                   	pop    ebx
c001323c:	5e                   	pop    esi
c001323d:	5f                   	pop    edi
c001323e:	5d                   	pop    ebp
c001323f:	c3                   	ret    

c0013240 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0013240:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013244:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013248:	80 f9 04             	cmp    cl,0x4
c001324b:	75 6b                	jne    c00132b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001324d:	b8 80 81 02 c0       	mov    eax,0xc0028180
c0013252:	80 fa 01             	cmp    dl,0x1
c0013255:	0f 86 92 02 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001325b:	b8 90 81 02 c0       	mov    eax,0xc0028190
c0013260:	80 fa 02             	cmp    dl,0x2
c0013263:	0f 84 84 02 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013269:	b8 a0 81 02 c0       	mov    eax,0xc00281a0
c001326e:	80 fa 03             	cmp    dl,0x3
c0013271:	0f 84 76 02 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013277:	b8 b0 81 02 c0       	mov    eax,0xc00281b0
c001327c:	80 fa 04             	cmp    dl,0x4
c001327f:	0f 84 68 02 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013285:	b8 c0 81 02 c0       	mov    eax,0xc00281c0
c001328a:	80 fa 05             	cmp    dl,0x5
c001328d:	0f 84 5a 02 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013293:	b8 a0 81 02 c0       	mov    eax,0xc00281a0
c0013298:	80 fa 07             	cmp    dl,0x7
c001329b:	0f 84 4c 02 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132a1:	83 ea 08             	sub    edx,0x8
c00132a4:	b8 21 62 02 c0       	mov    eax,0xc0026221
c00132a9:	80 fa 01             	cmp    dl,0x1
c00132ac:	0f 87 3b 02 00 00    	ja     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132b2:	b8 d0 81 02 c0       	mov    eax,0xc00281d0
c00132b7:	c3                   	ret    
c00132b8:	80 f9 05             	cmp    cl,0x5
c00132bb:	75 45                	jne    c0013302 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00132bd:	8d 4a ff             	lea    ecx,[edx-0x1]
c00132c0:	b8 e0 81 02 c0       	mov    eax,0xc00281e0
c00132c5:	80 f9 02             	cmp    cl,0x2
c00132c8:	0f 86 1f 02 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132ce:	80 fa 04             	cmp    dl,0x4
c00132d1:	0f 84 f3 01 00 00    	je     c00134ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00132d7:	80 fa 07             	cmp    dl,0x7
c00132da:	0f 84 0d 02 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132e0:	b8 f0 81 02 c0       	mov    eax,0xc00281f0
c00132e5:	80 fa 08             	cmp    dl,0x8
c00132e8:	0f 84 ff 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132ee:	b8 21 62 02 c0       	mov    eax,0xc0026221
c00132f3:	80 fa 09             	cmp    dl,0x9
c00132f6:	0f 85 f1 01 00 00    	jne    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00132fc:	b8 00 82 02 c0       	mov    eax,0xc0028200
c0013301:	c3                   	ret    
c0013302:	80 f9 06             	cmp    cl,0x6
c0013305:	0f 85 85 01 00 00    	jne    c0013490 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001330b:	b8 10 82 02 c0       	mov    eax,0xc0028210
c0013310:	80 fa 01             	cmp    dl,0x1
c0013313:	0f 84 d4 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013319:	8d 42 fb             	lea    eax,[edx-0x5]
c001331c:	3c 01                	cmp    al,0x1
c001331e:	0f 86 ac 01 00 00    	jbe    c00134d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013324:	80 fa 03             	cmp    dl,0x3
c0013327:	0f 84 a3 01 00 00    	je     c00134d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001332d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013330:	b8 30 82 02 c0       	mov    eax,0xc0028230
c0013335:	80 f9 01             	cmp    cl,0x1
c0013338:	0f 86 af 01 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001333e:	80 fa 09             	cmp    dl,0x9
c0013341:	0f 84 8f 01 00 00    	je     c00134d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013347:	8d 4a f6             	lea    ecx,[edx-0xa]
c001334a:	80 f9 01             	cmp    cl,0x1
c001334d:	0f 86 9a 01 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013353:	b8 40 82 02 c0       	mov    eax,0xc0028240
c0013358:	80 fa 0d             	cmp    dl,0xd
c001335b:	0f 84 8c 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013361:	b8 50 82 02 c0       	mov    eax,0xc0028250
c0013366:	80 fa 0e             	cmp    dl,0xe
c0013369:	0f 84 7e 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001336f:	b8 60 82 02 c0       	mov    eax,0xc0028260
c0013374:	80 fa 0f             	cmp    dl,0xf
c0013377:	0f 84 70 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001337d:	b8 40 82 02 c0       	mov    eax,0xc0028240
c0013382:	80 fa 15             	cmp    dl,0x15
c0013385:	0f 84 62 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001338b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001338e:	b8 60 82 02 c0       	mov    eax,0xc0028260
c0013393:	80 f9 01             	cmp    cl,0x1
c0013396:	0f 86 51 01 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001339c:	80 fa 1a             	cmp    dl,0x1a
c001339f:	0f 84 37 01 00 00    	je     c00134dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00133a5:	80 fa 1c             	cmp    dl,0x1c
c00133a8:	0f 84 34 01 00 00    	je     c00134e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00133ae:	80 fa 1d             	cmp    dl,0x1d
c00133b1:	0f 84 36 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133b7:	b8 90 82 02 c0       	mov    eax,0xc0028290
c00133bc:	80 fa 25             	cmp    dl,0x25
c00133bf:	0f 84 28 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133c5:	8d 4a da             	lea    ecx,[edx-0x26]
c00133c8:	b8 80 82 02 c0       	mov    eax,0xc0028280
c00133cd:	80 f9 01             	cmp    cl,0x1
c00133d0:	0f 86 17 01 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133d6:	b8 a0 82 02 c0       	mov    eax,0xc00282a0
c00133db:	80 fa 2a             	cmp    dl,0x2a
c00133de:	0f 84 09 01 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133e4:	b8 90 82 02 c0       	mov    eax,0xc0028290
c00133e9:	80 fa 2c             	cmp    dl,0x2c
c00133ec:	0f 84 fb 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133f2:	b8 a0 82 02 c0       	mov    eax,0xc00282a0
c00133f7:	80 fa 2d             	cmp    dl,0x2d
c00133fa:	0f 84 ed 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013400:	b8 70 82 02 c0       	mov    eax,0xc0028270
c0013405:	80 fa 2e             	cmp    dl,0x2e
c0013408:	0f 84 df 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001340e:	b8 90 82 02 c0       	mov    eax,0xc0028290
c0013413:	80 fa 2f             	cmp    dl,0x2f
c0013416:	0f 84 d1 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001341c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001341f:	b8 80 82 02 c0       	mov    eax,0xc0028280
c0013424:	80 f9 01             	cmp    cl,0x1
c0013427:	0f 86 c0 00 00 00    	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001342d:	b8 b0 82 02 c0       	mov    eax,0xc00282b0
c0013432:	80 fa 37             	cmp    dl,0x37
c0013435:	0f 84 b2 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001343b:	b8 c0 82 02 c0       	mov    eax,0xc00282c0
c0013440:	80 fa 3a             	cmp    dl,0x3a
c0013443:	0f 84 a4 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013449:	b8 d0 82 02 c0       	mov    eax,0xc00282d0
c001344e:	80 fa 3c             	cmp    dl,0x3c
c0013451:	0f 84 96 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013457:	b8 e0 82 02 c0       	mov    eax,0xc00282e0
c001345c:	80 fa 3d             	cmp    dl,0x3d
c001345f:	0f 84 88 00 00 00    	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013465:	b8 c0 82 02 c0       	mov    eax,0xc00282c0
c001346a:	80 fa 3e             	cmp    dl,0x3e
c001346d:	74 7e                	je     c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001346f:	8d 42 bb             	lea    eax,[edx-0x45]
c0013472:	3c 01                	cmp    al,0x1
c0013474:	76 72                	jbe    c00134e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013476:	80 fa 3f             	cmp    dl,0x3f
c0013479:	74 6d                	je     c00134e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001347b:	80 fa 4a             	cmp    dl,0x4a
c001347e:	74 0a                	je     c001348a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013480:	b8 21 62 02 c0       	mov    eax,0xc0026221
c0013485:	80 fa 4d             	cmp    dl,0x4d
c0013488:	75 63                	jne    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001348a:	b8 b0 82 02 c0       	mov    eax,0xc00282b0
c001348f:	c3                   	ret    
c0013490:	b8 21 62 02 c0       	mov    eax,0xc0026221
c0013495:	80 f9 0b             	cmp    cl,0xb
c0013498:	75 0a                	jne    c00134a4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001349a:	fe ca                	dec    dl
c001349c:	75 4f                	jne    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001349e:	b8 f0 82 02 c0       	mov    eax,0xc00282f0
c00134a3:	c3                   	ret    
c00134a4:	80 f9 0f             	cmp    cl,0xf
c00134a7:	75 44                	jne    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134a9:	b8 00 83 02 c0       	mov    eax,0xc0028300
c00134ae:	80 fa 02             	cmp    dl,0x2
c00134b1:	76 3a                	jbe    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b3:	8d 42 fd             	lea    eax,[edx-0x3]
c00134b6:	3c 01                	cmp    al,0x1
c00134b8:	76 0a                	jbe    c00134c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00134ba:	b8 21 62 02 c0       	mov    eax,0xc0026221
c00134bf:	80 fa 06             	cmp    dl,0x6
c00134c2:	75 29                	jne    c00134ed <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134c4:	b8 10 83 02 c0       	mov    eax,0xc0028310
c00134c9:	c3                   	ret    
c00134ca:	b8 f0 81 02 c0       	mov    eax,0xc00281f0
c00134cf:	c3                   	ret    
c00134d0:	b8 20 82 02 c0       	mov    eax,0xc0028220
c00134d5:	c3                   	ret    
c00134d6:	b8 40 82 02 c0       	mov    eax,0xc0028240
c00134db:	c3                   	ret    
c00134dc:	b8 70 82 02 c0       	mov    eax,0xc0028270
c00134e1:	c3                   	ret    
c00134e2:	b8 80 82 02 c0       	mov    eax,0xc0028280
c00134e7:	c3                   	ret    
c00134e8:	b8 d0 82 02 c0       	mov    eax,0xc00282d0
c00134ed:	c3                   	ret    

c00134ee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00134ee:	60                   	pusha  
c00134ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00134f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134fb:	9c                   	pushf  
c00134fc:	fa                   	cli    
c00134fd:	0f 09                	wbinvd 
c00134ff:	0f 30                	wrmsr  
c0013501:	9d                   	popf   
c0013502:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013506:	89 02                	mov    DWORD PTR [edx],eax
c0013508:	61                   	popa   
c0013509:	c3                   	ret    

c001350a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001350a:	60                   	pusha  
c001350b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001350f:	9c                   	pushf  
c0013510:	fa                   	cli    
c0013511:	0f 09                	wbinvd 
c0013513:	31 c0                	xor    eax,eax
c0013515:	31 d2                	xor    edx,edx
c0013517:	0f 32                	rdmsr  
c0013519:	9d                   	popf   
c001351a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001351e:	89 02                	mov    DWORD PTR [edx],eax
c0013520:	61                   	popa   
c0013521:	c3                   	ret    

c0013522 <CPU::AMD_K6_writeback(int, int, int)>:
c0013522:	56                   	push   esi
c0013523:	53                   	push   ebx
c0013524:	83 ec 10             	sub    esp,0x10
c0013527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001352b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013530:	75 5d                	jne    c001358f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013532:	83 f8 08             	cmp    eax,0x8
c0013535:	75 09                	jne    c0013540 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013537:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001353c:	7e 13                	jle    c0013551 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001353e:	eb 30                	jmp    c0013570 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013540:	83 f8 06             	cmp    eax,0x6
c0013543:	7c 4a                	jl     c001358f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013545:	83 f8 07             	cmp    eax,0x7
c0013548:	7e 07                	jle    c0013551 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001354a:	83 f8 09             	cmp    eax,0x9
c001354d:	74 21                	je     c0013570 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001354f:	eb 3e                	jmp    c001358f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013551:	89 e6                	mov    esi,esp
c0013553:	8b 1d 8c 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a8c
c0013559:	56                   	push   esi
c001355a:	c1 eb 15             	shr    ebx,0x15
c001355d:	68 82 00 00 c0       	push   0xc0000082
c0013562:	83 e3 7e             	and    ebx,0x7e
c0013565:	e8 a0 ff ff ff       	call   c001350a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001356a:	56                   	push   esi
c001356b:	6a 00                	push   0x0
c001356d:	53                   	push   ebx
c001356e:	eb 12                	jmp    c0013582 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013570:	89 e3                	mov    ebx,esp
c0013572:	53                   	push   ebx
c0013573:	68 82 00 00 c0       	push   0xc0000082
c0013578:	e8 8d ff ff ff       	call   c001350a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001357d:	53                   	push   ebx
c001357e:	6a 00                	push   0x0
c0013580:	6a 00                	push   0x0
c0013582:	68 82 00 00 c0       	push   0xc0000082
c0013587:	e8 62 ff ff ff       	call   c00134ee <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001358c:	83 c4 18             	add    esp,0x18
c001358f:	83 c4 10             	add    esp,0x10
c0013592:	5b                   	pop    ebx
c0013593:	5e                   	pop    esi
c0013594:	c3                   	ret    
c0013595:	90                   	nop

c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013596:	55                   	push   ebp
c0013597:	57                   	push   edi
c0013598:	56                   	push   esi
c0013599:	53                   	push   ebx
c001359a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001359e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135a2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135a6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00135aa:	39 05 20 84 02 c0    	cmp    DWORD PTR ds:0xc0028420,eax
c00135b0:	75 23                	jne    c00135d5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00135b2:	a1 2c 95 02 c0       	mov    eax,ds:0xc002952c
c00135b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135bb:	89 06                	mov    DWORD PTR [esi],eax
c00135bd:	a1 28 95 02 c0       	mov    eax,ds:0xc0029528
c00135c2:	89 07                	mov    DWORD PTR [edi],eax
c00135c4:	a1 24 95 02 c0       	mov    eax,ds:0xc0029524
c00135c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00135cc:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c00135d1:	89 02                	mov    DWORD PTR [edx],eax
c00135d3:	eb 3f                	jmp    c0013614 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00135d5:	31 c9                	xor    ecx,ecx
c00135d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135db:	0f a2                	cpuid  
c00135dd:	89 06                	mov    DWORD PTR [esi],eax
c00135df:	89 1f                	mov    DWORD PTR [edi],ebx
c00135e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135e5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00135e8:	89 10                	mov    DWORD PTR [eax],edx
c00135ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135ee:	a3 20 84 02 c0       	mov    ds:0xc0028420,eax
c00135f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00135f5:	a3 2c 95 02 c0       	mov    ds:0xc002952c,eax
c00135fa:	8b 07                	mov    eax,DWORD PTR [edi]
c00135fc:	a3 28 95 02 c0       	mov    ds:0xc0029528,eax
c0013601:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013604:	a3 24 95 02 c0       	mov    ds:0xc0029524,eax
c0013609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001360d:	8b 00                	mov    eax,DWORD PTR [eax]
c001360f:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c0013614:	5b                   	pop    ebx
c0013615:	5e                   	pop    esi
c0013616:	5f                   	pop    edi
c0013617:	5d                   	pop    ebp
c0013618:	c3                   	ret    
c0013619:	90                   	nop

c001361a <CPU::cpuidCheckEDX(unsigned int)>:
c001361a:	83 ec 10             	sub    esp,0x10
c001361d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013621:	50                   	push   eax
c0013622:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013626:	50                   	push   eax
c0013627:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001362b:	50                   	push   eax
c001362c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013630:	50                   	push   eax
c0013631:	6a 01                	push   0x1
c0013633:	e8 5e ff ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013638:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001363c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013640:	0f 95 c0             	setne  al
c0013643:	83 c4 24             	add    esp,0x24
c0013646:	c3                   	ret    
c0013647:	90                   	nop

c0013648 <CPU::cpuidCheckECX(unsigned int)>:
c0013648:	83 ec 10             	sub    esp,0x10
c001364b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001364f:	50                   	push   eax
c0013650:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013654:	50                   	push   eax
c0013655:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013659:	50                   	push   eax
c001365a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001365e:	50                   	push   eax
c001365f:	6a 01                	push   0x1
c0013661:	e8 30 ff ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001366a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001366e:	0f 95 c0             	setne  al
c0013671:	83 c4 24             	add    esp,0x24
c0013674:	c3                   	ret    
c0013675:	90                   	nop

c0013676 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013676:	83 ec 10             	sub    esp,0x10
c0013679:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001367d:	50                   	push   eax
c001367e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013682:	50                   	push   eax
c0013683:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013687:	50                   	push   eax
c0013688:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001368c:	50                   	push   eax
c001368d:	6a 07                	push   0x7
c001368f:	e8 02 ff ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013694:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013698:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001369c:	0f 95 c0             	setne  al
c001369f:	83 c4 24             	add    esp,0x24
c00136a2:	c3                   	ret    
c00136a3:	90                   	nop

c00136a4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00136a4:	83 ec 10             	sub    esp,0x10
c00136a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136ab:	50                   	push   eax
c00136ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136b0:	50                   	push   eax
c00136b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136b5:	50                   	push   eax
c00136b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00136ba:	50                   	push   eax
c00136bb:	6a 07                	push   0x7
c00136bd:	e8 d4 fe ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00136c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136c6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00136ca:	0f 95 c0             	setne  al
c00136cd:	83 c4 24             	add    esp,0x24
c00136d0:	c3                   	ret    
c00136d1:	90                   	nop

c00136d2 <CPU::CPU()>:
c00136d2:	83 ec 0c             	sub    esp,0xc
c00136d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d9:	83 ec 08             	sub    esp,0x8
c00136dc:	68 21 62 02 c0       	push   0xc0026221
c00136e1:	50                   	push   eax
c00136e2:	e8 cf b0 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c00136e7:	83 c4 10             	add    esp,0x10
c00136ea:	ba 84 64 02 c0       	mov    edx,0xc0026484
c00136ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f3:	89 10                	mov    DWORD PTR [eax],edx
c00136f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136f9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013707:	05 78 01 00 00       	add    eax,0x178
c001370c:	83 ec 0c             	sub    esp,0xc
c001370f:	50                   	push   eax
c0013710:	e8 d3 5e ff ff       	call   c00095e8 <GDT::GDT()>
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001371c:	05 7c 09 00 00       	add    eax,0x97c
c0013721:	83 ec 0c             	sub    esp,0xc
c0013724:	50                   	push   eax
c0013725:	e8 16 61 ff ff       	call   c0009840 <IDT::IDT()>
c001372a:	83 c4 10             	add    esp,0x10
c001372d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013731:	05 7c 11 00 00       	add    eax,0x117c
c0013736:	83 ec 0c             	sub    esp,0xc
c0013739:	50                   	push   eax
c001373a:	e8 1d 7f ff ff       	call   c000b65c <TSS::TSS()>
c001373f:	83 c4 10             	add    esp,0x10
c0013742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013746:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001374d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013751:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001375b:	90                   	nop
c001375c:	83 c4 0c             	add    esp,0xc
c001375f:	c3                   	ret    

c0013760 <CPU::displayFeatures()>:
c0013760:	53                   	push   ebx
c0013761:	83 ec 10             	sub    esp,0x10
c0013764:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013768:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001376e:	68 18 5f 02 c0       	push   0xc0025f18
c0013773:	e8 c7 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013778:	58                   	pop    eax
c0013779:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001377f:	5a                   	pop    edx
c0013780:	50                   	push   eax
c0013781:	68 29 5f 02 c0       	push   0xc0025f29
c0013786:	e8 b4 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001378b:	59                   	pop    ecx
c001378c:	58                   	pop    eax
c001378d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013793:	c1 e8 0e             	shr    eax,0xe
c0013796:	0f b6 c0             	movzx  eax,al
c0013799:	50                   	push   eax
c001379a:	68 3a 5f 02 c0       	push   0xc0025f3a
c001379f:	e8 9b 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137a4:	58                   	pop    eax
c00137a5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00137ab:	5a                   	pop    edx
c00137ac:	66 c1 e8 06          	shr    ax,0x6
c00137b0:	0f b6 c0             	movzx  eax,al
c00137b3:	50                   	push   eax
c00137b4:	68 4b 5f 02 c0       	push   0xc0025f4b
c00137b9:	e8 81 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137be:	c7 04 24 4b 65 02 c0 	mov    DWORD PTR [esp],0xc002654b
c00137c5:	e8 75 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00137d2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00137d9:	74 05                	je     c00137e0 <CPU::displayFeatures()+0x80>
c00137db:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00137e0:	51                   	push   ecx
c00137e1:	51                   	push   ecx
c00137e2:	50                   	push   eax
c00137e3:	68 5c 5f 02 c0       	push   0xc0025f5c
c00137e8:	e8 52 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00137ed:	83 c4 10             	add    esp,0x10
c00137f0:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00137f5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00137fc:	78 05                	js     c0013803 <CPU::displayFeatures()+0xa3>
c00137fe:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013803:	52                   	push   edx
c0013804:	52                   	push   edx
c0013805:	50                   	push   eax
c0013806:	68 73 5f 02 c0       	push   0xc0025f73
c001380b:	e8 2f 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013818:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001381f:	75 05                	jne    c0013826 <CPU::displayFeatures()+0xc6>
c0013821:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013826:	51                   	push   ecx
c0013827:	51                   	push   ecx
c0013828:	50                   	push   eax
c0013829:	68 8a 5f 02 c0       	push   0xc0025f8a
c001382e:	e8 0c 98 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	b8 81 44 02 c0       	mov    eax,0xc0024481
c001383b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0013842:	75 05                	jne    c0013849 <CPU::displayFeatures()+0xe9>
c0013844:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013849:	52                   	push   edx
c001384a:	52                   	push   edx
c001384b:	50                   	push   eax
c001384c:	68 a1 5f 02 c0       	push   0xc0025fa1
c0013851:	e8 e9 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013856:	83 c4 10             	add    esp,0x10
c0013859:	b8 81 44 02 c0       	mov    eax,0xc0024481
c001385e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013865:	75 05                	jne    c001386c <CPU::displayFeatures()+0x10c>
c0013867:	b8 85 44 02 c0       	mov    eax,0xc0024485
c001386c:	51                   	push   ecx
c001386d:	51                   	push   ecx
c001386e:	50                   	push   eax
c001386f:	68 b8 5f 02 c0       	push   0xc0025fb8
c0013874:	e8 c6 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013879:	83 c4 10             	add    esp,0x10
c001387c:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013881:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013888:	75 05                	jne    c001388f <CPU::displayFeatures()+0x12f>
c001388a:	b8 85 44 02 c0       	mov    eax,0xc0024485
c001388f:	52                   	push   edx
c0013890:	52                   	push   edx
c0013891:	50                   	push   eax
c0013892:	68 cf 5f 02 c0       	push   0xc0025fcf
c0013897:	e8 a3 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001389c:	83 c4 10             	add    esp,0x10
c001389f:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00138a4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00138ab:	75 05                	jne    c00138b2 <CPU::displayFeatures()+0x152>
c00138ad:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00138b2:	51                   	push   ecx
c00138b3:	51                   	push   ecx
c00138b4:	50                   	push   eax
c00138b5:	68 e6 5f 02 c0       	push   0xc0025fe6
c00138ba:	e8 80 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00138c7:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00138ce:	75 05                	jne    c00138d5 <CPU::displayFeatures()+0x175>
c00138d0:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00138d5:	52                   	push   edx
c00138d6:	52                   	push   edx
c00138d7:	50                   	push   eax
c00138d8:	68 fd 5f 02 c0       	push   0xc0025ffd
c00138dd:	e8 5d 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00138ea:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00138f1:	75 05                	jne    c00138f8 <CPU::displayFeatures()+0x198>
c00138f3:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00138f8:	51                   	push   ecx
c00138f9:	51                   	push   ecx
c00138fa:	50                   	push   eax
c00138fb:	68 14 60 02 c0       	push   0xc0026014
c0013900:	e8 3a 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013905:	83 c4 10             	add    esp,0x10
c0013908:	b8 81 44 02 c0       	mov    eax,0xc0024481
c001390d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013914:	75 05                	jne    c001391b <CPU::displayFeatures()+0x1bb>
c0013916:	b8 85 44 02 c0       	mov    eax,0xc0024485
c001391b:	52                   	push   edx
c001391c:	52                   	push   edx
c001391d:	50                   	push   eax
c001391e:	68 2b 60 02 c0       	push   0xc002602b
c0013923:	e8 17 97 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013930:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013937:	75 05                	jne    c001393e <CPU::displayFeatures()+0x1de>
c0013939:	b8 85 44 02 c0       	mov    eax,0xc0024485
c001393e:	51                   	push   ecx
c001393f:	51                   	push   ecx
c0013940:	50                   	push   eax
c0013941:	68 42 60 02 c0       	push   0xc0026042
c0013946:	e8 f4 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013953:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001395a:	75 05                	jne    c0013961 <CPU::displayFeatures()+0x201>
c001395c:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013961:	52                   	push   edx
c0013962:	52                   	push   edx
c0013963:	50                   	push   eax
c0013964:	68 59 60 02 c0       	push   0xc0026059
c0013969:	e8 d1 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013976:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001397d:	75 05                	jne    c0013984 <CPU::displayFeatures()+0x224>
c001397f:	b8 85 44 02 c0       	mov    eax,0xc0024485
c0013984:	51                   	push   ecx
c0013985:	51                   	push   ecx
c0013986:	50                   	push   eax
c0013987:	68 70 60 02 c0       	push   0xc0026070
c001398c:	e8 ae 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0013991:	83 c4 10             	add    esp,0x10
c0013994:	b8 81 44 02 c0       	mov    eax,0xc0024481
c0013999:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00139a0:	78 05                	js     c00139a7 <CPU::displayFeatures()+0x247>
c00139a2:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00139a7:	52                   	push   edx
c00139a8:	52                   	push   edx
c00139a9:	50                   	push   eax
c00139aa:	68 87 60 02 c0       	push   0xc0026087
c00139af:	e8 8b 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00139b4:	83 c4 10             	add    esp,0x10
c00139b7:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00139bc:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00139c3:	75 05                	jne    c00139ca <CPU::displayFeatures()+0x26a>
c00139c5:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00139ca:	51                   	push   ecx
c00139cb:	51                   	push   ecx
c00139cc:	50                   	push   eax
c00139cd:	68 9e 60 02 c0       	push   0xc002609e
c00139d2:	e8 68 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	b8 81 44 02 c0       	mov    eax,0xc0024481
c00139df:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00139e6:	75 05                	jne    c00139ed <CPU::displayFeatures()+0x28d>
c00139e8:	b8 85 44 02 c0       	mov    eax,0xc0024485
c00139ed:	52                   	push   edx
c00139ee:	52                   	push   edx
c00139ef:	50                   	push   eax
c00139f0:	68 b5 60 02 c0       	push   0xc00260b5
c00139f5:	e8 45 96 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00139fa:	83 c4 18             	add    esp,0x18
c00139fd:	5b                   	pop    ebx
c00139fe:	c3                   	ret    
c00139ff:	90                   	nop

c0013a00 <CPU::detectFeatures()>:
c0013a00:	55                   	push   ebp
c0013a01:	57                   	push   edi
c0013a02:	56                   	push   esi
c0013a03:	53                   	push   ebx
c0013a04:	83 ec 50             	sub    esp,0x50
c0013a07:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013a0b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013a15:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013a1c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013a22:	6a 0d                	push   0xd
c0013a24:	6a 00                	push   0x0
c0013a26:	55                   	push   ebp
c0013a27:	e8 50 cc fe ff       	call   c000067c <memset>
c0013a2c:	83 c4 10             	add    esp,0x10
c0013a2f:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0013a34:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013a3b:	0f 84 22 09 00 00    	je     c0014363 <CPU::detectFeatures()+0x963>
c0013a41:	83 ec 0c             	sub    esp,0xc
c0013a44:	89 ef                	mov    edi,ebp
c0013a46:	6a 10                	push   0x10
c0013a48:	e8 cd fb ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013a4d:	83 e0 01             	and    eax,0x1
c0013a50:	8d 14 00             	lea    edx,[eax+eax*1]
c0013a53:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a59:	83 e0 fd             	and    eax,0xfffffffd
c0013a5c:	09 d0                	or     eax,edx
c0013a5e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013a64:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013a6b:	e8 aa fb ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013a70:	83 e0 01             	and    eax,0x1
c0013a73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013a7a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013a80:	83 e0 fb             	and    eax,0xfffffffb
c0013a83:	09 d0                	or     eax,edx
c0013a85:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013a8b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013a92:	e8 83 fb ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013a97:	83 e0 01             	and    eax,0x1
c0013a9a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013aa1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013aa7:	83 e0 f7             	and    eax,0xfffffff7
c0013aaa:	09 d0                	or     eax,edx
c0013aac:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ab2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013ab9:	e8 5c fb ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013abe:	83 e0 01             	and    eax,0x1
c0013ac1:	c1 e0 04             	shl    eax,0x4
c0013ac4:	88 c2                	mov    dl,al
c0013ac6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013acc:	83 e0 ef             	and    eax,0xffffffef
c0013acf:	09 d0                	or     eax,edx
c0013ad1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ad7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013ade:	e8 37 fb ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013ae3:	83 e0 01             	and    eax,0x1
c0013ae6:	c1 e0 05             	shl    eax,0x5
c0013ae9:	88 c2                	mov    dl,al
c0013aeb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013af1:	83 e0 df             	and    eax,0xffffffdf
c0013af4:	09 d0                	or     eax,edx
c0013af6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013b03:	e8 12 fb ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013b08:	83 e0 01             	and    eax,0x1
c0013b0b:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b0e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013b14:	83 e0 fd             	and    eax,0xfffffffd
c0013b17:	09 d0                	or     eax,edx
c0013b19:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013b1f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013b26:	e8 ef fa ff ff       	call   c001361a <CPU::cpuidCheckEDX(unsigned int)>
c0013b2b:	83 e0 01             	and    eax,0x1
c0013b2e:	c1 e0 06             	shl    eax,0x6
c0013b31:	88 c2                	mov    dl,al
c0013b33:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013b39:	83 e0 bf             	and    eax,0xffffffbf
c0013b3c:	09 d0                	or     eax,edx
c0013b3e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013b44:	58                   	pop    eax
c0013b45:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b49:	50                   	push   eax
c0013b4a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b4e:	50                   	push   eax
c0013b4f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013b53:	56                   	push   esi
c0013b54:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b58:	50                   	push   eax
c0013b59:	6a 00                	push   0x0
c0013b5b:	e8 36 fa ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013b60:	b8 04 00 00 00       	mov    eax,0x4
c0013b65:	89 c1                	mov    ecx,eax
c0013b67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b69:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013b6f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013b73:	89 c1                	mov    ecx,eax
c0013b75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b77:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013b7d:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013b81:	89 c1                	mov    ecx,eax
c0013b83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b85:	83 c4 18             	add    esp,0x18
c0013b88:	68 cc 60 02 c0       	push   0xc00260cc
c0013b8d:	55                   	push   ebp
c0013b8e:	e8 31 cc fe ff       	call   c00007c4 <strcmp>
c0013b93:	83 c4 10             	add    esp,0x10
c0013b96:	85 c0                	test   eax,eax
c0013b98:	75 0f                	jne    c0013ba9 <CPU::detectFeatures()+0x1a9>
c0013b9a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013ba4:	e9 22 02 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013ba9:	50                   	push   eax
c0013baa:	50                   	push   eax
c0013bab:	68 d9 60 02 c0       	push   0xc00260d9
c0013bb0:	55                   	push   ebp
c0013bb1:	e8 0e cc fe ff       	call   c00007c4 <strcmp>
c0013bb6:	83 c4 10             	add    esp,0x10
c0013bb9:	85 c0                	test   eax,eax
c0013bbb:	74 dd                	je     c0013b9a <CPU::detectFeatures()+0x19a>
c0013bbd:	50                   	push   eax
c0013bbe:	50                   	push   eax
c0013bbf:	68 e6 60 02 c0       	push   0xc00260e6
c0013bc4:	55                   	push   ebp
c0013bc5:	e8 fa cb fe ff       	call   c00007c4 <strcmp>
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	85 c0                	test   eax,eax
c0013bcf:	74 2a                	je     c0013bfb <CPU::detectFeatures()+0x1fb>
c0013bd1:	50                   	push   eax
c0013bd2:	50                   	push   eax
c0013bd3:	68 f3 60 02 c0       	push   0xc00260f3
c0013bd8:	55                   	push   ebp
c0013bd9:	e8 e6 cb fe ff       	call   c00007c4 <strcmp>
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	85 c0                	test   eax,eax
c0013be3:	74 16                	je     c0013bfb <CPU::detectFeatures()+0x1fb>
c0013be5:	50                   	push   eax
c0013be6:	50                   	push   eax
c0013be7:	68 00 61 02 c0       	push   0xc0026100
c0013bec:	55                   	push   ebp
c0013bed:	e8 d2 cb fe ff       	call   c00007c4 <strcmp>
c0013bf2:	83 c4 10             	add    esp,0x10
c0013bf5:	85 c0                	test   eax,eax
c0013bf7:	74 48                	je     c0013c41 <CPU::detectFeatures()+0x241>
c0013bf9:	eb 0f                	jmp    c0013c0a <CPU::detectFeatures()+0x20a>
c0013bfb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013c05:	e9 c1 01 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013c0a:	50                   	push   eax
c0013c0b:	50                   	push   eax
c0013c0c:	68 0d 61 02 c0       	push   0xc002610d
c0013c11:	55                   	push   ebp
c0013c12:	e8 ad cb fe ff       	call   c00007c4 <strcmp>
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	85 c0                	test   eax,eax
c0013c1c:	74 23                	je     c0013c41 <CPU::detectFeatures()+0x241>
c0013c1e:	57                   	push   edi
c0013c1f:	57                   	push   edi
c0013c20:	68 1a 61 02 c0       	push   0xc002611a
c0013c25:	55                   	push   ebp
c0013c26:	e8 99 cb fe ff       	call   c00007c4 <strcmp>
c0013c2b:	83 c4 10             	add    esp,0x10
c0013c2e:	85 c0                	test   eax,eax
c0013c30:	75 1e                	jne    c0013c50 <CPU::detectFeatures()+0x250>
c0013c32:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013c3c:	e9 8a 01 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013c41:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013c4b:	e9 7b 01 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013c50:	56                   	push   esi
c0013c51:	56                   	push   esi
c0013c52:	68 27 61 02 c0       	push   0xc0026127
c0013c57:	55                   	push   ebp
c0013c58:	e8 67 cb fe ff       	call   c00007c4 <strcmp>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	85 c0                	test   eax,eax
c0013c62:	75 0f                	jne    c0013c73 <CPU::detectFeatures()+0x273>
c0013c64:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013c6e:	e9 58 01 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013c73:	51                   	push   ecx
c0013c74:	51                   	push   ecx
c0013c75:	68 e6 60 02 c0       	push   0xc00260e6
c0013c7a:	55                   	push   ebp
c0013c7b:	e8 44 cb fe ff       	call   c00007c4 <strcmp>
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	85 c0                	test   eax,eax
c0013c85:	75 0f                	jne    c0013c96 <CPU::detectFeatures()+0x296>
c0013c87:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013c91:	e9 35 01 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013c96:	52                   	push   edx
c0013c97:	52                   	push   edx
c0013c98:	68 34 61 02 c0       	push   0xc0026134
c0013c9d:	55                   	push   ebp
c0013c9e:	e8 21 cb fe ff       	call   c00007c4 <strcmp>
c0013ca3:	83 c4 10             	add    esp,0x10
c0013ca6:	85 c0                	test   eax,eax
c0013ca8:	75 0f                	jne    c0013cb9 <CPU::detectFeatures()+0x2b9>
c0013caa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013cb4:	e9 12 01 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013cb9:	50                   	push   eax
c0013cba:	50                   	push   eax
c0013cbb:	68 41 61 02 c0       	push   0xc0026141
c0013cc0:	55                   	push   ebp
c0013cc1:	e8 fe ca fe ff       	call   c00007c4 <strcmp>
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	85 c0                	test   eax,eax
c0013ccb:	75 0f                	jne    c0013cdc <CPU::detectFeatures()+0x2dc>
c0013ccd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013cd7:	e9 ef 00 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013cdc:	50                   	push   eax
c0013cdd:	50                   	push   eax
c0013cde:	68 4e 61 02 c0       	push   0xc002614e
c0013ce3:	55                   	push   ebp
c0013ce4:	e8 db ca fe ff       	call   c00007c4 <strcmp>
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	85 c0                	test   eax,eax
c0013cee:	75 0f                	jne    c0013cff <CPU::detectFeatures()+0x2ff>
c0013cf0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013cfa:	e9 cc 00 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013cff:	50                   	push   eax
c0013d00:	50                   	push   eax
c0013d01:	68 5b 61 02 c0       	push   0xc002615b
c0013d06:	55                   	push   ebp
c0013d07:	e8 b8 ca fe ff       	call   c00007c4 <strcmp>
c0013d0c:	83 c4 10             	add    esp,0x10
c0013d0f:	85 c0                	test   eax,eax
c0013d11:	75 0f                	jne    c0013d22 <CPU::detectFeatures()+0x322>
c0013d13:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013d1d:	e9 a9 00 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013d22:	50                   	push   eax
c0013d23:	50                   	push   eax
c0013d24:	68 68 61 02 c0       	push   0xc0026168
c0013d29:	55                   	push   ebp
c0013d2a:	e8 95 ca fe ff       	call   c00007c4 <strcmp>
c0013d2f:	83 c4 10             	add    esp,0x10
c0013d32:	85 c0                	test   eax,eax
c0013d34:	75 0f                	jne    c0013d45 <CPU::detectFeatures()+0x345>
c0013d36:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013d40:	e9 86 00 00 00       	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013d45:	50                   	push   eax
c0013d46:	50                   	push   eax
c0013d47:	68 75 61 02 c0       	push   0xc0026175
c0013d4c:	55                   	push   ebp
c0013d4d:	e8 72 ca fe ff       	call   c00007c4 <strcmp>
c0013d52:	83 c4 10             	add    esp,0x10
c0013d55:	85 c0                	test   eax,eax
c0013d57:	75 0c                	jne    c0013d65 <CPU::detectFeatures()+0x365>
c0013d59:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013d63:	eb 66                	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013d65:	50                   	push   eax
c0013d66:	50                   	push   eax
c0013d67:	68 82 61 02 c0       	push   0xc0026182
c0013d6c:	55                   	push   ebp
c0013d6d:	e8 52 ca fe ff       	call   c00007c4 <strcmp>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	85 c0                	test   eax,eax
c0013d77:	75 0c                	jne    c0013d85 <CPU::detectFeatures()+0x385>
c0013d79:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013d83:	eb 46                	jmp    c0013dcb <CPU::detectFeatures()+0x3cb>
c0013d85:	57                   	push   edi
c0013d86:	57                   	push   edi
c0013d87:	68 8f 61 02 c0       	push   0xc002618f
c0013d8c:	55                   	push   ebp
c0013d8d:	e8 32 ca fe ff       	call   c00007c4 <strcmp>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	85 c0                	test   eax,eax
c0013d97:	74 e0                	je     c0013d79 <CPU::detectFeatures()+0x379>
c0013d99:	56                   	push   esi
c0013d9a:	56                   	push   esi
c0013d9b:	68 9c 61 02 c0       	push   0xc002619c
c0013da0:	55                   	push   ebp
c0013da1:	e8 1e ca fe ff       	call   c00007c4 <strcmp>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	85 c0                	test   eax,eax
c0013dab:	74 cc                	je     c0013d79 <CPU::detectFeatures()+0x379>
c0013dad:	51                   	push   ecx
c0013dae:	51                   	push   ecx
c0013daf:	68 a9 61 02 c0       	push   0xc00261a9
c0013db4:	55                   	push   ebp
c0013db5:	e8 0a ca fe ff       	call   c00007c4 <strcmp>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	85 c0                	test   eax,eax
c0013dbf:	74 b8                	je     c0013d79 <CPU::detectFeatures()+0x379>
c0013dc1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013dcb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013dd0:	0f 86 be 00 00 00    	jbe    c0013e94 <CPU::detectFeatures()+0x494>
c0013dd6:	83 ec 0c             	sub    esp,0xc
c0013dd9:	68 80 00 00 00       	push   0x80
c0013dde:	e8 93 f8 ff ff       	call   c0013676 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013de3:	83 e0 01             	and    eax,0x1
c0013de6:	c1 e0 06             	shl    eax,0x6
c0013de9:	88 c2                	mov    dl,al
c0013deb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013df1:	83 e0 bf             	and    eax,0xffffffbf
c0013df4:	09 d0                	or     eax,edx
c0013df6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013dfc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013e03:	e8 6e f8 ff ff       	call   c0013676 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e08:	83 e0 01             	and    eax,0x1
c0013e0b:	c1 e0 04             	shl    eax,0x4
c0013e0e:	88 c2                	mov    dl,al
c0013e10:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e16:	83 e0 ef             	and    eax,0xffffffef
c0013e19:	09 d0                	or     eax,edx
c0013e1b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e21:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013e28:	e8 49 f8 ff ff       	call   c0013676 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013e2d:	c1 e0 07             	shl    eax,0x7
c0013e30:	88 c2                	mov    dl,al
c0013e32:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e38:	83 e0 7f             	and    eax,0x7f
c0013e3b:	09 d0                	or     eax,edx
c0013e3d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e43:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013e4a:	e8 55 f8 ff ff       	call   c00136a4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013e4f:	83 e0 01             	and    eax,0x1
c0013e52:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013e59:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e5f:	83 e0 f7             	and    eax,0xfffffff7
c0013e62:	09 d0                	or     eax,edx
c0013e64:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e6a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013e71:	e8 2e f8 ff ff       	call   c00136a4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013e76:	83 c4 10             	add    esp,0x10
c0013e79:	83 e0 01             	and    eax,0x1
c0013e7c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013e83:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013e89:	83 e0 fb             	and    eax,0xfffffffb
c0013e8c:	09 d0                	or     eax,edx
c0013e8e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e9b:	50                   	push   eax
c0013e9c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013ea0:	50                   	push   eax
c0013ea1:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013ea5:	56                   	push   esi
c0013ea6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013eaa:	50                   	push   eax
c0013eab:	6a 01                	push   0x1
c0013ead:	e8 e4 f6 ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013eb2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013eb6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013ebc:	88 ca                	mov    dl,cl
c0013ebe:	83 e0 f0             	and    eax,0xfffffff0
c0013ec1:	83 e2 0f             	and    edx,0xf
c0013ec4:	09 d0                	or     eax,edx
c0013ec6:	88 ca                	mov    dl,cl
c0013ec8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013ece:	c0 ea 04             	shr    dl,0x4
c0013ed1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0013ed5:	0f b6 c2             	movzx  eax,dl
c0013ed8:	83 c4 20             	add    esp,0x20
c0013edb:	c1 e0 06             	shl    eax,0x6
c0013ede:	89 c7                	mov    edi,eax
c0013ee0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ee6:	66 25 3f c0          	and    ax,0xc03f
c0013eea:	09 f8                	or     eax,edi
c0013eec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013ef3:	89 c8                	mov    eax,ecx
c0013ef5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013efc:	c1 e8 08             	shr    eax,0x8
c0013eff:	83 e5 3f             	and    ebp,0x3f
c0013f02:	83 e0 0f             	and    eax,0xf
c0013f05:	89 c7                	mov    edi,eax
c0013f07:	c1 e7 06             	shl    edi,0x6
c0013f0a:	09 ef                	or     edi,ebp
c0013f0c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013f13:	89 fa                	mov    edx,edi
c0013f15:	83 e5 c0             	and    ebp,0xffffffc0
c0013f18:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013f1e:	88 c2                	mov    dl,al
c0013f20:	c0 ea 02             	shr    dl,0x2
c0013f23:	89 d7                	mov    edi,edx
c0013f25:	09 ef                	or     edi,ebp
c0013f27:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013f2d:	89 fa                	mov    edx,edi
c0013f2f:	83 e5 cf             	and    ebp,0xffffffcf
c0013f32:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013f38:	89 cf                	mov    edi,ecx
c0013f3a:	c1 ef 0c             	shr    edi,0xc
c0013f3d:	83 e7 03             	and    edi,0x3
c0013f40:	c1 e7 04             	shl    edi,0x4
c0013f43:	09 ef                	or     edi,ebp
c0013f45:	3c 06                	cmp    al,0x6
c0013f47:	89 fa                	mov    edx,edi
c0013f49:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013f4f:	74 04                	je     c0013f55 <CPU::detectFeatures()+0x555>
c0013f51:	3c 0f                	cmp    al,0xf
c0013f53:	75 5c                	jne    c0013fb1 <CPU::detectFeatures()+0x5b1>
c0013f55:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013f59:	89 cf                	mov    edi,ecx
c0013f5b:	c1 ef 10             	shr    edi,0x10
c0013f5e:	c1 e7 04             	shl    edi,0x4
c0013f61:	09 fa                	or     edx,edi
c0013f63:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013f69:	0f b6 d2             	movzx  edx,dl
c0013f6c:	66 81 e7 3f c0       	and    di,0xc03f
c0013f71:	c1 e2 06             	shl    edx,0x6
c0013f74:	09 fa                	or     edx,edi
c0013f76:	3c 0f                	cmp    al,0xf
c0013f78:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013f7f:	75 30                	jne    c0013fb1 <CPU::detectFeatures()+0x5b1>
c0013f81:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013f87:	c1 e9 14             	shr    ecx,0x14
c0013f8a:	83 e0 3f             	and    eax,0x3f
c0013f8d:	83 c1 0f             	add    ecx,0xf
c0013f90:	88 ca                	mov    dl,cl
c0013f92:	c0 e9 02             	shr    cl,0x2
c0013f95:	c1 e2 06             	shl    edx,0x6
c0013f98:	09 d0                	or     eax,edx
c0013f9a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0013fa0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013fa6:	83 e0 c0             	and    eax,0xffffffc0
c0013fa9:	09 c1                	or     ecx,eax
c0013fab:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0013fb1:	83 ec 0c             	sub    esp,0xc
c0013fb4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013fbb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fbf:	50                   	push   eax
c0013fc0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013fc4:	55                   	push   ebp
c0013fc5:	56                   	push   esi
c0013fc6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013fca:	57                   	push   edi
c0013fcb:	68 00 00 00 80       	push   0x80000000
c0013fd0:	e8 c1 f5 ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fd5:	83 c4 20             	add    esp,0x20
c0013fd8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0013fe0:	76 22                	jbe    c0014004 <CPU::detectFeatures()+0x604>
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fe9:	50                   	push   eax
c0013fea:	55                   	push   ebp
c0013feb:	56                   	push   esi
c0013fec:	57                   	push   edi
c0013fed:	68 01 00 00 80       	push   0x80000001
c0013ff2:	e8 9f f5 ff ff       	call   c0013596 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ff7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014001:	83 c4 20             	add    esp,0x20
c0014004:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001400a:	83 f8 01             	cmp    eax,0x1
c001400d:	75 6f                	jne    c001407e <CPU::detectFeatures()+0x67e>
c001400f:	51                   	push   ecx
c0014010:	51                   	push   ecx
c0014011:	68 b5 61 02 c0       	push   0xc00261b5
c0014016:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001401a:	56                   	push   esi
c001401b:	e8 18 c7 fe ff       	call   c0000738 <strcpy>
c0014020:	5f                   	pop    edi
c0014021:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014027:	5d                   	pop    ebp
c0014028:	66 c1 e8 06          	shr    ax,0x6
c001402c:	0f b6 c0             	movzx  eax,al
c001402f:	50                   	push   eax
c0014030:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014036:	c1 e8 0e             	shr    eax,0xe
c0014039:	0f b6 c0             	movzx  eax,al
c001403c:	50                   	push   eax
c001403d:	e8 fe f1 ff ff       	call   c0013240 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0014042:	5a                   	pop    edx
c0014043:	59                   	pop    ecx
c0014044:	50                   	push   eax
c0014045:	56                   	push   esi
c0014046:	e8 2d c8 fe ff       	call   c0000878 <strcat>
c001404b:	5f                   	pop    edi
c001404c:	5d                   	pop    ebp
c001404d:	56                   	push   esi
c001404e:	53                   	push   ebx
c001404f:	e8 54 a7 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c0014054:	58                   	pop    eax
c0014055:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001405b:	5a                   	pop    edx
c001405c:	68 bc 61 02 c0       	push   0xc00261bc
c0014061:	50                   	push   eax
c0014062:	e8 5d c7 fe ff       	call   c00007c4 <strcmp>
c0014067:	83 c4 10             	add    esp,0x10
c001406a:	85 c0                	test   eax,eax
c001406c:	0f 85 71 03 00 00    	jne    c00143e3 <CPU::detectFeatures()+0x9e3>
c0014072:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014079:	e9 65 03 00 00       	jmp    c00143e3 <CPU::detectFeatures()+0x9e3>
c001407e:	83 f8 02             	cmp    eax,0x2
c0014081:	0f 85 b5 00 00 00    	jne    c001413c <CPU::detectFeatures()+0x73c>
c0014087:	57                   	push   edi
c0014088:	57                   	push   edi
c0014089:	68 ce 61 02 c0       	push   0xc00261ce
c001408e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014092:	56                   	push   esi
c0014093:	e8 a0 c6 fe ff       	call   c0000738 <strcpy>
c0014098:	5d                   	pop    ebp
c0014099:	58                   	pop    eax
c001409a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140a0:	66 c1 e8 06          	shr    ax,0x6
c00140a4:	0f b6 c0             	movzx  eax,al
c00140a7:	50                   	push   eax
c00140a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00140ae:	c1 e8 0e             	shr    eax,0xe
c00140b1:	0f b6 c0             	movzx  eax,al
c00140b4:	50                   	push   eax
c00140b5:	e8 f2 ef ff ff       	call   c00130ac <CPU::lookupAMDName(unsigned char, unsigned char)>
c00140ba:	5a                   	pop    edx
c00140bb:	59                   	pop    ecx
c00140bc:	50                   	push   eax
c00140bd:	56                   	push   esi
c00140be:	e8 b5 c7 fe ff       	call   c0000878 <strcat>
c00140c3:	5f                   	pop    edi
c00140c4:	5d                   	pop    ebp
c00140c5:	56                   	push   esi
c00140c6:	53                   	push   ebx
c00140c7:	e8 dc a6 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c00140cc:	58                   	pop    eax
c00140cd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00140d3:	5a                   	pop    edx
c00140d4:	68 d3 61 02 c0       	push   0xc00261d3
c00140d9:	50                   	push   eax
c00140da:	e8 e5 c6 fe ff       	call   c00007c4 <strcmp>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	85 c0                	test   eax,eax
c00140e4:	75 20                	jne    c0014106 <CPU::detectFeatures()+0x706>
c00140e6:	8b 15 68 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a68
c00140ec:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140f2:	a8 01                	test   al,0x1
c00140f4:	74 10                	je     c0014106 <CPU::detectFeatures()+0x706>
c00140f6:	83 e0 fe             	and    eax,0xfffffffe
c00140f9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00140ff:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014106:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001410c:	c1 e8 0e             	shr    eax,0xe
c001410f:	3c 05                	cmp    al,0x5
c0014111:	0f 85 cc 02 00 00    	jne    c00143e3 <CPU::detectFeatures()+0x9e3>
c0014117:	56                   	push   esi
c0014118:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001411e:	83 e0 0f             	and    eax,0xf
c0014121:	50                   	push   eax
c0014122:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014128:	66 c1 e8 06          	shr    ax,0x6
c001412c:	0f b6 c0             	movzx  eax,al
c001412f:	50                   	push   eax
c0014130:	6a 05                	push   0x5
c0014132:	e8 eb f3 ff ff       	call   c0013522 <CPU::AMD_K6_writeback(int, int, int)>
c0014137:	e9 1f 02 00 00       	jmp    c001435b <CPU::detectFeatures()+0x95b>
c001413c:	8d 50 fd             	lea    edx,[eax-0x3]
c001413f:	83 fa 01             	cmp    edx,0x1
c0014142:	76 09                	jbe    c001414d <CPU::detectFeatures()+0x74d>
c0014144:	83 f8 06             	cmp    eax,0x6
c0014147:	0f 85 91 01 00 00    	jne    c00142de <CPU::detectFeatures()+0x8de>
c001414d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014153:	c1 ea 0e             	shr    edx,0xe
c0014156:	80 fa 05             	cmp    dl,0x5
c0014159:	75 7b                	jne    c00141d6 <CPU::detectFeatures()+0x7d6>
c001415b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014161:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014166:	66 81 fa 00 01       	cmp    dx,0x100
c001416b:	75 0c                	jne    c0014179 <CPU::detectFeatures()+0x779>
c001416d:	51                   	push   ecx
c001416e:	51                   	push   ecx
c001416f:	68 da 61 02 c0       	push   0xc00261da
c0014174:	e9 dc 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014179:	66 81 fa 00 02       	cmp    dx,0x200
c001417e:	75 0c                	jne    c001418c <CPU::detectFeatures()+0x78c>
c0014180:	52                   	push   edx
c0014181:	52                   	push   edx
c0014182:	68 ed 61 02 c0       	push   0xc00261ed
c0014187:	e9 c9 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c001418c:	66 81 fa 40 02       	cmp    dx,0x240
c0014191:	75 0c                	jne    c001419f <CPU::detectFeatures()+0x79f>
c0014193:	50                   	push   eax
c0014194:	50                   	push   eax
c0014195:	68 ff 61 02 c0       	push   0xc00261ff
c001419a:	e9 b6 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c001419f:	83 f8 06             	cmp    eax,0x6
c00141a2:	75 0c                	jne    c00141b0 <CPU::detectFeatures()+0x7b0>
c00141a4:	50                   	push   eax
c00141a5:	50                   	push   eax
c00141a6:	68 11 62 02 c0       	push   0xc0026211
c00141ab:	e9 a5 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00141b0:	83 f8 04             	cmp    eax,0x4
c00141b3:	75 0c                	jne    c00141c1 <CPU::detectFeatures()+0x7c1>
c00141b5:	50                   	push   eax
c00141b6:	50                   	push   eax
c00141b7:	68 1d 62 02 c0       	push   0xc002621d
c00141bc:	e9 94 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00141c1:	83 f8 03             	cmp    eax,0x3
c00141c4:	0f 85 19 02 00 00    	jne    c00143e3 <CPU::detectFeatures()+0x9e3>
c00141ca:	50                   	push   eax
c00141cb:	50                   	push   eax
c00141cc:	68 25 62 02 c0       	push   0xc0026225
c00141d1:	e9 7f 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00141d6:	80 fa 06             	cmp    dl,0x6
c00141d9:	0f 85 db 00 00 00    	jne    c00142ba <CPU::detectFeatures()+0x8ba>
c00141df:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00141e5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00141ea:	66 81 fa 80 01       	cmp    dx,0x180
c00141ef:	75 0c                	jne    c00141fd <CPU::detectFeatures()+0x7fd>
c00141f1:	50                   	push   eax
c00141f2:	50                   	push   eax
c00141f3:	68 30 62 02 c0       	push   0xc0026230
c00141f8:	e9 58 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00141fd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014203:	66 f7 c1 80 ff       	test   cx,0xff80
c0014208:	75 0c                	jne    c0014216 <CPU::detectFeatures()+0x816>
c001420a:	50                   	push   eax
c001420b:	50                   	push   eax
c001420c:	68 40 62 02 c0       	push   0xc0026240
c0014211:	e9 3f 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014216:	66 81 fa 40 02       	cmp    dx,0x240
c001421b:	75 0c                	jne    c0014229 <CPU::detectFeatures()+0x829>
c001421d:	55                   	push   ebp
c001421e:	55                   	push   ebp
c001421f:	68 47 62 02 c0       	push   0xc0026247
c0014224:	e9 2c 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014229:	66 81 fa 80 02       	cmp    dx,0x280
c001422e:	75 0c                	jne    c001423c <CPU::detectFeatures()+0x83c>
c0014230:	57                   	push   edi
c0014231:	57                   	push   edi
c0014232:	68 50 62 02 c0       	push   0xc0026250
c0014237:	e9 19 01 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c001423c:	66 81 fa 40 03       	cmp    dx,0x340
c0014241:	74 ed                	je     c0014230 <CPU::detectFeatures()+0x830>
c0014243:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014248:	75 0c                	jne    c0014256 <CPU::detectFeatures()+0x856>
c001424a:	56                   	push   esi
c001424b:	56                   	push   esi
c001424c:	68 57 62 02 c0       	push   0xc0026257
c0014251:	e9 ff 00 00 00       	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014256:	83 f8 06             	cmp    eax,0x6
c0014259:	0f 84 45 ff ff ff    	je     c00141a4 <CPU::detectFeatures()+0x7a4>
c001425f:	83 f8 04             	cmp    eax,0x4
c0014262:	0f 84 4d ff ff ff    	je     c00141b5 <CPU::detectFeatures()+0x7b5>
c0014268:	83 f8 03             	cmp    eax,0x3
c001426b:	0f 85 72 01 00 00    	jne    c00143e3 <CPU::detectFeatures()+0x9e3>
c0014271:	51                   	push   ecx
c0014272:	51                   	push   ecx
c0014273:	68 60 62 02 c0       	push   0xc0026260
c0014278:	53                   	push   ebx
c0014279:	e8 2a a5 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c001427e:	b1 c1                	mov    cl,0xc1
c0014280:	88 c8                	mov    al,cl
c0014282:	e6 22                	out    0x22,al
c0014284:	e4 23                	in     al,0x23
c0014286:	88 c2                	mov    dl,al
c0014288:	88 c8                	mov    al,cl
c001428a:	e6 22                	out    0x22,al
c001428c:	88 d0                	mov    al,dl
c001428e:	83 c8 10             	or     eax,0x10
c0014291:	e6 23                	out    0x23,al
c0014293:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001429a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001429d:	89 d0                	mov    eax,edx
c001429f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00142a5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00142a9:	40                   	inc    eax
c00142aa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00142b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00142b5:	e9 a1 00 00 00       	jmp    c001435b <CPU::detectFeatures()+0x95b>
c00142ba:	83 f8 06             	cmp    eax,0x6
c00142bd:	0f 84 e1 fe ff ff    	je     c00141a4 <CPU::detectFeatures()+0x7a4>
c00142c3:	83 f8 04             	cmp    eax,0x4
c00142c6:	0f 84 e9 fe ff ff    	je     c00141b5 <CPU::detectFeatures()+0x7b5>
c00142cc:	83 f8 03             	cmp    eax,0x3
c00142cf:	0f 85 0e 01 00 00    	jne    c00143e3 <CPU::detectFeatures()+0x9e3>
c00142d5:	52                   	push   edx
c00142d6:	52                   	push   edx
c00142d7:	68 6b 62 02 c0       	push   0xc002626b
c00142dc:	eb 77                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00142de:	83 f8 07             	cmp    eax,0x7
c00142e1:	75 09                	jne    c00142ec <CPU::detectFeatures()+0x8ec>
c00142e3:	50                   	push   eax
c00142e4:	50                   	push   eax
c00142e5:	68 75 62 02 c0       	push   0xc0026275
c00142ea:	eb 69                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00142ec:	83 f8 0a             	cmp    eax,0xa
c00142ef:	75 09                	jne    c00142fa <CPU::detectFeatures()+0x8fa>
c00142f1:	50                   	push   eax
c00142f2:	50                   	push   eax
c00142f3:	68 80 62 02 c0       	push   0xc0026280
c00142f8:	eb 5b                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c00142fa:	83 f8 0b             	cmp    eax,0xb
c00142fd:	75 09                	jne    c0014308 <CPU::detectFeatures()+0x908>
c00142ff:	50                   	push   eax
c0014300:	50                   	push   eax
c0014301:	68 88 62 02 c0       	push   0xc0026288
c0014306:	eb 4d                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014308:	83 f8 08             	cmp    eax,0x8
c001430b:	75 09                	jne    c0014316 <CPU::detectFeatures()+0x916>
c001430d:	50                   	push   eax
c001430e:	50                   	push   eax
c001430f:	68 91 62 02 c0       	push   0xc0026291
c0014314:	eb 3f                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014316:	83 f8 09             	cmp    eax,0x9
c0014319:	75 09                	jne    c0014324 <CPU::detectFeatures()+0x924>
c001431b:	50                   	push   eax
c001431c:	50                   	push   eax
c001431d:	68 99 62 02 c0       	push   0xc0026299
c0014322:	eb 31                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014324:	83 f8 05             	cmp    eax,0x5
c0014327:	75 09                	jne    c0014332 <CPU::detectFeatures()+0x932>
c0014329:	50                   	push   eax
c001432a:	50                   	push   eax
c001432b:	68 a1 62 02 c0       	push   0xc00262a1
c0014330:	eb 23                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014332:	83 f8 0c             	cmp    eax,0xc
c0014335:	75 09                	jne    c0014340 <CPU::detectFeatures()+0x940>
c0014337:	55                   	push   ebp
c0014338:	55                   	push   ebp
c0014339:	68 af 62 02 c0       	push   0xc00262af
c001433e:	eb 15                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c0014340:	83 f8 0d             	cmp    eax,0xd
c0014343:	75 09                	jne    c001434e <CPU::detectFeatures()+0x94e>
c0014345:	57                   	push   edi
c0014346:	57                   	push   edi
c0014347:	68 ba 62 02 c0       	push   0xc00262ba
c001434c:	eb 07                	jmp    c0014355 <CPU::detectFeatures()+0x955>
c001434e:	56                   	push   esi
c001434f:	56                   	push   esi
c0014350:	68 ce 62 02 c0       	push   0xc00262ce
c0014355:	53                   	push   ebx
c0014356:	e8 4d a4 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c001435b:	83 c4 10             	add    esp,0x10
c001435e:	e9 80 00 00 00       	jmp    c00143e3 <CPU::detectFeatures()+0x9e3>
c0014363:	51                   	push   ecx
c0014364:	51                   	push   ecx
c0014365:	68 1a 61 02 c0       	push   0xc002611a
c001436a:	55                   	push   ebp
c001436b:	e8 c8 c3 fe ff       	call   c0000738 <strcpy>
c0014370:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001437a:	e8 64 be fe ff       	call   c00001e3 <is486>
c001437f:	83 c4 10             	add    esp,0x10
c0014382:	85 c0                	test   eax,eax
c0014384:	74 2b                	je     c00143b1 <CPU::detectFeatures()+0x9b1>
c0014386:	52                   	push   edx
c0014387:	52                   	push   edx
c0014388:	68 da 62 02 c0       	push   0xc00262da
c001438d:	53                   	push   ebx
c001438e:	e8 15 a4 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c0014393:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001439a:	0f 20 c0             	mov    eax,cr0
c001439d:	83 e0 14             	and    eax,0x14
c00143a0:	83 c4 10             	add    esp,0x10
c00143a3:	83 f8 04             	cmp    eax,0x4
c00143a6:	75 1f                	jne    c00143c7 <CPU::detectFeatures()+0x9c7>
c00143a8:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00143af:	eb 32                	jmp    c00143e3 <CPU::detectFeatures()+0x9e3>
c00143b1:	50                   	push   eax
c00143b2:	50                   	push   eax
c00143b3:	68 e5 62 02 c0       	push   0xc00262e5
c00143b8:	53                   	push   ebx
c00143b9:	e8 ea a3 ff ff       	call   c000e7a8 <Device::setName(char const*)>
c00143be:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00143c5:	eb d3                	jmp    c001439a <CPU::detectFeatures()+0x99a>
c00143c7:	e8 f2 bd fe ff       	call   c00001be <hasLegacyFPU>
c00143cc:	83 e0 01             	and    eax,0x1
c00143cf:	8d 14 00             	lea    edx,[eax+eax*1]
c00143d2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00143d8:	83 e0 fd             	and    eax,0xfffffffd
c00143db:	09 d0                	or     eax,edx
c00143dd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00143e3:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c00143ea:	74 0e                	je     c00143fa <CPU::detectFeatures()+0x9fa>
c00143ec:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00143f1:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00143f8:	eb 20                	jmp    c001441a <CPU::detectFeatures()+0xa1a>
c00143fa:	e8 bf bd fe ff       	call   c00001be <hasLegacyFPU>
c00143ff:	83 e0 01             	and    eax,0x1
c0014402:	8d 14 00             	lea    edx,[eax+eax*1]
c0014405:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001440b:	83 e0 fd             	and    eax,0xfffffffd
c001440e:	09 d0                	or     eax,edx
c0014410:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014416:	a8 02                	test   al,0x2
c0014418:	75 d2                	jne    c00143ec <CPU::detectFeatures()+0x9ec>
c001441a:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014421:	83 c4 4c             	add    esp,0x4c
c0014424:	5b                   	pop    ebx
c0014425:	5e                   	pop    esi
c0014426:	5f                   	pop    edi
c0014427:	5d                   	pop    ebp
c0014428:	c3                   	ret    
c0014429:	90                   	nop

c001442a <CPU::setupSMEP()>:
c001442a:	0f 20 e0             	mov    eax,cr4
c001442d:	0d 00 00 10 00       	or     eax,0x100000
c0014432:	0f 22 e0             	mov    cr4,eax
c0014435:	c3                   	ret    

c0014436 <CPU::setupUMIP()>:
c0014436:	0f 20 e0             	mov    eax,cr4
c0014439:	80 cc 08             	or     ah,0x8
c001443c:	0f 22 e0             	mov    cr4,eax
c001443f:	c3                   	ret    

c0014440 <CPU::setupTSC()>:
c0014440:	0f 20 e0             	mov    eax,cr4
c0014443:	83 c8 04             	or     eax,0x4
c0014446:	0f 22 e0             	mov    cr4,eax
c0014449:	c3                   	ret    

c001444a <CPU::setupLargePages()>:
c001444a:	0f 20 e0             	mov    eax,cr4
c001444d:	83 c8 10             	or     eax,0x10
c0014450:	0f 22 e0             	mov    cr4,eax
c0014453:	c3                   	ret    

c0014454 <CPU::setupPAT()>:
c0014454:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0014459:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014460:	74 2c                	je     c001448e <CPU::setupPAT()+0x3a>
c0014462:	53                   	push   ebx
c0014463:	83 ec 10             	sub    esp,0x10
c0014466:	68 77 02 00 00       	push   0x277
c001446b:	50                   	push   eax
c001446c:	e8 f5 4d ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0014471:	83 e2 f8             	and    edx,0xfffffff8
c0014474:	83 ca 01             	or     edx,0x1
c0014477:	52                   	push   edx
c0014478:	50                   	push   eax
c0014479:	68 77 02 00 00       	push   0x277
c001447e:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0014484:	e8 09 4e ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014489:	83 c4 28             	add    esp,0x28
c001448c:	5b                   	pop    ebx
c001448d:	c3                   	ret    
c001448e:	c3                   	ret    
c001448f:	90                   	nop

c0014490 <CPU::setupMTRR()>:
c0014490:	c3                   	ret    
c0014491:	90                   	nop

c0014492 <CPU::setupGlobalPages()>:
c0014492:	0f 20 e0             	mov    eax,cr4
c0014495:	0c 80                	or     al,0x80
c0014497:	0f 22 e0             	mov    cr4,eax
c001449a:	c3                   	ret    
c001449b:	90                   	nop

c001449c <CPU::allowUsermodeDataAccess()>:
c001449c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144a0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00144a7:	74 03                	je     c00144ac <CPU::allowUsermodeDataAccess()+0x10>
c00144a9:	0f 01 cb             	stac   
c00144ac:	c3                   	ret    
c00144ad:	90                   	nop

c00144ae <CPU::prohibitUsermodeDataAccess()>:
c00144ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144b2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00144b9:	74 03                	je     c00144be <CPU::prohibitUsermodeDataAccess()+0x10>
c00144bb:	0f 01 ca             	clac   
c00144be:	c3                   	ret    
c00144bf:	90                   	nop

c00144c0 <CPU::setupSMAP()>:
c00144c0:	0f 20 e0             	mov    eax,cr4
c00144c3:	0d 00 00 20 00       	or     eax,0x200000
c00144c8:	0f 22 e0             	mov    cr4,eax
c00144cb:	eb e1                	jmp    c00144ae <CPU::prohibitUsermodeDataAccess()>
c00144cd:	90                   	nop

c00144ce <CPU::setupFeatures()>:
c00144ce:	53                   	push   ebx
c00144cf:	83 ec 08             	sub    esp,0x8
c00144d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00144dd:	74 18                	je     c00144f7 <CPU::setupFeatures()+0x29>
c00144df:	83 ec 0c             	sub    esp,0xc
c00144e2:	68 f0 62 02 c0       	push   0xc00262f0
c00144e7:	e8 53 8b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00144ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ef:	e8 42 ff ff ff       	call   c0014436 <CPU::setupUMIP()>
c00144f4:	83 c4 10             	add    esp,0x10
c00144f7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00144fe:	74 18                	je     c0014518 <CPU::setupFeatures()+0x4a>
c0014500:	83 ec 0c             	sub    esp,0xc
c0014503:	68 fa 62 02 c0       	push   0xc00262fa
c0014508:	e8 32 8b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001450d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014510:	e8 2b ff ff ff       	call   c0014440 <CPU::setupTSC()>
c0014515:	83 c4 10             	add    esp,0x10
c0014518:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001451f:	74 18                	je     c0014539 <CPU::setupFeatures()+0x6b>
c0014521:	83 ec 0c             	sub    esp,0xc
c0014524:	68 03 63 02 c0       	push   0xc0026303
c0014529:	e8 11 8b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001452e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014531:	e8 14 ff ff ff       	call   c001444a <CPU::setupLargePages()>
c0014536:	83 c4 10             	add    esp,0x10
c0014539:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014540:	74 18                	je     c001455a <CPU::setupFeatures()+0x8c>
c0014542:	83 ec 0c             	sub    esp,0xc
c0014545:	68 0c 63 02 c0       	push   0xc002630c
c001454a:	e8 f0 8a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001454f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014552:	e8 3b ff ff ff       	call   c0014492 <CPU::setupGlobalPages()>
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014561:	74 18                	je     c001457b <CPU::setupFeatures()+0xad>
c0014563:	83 ec 0c             	sub    esp,0xc
c0014566:	68 1e 63 02 c0       	push   0xc002631e
c001456b:	e8 cf 8a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0014570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014573:	e8 dc fe ff ff       	call   c0014454 <CPU::setupPAT()>
c0014578:	83 c4 10             	add    esp,0x10
c001457b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014582:	74 11                	je     c0014595 <CPU::setupFeatures()+0xc7>
c0014584:	c7 44 24 10 27 63 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026327
c001458c:	83 c4 08             	add    esp,0x8
c001458f:	5b                   	pop    ebx
c0014590:	e9 aa 8a ff ff       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c0014595:	83 c4 08             	add    esp,0x8
c0014598:	5b                   	pop    ebx
c0014599:	c3                   	ret    

c001459a <CPU::open(int, int, void*)>:
c001459a:	57                   	push   edi
c001459b:	56                   	push   esi
c001459c:	53                   	push   ebx
c001459d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145a5:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00145ab:	83 ec 0c             	sub    esp,0xc
c00145ae:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00145b4:	68 31 63 02 c0       	push   0xc0026331
c00145b9:	e8 ef 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00145be:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00145c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00145c7:	e8 7e 50 ff ff       	call   c000964a <GDT::setup()>
c00145cc:	c7 04 24 43 63 02 c0 	mov    DWORD PTR [esp],0xc0026343
c00145d3:	e8 d5 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00145d8:	83 c4 0c             	add    esp,0xc
c00145db:	6a 00                	push   0x0
c00145dd:	68 ef be ad de       	push   0xdeadbeef
c00145e2:	57                   	push   edi
c00145e3:	e8 b8 70 ff ff       	call   c000b6a0 <TSS::setup(unsigned long, unsigned long)>
c00145e8:	c7 04 24 55 63 02 c0 	mov    DWORD PTR [esp],0xc0026355
c00145ef:	e8 b9 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00145f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145f7:	e8 84 70 ff ff       	call   c000b680 <TSS::flush()>
c00145fc:	c7 04 24 69 63 02 c0 	mov    DWORD PTR [esp],0xc0026369
c0014603:	e8 a5 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014608:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001460e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014611:	e8 a0 52 ff ff       	call   c00098b6 <IDT::setup()>
c0014616:	c7 04 24 7b 63 02 c0 	mov    DWORD PTR [esp],0xc002637b
c001461d:	e8 8b 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014622:	b8 00 04 00 00       	mov    eax,0x400
c0014627:	0f 23 f8             	mov    db7,eax
c001462a:	c7 04 24 99 63 02 c0 	mov    DWORD PTR [esp],0xc0026399
c0014631:	e8 77 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014636:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014640:	e8 c5 5d ff ff       	call   c000a40a <Phys::allocatePage()>
c0014645:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001464b:	89 30                	mov    DWORD PTR [eax],esi
c001464d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014653:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014656:	c7 04 24 bb 63 02 c0 	mov    DWORD PTR [esp],0xc00263bb
c001465d:	e8 4b 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014662:	58                   	pop    eax
c0014663:	5a                   	pop    edx
c0014664:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001466a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001466e:	e8 27 80 ff ff       	call   c000c69a <VAS::setCPUSpecific(unsigned long)>
c0014673:	c7 04 24 e3 63 02 c0 	mov    DWORD PTR [esp],0xc00263e3
c001467a:	e8 2e 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001467f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014682:	e8 79 f3 ff ff       	call   c0013a00 <CPU::detectFeatures()>
c0014687:	c7 04 24 06 64 02 c0 	mov    DWORD PTR [esp],0xc0026406
c001468e:	e8 1a 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0014693:	e8 e9 b2 ff ff       	call   c000f981 <setupInterruptController()>
c0014698:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001469e:	c7 04 24 2a 64 02 c0 	mov    DWORD PTR [esp],0xc002642a
c00146a5:	e8 03 57 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00146aa:	a1 80 8a 02 c0       	mov    eax,ds:0xc0028a80
c00146af:	83 e0 10             	and    eax,0x10
c00146b2:	83 f8 01             	cmp    eax,0x1
c00146b5:	19 c0                	sbb    eax,eax
c00146b7:	83 e0 46             	and    eax,0x46
c00146ba:	83 c0 1e             	add    eax,0x1e
c00146bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00146c0:	e8 eb c8 ff ff       	call   c0010fb0 <setupTimer(int)>
c00146c5:	83 c4 10             	add    esp,0x10
c00146c8:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00146ce:	f6 05 80 8a 02 c0 20 	test   BYTE PTR ds:0xc0028a80,0x20
c00146d5:	74 18                	je     c00146ef <CPU::open(int, int, void*)+0x155>
c00146d7:	83 ec 0c             	sub    esp,0xc
c00146da:	68 45 64 02 c0       	push   0xc0026445
c00146df:	e8 c9 56 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00146e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146e7:	e8 e2 fd ff ff       	call   c00144ce <CPU::setupFeatures()>
c00146ec:	83 c4 10             	add    esp,0x10
c00146ef:	83 ec 0c             	sub    esp,0xc
c00146f2:	68 60 64 02 c0       	push   0xc0026460
c00146f7:	e8 b1 56 ff ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00146fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146ff:	e8 5c f0 ff ff       	call   c0013760 <CPU::displayFeatures()>
c0014704:	83 c4 10             	add    esp,0x10
c0014707:	31 c0                	xor    eax,eax
c0014709:	5b                   	pop    ebx
c001470a:	5e                   	pop    esi
c001470b:	5f                   	pop    edi
c001470c:	c3                   	ret    
c001470d:	90                   	nop

c001470e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001470e:	57                   	push   edi
c001470f:	56                   	push   esi
c0014710:	53                   	push   ebx
c0014711:	51                   	push   ecx
c0014712:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014716:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014719:	0f 02 c0             	lar    eax,ax
c001471c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001471f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0014723:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014726:	88 ca                	mov    dl,cl
c0014728:	c0 ea 06             	shr    dl,0x6
c001472b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001472f:	89 ca                	mov    edx,ecx
c0014731:	66 c1 ea 03          	shr    dx,0x3
c0014735:	83 e2 07             	and    edx,0x7
c0014738:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001473d:	88 17                	mov    BYTE PTR [edi],dl
c001473f:	0f 84 a6 01 00 00    	je     c00148eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014745:	83 e1 07             	and    ecx,0x7
c0014748:	80 f9 04             	cmp    cl,0x4
c001474b:	0f 84 98 00 00 00    	je     c00147e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014751:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014756:	0f 95 c0             	setne  al
c0014759:	80 f9 05             	cmp    cl,0x5
c001475c:	0f 95 c2             	setne  dl
c001475f:	08 c2                	or     dl,al
c0014761:	74 79                	je     c00147dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014763:	84 c9                	test   cl,cl
c0014765:	75 05                	jne    c001476c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014767:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001476a:	eb 3c                	jmp    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001476c:	80 f9 01             	cmp    cl,0x1
c001476f:	75 05                	jne    c0014776 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014771:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014774:	eb 32                	jmp    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014776:	80 f9 02             	cmp    cl,0x2
c0014779:	75 05                	jne    c0014780 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001477b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001477e:	eb 28                	jmp    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014780:	31 c0                	xor    eax,eax
c0014782:	80 f9 03             	cmp    cl,0x3
c0014785:	75 05                	jne    c001478c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014787:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001478a:	eb 1c                	jmp    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001478c:	80 f9 05             	cmp    cl,0x5
c001478f:	75 05                	jne    c0014796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014791:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014794:	eb 12                	jmp    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014796:	80 f9 06             	cmp    cl,0x6
c0014799:	75 05                	jne    c00147a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001479b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001479e:	eb 08                	jmp    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147a0:	80 f9 07             	cmp    cl,0x7
c00147a3:	75 03                	jne    c00147a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00147a5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00147a8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00147ad:	75 10                	jne    c00147bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00147af:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00147b3:	b9 03 00 00 00       	mov    ecx,0x3
c00147b8:	01 d0                	add    eax,edx
c00147ba:	e9 37 01 00 00       	jmp    c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147bf:	b9 02 00 00 00       	mov    ecx,0x2
c00147c4:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00147c9:	0f 85 27 01 00 00    	jne    c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147cf:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00147d2:	b9 06 00 00 00       	mov    ecx,0x6
c00147d7:	e9 1a 01 00 00       	jmp    c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00147dc:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00147df:	b9 06 00 00 00       	mov    ecx,0x6
c00147e4:	e9 0f 01 00 00       	jmp    c00148f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00147e9:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00147ec:	88 ca                	mov    dl,cl
c00147ee:	c0 ea 06             	shr    dl,0x6
c00147f1:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00147f5:	89 ca                	mov    edx,ecx
c00147f7:	66 c1 ea 03          	shr    dx,0x3
c00147fb:	83 e2 07             	and    edx,0x7
c00147fe:	80 e1 07             	and    cl,0x7
c0014801:	75 05                	jne    c0014808 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0014803:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014806:	eb 4c                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014808:	80 f9 01             	cmp    cl,0x1
c001480b:	75 05                	jne    c0014812 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001480d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014810:	eb 42                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014812:	80 f9 02             	cmp    cl,0x2
c0014815:	75 05                	jne    c001481c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014817:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001481a:	eb 38                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001481c:	80 f9 03             	cmp    cl,0x3
c001481f:	75 05                	jne    c0014826 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0014821:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014824:	eb 2e                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014826:	80 f9 04             	cmp    cl,0x4
c0014829:	75 12                	jne    c001483d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001482b:	f6 c4 60             	test   ah,0x60
c001482e:	75 08                	jne    c0014838 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014830:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014833:	8d 78 14             	lea    edi,[eax+0x14]
c0014836:	eb 1c                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014838:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001483b:	eb 17                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001483d:	80 f9 05             	cmp    cl,0x5
c0014840:	75 05                	jne    c0014847 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014842:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014845:	eb 0d                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014847:	80 f9 06             	cmp    cl,0x6
c001484a:	75 05                	jne    c0014851 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001484c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001484f:	eb 03                	jmp    c0014854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014851:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014854:	84 d2                	test   dl,dl
c0014856:	75 05                	jne    c001485d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014858:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001485b:	eb 3c                	jmp    c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001485d:	80 fa 01             	cmp    dl,0x1
c0014860:	75 05                	jne    c0014867 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014862:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014865:	eb 32                	jmp    c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014867:	80 fa 02             	cmp    dl,0x2
c001486a:	75 05                	jne    c0014871 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001486c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001486f:	eb 28                	jmp    c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014871:	80 fa 03             	cmp    dl,0x3
c0014874:	75 05                	jne    c001487b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014876:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014879:	eb 1e                	jmp    c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001487b:	31 c0                	xor    eax,eax
c001487d:	80 fa 04             	cmp    dl,0x4
c0014880:	74 17                	je     c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014882:	80 fa 05             	cmp    dl,0x5
c0014885:	75 05                	jne    c001488c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014887:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001488a:	eb 0d                	jmp    c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001488c:	80 fa 06             	cmp    dl,0x6
c001488f:	75 05                	jne    c0014896 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014891:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014894:	eb 03                	jmp    c0014899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014896:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014899:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001489e:	0f 94 c2             	sete   dl
c00148a1:	80 f9 05             	cmp    cl,0x5
c00148a4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00148a8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00148ad:	d3 e0                	shl    eax,cl
c00148af:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00148b3:	74 0a                	je     c00148bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00148b5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00148b8:	b9 07 00 00 00       	mov    ecx,0x7
c00148bd:	eb 37                	jmp    c00148f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00148bf:	01 f8                	add    eax,edi
c00148c1:	b9 03 00 00 00       	mov    ecx,0x3
c00148c6:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00148cb:	74 2b                	je     c00148f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148cd:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00148d2:	75 0d                	jne    c00148e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00148d4:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00148d8:	01 c8                	add    eax,ecx
c00148da:	b9 04 00 00 00       	mov    ecx,0x4
c00148df:	eb 17                	jmp    c00148f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148e1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00148e4:	b9 07 00 00 00       	mov    ecx,0x7
c00148e9:	eb 0d                	jmp    c00148f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148eb:	b9 02 00 00 00       	mov    ecx,0x2
c00148f0:	b2 01                	mov    dl,0x1
c00148f2:	31 c0                	xor    eax,eax
c00148f4:	eb 02                	jmp    c00148f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00148f6:	31 d2                	xor    edx,edx
c00148f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148fc:	89 0b                	mov    DWORD PTR [ebx],ecx
c00148fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014902:	88 11                	mov    BYTE PTR [ecx],dl
c0014904:	5a                   	pop    edx
c0014905:	5b                   	pop    ebx
c0014906:	5e                   	pop    esi
c0014907:	5f                   	pop    edi
c0014908:	c3                   	ret    

c0014909 <Krnl::smpEntry()>:
c0014909:	eb fe                	jmp    c0014909 <Krnl::smpEntry()>

c001490b <Krnl::startCPU(int)>:
c001490b:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0014910:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014917:	0f 84 36 01 00 00    	je     c0014a53 <Krnl::startCPU(int)+0x148>
c001491d:	53                   	push   ebx
c001491e:	83 ec 10             	sub    esp,0x10
c0014921:	fa                   	cli    
c0014922:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0014928:	6a 1b                	push   0x1b
c001492a:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0014930:	e8 31 49 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0014935:	25 00 f0 ff ff       	and    eax,0xfffff000
c001493a:	89 c3                	mov    ebx,eax
c001493c:	58                   	pop    eax
c001493d:	5a                   	pop    edx
c001493e:	53                   	push   ebx
c001493f:	68 a8 64 02 c0       	push   0xc00264a8
c0014944:	e8 f6 86 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0014949:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014957:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014961:	c1 e0 18             	shl    eax,0x18
c0014964:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014973:	09 c2                	or     edx,eax
c0014975:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001497b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014981:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014987:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001498d:	80 cd c5             	or     ch,0xc5
c0014990:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014996:	f3 90                	pause  
c0014998:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001499a:	0f ba e1 0c          	bt     ecx,0xc
c001499e:	72 f6                	jb     c0014996 <Krnl::startCPU(int)+0x8b>
c00149a0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00149a6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00149ac:	09 c1                	or     ecx,eax
c00149ae:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00149b4:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00149ba:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00149c0:	80 cd 85             	or     ch,0x85
c00149c3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00149c9:	f3 90                	pause  
c00149cb:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00149cd:	0f ba e1 0c          	bt     ecx,0xc
c00149d1:	72 f6                	jb     c00149c9 <Krnl::startCPU(int)+0xbe>
c00149d3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00149dd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00149e3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00149e9:	09 c1                	or     ecx,eax
c00149eb:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00149f1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00149f7:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00149fd:	81 c9 02 06 00 00    	or     ecx,0x602
c0014a03:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014a09:	f3 90                	pause  
c0014a0b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014a0d:	0f ba e1 0c          	bt     ecx,0xc
c0014a11:	72 f6                	jb     c0014a09 <Krnl::startCPU(int)+0xfe>
c0014a13:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a1d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014a23:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014a29:	09 c8                	or     eax,ecx
c0014a2b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014a31:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014a37:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014a3c:	0d 02 06 00 00       	or     eax,0x602
c0014a41:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014a47:	f3 90                	pause  
c0014a49:	8b 02                	mov    eax,DWORD PTR [edx]
c0014a4b:	0f ba e0 0c          	bt     eax,0xc
c0014a4f:	72 f6                	jb     c0014a47 <Krnl::startCPU(int)+0x13c>
c0014a51:	eb fe                	jmp    c0014a51 <Krnl::startCPU(int)+0x146>
c0014a53:	c3                   	ret    

c0014a54 <Krnl::startCPUs()>:
c0014a54:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0014a59:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014a5f:	88 c2                	mov    dl,al
c0014a61:	83 e2 0a             	and    edx,0xa
c0014a64:	80 fa 0a             	cmp    dl,0xa
c0014a67:	75 09                	jne    c0014a72 <Krnl::startCPUs()+0x1e>
c0014a69:	a8 01                	test   al,0x1
c0014a6b:	74 05                	je     c0014a72 <Krnl::startCPUs()+0x1e>
c0014a6d:	e9 29 b7 fe ff       	jmp    c000019b <prepareTramp>
c0014a72:	c3                   	ret    
c0014a73:	90                   	nop

c0014a74 <EnvVarContainer::getEnv(char const*)>:
c0014a74:	57                   	push   edi
c0014a75:	56                   	push   esi
c0014a76:	53                   	push   ebx
c0014a77:	31 db                	xor    ebx,ebx
c0014a79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a7d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014a7f:	7e 2b                	jle    c0014aac <EnvVarContainer::getEnv(char const*)+0x38>
c0014a81:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014a88:	50                   	push   eax
c0014a89:	50                   	push   eax
c0014a8a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014a8d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014a90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a94:	e8 2b bd fe ff       	call   c00007c4 <strcmp>
c0014a99:	83 c4 10             	add    esp,0x10
c0014a9c:	85 c0                	test   eax,eax
c0014a9e:	75 09                	jne    c0014aa9 <EnvVarContainer::getEnv(char const*)+0x35>
c0014aa0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014aa3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014aa7:	eb 05                	jmp    c0014aae <EnvVarContainer::getEnv(char const*)+0x3a>
c0014aa9:	43                   	inc    ebx
c0014aaa:	eb d1                	jmp    c0014a7d <EnvVarContainer::getEnv(char const*)+0x9>
c0014aac:	31 c0                	xor    eax,eax
c0014aae:	5b                   	pop    ebx
c0014aaf:	5e                   	pop    esi
c0014ab0:	5f                   	pop    edi
c0014ab1:	c3                   	ret    

c0014ab2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014ab2:	55                   	push   ebp
c0014ab3:	57                   	push   edi
c0014ab4:	56                   	push   esi
c0014ab5:	53                   	push   ebx
c0014ab6:	83 ec 28             	sub    esp,0x28
c0014ab9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014abd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014ac1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014ac5:	56                   	push   esi
c0014ac6:	e8 cd bb fe ff       	call   c0000698 <strlen>
c0014acb:	40                   	inc    eax
c0014acc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014acf:	e8 7f 52 ff ff       	call   c0009d53 <malloc>
c0014ad4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ad7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014adb:	e8 b8 bb fe ff       	call   c0000698 <strlen>
c0014ae0:	40                   	inc    eax
c0014ae1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ae4:	e8 6a 52 ff ff       	call   c0009d53 <malloc>
c0014ae9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014aec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014af0:	e8 a3 bb fe ff       	call   c0000698 <strlen>
c0014af5:	83 c4 0c             	add    esp,0xc
c0014af8:	40                   	inc    eax
c0014af9:	50                   	push   eax
c0014afa:	6a 00                	push   0x0
c0014afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b00:	e8 77 bb fe ff       	call   c000067c <memset>
c0014b05:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b08:	e8 8b bb fe ff       	call   c0000698 <strlen>
c0014b0d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014b11:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b19:	89 de                	mov    esi,ebx
c0014b1b:	e8 78 bb fe ff       	call   c0000698 <strlen>
c0014b20:	83 c4 0c             	add    esp,0xc
c0014b23:	40                   	inc    eax
c0014b24:	50                   	push   eax
c0014b25:	6a 00                	push   0x0
c0014b27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b2b:	e8 4c bb fe ff       	call   c000067c <memset>
c0014b30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b33:	e8 60 bb fe ff       	call   c0000698 <strlen>
c0014b38:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014b3c:	8d 48 01             	lea    ecx,[eax+0x1]
c0014b3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b44:	40                   	inc    eax
c0014b45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014b48:	c1 e0 03             	shl    eax,0x3
c0014b4b:	5a                   	pop    edx
c0014b4c:	59                   	pop    ecx
c0014b4d:	50                   	push   eax
c0014b4e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b51:	e8 e9 51 ff ff       	call   c0009d3f <realloc>
c0014b56:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014b5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b5d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014b60:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014b64:	b9 08 00 00 00       	mov    ecx,0x8
c0014b69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b6b:	83 c4 2c             	add    esp,0x2c
c0014b6e:	5b                   	pop    ebx
c0014b6f:	5e                   	pop    esi
c0014b70:	5f                   	pop    edi
c0014b71:	5d                   	pop    ebp
c0014b72:	c3                   	ret    
c0014b73:	90                   	nop

c0014b74 <EnvVarContainer::deleteEnv(char const*)>:
c0014b74:	c3                   	ret    
c0014b75:	90                   	nop

c0014b76 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014b76:	55                   	push   ebp
c0014b77:	57                   	push   edi
c0014b78:	56                   	push   esi
c0014b79:	53                   	push   ebx
c0014b7a:	81 ec 38 01 00 00    	sub    esp,0x138
c0014b80:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014b87:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014b8e:	68 14 01 00 00       	push   0x114
c0014b93:	e8 bb 51 ff ff       	call   c0009d53 <malloc>
c0014b98:	83 c4 0c             	add    esp,0xc
c0014b9b:	89 c3                	mov    ebx,eax
c0014b9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ba0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014ba7:	50                   	push   eax
c0014ba8:	e8 fd 89 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0014bad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bb0:	e8 3d 8d ff ff       	call   c000d8f2 <File::exists()>
c0014bb5:	83 c4 10             	add    esp,0x10
c0014bb8:	84 c0                	test   al,al
c0014bba:	75 31                	jne    c0014bed <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014bbc:	50                   	push   eax
c0014bbd:	50                   	push   eax
c0014bbe:	6a 12                	push   0x12
c0014bc0:	53                   	push   ebx
c0014bc1:	e8 be 8a ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0014bc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bc8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014bcb:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bce:	e8 c5 ba fe ff       	call   c0000698 <strlen>
c0014bd3:	5a                   	pop    edx
c0014bd4:	31 d2                	xor    edx,edx
c0014bd6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014bda:	51                   	push   ecx
c0014bdb:	56                   	push   esi
c0014bdc:	52                   	push   edx
c0014bdd:	50                   	push   eax
c0014bde:	53                   	push   ebx
c0014bdf:	ff d7                	call   edi
c0014be1:	83 c4 14             	add    esp,0x14
c0014be4:	53                   	push   ebx
c0014be5:	e8 f8 8a ff ff       	call   c000d6e2 <File::close()>
c0014bea:	83 c4 10             	add    esp,0x10
c0014bed:	56                   	push   esi
c0014bee:	31 f6                	xor    esi,esi
c0014bf0:	68 00 01 00 00       	push   0x100
c0014bf5:	6a 00                	push   0x0
c0014bf7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014bfb:	50                   	push   eax
c0014bfc:	e8 7b ba fe ff       	call   c000067c <memset>
c0014c01:	5f                   	pop    edi
c0014c02:	58                   	pop    eax
c0014c03:	6a 01                	push   0x1
c0014c05:	53                   	push   ebx
c0014c06:	e8 79 8a ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0014c0b:	83 c4 10             	add    esp,0x10
c0014c0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c1b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014c1f:	51                   	push   ecx
c0014c20:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014c24:	52                   	push   edx
c0014c25:	6a 00                	push   0x0
c0014c27:	6a 01                	push   0x1
c0014c29:	53                   	push   ebx
c0014c2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c2d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014c31:	83 c4 20             	add    esp,0x20
c0014c34:	3c 0d                	cmp    al,0xd
c0014c36:	0f 84 09 01 00 00    	je     c0014d45 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014c3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014c41:	0f 84 ef 00 00 00    	je     c0014d36 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014c47:	3c 0a                	cmp    al,0xa
c0014c49:	74 13                	je     c0014c5e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014c4b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c50:	74 0c                	je     c0014c5e <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014c52:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014c58:	0f 8e d8 00 00 00    	jle    c0014d36 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014c5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c62:	83 ec 0c             	sub    esp,0xc
c0014c65:	8d 78 01             	lea    edi,[eax+0x1]
c0014c68:	57                   	push   edi
c0014c69:	e8 e5 50 ff ff       	call   c0009d53 <malloc>
c0014c6e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014c72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014c76:	8d 56 04             	lea    edx,[esi+0x4]
c0014c79:	89 14 24             	mov    DWORD PTR [esp],edx
c0014c7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014c80:	e8 ce 50 ff ff       	call   c0009d53 <malloc>
c0014c85:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c89:	83 c4 0c             	add    esp,0xc
c0014c8c:	57                   	push   edi
c0014c8d:	6a 00                	push   0x0
c0014c8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c93:	e8 e4 b9 fe ff       	call   c000067c <memset>
c0014c98:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014c9c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ca0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014ca4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ca6:	83 c4 0c             	add    esp,0xc
c0014ca9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014cad:	52                   	push   edx
c0014cae:	6a 00                	push   0x0
c0014cb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014cb4:	e8 c3 b9 fe ff       	call   c000067c <memset>
c0014cb9:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014cbd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014cc1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cc4:	e8 cf b9 fe ff       	call   c0000698 <strlen>
c0014cc9:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014ccd:	89 c1                	mov    ecx,eax
c0014ccf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014cd1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014cd4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014cd7:	40                   	inc    eax
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014cde:	85 d2                	test   edx,edx
c0014ce0:	75 0c                	jne    c0014cee <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014ce2:	83 ec 0c             	sub    esp,0xc
c0014ce5:	6a 08                	push   0x8
c0014ce7:	e8 67 50 ff ff       	call   c0009d53 <malloc>
c0014cec:	eb 0c                	jmp    c0014cfa <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014cee:	c1 e0 03             	shl    eax,0x3
c0014cf1:	51                   	push   ecx
c0014cf2:	51                   	push   ecx
c0014cf3:	50                   	push   eax
c0014cf4:	52                   	push   edx
c0014cf5:	e8 45 50 ff ff       	call   c0009d3f <realloc>
c0014cfa:	83 c4 10             	add    esp,0x10
c0014cfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014d00:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014d03:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014d06:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014d0a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014d0e:	b9 08 00 00 00       	mov    ecx,0x8
c0014d13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d15:	31 f6                	xor    esi,esi
c0014d17:	50                   	push   eax
c0014d18:	68 00 01 00 00       	push   0x100
c0014d1d:	6a 00                	push   0x0
c0014d1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014d23:	50                   	push   eax
c0014d24:	e8 53 b9 fe ff       	call   c000067c <memset>
c0014d29:	83 c4 10             	add    esp,0x10
c0014d2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d34:	eb 0f                	jmp    c0014d45 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d36:	3c 3d                	cmp    al,0x3d
c0014d38:	74 07                	je     c0014d41 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014d3a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014d3e:	46                   	inc    esi
c0014d3f:	eb 04                	jmp    c0014d45 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d41:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014d45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d4a:	0f 85 c6 fe ff ff    	jne    c0014c16 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014d50:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d56:	5b                   	pop    ebx
c0014d57:	5e                   	pop    esi
c0014d58:	5f                   	pop    edi
c0014d59:	5d                   	pop    ebp
c0014d5a:	c3                   	ret    
c0014d5b:	90                   	nop

c0014d5c <EnvVarContainer::__loadSystem()>:
c0014d5c:	83 ec 10             	sub    esp,0x10
c0014d5f:	68 40 84 02 c0       	push   0xc0028440
c0014d64:	68 b9 64 02 c0       	push   0xc00264b9
c0014d69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d6d:	e8 04 fe ff ff       	call   c0014b76 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014d72:	83 c4 1c             	add    esp,0x1c
c0014d75:	c3                   	ret    

c0014d76 <EnvVarContainer::__loadUser()>:
c0014d76:	c3                   	ret    
c0014d77:	90                   	nop

c0014d78 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d8a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014d8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014d98:	90                   	nop
c0014d99:	c3                   	ret    

c0014d9a <EnvVarContainer::~EnvVarContainer()>:
c0014d9a:	83 ec 0c             	sub    esp,0xc
c0014d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014da4:	85 c0                	test   eax,eax
c0014da6:	74 1d                	je     c0014dc5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dae:	85 c0                	test   eax,eax
c0014db0:	74 13                	je     c0014dc5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014db6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db9:	83 ec 0c             	sub    esp,0xc
c0014dbc:	50                   	push   eax
c0014dbd:	e8 a1 4f ff ff       	call   c0009d63 <free>
c0014dc2:	83 c4 10             	add    esp,0x10
c0014dc5:	90                   	nop
c0014dc6:	83 c4 0c             	add    esp,0xc
c0014dc9:	c3                   	ret    

c0014dca <Krnl::getEnv(Process*, char const*)>:
c0014dca:	53                   	push   ebx
c0014dcb:	83 ec 08             	sub    esp,0x8
c0014dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dd2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014dd6:	39 05 b0 9f 02 c0    	cmp    DWORD PTR ds:0xc0029fb0,eax
c0014ddc:	74 04                	je     c0014de2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014dde:	85 c0                	test   eax,eax
c0014de0:	75 0b                	jne    c0014ded <Krnl::getEnv(Process*, char const*)+0x23>
c0014de2:	a1 34 95 02 c0       	mov    eax,ds:0xc0029534
c0014de7:	85 c0                	test   eax,eax
c0014de9:	75 19                	jne    c0014e04 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014deb:	eb 27                	jmp    c0014e14 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014ded:	52                   	push   edx
c0014dee:	52                   	push   edx
c0014def:	53                   	push   ebx
c0014df0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014df6:	e8 79 fc ff ff       	call   c0014a74 <EnvVarContainer::getEnv(char const*)>
c0014dfb:	83 c4 10             	add    esp,0x10
c0014dfe:	85 c0                	test   eax,eax
c0014e00:	75 28                	jne    c0014e2a <Krnl::getEnv(Process*, char const*)+0x60>
c0014e02:	eb de                	jmp    c0014de2 <Krnl::getEnv(Process*, char const*)+0x18>
c0014e04:	52                   	push   edx
c0014e05:	52                   	push   edx
c0014e06:	53                   	push   ebx
c0014e07:	50                   	push   eax
c0014e08:	e8 67 fc ff ff       	call   c0014a74 <EnvVarContainer::getEnv(char const*)>
c0014e0d:	83 c4 10             	add    esp,0x10
c0014e10:	85 c0                	test   eax,eax
c0014e12:	75 16                	jne    c0014e2a <Krnl::getEnv(Process*, char const*)+0x60>
c0014e14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014e18:	a1 38 95 02 c0       	mov    eax,ds:0xc0029538
c0014e1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e21:	83 c4 08             	add    esp,0x8
c0014e24:	5b                   	pop    ebx
c0014e25:	e9 4a fc ff ff       	jmp    c0014a74 <EnvVarContainer::getEnv(char const*)>
c0014e2a:	83 c4 08             	add    esp,0x8
c0014e2d:	5b                   	pop    ebx
c0014e2e:	c3                   	ret    

c0014e2f <Krnl::setEnvSystem(char const*, char const*)>:
c0014e2f:	83 ec 10             	sub    esp,0x10
c0014e32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e3a:	ff 35 38 95 02 c0    	push   DWORD PTR ds:0xc0029538
c0014e40:	e8 6d fc ff ff       	call   c0014ab2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014e45:	83 c4 1c             	add    esp,0x1c
c0014e48:	c3                   	ret    

c0014e49 <Krnl::setEnvUser(char const*, char const*)>:
c0014e49:	a1 34 95 02 c0       	mov    eax,ds:0xc0029534
c0014e4e:	85 c0                	test   eax,eax
c0014e50:	74 15                	je     c0014e67 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014e52:	83 ec 10             	sub    esp,0x10
c0014e55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e5d:	50                   	push   eax
c0014e5e:	e8 4f fc ff ff       	call   c0014ab2 <EnvVarContainer::setEnv(char const*, char const*)>
c0014e63:	83 c4 1c             	add    esp,0x1c
c0014e66:	c3                   	ret    
c0014e67:	c3                   	ret    

c0014e68 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e6c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014e72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e76:	e9 37 fc ff ff       	jmp    c0014ab2 <EnvVarContainer::setEnv(char const*, char const*)>

c0014e7b <Krnl::deleteEnvSystem(char const*)>:
c0014e7b:	c3                   	ret    

c0014e7c <Krnl::deleteEnvUser(char const*)>:
c0014e7c:	c3                   	ret    

c0014e7d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014e7d:	c3                   	ret    

c0014e7e <Krnl::newProcessEnv(Process*)>:
c0014e7e:	83 ec 28             	sub    esp,0x28
c0014e81:	6a 0c                	push   0xc
c0014e83:	e8 cb 4e ff ff       	call   c0009d53 <malloc>
c0014e88:	5a                   	pop    edx
c0014e89:	59                   	pop    ecx
c0014e8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014e8e:	50                   	push   eax
c0014e8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e93:	e8 e0 fe ff ff       	call   c0014d78 <EnvVarContainer::EnvVarContainer(Process*)>
c0014e98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e9c:	83 c4 2c             	add    esp,0x2c
c0014e9f:	c3                   	ret    

c0014ea0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014ea0:	57                   	push   edi
c0014ea1:	56                   	push   esi
c0014ea2:	53                   	push   ebx
c0014ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ea7:	83 ec 0c             	sub    esp,0xc
c0014eaa:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014eb0:	6a 0c                	push   0xc
c0014eb2:	e8 9c 4e ff ff       	call   c0009d53 <malloc>
c0014eb7:	89 c3                	mov    ebx,eax
c0014eb9:	58                   	pop    eax
c0014eba:	5a                   	pop    edx
c0014ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ebf:	53                   	push   ebx
c0014ec0:	e8 b3 fe ff ff       	call   c0014d78 <EnvVarContainer::EnvVarContainer(Process*)>
c0014ec5:	8b 07                	mov    eax,DWORD PTR [edi]
c0014ec7:	89 03                	mov    DWORD PTR [ebx],eax
c0014ec9:	c1 e0 03             	shl    eax,0x3
c0014ecc:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ecf:	e8 7f 4e ff ff       	call   c0009d53 <malloc>
c0014ed4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014ed7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014ed9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014edc:	c1 e1 03             	shl    ecx,0x3
c0014edf:	89 c7                	mov    edi,eax
c0014ee1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	89 d8                	mov    eax,ebx
c0014ee8:	5b                   	pop    ebx
c0014ee9:	5e                   	pop    esi
c0014eea:	5f                   	pop    edi
c0014eeb:	c3                   	ret    

c0014eec <Krnl::loadSystemEnv()>:
c0014eec:	53                   	push   ebx
c0014eed:	83 ec 14             	sub    esp,0x14
c0014ef0:	6a 0c                	push   0xc
c0014ef2:	e8 5c 4e ff ff       	call   c0009d53 <malloc>
c0014ef7:	89 c3                	mov    ebx,eax
c0014ef9:	58                   	pop    eax
c0014efa:	5a                   	pop    edx
c0014efb:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0014f01:	53                   	push   ebx
c0014f02:	e8 71 fe ff ff       	call   c0014d78 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f0a:	89 1d 38 95 02 c0    	mov    DWORD PTR ds:0xc0029538,ebx
c0014f10:	e8 47 fe ff ff       	call   c0014d5c <EnvVarContainer::__loadSystem()>
c0014f15:	83 c4 18             	add    esp,0x18
c0014f18:	5b                   	pop    ebx
c0014f19:	c3                   	ret    

c0014f1a <Krnl::loadUserEnv()>:
c0014f1a:	53                   	push   ebx
c0014f1b:	83 ec 14             	sub    esp,0x14
c0014f1e:	6a 0c                	push   0xc
c0014f20:	e8 2e 4e ff ff       	call   c0009d53 <malloc>
c0014f25:	89 c3                	mov    ebx,eax
c0014f27:	58                   	pop    eax
c0014f28:	5a                   	pop    edx
c0014f29:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0014f2f:	53                   	push   ebx
c0014f30:	e8 43 fe ff ff       	call   c0014d78 <EnvVarContainer::EnvVarContainer(Process*)>
c0014f35:	89 1d 34 95 02 c0    	mov    DWORD PTR ds:0xc0029534,ebx
c0014f3b:	83 c4 18             	add    esp,0x18
c0014f3e:	5b                   	pop    ebx
c0014f3f:	c3                   	ret    

c0014f40 <Krnl::flushEnv()>:
c0014f40:	c3                   	ret    

c0014f41 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f45:	8b 15 34 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029534
c0014f4b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014f51:	a1 38 95 02 c0       	mov    eax,ds:0xc0029538
c0014f56:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f58:	03 01                	add    eax,DWORD PTR [ecx]
c0014f5a:	85 d2                	test   edx,edx
c0014f5c:	74 02                	je     c0014f60 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014f5e:	03 02                	add    eax,DWORD PTR [edx]
c0014f60:	c3                   	ret    

c0014f61 <Krnl::getProcessEnvPair(Process*, int)>:
c0014f61:	57                   	push   edi
c0014f62:	56                   	push   esi
c0014f63:	8b 35 34 95 02 c0    	mov    esi,DWORD PTR ds:0xc0029534
c0014f69:	53                   	push   ebx
c0014f6a:	85 f6                	test   esi,esi
c0014f6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f74:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014f7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f7e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014f80:	75 16                	jne    c0014f98 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014f82:	39 c2                	cmp    edx,eax
c0014f84:	7c 16                	jl     c0014f9c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014f86:	8b 0d 38 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029538
c0014f8c:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014f8e:	01 c6                	add    esi,eax
c0014f90:	39 d6                	cmp    esi,edx
c0014f92:	7e 3c                	jle    c0014fd0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014f94:	29 c2                	sub    edx,eax
c0014f96:	eb 04                	jmp    c0014f9c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014f98:	39 c2                	cmp    edx,eax
c0014f9a:	7d 05                	jge    c0014fa1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014f9c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014f9f:	eb 20                	jmp    c0014fc1 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014fa1:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014fa3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014fa6:	39 d1                	cmp    ecx,edx
c0014fa8:	7e 04                	jle    c0014fae <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014faa:	29 c2                	sub    edx,eax
c0014fac:	eb 10                	jmp    c0014fbe <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014fae:	8b 35 38 95 02 c0    	mov    esi,DWORD PTR ds:0xc0029538
c0014fb4:	03 0e                	add    ecx,DWORD PTR [esi]
c0014fb6:	39 d1                	cmp    ecx,edx
c0014fb8:	7e 16                	jle    c0014fd0 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014fba:	29 c2                	sub    edx,eax
c0014fbc:	29 fa                	sub    edx,edi
c0014fbe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014fc1:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014fc4:	8b 02                	mov    eax,DWORD PTR [edx]
c0014fc6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014fc9:	89 03                	mov    DWORD PTR [ebx],eax
c0014fcb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014fce:	eb 1d                	jmp    c0014fed <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0014fd0:	83 ec 0c             	sub    esp,0xc
c0014fd3:	68 db 64 02 c0       	push   0xc00264db
c0014fd8:	e8 18 00 00 00       	call   c0014ff5 <Krnl::panic(char const*)>
c0014fdd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014fe3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014fea:	83 c4 10             	add    esp,0x10
c0014fed:	89 d8                	mov    eax,ebx
c0014fef:	5b                   	pop    ebx
c0014ff0:	5e                   	pop    esi
c0014ff1:	5f                   	pop    edi
c0014ff2:	c2 04 00             	ret    0x4

c0014ff5 <Krnl::panic(char const*)>:
c0014ff5:	53                   	push   ebx
c0014ff6:	83 ec 10             	sub    esp,0x10
c0014ff9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014ffd:	fa                   	cli    
c0014ffe:	c6 05 44 95 02 c0 01 	mov    BYTE PTR ds:0xc0029544,0x1
c0015005:	53                   	push   ebx
c0015006:	68 f5 64 02 c0       	push   0xc00264f5
c001500b:	e8 2f 80 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0015010:	83 c4 0c             	add    esp,0xc
c0015013:	6a 01                	push   0x1
c0015015:	6a 0f                	push   0xf
c0015017:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001501d:	e8 8a 5c ff ff       	call   c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015022:	59                   	pop    ecx
c0015023:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015029:	e8 a0 61 ff ff       	call   c000b1ce <VgaText::clearScreen()>
c001502e:	58                   	pop    eax
c001502f:	5a                   	pop    edx
c0015030:	68 4c 65 02 c0       	push   0xc002654c
c0015035:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001503b:	e8 ac 5c ff ff       	call   c000acec <VgaText::setTitle(char*)>
c0015040:	83 c4 0c             	add    esp,0xc
c0015043:	6a 01                	push   0x1
c0015045:	6a 0f                	push   0xf
c0015047:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001504d:	e8 5a 5c ff ff       	call   c000acac <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015052:	59                   	pop    ecx
c0015053:	58                   	pop    eax
c0015054:	68 0e 65 02 c0       	push   0xc002650e
c0015059:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001505f:	e8 f6 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015064:	58                   	pop    eax
c0015065:	5a                   	pop    edx
c0015066:	68 98 65 02 c0       	push   0xc0026598
c001506b:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015071:	e8 e4 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015076:	59                   	pop    ecx
c0015077:	58                   	pop    eax
c0015078:	68 2a 65 02 c0       	push   0xc002652a
c001507d:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015083:	e8 d2 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015088:	58                   	pop    eax
c0015089:	5a                   	pop    edx
c001508a:	53                   	push   ebx
c001508b:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015091:	e8 c4 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015096:	59                   	pop    ecx
c0015097:	5b                   	pop    ebx
c0015098:	68 4a 65 02 c0       	push   0xc002654a
c001509d:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00150a3:	e8 b2 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150a8:	58                   	pop    eax
c00150a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150ad:	e8 17 31 00 00       	call   c00181c9 <Thr::getDriverNameFromAddress(unsigned long)>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	85 c0                	test   eax,eax
c00150b7:	0f 84 36 01 00 00    	je     c00151f3 <Krnl::panic(char const*)+0x1fe>
c00150bd:	83 ec 08             	sub    esp,0x8
c00150c0:	89 c3                	mov    ebx,eax
c00150c2:	68 d4 65 02 c0       	push   0xc00265d4
c00150c7:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00150cd:	e8 88 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150d2:	59                   	pop    ecx
c00150d3:	58                   	pop    eax
c00150d4:	68 2a 65 02 c0       	push   0xc002652a
c00150d9:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00150df:	e8 76 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150e4:	58                   	pop    eax
c00150e5:	5a                   	pop    edx
c00150e6:	53                   	push   ebx
c00150e7:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00150ed:	e8 68 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00150f2:	83 c4 10             	add    esp,0x10
c00150f5:	83 ec 08             	sub    esp,0x8
c00150f8:	68 49 65 02 c0       	push   0xc0026549
c00150fd:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015103:	e8 52 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015108:	58                   	pop    eax
c0015109:	5a                   	pop    edx
c001510a:	68 2c 66 02 c0       	push   0xc002662c
c001510f:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015115:	e8 40 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001511a:	59                   	pop    ecx
c001511b:	5b                   	pop    ebx
c001511c:	68 6c 66 02 c0       	push   0xc002666c
c0015121:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015127:	e8 2e 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001512c:	58                   	pop    eax
c001512d:	5a                   	pop    edx
c001512e:	68 35 65 02 c0       	push   0xc0026535
c0015133:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015139:	e8 1c 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c001513e:	59                   	pop    ecx
c001513f:	5b                   	pop    ebx
c0015140:	68 b0 66 02 c0       	push   0xc00266b0
c0015145:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001514b:	e8 0a 62 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015150:	58                   	pop    eax
c0015151:	5a                   	pop    edx
c0015152:	68 4d 65 02 c0       	push   0xc002654d
c0015157:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001515d:	e8 f8 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015162:	0f 20 c0             	mov    eax,cr0
c0015165:	59                   	pop    ecx
c0015166:	5b                   	pop    ebx
c0015167:	50                   	push   eax
c0015168:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001516e:	e8 a1 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c0015173:	58                   	pop    eax
c0015174:	5a                   	pop    edx
c0015175:	68 57 65 02 c0       	push   0xc0026557
c001517a:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015180:	e8 d5 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015185:	0f 20 d0             	mov    eax,cr2
c0015188:	59                   	pop    ecx
c0015189:	5b                   	pop    ebx
c001518a:	50                   	push   eax
c001518b:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015191:	e8 7e 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c0015196:	58                   	pop    eax
c0015197:	5a                   	pop    edx
c0015198:	68 61 65 02 c0       	push   0xc0026561
c001519d:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00151a3:	e8 b2 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00151a8:	0f 20 d8             	mov    eax,cr3
c00151ab:	59                   	pop    ecx
c00151ac:	5b                   	pop    ebx
c00151ad:	50                   	push   eax
c00151ae:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00151b4:	e8 5b 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c00151b9:	58                   	pop    eax
c00151ba:	5a                   	pop    edx
c00151bb:	68 74 65 02 c0       	push   0xc0026574
c00151c0:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00151c6:	e8 8f 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00151cb:	0f 20 e0             	mov    eax,cr4
c00151ce:	59                   	pop    ecx
c00151cf:	5b                   	pop    ebx
c00151d0:	50                   	push   eax
c00151d1:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00151d7:	e8 38 61 ff ff       	call   c000b314 <VgaText::putx(unsigned int)>
c00151dc:	58                   	pop    eax
c00151dd:	5a                   	pop    edx
c00151de:	68 7e 65 02 c0       	push   0xc002657e
c00151e3:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c00151e9:	e8 6c 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	eb fe                	jmp    c00151f1 <Krnl::panic(char const*)+0x1fc>
c00151f3:	51                   	push   ecx
c00151f4:	51                   	push   ecx
c00151f5:	68 00 66 02 c0       	push   0xc0026600
c00151fa:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015200:	e8 55 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015205:	5b                   	pop    ebx
c0015206:	58                   	pop    eax
c0015207:	68 2a 65 02 c0       	push   0xc002652a
c001520c:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c0015212:	e8 43 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015217:	58                   	pop    eax
c0015218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521d:	5a                   	pop    edx
c001521e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015221:	83 c0 0c             	add    eax,0xc
c0015224:	50                   	push   eax
c0015225:	ff 35 e4 8a 02 c0    	push   DWORD PTR ds:0xc0028ae4
c001522b:	e8 2a 61 ff ff       	call   c000b35a <VgaText::puts(char const*)>
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	e9 bd fe ff ff       	jmp    c00150f5 <Krnl::panic(char const*)+0x100>

c0015238 <Krnl::powerThread(void*)>:
c0015238:	53                   	push   ebx
c0015239:	83 ec 08             	sub    esp,0x8
c001523c:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0015241:	48                   	dec    eax
c0015242:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0015247:	75 01                	jne    c001524a <Krnl::powerThread(void*)+0x12>
c0015249:	fb                   	sti    
c001524a:	52                   	push   edx
c001524b:	52                   	push   edx
c001524c:	ff 35 a4 95 02 c0    	push   DWORD PTR ds:0xc00295a4
c0015252:	68 d6 66 02 c0       	push   0xc00266d6
c0015257:	e8 e3 7d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001525c:	59                   	pop    ecx
c001525d:	8b 1d 94 95 02 c0    	mov    ebx,DWORD PTR ds:0xc0029594
c0015263:	58                   	pop    eax
c0015264:	c6 05 60 95 02 c0 00 	mov    BYTE PTR ds:0xc0029560,0x0
c001526b:	53                   	push   ebx
c001526c:	68 e0 66 02 c0       	push   0xc00266e0
c0015271:	e8 c9 7d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0015276:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001527d:	e8 aa 3d 00 00       	call   c001902c <sleep(unsigned int)>
c0015282:	a1 a4 95 02 c0       	mov    eax,ds:0xc00295a4
c0015287:	83 c4 10             	add    esp,0x10
c001528a:	83 c0 0a             	add    eax,0xa
c001528d:	85 db                	test   ebx,ebx
c001528f:	a3 a4 95 02 c0       	mov    ds:0xc00295a4,eax
c0015294:	74 b4                	je     c001524a <Krnl::powerThread(void*)+0x12>
c0015296:	39 d8                	cmp    eax,ebx
c0015298:	7e b0                	jle    c001524a <Krnl::powerThread(void*)+0x12>
c001529a:	83 ec 0c             	sub    esp,0xc
c001529d:	68 f8 66 02 c0       	push   0xc00266f8
c00152a2:	e8 98 7d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00152a7:	58                   	pop    eax
c00152a8:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c00152ae:	e8 47 40 ff ff       	call   c00092fa <Computer::sleep()>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	eb 92                	jmp    c001524a <Krnl::powerThread(void*)+0x12>

c00152b8 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00152b8:	57                   	push   edi
c00152b9:	b9 09 00 00 00       	mov    ecx,0x9
c00152be:	56                   	push   esi
c00152bf:	bf 80 95 02 c0       	mov    edi,0xc0029580
c00152c4:	fc                   	cld    
c00152c5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00152c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00152cb:	5e                   	pop    esi
c00152cc:	5f                   	pop    edi
c00152cd:	c3                   	ret    

c00152ce <Krnl::userIOReceived()>:
c00152ce:	c7 05 a4 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295a4,0x0
c00152d8:	c3                   	ret    

c00152d9 <Krnl::handlePowerButton()>:
c00152d9:	83 ec 0c             	sub    esp,0xc
c00152dc:	a1 80 95 02 c0       	mov    eax,ds:0xc0029580
c00152e1:	83 f8 02             	cmp    eax,0x2
c00152e4:	75 10                	jne    c00152f6 <Krnl::handlePowerButton()+0x1d>
c00152e6:	83 ec 0c             	sub    esp,0xc
c00152e9:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c00152ef:	e8 d6 3f ff ff       	call   c00092ca <Computer::shutdown()>
c00152f4:	eb 11                	jmp    c0015307 <Krnl::handlePowerButton()+0x2e>
c00152f6:	48                   	dec    eax
c00152f7:	75 11                	jne    c001530a <Krnl::handlePowerButton()+0x31>
c00152f9:	83 ec 0c             	sub    esp,0xc
c00152fc:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0015302:	e8 f3 3f ff ff       	call   c00092fa <Computer::sleep()>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	83 c4 0c             	add    esp,0xc
c001530d:	c3                   	ret    

c001530e <Krnl::handleSleepButton()>:
c001530e:	83 ec 0c             	sub    esp,0xc
c0015311:	a1 84 95 02 c0       	mov    eax,ds:0xc0029584
c0015316:	83 f8 02             	cmp    eax,0x2
c0015319:	75 10                	jne    c001532b <Krnl::handleSleepButton()+0x1d>
c001531b:	83 ec 0c             	sub    esp,0xc
c001531e:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0015324:	e8 a1 3f ff ff       	call   c00092ca <Computer::shutdown()>
c0015329:	eb 11                	jmp    c001533c <Krnl::handleSleepButton()+0x2e>
c001532b:	48                   	dec    eax
c001532c:	75 11                	jne    c001533f <Krnl::handleSleepButton()+0x31>
c001532e:	83 ec 0c             	sub    esp,0xc
c0015331:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0015337:	e8 be 3f ff ff       	call   c00092fa <Computer::sleep()>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	83 c4 0c             	add    esp,0xc
c0015342:	c3                   	ret    

c0015343 <Krnl::setupPowerManager()>:
c0015343:	83 ec 0c             	sub    esp,0xc
c0015346:	c7 05 a4 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00295a4,0x0
c0015350:	68 f0 00 00 00       	push   0xf0
c0015355:	c6 05 60 95 02 c0 00 	mov    BYTE PTR ds:0xc0029560,0x0
c001535c:	6a 00                	push   0x0
c001535e:	68 38 52 01 c0       	push   0xc0015238
c0015363:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0015369:	e8 9a 37 00 00       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c001536e:	c7 05 80 95 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029580,0x2
c0015378:	c7 05 84 95 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029584,0x1
c0015382:	c7 05 88 95 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029588,0x3
c001538c:	c7 05 8c 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002958c,0x0
c0015396:	c7 05 98 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029598,0x0
c00153a0:	c7 05 90 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029590,0x0
c00153aa:	c7 05 9c 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002959c,0x0
c00153b4:	c7 05 94 95 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029594,0x3c
c00153be:	c7 05 a0 95 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00295a0,0x3c
c00153c8:	83 c4 1c             	add    esp,0x1c
c00153cb:	c3                   	ret    

c00153cc <Net::switchEndian16(unsigned short)>:
c00153cc:	83 ec 04             	sub    esp,0x4
c00153cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00153d7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00153db:	c1 f8 08             	sar    eax,0x8
c00153de:	89 c2                	mov    edx,eax
c00153e0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00153e4:	c1 e0 08             	shl    eax,0x8
c00153e7:	09 d0                	or     eax,edx
c00153e9:	83 c4 04             	add    esp,0x4
c00153ec:	c3                   	ret    
c00153ed:	8d 76 00             	lea    esi,[esi+0x0]

c00153f0 <Net::switchEndian32(unsigned int)>:
c00153f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153f4:	c1 e8 18             	shr    eax,0x18
c00153f7:	89 c2                	mov    edx,eax
c00153f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00153fd:	c1 e0 08             	shl    eax,0x8
c0015400:	25 00 00 ff 00       	and    eax,0xff0000
c0015405:	09 c2                	or     edx,eax
c0015407:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001540b:	c1 e8 08             	shr    eax,0x8
c001540e:	25 00 ff 00 00       	and    eax,0xff00
c0015413:	09 c2                	or     edx,eax
c0015415:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015419:	c1 e0 18             	shl    eax,0x18
c001541c:	09 d0                	or     eax,edx
c001541e:	c3                   	ret    
c001541f:	90                   	nop

c0015420 <Net::crc32Calc(unsigned char*, int)>:
c0015420:	83 ec 10             	sub    esp,0x10
c0015423:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0015428:	75 0a                	jne    c0015434 <Net::crc32Calc(unsigned char*, int)+0x14>
c001542a:	b8 00 00 00 00       	mov    eax,0x0
c001542f:	e9 8c 00 00 00       	jmp    c00154c0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015434:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015439:	7f 09                	jg     c0015444 <Net::crc32Calc(unsigned char*, int)+0x24>
c001543b:	b8 00 00 00 00       	mov    eax,0x0
c0015440:	eb 7e                	jmp    c00154c0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0015442:	66 90                	xchg   ax,ax
c0015444:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001544c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015458:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001545c:	7d 5a                	jge    c00154b8 <Net::crc32Calc(unsigned char*, int)+0x98>
c001545e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015462:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015466:	01 d0                	add    eax,edx
c0015468:	8a 00                	mov    al,BYTE PTR [eax]
c001546a:	0f b6 c0             	movzx  eax,al
c001546d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0015471:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015479:	8d 76 00             	lea    esi,[esi+0x0]
c001547c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0015481:	7f 2d                	jg     c00154b0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0015483:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015487:	83 e0 01             	and    eax,0x1
c001548a:	74 10                	je     c001549c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001548c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015490:	d1 e8                	shr    eax,1
c0015492:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0015497:	eb 0b                	jmp    c00154a4 <Net::crc32Calc(unsigned char*, int)+0x84>
c0015499:	8d 76 00             	lea    esi,[esi+0x0]
c001549c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154a0:	d1 e8                	shr    eax,1
c00154a2:	66 90                	xchg   ax,ax
c00154a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00154ac:	eb ce                	jmp    c001547c <Net::crc32Calc(unsigned char*, int)+0x5c>
c00154ae:	66 90                	xchg   ax,ax
c00154b0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00154b4:	eb 9e                	jmp    c0015454 <Net::crc32Calc(unsigned char*, int)+0x34>
c00154b6:	66 90                	xchg   ax,ax
c00154b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154bc:	f7 d0                	not    eax
c00154be:	66 90                	xchg   ax,ax
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	c3                   	ret    

c00154c4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c00154c4:	57                   	push   edi
c00154c5:	56                   	push   esi
c00154c6:	53                   	push   ebx
c00154c7:	83 ec 60             	sub    esp,0x60
c00154ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154d1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00154d5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00154dd:	8d 76 00             	lea    esi,[esi+0x0]
c00154e0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00154e5:	7f 1d                	jg     c0015504 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00154e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00154ee:	8d 50 01             	lea    edx,[eax+0x1]
c00154f1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00154f8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00154fb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00154ff:	eb df                	jmp    c00154e0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0015501:	8d 76 00             	lea    esi,[esi+0x0]
c0015504:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001550b:	8d 50 01             	lea    edx,[eax+0x1]
c001550e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015515:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015518:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001551f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015523:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015527:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001552b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0015533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001553b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001553f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015543:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015547:	89 c6                	mov    esi,eax
c0015549:	89 d7                	mov    edi,edx
c001554b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001554d:	89 c8                	mov    eax,ecx
c001554f:	89 fa                	mov    edx,edi
c0015551:	89 f3                	mov    ebx,esi
c0015553:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001555b:	89 04 24             	mov    DWORD PTR [esp],eax
c001555e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015566:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001556d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015571:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015575:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015579:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015581:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015585:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015589:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001558d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015591:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015595:	89 c6                	mov    esi,eax
c0015597:	89 d7                	mov    edi,edx
c0015599:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001559b:	89 c8                	mov    eax,ecx
c001559d:	89 fa                	mov    edx,edi
c001559f:	89 f3                	mov    ebx,esi
c00155a1:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00155a5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00155a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00155ad:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00155b5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00155bc:	0f b7 c0             	movzx  eax,ax
c00155bf:	c1 f8 08             	sar    eax,0x8
c00155c2:	89 c1                	mov    ecx,eax
c00155c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155cb:	8d 50 01             	lea    edx,[eax+0x1]
c00155ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00155d5:	88 ca                	mov    dl,cl
c00155d7:	88 10                	mov    BYTE PTR [eax],dl
c00155d9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00155e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00155e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00155ea:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00155f1:	88 10                	mov    BYTE PTR [eax],dl
c00155f3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00155f7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00155fb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0015602:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015606:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001560a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001560e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015612:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015616:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001561a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001561e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015622:	89 c6                	mov    esi,eax
c0015624:	89 d7                	mov    edi,edx
c0015626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015628:	89 c8                	mov    eax,ecx
c001562a:	89 fa                	mov    edx,edi
c001562c:	89 f3                	mov    ebx,esi
c001562e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015632:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015636:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001563a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001563e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015645:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001564c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015650:	50                   	push   eax
c0015651:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015655:	e8 c6 fd ff ff       	call   c0015420 <Net::crc32Calc(unsigned char*, int)>
c001565a:	83 c4 08             	add    esp,0x8
c001565d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015661:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015665:	c1 e8 18             	shr    eax,0x18
c0015668:	89 c1                	mov    ecx,eax
c001566a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015671:	8d 50 01             	lea    edx,[eax+0x1]
c0015674:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001567b:	88 ca                	mov    dl,cl
c001567d:	88 10                	mov    BYTE PTR [eax],dl
c001567f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015683:	c1 e8 10             	shr    eax,0x10
c0015686:	89 c1                	mov    ecx,eax
c0015688:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001568f:	8d 50 01             	lea    edx,[eax+0x1]
c0015692:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015699:	88 ca                	mov    dl,cl
c001569b:	88 10                	mov    BYTE PTR [eax],dl
c001569d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00156a1:	c1 e8 08             	shr    eax,0x8
c00156a4:	89 c1                	mov    ecx,eax
c00156a6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156ad:	8d 50 01             	lea    edx,[eax+0x1]
c00156b0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156b7:	88 ca                	mov    dl,cl
c00156b9:	88 10                	mov    BYTE PTR [eax],dl
c00156bb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00156c2:	8d 50 01             	lea    edx,[eax+0x1]
c00156c5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00156cc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00156d0:	88 10                	mov    BYTE PTR [eax],dl
c00156d2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00156d6:	83 c4 60             	add    esp,0x60
c00156d9:	5b                   	pop    ebx
c00156da:	5e                   	pop    esi
c00156db:	5f                   	pop    edi
c00156dc:	c3                   	ret    
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]

c00156e0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00156e0:	57                   	push   edi
c00156e1:	56                   	push   esi
c00156e2:	53                   	push   ebx
c00156e3:	83 ec 70             	sub    esp,0x70
c00156e6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00156ed:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00156f1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00156f9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015700:	83 c0 0e             	add    eax,0xe
c0015703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015707:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001570e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015712:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001571a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001571e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015726:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001572a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001572e:	89 c6                	mov    esi,eax
c0015730:	89 d7                	mov    edi,edx
c0015732:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015734:	89 c8                	mov    eax,ecx
c0015736:	89 fa                	mov    edx,edi
c0015738:	89 f3                	mov    ebx,esi
c001573a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001573e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015742:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015746:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001574e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015755:	83 c0 08             	add    eax,0x8
c0015758:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001575c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015763:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015767:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001576f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015773:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015777:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001577b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001577f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015783:	89 c6                	mov    esi,eax
c0015785:	89 d7                	mov    edi,edx
c0015787:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015789:	89 c8                	mov    eax,ecx
c001578b:	89 fa                	mov    edx,edi
c001578d:	89 f3                	mov    ebx,esi
c001578f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015793:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015797:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001579b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00157a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157aa:	8d 50 01             	lea    edx,[eax+0x1]
c00157ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00157b4:	8a 00                	mov    al,BYTE PTR [eax]
c00157b6:	0f b6 c0             	movzx  eax,al
c00157b9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00157be:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00157c5:	8d 50 01             	lea    edx,[eax+0x1]
c00157c8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00157cf:	8a 00                	mov    al,BYTE PTR [eax]
c00157d1:	0f b6 c0             	movzx  eax,al
c00157d4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00157d9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00157de:	c1 e0 08             	shl    eax,0x8
c00157e1:	89 c2                	mov    edx,eax
c00157e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00157e7:	09 d0                	or     eax,edx
c00157e9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00157f0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00157f4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00157fc:	75 46                	jne    c0015844 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00157fe:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015805:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015808:	66 3d dc 05          	cmp    ax,0x5dc
c001580c:	77 16                	ja     c0015824 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001580e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015815:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015818:	0f b7 c0             	movzx  eax,ax
c001581b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015822:	eb 20                	jmp    c0015844 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	68 08 67 02 c0       	push   0xc0026708
c001582c:	e8 0e 78 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0015831:	83 c4 10             	add    esp,0x10
c0015834:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001583b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001583f:	e9 18 01 00 00       	jmp    c001595c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015844:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001584b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015852:	8b 12                	mov    edx,DWORD PTR [edx]
c0015854:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015858:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001585f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015863:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015867:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001586b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001586f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015873:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015877:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001587b:	89 c6                	mov    esi,eax
c001587d:	89 d7                	mov    edi,edx
c001587f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015881:	89 c8                	mov    eax,ecx
c0015883:	89 fa                	mov    edx,edi
c0015885:	89 f3                	mov    ebx,esi
c0015887:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001588b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001588f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015892:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015899:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00158a0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158a7:	8d 50 01             	lea    edx,[eax+0x1]
c00158aa:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158b1:	8a 00                	mov    al,BYTE PTR [eax]
c00158b3:	0f b6 c0             	movzx  eax,al
c00158b6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00158ba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158c1:	8d 50 01             	lea    edx,[eax+0x1]
c00158c4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158cb:	8a 00                	mov    al,BYTE PTR [eax]
c00158cd:	0f b6 c0             	movzx  eax,al
c00158d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00158d4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158db:	8d 50 01             	lea    edx,[eax+0x1]
c00158de:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158e5:	8a 00                	mov    al,BYTE PTR [eax]
c00158e7:	0f b6 c0             	movzx  eax,al
c00158ea:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00158ee:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00158f5:	8d 50 01             	lea    edx,[eax+0x1]
c00158f8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00158ff:	8a 00                	mov    al,BYTE PTR [eax]
c0015901:	0f b6 c0             	movzx  eax,al
c0015904:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015908:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001590c:	c1 e0 18             	shl    eax,0x18
c001590f:	89 c2                	mov    edx,eax
c0015911:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015915:	c1 e0 10             	shl    eax,0x10
c0015918:	09 c2                	or     edx,eax
c001591a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001591e:	c1 e0 08             	shl    eax,0x8
c0015921:	09 d0                	or     eax,edx
c0015923:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015927:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001592b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015932:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015936:	83 e8 04             	sub    eax,0x4
c0015939:	83 ec 08             	sub    esp,0x8
c001593c:	50                   	push   eax
c001593d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015941:	e8 da fa ff ff       	call   c0015420 <Net::crc32Calc(unsigned char*, int)>
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001594d:	0f 94 c2             	sete   dl
c0015950:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015957:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001595a:	90                   	nop
c001595b:	90                   	nop
c001595c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015963:	83 c4 70             	add    esp,0x70
c0015966:	5b                   	pop    ebx
c0015967:	5e                   	pop    esi
c0015968:	5f                   	pop    edi
c0015969:	c2 04 00             	ret    0x4

c001596c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001596c:	55                   	push   ebp
c001596d:	57                   	push   edi
c001596e:	56                   	push   esi
c001596f:	53                   	push   ebx
c0015970:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015976:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001597d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001597f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015982:	80 fb 40             	cmp    bl,0x40
c0015985:	75 1b                	jne    c00159a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015987:	8a 16                	mov    dl,BYTE PTR [esi]
c0015989:	84 d2                	test   dl,dl
c001598b:	0f 84 f1 00 00 00    	je     c0015a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015991:	8d 46 01             	lea    eax,[esi+0x1]
c0015994:	80 fa 3a             	cmp    dl,0x3a
c0015997:	74 04                	je     c001599d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015999:	89 c6                	mov    esi,eax
c001599b:	eb ea                	jmp    c0015987 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001599d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00159a0:	89 c6                	mov    esi,eax
c00159a2:	50                   	push   eax
c00159a3:	6a 40                	push   0x40
c00159a5:	6a 00                	push   0x0
c00159a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00159ab:	50                   	push   eax
c00159ac:	e8 cb ac fe ff       	call   c000067c <memset>
c00159b1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00159b8:	31 c0                	xor    eax,eax
c00159ba:	83 c4 10             	add    esp,0x10
c00159bd:	8a 0f                	mov    cl,BYTE PTR [edi]
c00159bf:	84 c9                	test   cl,cl
c00159c1:	0f 84 bb 00 00 00    	je     c0015a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00159c7:	3d c7 00 00 00       	cmp    eax,0xc7
c00159cc:	0f 8f b0 00 00 00    	jg     c0015a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00159d2:	80 f9 0a             	cmp    cl,0xa
c00159d5:	0f 85 98 00 00 00    	jne    c0015a73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00159db:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00159e0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00159e4:	a8 df                	test   al,0xdf
c00159e6:	0f 94 c1             	sete   cl
c00159e9:	3c 23                	cmp    al,0x23
c00159eb:	0f 94 c2             	sete   dl
c00159ee:	08 d1                	or     cl,dl
c00159f0:	75 4a                	jne    c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00159f2:	8d 50 f7             	lea    edx,[eax-0x9]
c00159f5:	80 fa 01             	cmp    dl,0x1
c00159f8:	76 42                	jbe    c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00159fa:	3c 5b                	cmp    al,0x5b
c00159fc:	75 42                	jne    c0015a40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00159fe:	80 fb 40             	cmp    bl,0x40
c0015a01:	75 39                	jne    c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015a0a:	52                   	push   edx
c0015a0b:	e8 88 ac fe ff       	call   c0000698 <strlen>
c0015a10:	83 c4 10             	add    esp,0x10
c0015a13:	83 f8 3f             	cmp    eax,0x3f
c0015a16:	77 6a                	ja     c0015a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a18:	50                   	push   eax
c0015a19:	50                   	push   eax
c0015a1a:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015a1e:	52                   	push   edx
c0015a1f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a23:	52                   	push   edx
c0015a24:	e8 0f ad fe ff       	call   c0000738 <strcpy>
c0015a29:	58                   	pop    eax
c0015a2a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015a2e:	52                   	push   edx
c0015a2f:	e8 64 ac fe ff       	call   c0000698 <strlen>
c0015a34:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015a39:	83 c4 10             	add    esp,0x10
c0015a3c:	31 d2                	xor    edx,edx
c0015a3e:	eb 3a                	jmp    c0015a7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015a40:	80 fb 40             	cmp    bl,0x40
c0015a43:	74 06                	je     c0015a4b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015a45:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015a49:	eb 20                	jmp    c0015a6b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015a4b:	50                   	push   eax
c0015a4c:	50                   	push   eax
c0015a4d:	55                   	push   ebp
c0015a4e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015a52:	50                   	push   eax
c0015a53:	e8 6c ad fe ff       	call   c00007c4 <strcmp>
c0015a58:	83 c4 10             	add    esp,0x10
c0015a5b:	85 c0                	test   eax,eax
c0015a5d:	75 dd                	jne    c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015a5f:	eb e4                	jmp    c0015a45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015a61:	8d 50 01             	lea    edx,[eax+0x1]
c0015a64:	80 f9 3d             	cmp    cl,0x3d
c0015a67:	74 1d                	je     c0015a86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015a69:	89 d0                	mov    eax,edx
c0015a6b:	8a 08                	mov    cl,BYTE PTR [eax]
c0015a6d:	84 c9                	test   cl,cl
c0015a6f:	75 f0                	jne    c0015a61 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015a71:	eb 0f                	jmp    c0015a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015a73:	8d 50 01             	lea    edx,[eax+0x1]
c0015a76:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015a7a:	47                   	inc    edi
c0015a7b:	89 d0                	mov    eax,edx
c0015a7d:	e9 3b ff ff ff       	jmp    c00159bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015a82:	31 c0                	xor    eax,eax
c0015a84:	eb 33                	jmp    c0015ab9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015a86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015a8a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015a8d:	50                   	push   eax
c0015a8e:	50                   	push   eax
c0015a8f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015a93:	50                   	push   eax
c0015a94:	56                   	push   esi
c0015a95:	e8 2a ad fe ff       	call   c00007c4 <strcmp>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	85 c0                	test   eax,eax
c0015a9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015aa3:	75 97                	jne    c0015a3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015aa5:	51                   	push   ecx
c0015aa6:	51                   	push   ecx
c0015aa7:	52                   	push   edx
c0015aa8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015aaf:	e8 84 ac fe ff       	call   c0000738 <strcpy>
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	b0 01                	mov    al,0x1
c0015ab9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015abf:	5b                   	pop    ebx
c0015ac0:	5e                   	pop    esi
c0015ac1:	5f                   	pop    edi
c0015ac2:	5d                   	pop    ebp
c0015ac3:	c3                   	ret    

c0015ac4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015ac4:	57                   	push   edi
c0015ac5:	56                   	push   esi
c0015ac6:	53                   	push   ebx
c0015ac7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015acd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015ad4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015adb:	53                   	push   ebx
c0015adc:	e8 b7 ab fe ff       	call   c0000698 <strlen>
c0015ae1:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ae4:	89 c7                	mov    edi,eax
c0015ae6:	e8 ad ab fe ff       	call   c0000698 <strlen>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015af2:	3d ff 00 00 00       	cmp    eax,0xff
c0015af7:	0f 87 d3 00 00 00    	ja     c0015bd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015afd:	57                   	push   edi
c0015afe:	57                   	push   edi
c0015aff:	56                   	push   esi
c0015b00:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015b04:	56                   	push   esi
c0015b05:	e8 2e ac fe ff       	call   c0000738 <strcpy>
c0015b0a:	58                   	pop    eax
c0015b0b:	5a                   	pop    edx
c0015b0c:	68 44 6b 02 c0       	push   0xc0026b44
c0015b11:	56                   	push   esi
c0015b12:	e8 61 ad fe ff       	call   c0000878 <strcat>
c0015b17:	59                   	pop    ecx
c0015b18:	5f                   	pop    edi
c0015b19:	53                   	push   ebx
c0015b1a:	56                   	push   esi
c0015b1b:	e8 58 ad fe ff       	call   c0000878 <strcat>
c0015b20:	58                   	pop    eax
c0015b21:	5a                   	pop    edx
c0015b22:	68 54 67 02 c0       	push   0xc0026754
c0015b27:	56                   	push   esi
c0015b28:	e8 4b ad fe ff       	call   c0000878 <strcat>
c0015b2d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015b34:	e8 1a 42 ff ff       	call   c0009d53 <malloc>
c0015b39:	83 c4 0c             	add    esp,0xc
c0015b3c:	89 c3                	mov    ebx,eax
c0015b3e:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0015b44:	56                   	push   esi
c0015b45:	50                   	push   eax
c0015b46:	e8 5f 7a ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0015b4b:	83 c4 10             	add    esp,0x10
c0015b4e:	85 db                	test   ebx,ebx
c0015b50:	74 7e                	je     c0015bd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015b52:	51                   	push   ecx
c0015b53:	51                   	push   ecx
c0015b54:	6a 01                	push   0x1
c0015b56:	53                   	push   ebx
c0015b57:	e8 28 7b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	85 c0                	test   eax,eax
c0015b61:	74 08                	je     c0015b6b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015b63:	83 ec 0c             	sub    esp,0xc
c0015b66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b68:	53                   	push   ebx
c0015b69:	eb 5f                	jmp    c0015bca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015b6b:	52                   	push   edx
c0015b6c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015b70:	50                   	push   eax
c0015b71:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015b75:	50                   	push   eax
c0015b76:	53                   	push   ebx
c0015b77:	e8 b4 7d ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c0015b7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	89 c1                	mov    ecx,eax
c0015b85:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015b89:	74 31                	je     c0015bbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015b8b:	83 ec 0c             	sub    esp,0xc
c0015b8e:	50                   	push   eax
c0015b8f:	e8 bf 41 ff ff       	call   c0009d53 <malloc>
c0015b94:	89 c6                	mov    esi,eax
c0015b96:	58                   	pop    eax
c0015b97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015b9d:	52                   	push   edx
c0015b9e:	56                   	push   esi
c0015b9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ba3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ba7:	53                   	push   ebx
c0015ba8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bab:	83 c4 20             	add    esp,0x20
c0015bae:	85 c0                	test   eax,eax
c0015bb0:	75 0a                	jne    c0015bbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015bba:	74 18                	je     c0015bd4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015bbc:	83 ec 0c             	sub    esp,0xc
c0015bbf:	53                   	push   ebx
c0015bc0:	e8 1d 7b ff ff       	call   c000d6e2 <File::close()>
c0015bc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	31 c0                	xor    eax,eax
c0015bd2:	eb 3b                	jmp    c0015c0f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015bd4:	83 ec 0c             	sub    esp,0xc
c0015bd7:	53                   	push   ebx
c0015bd8:	e8 05 7b ff ff       	call   c000d6e2 <File::close()>
c0015bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bdf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015be2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015be5:	83 c4 0c             	add    esp,0xc
c0015be8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015bef:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015bf6:	56                   	push   esi
c0015bf7:	e8 70 fd ff ff       	call   c001596c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015bfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0015bff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015c03:	e8 5b 41 ff ff       	call   c0009d63 <free>
c0015c08:	83 c4 10             	add    esp,0x10
c0015c0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015c0f:	81 c4 20 01 00 00    	add    esp,0x120
c0015c15:	5b                   	pop    ebx
c0015c16:	5e                   	pop    esi
c0015c17:	5f                   	pop    edi
c0015c18:	c3                   	ret    

c0015c19 <Reg::getLine(char*, char*, char*)>:
c0015c19:	57                   	push   edi
c0015c1a:	56                   	push   esi
c0015c1b:	53                   	push   ebx
c0015c1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c28:	57                   	push   edi
c0015c29:	56                   	push   esi
c0015c2a:	53                   	push   ebx
c0015c2b:	68 59 67 02 c0       	push   0xc0026759
c0015c30:	e8 8f fe ff ff       	call   c0015ac4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015c35:	83 c4 10             	add    esp,0x10
c0015c38:	84 c0                	test   al,al
c0015c3a:	75 10                	jne    c0015c4c <Reg::getLine(char*, char*, char*)+0x33>
c0015c3c:	57                   	push   edi
c0015c3d:	56                   	push   esi
c0015c3e:	53                   	push   ebx
c0015c3f:	68 7e 67 02 c0       	push   0xc002677e
c0015c44:	e8 7b fe ff ff       	call   c0015ac4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	5b                   	pop    ebx
c0015c4d:	5e                   	pop    esi
c0015c4e:	5f                   	pop    edi
c0015c4f:	c3                   	ret    

c0015c50 <Reg::readInt(char*, char*, int*)>:
c0015c50:	55                   	push   ebp
c0015c51:	57                   	push   edi
c0015c52:	56                   	push   esi
c0015c53:	53                   	push   ebx
c0015c54:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015c5a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015c5e:	57                   	push   edi
c0015c5f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015c66:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015c6d:	e8 a7 ff ff ff       	call   c0015c19 <Reg::getLine(char*, char*, char*)>
c0015c72:	83 c4 10             	add    esp,0x10
c0015c75:	84 c0                	test   al,al
c0015c77:	0f 84 b3 00 00 00    	je     c0015d30 <Reg::readInt(char*, char*, int*)+0xe0>
c0015c7d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015c81:	80 fa 2b             	cmp    dl,0x2b
c0015c84:	74 0c                	je     c0015c92 <Reg::readInt(char*, char*, int*)+0x42>
c0015c86:	80 fa 2d             	cmp    dl,0x2d
c0015c89:	75 0e                	jne    c0015c99 <Reg::readInt(char*, char*, int*)+0x49>
c0015c8b:	ba 01 00 00 00       	mov    edx,0x1
c0015c90:	eb 0b                	jmp    c0015c9d <Reg::readInt(char*, char*, int*)+0x4d>
c0015c92:	ba 01 00 00 00       	mov    edx,0x1
c0015c97:	eb 02                	jmp    c0015c9b <Reg::readInt(char*, char*, int*)+0x4b>
c0015c99:	31 d2                	xor    edx,edx
c0015c9b:	31 c0                	xor    eax,eax
c0015c9d:	be 0a 00 00 00       	mov    esi,0xa
c0015ca2:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015ca7:	75 20                	jne    c0015cc9 <Reg::readInt(char*, char*, int*)+0x79>
c0015ca9:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015cad:	80 f9 78             	cmp    cl,0x78
c0015cb0:	75 0a                	jne    c0015cbc <Reg::readInt(char*, char*, int*)+0x6c>
c0015cb2:	83 c2 02             	add    edx,0x2
c0015cb5:	be 10 00 00 00       	mov    esi,0x10
c0015cba:	eb 0d                	jmp    c0015cc9 <Reg::readInt(char*, char*, int*)+0x79>
c0015cbc:	80 f9 62             	cmp    cl,0x62
c0015cbf:	75 08                	jne    c0015cc9 <Reg::readInt(char*, char*, int*)+0x79>
c0015cc1:	83 c2 02             	add    edx,0x2
c0015cc4:	be 02 00 00 00       	mov    esi,0x2
c0015cc9:	01 d7                	add    edi,edx
c0015ccb:	31 d2                	xor    edx,edx
c0015ccd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015ccf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015cd3:	80 fb 0d             	cmp    bl,0xd
c0015cd6:	0f 94 c3             	sete   bl
c0015cd9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015cde:	0f 94 c1             	sete   cl
c0015ce1:	08 cb                	or     bl,cl
c0015ce3:	75 3a                	jne    c0015d1f <Reg::readInt(char*, char*, int*)+0xcf>
c0015ce5:	0f af d6             	imul   edx,esi
c0015ce8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015ced:	83 fe 10             	cmp    esi,0x10
c0015cf0:	75 26                	jne    c0015d18 <Reg::readInt(char*, char*, int*)+0xc8>
c0015cf2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015cf6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015cf9:	89 e9                	mov    ecx,ebp
c0015cfb:	80 f9 05             	cmp    cl,0x5
c0015cfe:	77 06                	ja     c0015d06 <Reg::readInt(char*, char*, int*)+0xb6>
c0015d00:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015d04:	eb 16                	jmp    c0015d1c <Reg::readInt(char*, char*, int*)+0xcc>
c0015d06:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015d0a:	83 e9 61             	sub    ecx,0x61
c0015d0d:	80 f9 05             	cmp    cl,0x5
c0015d10:	77 06                	ja     c0015d18 <Reg::readInt(char*, char*, int*)+0xc8>
c0015d12:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015d16:	eb 04                	jmp    c0015d1c <Reg::readInt(char*, char*, int*)+0xcc>
c0015d18:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015d1c:	47                   	inc    edi
c0015d1d:	eb ae                	jmp    c0015ccd <Reg::readInt(char*, char*, int*)+0x7d>
c0015d1f:	84 c0                	test   al,al
c0015d21:	74 02                	je     c0015d25 <Reg::readInt(char*, char*, int*)+0xd5>
c0015d23:	f7 da                	neg    edx
c0015d25:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015d2c:	89 10                	mov    DWORD PTR [eax],edx
c0015d2e:	88 d8                	mov    al,bl
c0015d30:	81 c4 ec 00 00 00    	add    esp,0xec
c0015d36:	5b                   	pop    ebx
c0015d37:	5e                   	pop    esi
c0015d38:	5f                   	pop    edi
c0015d39:	5d                   	pop    ebp
c0015d3a:	c3                   	ret    

c0015d3b <Reg::readString(char*, char*, char*, int)>:
c0015d3b:	57                   	push   edi
c0015d3c:	56                   	push   esi
c0015d3d:	53                   	push   ebx
c0015d3e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015d44:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015d4b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015d4f:	57                   	push   edi
c0015d50:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015d57:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015d5e:	e8 b6 fe ff ff       	call   c0015c19 <Reg::getLine(char*, char*, char*)>
c0015d63:	83 c4 10             	add    esp,0x10
c0015d66:	89 c6                	mov    esi,eax
c0015d68:	84 c0                	test   al,al
c0015d6a:	74 44                	je     c0015db0 <Reg::readString(char*, char*, char*, int)+0x75>
c0015d6c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015d73:	31 c0                	xor    eax,eax
c0015d75:	4a                   	dec    edx
c0015d76:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015d79:	84 c9                	test   cl,cl
c0015d7b:	74 0f                	je     c0015d8c <Reg::readString(char*, char*, char*, int)+0x51>
c0015d7d:	39 c2                	cmp    edx,eax
c0015d7f:	7e 0b                	jle    c0015d8c <Reg::readString(char*, char*, char*, int)+0x51>
c0015d81:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015d84:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015d89:	40                   	inc    eax
c0015d8a:	eb ea                	jmp    c0015d76 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	53                   	push   ebx
c0015d90:	e8 03 a9 fe ff       	call   c0000698 <strlen>
c0015d95:	83 c4 10             	add    esp,0x10
c0015d98:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015d9d:	75 11                	jne    c0015db0 <Reg::readString(char*, char*, char*, int)+0x75>
c0015d9f:	83 ec 0c             	sub    esp,0xc
c0015da2:	53                   	push   ebx
c0015da3:	e8 f0 a8 fe ff       	call   c0000698 <strlen>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015db0:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015db6:	89 f0                	mov    eax,esi
c0015db8:	5b                   	pop    ebx
c0015db9:	5e                   	pop    esi
c0015dba:	5f                   	pop    edi
c0015dbb:	c3                   	ret    

c0015dbc <Reg::readBool(char*, char*, bool*)>:
c0015dbc:	83 ec 20             	sub    esp,0x20
c0015dbf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015dc3:	50                   	push   eax
c0015dc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dcc:	e8 7f fe ff ff       	call   c0015c50 <Reg::readInt(char*, char*, int*)>
c0015dd1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015dd6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015dda:	0f 95 02             	setne  BYTE PTR [edx]
c0015ddd:	83 c4 2c             	add    esp,0x2c
c0015de0:	c3                   	ret    

c0015de1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015de1:	53                   	push   ebx
c0015de2:	83 ec 1c             	sub    esp,0x1c
c0015de5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015de9:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015ded:	50                   	push   eax
c0015dee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015df2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015df6:	e8 c1 ff ff ff       	call   c0015dbc <Reg::readBool(char*, char*, bool*)>
c0015dfb:	83 c4 10             	add    esp,0x10
c0015dfe:	84 c0                	test   al,al
c0015e00:	74 04                	je     c0015e06 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015e02:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015e06:	88 d8                	mov    al,bl
c0015e08:	83 c4 18             	add    esp,0x18
c0015e0b:	5b                   	pop    ebx
c0015e0c:	c3                   	ret    

c0015e0d <Reg::readIntWithDefault(char*, char*, int)>:
c0015e0d:	53                   	push   ebx
c0015e0e:	83 ec 1c             	sub    esp,0x1c
c0015e11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e15:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e19:	50                   	push   eax
c0015e1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e22:	e8 29 fe ff ff       	call   c0015c50 <Reg::readInt(char*, char*, int*)>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	84 c0                	test   al,al
c0015e2c:	74 04                	je     c0015e32 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015e2e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015e32:	89 d8                	mov    eax,ebx
c0015e34:	83 c4 18             	add    esp,0x18
c0015e37:	5b                   	pop    ebx
c0015e38:	c3                   	ret    

c0015e39 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015e39:	57                   	push   edi
c0015e3a:	56                   	push   esi
c0015e3b:	56                   	push   esi
c0015e3c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015e40:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015e44:	56                   	push   esi
c0015e45:	57                   	push   edi
c0015e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e4e:	e8 e8 fe ff ff       	call   c0015d3b <Reg::readString(char*, char*, char*, int)>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	84 c0                	test   al,al
c0015e58:	75 1a                	jne    c0015e74 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015e5a:	51                   	push   ecx
c0015e5b:	56                   	push   esi
c0015e5c:	6a 00                	push   0x0
c0015e5e:	57                   	push   edi
c0015e5f:	e8 18 a8 fe ff       	call   c000067c <memset>
c0015e64:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015e67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015e6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e6d:	83 c4 10             	add    esp,0x10
c0015e70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015e74:	89 f8                	mov    eax,edi
c0015e76:	5a                   	pop    edx
c0015e77:	5e                   	pop    esi
c0015e78:	5f                   	pop    edi
c0015e79:	c3                   	ret    

c0015e7a <Sys::eject(regs*)>:
c0015e7a:	83 ec 0c             	sub    esp,0xc
c0015e7d:	83 ca ff             	or     edx,0xffffffff
c0015e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e84:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015e87:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e8c:	83 e9 41             	sub    ecx,0x41
c0015e8f:	83 f9 19             	cmp    ecx,0x19
c0015e92:	77 18                	ja     c0015eac <Sys::eject(regs*)+0x32>
c0015e94:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c0015e9b:	85 c9                	test   ecx,ecx
c0015e9d:	74 0d                	je     c0015eac <Sys::eject(regs*)+0x32>
c0015e9f:	83 ec 0c             	sub    esp,0xc
c0015ea2:	51                   	push   ecx
c0015ea3:	e8 86 a9 ff ff       	call   c001082e <LogicalDisk::eject()>
c0015ea8:	83 c4 10             	add    esp,0x10
c0015eab:	99                   	cdq    
c0015eac:	83 c4 0c             	add    esp,0xc
c0015eaf:	c3                   	ret    

c0015eb0 <Sys::exit(regs*)>:
c0015eb0:	83 ec 18             	sub    esp,0x18
c0015eb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015eb7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015eba:	e8 7d 37 00 00       	call   c001963c <terminateTask(int)>
c0015ebf:	83 c8 ff             	or     eax,0xffffffff
c0015ec2:	83 c4 1c             	add    esp,0x1c
c0015ec5:	89 c2                	mov    edx,eax
c0015ec7:	c3                   	ret    

c0015ec8 <Sys::getCwd(regs*)>:
c0015ec8:	83 ec 10             	sub    esp,0x10
c0015ecb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ecf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015ed2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015ed5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eda:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015edd:	e8 ca 74 ff ff       	call   c000d3ac <Fs::getcwd(Process*, char*, int)>
c0015ee2:	83 c4 1c             	add    esp,0x1c
c0015ee5:	99                   	cdq    
c0015ee6:	c3                   	ret    

c0015ee7 <Sys::getPID(regs*)>:
c0015ee7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015eef:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ef1:	99                   	cdq    
c0015ef2:	c3                   	ret    

c0015ef3 <Sys::getRAMData(regs*)>:
c0015ef3:	8b 0d 98 8a 02 c0    	mov    ecx,DWORD PTR ds:0xc0028a98
c0015ef9:	69 05 94 8a 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028a94,0xc8
c0015f03:	99                   	cdq    
c0015f04:	f7 f9                	idiv   ecx
c0015f06:	c1 e0 18             	shl    eax,0x18
c0015f09:	09 c8                	or     eax,ecx
c0015f0b:	99                   	cdq    
c0015f0c:	c3                   	ret    

c0015f0d <Sys::getVGAPtr(regs*)>:
c0015f0d:	55                   	push   ebp
c0015f0e:	57                   	push   edi
c0015f0f:	56                   	push   esi
c0015f10:	53                   	push   ebx
c0015f11:	83 ec 18             	sub    esp,0x18
c0015f14:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015f18:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015f1b:	e8 20 32 00 00       	call   c0019140 <Thr::processFromPID(int)>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	89 c1                	mov    ecx,eax
c0015f25:	b8 01 00 00 00       	mov    eax,0x1
c0015f2a:	85 c9                	test   ecx,ecx
c0015f2c:	74 59                	je     c0015f87 <Sys::getVGAPtr(regs*)+0x7a>
c0015f2e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015f34:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015f38:	74 0c                	je     c0015f46 <Sys::getVGAPtr(regs*)+0x39>
c0015f3a:	83 ec 0c             	sub    esp,0xc
c0015f3d:	53                   	push   ebx
c0015f3e:	e8 0a 4f ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c0015f43:	83 c4 10             	add    esp,0x10
c0015f46:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015f49:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015f4c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015f51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015f56:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f59:	81 c3 82 00 00 00    	add    ebx,0x82
c0015f5f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015f65:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f68:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015f6b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015f71:	50                   	push   eax
c0015f72:	50                   	push   eax
c0015f73:	53                   	push   ebx
c0015f74:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015f77:	05 a8 0f 00 00       	add    eax,0xfa8
c0015f7c:	50                   	push   eax
c0015f7d:	e8 b6 a7 fe ff       	call   c0000738 <strcpy>
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	31 c0                	xor    eax,eax
c0015f87:	83 c4 0c             	add    esp,0xc
c0015f8a:	31 d2                	xor    edx,edx
c0015f8c:	5b                   	pop    ebx
c0015f8d:	5e                   	pop    esi
c0015f8e:	5f                   	pop    edi
c0015f8f:	5d                   	pop    ebp
c0015f90:	c3                   	ret    

c0015f91 <Sys::loadDLL(regs*)>:
c0015f91:	56                   	push   esi
c0015f92:	53                   	push   ebx
c0015f93:	31 d2                	xor    edx,edx
c0015f95:	51                   	push   ecx
c0015f96:	b8 01 00 00 00       	mov    eax,0x1
c0015f9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f9f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015fa3:	0f 84 8c 00 00 00    	je     c0016035 <Sys::loadDLL(regs*)+0xa4>
c0015fa9:	83 ec 0c             	sub    esp,0xc
c0015fac:	68 14 01 00 00       	push   0x114
c0015fb1:	e8 9d 3d ff ff       	call   c0009d53 <malloc>
c0015fb6:	83 c4 0c             	add    esp,0xc
c0015fb9:	89 c3                	mov    ebx,eax
c0015fbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fc0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015fc3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015fc6:	53                   	push   ebx
c0015fc7:	e8 de 75 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0015fcc:	83 c4 10             	add    esp,0x10
c0015fcf:	31 d2                	xor    edx,edx
c0015fd1:	b8 02 00 00 00       	mov    eax,0x2
c0015fd6:	85 db                	test   ebx,ebx
c0015fd8:	74 5b                	je     c0016035 <Sys::loadDLL(regs*)+0xa4>
c0015fda:	83 ec 0c             	sub    esp,0xc
c0015fdd:	53                   	push   ebx
c0015fde:	e8 0f 79 ff ff       	call   c000d8f2 <File::exists()>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	84 c0                	test   al,al
c0015fe8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fea:	75 11                	jne    c0015ffd <Sys::loadDLL(regs*)+0x6c>
c0015fec:	83 ec 0c             	sub    esp,0xc
c0015fef:	53                   	push   ebx
c0015ff0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff3:	83 c4 10             	add    esp,0x10
c0015ff6:	b8 03 00 00 00       	mov    eax,0x3
c0015ffb:	eb 36                	jmp    c0016033 <Sys::loadDLL(regs*)+0xa2>
c0015ffd:	83 ec 0c             	sub    esp,0xc
c0016000:	53                   	push   ebx
c0016001:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016004:	58                   	pop    eax
c0016005:	5a                   	pop    edx
c0016006:	6a 00                	push   0x0
c0016008:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001600b:	e8 0a 22 00 00       	call   c001821a <Thr::loadDLL(char const*, bool)>
c0016010:	83 c4 10             	add    esp,0x10
c0016013:	89 c1                	mov    ecx,eax
c0016015:	31 d2                	xor    edx,edx
c0016017:	b8 04 00 00 00       	mov    eax,0x4
c001601c:	85 c9                	test   ecx,ecx
c001601e:	74 15                	je     c0016035 <Sys::loadDLL(regs*)+0xa4>
c0016020:	53                   	push   ebx
c0016021:	53                   	push   ebx
c0016022:	ff 35 68 8a 02 c0    	push   DWORD PTR ds:0xc0028a68
c0016028:	51                   	push   ecx
c0016029:	e8 1d 24 00 00       	call   c001844b <Thr::executeDLL(unsigned long, void*)>
c001602e:	83 c4 10             	add    esp,0x10
c0016031:	31 c0                	xor    eax,eax
c0016033:	31 d2                	xor    edx,edx
c0016035:	59                   	pop    ecx
c0016036:	5b                   	pop    ebx
c0016037:	5e                   	pop    esi
c0016038:	c3                   	ret    

c0016039 <Sys::read(regs*)>:
c0016039:	57                   	push   edi
c001603a:	56                   	push   esi
c001603b:	53                   	push   ebx
c001603c:	83 ec 10             	sub    esp,0x10
c001603f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016043:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016046:	83 f8 02             	cmp    eax,0x2
c0016049:	77 10                	ja     c001605b <Sys::read(regs*)+0x22>
c001604b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016050:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016053:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016059:	eb 0e                	jmp    c0016069 <Sys::read(regs*)+0x30>
c001605b:	83 ec 0c             	sub    esp,0xc
c001605e:	50                   	push   eax
c001605f:	e8 5f 5b ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	89 c1                	mov    ecx,eax
c0016069:	83 c8 ff             	or     eax,0xffffffff
c001606c:	85 c9                	test   ecx,ecx
c001606e:	89 c2                	mov    edx,eax
c0016070:	74 28                	je     c001609a <Sys::read(regs*)+0x61>
c0016072:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001607a:	31 ff                	xor    edi,edi
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016081:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016085:	52                   	push   edx
c0016086:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016089:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001608c:	57                   	push   edi
c001608d:	56                   	push   esi
c001608e:	51                   	push   ecx
c001608f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016092:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016096:	83 c4 20             	add    esp,0x20
c0016099:	99                   	cdq    
c001609a:	83 c4 10             	add    esp,0x10
c001609d:	5b                   	pop    ebx
c001609e:	5e                   	pop    esi
c001609f:	5f                   	pop    edi
c00160a0:	c3                   	ret    

c00160a1 <Sys::sbrk(regs*)>:
c00160a1:	56                   	push   esi
c00160a2:	53                   	push   ebx
c00160a3:	50                   	push   eax
c00160a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00160ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160b0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00160b3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00160b9:	85 db                	test   ebx,ebx
c00160bb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00160be:	74 02                	je     c00160c2 <Sys::sbrk(regs*)+0x21>
c00160c0:	79 06                	jns    c00160c8 <Sys::sbrk(regs*)+0x27>
c00160c2:	89 f0                	mov    eax,esi
c00160c4:	31 d2                	xor    edx,edx
c00160c6:	eb 2a                	jmp    c00160f2 <Sys::sbrk(regs*)+0x51>
c00160c8:	83 c8 ff             	or     eax,0xffffffff
c00160cb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00160d1:	89 c2                	mov    edx,eax
c00160d3:	77 1d                	ja     c00160f2 <Sys::sbrk(regs*)+0x51>
c00160d5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00160db:	50                   	push   eax
c00160dc:	c1 ea 0c             	shr    edx,0xc
c00160df:	68 07 0c 00 00       	push   0xc07
c00160e4:	52                   	push   edx
c00160e5:	51                   	push   ecx
c00160e6:	e8 d7 63 ff ff       	call   c000c4c2 <VAS::allocatePages(int, int)>
c00160eb:	89 f0                	mov    eax,esi
c00160ed:	31 d2                	xor    edx,edx
c00160ef:	83 c4 10             	add    esp,0x10
c00160f2:	59                   	pop    ecx
c00160f3:	5b                   	pop    ebx
c00160f4:	5e                   	pop    esi
c00160f5:	c3                   	ret    

c00160f6 <Sys::setCwd(regs*)>:
c00160f6:	83 ec 14             	sub    esp,0x14
c00160f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160fd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016100:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016105:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016108:	e8 84 78 ff ff       	call   c000d991 <Fs::setcwd(Process*, char*)>
c001610d:	83 c4 1c             	add    esp,0x1c
c0016110:	99                   	cdq    
c0016111:	c3                   	ret    

c0016112 <Sys::setTime(regs*)>:
c0016112:	55                   	push   ebp
c0016113:	31 c9                	xor    ecx,ecx
c0016115:	57                   	push   edi
c0016116:	bd 0c 00 00 00       	mov    ebp,0xc
c001611b:	56                   	push   esi
c001611c:	53                   	push   ebx
c001611d:	31 db                	xor    ebx,ebx
c001611f:	83 ec 10             	sub    esp,0x10
c0016122:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016126:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0016129:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001612c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001612f:	89 c2                	mov    edx,eax
c0016131:	66 81 ef 6c 07       	sub    di,0x76c
c0016136:	83 e2 1f             	and    edx,0x1f
c0016139:	c1 e7 10             	shl    edi,0x10
c001613c:	42                   	inc    edx
c001613d:	c1 e8 05             	shr    eax,0x5
c0016140:	88 d1                	mov    cl,dl
c0016142:	31 d2                	xor    edx,edx
c0016144:	f7 f5                	div    ebp
c0016146:	89 dd                	mov    ebp,ebx
c0016148:	88 d5                	mov    ch,dl
c001614a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0016150:	0f b7 c1             	movzx  eax,cx
c0016153:	31 d2                	xor    edx,edx
c0016155:	09 f8                	or     eax,edi
c0016157:	bf 3c 00 00 00       	mov    edi,0x3c
c001615c:	89 c1                	mov    ecx,eax
c001615e:	89 f0                	mov    eax,esi
c0016160:	f7 f7                	div    edi
c0016162:	c1 e2 10             	shl    edx,0x10
c0016165:	09 d5                	or     ebp,edx
c0016167:	31 d2                	xor    edx,edx
c0016169:	89 eb                	mov    ebx,ebp
c001616b:	f7 f7                	div    edi
c001616d:	bf 10 0e 00 00       	mov    edi,0xe10
c0016172:	88 d7                	mov    bh,dl
c0016174:	89 f0                	mov    eax,esi
c0016176:	31 d2                	xor    edx,edx
c0016178:	f7 f7                	div    edi
c001617a:	bf 18 00 00 00       	mov    edi,0x18
c001617f:	31 d2                	xor    edx,edx
c0016181:	f7 f7                	div    edi
c0016183:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0016188:	88 d3                	mov    bl,dl
c001618a:	53                   	push   ebx
c001618b:	51                   	push   ecx
c001618c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016192:	e8 fb 80 ff ff       	call   c000e292 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0016197:	83 c4 1c             	add    esp,0x1c
c001619a:	83 f0 01             	xor    eax,0x1
c001619d:	5b                   	pop    ebx
c001619e:	0f b6 c0             	movzx  eax,al
c00161a1:	5e                   	pop    esi
c00161a2:	31 d2                	xor    edx,edx
c00161a4:	5f                   	pop    edi
c00161a5:	5d                   	pop    ebp
c00161a6:	c3                   	ret    

c00161a7 <Sys::timezone(regs*)>:
c00161a7:	53                   	push   ebx
c00161a8:	83 ec 08             	sub    esp,0x8
c00161ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161af:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00161b3:	75 17                	jne    c00161cc <Sys::timezone(regs*)+0x25>
c00161b5:	83 ec 0c             	sub    esp,0xc
c00161b8:	68 99 67 02 c0       	push   0xc0026799
c00161bd:	e8 7d 6e ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00161c2:	83 c8 ff             	or     eax,0xffffffff
c00161c5:	83 c4 10             	add    esp,0x10
c00161c8:	89 c2                	mov    edx,eax
c00161ca:	eb 20                	jmp    c00161ec <Sys::timezone(regs*)+0x45>
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	68 ae 67 02 c0       	push   0xc00267ae
c00161d4:	e8 66 6e ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00161d9:	58                   	pop    eax
c00161da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00161dd:	e8 12 7e ff ff       	call   c000dff4 <User::loadClockSettings(int)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	b8 01 00 00 00       	mov    eax,0x1
c00161ea:	31 d2                	xor    edx,edx
c00161ec:	83 c4 08             	add    esp,0x8
c00161ef:	5b                   	pop    ebx
c00161f0:	c3                   	ret    

c00161f1 <Sys::write(regs*)>:
c00161f1:	57                   	push   edi
c00161f2:	56                   	push   esi
c00161f3:	53                   	push   ebx
c00161f4:	83 ec 10             	sub    esp,0x10
c00161f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161fe:	83 f8 02             	cmp    eax,0x2
c0016201:	77 10                	ja     c0016213 <Sys::write(regs*)+0x22>
c0016203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001620b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0016211:	eb 0e                	jmp    c0016221 <Sys::write(regs*)+0x30>
c0016213:	83 ec 0c             	sub    esp,0xc
c0016216:	50                   	push   eax
c0016217:	e8 a7 59 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c001621c:	83 c4 10             	add    esp,0x10
c001621f:	89 c1                	mov    ecx,eax
c0016221:	83 c8 ff             	or     eax,0xffffffff
c0016224:	85 c9                	test   ecx,ecx
c0016226:	89 c2                	mov    edx,eax
c0016228:	74 28                	je     c0016252 <Sys::write(regs*)+0x61>
c001622a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016232:	31 ff                	xor    edi,edi
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016239:	8d 54 24 18          	lea    edx,[esp+0x18]
c001623d:	52                   	push   edx
c001623e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016241:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016244:	57                   	push   edi
c0016245:	56                   	push   esi
c0016246:	51                   	push   ecx
c0016247:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001624a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001624e:	83 c4 20             	add    esp,0x20
c0016251:	99                   	cdq    
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	5b                   	pop    ebx
c0016256:	5e                   	pop    esi
c0016257:	5f                   	pop    edi
c0016258:	c3                   	ret    

c0016259 <Sys::wsbe(regs*)>:
c0016259:	57                   	push   edi
c001625a:	b9 0b 00 00 00       	mov    ecx,0xb
c001625f:	56                   	push   esi
c0016260:	be ed 67 02 c0       	mov    esi,0xc00267ed
c0016265:	53                   	push   ebx
c0016266:	83 ec 30             	sub    esp,0x30
c0016269:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001626d:	fc                   	cld    
c001626e:	83 ec 0c             	sub    esp,0xc
c0016271:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0016273:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001627f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016285:	8b 06                	mov    eax,DWORD PTR [esi]
c0016287:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001628a:	57                   	push   edi
c001628b:	e8 08 a4 fe ff       	call   c0000698 <strlen>
c0016290:	5a                   	pop    edx
c0016291:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0016295:	52                   	push   edx
c0016296:	31 d2                	xor    edx,edx
c0016298:	57                   	push   edi
c0016299:	52                   	push   edx
c001629a:	50                   	push   eax
c001629b:	56                   	push   esi
c001629c:	ff d3                	call   ebx
c001629e:	83 c4 14             	add    esp,0x14
c00162a1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00162a5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00162a8:	e8 8f 33 00 00       	call   c001963c <terminateTask(int)>
c00162ad:	83 c4 40             	add    esp,0x40
c00162b0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00162b5:	5b                   	pop    ebx
c00162b6:	31 d2                	xor    edx,edx
c00162b8:	5e                   	pop    esi
c00162b9:	5f                   	pop    edi
c00162ba:	c3                   	ret    

c00162bb <Sys::yield(regs*)>:
c00162bb:	83 ec 0c             	sub    esp,0xc
c00162be:	fa                   	cli    
c00162bf:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00162c5:	e8 5a 2a 00 00       	call   c0018d24 <schedule()>
c00162ca:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00162cf:	48                   	dec    eax
c00162d0:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00162d5:	75 01                	jne    c00162d8 <Sys::yield(regs*)+0x1d>
c00162d7:	fb                   	sti    
c00162d8:	8b 15 8c 90 02 c0    	mov    edx,DWORD PTR ds:0xc002908c
c00162de:	83 c4 0c             	add    esp,0xc
c00162e1:	89 d0                	mov    eax,edx
c00162e3:	c1 ea 11             	shr    edx,0x11
c00162e6:	c1 e0 07             	shl    eax,0x7
c00162e9:	25 80 30 0f 00       	and    eax,0xf3080
c00162ee:	31 d0                	xor    eax,edx
c00162f0:	31 d2                	xor    edx,edx
c00162f2:	c3                   	ret    

c00162f3 <sysCallSeekDir(regs*)>:
c00162f3:	31 c0                	xor    eax,eax
c00162f5:	31 d2                	xor    edx,edx
c00162f7:	c3                   	ret    

c00162f8 <sysCallTellDir(regs*)>:
c00162f8:	31 c0                	xor    eax,eax
c00162fa:	31 d2                	xor    edx,edx
c00162fc:	c3                   	ret    

c00162fd <sysCallVerify(regs*)>:
c00162fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016301:	31 d2                	xor    edx,edx
c0016303:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016306:	c3                   	ret    

c0016307 <sysCallGetArgc(regs*)>:
c0016307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001630f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0016315:	99                   	cdq    
c0016316:	c3                   	ret    

c0016317 <sysFormatDisk(regs*)>:
c0016317:	56                   	push   esi
c0016318:	53                   	push   ebx
c0016319:	53                   	push   ebx
c001631a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001631e:	8b 1d 94 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b94
c0016324:	eb 25                	jmp    c001634b <sysFormatDisk(regs*)+0x34>
c0016326:	83 ec 0c             	sub    esp,0xc
c0016329:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001632c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001632e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016331:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016334:	50                   	push   eax
c0016335:	ff 34 85 20 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6fe0]
c001633c:	53                   	push   ebx
c001633d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016340:	83 c4 20             	add    esp,0x20
c0016343:	83 f8 08             	cmp    eax,0x8
c0016346:	75 12                	jne    c001635a <sysFormatDisk(regs*)+0x43>
c0016348:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001634b:	85 db                	test   ebx,ebx
c001634d:	75 d7                	jne    c0016326 <sysFormatDisk(regs*)+0xf>
c001634f:	59                   	pop    ecx
c0016350:	b8 03 00 00 00       	mov    eax,0x3
c0016355:	31 d2                	xor    edx,edx
c0016357:	5b                   	pop    ebx
c0016358:	5e                   	pop    esi
c0016359:	c3                   	ret    
c001635a:	85 c0                	test   eax,eax
c001635c:	74 1b                	je     c0016379 <sysFormatDisk(regs*)+0x62>
c001635e:	83 f8 09             	cmp    eax,0x9
c0016361:	74 0b                	je     c001636e <sysFormatDisk(regs*)+0x57>
c0016363:	59                   	pop    ecx
c0016364:	b8 02 00 00 00       	mov    eax,0x2
c0016369:	31 d2                	xor    edx,edx
c001636b:	5b                   	pop    ebx
c001636c:	5e                   	pop    esi
c001636d:	c3                   	ret    
c001636e:	59                   	pop    ecx
c001636f:	b8 01 00 00 00       	mov    eax,0x1
c0016374:	31 d2                	xor    edx,edx
c0016376:	5b                   	pop    ebx
c0016377:	5e                   	pop    esi
c0016378:	c3                   	ret    
c0016379:	59                   	pop    ecx
c001637a:	31 c0                	xor    eax,eax
c001637c:	31 d2                	xor    edx,edx
c001637e:	5b                   	pop    ebx
c001637f:	5e                   	pop    esi
c0016380:	c3                   	ret    

c0016381 <sysSetDiskVolumeLabel(regs*)>:
c0016381:	56                   	push   esi
c0016382:	53                   	push   ebx
c0016383:	53                   	push   ebx
c0016384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016388:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001638b:	83 f8 19             	cmp    eax,0x19
c001638e:	77 2d                	ja     c00163bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016390:	8b 0c 85 20 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6fe0]
c0016397:	85 c9                	test   ecx,ecx
c0016399:	74 22                	je     c00163bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c001639b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001639e:	85 db                	test   ebx,ebx
c00163a0:	74 1b                	je     c00163bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00163a2:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00163a8:	85 d2                	test   edx,edx
c00163aa:	74 11                	je     c00163bd <sysSetDiskVolumeLabel(regs*)+0x3c>
c00163ac:	8b 32                	mov    esi,DWORD PTR [edx]
c00163ae:	53                   	push   ebx
c00163af:	50                   	push   eax
c00163b0:	51                   	push   ecx
c00163b1:	52                   	push   edx
c00163b2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00163b5:	83 c4 10             	add    esp,0x10
c00163b8:	99                   	cdq    
c00163b9:	59                   	pop    ecx
c00163ba:	5b                   	pop    ebx
c00163bb:	5e                   	pop    esi
c00163bc:	c3                   	ret    
c00163bd:	59                   	pop    ecx
c00163be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00163c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163c8:	5b                   	pop    ebx
c00163c9:	5e                   	pop    esi
c00163ca:	c3                   	ret    

c00163cb <sysGetDiskVolumeLabel(regs*)>:
c00163cb:	57                   	push   edi
c00163cc:	56                   	push   esi
c00163cd:	53                   	push   ebx
c00163ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00163d5:	83 fa 19             	cmp    edx,0x19
c00163d8:	77 38                	ja     c0016412 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163da:	8b 0c 95 20 90 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6fe0]
c00163e1:	85 c9                	test   ecx,ecx
c00163e3:	74 2d                	je     c0016412 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163e5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00163e8:	85 db                	test   ebx,ebx
c00163ea:	74 26                	je     c0016412 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163ec:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00163ef:	85 f6                	test   esi,esi
c00163f1:	74 1f                	je     c0016412 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163f3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00163f9:	85 c0                	test   eax,eax
c00163fb:	74 15                	je     c0016412 <sysGetDiskVolumeLabel(regs*)+0x47>
c00163fd:	83 ec 0c             	sub    esp,0xc
c0016400:	8b 38                	mov    edi,DWORD PTR [eax]
c0016402:	56                   	push   esi
c0016403:	53                   	push   ebx
c0016404:	52                   	push   edx
c0016405:	51                   	push   ecx
c0016406:	50                   	push   eax
c0016407:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001640a:	83 c4 20             	add    esp,0x20
c001640d:	99                   	cdq    
c001640e:	5b                   	pop    ebx
c001640f:	5e                   	pop    esi
c0016410:	5f                   	pop    edi
c0016411:	c3                   	ret    
c0016412:	5b                   	pop    ebx
c0016413:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016418:	ba ff ff ff ff       	mov    edx,0xffffffff
c001641d:	5e                   	pop    esi
c001641e:	5f                   	pop    edi
c001641f:	c3                   	ret    

c0016420 <sysShutdown(regs*)>:
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016427:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001642a:	85 c0                	test   eax,eax
c001642c:	74 18                	je     c0016446 <sysShutdown(regs*)+0x26>
c001642e:	83 f8 01             	cmp    eax,0x1
c0016431:	74 38                	je     c001646b <sysShutdown(regs*)+0x4b>
c0016433:	83 f8 02             	cmp    eax,0x2
c0016436:	74 24                	je     c001645c <sysShutdown(regs*)+0x3c>
c0016438:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001643d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016442:	83 c4 0c             	add    esp,0xc
c0016445:	c3                   	ret    
c0016446:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001644b:	8b 10                	mov    edx,DWORD PTR [eax]
c001644d:	6a 00                	push   0x0
c001644f:	6a 00                	push   0x0
c0016451:	6a 00                	push   0x0
c0016453:	50                   	push   eax
c0016454:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	eb dc                	jmp    c0016438 <sysShutdown(regs*)+0x18>
c001645c:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0016461:	8b 10                	mov    edx,DWORD PTR [eax]
c0016463:	6a 00                	push   0x0
c0016465:	6a 00                	push   0x0
c0016467:	6a 01                	push   0x1
c0016469:	eb e8                	jmp    c0016453 <sysShutdown(regs*)+0x33>
c001646b:	a1 a0 90 02 c0       	mov    eax,ds:0xc00290a0
c0016470:	85 c0                	test   eax,eax
c0016472:	74 02                	je     c0016476 <sysShutdown(regs*)+0x56>
c0016474:	ff d0                	call   eax
c0016476:	31 c0                	xor    eax,eax
c0016478:	31 d2                	xor    edx,edx
c001647a:	83 c4 0c             	add    esp,0xc
c001647d:	c3                   	ret    

c001647e <sysCallRealpath(regs*)>:
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016485:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016488:	85 d2                	test   edx,edx
c001648a:	74 07                	je     c0016493 <sysCallRealpath(regs*)+0x15>
c001648c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001648f:	85 c0                	test   eax,eax
c0016491:	75 0b                	jne    c001649e <sysCallRealpath(regs*)+0x20>
c0016493:	b8 01 00 00 00       	mov    eax,0x1
c0016498:	31 d2                	xor    edx,edx
c001649a:	83 c4 0c             	add    esp,0xc
c001649d:	c3                   	ret    
c001649e:	51                   	push   ecx
c001649f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00164a5:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00164a8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00164ae:	51                   	push   ecx
c00164af:	52                   	push   edx
c00164b0:	50                   	push   eax
c00164b1:	e8 4a 6f ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c00164b6:	83 c4 10             	add    esp,0x10
c00164b9:	31 c0                	xor    eax,eax
c00164bb:	31 d2                	xor    edx,edx
c00164bd:	83 c4 0c             	add    esp,0xc
c00164c0:	c3                   	ret    

c00164c1 <sysCallReadDir(regs*)>:
c00164c1:	53                   	push   ebx
c00164c2:	83 ec 18             	sub    esp,0x18
c00164c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164c9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00164cc:	83 f8 02             	cmp    eax,0x2
c00164cf:	76 60                	jbe    c0016531 <sysCallReadDir(regs*)+0x70>
c00164d1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00164d8:	77 48                	ja     c0016522 <sysCallReadDir(regs*)+0x61>
c00164da:	83 ec 0c             	sub    esp,0xc
c00164dd:	50                   	push   eax
c00164de:	e8 e0 56 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00164e3:	83 c4 10             	add    esp,0x10
c00164e6:	85 c0                	test   eax,eax
c00164e8:	74 38                	je     c0016522 <sysCallReadDir(regs*)+0x61>
c00164ea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00164f2:	83 ec 0c             	sub    esp,0xc
c00164f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00164f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00164fb:	51                   	push   ecx
c00164fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00164ff:	6a 00                	push   0x0
c0016501:	68 10 01 00 00       	push   0x110
c0016506:	50                   	push   eax
c0016507:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001650a:	83 c4 20             	add    esp,0x20
c001650d:	85 c0                	test   eax,eax
c001650f:	74 29                	je     c001653a <sysCallReadDir(regs*)+0x79>
c0016511:	83 f8 07             	cmp    eax,0x7
c0016514:	74 1b                	je     c0016531 <sysCallReadDir(regs*)+0x70>
c0016516:	b8 02 00 00 00       	mov    eax,0x2
c001651b:	31 d2                	xor    edx,edx
c001651d:	83 c4 18             	add    esp,0x18
c0016520:	5b                   	pop    ebx
c0016521:	c3                   	ret    
c0016522:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016527:	ba ff ff ff ff       	mov    edx,0xffffffff
c001652c:	83 c4 18             	add    esp,0x18
c001652f:	5b                   	pop    ebx
c0016530:	c3                   	ret    
c0016531:	b8 01 00 00 00       	mov    eax,0x1
c0016536:	31 d2                	xor    edx,edx
c0016538:	eb e3                	jmp    c001651d <sysCallReadDir(regs*)+0x5c>
c001653a:	31 c0                	xor    eax,eax
c001653c:	31 d2                	xor    edx,edx
c001653e:	eb dd                	jmp    c001651d <sysCallReadDir(regs*)+0x5c>

c0016540 <sysCallIsATTY(regs*)>:
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016547:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001654a:	83 f8 02             	cmp    eax,0x2
c001654d:	76 07                	jbe    c0016556 <sysCallIsATTY(regs*)+0x16>
c001654f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016554:	75 26                	jne    c001657c <sysCallIsATTY(regs*)+0x3c>
c0016556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001655b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001655e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016564:	85 c0                	test   eax,eax
c0016566:	74 24                	je     c001658c <sysCallIsATTY(regs*)+0x4c>
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	8b 10                	mov    edx,DWORD PTR [eax]
c001656d:	50                   	push   eax
c001656e:	ff 12                	call   DWORD PTR [edx]
c0016570:	31 d2                	xor    edx,edx
c0016572:	0f b6 c0             	movzx  eax,al
c0016575:	83 c4 10             	add    esp,0x10
c0016578:	83 c4 0c             	add    esp,0xc
c001657b:	c3                   	ret    
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	50                   	push   eax
c0016580:	e8 3e 56 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	85 c0                	test   eax,eax
c001658a:	75 dc                	jne    c0016568 <sysCallIsATTY(regs*)+0x28>
c001658c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016591:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016596:	83 c4 0c             	add    esp,0xc
c0016599:	c3                   	ret    

c001659a <sysCallSeek(regs*)>:
c001659a:	53                   	push   ebx
c001659b:	83 ec 08             	sub    esp,0x8
c001659e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00165a5:	8d 50 fd             	lea    edx,[eax-0x3]
c00165a8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00165ae:	77 32                	ja     c00165e2 <sysCallSeek(regs*)+0x48>
c00165b0:	83 ec 0c             	sub    esp,0xc
c00165b3:	50                   	push   eax
c00165b4:	e8 0a 56 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00165b9:	83 c4 0c             	add    esp,0xc
c00165bc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00165bf:	31 db                	xor    ebx,ebx
c00165c1:	53                   	push   ebx
c00165c2:	51                   	push   ecx
c00165c3:	50                   	push   eax
c00165c4:	e8 79 71 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00165c9:	83 c4 10             	add    esp,0x10
c00165cc:	85 c0                	test   eax,eax
c00165ce:	0f 95 c0             	setne  al
c00165d1:	31 d2                	xor    edx,edx
c00165d3:	0f b6 c0             	movzx  eax,al
c00165d6:	f7 d8                	neg    eax
c00165d8:	83 d2 00             	adc    edx,0x0
c00165db:	83 c4 08             	add    esp,0x8
c00165de:	f7 da                	neg    edx
c00165e0:	5b                   	pop    ebx
c00165e1:	c3                   	ret    
c00165e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165ec:	83 c4 08             	add    esp,0x8
c00165ef:	5b                   	pop    ebx
c00165f0:	c3                   	ret    

c00165f1 <sysCallTell(regs*)>:
c00165f1:	53                   	push   ebx
c00165f2:	83 ec 08             	sub    esp,0x8
c00165f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00165fc:	83 f8 02             	cmp    eax,0x2
c00165ff:	76 4d                	jbe    c001664e <sysCallTell(regs*)+0x5d>
c0016601:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016606:	76 19                	jbe    c0016621 <sysCallTell(regs*)+0x30>
c0016608:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001660b:	31 d2                	xor    edx,edx
c001660d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016613:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001661a:	31 c0                	xor    eax,eax
c001661c:	83 c4 08             	add    esp,0x8
c001661f:	5b                   	pop    ebx
c0016620:	c3                   	ret    
c0016621:	83 ec 0c             	sub    esp,0xc
c0016624:	50                   	push   eax
c0016625:	e8 99 55 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c001662a:	5a                   	pop    edx
c001662b:	59                   	pop    ecx
c001662c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001662f:	50                   	push   eax
c0016630:	e8 63 71 ff ff       	call   c000d798 <File::tell(unsigned long long*)>
c0016635:	83 c4 10             	add    esp,0x10
c0016638:	85 c0                	test   eax,eax
c001663a:	0f 95 c0             	setne  al
c001663d:	31 d2                	xor    edx,edx
c001663f:	0f b6 c0             	movzx  eax,al
c0016642:	f7 d8                	neg    eax
c0016644:	83 d2 00             	adc    edx,0x0
c0016647:	83 c4 08             	add    esp,0x8
c001664a:	f7 da                	neg    edx
c001664c:	5b                   	pop    ebx
c001664d:	c3                   	ret    
c001664e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016653:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016658:	83 c4 08             	add    esp,0x8
c001665b:	5b                   	pop    ebx
c001665c:	c3                   	ret    

c001665d <sysCallSize(regs*)>:
c001665d:	53                   	push   ebx
c001665e:	83 ec 18             	sub    esp,0x18
c0016661:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016665:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016668:	83 f8 02             	cmp    eax,0x2
c001666b:	76 53                	jbe    c00166c0 <sysCallSize(regs*)+0x63>
c001666d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016672:	76 19                	jbe    c001668d <sysCallSize(regs*)+0x30>
c0016674:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016677:	31 d2                	xor    edx,edx
c0016679:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001667f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016686:	31 c0                	xor    eax,eax
c0016688:	83 c4 18             	add    esp,0x18
c001668b:	5b                   	pop    ebx
c001668c:	c3                   	ret    
c001668d:	83 ec 0c             	sub    esp,0xc
c0016690:	50                   	push   eax
c0016691:	e8 2d 55 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016696:	83 c4 0c             	add    esp,0xc
c0016699:	8d 54 24 13          	lea    edx,[esp+0x13]
c001669d:	52                   	push   edx
c001669e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166a1:	50                   	push   eax
c00166a2:	e8 89 72 ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c00166a7:	83 c4 10             	add    esp,0x10
c00166aa:	85 c0                	test   eax,eax
c00166ac:	0f 95 c0             	setne  al
c00166af:	31 d2                	xor    edx,edx
c00166b1:	0f b6 c0             	movzx  eax,al
c00166b4:	f7 d8                	neg    eax
c00166b6:	83 d2 00             	adc    edx,0x0
c00166b9:	83 c4 18             	add    esp,0x18
c00166bc:	f7 da                	neg    edx
c00166be:	5b                   	pop    ebx
c00166bf:	c3                   	ret    
c00166c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166ca:	83 c4 18             	add    esp,0x18
c00166cd:	5b                   	pop    ebx
c00166ce:	c3                   	ret    

c00166cf <sysCallSizeFromFilename(regs*)>:
c00166cf:	57                   	push   edi
c00166d0:	56                   	push   esi
c00166d1:	53                   	push   ebx
c00166d2:	83 ec 20             	sub    esp,0x20
c00166d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166d9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00166dc:	83 fb 02             	cmp    ebx,0x2
c00166df:	0f 86 88 00 00 00    	jbe    c001676d <sysCallSizeFromFilename(regs*)+0x9e>
c00166e5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00166eb:	76 1b                	jbe    c0016708 <sysCallSizeFromFilename(regs*)+0x39>
c00166ed:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00166f0:	31 d2                	xor    edx,edx
c00166f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00166f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166ff:	83 c4 20             	add    esp,0x20
c0016702:	31 c0                	xor    eax,eax
c0016704:	5b                   	pop    ebx
c0016705:	5e                   	pop    esi
c0016706:	5f                   	pop    edi
c0016707:	c3                   	ret    
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	68 14 01 00 00       	push   0x114
c0016710:	e8 3e 36 ff ff       	call   c0009d53 <malloc>
c0016715:	83 c4 0c             	add    esp,0xc
c0016718:	89 c7                	mov    edi,eax
c001671a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001671f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016722:	53                   	push   ebx
c0016723:	57                   	push   edi
c0016724:	e8 81 6e ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016729:	83 c4 0c             	add    esp,0xc
c001672c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016730:	50                   	push   eax
c0016731:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016734:	57                   	push   edi
c0016735:	e8 f6 71 ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	85 ff                	test   edi,edi
c001673f:	74 14                	je     c0016755 <sysCallSizeFromFilename(regs*)+0x86>
c0016741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016745:	8b 17                	mov    edx,DWORD PTR [edi]
c0016747:	83 ec 0c             	sub    esp,0xc
c001674a:	57                   	push   edi
c001674b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001674e:	83 c4 10             	add    esp,0x10
c0016751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016755:	85 c0                	test   eax,eax
c0016757:	0f 95 c0             	setne  al
c001675a:	31 d2                	xor    edx,edx
c001675c:	0f b6 c0             	movzx  eax,al
c001675f:	f7 d8                	neg    eax
c0016761:	83 d2 00             	adc    edx,0x0
c0016764:	83 c4 20             	add    esp,0x20
c0016767:	f7 da                	neg    edx
c0016769:	5b                   	pop    ebx
c001676a:	5e                   	pop    esi
c001676b:	5f                   	pop    edi
c001676c:	c3                   	ret    
c001676d:	83 c4 20             	add    esp,0x20
c0016770:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016775:	5b                   	pop    ebx
c0016776:	ba ff ff ff ff       	mov    edx,0xffffffff
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	c3                   	ret    

c001677e <sysCallClose(regs*)>:
c001677e:	53                   	push   ebx
c001677f:	83 ec 08             	sub    esp,0x8
c0016782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016786:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016789:	83 f8 02             	cmp    eax,0x2
c001678c:	76 41                	jbe    c00167cf <sysCallClose(regs*)+0x51>
c001678e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016794:	83 fa 01             	cmp    edx,0x1
c0016797:	76 2d                	jbe    c00167c6 <sysCallClose(regs*)+0x48>
c0016799:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001679e:	77 2f                	ja     c00167cf <sysCallClose(regs*)+0x51>
c00167a0:	83 ec 0c             	sub    esp,0xc
c00167a3:	50                   	push   eax
c00167a4:	e8 1a 54 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c00167a9:	89 c3                	mov    ebx,eax
c00167ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ae:	e8 2f 6f ff ff       	call   c000d6e2 <File::close()>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	85 db                	test   ebx,ebx
c00167b8:	74 0c                	je     c00167c6 <sysCallClose(regs*)+0x48>
c00167ba:	83 ec 0c             	sub    esp,0xc
c00167bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167bf:	53                   	push   ebx
c00167c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	31 c0                	xor    eax,eax
c00167c8:	31 d2                	xor    edx,edx
c00167ca:	83 c4 08             	add    esp,0x8
c00167cd:	5b                   	pop    ebx
c00167ce:	c3                   	ret    
c00167cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167d9:	83 c4 08             	add    esp,0x8
c00167dc:	5b                   	pop    ebx
c00167dd:	c3                   	ret    

c00167de <sysCallOpenDir(regs*)>:
c00167de:	56                   	push   esi
c00167df:	53                   	push   ebx
c00167e0:	53                   	push   ebx
c00167e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167e5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00167e8:	85 f6                	test   esi,esi
c00167ea:	74 59                	je     c0016845 <sysCallOpenDir(regs*)+0x67>
c00167ec:	83 ec 0c             	sub    esp,0xc
c00167ef:	68 14 01 00 00       	push   0x114
c00167f4:	e8 5a 35 ff ff       	call   c0009d53 <malloc>
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	89 c6                	mov    esi,eax
c00167fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016803:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016806:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016809:	56                   	push   esi
c001680a:	e8 fb 72 ff ff       	call   c000db0a <Directory::Directory(char const*, Process*)>
c001680f:	83 c4 10             	add    esp,0x10
c0016812:	85 f6                	test   esi,esi
c0016814:	74 2f                	je     c0016845 <sysCallOpenDir(regs*)+0x67>
c0016816:	83 ec 0c             	sub    esp,0xc
c0016819:	56                   	push   esi
c001681a:	e8 c5 73 ff ff       	call   c000dbe4 <Directory::open()>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	85 c0                	test   eax,eax
c0016824:	75 1f                	jne    c0016845 <sysCallOpenDir(regs*)+0x67>
c0016826:	83 ec 0c             	sub    esp,0xc
c0016829:	56                   	push   esi
c001682a:	e8 9f 50 ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c001682f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016832:	83 c4 10             	add    esp,0x10
c0016835:	89 02                	mov    DWORD PTR [edx],eax
c0016837:	c1 f8 1f             	sar    eax,0x1f
c001683a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001683d:	31 c0                	xor    eax,eax
c001683f:	59                   	pop    ecx
c0016840:	31 d2                	xor    edx,edx
c0016842:	5b                   	pop    ebx
c0016843:	5e                   	pop    esi
c0016844:	c3                   	ret    
c0016845:	59                   	pop    ecx
c0016846:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001684b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016850:	5b                   	pop    ebx
c0016851:	5e                   	pop    esi
c0016852:	c3                   	ret    

c0016853 <sysCallCloseDir(regs*)>:
c0016853:	53                   	push   ebx
c0016854:	83 ec 08             	sub    esp,0x8
c0016857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001685e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016861:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016867:	77 2f                	ja     c0016898 <sysCallCloseDir(regs*)+0x45>
c0016869:	83 ec 0c             	sub    esp,0xc
c001686c:	50                   	push   eax
c001686d:	e8 51 53 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016872:	89 c3                	mov    ebx,eax
c0016874:	89 04 24             	mov    DWORD PTR [esp],eax
c0016877:	e8 c4 73 ff ff       	call   c000dc40 <Directory::close()>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	85 db                	test   ebx,ebx
c0016881:	74 0c                	je     c001688f <sysCallCloseDir(regs*)+0x3c>
c0016883:	83 ec 0c             	sub    esp,0xc
c0016886:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016888:	53                   	push   ebx
c0016889:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001688c:	83 c4 10             	add    esp,0x10
c001688f:	31 c0                	xor    eax,eax
c0016891:	31 d2                	xor    edx,edx
c0016893:	83 c4 08             	add    esp,0x8
c0016896:	5b                   	pop    ebx
c0016897:	c3                   	ret    
c0016898:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001689d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168a2:	83 c4 08             	add    esp,0x8
c00168a5:	5b                   	pop    ebx
c00168a6:	c3                   	ret    

c00168a7 <sysCallMakeDir(regs*)>:
c00168a7:	56                   	push   esi
c00168a8:	53                   	push   ebx
c00168a9:	83 ec 10             	sub    esp,0x10
c00168ac:	68 14 01 00 00       	push   0x114
c00168b1:	e8 9d 34 ff ff       	call   c0009d53 <malloc>
c00168b6:	83 c4 0c             	add    esp,0xc
c00168b9:	89 c3                	mov    ebx,eax
c00168bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00168c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00168c7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00168ca:	53                   	push   ebx
c00168cb:	e8 3a 72 ff ff       	call   c000db0a <Directory::Directory(char const*, Process*)>
c00168d0:	83 c4 10             	add    esp,0x10
c00168d3:	85 db                	test   ebx,ebx
c00168d5:	74 32                	je     c0016909 <sysCallMakeDir(regs*)+0x62>
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	53                   	push   ebx
c00168db:	e8 e4 74 ff ff       	call   c000ddc4 <Directory::create()>
c00168e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168e3:	89 c6                	mov    esi,eax
c00168e5:	e8 56 73 ff ff       	call   c000dc40 <Directory::close()>
c00168ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168f2:	83 c4 10             	add    esp,0x10
c00168f5:	31 c0                	xor    eax,eax
c00168f7:	59                   	pop    ecx
c00168f8:	85 f6                	test   esi,esi
c00168fa:	5b                   	pop    ebx
c00168fb:	0f 95 c0             	setne  al
c00168fe:	5e                   	pop    esi
c00168ff:	31 d2                	xor    edx,edx
c0016901:	f7 d8                	neg    eax
c0016903:	83 d2 00             	adc    edx,0x0
c0016906:	f7 da                	neg    edx
c0016908:	c3                   	ret    
c0016909:	59                   	pop    ecx
c001690a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001690f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016914:	5b                   	pop    ebx
c0016915:	5e                   	pop    esi
c0016916:	c3                   	ret    

c0016917 <sysCallWait(regs*)>:
c0016917:	83 ec 10             	sub    esp,0x10
c001691a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001691e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016921:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016924:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016927:	e8 20 26 00 00       	call   c0018f4c <waitTask(int, int*, int)>
c001692c:	83 c4 1c             	add    esp,0x1c
c001692f:	99                   	cdq    
c0016930:	c3                   	ret    

c0016931 <sysCallNotImpl(regs*)>:
c0016931:	83 ec 18             	sub    esp,0x18
c0016934:	68 19 68 02 c0       	push   0xc0026819
c0016939:	e8 b7 e6 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001693e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016943:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016948:	83 c4 1c             	add    esp,0x1c
c001694b:	c3                   	ret    

c001694c <sysPanic(regs*)>:
c001694c:	83 ec 18             	sub    esp,0x18
c001694f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016953:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016956:	e8 9a e6 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001695b:	b8 01 00 00 00       	mov    eax,0x1
c0016960:	31 d2                	xor    edx,edx
c0016962:	83 c4 1c             	add    esp,0x1c
c0016965:	c3                   	ret    

c0016966 <sysCallRmdir(regs*)>:
c0016966:	56                   	push   esi
c0016967:	53                   	push   ebx
c0016968:	83 ec 20             	sub    esp,0x20
c001696b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001696f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016972:	68 14 01 00 00       	push   0x114
c0016977:	e8 d7 33 ff ff       	call   c0009d53 <malloc>
c001697c:	83 c4 0c             	add    esp,0xc
c001697f:	89 c3                	mov    ebx,eax
c0016981:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016986:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016989:	56                   	push   esi
c001698a:	53                   	push   ebx
c001698b:	e8 1a 6c ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016993:	e8 64 6e ff ff       	call   c000d7fc <File::unlink()>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	85 db                	test   ebx,ebx
c001699d:	74 14                	je     c00169b3 <sysCallRmdir(regs*)+0x4d>
c001699f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00169a5:	83 ec 0c             	sub    esp,0xc
c00169a8:	53                   	push   ebx
c00169a9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169b3:	85 c0                	test   eax,eax
c00169b5:	0f 95 c0             	setne  al
c00169b8:	31 d2                	xor    edx,edx
c00169ba:	0f b6 c0             	movzx  eax,al
c00169bd:	f7 d8                	neg    eax
c00169bf:	83 d2 00             	adc    edx,0x0
c00169c2:	83 c4 14             	add    esp,0x14
c00169c5:	f7 da                	neg    edx
c00169c7:	5b                   	pop    ebx
c00169c8:	5e                   	pop    esi
c00169c9:	c3                   	ret    

c00169ca <sysCallUnlink(regs*)>:
c00169ca:	56                   	push   esi
c00169cb:	53                   	push   ebx
c00169cc:	83 ec 20             	sub    esp,0x20
c00169cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169d3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00169d6:	68 14 01 00 00       	push   0x114
c00169db:	e8 73 33 ff ff       	call   c0009d53 <malloc>
c00169e0:	83 c4 0c             	add    esp,0xc
c00169e3:	89 c3                	mov    ebx,eax
c00169e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169ea:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00169ed:	56                   	push   esi
c00169ee:	53                   	push   ebx
c00169ef:	e8 b6 6b ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c00169f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169f7:	e8 00 6e ff ff       	call   c000d7fc <File::unlink()>
c00169fc:	83 c4 10             	add    esp,0x10
c00169ff:	85 db                	test   ebx,ebx
c0016a01:	74 14                	je     c0016a17 <sysCallUnlink(regs*)+0x4d>
c0016a03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a07:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016a09:	83 ec 0c             	sub    esp,0xc
c0016a0c:	53                   	push   ebx
c0016a0d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016a10:	83 c4 10             	add    esp,0x10
c0016a13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a17:	85 c0                	test   eax,eax
c0016a19:	0f 95 c0             	setne  al
c0016a1c:	31 d2                	xor    edx,edx
c0016a1e:	0f b6 c0             	movzx  eax,al
c0016a21:	f7 d8                	neg    eax
c0016a23:	83 d2 00             	adc    edx,0x0
c0016a26:	83 c4 14             	add    esp,0x14
c0016a29:	f7 da                	neg    edx
c0016a2b:	5b                   	pop    ebx
c0016a2c:	5e                   	pop    esi
c0016a2d:	c3                   	ret    

c0016a2e <sysCallGetArgv(regs*)>:
c0016a2e:	83 ec 0c             	sub    esp,0xc
c0016a31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a35:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016a38:	85 c0                	test   eax,eax
c0016a3a:	78 2b                	js     c0016a67 <sysCallGetArgv(regs*)+0x39>
c0016a3c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016a42:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016a45:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016a4b:	7d 1a                	jge    c0016a67 <sysCallGetArgv(regs*)+0x39>
c0016a4d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016a54:	85 c0                	test   eax,eax
c0016a56:	74 17                	je     c0016a6f <sysCallGetArgv(regs*)+0x41>
c0016a58:	83 ec 08             	sub    esp,0x8
c0016a5b:	50                   	push   eax
c0016a5c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016a5f:	e8 d4 9c fe ff       	call   c0000738 <strcpy>
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	31 c0                	xor    eax,eax
c0016a69:	31 d2                	xor    edx,edx
c0016a6b:	83 c4 0c             	add    esp,0xc
c0016a6e:	c3                   	ret    
c0016a6f:	b8 01 00 00 00       	mov    eax,0x1
c0016a74:	31 d2                	xor    edx,edx
c0016a76:	83 c4 0c             	add    esp,0xc
c0016a79:	c3                   	ret    

c0016a7a <sysCallTTYName(regs*)>:
c0016a7a:	56                   	push   esi
c0016a7b:	53                   	push   ebx
c0016a7c:	53                   	push   ebx
c0016a7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a81:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016a84:	85 c0                	test   eax,eax
c0016a86:	74 5f                	je     c0016ae7 <sysCallTTYName(regs*)+0x6d>
c0016a88:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016a8b:	83 f8 02             	cmp    eax,0x2
c0016a8e:	77 3e                	ja     c0016ace <sysCallTTYName(regs*)+0x54>
c0016a90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a98:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016a9e:	85 db                	test   ebx,ebx
c0016aa0:	74 45                	je     c0016ae7 <sysCallTTYName(regs*)+0x6d>
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aa7:	53                   	push   ebx
c0016aa8:	ff 10                	call   DWORD PTR [eax]
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	84 c0                	test   al,al
c0016aaf:	74 41                	je     c0016af2 <sysCallTTYName(regs*)+0x78>
c0016ab1:	83 ec 08             	sub    esp,0x8
c0016ab4:	81 c3 82 00 00 00    	add    ebx,0x82
c0016aba:	53                   	push   ebx
c0016abb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016abe:	e8 75 9c fe ff       	call   c0000738 <strcpy>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	31 c0                	xor    eax,eax
c0016ac8:	59                   	pop    ecx
c0016ac9:	31 d2                	xor    edx,edx
c0016acb:	5b                   	pop    ebx
c0016acc:	5e                   	pop    esi
c0016acd:	c3                   	ret    
c0016ace:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016ad3:	74 bb                	je     c0016a90 <sysCallTTYName(regs*)+0x16>
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	50                   	push   eax
c0016ad9:	e8 e5 50 ff ff       	call   c000bbc3 <getFromFileDescriptor(int)>
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	89 c3                	mov    ebx,eax
c0016ae3:	85 db                	test   ebx,ebx
c0016ae5:	75 bb                	jne    c0016aa2 <sysCallTTYName(regs*)+0x28>
c0016ae7:	59                   	pop    ecx
c0016ae8:	b8 01 00 00 00       	mov    eax,0x1
c0016aed:	31 d2                	xor    edx,edx
c0016aef:	5b                   	pop    ebx
c0016af0:	5e                   	pop    esi
c0016af1:	c3                   	ret    
c0016af2:	59                   	pop    ecx
c0016af3:	b8 02 00 00 00       	mov    eax,0x2
c0016af8:	31 d2                	xor    edx,edx
c0016afa:	5b                   	pop    ebx
c0016afb:	5e                   	pop    esi
c0016afc:	c3                   	ret    

c0016afd <sysCallUSleep(regs*)>:
c0016afd:	83 ec 1c             	sub    esp,0x1c
c0016b00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b04:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b07:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016b0a:	6a 00                	push   0x0
c0016b0c:	6a 64                	push   0x64
c0016b0e:	52                   	push   edx
c0016b0f:	50                   	push   eax
c0016b10:	e8 f7 c2 00 00       	call   c0022e0c <__udivdi3>
c0016b15:	83 c4 14             	add    esp,0x14
c0016b18:	50                   	push   eax
c0016b19:	e8 fe 24 00 00       	call   c001901c <milliTenthSleep(unsigned int)>
c0016b1e:	31 c0                	xor    eax,eax
c0016b20:	31 d2                	xor    edx,edx
c0016b22:	83 c4 1c             	add    esp,0x1c
c0016b25:	c3                   	ret    

c0016b26 <sysCallSpawn(regs*)>:
c0016b26:	56                   	push   esi
c0016b27:	53                   	push   ebx
c0016b28:	50                   	push   eax
c0016b29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b2d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b30:	85 c0                	test   eax,eax
c0016b32:	75 08                	jne    c0016b3c <sysCallSpawn(regs*)+0x16>
c0016b34:	59                   	pop    ecx
c0016b35:	31 c0                	xor    eax,eax
c0016b37:	31 d2                	xor    edx,edx
c0016b39:	5b                   	pop    ebx
c0016b3a:	5e                   	pop    esi
c0016b3b:	c3                   	ret    
c0016b3c:	83 ec 0c             	sub    esp,0xc
c0016b3f:	68 1f 07 00 00       	push   0x71f
c0016b44:	e8 0a 32 ff ff       	call   c0009d53 <malloc>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	89 c6                	mov    esi,eax
c0016b4e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016b51:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b54:	85 c0                	test   eax,eax
c0016b56:	75 32                	jne    c0016b8a <sysCallSpawn(regs*)+0x64>
c0016b58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b60:	52                   	push   edx
c0016b61:	50                   	push   eax
c0016b62:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016b65:	56                   	push   esi
c0016b66:	e8 a9 1b 00 00       	call   c0018714 <Process::Process(char const*, Process*, char**)>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016b75:	75 bd                	jne    c0016b34 <sysCallSpawn(regs*)+0xe>
c0016b77:	83 ec 0c             	sub    esp,0xc
c0016b7a:	56                   	push   esi
c0016b7b:	e8 80 20 00 00       	call   c0018c00 <Process::createUserThread()>
c0016b80:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	99                   	cdq    
c0016b86:	59                   	pop    ecx
c0016b87:	5b                   	pop    ebx
c0016b88:	5e                   	pop    esi
c0016b89:	c3                   	ret    
c0016b8a:	31 c0                	xor    eax,eax
c0016b8c:	eb d2                	jmp    c0016b60 <sysCallSpawn(regs*)+0x3a>

c0016b8e <sysCallGetEnv(regs*)>:
c0016b8e:	57                   	push   edi
c0016b8f:	56                   	push   esi
c0016b90:	53                   	push   ebx
c0016b91:	83 ec 1c             	sub    esp,0x1c
c0016b94:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b9d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016ba0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016ba3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ba6:	e8 96 e3 ff ff       	call   c0014f41 <Krnl::getProcessTotalEnvCount(Process*)>
c0016bab:	83 c4 10             	add    esp,0x10
c0016bae:	39 c7                	cmp    edi,eax
c0016bb0:	7c 14                	jl     c0016bc6 <sysCallGetEnv(regs*)+0x38>
c0016bb2:	85 f6                	test   esi,esi
c0016bb4:	75 0b                	jne    c0016bc1 <sysCallGetEnv(regs*)+0x33>
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	31 c0                	xor    eax,eax
c0016bbb:	5b                   	pop    ebx
c0016bbc:	31 d2                	xor    edx,edx
c0016bbe:	5e                   	pop    esi
c0016bbf:	5f                   	pop    edi
c0016bc0:	c3                   	ret    
c0016bc1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016bc4:	eb f0                	jmp    c0016bb6 <sysCallGetEnv(regs*)+0x28>
c0016bc6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bca:	52                   	push   edx
c0016bcb:	57                   	push   edi
c0016bcc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bd2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016bd5:	50                   	push   eax
c0016bd6:	e8 86 e3 ff ff       	call   c0014f61 <Krnl::getProcessEnvPair(Process*, int)>
c0016bdb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016bde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016be2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016be6:	83 c4 0c             	add    esp,0xc
c0016be9:	85 c9                	test   ecx,ecx
c0016beb:	75 23                	jne    c0016c10 <sysCallGetEnv(regs*)+0x82>
c0016bed:	83 ec 0c             	sub    esp,0xc
c0016bf0:	50                   	push   eax
c0016bf1:	e8 a2 9a fe ff       	call   c0000698 <strlen>
c0016bf6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016bf9:	89 c3                	mov    ebx,eax
c0016bfb:	e8 98 9a fe ff       	call   c0000698 <strlen>
c0016c00:	83 c4 10             	add    esp,0x10
c0016c03:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016c07:	83 c4 10             	add    esp,0x10
c0016c0a:	31 d2                	xor    edx,edx
c0016c0c:	5b                   	pop    ebx
c0016c0d:	5e                   	pop    esi
c0016c0e:	5f                   	pop    edi
c0016c0f:	c3                   	ret    
c0016c10:	83 ec 08             	sub    esp,0x8
c0016c13:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016c16:	50                   	push   eax
c0016c17:	56                   	push   esi
c0016c18:	e8 1b 9b fe ff       	call   c0000738 <strcpy>
c0016c1d:	58                   	pop    eax
c0016c1e:	5a                   	pop    edx
c0016c1f:	68 33 68 02 c0       	push   0xc0026833
c0016c24:	56                   	push   esi
c0016c25:	e8 4e 9c fe ff       	call   c0000878 <strcat>
c0016c2a:	59                   	pop    ecx
c0016c2b:	5b                   	pop    ebx
c0016c2c:	57                   	push   edi
c0016c2d:	56                   	push   esi
c0016c2e:	e8 45 9c fe ff       	call   c0000878 <strcat>
c0016c33:	83 c4 10             	add    esp,0x10
c0016c36:	e9 7b ff ff ff       	jmp    c0016bb6 <sysCallGetEnv(regs*)+0x28>

c0016c3b <sysAppSettings(regs*)>:
c0016c3b:	57                   	push   edi
c0016c3c:	56                   	push   esi
c0016c3d:	56                   	push   esi
c0016c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c42:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c45:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016c4b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016c50:	66 3d c0 09          	cmp    ax,0x9c0
c0016c54:	75 2e                	jne    c0016c84 <sysAppSettings(regs*)+0x49>
c0016c56:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016c5c:	83 e0 1f             	and    eax,0x1f
c0016c5f:	3c 01                	cmp    al,0x1
c0016c61:	74 2c                	je     c0016c8f <sysAppSettings(regs*)+0x54>
c0016c63:	3c 07                	cmp    al,0x7
c0016c65:	0f 84 b3 00 00 00    	je     c0016d1e <sysAppSettings(regs*)+0xe3>
c0016c6b:	84 c0                	test   al,al
c0016c6d:	0f 84 d2 00 00 00    	je     c0016d45 <sysAppSettings(regs*)+0x10a>
c0016c73:	3c 08                	cmp    al,0x8
c0016c75:	74 63                	je     c0016cda <sysAppSettings(regs*)+0x9f>
c0016c77:	59                   	pop    ecx
c0016c78:	0f b6 c0             	movzx  eax,al
c0016c7b:	5e                   	pop    esi
c0016c7c:	05 e8 03 00 00       	add    eax,0x3e8
c0016c81:	5f                   	pop    edi
c0016c82:	99                   	cdq    
c0016c83:	c3                   	ret    
c0016c84:	b8 01 00 00 00       	mov    eax,0x1
c0016c89:	59                   	pop    ecx
c0016c8a:	31 d2                	xor    edx,edx
c0016c8c:	5e                   	pop    esi
c0016c8d:	5f                   	pop    edi
c0016c8e:	c3                   	ret    
c0016c8f:	50                   	push   eax
c0016c90:	68 00 01 00 00       	push   0x100
c0016c95:	6a 00                	push   0x0
c0016c97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c9f:	83 c0 0c             	add    eax,0xc
c0016ca2:	50                   	push   eax
c0016ca3:	e8 d4 99 fe ff       	call   c000067c <memset>
c0016ca8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cad:	b9 ff 00 00 00       	mov    ecx,0xff
c0016cb2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016cb5:	83 c7 0c             	add    edi,0xc
c0016cb8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cbf:	5a                   	pop    edx
c0016cc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cc3:	59                   	pop    ecx
c0016cc4:	8d 50 0c             	lea    edx,[eax+0xc]
c0016cc7:	52                   	push   edx
c0016cc8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016cce:	e8 19 40 ff ff       	call   c000acec <VgaText::setTitle(char*)>
c0016cd3:	83 c4 10             	add    esp,0x10
c0016cd6:	31 c0                	xor    eax,eax
c0016cd8:	eb af                	jmp    c0016c89 <sysAppSettings(regs*)+0x4e>
c0016cda:	83 ec 08             	sub    esp,0x8
c0016cdd:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016ce3:	83 e0 0f             	and    eax,0xf
c0016ce6:	50                   	push   eax
c0016ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016cf5:	e8 e2 3f ff ff       	call   c000acdc <VgaText::setTitleColour(VgaColour)>
c0016cfa:	5f                   	pop    edi
c0016cfb:	58                   	pop    eax
c0016cfc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016d02:	c1 e8 04             	shr    eax,0x4
c0016d05:	83 e0 0f             	and    eax,0xf
c0016d08:	50                   	push   eax
c0016d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d11:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016d17:	e8 b0 3f ff ff       	call   c000accc <VgaText::setTitleTextColour(VgaColour)>
c0016d1c:	eb b5                	jmp    c0016cd3 <sysAppSettings(regs*)+0x98>
c0016d1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d26:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016d2c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016d32:	c0 e8 06             	shr    al,0x6
c0016d35:	83 e0 01             	and    eax,0x1
c0016d38:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016d3e:	31 c0                	xor    eax,eax
c0016d40:	e9 44 ff ff ff       	jmp    c0016c89 <sysAppSettings(regs*)+0x4e>
c0016d45:	b8 02 00 00 00       	mov    eax,0x2
c0016d4a:	e9 3a ff ff ff       	jmp    c0016c89 <sysAppSettings(regs*)+0x4e>

c0016d4f <sysSetFatAttrib(regs*)>:
c0016d4f:	57                   	push   edi
c0016d50:	56                   	push   esi
c0016d51:	53                   	push   ebx
c0016d52:	83 ec 1c             	sub    esp,0x1c
c0016d55:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d59:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016d5c:	68 14 01 00 00       	push   0x114
c0016d61:	e8 ed 2f ff ff       	call   c0009d53 <malloc>
c0016d66:	83 c4 0c             	add    esp,0xc
c0016d69:	89 c3                	mov    ebx,eax
c0016d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d70:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d73:	57                   	push   edi
c0016d74:	53                   	push   ebx
c0016d75:	e8 30 68 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016d7a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016d7d:	83 c4 0c             	add    esp,0xc
c0016d80:	0f b6 d4             	movzx  edx,ah
c0016d83:	0f b6 c0             	movzx  eax,al
c0016d86:	52                   	push   edx
c0016d87:	50                   	push   eax
c0016d88:	53                   	push   ebx
c0016d89:	e8 08 6b ff ff       	call   c000d896 <File::chfatattr(unsigned char, unsigned char)>
c0016d8e:	83 c4 10             	add    esp,0x10
c0016d91:	85 db                	test   ebx,ebx
c0016d93:	74 14                	je     c0016da9 <sysSetFatAttrib(regs*)+0x5a>
c0016d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d99:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d9b:	83 ec 0c             	sub    esp,0xc
c0016d9e:	53                   	push   ebx
c0016d9f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016da2:	83 c4 10             	add    esp,0x10
c0016da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da9:	85 c0                	test   eax,eax
c0016dab:	0f 95 c0             	setne  al
c0016dae:	31 d2                	xor    edx,edx
c0016db0:	0f b6 c0             	movzx  eax,al
c0016db3:	f7 d8                	neg    eax
c0016db5:	83 d2 00             	adc    edx,0x0
c0016db8:	83 c4 10             	add    esp,0x10
c0016dbb:	f7 da                	neg    edx
c0016dbd:	5b                   	pop    ebx
c0016dbe:	5e                   	pop    esi
c0016dbf:	5f                   	pop    edi
c0016dc0:	c3                   	ret    

c0016dc1 <sysPipe(regs*)>:
c0016dc1:	57                   	push   edi
c0016dc2:	56                   	push   esi
c0016dc3:	53                   	push   ebx
c0016dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016dce:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016dd1:	6a 20                	push   0x20
c0016dd3:	e8 7b 2f ff ff       	call   c0009d53 <malloc>
c0016dd8:	89 c3                	mov    ebx,eax
c0016dda:	58                   	pop    eax
c0016ddb:	5a                   	pop    edx
c0016ddc:	68 00 50 00 00       	push   0x5000
c0016de1:	53                   	push   ebx
c0016de2:	e8 7d 3c ff ff       	call   c000aa64 <Pipe::Pipe(int)>
c0016de7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dea:	e8 df 4a ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c0016def:	89 07                	mov    DWORD PTR [edi],eax
c0016df1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016df4:	e8 d5 4a ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	89 06                	mov    DWORD PTR [esi],eax
c0016dfe:	31 d2                	xor    edx,edx
c0016e00:	5b                   	pop    ebx
c0016e01:	31 c0                	xor    eax,eax
c0016e03:	5e                   	pop    esi
c0016e04:	5f                   	pop    edi
c0016e05:	c3                   	ret    

c0016e06 <sysGetUnixTime(regs*)>:
c0016e06:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0016e0b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e15:	e9 b0 72 ff ff       	jmp    c000e0ca <Clock::timeInSecondsLocal()>

c0016e1a <string_ends_with(char const*, char const*)>:
c0016e1a:	57                   	push   edi
c0016e1b:	56                   	push   esi
c0016e1c:	53                   	push   ebx
c0016e1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e21:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e25:	83 ec 0c             	sub    esp,0xc
c0016e28:	53                   	push   ebx
c0016e29:	e8 6a 98 fe ff       	call   c0000698 <strlen>
c0016e2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e31:	89 c6                	mov    esi,eax
c0016e33:	e8 60 98 fe ff       	call   c0000698 <strlen>
c0016e38:	83 c4 10             	add    esp,0x10
c0016e3b:	39 c6                	cmp    esi,eax
c0016e3d:	7d 06                	jge    c0016e45 <string_ends_with(char const*, char const*)+0x2b>
c0016e3f:	5b                   	pop    ebx
c0016e40:	31 c0                	xor    eax,eax
c0016e42:	5e                   	pop    esi
c0016e43:	5f                   	pop    edi
c0016e44:	c3                   	ret    
c0016e45:	83 ec 08             	sub    esp,0x8
c0016e48:	29 c6                	sub    esi,eax
c0016e4a:	57                   	push   edi
c0016e4b:	01 f3                	add    ebx,esi
c0016e4d:	53                   	push   ebx
c0016e4e:	e8 71 99 fe ff       	call   c00007c4 <strcmp>
c0016e53:	83 c4 10             	add    esp,0x10
c0016e56:	85 c0                	test   eax,eax
c0016e58:	5b                   	pop    ebx
c0016e59:	0f 94 c0             	sete   al
c0016e5c:	5e                   	pop    esi
c0016e5d:	0f b6 c0             	movzx  eax,al
c0016e60:	5f                   	pop    edi
c0016e61:	c3                   	ret    

c0016e62 <sysCallOpen(regs*)>:
c0016e62:	56                   	push   esi
c0016e63:	53                   	push   ebx
c0016e64:	81 ec 04 01 00 00    	sub    esp,0x104
c0016e6a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016e71:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016e74:	85 c9                	test   ecx,ecx
c0016e76:	0f 84 ad 01 00 00    	je     c0017029 <sysCallOpen(regs*)+0x1c7>
c0016e7c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e7f:	85 c0                	test   eax,eax
c0016e81:	0f 84 a2 01 00 00    	je     c0017029 <sysCallOpen(regs*)+0x1c7>
c0016e87:	52                   	push   edx
c0016e88:	68 35 68 02 c0       	push   0xc0026835
c0016e8d:	50                   	push   eax
c0016e8e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016e92:	56                   	push   esi
c0016e93:	e8 68 65 ff ff       	call   c000d400 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016e98:	89 34 24             	mov    DWORD PTR [esp],esi
c0016e9b:	e8 f8 97 fe ff       	call   c0000698 <strlen>
c0016ea0:	83 c4 10             	add    esp,0x10
c0016ea3:	48                   	dec    eax
c0016ea4:	74 1d                	je     c0016ec3 <sysCallOpen(regs*)+0x61>
c0016ea6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016ea9:	eb 0f                	jmp    c0016eba <sysCallOpen(regs*)+0x58>
c0016eab:	80 fa 3a             	cmp    dl,0x3a
c0016eae:	74 0f                	je     c0016ebf <sysCallOpen(regs*)+0x5d>
c0016eb0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016eb4:	48                   	dec    eax
c0016eb5:	74 0c                	je     c0016ec3 <sysCallOpen(regs*)+0x61>
c0016eb7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016eba:	80 fa 2e             	cmp    dl,0x2e
c0016ebd:	75 ec                	jne    c0016eab <sysCallOpen(regs*)+0x49>
c0016ebf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016ec3:	83 ec 08             	sub    esp,0x8
c0016ec6:	68 39 68 02 c0       	push   0xc0026839
c0016ecb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ece:	e8 47 ff ff ff       	call   c0016e1a <string_ends_with(char const*, char const*)>
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	85 c0                	test   eax,eax
c0016ed8:	74 1d                	je     c0016ef7 <sysCallOpen(regs*)+0x95>
c0016eda:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016edd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016ee3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016eea:	81 c4 04 01 00 00    	add    esp,0x104
c0016ef0:	31 c0                	xor    eax,eax
c0016ef2:	31 d2                	xor    edx,edx
c0016ef4:	5b                   	pop    ebx
c0016ef5:	5e                   	pop    esi
c0016ef6:	c3                   	ret    
c0016ef7:	83 ec 08             	sub    esp,0x8
c0016efa:	68 3e 68 02 c0       	push   0xc002683e
c0016eff:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f02:	e8 13 ff ff ff       	call   c0016e1a <string_ends_with(char const*, char const*)>
c0016f07:	83 c4 10             	add    esp,0x10
c0016f0a:	85 c0                	test   eax,eax
c0016f0c:	75 cc                	jne    c0016eda <sysCallOpen(regs*)+0x78>
c0016f0e:	83 ec 08             	sub    esp,0x8
c0016f11:	68 3a 68 02 c0       	push   0xc002683a
c0016f16:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f19:	e8 a6 98 fe ff       	call   c00007c4 <strcmp>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	85 c0                	test   eax,eax
c0016f23:	74 b5                	je     c0016eda <sysCallOpen(regs*)+0x78>
c0016f25:	83 ec 08             	sub    esp,0x8
c0016f28:	68 39 68 02 c0       	push   0xc0026839
c0016f2d:	56                   	push   esi
c0016f2e:	e8 e7 fe ff ff       	call   c0016e1a <string_ends_with(char const*, char const*)>
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	85 c0                	test   eax,eax
c0016f38:	75 a0                	jne    c0016eda <sysCallOpen(regs*)+0x78>
c0016f3a:	83 ec 08             	sub    esp,0x8
c0016f3d:	68 43 68 02 c0       	push   0xc0026843
c0016f42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f45:	e8 d0 fe ff ff       	call   c0016e1a <string_ends_with(char const*, char const*)>
c0016f4a:	83 c4 10             	add    esp,0x10
c0016f4d:	85 c0                	test   eax,eax
c0016f4f:	0f 85 e7 00 00 00    	jne    c001703c <sysCallOpen(regs*)+0x1da>
c0016f55:	83 ec 08             	sub    esp,0x8
c0016f58:	68 48 68 02 c0       	push   0xc0026848
c0016f5d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f60:	e8 b5 fe ff ff       	call   c0016e1a <string_ends_with(char const*, char const*)>
c0016f65:	83 c4 10             	add    esp,0x10
c0016f68:	85 c0                	test   eax,eax
c0016f6a:	0f 85 cc 00 00 00    	jne    c001703c <sysCallOpen(regs*)+0x1da>
c0016f70:	83 ec 08             	sub    esp,0x8
c0016f73:	68 44 68 02 c0       	push   0xc0026844
c0016f78:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f7b:	e8 44 98 fe ff       	call   c00007c4 <strcmp>
c0016f80:	83 c4 10             	add    esp,0x10
c0016f83:	85 c0                	test   eax,eax
c0016f85:	0f 84 b1 00 00 00    	je     c001703c <sysCallOpen(regs*)+0x1da>
c0016f8b:	83 ec 08             	sub    esp,0x8
c0016f8e:	68 43 68 02 c0       	push   0xc0026843
c0016f93:	56                   	push   esi
c0016f94:	e8 81 fe ff ff       	call   c0016e1a <string_ends_with(char const*, char const*)>
c0016f99:	83 c4 10             	add    esp,0x10
c0016f9c:	85 c0                	test   eax,eax
c0016f9e:	0f 85 98 00 00 00    	jne    c001703c <sysCallOpen(regs*)+0x1da>
c0016fa4:	83 ec 0c             	sub    esp,0xc
c0016fa7:	68 14 01 00 00       	push   0x114
c0016fac:	e8 a2 2d ff ff       	call   c0009d53 <malloc>
c0016fb1:	83 c4 0c             	add    esp,0xc
c0016fb4:	89 c6                	mov    esi,eax
c0016fb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fbb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016fbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fc1:	56                   	push   esi
c0016fc2:	e8 e3 65 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	85 f6                	test   esi,esi
c0016fcc:	74 5b                	je     c0017029 <sysCallOpen(regs*)+0x1c7>
c0016fce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016fd1:	0f b6 c2             	movzx  eax,dl
c0016fd4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016fd7:	89 d0                	mov    eax,edx
c0016fd9:	83 e0 01             	and    eax,0x1
c0016fdc:	f6 c2 02             	test   dl,0x2
c0016fdf:	74 03                	je     c0016fe4 <sysCallOpen(regs*)+0x182>
c0016fe1:	83 c8 02             	or     eax,0x2
c0016fe4:	f6 c2 04             	test   dl,0x4
c0016fe7:	74 03                	je     c0016fec <sysCallOpen(regs*)+0x18a>
c0016fe9:	83 c8 04             	or     eax,0x4
c0016fec:	f6 c2 08             	test   dl,0x8
c0016fef:	74 03                	je     c0016ff4 <sysCallOpen(regs*)+0x192>
c0016ff1:	83 c8 0a             	or     eax,0xa
c0016ff4:	83 e2 10             	and    edx,0x10
c0016ff7:	74 03                	je     c0016ffc <sysCallOpen(regs*)+0x19a>
c0016ff9:	83 c8 12             	or     eax,0x12
c0016ffc:	83 ec 08             	sub    esp,0x8
c0016fff:	50                   	push   eax
c0017000:	56                   	push   esi
c0017001:	e8 7e 66 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	85 c0                	test   eax,eax
c001700b:	75 1c                	jne    c0017029 <sysCallOpen(regs*)+0x1c7>
c001700d:	83 ec 0c             	sub    esp,0xc
c0017010:	56                   	push   esi
c0017011:	e8 b8 48 ff ff       	call   c000b8ce <UnixFile::getFileDescriptor()>
c0017016:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017019:	83 c4 10             	add    esp,0x10
c001701c:	89 02                	mov    DWORD PTR [edx],eax
c001701e:	c1 f8 1f             	sar    eax,0x1f
c0017021:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017024:	e9 c1 fe ff ff       	jmp    c0016eea <sysCallOpen(regs*)+0x88>
c0017029:	81 c4 04 01 00 00    	add    esp,0x104
c001702f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017034:	ba ff ff ff ff       	mov    edx,0xffffffff
c0017039:	5b                   	pop    ebx
c001703a:	5e                   	pop    esi
c001703b:	c3                   	ret    
c001703c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001703f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0017045:	e9 99 fe ff ff       	jmp    c0016ee3 <sysCallOpen(regs*)+0x81>

c001704a <Sys::loadSyscalls()>:
c001704a:	c7 05 c0 95 02 c0 bb 62 01 c0 	mov    DWORD PTR ds:0xc00295c0,0xc00162bb
c0017054:	c7 05 c4 95 02 c0 b0 5e 01 c0 	mov    DWORD PTR ds:0xc00295c4,0xc0015eb0
c001705e:	c7 05 c8 95 02 c0 a1 60 01 c0 	mov    DWORD PTR ds:0xc00295c8,0xc00160a1
c0017068:	c7 05 cc 95 02 c0 f1 61 01 c0 	mov    DWORD PTR ds:0xc00295cc,0xc00161f1
c0017072:	c7 05 d0 95 02 c0 39 60 01 c0 	mov    DWORD PTR ds:0xc00295d0,0xc0016039
c001707c:	c7 05 d4 95 02 c0 e7 5e 01 c0 	mov    DWORD PTR ds:0xc00295d4,0xc0015ee7
c0017086:	c7 05 d8 95 02 c0 c8 5e 01 c0 	mov    DWORD PTR ds:0xc00295d8,0xc0015ec8
c0017090:	c7 05 dc 95 02 c0 f6 60 01 c0 	mov    DWORD PTR ds:0xc00295dc,0xc00160f6
c001709a:	c7 05 e4 95 02 c0 7e 67 01 c0 	mov    DWORD PTR ds:0xc00295e4,0xc001677e
c00170a4:	c7 05 e0 95 02 c0 62 6e 01 c0 	mov    DWORD PTR ds:0xc00295e0,0xc0016e62
c00170ae:	c7 05 e8 95 02 c0 de 67 01 c0 	mov    DWORD PTR ds:0xc00295e8,0xc00167de
c00170b8:	c7 05 ec 95 02 c0 c1 64 01 c0 	mov    DWORD PTR ds:0xc00295ec,0xc00164c1
c00170c2:	c7 05 f0 95 02 c0 f3 62 01 c0 	mov    DWORD PTR ds:0xc00295f0,0xc00162f3
c00170cc:	c7 05 f4 95 02 c0 f8 62 01 c0 	mov    DWORD PTR ds:0xc00295f4,0xc00162f8
c00170d6:	c7 05 f8 95 02 c0 a7 68 01 c0 	mov    DWORD PTR ds:0xc00295f8,0xc00168a7
c00170e0:	c7 05 fc 95 02 c0 53 68 01 c0 	mov    DWORD PTR ds:0xc00295fc,0xc0016853
c00170ea:	c7 05 00 96 02 c0 9a 65 01 c0 	mov    DWORD PTR ds:0xc0029600,0xc001659a
c00170f4:	c7 05 04 96 02 c0 f1 65 01 c0 	mov    DWORD PTR ds:0xc0029604,0xc00165f1
c00170fe:	c7 05 08 96 02 c0 5d 66 01 c0 	mov    DWORD PTR ds:0xc0029608,0xc001665d
c0017108:	c7 05 0c 96 02 c0 fd 62 01 c0 	mov    DWORD PTR ds:0xc002960c,0xc00162fd
c0017112:	c7 05 10 96 02 c0 17 69 01 c0 	mov    DWORD PTR ds:0xc0029610,0xc0016917
c001711c:	c7 05 14 96 02 c0 31 69 01 c0 	mov    DWORD PTR ds:0xc0029614,0xc0016931
c0017126:	c7 05 18 96 02 c0 31 69 01 c0 	mov    DWORD PTR ds:0xc0029618,0xc0016931
c0017130:	c7 05 1c 96 02 c0 66 69 01 c0 	mov    DWORD PTR ds:0xc002961c,0xc0016966
c001713a:	c7 05 20 96 02 c0 ca 69 01 c0 	mov    DWORD PTR ds:0xc0029620,0xc00169ca
c0017144:	c7 05 24 96 02 c0 07 63 01 c0 	mov    DWORD PTR ds:0xc0029624,0xc0016307
c001714e:	c7 05 28 96 02 c0 2e 6a 01 c0 	mov    DWORD PTR ds:0xc0029628,0xc0016a2e
c0017158:	c7 05 2c 96 02 c0 7e 64 01 c0 	mov    DWORD PTR ds:0xc002962c,0xc001647e
c0017162:	c7 05 30 96 02 c0 7a 6a 01 c0 	mov    DWORD PTR ds:0xc0029630,0xc0016a7a
c001716c:	c7 05 34 96 02 c0 40 65 01 c0 	mov    DWORD PTR ds:0xc0029634,0xc0016540
c0017176:	c7 05 38 96 02 c0 fd 6a 01 c0 	mov    DWORD PTR ds:0xc0029638,0xc0016afd
c0017180:	c7 05 3c 96 02 c0 cf 66 01 c0 	mov    DWORD PTR ds:0xc002963c,0xc00166cf
c001718a:	c7 05 40 96 02 c0 26 6b 01 c0 	mov    DWORD PTR ds:0xc0029640,0xc0016b26
c0017194:	c7 05 44 96 02 c0 8e 6b 01 c0 	mov    DWORD PTR ds:0xc0029644,0xc0016b8e
c001719e:	c7 05 48 96 02 c0 3b 6c 01 c0 	mov    DWORD PTR ds:0xc0029648,0xc0016c3b
c00171a8:	c7 05 4c 96 02 c0 17 63 01 c0 	mov    DWORD PTR ds:0xc002964c,0xc0016317
c00171b2:	c7 05 50 96 02 c0 81 63 01 c0 	mov    DWORD PTR ds:0xc0029650,0xc0016381
c00171bc:	c7 05 54 96 02 c0 cb 63 01 c0 	mov    DWORD PTR ds:0xc0029654,0xc00163cb
c00171c6:	c7 05 58 96 02 c0 4f 6d 01 c0 	mov    DWORD PTR ds:0xc0029658,0xc0016d4f
c00171d0:	c7 05 5c 96 02 c0 4c 69 01 c0 	mov    DWORD PTR ds:0xc002965c,0xc001694c
c00171da:	c7 05 60 96 02 c0 20 64 01 c0 	mov    DWORD PTR ds:0xc0029660,0xc0016420
c00171e4:	c7 05 64 96 02 c0 c1 6d 01 c0 	mov    DWORD PTR ds:0xc0029664,0xc0016dc1
c00171ee:	c7 05 68 96 02 c0 06 6e 01 c0 	mov    DWORD PTR ds:0xc0029668,0xc0016e06
c00171f8:	c7 05 6c 96 02 c0 91 5f 01 c0 	mov    DWORD PTR ds:0xc002966c,0xc0015f91
c0017202:	c7 05 70 96 02 c0 12 61 01 c0 	mov    DWORD PTR ds:0xc0029670,0xc0016112
c001720c:	c7 05 74 96 02 c0 a7 61 01 c0 	mov    DWORD PTR ds:0xc0029674,0xc00161a7
c0017216:	c7 05 78 96 02 c0 7a 5e 01 c0 	mov    DWORD PTR ds:0xc0029678,0xc0015e7a
c0017220:	c7 05 7c 96 02 c0 59 62 01 c0 	mov    DWORD PTR ds:0xc002967c,0xc0016259
c001722a:	c7 05 80 96 02 c0 f3 5e 01 c0 	mov    DWORD PTR ds:0xc0029680,0xc0015ef3
c0017234:	c7 05 84 96 02 c0 0d 5f 01 c0 	mov    DWORD PTR ds:0xc0029684,0xc0015f0d
c001723e:	c3                   	ret    

c001723f <Sys::systemCall(regs*, void*)>:
c001723f:	53                   	push   ebx
c0017240:	83 ec 08             	sub    esp,0x8
c0017243:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017247:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001724a:	83 f8 7f             	cmp    eax,0x7f
c001724d:	77 16                	ja     c0017265 <Sys::systemCall(regs*, void*)+0x26>
c001724f:	8b 14 85 c0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a40]
c0017256:	85 d2                	test   edx,edx
c0017258:	74 0b                	je     c0017265 <Sys::systemCall(regs*, void*)+0x26>
c001725a:	83 ec 0c             	sub    esp,0xc
c001725d:	53                   	push   ebx
c001725e:	ff d2                	call   edx
c0017260:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017263:	eb 0d                	jmp    c0017272 <Sys::systemCall(regs*, void*)+0x33>
c0017265:	52                   	push   edx
c0017266:	52                   	push   edx
c0017267:	50                   	push   eax
c0017268:	68 4d 68 02 c0       	push   0xc002684d
c001726d:	e8 cd 5d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001727a:	31 d2                	xor    edx,edx
c001727c:	83 c4 08             	add    esp,0x8
c001727f:	5b                   	pop    ebx
c0017280:	c3                   	ret    

c0017281 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017281:	55                   	push   ebp
c0017282:	57                   	push   edi
c0017283:	56                   	push   esi
c0017284:	53                   	push   ebx
c0017285:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001728b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017292:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0017299:	85 c0                	test   eax,eax
c001729b:	0f 95 c1             	setne  cl
c001729e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00172a6:	0f 94 c2             	sete   dl
c00172a9:	84 d1                	test   cl,dl
c00172ab:	74 23                	je     c00172d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00172ad:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c00172b3:	74 1b                	je     c00172d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c00172b5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00172bb:	89 da                	mov    edx,ebx
c00172bd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00172c3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00172c9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00172d0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00172d7:	05 ff 0f 00 00       	add    eax,0xfff
c00172dc:	83 ec 0c             	sub    esp,0xc
c00172df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172e3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00172e9:	c1 e8 0c             	shr    eax,0xc
c00172ec:	89 fe                	mov    esi,edi
c00172ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172f2:	c1 ee 0c             	shr    esi,0xc
c00172f5:	6a 01                	push   0x1
c00172f7:	e8 1d 4a ff ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c00172fc:	89 c5                	mov    ebp,eax
c00172fe:	58                   	pop    eax
c00172ff:	5a                   	pop    edx
c0017300:	56                   	push   esi
c0017301:	68 61 68 02 c0       	push   0xc0026861
c0017306:	e8 34 5d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001730b:	59                   	pop    ecx
c001730c:	58                   	pop    eax
c001730d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017311:	68 73 68 02 c0       	push   0xc0026873
c0017316:	e8 24 5d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001731b:	83 c4 10             	add    esp,0x10
c001731e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0017324:	0f 86 31 01 00 00    	jbe    c001745b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001732a:	c1 e6 0c             	shl    esi,0xc
c001732d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017330:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0017333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017337:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001733e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017341:	01 df                	add    edi,ebx
c0017343:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0017346:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001734a:	0f 84 08 01 00 00    	je     c0017458 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0017350:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0017356:	76 05                	jbe    c001735d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0017358:	bf 00 10 00 00       	mov    edi,0x1000
c001735d:	83 ec 0c             	sub    esp,0xc
c0017360:	31 d2                	xor    edx,edx
c0017362:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017369:	8b 08                	mov    ecx,DWORD PTR [eax]
c001736b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001736f:	50                   	push   eax
c0017370:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017374:	56                   	push   esi
c0017375:	52                   	push   edx
c0017376:	57                   	push   edi
c0017377:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001737e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017381:	83 c4 20             	add    esp,0x20
c0017384:	85 c0                	test   eax,eax
c0017386:	74 0a                	je     c0017392 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017388:	53                   	push   ebx
c0017389:	53                   	push   ebx
c001738a:	50                   	push   eax
c001738b:	68 85 68 02 c0       	push   0xc0026885
c0017390:	eb 0f                	jmp    c00173a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0017392:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017396:	74 20                	je     c00173b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0017398:	51                   	push   ecx
c0017399:	51                   	push   ecx
c001739a:	6a 00                	push   0x0
c001739c:	68 b0 68 02 c0       	push   0xc00268b0
c00173a1:	e8 99 5c ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00173a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173a9:	e8 9b 4c ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	31 c0                	xor    eax,eax
c00173b3:	e9 68 01 00 00       	jmp    c0017520 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c00173b8:	fa                   	cli    
c00173b9:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00173bf:	e8 46 30 ff ff       	call   c000a40a <Phys::allocatePage()>
c00173c4:	6a 07                	push   0x7
c00173c6:	89 c7                	mov    edi,eax
c00173c8:	55                   	push   ebp
c00173c9:	50                   	push   eax
c00173ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00173d2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173d8:	e8 e3 4f ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00173dd:	83 c4 0c             	add    esp,0xc
c00173e0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00173e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173ed:	6a 00                	push   0x0
c00173ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00173f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00173fd:	e8 18 4e ff ff       	call   c000c21a <VAS::mapOtherVASIn(bool, VAS*)>
c0017402:	58                   	pop    eax
c0017403:	5a                   	pop    edx
c0017404:	68 07 0c 00 00       	push   0xc07
c0017409:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001740d:	57                   	push   edi
c001740e:	89 ef                	mov    edi,ebp
c0017410:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017417:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001741d:	6a 00                	push   0x0
c001741f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017424:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017427:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001742d:	e8 4a 53 ff ff       	call   c000c77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017432:	b9 00 10 00 00       	mov    ecx,0x1000
c0017437:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017439:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c001743e:	83 c4 20             	add    esp,0x20
c0017441:	48                   	dec    eax
c0017442:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0017447:	85 c0                	test   eax,eax
c0017449:	75 01                	jne    c001744c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001744b:	fb                   	sti    
c001744c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0017453:	e9 df fe ff ff       	jmp    c0017337 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0017458:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001745b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0017463:	0f 86 a9 00 00 00    	jbe    c0017512 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017469:	fa                   	cli    
c001746a:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0017470:	51                   	push   ecx
c0017471:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017478:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001747e:	6a 00                	push   0x0
c0017480:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017485:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017488:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001748e:	e8 87 4d ff ff       	call   c000c21a <VAS::mapOtherVASIn(bool, VAS*)>
c0017493:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017497:	c1 e6 0c             	shl    esi,0xc
c001749a:	01 de                	add    esi,ebx
c001749c:	83 c4 10             	add    esp,0x10
c001749f:	39 de                	cmp    esi,ebx
c00174a1:	74 61                	je     c0017504 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00174a3:	e8 62 2f ff ff       	call   c000a40a <Phys::allocatePage()>
c00174a8:	6a 07                	push   0x7
c00174aa:	89 c7                	mov    edi,eax
c00174ac:	55                   	push   ebp
c00174ad:	50                   	push   eax
c00174ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174bc:	e8 ff 4e ff ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00174c1:	58                   	pop    eax
c00174c2:	5a                   	pop    edx
c00174c3:	68 07 0c 00 00       	push   0xc07
c00174c8:	53                   	push   ebx
c00174c9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174cf:	57                   	push   edi
c00174d0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00174d7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174dd:	6a 00                	push   0x0
c00174df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00174e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00174ed:	e8 8a 52 ff ff       	call   c000c77c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00174f2:	83 c4 1c             	add    esp,0x1c
c00174f5:	68 00 10 00 00       	push   0x1000
c00174fa:	6a 00                	push   0x0
c00174fc:	55                   	push   ebp
c00174fd:	e8 7a 91 fe ff       	call   c000067c <memset>
c0017502:	eb 98                	jmp    c001749c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017504:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0017509:	48                   	dec    eax
c001750a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001750f:	75 01                	jne    c0017512 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017511:	fb                   	sti    
c0017512:	83 ec 0c             	sub    esp,0xc
c0017515:	55                   	push   ebp
c0017516:	e8 2e 4b ff ff       	call   c000c049 <Virt::freeKernelVirtualPages(unsigned long)>
c001751b:	83 c4 10             	add    esp,0x10
c001751e:	b0 01                	mov    al,0x1
c0017520:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017526:	5b                   	pop    ebx
c0017527:	5e                   	pop    esi
c0017528:	5f                   	pop    edi
c0017529:	5d                   	pop    ebp
c001752a:	c3                   	ret    

c001752b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001752b:	55                   	push   ebp
c001752c:	57                   	push   edi
c001752d:	56                   	push   esi
c001752e:	53                   	push   ebx
c001752f:	83 ec 48             	sub    esp,0x48
c0017532:	68 14 01 00 00       	push   0x114
c0017537:	e8 17 28 ff ff       	call   c0009d53 <malloc>
c001753c:	83 c4 0c             	add    esp,0xc
c001753f:	89 c6                	mov    esi,eax
c0017541:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017545:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017549:	50                   	push   eax
c001754a:	e8 5b 60 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c001754f:	58                   	pop    eax
c0017550:	5a                   	pop    edx
c0017551:	6a 01                	push   0x1
c0017553:	56                   	push   esi
c0017554:	e8 2b 61 ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	85 c0                	test   eax,eax
c001755e:	0f 85 47 01 00 00    	jne    c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017564:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001756c:	83 ec 0c             	sub    esp,0xc
c001756f:	6a 34                	push   0x34
c0017571:	e8 dd 27 ff ff       	call   c0009d53 <malloc>
c0017576:	89 c3                	mov    ebx,eax
c0017578:	58                   	pop    eax
c0017579:	8b 06                	mov    eax,DWORD PTR [esi]
c001757b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001757f:	57                   	push   edi
c0017580:	53                   	push   ebx
c0017581:	6a 00                	push   0x0
c0017583:	6a 34                	push   0x34
c0017585:	56                   	push   esi
c0017586:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017589:	83 c4 20             	add    esp,0x20
c001758c:	85 c0                	test   eax,eax
c001758e:	0f 85 17 01 00 00    	jne    c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017594:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001759a:	0f 85 0b 01 00 00    	jne    c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00175a3:	85 c0                	test   eax,eax
c00175a5:	0f 84 00 01 00 00    	je     c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175ab:	31 d2                	xor    edx,edx
c00175ad:	55                   	push   ebp
c00175ae:	52                   	push   edx
c00175af:	50                   	push   eax
c00175b0:	56                   	push   esi
c00175b1:	e8 8c 61 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00175b6:	83 c4 10             	add    esp,0x10
c00175b9:	85 c0                	test   eax,eax
c00175bb:	0f 85 ea 00 00 00    	jne    c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175c1:	83 ec 0c             	sub    esp,0xc
c00175c4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175c7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175cf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175d3:	0f af c2             	imul   eax,edx
c00175d6:	50                   	push   eax
c00175d7:	e8 77 27 ff ff       	call   c0009d53 <malloc>
c00175dc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175e9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175ed:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175f1:	0f af c2             	imul   eax,edx
c00175f4:	99                   	cdq    
c00175f5:	52                   	push   edx
c00175f6:	50                   	push   eax
c00175f7:	56                   	push   esi
c00175f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175fb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00175fe:	83 c4 20             	add    esp,0x20
c0017601:	85 c0                	test   eax,eax
c0017603:	0f 84 a2 00 00 00    	je     c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017609:	31 d2                	xor    edx,edx
c001760b:	51                   	push   ecx
c001760c:	52                   	push   edx
c001760d:	50                   	push   eax
c001760e:	56                   	push   esi
c001760f:	e8 2e 61 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017614:	83 c4 10             	add    esp,0x10
c0017617:	85 c0                	test   eax,eax
c0017619:	0f 85 8c 00 00 00    	jne    c00176ab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001761f:	83 ec 0c             	sub    esp,0xc
c0017622:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017626:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001762a:	31 ed                	xor    ebp,ebp
c001762c:	0f af c2             	imul   eax,edx
c001762f:	50                   	push   eax
c0017630:	e8 1e 27 ff ff       	call   c0009d53 <malloc>
c0017635:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017637:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001763b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001763e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017642:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017646:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001764a:	0f af c2             	imul   eax,edx
c001764d:	99                   	cdq    
c001764e:	52                   	push   edx
c001764f:	50                   	push   eax
c0017650:	56                   	push   esi
c0017651:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017654:	83 c4 20             	add    esp,0x20
c0017657:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001765f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017663:	0f 86 80 00 00 00    	jbe    c00176e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017669:	0f b7 fd             	movzx  edi,bp
c001766c:	c1 e7 05             	shl    edi,0x5
c001766f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017673:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017676:	75 6b                	jne    c00176e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017678:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001767b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001767f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017686:	52                   	push   edx
c0017687:	31 d2                	xor    edx,edx
c0017689:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001768c:	52                   	push   edx
c001768d:	50                   	push   eax
c001768e:	56                   	push   esi
c001768f:	e8 ae 60 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017694:	83 c4 10             	add    esp,0x10
c0017697:	85 c0                	test   eax,eax
c0017699:	74 17                	je     c00176b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001769b:	83 ec 0c             	sub    esp,0xc
c001769e:	68 dc 68 02 c0       	push   0xc00268dc
c00176a3:	e8 97 59 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00176a8:	83 c4 10             	add    esp,0x10
c00176ab:	31 c0                	xor    eax,eax
c00176ad:	e9 87 00 00 00       	jmp    c0017739 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00176b2:	83 ec 0c             	sub    esp,0xc
c00176b5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00176b8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00176bb:	50                   	push   eax
c00176bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176c4:	56                   	push   esi
c00176c5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00176c9:	e8 b3 fb ff ff       	call   c0017281 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00176ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00176d6:	83 c4 20             	add    esp,0x20
c00176d9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00176dd:	73 04                	jae    c00176e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00176df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176e3:	45                   	inc    ebp
c00176e4:	e9 76 ff ff ff       	jmp    c001765f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00176e9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00176ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176f5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00176fb:	83 ec 0c             	sub    esp,0xc
c00176fe:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017704:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017709:	05 00 10 00 00       	add    eax,0x1000
c001770e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017715:	e8 49 26 ff ff       	call   c0009d63 <free>
c001771a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001771d:	e8 41 26 ff ff       	call   c0009d63 <free>
c0017722:	58                   	pop    eax
c0017723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017727:	e8 37 26 ff ff       	call   c0009d63 <free>
c001772c:	89 34 24             	mov    DWORD PTR [esp],esi
c001772f:	e8 ae 5f ff ff       	call   c000d6e2 <File::close()>
c0017734:	83 c4 10             	add    esp,0x10
c0017737:	b0 01                	mov    al,0x1
c0017739:	83 c4 3c             	add    esp,0x3c
c001773c:	5b                   	pop    ebx
c001773d:	5e                   	pop    esi
c001773e:	5f                   	pop    edi
c001773f:	5d                   	pop    ebp
c0017740:	c3                   	ret    

c0017741 <Thr::runtimeReferenceHelper()>:
c0017741:	83 ec 18             	sub    esp,0x18
c0017744:	68 e4 68 02 c0       	push   0xc00268e4
c0017749:	e8 f1 58 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001774e:	fa                   	cli    
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	eb fe                	jmp    c0017752 <Thr::runtimeReferenceHelper()+0x11>

c0017754 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017754:	57                   	push   edi
c0017755:	56                   	push   esi
c0017756:	53                   	push   ebx
c0017757:	31 db                	xor    ebx,ebx
c0017759:	39 1d 60 9f 02 c0    	cmp    DWORD PTR ds:0xc0029f60,ebx
c001775f:	7e 3c                	jle    c001779d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017761:	8b 34 9d e0 9e 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6120]
c0017768:	31 ff                	xor    edi,edi
c001776a:	39 3c 9d e0 9d 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6220],edi
c0017771:	7e 27                	jle    c001779a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017773:	50                   	push   eax
c0017774:	50                   	push   eax
c0017775:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017779:	8b 06                	mov    eax,DWORD PTR [esi]
c001777b:	03 04 9d 60 9e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd61a0]
c0017782:	50                   	push   eax
c0017783:	e8 3c 90 fe ff       	call   c00007c4 <strcmp>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	85 c0                	test   eax,eax
c001778d:	75 05                	jne    c0017794 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001778f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017792:	eb 0b                	jmp    c001779f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017794:	83 c6 10             	add    esi,0x10
c0017797:	47                   	inc    edi
c0017798:	eb d0                	jmp    c001776a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001779a:	43                   	inc    ebx
c001779b:	eb bc                	jmp    c0017759 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001779d:	31 c0                	xor    eax,eax
c001779f:	5b                   	pop    ebx
c00177a0:	5e                   	pop    esi
c00177a1:	5f                   	pop    edi
c00177a2:	c3                   	ret    

c00177a3 <Thr::loadKernelSymbolTable(char const*)>:
c00177a3:	55                   	push   ebp
c00177a4:	57                   	push   edi
c00177a5:	56                   	push   esi
c00177a6:	53                   	push   ebx
c00177a7:	83 ec 68             	sub    esp,0x68
c00177aa:	8b 35 b0 9f 02 c0    	mov    esi,DWORD PTR ds:0xc0029fb0
c00177b0:	68 14 01 00 00       	push   0x114
c00177b5:	e8 99 25 ff ff       	call   c0009d53 <malloc>
c00177ba:	83 c4 0c             	add    esp,0xc
c00177bd:	89 c3                	mov    ebx,eax
c00177bf:	56                   	push   esi
c00177c0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00177c4:	50                   	push   eax
c00177c5:	e8 e0 5d ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c00177ca:	5e                   	pop    esi
c00177cb:	5f                   	pop    edi
c00177cc:	6a 01                	push   0x1
c00177ce:	53                   	push   ebx
c00177cf:	e8 b0 5e ff ff       	call   c000d684 <File::open(FileOpenMode)>
c00177d4:	83 c4 10             	add    esp,0x10
c00177d7:	85 c0                	test   eax,eax
c00177d9:	74 0a                	je     c00177e5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00177db:	83 ec 0c             	sub    esp,0xc
c00177de:	68 06 69 02 c0       	push   0xc0026906
c00177e3:	eb 34                	jmp    c0017819 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00177e5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00177ed:	83 ec 0c             	sub    esp,0xc
c00177f0:	6a 34                	push   0x34
c00177f2:	e8 5c 25 ff ff       	call   c0009d53 <malloc>
c00177f7:	59                   	pop    ecx
c00177f8:	89 c7                	mov    edi,eax
c00177fa:	8d 74 24 34          	lea    esi,[esp+0x34]
c00177fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017800:	56                   	push   esi
c0017801:	57                   	push   edi
c0017802:	6a 00                	push   0x0
c0017804:	6a 34                	push   0x34
c0017806:	53                   	push   ebx
c0017807:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001780a:	83 c4 20             	add    esp,0x20
c001780d:	85 c0                	test   eax,eax
c001780f:	74 17                	je     c0017828 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017811:	83 ec 0c             	sub    esp,0xc
c0017814:	68 1d 69 02 c0       	push   0xc002691d
c0017819:	e8 d7 d7 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001781e:	83 c4 10             	add    esp,0x10
c0017821:	31 c0                	xor    eax,eax
c0017823:	e9 31 02 00 00       	jmp    c0017a59 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017828:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001782e:	75 e1                	jne    c0017811 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017830:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017833:	85 c0                	test   eax,eax
c0017835:	74 da                	je     c0017811 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017837:	52                   	push   edx
c0017838:	31 d2                	xor    edx,edx
c001783a:	52                   	push   edx
c001783b:	50                   	push   eax
c001783c:	53                   	push   ebx
c001783d:	e8 00 5f ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017842:	83 c4 10             	add    esp,0x10
c0017845:	85 c0                	test   eax,eax
c0017847:	75 c8                	jne    c0017811 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017849:	83 ec 0c             	sub    esp,0xc
c001784c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017850:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017854:	31 ed                	xor    ebp,ebp
c0017856:	0f af c2             	imul   eax,edx
c0017859:	50                   	push   eax
c001785a:	e8 f4 24 ff ff       	call   c0009d53 <malloc>
c001785f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017861:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017865:	89 34 24             	mov    DWORD PTR [esp],esi
c0017868:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001786c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017870:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017874:	0f af c2             	imul   eax,edx
c0017877:	99                   	cdq    
c0017878:	52                   	push   edx
c0017879:	50                   	push   eax
c001787a:	53                   	push   ebx
c001787b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001787e:	83 c4 20             	add    esp,0x20
c0017881:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017889:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017891:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017899:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00178a1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00178a5:	0f 86 aa 00 00 00    	jbe    c0017955 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00178ab:	0f b7 f5             	movzx  esi,bp
c00178ae:	6b f6 28             	imul   esi,esi,0x28
c00178b1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00178b5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00178b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178bc:	50                   	push   eax
c00178bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178c1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00178c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00178c7:	6b c0 28             	imul   eax,eax,0x28
c00178ca:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00178ce:	89 d0                	mov    eax,edx
c00178d0:	31 d2                	xor    edx,edx
c00178d2:	52                   	push   edx
c00178d3:	50                   	push   eax
c00178d4:	53                   	push   ebx
c00178d5:	e8 68 5e ff ff       	call   c000d742 <File::seek(unsigned long long)>
c00178da:	83 c4 0c             	add    esp,0xc
c00178dd:	6a 20                	push   0x20
c00178df:	6a 00                	push   0x0
c00178e1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178e5:	52                   	push   edx
c00178e6:	e8 91 8d fe ff       	call   c000067c <memset>
c00178eb:	58                   	pop    eax
c00178ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00178ee:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00178f2:	51                   	push   ecx
c00178f3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00178f7:	52                   	push   edx
c00178f8:	6a 00                	push   0x0
c00178fa:	6a 1f                	push   0x1f
c00178fc:	53                   	push   ebx
c00178fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017900:	83 c4 18             	add    esp,0x18
c0017903:	68 34 69 02 c0       	push   0xc0026934
c0017908:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001790c:	52                   	push   edx
c001790d:	e8 b2 8e fe ff       	call   c00007c4 <strcmp>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	85 c0                	test   eax,eax
c0017917:	75 0f                	jne    c0017928 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017919:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001791c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017920:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017928:	50                   	push   eax
c0017929:	50                   	push   eax
c001792a:	68 3c 69 02 c0       	push   0xc002693c
c001792f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017933:	50                   	push   eax
c0017934:	e8 8b 8e fe ff       	call   c00007c4 <strcmp>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	85 c0                	test   eax,eax
c001793e:	75 0f                	jne    c001794f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017940:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017943:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017947:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001794b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001794f:	45                   	inc    ebp
c0017950:	e9 4c ff ff ff       	jmp    c00178a1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017955:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001795a:	75 10                	jne    c001796c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	68 44 69 02 c0       	push   0xc0026944
c0017964:	e8 8c d6 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017971:	75 10                	jne    c0017983 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017973:	83 ec 0c             	sub    esp,0xc
c0017976:	68 44 69 02 c0       	push   0xc0026944
c001797b:	e8 75 d6 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	31 d2                	xor    edx,edx
c0017985:	50                   	push   eax
c0017986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798a:	52                   	push   edx
c001798b:	50                   	push   eax
c001798c:	53                   	push   ebx
c001798d:	e8 b0 5d ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017992:	5a                   	pop    edx
c0017993:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017997:	e8 b7 23 ff ff       	call   c0009d53 <malloc>
c001799c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179a4:	31 c9                	xor    ecx,ecx
c00179a6:	5e                   	pop    esi
c00179a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179a9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00179ad:	55                   	push   ebp
c00179ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179b2:	51                   	push   ecx
c00179b3:	52                   	push   edx
c00179b4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00179b8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00179bc:	53                   	push   ebx
c00179bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179c0:	83 c4 14             	add    esp,0x14
c00179c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179c7:	e8 87 23 ff ff       	call   c0009d53 <malloc>
c00179cc:	89 c6                	mov    esi,eax
c00179ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179d3:	56                   	push   esi
c00179d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00179dc:	51                   	push   ecx
c00179dd:	52                   	push   edx
c00179de:	53                   	push   ebx
c00179df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179e6:	8b 15 60 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f60
c00179ec:	83 c4 1c             	add    esp,0x1c
c00179ef:	c1 e8 04             	shr    eax,0x4
c00179f2:	89 04 95 e0 9d 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6220],eax
c00179f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179fd:	31 d2                	xor    edx,edx
c00179ff:	52                   	push   edx
c0017a00:	50                   	push   eax
c0017a01:	53                   	push   ebx
c0017a02:	e8 3b 5d ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017a07:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a09:	31 d2                	xor    edx,edx
c0017a0b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a0e:	56                   	push   esi
c0017a0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a13:	52                   	push   edx
c0017a14:	50                   	push   eax
c0017a15:	53                   	push   ebx
c0017a16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a19:	83 c4 14             	add    esp,0x14
c0017a1c:	53                   	push   ebx
c0017a1d:	e8 c0 5c ff ff       	call   c000d6e2 <File::close()>
c0017a22:	5d                   	pop    ebp
c0017a23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017a27:	e8 37 23 ff ff       	call   c0009d63 <free>
c0017a2c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a2f:	e8 2f 23 ff ff       	call   c0009d63 <free>
c0017a34:	a1 60 9f 02 c0       	mov    eax,ds:0xc0029f60
c0017a39:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017a3d:	8d 50 01             	lea    edx,[eax+0x1]
c0017a40:	89 0c 85 e0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6120],ecx
c0017a47:	89 34 85 60 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd61a0],esi
c0017a4e:	89 15 60 9f 02 c0    	mov    DWORD PTR ds:0xc0029f60,edx
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	b0 01                	mov    al,0x1
c0017a59:	83 c4 5c             	add    esp,0x5c
c0017a5c:	5b                   	pop    ebx
c0017a5d:	5e                   	pop    esi
c0017a5e:	5f                   	pop    edi
c0017a5f:	5d                   	pop    ebp
c0017a60:	c3                   	ret    

c0017a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017a61:	55                   	push   ebp
c0017a62:	57                   	push   edi
c0017a63:	56                   	push   esi
c0017a64:	53                   	push   ebx
c0017a65:	81 ec 68 03 00 00    	sub    esp,0x368
c0017a6b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017a72:	8b 1d b0 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029fb0
c0017a78:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017a7c:	68 14 01 00 00       	push   0x114
c0017a81:	e8 cd 22 ff ff       	call   c0009d53 <malloc>
c0017a86:	83 c4 0c             	add    esp,0xc
c0017a89:	89 c5                	mov    ebp,eax
c0017a8b:	53                   	push   ebx
c0017a8c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017a93:	50                   	push   eax
c0017a94:	e8 11 5b ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0017a99:	5e                   	pop    esi
c0017a9a:	5f                   	pop    edi
c0017a9b:	6a 01                	push   0x1
c0017a9d:	55                   	push   ebp
c0017a9e:	e8 e1 5b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0017aa3:	83 c4 10             	add    esp,0x10
c0017aa6:	85 c0                	test   eax,eax
c0017aa8:	0f 85 a7 06 00 00    	jne    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017aae:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ab6:	83 ec 0c             	sub    esp,0xc
c0017ab9:	6a 34                	push   0x34
c0017abb:	e8 93 22 ff ff       	call   c0009d53 <malloc>
c0017ac0:	5b                   	pop    ebx
c0017ac1:	89 c7                	mov    edi,eax
c0017ac3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ac7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017aca:	53                   	push   ebx
c0017acb:	57                   	push   edi
c0017acc:	6a 00                	push   0x0
c0017ace:	6a 34                	push   0x34
c0017ad0:	55                   	push   ebp
c0017ad1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ad4:	83 c4 20             	add    esp,0x20
c0017ad7:	85 c0                	test   eax,eax
c0017ad9:	0f 85 76 06 00 00    	jne    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017adf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017ae5:	0f 85 6a 06 00 00    	jne    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017aeb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017aee:	85 c0                	test   eax,eax
c0017af0:	0f 84 5f 06 00 00    	je     c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017af6:	31 d2                	xor    edx,edx
c0017af8:	51                   	push   ecx
c0017af9:	52                   	push   edx
c0017afa:	50                   	push   eax
c0017afb:	55                   	push   ebp
c0017afc:	e8 41 5c ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017b01:	83 c4 10             	add    esp,0x10
c0017b04:	85 c0                	test   eax,eax
c0017b06:	0f 85 49 06 00 00    	jne    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b0c:	83 ec 0c             	sub    esp,0xc
c0017b0f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017b12:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b16:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b1a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b1e:	0f af c2             	imul   eax,edx
c0017b21:	50                   	push   eax
c0017b22:	e8 2c 22 ff ff       	call   c0009d53 <malloc>
c0017b27:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b35:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017b39:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b3d:	0f af c2             	imul   eax,edx
c0017b40:	99                   	cdq    
c0017b41:	52                   	push   edx
c0017b42:	50                   	push   eax
c0017b43:	55                   	push   ebp
c0017b44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b47:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017b4a:	83 c4 20             	add    esp,0x20
c0017b4d:	85 c0                	test   eax,eax
c0017b4f:	0f 84 00 06 00 00    	je     c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b55:	52                   	push   edx
c0017b56:	31 d2                	xor    edx,edx
c0017b58:	52                   	push   edx
c0017b59:	50                   	push   eax
c0017b5a:	55                   	push   ebp
c0017b5b:	e8 e2 5b ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017b60:	83 c4 10             	add    esp,0x10
c0017b63:	85 c0                	test   eax,eax
c0017b65:	0f 85 ea 05 00 00    	jne    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017b72:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017b76:	31 f6                	xor    esi,esi
c0017b78:	0f af c2             	imul   eax,edx
c0017b7b:	50                   	push   eax
c0017b7c:	e8 d2 21 ff ff       	call   c0009d53 <malloc>
c0017b81:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017b84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b8b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b8f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017b93:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017b97:	0f af c2             	imul   eax,edx
c0017b9a:	99                   	cdq    
c0017b9b:	52                   	push   edx
c0017b9c:	50                   	push   eax
c0017b9d:	55                   	push   ebp
c0017b9e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ba1:	83 c4 20             	add    esp,0x20
c0017ba4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017ba8:	0f 86 8a 00 00 00    	jbe    c0017c38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017bae:	0f b7 de             	movzx  ebx,si
c0017bb1:	c1 e3 05             	shl    ebx,0x5
c0017bb4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017bb8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017bbb:	75 75                	jne    c0017c32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017bbd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017bc0:	31 d2                	xor    edx,edx
c0017bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bc6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bcd:	50                   	push   eax
c0017bce:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017bd1:	52                   	push   edx
c0017bd2:	50                   	push   eax
c0017bd3:	55                   	push   ebp
c0017bd4:	e8 69 5b ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	85 c0                	test   eax,eax
c0017bde:	0f 85 71 05 00 00    	jne    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017be4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017beb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017bee:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017bf2:	31 d2                	xor    edx,edx
c0017bf4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017bf8:	83 ec 0c             	sub    esp,0xc
c0017bfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017c06:	50                   	push   eax
c0017c07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0f:	52                   	push   edx
c0017c10:	50                   	push   eax
c0017c11:	55                   	push   ebp
c0017c12:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c15:	83 c4 1c             	add    esp,0x1c
c0017c18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c1b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c1e:	50                   	push   eax
c0017c1f:	6a 00                	push   0x0
c0017c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c25:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017c29:	50                   	push   eax
c0017c2a:	e8 4d 8a fe ff       	call   c000067c <memset>
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	46                   	inc    esi
c0017c33:	e9 6c ff ff ff       	jmp    c0017ba4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017c38:	53                   	push   ebx
c0017c39:	31 db                	xor    ebx,ebx
c0017c3b:	68 00 01 00 00       	push   0x100
c0017c40:	6a 00                	push   0x0
c0017c42:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c46:	50                   	push   eax
c0017c47:	e8 30 8a fe ff       	call   c000067c <memset>
c0017c4c:	83 c4 0c             	add    esp,0xc
c0017c4f:	68 00 01 00 00       	push   0x100
c0017c54:	6a 00                	push   0x0
c0017c56:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017c5d:	50                   	push   eax
c0017c5e:	e8 19 8a fe ff       	call   c000067c <memset>
c0017c63:	83 c4 10             	add    esp,0x10
c0017c66:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c6e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017c76:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017c7e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c86:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017c8e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017c92:	0f 86 30 01 00 00    	jbe    c0017dc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017c98:	0f b7 f3             	movzx  esi,bx
c0017c9b:	6b f6 28             	imul   esi,esi,0x28
c0017c9e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017ca2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ca5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ca9:	52                   	push   edx
c0017caa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cae:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017cb2:	8b 06                	mov    eax,DWORD PTR [esi]
c0017cb4:	6b d2 28             	imul   edx,edx,0x28
c0017cb7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017cbb:	31 d2                	xor    edx,edx
c0017cbd:	52                   	push   edx
c0017cbe:	50                   	push   eax
c0017cbf:	55                   	push   ebp
c0017cc0:	e8 7d 5a ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017cc5:	83 c4 0c             	add    esp,0xc
c0017cc8:	6a 20                	push   0x20
c0017cca:	6a 00                	push   0x0
c0017ccc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017cd3:	51                   	push   ecx
c0017cd4:	e8 a3 89 fe ff       	call   c000067c <memset>
c0017cd9:	59                   	pop    ecx
c0017cda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017cdd:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ce1:	52                   	push   edx
c0017ce2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017ce9:	51                   	push   ecx
c0017cea:	6a 00                	push   0x0
c0017cec:	6a 1f                	push   0x1f
c0017cee:	55                   	push   ebp
c0017cef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cf2:	83 c4 1c             	add    esp,0x1c
c0017cf5:	6a 09                	push   0x9
c0017cf7:	68 5e 69 02 c0       	push   0xc002695e
c0017cfc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017d03:	51                   	push   ecx
c0017d04:	e8 6f 88 fe ff       	call   c0000578 <memcmp>
c0017d09:	83 c4 10             	add    esp,0x10
c0017d0c:	85 c0                	test   eax,eax
c0017d0e:	75 21                	jne    c0017d31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d18:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017d20:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d23:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017d2a:	89 d0                	mov    eax,edx
c0017d2c:	40                   	inc    eax
c0017d2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d31:	50                   	push   eax
c0017d32:	6a 09                	push   0x9
c0017d34:	68 68 69 02 c0       	push   0xc0026968
c0017d39:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d40:	50                   	push   eax
c0017d41:	e8 32 88 fe ff       	call   c0000578 <memcmp>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	85 c0                	test   eax,eax
c0017d4b:	75 21                	jne    c0017d6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d55:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d59:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017d5d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d60:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017d67:	89 d0                	mov    eax,edx
c0017d69:	40                   	inc    eax
c0017d6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d6e:	50                   	push   eax
c0017d6f:	50                   	push   eax
c0017d70:	68 34 69 02 c0       	push   0xc0026934
c0017d75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d7c:	50                   	push   eax
c0017d7d:	e8 42 8a fe ff       	call   c00007c4 <strcmp>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	85 c0                	test   eax,eax
c0017d87:	75 0f                	jne    c0017d98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017d89:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d8c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d98:	50                   	push   eax
c0017d99:	50                   	push   eax
c0017d9a:	68 3c 69 02 c0       	push   0xc002693c
c0017d9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017da6:	50                   	push   eax
c0017da7:	e8 18 8a fe ff       	call   c00007c4 <strcmp>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	85 c0                	test   eax,eax
c0017db1:	75 0f                	jne    c0017dc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017db3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017db6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017dba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dbe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017dc2:	43                   	inc    ebx
c0017dc3:	e9 c6 fe ff ff       	jmp    c0017c8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017dc8:	31 d2                	xor    edx,edx
c0017dca:	50                   	push   eax
c0017dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dcf:	52                   	push   edx
c0017dd0:	50                   	push   eax
c0017dd1:	55                   	push   ebp
c0017dd2:	e8 6b 59 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017dd7:	58                   	pop    eax
c0017dd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ddc:	e8 72 1f ff ff       	call   c0009d53 <malloc>
c0017de1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017de4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017de8:	31 d2                	xor    edx,edx
c0017dea:	58                   	pop    eax
c0017deb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017def:	53                   	push   ebx
c0017df0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017df4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017df8:	52                   	push   edx
c0017df9:	50                   	push   eax
c0017dfa:	55                   	push   ebp
c0017dfb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017dfe:	83 c4 14             	add    esp,0x14
c0017e01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e05:	e8 49 1f ff ff       	call   c0009d53 <malloc>
c0017e0a:	31 d2                	xor    edx,edx
c0017e0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e10:	83 c4 0c             	add    esp,0xc
c0017e13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e17:	52                   	push   edx
c0017e18:	50                   	push   eax
c0017e19:	55                   	push   ebp
c0017e1a:	e8 23 59 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017e1f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e22:	31 d2                	xor    edx,edx
c0017e24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e2f:	52                   	push   edx
c0017e30:	50                   	push   eax
c0017e31:	55                   	push   ebp
c0017e32:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e35:	83 c4 20             	add    esp,0x20
c0017e38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e40:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017e44:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017e48:	0f 84 0b 03 00 00    	je     c0018159 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017e4e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017e55:	31 d2                	xor    edx,edx
c0017e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e5b:	c1 e8 03             	shr    eax,0x3
c0017e5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017e62:	51                   	push   ecx
c0017e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e67:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017e6b:	52                   	push   edx
c0017e6c:	50                   	push   eax
c0017e6d:	55                   	push   ebp
c0017e6e:	e8 cf 58 ff ff       	call   c000d742 <File::seek(unsigned long long)>
c0017e73:	5b                   	pop    ebx
c0017e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e78:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017e7f:	e8 cf 1e ff ff       	call   c0009d53 <malloc>
c0017e84:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017e87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e8b:	31 d2                	xor    edx,edx
c0017e8d:	5e                   	pop    esi
c0017e8e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017e92:	50                   	push   eax
c0017e93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e9b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017ea2:	52                   	push   edx
c0017ea3:	50                   	push   eax
c0017ea4:	55                   	push   ebp
c0017ea5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ea8:	83 c4 20             	add    esp,0x20
c0017eab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017eb3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017eb7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0017ebb:	0f 8d 7c 02 00 00    	jge    c001813d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017ec1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017ec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ec9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017ece:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017ed1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ed9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017edd:	89 d8                	mov    eax,ebx
c0017edf:	c1 e8 08             	shr    eax,0x8
c0017ee2:	89 c6                	mov    esi,eax
c0017ee4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ee8:	c1 e6 04             	shl    esi,0x4
c0017eeb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017eef:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017ef2:	85 d2                	test   edx,edx
c0017ef4:	0f 85 bf 00 00 00    	jne    c0017fb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017efa:	83 ec 0c             	sub    esp,0xc
c0017efd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f01:	03 06                	add    eax,DWORD PTR [esi]
c0017f03:	50                   	push   eax
c0017f04:	e8 4b f8 ff ff       	call   c0017754 <Thr::getAddressOfKernelSymbol(char const*)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	89 c2                	mov    edx,eax
c0017f0e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017f13:	85 c0                	test   eax,eax
c0017f15:	0f 85 9e 00 00 00    	jne    c0017fb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f1b:	83 ec 0c             	sub    esp,0xc
c0017f1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f22:	03 06                	add    eax,DWORD PTR [esi]
c0017f24:	50                   	push   eax
c0017f25:	e8 de 09 ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	89 c2                	mov    edx,eax
c0017f2f:	85 c0                	test   eax,eax
c0017f31:	0f 85 82 00 00 00    	jne    c0017fb9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017f37:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f3b:	50                   	push   eax
c0017f3c:	50                   	push   eax
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	03 06                	add    eax,DWORD PTR [esi]
c0017f43:	50                   	push   eax
c0017f44:	68 72 69 02 c0       	push   0xc0026972
c0017f49:	e8 f1 50 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0017f4e:	58                   	pop    eax
c0017f4f:	5a                   	pop    edx
c0017f50:	68 8c 69 02 c0       	push   0xc002698c
c0017f55:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f5c:	50                   	push   eax
c0017f5d:	e8 d6 87 fe ff       	call   c0000738 <strcpy>
c0017f62:	59                   	pop    ecx
c0017f63:	58                   	pop    eax
c0017f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f68:	03 06                	add    eax,DWORD PTR [esi]
c0017f6a:	50                   	push   eax
c0017f6b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f72:	50                   	push   eax
c0017f73:	e8 00 89 fe ff       	call   c0000878 <strcat>
c0017f78:	58                   	pop    eax
c0017f79:	5a                   	pop    edx
c0017f7a:	68 22 6a 02 c0       	push   0xc0026a22
c0017f7f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f86:	50                   	push   eax
c0017f87:	e8 ec 88 fe ff       	call   c0000878 <strcat>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017f94:	0f 84 5d 01 00 00    	je     c00180f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017f9a:	83 ec 0c             	sub    esp,0xc
c0017f9d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fa4:	50                   	push   eax
c0017fa5:	e8 4b d0 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fb1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fb5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017fb9:	80 fb 01             	cmp    bl,0x1
c0017fbc:	0f 85 88 00 00 00    	jne    c001804a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017fc2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017fc9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017fcd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017fd1:	01 ce                	add    esi,ecx
c0017fd3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017fd9:	0f 94 c0             	sete   al
c0017fdc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017fe2:	0f 94 c3             	sete   bl
c0017fe5:	09 c3                	or     ebx,eax
c0017fe7:	8b 06                	mov    eax,DWORD PTR [esi]
c0017fe9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017fee:	74 41                	je     c0018031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017ff0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017ff3:	84 db                	test   bl,bl
c0017ff5:	75 15                	jne    c001800c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017ff7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ffb:	66 83 f8 0c          	cmp    ax,0xc
c0017fff:	76 05                	jbe    c0018006 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0018001:	b8 0c 00 00 00       	mov    eax,0xc
c0018006:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001800a:	76 37                	jbe    c0018043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001800c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0018010:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018015:	0f 84 dc 00 00 00    	je     c00180f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001801b:	83 ec 0c             	sub    esp,0xc
c001801e:	68 a3 69 02 c0       	push   0xc00269a3
c0018023:	e8 cd cf ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0018028:	83 c4 10             	add    esp,0x10
c001802b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001802f:	eb 12                	jmp    c0018043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018031:	01 c1                	add    ecx,eax
c0018033:	84 db                	test   bl,bl
c0018035:	75 0c                	jne    c0018043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018037:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001803b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001803f:	77 02                	ja     c0018043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0018041:	01 d1                	add    ecx,edx
c0018043:	89 0e                	mov    DWORD PTR [esi],ecx
c0018045:	e9 ea 00 00 00       	jmp    c0018134 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001804a:	80 fb 02             	cmp    bl,0x2
c001804d:	75 7c                	jne    c00180cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001804f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0018056:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001805a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001805e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018064:	74 20                	je     c0018086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018066:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001806c:	74 18                	je     c0018086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001806e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018072:	b9 0a 00 00 00       	mov    ecx,0xa
c0018077:	66 83 f8 0e          	cmp    ax,0xe
c001807b:	77 03                	ja     c0018080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001807d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0018080:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018084:	76 1f                	jbe    c00180a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018086:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001808a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001808f:	74 66                	je     c00180f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018091:	83 ec 0c             	sub    esp,0xc
c0018094:	68 bf 69 02 c0       	push   0xc00269bf
c0018099:	e8 57 cf ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001809e:	83 c4 10             	add    esp,0x10
c00180a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00180a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00180a7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00180ac:	74 13                	je     c00180c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c00180ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00180b2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00180b9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00180bd:	01 c8                	add    eax,ecx
c00180bf:	eb 04                	jmp    c00180c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00180c1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00180c5:	01 c2                	add    edx,eax
c00180c7:	89 16                	mov    DWORD PTR [esi],edx
c00180c9:	eb 69                	jmp    c0018134 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00180cb:	0f b6 db             	movzx  ebx,bl
c00180ce:	50                   	push   eax
c00180cf:	50                   	push   eax
c00180d0:	53                   	push   ebx
c00180d1:	68 db 69 02 c0       	push   0xc00269db
c00180d6:	e8 64 4f ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00180db:	83 c4 10             	add    esp,0x10
c00180de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00180e3:	74 12                	je     c00180f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00180e5:	83 ec 0c             	sub    esp,0xc
c00180e8:	68 e6 69 02 c0       	push   0xc00269e6
c00180ed:	e8 03 cf ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c00180f2:	83 c4 10             	add    esp,0x10
c00180f5:	eb 3d                	jmp    c0018134 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00180f7:	83 ec 0c             	sub    esp,0xc
c00180fa:	55                   	push   ebp
c00180fb:	e8 e2 55 ff ff       	call   c000d6e2 <File::close()>
c0018100:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018103:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018109:	59                   	pop    ecx
c001810a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001810e:	e8 50 1c ff ff       	call   c0009d63 <free>
c0018113:	5b                   	pop    ebx
c0018114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018118:	e8 46 1c ff ff       	call   c0009d63 <free>
c001811d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018120:	e8 3e 1c ff ff       	call   c0009d63 <free>
c0018125:	5e                   	pop    esi
c0018126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001812a:	e8 34 1c ff ff       	call   c0009d63 <free>
c001812f:	83 c4 10             	add    esp,0x10
c0018132:	eb 21                	jmp    c0018155 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0018134:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0018138:	e9 76 fd ff ff       	jmp    c0017eb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001813d:	83 ec 0c             	sub    esp,0xc
c0018140:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018144:	e8 1a 1c ff ff       	call   c0009d63 <free>
c0018149:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001814d:	83 c4 10             	add    esp,0x10
c0018150:	e9 eb fc ff ff       	jmp    c0017e40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0018155:	31 c0                	xor    eax,eax
c0018157:	eb 33                	jmp    c001818c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0018159:	83 ec 0c             	sub    esp,0xc
c001815c:	55                   	push   ebp
c001815d:	e8 80 55 ff ff       	call   c000d6e2 <File::close()>
c0018162:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018165:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018168:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001816b:	58                   	pop    eax
c001816c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018170:	e8 ee 1b ff ff       	call   c0009d63 <free>
c0018175:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018178:	e8 e6 1b ff ff       	call   c0009d63 <free>
c001817d:	5a                   	pop    edx
c001817e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018182:	e8 dc 1b ff ff       	call   c0009d63 <free>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	b0 01                	mov    al,0x1
c001818c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018192:	5b                   	pop    ebx
c0018193:	5e                   	pop    esi
c0018194:	5f                   	pop    edi
c0018195:	5d                   	pop    ebp
c0018196:	c3                   	ret    

c0018197 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018197:	56                   	push   esi
c0018198:	31 d2                	xor    edx,edx
c001819a:	53                   	push   ebx
c001819b:	8b 1d c0 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297c0
c00181a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181a5:	39 d3                	cmp    ebx,edx
c00181a7:	7e 1b                	jle    c00181c4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00181a9:	8b 04 95 e0 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6620]
c00181b0:	39 c8                	cmp    eax,ecx
c00181b2:	77 0d                	ja     c00181c1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00181b4:	8b 34 95 e0 97 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6820]
c00181bb:	01 c6                	add    esi,eax
c00181bd:	39 ce                	cmp    esi,ecx
c00181bf:	77 05                	ja     c00181c6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00181c1:	42                   	inc    edx
c00181c2:	eb e1                	jmp    c00181a5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00181c4:	31 c0                	xor    eax,eax
c00181c6:	5b                   	pop    ebx
c00181c7:	5e                   	pop    esi
c00181c8:	c3                   	ret    

c00181c9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00181c9:	53                   	push   ebx
c00181ca:	31 c0                	xor    eax,eax
c00181cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181d0:	8b 1d c0 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297c0
c00181d6:	39 c3                	cmp    ebx,eax
c00181d8:	7e 22                	jle    c00181fc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00181da:	8b 14 85 e0 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6620]
c00181e1:	39 ca                	cmp    edx,ecx
c00181e3:	77 14                	ja     c00181f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181e5:	03 14 85 e0 97 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6820]
c00181ec:	39 ca                	cmp    edx,ecx
c00181ee:	76 09                	jbe    c00181f9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00181f0:	8b 04 85 e0 9b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6420]
c00181f7:	eb 05                	jmp    c00181fe <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00181f9:	40                   	inc    eax
c00181fa:	eb da                	jmp    c00181d6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00181fc:	31 c0                	xor    eax,eax
c00181fe:	5b                   	pop    ebx
c00181ff:	c3                   	ret    

c0018200 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018200:	53                   	push   ebx
c0018201:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018205:	53                   	push   ebx
c0018206:	e8 8c ff ff ff       	call   c0018197 <Thr::getDriverBaseFromAddress(unsigned long)>
c001820b:	5a                   	pop    edx
c001820c:	31 d2                	xor    edx,edx
c001820e:	85 c0                	test   eax,eax
c0018210:	74 04                	je     c0018216 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018212:	89 da                	mov    edx,ebx
c0018214:	29 c2                	sub    edx,eax
c0018216:	89 d0                	mov    eax,edx
c0018218:	5b                   	pop    ebx
c0018219:	c3                   	ret    

c001821a <Thr::loadDLL(char const*, bool)>:
c001821a:	55                   	push   ebp
c001821b:	57                   	push   edi
c001821c:	56                   	push   esi
c001821d:	53                   	push   ebx
c001821e:	81 ec 34 01 00 00    	sub    esp,0x134
c0018224:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001822b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0018232:	56                   	push   esi
c0018233:	68 fe 69 02 c0       	push   0xc00269fe
c0018238:	e8 02 4e ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001823d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018244:	e8 0a 1b ff ff       	call   c0009d53 <malloc>
c0018249:	83 c4 0c             	add    esp,0xc
c001824c:	89 c3                	mov    ebx,eax
c001824e:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0018254:	56                   	push   esi
c0018255:	50                   	push   eax
c0018256:	e8 4f 53 ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c001825b:	83 c4 10             	add    esp,0x10
c001825e:	85 db                	test   ebx,ebx
c0018260:	75 3c                	jne    c001829e <Thr::loadDLL(char const*, bool)+0x84>
c0018262:	89 f8                	mov    eax,edi
c0018264:	84 c0                	test   al,al
c0018266:	0f 84 d2 01 00 00    	je     c001843e <Thr::loadDLL(char const*, bool)+0x224>
c001826c:	55                   	push   ebp
c001826d:	55                   	push   ebp
c001826e:	68 0f 6a 02 c0       	push   0xc0026a0f
c0018273:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018277:	55                   	push   ebp
c0018278:	e8 bb 84 fe ff       	call   c0000738 <strcpy>
c001827d:	58                   	pop    eax
c001827e:	5a                   	pop    edx
c001827f:	56                   	push   esi
c0018280:	55                   	push   ebp
c0018281:	e8 f2 85 fe ff       	call   c0000878 <strcat>
c0018286:	59                   	pop    ecx
c0018287:	58                   	pop    eax
c0018288:	68 22 6a 02 c0       	push   0xc0026a22
c001828d:	55                   	push   ebp
c001828e:	e8 e5 85 fe ff       	call   c0000878 <strcat>
c0018293:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018296:	e8 5a cd ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	51                   	push   ecx
c001829f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00182a3:	50                   	push   eax
c00182a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182a8:	50                   	push   eax
c00182a9:	53                   	push   ebx
c00182aa:	e8 81 56 ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c00182af:	83 c4 10             	add    esp,0x10
c00182b2:	85 db                	test   ebx,ebx
c00182b4:	74 0c                	je     c00182c2 <Thr::loadDLL(char const*, bool)+0xa8>
c00182b6:	83 ec 0c             	sub    esp,0xc
c00182b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182bb:	53                   	push   ebx
c00182bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00182c7:	75 0a                	jne    c00182d3 <Thr::loadDLL(char const*, bool)+0xb9>
c00182c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182cd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00182d1:	75 3c                	jne    c001830f <Thr::loadDLL(char const*, bool)+0xf5>
c00182d3:	89 f8                	mov    eax,edi
c00182d5:	84 c0                	test   al,al
c00182d7:	0f 84 49 01 00 00    	je     c0018426 <Thr::loadDLL(char const*, bool)+0x20c>
c00182dd:	51                   	push   ecx
c00182de:	51                   	push   ecx
c00182df:	68 0f 6a 02 c0       	push   0xc0026a0f
c00182e4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00182e8:	53                   	push   ebx
c00182e9:	e8 4a 84 fe ff       	call   c0000738 <strcpy>
c00182ee:	5d                   	pop    ebp
c00182ef:	58                   	pop    eax
c00182f0:	56                   	push   esi
c00182f1:	53                   	push   ebx
c00182f2:	e8 81 85 fe ff       	call   c0000878 <strcat>
c00182f7:	58                   	pop    eax
c00182f8:	5a                   	pop    edx
c00182f9:	68 22 6a 02 c0       	push   0xc0026a22
c00182fe:	53                   	push   ebx
c00182ff:	e8 74 85 fe ff       	call   c0000878 <strcat>
c0018304:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018307:	e8 e9 cc ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	52                   	push   edx
c0018310:	6a 03                	push   0x3
c0018312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018316:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001831a:	05 ff 0f 00 00       	add    eax,0xfff
c001831f:	83 d2 00             	adc    edx,0x0
c0018322:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018326:	50                   	push   eax
c0018327:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c001832d:	e8 90 41 ff ff       	call   c000c4c2 <VAS::allocatePages(int, int)>
c0018332:	59                   	pop    ecx
c0018333:	89 c3                	mov    ebx,eax
c0018335:	5d                   	pop    ebp
c0018336:	50                   	push   eax
c0018337:	68 aa 49 02 c0       	push   0xc00249aa
c001833c:	e8 fe 4c ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018341:	89 34 24             	mov    DWORD PTR [esp],esi
c0018344:	e8 4f 83 fe ff       	call   c0000698 <strlen>
c0018349:	8b 2d c0 97 02 c0    	mov    ebp,DWORD PTR ds:0xc00297c0
c001834f:	40                   	inc    eax
c0018350:	89 04 24             	mov    DWORD PTR [esp],eax
c0018353:	e8 fb 19 ff ff       	call   c0009d53 <malloc>
c0018358:	89 04 ad e0 9b 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6420],eax
c001835f:	58                   	pop    eax
c0018360:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c0018365:	5a                   	pop    edx
c0018366:	56                   	push   esi
c0018367:	ff 34 85 e0 9b 02 c0 	push   DWORD PTR [eax*4-0x3ffd6420]
c001836e:	e8 c5 83 fe ff       	call   c0000738 <strcpy>
c0018373:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c0018378:	8d 50 01             	lea    edx,[eax+0x1]
c001837b:	89 1c 85 e0 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6620],ebx
c0018382:	89 15 c0 97 02 c0    	mov    DWORD PTR ds:0xc00297c0,edx
c0018388:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001838c:	83 c4 0c             	add    esp,0xc
c001838f:	89 14 85 e0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6820],edx
c0018396:	6a 01                	push   0x1
c0018398:	53                   	push   ebx
c0018399:	56                   	push   esi
c001839a:	e8 c2 f6 ff ff       	call   c0017a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001839f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00183ab:	0f 85 89 00 00 00    	jne    c001843a <Thr::loadDLL(char const*, bool)+0x220>
c00183b1:	89 f8                	mov    eax,edi
c00183b3:	84 c0                	test   al,al
c00183b5:	74 73                	je     c001842a <Thr::loadDLL(char const*, bool)+0x210>
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	68 24 6a 02 c0       	push   0xc0026a24
c00183bf:	e8 31 cc ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	eb 61                	jmp    c001842a <Thr::loadDLL(char const*, bool)+0x210>
c00183c9:	50                   	push   eax
c00183ca:	50                   	push   eax
c00183cb:	89 e8                	mov    eax,ebp
c00183cd:	c1 e0 0c             	shl    eax,0xc
c00183d0:	01 d8                	add    eax,ebx
c00183d2:	50                   	push   eax
c00183d3:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c00183d9:	e8 4c 3c ff ff       	call   c000c02a <VAS::getPageTableEntry(unsigned long)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00183e3:	a8 60                	test   al,0x60
c00183e5:	75 11                	jne    c00183f8 <Thr::loadDLL(char const*, bool)+0x1de>
c00183e7:	83 ec 0c             	sub    esp,0xc
c00183ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00183ef:	50                   	push   eax
c00183f0:	e8 92 1f ff ff       	call   c000a387 <Phys::freePage(unsigned long)>
c00183f5:	83 c4 10             	add    esp,0x10
c00183f8:	45                   	inc    ebp
c00183f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018401:	05 ff 0f 00 00       	add    eax,0xfff
c0018406:	bf 00 00 00 00       	mov    edi,0x0
c001840b:	83 d2 00             	adc    edx,0x0
c001840e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0018412:	c1 ea 0c             	shr    edx,0xc
c0018415:	39 c5                	cmp    ebp,eax
c0018417:	89 d1                	mov    ecx,edx
c0018419:	89 f8                	mov    eax,edi
c001841b:	19 c8                	sbb    eax,ecx
c001841d:	72 aa                	jb     c00183c9 <Thr::loadDLL(char const*, bool)+0x1af>
c001841f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018424:	75 18                	jne    c001843e <Thr::loadDLL(char const*, bool)+0x224>
c0018426:	31 db                	xor    ebx,ebx
c0018428:	eb 14                	jmp    c001843e <Thr::loadDLL(char const*, bool)+0x224>
c001842a:	83 ec 0c             	sub    esp,0xc
c001842d:	68 43 6a 02 c0       	push   0xc0026a43
c0018432:	e8 be cb ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0018437:	83 c4 10             	add    esp,0x10
c001843a:	31 ed                	xor    ebp,ebp
c001843c:	eb bb                	jmp    c00183f9 <Thr::loadDLL(char const*, bool)+0x1df>
c001843e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018444:	89 d8                	mov    eax,ebx
c0018446:	5b                   	pop    ebx
c0018447:	5e                   	pop    esi
c0018448:	5f                   	pop    edi
c0018449:	5d                   	pop    ebp
c001844a:	c3                   	ret    

c001844b <Thr::executeDLL(unsigned long, void*)>:
c001844b:	56                   	push   esi
c001844c:	53                   	push   ebx
c001844d:	52                   	push   edx
c001844e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018452:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018456:	85 db                	test   ebx,ebx
c0018458:	75 10                	jne    c001846a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001845a:	83 ec 0c             	sub    esp,0xc
c001845d:	68 5f 6a 02 c0       	push   0xc0026a5f
c0018462:	e8 8e cb ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	50                   	push   eax
c001846b:	50                   	push   eax
c001846c:	53                   	push   ebx
c001846d:	68 89 6a 02 c0       	push   0xc0026a89
c0018472:	e8 c8 4b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018477:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001847b:	89 d8                	mov    eax,ebx
c001847d:	83 c4 14             	add    esp,0x14
c0018480:	5b                   	pop    ebx
c0018481:	5e                   	pop    esi
c0018482:	ff e0                	jmp    eax

c0018484 <userModeEntryPoint(void*)>:
c0018484:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018489:	48                   	dec    eax
c001848a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001848f:	75 03                	jne    c0018494 <userModeEntryPoint(void*)+0x10>
c0018491:	fb                   	sti    
c0018492:	66 90                	xchg   ax,ax
c0018494:	fb                   	sti    
c0018495:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001849a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001849d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00184a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184a7:	e9 b3 7d fe ff       	jmp    c000025f <goToUsermode>

c00184ac <changeTSS>:
c00184ac:	83 ec 14             	sub    esp,0x14
c00184af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184b4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00184b7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00184bc:	c1 e2 15             	shl    edx,0x15
c00184bf:	29 d0                	sub    eax,edx
c00184c1:	50                   	push   eax
c00184c2:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00184c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00184cd:	05 7c 11 00 00       	add    eax,0x117c
c00184d2:	50                   	push   eax
c00184d3:	e8 94 31 ff ff       	call   c000b66c <TSS::setESP(unsigned long)>
c00184d8:	83 c4 1c             	add    esp,0x1c
c00184db:	c3                   	ret    

c00184dc <switchToThread(ThreadControlBlock*)>:
c00184dc:	57                   	push   edi
c00184dd:	8b 3d 84 9f 02 c0    	mov    edi,DWORD PTR ds:0xc0029f84
c00184e3:	56                   	push   esi
c00184e4:	85 ff                	test   edi,edi
c00184e6:	53                   	push   ebx
c00184e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184eb:	0f 85 93 01 00 00    	jne    c0018684 <switchToThread(ThreadControlBlock*)+0x1a8>
c00184f1:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c00184f4:	3c ff                	cmp    al,0xff
c00184f6:	0f 84 80 01 00 00    	je     c001867c <switchToThread(ThreadControlBlock*)+0x1a0>
c00184fc:	0f b6 d0             	movzx  edx,al
c00184ff:	b8 00 04 00 00       	mov    eax,0x400
c0018504:	29 d0                	sub    eax,edx
c0018506:	d1 f8                	sar    eax,1
c0018508:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001850b:	90                   	nop
c001850c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001850f:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0018514:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001851a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018521:	74 4d                	je     c0018570 <switchToThread(ThreadControlBlock*)+0x94>
c0018523:	0f 31                	rdtsc  
c0018525:	a3 c8 9f 02 c0       	mov    ds:0xc0029fc8,eax
c001852a:	89 c6                	mov    esi,eax
c001852c:	89 d7                	mov    edi,edx
c001852e:	2b 35 b8 9f 02 c0    	sub    esi,DWORD PTR ds:0xc0029fb8
c0018534:	89 15 cc 9f 02 c0    	mov    DWORD PTR ds:0xc0029fcc,edx
c001853a:	1b 3d bc 9f 02 c0    	sbb    edi,DWORD PTR ds:0xc0029fbc
c0018540:	89 35 c0 9f 02 c0    	mov    DWORD PTR ds:0xc0029fc0,esi
c0018546:	a3 b8 9f 02 c0       	mov    ds:0xc0029fb8,eax
c001854b:	89 3d c4 9f 02 c0    	mov    DWORD PTR ds:0xc0029fc4,edi
c0018551:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018557:	89 15 bc 9f 02 c0    	mov    DWORD PTR ds:0xc0029fbc,edx
c001855d:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0018560:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0018563:	01 c6                	add    esi,eax
c0018565:	11 d7                	adc    edi,edx
c0018567:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001856a:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001856d:	8d 76 00             	lea    esi,[esi+0x0]
c0018570:	83 ec 0c             	sub    esp,0xc
c0018573:	68 a8 6a 02 c0       	push   0xc0026aa8
c0018578:	e8 c2 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001857d:	83 c4 10             	add    esp,0x10
c0018580:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0018585:	8b b0 e0 01 00 00    	mov    esi,DWORD PTR [eax+0x1e0]
c001858b:	85 f6                	test   esi,esi
c001858d:	74 55                	je     c00185e4 <switchToThread(ThreadControlBlock*)+0x108>
c001858f:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c0018595:	80 7e 5e 00          	cmp    BYTE PTR [esi+0x5e],0x0
c0018599:	75 49                	jne    c00185e4 <switchToThread(ThreadControlBlock*)+0x108>
c001859b:	8b 46 55             	mov    eax,DWORD PTR [esi+0x55]
c001859e:	85 c0                	test   eax,eax
c00185a0:	0f 84 ee 00 00 00    	je     c0018694 <switchToThread(ThreadControlBlock*)+0x1b8>
c00185a6:	66 90                	xchg   ax,ax
c00185a8:	83 ec 08             	sub    esp,0x8
c00185ab:	50                   	push   eax
c00185ac:	68 b8 6a 02 c0       	push   0xc0026ab8
c00185b1:	e8 89 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00185b6:	5a                   	pop    edx
c00185b7:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00185bc:	59                   	pop    ecx
c00185bd:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00185c3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00185c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00185cb:	ff 71 55             	push   DWORD PTR [ecx+0x55]
c00185ce:	50                   	push   eax
c00185cf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00185d2:	c7 04 24 d3 6a 02 c0 	mov    DWORD PTR [esp],0xc0026ad3
c00185d9:	e8 61 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00185de:	83 c4 10             	add    esp,0x10
c00185e1:	8d 76 00             	lea    esi,[esi+0x0]
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	68 e1 6a 02 c0       	push   0xc0026ae1
c00185ec:	e8 4e 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00185f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00185f4:	e8 9e 7c fe ff       	call   c0000297 <switchToThreadASM>
c00185f9:	c7 04 24 f1 6a 02 c0 	mov    DWORD PTR [esp],0xc0026af1
c0018600:	e8 3a 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001860d:	8b b8 e0 01 00 00    	mov    edi,DWORD PTR [eax+0x1e0]
c0018613:	85 ff                	test   edi,edi
c0018615:	74 55                	je     c001866c <switchToThread(ThreadControlBlock*)+0x190>
c0018617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001861c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0018620:	75 4a                	jne    c001866c <switchToThread(ThreadControlBlock*)+0x190>
c0018622:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c0018625:	85 c0                	test   eax,eax
c0018627:	74 43                	je     c001866c <switchToThread(ThreadControlBlock*)+0x190>
c0018629:	83 ec 08             	sub    esp,0x8
c001862c:	50                   	push   eax
c001862d:	68 01 6b 02 c0       	push   0xc0026b01
c0018632:	e8 08 4a ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018637:	5a                   	pop    edx
c0018638:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001863d:	59                   	pop    ecx
c001863e:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0018644:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001864a:	8b 10                	mov    edx,DWORD PTR [eax]
c001864c:	ff 71 55             	push   DWORD PTR [ecx+0x55]
c001864f:	50                   	push   eax
c0018650:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0018653:	5b                   	pop    ebx
c0018654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018659:	5e                   	pop    esi
c001865a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001865d:	68 1a 6b 02 c0       	push   0xc0026b1a
c0018662:	e8 d8 49 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0018667:	83 c4 10             	add    esp,0x10
c001866a:	66 90                	xchg   ax,ax
c001866c:	c7 44 24 10 32 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026b32
c0018674:	5b                   	pop    ebx
c0018675:	5e                   	pop    esi
c0018676:	5f                   	pop    edi
c0018677:	e9 c3 49 ff ff       	jmp    c000d03f <Dbg::kprintf(char const*, ...)>
c001867c:	31 c0                	xor    eax,eax
c001867e:	e9 89 fe ff ff       	jmp    c001850c <switchToThread(ThreadControlBlock*)+0x30>
c0018683:	90                   	nop
c0018684:	5b                   	pop    ebx
c0018685:	c7 05 80 9f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x1
c001868f:	5e                   	pop    esi
c0018690:	5f                   	pop    edi
c0018691:	c3                   	ret    
c0018692:	66 90                	xchg   ax,ax
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	68 00 01 00 00       	push   0x100
c001869c:	e8 b2 16 ff ff       	call   c0009d53 <malloc>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	89 46 55             	mov    DWORD PTR [esi+0x55],eax
c00186a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00186ac:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c00186af:	e9 f4 fe ff ff       	jmp    c00185a8 <switchToThread(ThreadControlBlock*)+0xcc>

c00186b4 <Process::addArgs(char**)>:
c00186b4:	57                   	push   edi
c00186b5:	56                   	push   esi
c00186b6:	53                   	push   ebx
c00186b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186bb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00186bf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00186c9:	85 ff                	test   edi,edi
c00186cb:	74 43                	je     c0018710 <Process::addArgs(char**)+0x5c>
c00186cd:	8b 07                	mov    eax,DWORD PTR [edi]
c00186cf:	85 c0                	test   eax,eax
c00186d1:	74 3d                	je     c0018710 <Process::addArgs(char**)+0x5c>
c00186d3:	31 db                	xor    ebx,ebx
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	83 ec 0c             	sub    esp,0xc
c00186db:	50                   	push   eax
c00186dc:	e8 b7 7f fe ff       	call   c0000698 <strlen>
c00186e1:	40                   	inc    eax
c00186e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00186e5:	e8 69 16 ff ff       	call   c0009d53 <malloc>
c00186ea:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00186f1:	5a                   	pop    edx
c00186f2:	59                   	pop    ecx
c00186f3:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00186f6:	43                   	inc    ebx
c00186f7:	50                   	push   eax
c00186f8:	e8 3b 80 fe ff       	call   c0000738 <strcpy>
c00186fd:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018709:	85 c0                	test   eax,eax
c001870b:	75 cb                	jne    c00186d8 <Process::addArgs(char**)+0x24>
c001870d:	8d 76 00             	lea    esi,[esi+0x0]
c0018710:	5b                   	pop    ebx
c0018711:	5e                   	pop    esi
c0018712:	5f                   	pop    edi
c0018713:	c3                   	ret    

c0018714 <Process::Process(char const*, Process*, char**)>:
c0018714:	56                   	push   esi
c0018715:	53                   	push   ebx
c0018716:	83 ec 14             	sub    esp,0x14
c0018719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871d:	05 0c 02 00 00       	add    eax,0x20c
c0018722:	bb 07 00 00 00       	mov    ebx,0x7
c0018727:	89 c6                	mov    esi,eax
c0018729:	8d 76 00             	lea    esi,[esi+0x0]
c001872c:	85 db                	test   ebx,ebx
c001872e:	78 14                	js     c0018744 <Process::Process(char const*, Process*, char**)+0x30>
c0018730:	83 ec 0c             	sub    esp,0xc
c0018733:	56                   	push   esi
c0018734:	e8 df af 00 00       	call   c0023718 <ThreadControlBlock::ThreadControlBlock()>
c0018739:	83 c4 10             	add    esp,0x10
c001873c:	83 c6 5f             	add    esi,0x5f
c001873f:	4b                   	dec    ebx
c0018740:	eb ea                	jmp    c001872c <Process::Process(char const*, Process*, char**)+0x18>
c0018742:	66 90                	xchg   ax,ax
c0018744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018748:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001874f:	83 ec 0c             	sub    esp,0xc
c0018752:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018756:	e8 23 c7 ff ff       	call   c0014e7e <Krnl::newProcessEnv(Process*)>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	89 c2                	mov    edx,eax
c0018760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018764:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001876a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018777:	a1 90 84 02 c0       	mov    eax,ds:0xc0028490
c001877c:	8d 50 01             	lea    edx,[eax+0x1]
c001877f:	89 15 90 84 02 c0    	mov    DWORD PTR ds:0xc0028490,edx
c0018785:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018789:	89 02                	mov    DWORD PTR [edx],eax
c001878b:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001879a:	e8 b4 15 ff ff       	call   c0009d53 <malloc>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	89 c3                	mov    ebx,eax
c00187a4:	83 ec 08             	sub    esp,0x8
c00187a7:	6a 00                	push   0x0
c00187a9:	53                   	push   ebx
c00187aa:	e8 bb 40 ff ff       	call   c000c86a <VAS::VAS(bool)>
c00187af:	83 c4 10             	add    esp,0x10
c00187b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00187bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00187ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00187d2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00187d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00187e2:	85 c0                	test   eax,eax
c00187e4:	74 42                	je     c0018828 <Process::Process(char const*, Process*, char**)+0x114>
c00187e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00187f0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00187f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018804:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001880a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018814:	05 0c 01 00 00       	add    eax,0x10c
c0018819:	83 ec 08             	sub    esp,0x8
c001881c:	52                   	push   edx
c001881d:	50                   	push   eax
c001881e:	e8 15 7f fe ff       	call   c0000738 <strcpy>
c0018823:	83 c4 10             	add    esp,0x10
c0018826:	eb 64                	jmp    c001888c <Process::Process(char const*, Process*, char**)+0x178>
c0018828:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018837:	e8 17 15 ff ff       	call   c0009d53 <malloc>
c001883c:	83 c4 10             	add    esp,0x10
c001883f:	89 c3                	mov    ebx,eax
c0018841:	83 ec 08             	sub    esp,0x8
c0018844:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018848:	53                   	push   ebx
c0018849:	e8 32 2b ff ff       	call   c000b380 <VgaText::VgaText(char const*)>
c001884e:	83 c4 10             	add    esp,0x10
c0018851:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018855:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001885b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001885f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018865:	83 ec 0c             	sub    esp,0xc
c0018868:	50                   	push   eax
c0018869:	e8 d1 22 ff ff       	call   c000ab3f <addToTerminalCycle(VgaText*)>
c001886e:	83 c4 10             	add    esp,0x10
c0018871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018875:	05 0c 01 00 00       	add    eax,0x10c
c001887a:	83 ec 08             	sub    esp,0x8
c001887d:	68 42 6b 02 c0       	push   0xc0026b42
c0018882:	50                   	push   eax
c0018883:	e8 b0 7e fe ff       	call   c0000738 <strcpy>
c0018888:	83 c4 10             	add    esp,0x10
c001888b:	90                   	nop
c001888c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018890:	83 c0 0c             	add    eax,0xc
c0018893:	83 ec 08             	sub    esp,0x8
c0018896:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001889a:	50                   	push   eax
c001889b:	e8 98 7e fe ff       	call   c0000738 <strcpy>
c00188a0:	83 c4 10             	add    esp,0x10
c00188a3:	83 ec 08             	sub    esp,0x8
c00188a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00188aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188ae:	e8 01 fe ff ff       	call   c00186b4 <Process::addArgs(char**)>
c00188b3:	83 c4 10             	add    esp,0x10
c00188b6:	83 ec 08             	sub    esp,0x8
c00188b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188c1:	e8 65 ec ff ff       	call   c001752b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00188c6:	83 c4 10             	add    esp,0x10
c00188c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00188cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188d1:	83 f0 01             	xor    eax,0x1
c00188d4:	88 c2                	mov    dl,al
c00188d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188da:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00188e0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00188e5:	83 ec 08             	sub    esp,0x8
c00188e8:	50                   	push   eax
c00188e9:	68 9c 6b 02 c0       	push   0xc0026b9c
c00188ee:	e8 4c 47 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00188f3:	83 c4 10             	add    esp,0x10
c00188f6:	90                   	nop
c00188f7:	83 c4 14             	add    esp,0x14
c00188fa:	5b                   	pop    ebx
c00188fb:	5e                   	pop    esi
c00188fc:	c3                   	ret    
c00188fd:	90                   	nop
c00188fe:	66 90                	xchg   ax,ax

c0018900 <Process::Process(bool, char const*, Process*, char**)>:
c0018900:	56                   	push   esi
c0018901:	53                   	push   ebx
c0018902:	83 ec 24             	sub    esp,0x24
c0018905:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018909:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001890d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018911:	05 0c 02 00 00       	add    eax,0x20c
c0018916:	bb 07 00 00 00       	mov    ebx,0x7
c001891b:	89 c6                	mov    esi,eax
c001891d:	8d 76 00             	lea    esi,[esi+0x0]
c0018920:	85 db                	test   ebx,ebx
c0018922:	78 14                	js     c0018938 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018924:	83 ec 0c             	sub    esp,0xc
c0018927:	56                   	push   esi
c0018928:	e8 eb ad 00 00       	call   c0023718 <ThreadControlBlock::ThreadControlBlock()>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	83 c6 5f             	add    esi,0x5f
c0018933:	4b                   	dec    ebx
c0018934:	eb ea                	jmp    c0018920 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018936:	66 90                	xchg   ax,ax
c0018938:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001893c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018943:	83 ec 0c             	sub    esp,0xc
c0018946:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001894a:	e8 2f c5 ff ff       	call   c0014e7e <Krnl::newProcessEnv(Process*)>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	89 c2                	mov    edx,eax
c0018954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018958:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001895e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018962:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001896b:	a1 90 84 02 c0       	mov    eax,ds:0xc0028490
c0018970:	8d 50 01             	lea    edx,[eax+0x1]
c0018973:	89 15 90 84 02 c0    	mov    DWORD PTR ds:0xc0028490,edx
c0018979:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001897d:	89 02                	mov    DWORD PTR [edx],eax
c001897f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018987:	83 ec 0c             	sub    esp,0xc
c001898a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001898e:	e8 c0 13 ff ff       	call   c0009d53 <malloc>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	89 c3                	mov    ebx,eax
c0018998:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001899d:	83 ec 08             	sub    esp,0x8
c00189a0:	50                   	push   eax
c00189a1:	53                   	push   ebx
c00189a2:	e8 c3 3e ff ff       	call   c000c86a <VAS::VAS(bool)>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ae:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00189b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189b8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00189c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00189ca:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00189d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189da:	85 c0                	test   eax,eax
c00189dc:	74 42                	je     c0018a20 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00189de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189e2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00189e8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00189ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189f2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00189f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a02:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a0c:	05 0c 01 00 00       	add    eax,0x10c
c0018a11:	83 ec 08             	sub    esp,0x8
c0018a14:	52                   	push   edx
c0018a15:	50                   	push   eax
c0018a16:	e8 1d 7d fe ff       	call   c0000738 <strcpy>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	eb 64                	jmp    c0018a84 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018a20:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018a28:	83 ec 0c             	sub    esp,0xc
c0018a2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018a2f:	e8 1f 13 ff ff       	call   c0009d53 <malloc>
c0018a34:	83 c4 10             	add    esp,0x10
c0018a37:	89 c3                	mov    ebx,eax
c0018a39:	83 ec 08             	sub    esp,0x8
c0018a3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018a40:	53                   	push   ebx
c0018a41:	e8 3a 29 ff ff       	call   c000b380 <VgaText::VgaText(char const*)>
c0018a46:	83 c4 10             	add    esp,0x10
c0018a49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018a53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018a5d:	83 ec 0c             	sub    esp,0xc
c0018a60:	50                   	push   eax
c0018a61:	e8 d9 20 ff ff       	call   c000ab3f <addToTerminalCycle(VgaText*)>
c0018a66:	83 c4 10             	add    esp,0x10
c0018a69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a6d:	05 0c 01 00 00       	add    eax,0x10c
c0018a72:	83 ec 08             	sub    esp,0x8
c0018a75:	68 42 6b 02 c0       	push   0xc0026b42
c0018a7a:	50                   	push   eax
c0018a7b:	e8 b8 7c fe ff       	call   c0000738 <strcpy>
c0018a80:	83 c4 10             	add    esp,0x10
c0018a83:	90                   	nop
c0018a84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a88:	83 c0 0c             	add    eax,0xc
c0018a8b:	83 ec 08             	sub    esp,0x8
c0018a8e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018a92:	50                   	push   eax
c0018a93:	e8 a0 7c fe ff       	call   c0000738 <strcpy>
c0018a98:	83 c4 10             	add    esp,0x10
c0018a9b:	83 ec 08             	sub    esp,0x8
c0018a9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018aa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018aa6:	e8 09 fc ff ff       	call   c00186b4 <Process::addArgs(char**)>
c0018aab:	83 c4 10             	add    esp,0x10
c0018aae:	90                   	nop
c0018aaf:	83 c4 24             	add    esp,0x24
c0018ab2:	5b                   	pop    ebx
c0018ab3:	5e                   	pop    esi
c0018ab4:	c3                   	ret    
c0018ab5:	8d 76 00             	lea    esi,[esi+0x0]

c0018ab8 <taskStartupFunction>:
c0018ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018abd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018ac0:	c3                   	ret    
c0018ac1:	90                   	nop
c0018ac2:	66 90                	xchg   ax,ax

c0018ac4 <Semaphore::Semaphore(int)>:
c0018ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ac8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018acc:	89 10                	mov    DWORD PTR [eax],edx
c0018ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ad2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018add:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ae8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018aef:	90                   	nop
c0018af0:	c3                   	ret    
c0018af1:	90                   	nop
c0018af2:	66 90                	xchg   ax,ax

c0018af4 <Mutex::Mutex()>:
c0018af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018af8:	6a 01                	push   0x1
c0018afa:	50                   	push   eax
c0018afb:	e8 c4 ff ff ff       	call   c0018ac4 <Semaphore::Semaphore(int)>
c0018b00:	83 c4 08             	add    esp,0x8
c0018b03:	90                   	nop
c0018b04:	c3                   	ret    
c0018b05:	90                   	nop
c0018b06:	66 90                	xchg   ax,ax

c0018b08 <Process::createThread(void (*)(void*), void*, int)>:
c0018b08:	57                   	push   edi
c0018b09:	31 c9                	xor    ecx,ecx
c0018b0b:	56                   	push   esi
c0018b0c:	53                   	push   ebx
c0018b0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b11:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018b18:	89 f2                	mov    edx,esi
c0018b1a:	66 90                	xchg   ax,ax
c0018b1c:	0f b7 c2             	movzx  eax,dx
c0018b1f:	83 e2 01             	and    edx,0x1
c0018b22:	74 14                	je     c0018b38 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018b24:	d1 f8                	sar    eax,1
c0018b26:	41                   	inc    ecx
c0018b27:	89 c2                	mov    edx,eax
c0018b29:	83 f9 10             	cmp    ecx,0x10
c0018b2c:	75 ee                	jne    c0018b1c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018b2e:	31 db                	xor    ebx,ebx
c0018b30:	89 d8                	mov    eax,ebx
c0018b32:	5b                   	pop    ebx
c0018b33:	5e                   	pop    esi
c0018b34:	5f                   	pop    edi
c0018b35:	c3                   	ret    
c0018b36:	66 90                	xchg   ax,ax
c0018b38:	b8 01 00 00 00       	mov    eax,0x1
c0018b3d:	d3 e0                	shl    eax,cl
c0018b3f:	09 c6                	or     esi,eax
c0018b41:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018b44:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018b4b:	01 c0                	add    eax,eax
c0018b4d:	01 c8                	add    eax,ecx
c0018b4f:	8d 04 80             	lea    eax,[eax+eax*4]
c0018b52:	01 d8                	add    eax,ebx
c0018b54:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018b5b:	75 0b                	jne    c0018b68 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018b5d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018b67:	90                   	nop
c0018b68:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018b6e:	83 ec 08             	sub    esp,0x8
c0018b71:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b74:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018b77:	01 c0                	add    eax,eax
c0018b79:	01 c8                	add    eax,ecx
c0018b7b:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018b7e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018b81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018b87:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018b8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018b91:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018b97:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018b9d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018ba4:	89 ca                	mov    edx,ecx
c0018ba6:	f7 da                	neg    edx
c0018ba8:	c1 e2 15             	shl    edx,0x15
c0018bab:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bb1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018bb7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018bbb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018bc5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018bcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018bcf:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018bd5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018bdf:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018be9:	53                   	push   ebx
c0018bea:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018bef:	e8 c4 a8 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018bf4:	83 c4 10             	add    esp,0x10
c0018bf7:	89 d8                	mov    eax,ebx
c0018bf9:	5b                   	pop    ebx
c0018bfa:	5e                   	pop    esi
c0018bfb:	5f                   	pop    edi
c0018bfc:	c3                   	ret    
c0018bfd:	90                   	nop
c0018bfe:	66 90                	xchg   ax,ax

c0018c00 <Process::createUserThread()>:
c0018c00:	83 ec 0c             	sub    esp,0xc
c0018c03:	68 80 00 00 00       	push   0x80
c0018c08:	6a 00                	push   0x0
c0018c0a:	68 84 84 01 c0       	push   0xc0018484
c0018c0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c13:	e8 f0 fe ff ff       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c0018c18:	83 c4 1c             	add    esp,0x1c
c0018c1b:	c3                   	ret    

c0018c1c <setupMultitasking(void (*)())>:
c0018c1c:	56                   	push   esi
c0018c1d:	53                   	push   ebx
c0018c1e:	51                   	push   ecx
c0018c1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c23:	eb 13                	jmp    c0018c38 <setupMultitasking(void (*)())+0x1c>
c0018c25:	8d 76 00             	lea    esi,[esi+0x0]
c0018c28:	83 ec 0c             	sub    esp,0xc
c0018c2b:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018c30:	e8 cb a7 00 00       	call   c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c35:	83 c4 10             	add    esp,0x10
c0018c38:	83 ec 0c             	sub    esp,0xc
c0018c3b:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018c40:	e8 97 a7 00 00       	call   c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c45:	83 c4 10             	add    esp,0x10
c0018c48:	84 c0                	test   al,al
c0018c4a:	74 dc                	je     c0018c28 <setupMultitasking(void (*)())+0xc>
c0018c4c:	83 ec 0c             	sub    esp,0xc
c0018c4f:	68 1f 07 00 00       	push   0x71f
c0018c54:	e8 fa 10 ff ff       	call   c0009d53 <malloc>
c0018c59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c60:	89 c3                	mov    ebx,eax
c0018c62:	6a 00                	push   0x0
c0018c64:	68 46 6b 02 c0       	push   0xc0026b46
c0018c69:	6a 01                	push   0x1
c0018c6b:	50                   	push   eax
c0018c6c:	e8 8f fc ff ff       	call   c0018900 <Process::Process(bool, char const*, Process*, char**)>
c0018c71:	83 c4 14             	add    esp,0x14
c0018c74:	89 1d b0 9f 02 c0    	mov    DWORD PTR ds:0xc0029fb0,ebx
c0018c7a:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018c80:	e8 c8 21 ff ff       	call   c000ae4d <setActiveTerminal(VgaText*)>
c0018c85:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018c8d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018c97:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018c9d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018ca0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018caa:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018cb0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018cb6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018cc0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018cca:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018cd4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018cda:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018ce4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018cea:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018cf4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018cfa:	58                   	pop    eax
c0018cfb:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d01:	5a                   	pop    edx
c0018d02:	68 42 6b 02 c0       	push   0xc0026b42
c0018d07:	50                   	push   eax
c0018d08:	e8 2b 7a fe ff       	call   c0000738 <strcpy>
c0018d0d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018d14:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d18:	83 c4 14             	add    esp,0x14
c0018d1b:	5b                   	pop    ebx
c0018d1c:	5e                   	pop    esi
c0018d1d:	e9 67 75 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0018d22:	66 90                	xchg   ax,ax

c0018d24 <schedule()>:
c0018d24:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0018d29:	85 c0                	test   eax,eax
c0018d2b:	74 0b                	je     c0018d38 <schedule()+0x14>
c0018d2d:	c7 05 80 9f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x1
c0018d37:	c3                   	ret    
c0018d38:	53                   	push   ebx
c0018d39:	83 ec 14             	sub    esp,0x14
c0018d3c:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018d41:	e8 96 a6 00 00       	call   c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018d46:	83 c4 10             	add    esp,0x10
c0018d49:	84 c0                	test   al,al
c0018d4b:	75 3b                	jne    c0018d88 <schedule()+0x64>
c0018d4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018d55:	4a                   	dec    edx
c0018d56:	74 38                	je     c0018d90 <schedule()+0x6c>
c0018d58:	83 ec 0c             	sub    esp,0xc
c0018d5b:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018d60:	e8 93 a6 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d65:	c7 04 24 a4 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fa4
c0018d6c:	89 c3                	mov    ebx,eax
c0018d6e:	e8 8d a6 00 00       	call   c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d73:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018d7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018d7d:	e8 5a f7 ff ff       	call   c00184dc <switchToThread(ThreadControlBlock*)>
c0018d82:	83 c4 10             	add    esp,0x10
c0018d85:	8d 76 00             	lea    esi,[esi+0x0]
c0018d88:	83 c4 08             	add    esp,0x8
c0018d8b:	5b                   	pop    ebx
c0018d8c:	c3                   	ret    
c0018d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d90:	83 ec 08             	sub    esp,0x8
c0018d93:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018d9a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018da0:	68 a4 9f 02 c0       	push   0xc0029fa4
c0018da5:	e8 0e a7 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	eb a9                	jmp    c0018d58 <schedule()+0x34>
c0018daf:	90                   	nop

c0018db0 <Semaphore::tryAcquire()>:
c0018db0:	53                   	push   ebx
c0018db1:	83 ec 08             	sub    esp,0x8
c0018db4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018db8:	fa                   	cli    
c0018db9:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018dbe:	8d 50 01             	lea    edx,[eax+0x1]
c0018dc1:	89 15 88 9f 02 c0    	mov    DWORD PTR ds:0xc0029f88,edx
c0018dc7:	8b 15 84 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f84
c0018dcd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018dd0:	89 1d 84 9f 02 c0    	mov    DWORD PTR ds:0xc0029f84,ebx
c0018dd6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018dd9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018ddb:	7c 33                	jl     c0018e10 <Semaphore::tryAcquire()+0x60>
c0018ddd:	89 15 84 9f 02 c0    	mov    DWORD PTR ds:0xc0029f84,edx
c0018de3:	85 d2                	test   edx,edx
c0018de5:	75 0d                	jne    c0018df4 <Semaphore::tryAcquire()+0x44>
c0018de7:	8b 15 80 9f 02 c0    	mov    edx,DWORD PTR ds:0xc0029f80
c0018ded:	85 d2                	test   edx,edx
c0018def:	75 6b                	jne    c0018e5c <Semaphore::tryAcquire()+0xac>
c0018df1:	8d 76 00             	lea    esi,[esi+0x0]
c0018df4:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018df9:	85 c0                	test   eax,eax
c0018dfb:	74 0b                	je     c0018e08 <Semaphore::tryAcquire()+0x58>
c0018dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018e00:	31 c0                	xor    eax,eax
c0018e02:	83 c4 08             	add    esp,0x8
c0018e05:	5b                   	pop    ebx
c0018e06:	c3                   	ret    
c0018e07:	90                   	nop
c0018e08:	fb                   	sti    
c0018e09:	83 c4 08             	add    esp,0x8
c0018e0c:	5b                   	pop    ebx
c0018e0d:	c3                   	ret    
c0018e0e:	66 90                	xchg   ax,ax
c0018e10:	43                   	inc    ebx
c0018e11:	89 15 84 9f 02 c0    	mov    DWORD PTR ds:0xc0029f84,edx
c0018e17:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018e1a:	85 d2                	test   edx,edx
c0018e1c:	75 22                	jne    c0018e40 <Semaphore::tryAcquire()+0x90>
c0018e1e:	8b 0d 80 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029f80
c0018e24:	85 c9                	test   ecx,ecx
c0018e26:	74 18                	je     c0018e40 <Semaphore::tryAcquire()+0x90>
c0018e28:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c0018e32:	e8 ed fe ff ff       	call   c0018d24 <schedule()>
c0018e37:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018e3c:	48                   	dec    eax
c0018e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e40:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018e45:	85 c0                	test   eax,eax
c0018e47:	75 0b                	jne    c0018e54 <Semaphore::tryAcquire()+0xa4>
c0018e49:	fb                   	sti    
c0018e4a:	b0 01                	mov    al,0x1
c0018e4c:	83 c4 08             	add    esp,0x8
c0018e4f:	5b                   	pop    ebx
c0018e50:	c3                   	ret    
c0018e51:	8d 76 00             	lea    esi,[esi+0x0]
c0018e54:	b0 01                	mov    al,0x1
c0018e56:	83 c4 08             	add    esp,0x8
c0018e59:	5b                   	pop    ebx
c0018e5a:	c3                   	ret    
c0018e5b:	90                   	nop
c0018e5c:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c0018e66:	e8 b9 fe ff ff       	call   c0018d24 <schedule()>
c0018e6b:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018e70:	48                   	dec    eax
c0018e71:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018e76:	85 c0                	test   eax,eax
c0018e78:	75 86                	jne    c0018e00 <Semaphore::tryAcquire()+0x50>
c0018e7a:	eb 8c                	jmp    c0018e08 <Semaphore::tryAcquire()+0x58>

c0018e7c <Semaphore::assertLocked(char const*)>:
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e83:	fa                   	cli    
c0018e84:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0018e8a:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0018e8f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018e92:	89 0d 84 9f 02 c0    	mov    DWORD PTR ds:0xc0029f84,ecx
c0018e98:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018e9a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018e9d:	7c 29                	jl     c0018ec8 <Semaphore::assertLocked(char const*)+0x4c>
c0018e9f:	90                   	nop
c0018ea0:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c0018ea5:	85 c0                	test   eax,eax
c0018ea7:	75 0b                	jne    c0018eb4 <Semaphore::assertLocked(char const*)+0x38>
c0018ea9:	a1 80 9f 02 c0       	mov    eax,ds:0xc0029f80
c0018eae:	85 c0                	test   eax,eax
c0018eb0:	75 2e                	jne    c0018ee0 <Semaphore::assertLocked(char const*)+0x64>
c0018eb2:	66 90                	xchg   ax,ax
c0018eb4:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018eb9:	48                   	dec    eax
c0018eba:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018ebf:	75 03                	jne    c0018ec4 <Semaphore::assertLocked(char const*)+0x48>
c0018ec1:	fb                   	sti    
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	83 c4 0c             	add    esp,0xc
c0018ec7:	c3                   	ret    
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018ecf:	e8 21 c1 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0018ed4:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0018ed9:	83 c4 10             	add    esp,0x10
c0018edc:	48                   	dec    eax
c0018edd:	eb c1                	jmp    c0018ea0 <Semaphore::assertLocked(char const*)+0x24>
c0018edf:	90                   	nop
c0018ee0:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c0018eea:	e8 35 fe ff ff       	call   c0018d24 <schedule()>
c0018eef:	eb c3                	jmp    c0018eb4 <Semaphore::assertLocked(char const*)+0x38>
c0018ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0018ef4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018ef4:	83 ec 0c             	sub    esp,0xc
c0018ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f00:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f03:	e8 1c fe ff ff       	call   c0018d24 <schedule()>
c0018f08:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018f0d:	48                   	dec    eax
c0018f0e:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018f13:	75 03                	jne    c0018f18 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018f15:	fb                   	sti    
c0018f16:	66 90                	xchg   ax,ax
c0018f18:	83 c4 0c             	add    esp,0xc
c0018f1b:	c3                   	ret    

c0018f1c <blockTask(TaskState)>:
c0018f1c:	83 ec 0c             	sub    esp,0xc
c0018f1f:	fa                   	cli    
c0018f20:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0018f26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f32:	e8 ed fd ff ff       	call   c0018d24 <schedule()>
c0018f37:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018f3c:	48                   	dec    eax
c0018f3d:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018f42:	75 04                	jne    c0018f48 <blockTask(TaskState)+0x2c>
c0018f44:	fb                   	sti    
c0018f45:	8d 76 00             	lea    esi,[esi+0x0]
c0018f48:	83 c4 0c             	add    esp,0xc
c0018f4b:	c3                   	ret    

c0018f4c <waitTask(int, int*, int)>:
c0018f4c:	83 ec 18             	sub    esp,0x18
c0018f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f58:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018f5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f64:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f67:	6a 07                	push   0x7
c0018f69:	e8 ae ff ff ff       	call   c0018f1c <blockTask(TaskState)>
c0018f6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018f79:	85 d2                	test   edx,edx
c0018f7b:	74 0b                	je     c0018f88 <waitTask(int, int*, int)+0x3c>
c0018f7d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018f80:	89 02                	mov    DWORD PTR [edx],eax
c0018f82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f87:	90                   	nop
c0018f88:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018f8b:	83 c4 0c             	add    esp,0xc
c0018f8e:	c3                   	ret    
c0018f8f:	90                   	nop

c0018f90 <milliTenthSleepUntil(unsigned int)>:
c0018f90:	83 ec 0c             	sub    esp,0xc
c0018f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f97:	39 05 8c 90 02 c0    	cmp    DWORD PTR ds:0xc002908c,eax
c0018f9d:	76 05                	jbe    c0018fa4 <milliTenthSleepUntil(unsigned int)+0x14>
c0018f9f:	90                   	nop
c0018fa0:	83 c4 0c             	add    esp,0xc
c0018fa3:	c3                   	ret    
c0018fa4:	fa                   	cli    
c0018fa5:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0018fab:	83 ec 08             	sub    esp,0x8
c0018fae:	ff 05 84 9f 02 c0    	inc    DWORD PTR ds:0xc0029f84
c0018fb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018fba:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018fbd:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018fc3:	68 98 9f 02 c0       	push   0xc0029f98
c0018fc8:	e8 eb a4 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fcd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018fd4:	e8 43 ff ff ff       	call   c0018f1c <blockTask(TaskState)>
c0018fd9:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0018fde:	83 c4 10             	add    esp,0x10
c0018fe1:	48                   	dec    eax
c0018fe2:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c0018fe7:	85 c0                	test   eax,eax
c0018fe9:	75 09                	jne    c0018ff4 <milliTenthSleepUntil(unsigned int)+0x64>
c0018feb:	a1 80 9f 02 c0       	mov    eax,ds:0xc0029f80
c0018ff0:	85 c0                	test   eax,eax
c0018ff2:	75 14                	jne    c0019008 <milliTenthSleepUntil(unsigned int)+0x78>
c0018ff4:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0018ff9:	48                   	dec    eax
c0018ffa:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0018fff:	75 9f                	jne    c0018fa0 <milliTenthSleepUntil(unsigned int)+0x10>
c0019001:	fb                   	sti    
c0019002:	83 c4 0c             	add    esp,0xc
c0019005:	c3                   	ret    
c0019006:	66 90                	xchg   ax,ax
c0019008:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c0019012:	e8 0d fd ff ff       	call   c0018d24 <schedule()>
c0019017:	eb db                	jmp    c0018ff4 <milliTenthSleepUntil(unsigned int)+0x64>
c0019019:	8d 76 00             	lea    esi,[esi+0x0]

c001901c <milliTenthSleep(unsigned int)>:
c001901c:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c0019021:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0019025:	e9 66 ff ff ff       	jmp    c0018f90 <milliTenthSleepUntil(unsigned int)>
c001902a:	66 90                	xchg   ax,ax

c001902c <sleep(unsigned int)>:
c001902c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019030:	8d 04 80             	lea    eax,[eax+eax*4]
c0019033:	8d 04 80             	lea    eax,[eax+eax*4]
c0019036:	8d 04 80             	lea    eax,[eax+eax*4]
c0019039:	8d 04 80             	lea    eax,[eax+eax*4]
c001903c:	c1 e0 04             	shl    eax,0x4
c001903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019043:	eb d7                	jmp    c001901c <milliTenthSleep(unsigned int)>
c0019045:	90                   	nop
c0019046:	66 90                	xchg   ax,ax

c0019048 <Semaphore::acquire()>:
c0019048:	83 ec 0c             	sub    esp,0xc
c001904b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001904f:	fa                   	cli    
c0019050:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0019055:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c001905b:	8d 48 01             	lea    ecx,[eax+0x1]
c001905e:	89 0d 84 9f 02 c0    	mov    DWORD PTR ds:0xc0029f84,ecx
c0019064:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019067:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0019069:	7d 2d                	jge    c0019098 <Semaphore::acquire()+0x50>
c001906b:	41                   	inc    ecx
c001906c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001906f:	90                   	nop
c0019070:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c0019075:	85 c0                	test   eax,eax
c0019077:	75 0b                	jne    c0019084 <Semaphore::acquire()+0x3c>
c0019079:	a1 80 9f 02 c0       	mov    eax,ds:0xc0029f80
c001907e:	85 c0                	test   eax,eax
c0019080:	75 62                	jne    c00190e4 <Semaphore::acquire()+0x9c>
c0019082:	66 90                	xchg   ax,ax
c0019084:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019089:	48                   	dec    eax
c001908a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001908f:	75 03                	jne    c0019094 <Semaphore::acquire()+0x4c>
c0019091:	fb                   	sti    
c0019092:	66 90                	xchg   ax,ax
c0019094:	83 c4 0c             	add    esp,0xc
c0019097:	c3                   	ret    
c0019098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001909d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00190a4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00190a7:	85 c9                	test   ecx,ecx
c00190a9:	74 4d                	je     c00190f8 <Semaphore::acquire()+0xb0>
c00190ab:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00190ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190b4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00190b7:	90                   	nop
c00190b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190bd:	83 ec 0c             	sub    esp,0xc
c00190c0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00190c3:	68 c4 6b 02 c0       	push   0xc0026bc4
c00190c8:	e8 72 3f ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00190cd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00190d4:	e8 43 fe ff ff       	call   c0018f1c <blockTask(TaskState)>
c00190d9:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c00190de:	83 c4 10             	add    esp,0x10
c00190e1:	48                   	dec    eax
c00190e2:	eb 8c                	jmp    c0019070 <Semaphore::acquire()+0x28>
c00190e4:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c00190ee:	e8 31 fc ff ff       	call   c0018d24 <schedule()>
c00190f3:	eb 8f                	jmp    c0019084 <Semaphore::acquire()+0x3c>
c00190f5:	8d 76 00             	lea    esi,[esi+0x0]
c00190f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019100:	eb b6                	jmp    c00190b8 <Semaphore::acquire()+0x70>
c0019102:	66 90                	xchg   ax,ax

c0019104 <taskReturned>:
c0019104:	83 ec 18             	sub    esp,0x18
c0019107:	68 e4 6b 02 c0       	push   0xc0026be4
c001910c:	e8 e4 be ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0019111:	83 c4 10             	add    esp,0x10
c0019114:	83 ec 0c             	sub    esp,0xc
c0019117:	6a 02                	push   0x2
c0019119:	e8 fe fd ff ff       	call   c0018f1c <blockTask(TaskState)>
c001911e:	fa                   	cli    
c001911f:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019125:	e8 fa fb ff ff       	call   c0018d24 <schedule()>
c001912a:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	48                   	dec    eax
c0019133:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019138:	85 c0                	test   eax,eax
c001913a:	75 d8                	jne    c0019114 <taskReturned+0x10>
c001913c:	fb                   	sti    
c001913d:	eb d5                	jmp    c0019114 <taskReturned+0x10>
c001913f:	90                   	nop

c0019140 <Thr::processFromPID(int)>:
c0019140:	57                   	push   edi
c0019141:	56                   	push   esi
c0019142:	53                   	push   ebx
c0019143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019147:	fa                   	cli    
c0019148:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c001914e:	83 ec 0c             	sub    esp,0xc
c0019151:	68 a4 9f 02 c0       	push   0xc0029fa4
c0019156:	e8 9d a2 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	89 c7                	mov    edi,eax
c0019160:	eb 16                	jmp    c0019178 <Thr::processFromPID(int)+0x38>
c0019162:	66 90                	xchg   ax,ax
c0019164:	83 ec 0c             	sub    esp,0xc
c0019167:	68 a4 9f 02 c0       	push   0xc0029fa4
c001916c:	e8 87 a2 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019171:	83 c4 10             	add    esp,0x10
c0019174:	39 f8                	cmp    eax,edi
c0019176:	74 4c                	je     c00191c4 <Thr::processFromPID(int)+0x84>
c0019178:	83 ec 0c             	sub    esp,0xc
c001917b:	68 a4 9f 02 c0       	push   0xc0029fa4
c0019180:	e8 73 a2 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019185:	c7 04 24 a4 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fa4
c001918c:	89 c3                	mov    ebx,eax
c001918e:	e8 6d a2 00 00       	call   c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019193:	58                   	pop    eax
c0019194:	5a                   	pop    edx
c0019195:	53                   	push   ebx
c0019196:	68 a4 9f 02 c0       	push   0xc0029fa4
c001919b:	e8 18 a3 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00191a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	39 30                	cmp    DWORD PTR [eax],esi
c00191a8:	75 ba                	jne    c0019164 <Thr::processFromPID(int)+0x24>
c00191aa:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00191af:	48                   	dec    eax
c00191b0:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00191b5:	74 09                	je     c00191c0 <Thr::processFromPID(int)+0x80>
c00191b7:	90                   	nop
c00191b8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00191bb:	5b                   	pop    ebx
c00191bc:	5e                   	pop    esi
c00191bd:	5f                   	pop    edi
c00191be:	c3                   	ret    
c00191bf:	90                   	nop
c00191c0:	fb                   	sti    
c00191c1:	eb f5                	jmp    c00191b8 <Thr::processFromPID(int)+0x78>
c00191c3:	90                   	nop
c00191c4:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00191c9:	48                   	dec    eax
c00191ca:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00191cf:	75 07                	jne    c00191d8 <Thr::processFromPID(int)+0x98>
c00191d1:	fb                   	sti    
c00191d2:	5b                   	pop    ebx
c00191d3:	5e                   	pop    esi
c00191d4:	5f                   	pop    edi
c00191d5:	c3                   	ret    
c00191d6:	66 90                	xchg   ax,ax
c00191d8:	5b                   	pop    ebx
c00191d9:	31 c0                	xor    eax,eax
c00191db:	5e                   	pop    esi
c00191dc:	5f                   	pop    edi
c00191dd:	c3                   	ret    
c00191de:	66 90                	xchg   ax,ax

c00191e0 <unblockTask(ThreadControlBlock*)>:
c00191e0:	53                   	push   ebx
c00191e1:	83 ec 08             	sub    esp,0x8
c00191e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191e8:	fa                   	cli    
c00191e9:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00191ef:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00191f2:	85 c0                	test   eax,eax
c00191f4:	74 66                	je     c001925c <unblockTask(ThreadControlBlock*)+0x7c>
c00191f6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00191f9:	48                   	dec    eax
c00191fa:	74 38                	je     c0019234 <unblockTask(ThreadControlBlock*)+0x54>
c00191fc:	83 ec 0c             	sub    esp,0xc
c00191ff:	68 a4 9f 02 c0       	push   0xc0029fa4
c0019204:	e8 ef a1 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	85 c0                	test   eax,eax
c001920e:	75 1c                	jne    c001922c <unblockTask(ThreadControlBlock*)+0x4c>
c0019210:	eb 5e                	jmp    c0019270 <unblockTask(ThreadControlBlock*)+0x90>
c0019212:	66 90                	xchg   ax,ax
c0019214:	83 ec 08             	sub    esp,0x8
c0019217:	50                   	push   eax
c0019218:	68 a4 9f 02 c0       	push   0xc0029fa4
c001921d:	e8 86 a5 00 00       	call   c00237a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0019222:	83 c4 10             	add    esp,0x10
c0019225:	85 c0                	test   eax,eax
c0019227:	74 47                	je     c0019270 <unblockTask(ThreadControlBlock*)+0x90>
c0019229:	8d 76 00             	lea    esi,[esi+0x0]
c001922c:	39 c3                	cmp    ebx,eax
c001922e:	75 e4                	jne    c0019214 <unblockTask(ThreadControlBlock*)+0x34>
c0019230:	eb 12                	jmp    c0019244 <unblockTask(ThreadControlBlock*)+0x64>
c0019232:	66 90                	xchg   ax,ax
c0019234:	83 ec 0c             	sub    esp,0xc
c0019237:	68 64 6b 02 c0       	push   0xc0026b64
c001923c:	e8 fe 3d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0019241:	83 c4 10             	add    esp,0x10
c0019244:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019249:	48                   	dec    eax
c001924a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001924f:	75 03                	jne    c0019254 <unblockTask(ThreadControlBlock*)+0x74>
c0019251:	fb                   	sti    
c0019252:	66 90                	xchg   ax,ax
c0019254:	83 c4 08             	add    esp,0x8
c0019257:	5b                   	pop    ebx
c0019258:	c3                   	ret    
c0019259:	8d 76 00             	lea    esi,[esi+0x0]
c001925c:	83 ec 0c             	sub    esp,0xc
c001925f:	68 4d 6b 02 c0       	push   0xc0026b4d
c0019264:	e8 d6 3d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0019269:	83 c4 10             	add    esp,0x10
c001926c:	eb d6                	jmp    c0019244 <unblockTask(ThreadControlBlock*)+0x64>
c001926e:	66 90                	xchg   ax,ax
c0019270:	83 ec 08             	sub    esp,0x8
c0019273:	53                   	push   ebx
c0019274:	68 a4 9f 02 c0       	push   0xc0029fa4
c0019279:	e8 3a a2 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001927e:	83 c4 10             	add    esp,0x10
c0019281:	eb c1                	jmp    c0019244 <unblockTask(ThreadControlBlock*)+0x64>
c0019283:	90                   	nop

c0019284 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019284:	55                   	push   ebp
c0019285:	57                   	push   edi
c0019286:	56                   	push   esi
c0019287:	53                   	push   ebx
c0019288:	83 ec 1c             	sub    esp,0x1c
c001928b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001928f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019292:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0019298:	85 ff                	test   edi,edi
c001929a:	7e 24                	jle    c00192c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c001929c:	31 f6                	xor    esi,esi
c001929e:	66 90                	xchg   ax,ax
c00192a0:	83 ec 0c             	sub    esp,0xc
c00192a3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00192aa:	46                   	inc    esi
c00192ab:	e8 b3 0a ff ff       	call   c0009d63 <free>
c00192b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00192b3:	83 c4 10             	add    esp,0x10
c00192b6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00192bc:	7f e2                	jg     c00192a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00192be:	66 90                	xchg   ax,ax
c00192c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00192ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00192cf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00192d2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00192d5:	d3 c0                	rol    eax,cl
c00192d7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00192de:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00192e1:	89 f7                	mov    edi,esi
c00192e3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00192eb:	0f 85 73 01 00 00    	jne    c0019464 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00192f1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00192f7:	85 ed                	test   ebp,ebp
c00192f9:	74 1d                	je     c0019318 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00192fb:	83 ec 0c             	sub    esp,0xc
c00192fe:	55                   	push   ebp
c00192ff:	e8 96 ba ff ff       	call   c0014d9a <EnvVarContainer::~EnvVarContainer()>
c0019304:	59                   	pop    ecx
c0019305:	5e                   	pop    esi
c0019306:	6a 0c                	push   0xc
c0019308:	55                   	push   ebp
c0019309:	e8 50 3c ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001930e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019311:	83 c4 10             	add    esp,0x10
c0019314:	89 f7                	mov    edi,esi
c0019316:	66 90                	xchg   ax,ax
c0019318:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001931e:	85 c0                	test   eax,eax
c0019320:	0f 84 b2 00 00 00    	je     c00193d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0019326:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0019329:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001932d:	31 c9                	xor    ecx,ecx
c001932f:	eb 17                	jmp    c0019348 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0019331:	8d 76 00             	lea    esi,[esi+0x0]
c0019334:	41                   	inc    ecx
c0019335:	83 f9 10             	cmp    ecx,0x10
c0019338:	0f 84 9a 00 00 00    	je     c00193d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001933e:	66 90                	xchg   ax,ax
c0019340:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019346:	66 90                	xchg   ax,ax
c0019348:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001934f:	d3 fa                	sar    edx,cl
c0019351:	83 e2 01             	and    edx,0x1
c0019354:	74 de                	je     c0019334 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019356:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0019359:	01 d2                	add    edx,edx
c001935b:	01 ca                	add    edx,ecx
c001935d:	8d 14 92             	lea    edx,[edx+edx*4]
c0019360:	01 d0                	add    eax,edx
c0019362:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019368:	83 fd 07             	cmp    ebp,0x7
c001936b:	75 c7                	jne    c0019334 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001936d:	05 40 02 00 00       	add    eax,0x240
c0019372:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0019375:	83 fd ff             	cmp    ebp,0xffffffff
c0019378:	0f 8c ee 00 00 00    	jl     c001946c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001937e:	0f 84 ac 01 00 00    	je     c0019530 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0019384:	85 ed                	test   ebp,ebp
c0019386:	0f 84 90 01 00 00    	je     c001951c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c001938c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001938e:	75 a4                	jne    c0019334 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0019390:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001939a:	01 d0                	add    eax,edx
c001939c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00193a9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00193ac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00193b2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00193b9:	50                   	push   eax
c00193ba:	e8 21 fe ff ff       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c00193bf:	83 c4 10             	add    esp,0x10
c00193c2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00193c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00193c9:	89 f7                	mov    edi,esi
c00193cb:	41                   	inc    ecx
c00193cc:	83 f9 10             	cmp    ecx,0x10
c00193cf:	0f 85 6b ff ff ff    	jne    c0019340 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00193d5:	8d 76 00             	lea    esi,[esi+0x0]
c00193d8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00193de:	85 c0                	test   eax,eax
c00193e0:	74 62                	je     c0019444 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00193e2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00193e8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00193ee:	74 54                	je     c0019444 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	68 a4 9f 02 c0       	push   0xc0029fa4
c00193f8:	e8 fb 9f 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193fd:	c7 04 24 a4 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fa4
c0019404:	89 c7                	mov    edi,eax
c0019406:	e8 d1 9f 00 00       	call   c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001940b:	83 c4 10             	add    esp,0x10
c001940e:	84 c0                	test   al,al
c0019410:	0f 84 ce 00 00 00    	je     c00194e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019416:	66 90                	xchg   ax,ax
c0019418:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001941b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0019421:	85 d2                	test   edx,edx
c0019423:	74 0f                	je     c0019434 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0019425:	83 ec 0c             	sub    esp,0xc
c0019428:	8b 02                	mov    eax,DWORD PTR [edx]
c001942a:	52                   	push   edx
c001942b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001942e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001943e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0019441:	8d 76 00             	lea    esi,[esi+0x0]
c0019444:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001944a:	85 db                	test   ebx,ebx
c001944c:	74 16                	je     c0019464 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001944e:	83 ec 0c             	sub    esp,0xc
c0019451:	53                   	push   ebx
c0019452:	e8 ed 2d ff ff       	call   c000c244 <VAS::~VAS()>
c0019457:	58                   	pop    eax
c0019458:	5a                   	pop    edx
c0019459:	6a 14                	push   0x14
c001945b:	53                   	push   ebx
c001945c:	e8 fd 3a ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	83 c4 1c             	add    esp,0x1c
c0019467:	5b                   	pop    ebx
c0019468:	5e                   	pop    esi
c0019469:	5f                   	pop    edi
c001946a:	5d                   	pop    ebp
c001946b:	c3                   	ret    
c001946c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019470:	83 ec 0c             	sub    esp,0xc
c0019473:	68 18 6c 02 c0       	push   0xc0026c18
c0019478:	e8 78 bb ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001947d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	89 f7                	mov    edi,esi
c0019485:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019489:	e9 a6 fe ff ff       	jmp    c0019334 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001948e:	66 90                	xchg   ax,ax
c0019490:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019496:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001949c:	75 1e                	jne    c00194bc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001949e:	83 ec 0c             	sub    esp,0xc
c00194a1:	68 80 6c 02 c0       	push   0xc0026c80
c00194a6:	e8 94 3b ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00194ab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00194b2:	e8 65 fa ff ff       	call   c0018f1c <blockTask(TaskState)>
c00194b7:	83 c4 10             	add    esp,0x10
c00194ba:	66 90                	xchg   ax,ax
c00194bc:	83 ec 08             	sub    esp,0x8
c00194bf:	56                   	push   esi
c00194c0:	68 a4 9f 02 c0       	push   0xc0029fa4
c00194c5:	e8 ee 9f 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194ca:	c7 04 24 a4 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fa4
c00194d1:	e8 22 9f 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00194d6:	83 c4 10             	add    esp,0x10
c00194d9:	39 f8                	cmp    eax,edi
c00194db:	0f 84 37 ff ff ff    	je     c0019418 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c00194e1:	8d 76 00             	lea    esi,[esi+0x0]
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	68 a4 9f 02 c0       	push   0xc0029fa4
c00194ec:	e8 07 9f 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00194f1:	c7 04 24 a4 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fa4
c00194f8:	89 c6                	mov    esi,eax
c00194fa:	e8 01 9f 00 00       	call   c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	39 f3                	cmp    ebx,esi
c0019504:	74 b6                	je     c00194bc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019506:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019509:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001950c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0019512:	75 a8                	jne    c00194bc <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019514:	e9 77 ff ff ff       	jmp    c0019490 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019519:	8d 76 00             	lea    esi,[esi+0x0]
c001951c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019520:	83 ec 0c             	sub    esp,0xc
c0019523:	68 4c 6c 02 c0       	push   0xc0026c4c
c0019528:	e9 4b ff ff ff       	jmp    c0019478 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001952d:	8d 76 00             	lea    esi,[esi+0x0]
c0019530:	8b 36                	mov    esi,DWORD PTR [esi]
c0019532:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019536:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0019539:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001953c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0019542:	01 d7                	add    edi,edx
c0019544:	89 f8                	mov    eax,edi
c0019546:	e9 51 fe ff ff       	jmp    c001939c <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001954b:	90                   	nop

c001954c <cleanerTaskFunction(void*)>:
c001954c:	53                   	push   ebx
c001954d:	83 ec 08             	sub    esp,0x8
c0019550:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019555:	48                   	dec    eax
c0019556:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001955b:	75 03                	jne    c0019560 <cleanerTaskFunction(void*)+0x14>
c001955d:	fb                   	sti    
c001955e:	66 90                	xchg   ax,ax
c0019560:	fa                   	cli    
c0019561:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019566:	80 3d 6c 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029f6c,0x0
c001956d:	8d 50 01             	lea    edx,[eax+0x1]
c0019570:	89 15 88 9f 02 c0    	mov    DWORD PTR ds:0xc0029f88,edx
c0019576:	0f 84 ac 00 00 00    	je     c0019628 <cleanerTaskFunction(void*)+0xdc>
c001957c:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019581:	85 c0                	test   eax,eax
c0019583:	75 03                	jne    c0019588 <cleanerTaskFunction(void*)+0x3c>
c0019585:	fb                   	sti    
c0019586:	66 90                	xchg   ax,ax
c0019588:	c6 05 6c 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029f6c,0x0
c001958f:	fa                   	cli    
c0019590:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019596:	ff 05 84 9f 02 c0    	inc    DWORD PTR ds:0xc0029f84
c001959c:	fa                   	cli    
c001959d:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00195a3:	eb 2b                	jmp    c00195d0 <cleanerTaskFunction(void*)+0x84>
c00195a5:	8d 76 00             	lea    esi,[esi+0x0]
c00195a8:	83 ec 0c             	sub    esp,0xc
c00195ab:	68 8c 9f 02 c0       	push   0xc0029f8c
c00195b0:	e8 43 9e 00 00       	call   c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00195b5:	c7 04 24 8c 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f8c
c00195bc:	89 c3                	mov    ebx,eax
c00195be:	e8 3d 9e 00 00       	call   c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00195c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195c6:	e8 b9 fc ff ff       	call   c0019284 <cleanupTerminatedTask(ThreadControlBlock*)>
c00195cb:	83 c4 10             	add    esp,0x10
c00195ce:	66 90                	xchg   ax,ax
c00195d0:	83 ec 0c             	sub    esp,0xc
c00195d3:	68 8c 9f 02 c0       	push   0xc0029f8c
c00195d8:	e8 ff 9d 00 00       	call   c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00195dd:	83 c4 10             	add    esp,0x10
c00195e0:	84 c0                	test   al,al
c00195e2:	74 c4                	je     c00195a8 <cleanerTaskFunction(void*)+0x5c>
c00195e4:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00195e9:	48                   	dec    eax
c00195ea:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00195ef:	75 03                	jne    c00195f4 <cleanerTaskFunction(void*)+0xa8>
c00195f1:	fb                   	sti    
c00195f2:	66 90                	xchg   ax,ax
c00195f4:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c00195f9:	48                   	dec    eax
c00195fa:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c00195ff:	0f 85 4b ff ff ff    	jne    c0019550 <cleanerTaskFunction(void*)+0x4>
c0019605:	a1 80 9f 02 c0       	mov    eax,ds:0xc0029f80
c001960a:	85 c0                	test   eax,eax
c001960c:	0f 84 3e ff ff ff    	je     c0019550 <cleanerTaskFunction(void*)+0x4>
c0019612:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c001961c:	e8 03 f7 ff ff       	call   c0018d24 <schedule()>
c0019621:	e9 2a ff ff ff       	jmp    c0019550 <cleanerTaskFunction(void*)+0x4>
c0019626:	66 90                	xchg   ax,ax
c0019628:	83 ec 0c             	sub    esp,0xc
c001962b:	6a 02                	push   0x2
c001962d:	e8 c2 f8 ff ff       	call   c0018ef4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	e9 4e ff ff ff       	jmp    c0019588 <cleanerTaskFunction(void*)+0x3c>
c001963a:	66 90                	xchg   ax,ax

c001963c <terminateTask(int)>:
c001963c:	83 ec 14             	sub    esp,0x14
c001963f:	fa                   	cli    
c0019640:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019646:	ff 05 84 9f 02 c0    	inc    DWORD PTR ds:0xc0029f84
c001964c:	fa                   	cli    
c001964d:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019653:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001965c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001965f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019664:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019667:	50                   	push   eax
c0019668:	68 8c 9f 02 c0       	push   0xc0029f8c
c001966d:	e8 46 9e 00 00       	call   c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019681:	a1 68 9f 02 c0       	mov    eax,ds:0xc0029f68
c0019686:	85 c0                	test   eax,eax
c0019688:	74 5e                	je     c00196e8 <terminateTask(int)+0xac>
c001968a:	83 ec 0c             	sub    esp,0xc
c001968d:	c6 05 6c 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029f6c,0x1
c0019694:	50                   	push   eax
c0019695:	e8 46 fb ff ff       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c001969a:	83 c4 10             	add    esp,0x10
c001969d:	8d 76 00             	lea    esi,[esi+0x0]
c00196a0:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00196a5:	48                   	dec    eax
c00196a6:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00196ab:	75 03                	jne    c00196b0 <terminateTask(int)+0x74>
c00196ad:	fb                   	sti    
c00196ae:	66 90                	xchg   ax,ax
c00196b0:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c00196b5:	48                   	dec    eax
c00196b6:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c00196bb:	75 0b                	jne    c00196c8 <terminateTask(int)+0x8c>
c00196bd:	83 3d 80 9f 02 c0 00 	cmp    DWORD PTR ds:0xc0029f80,0x0
c00196c4:	75 36                	jne    c00196fc <terminateTask(int)+0xc0>
c00196c6:	66 90                	xchg   ax,ax
c00196c8:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00196cd:	48                   	dec    eax
c00196ce:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00196d3:	75 03                	jne    c00196d8 <terminateTask(int)+0x9c>
c00196d5:	fb                   	sti    
c00196d6:	66 90                	xchg   ax,ax
c00196d8:	fa                   	cli    
c00196d9:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00196df:	90                   	nop
c00196e0:	e8 3f f6 ff ff       	call   c0018d24 <schedule()>
c00196e5:	eb e1                	jmp    c00196c8 <terminateTask(int)+0x8c>
c00196e7:	90                   	nop
c00196e8:	83 ec 0c             	sub    esp,0xc
c00196eb:	68 7b 6b 02 c0       	push   0xc0026b7b
c00196f0:	e8 4a 39 ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00196f5:	83 c4 10             	add    esp,0x10
c00196f8:	eb a6                	jmp    c00196a0 <terminateTask(int)+0x64>
c00196fa:	66 90                	xchg   ax,ax
c00196fc:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c0019706:	eb d8                	jmp    c00196e0 <terminateTask(int)+0xa4>

c0019708 <Thr::terminateFromIRQ(int)>:
c0019708:	83 ec 18             	sub    esp,0x18
c001970b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001970f:	e8 28 ff ff ff       	call   c001963c <terminateTask(int)>

c0019714 <Semaphore::release()>:
c0019714:	83 ec 0c             	sub    esp,0xc
c0019717:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001971b:	fa                   	cli    
c001971c:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c0019721:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019727:	8d 48 01             	lea    ecx,[eax+0x1]
c001972a:	89 0d 84 9f 02 c0    	mov    DWORD PTR ds:0xc0029f84,ecx
c0019730:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019733:	85 c9                	test   ecx,ecx
c0019735:	74 41                	je     c0019778 <Semaphore::release()+0x64>
c0019737:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001973a:	83 ec 0c             	sub    esp,0xc
c001973d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019740:	51                   	push   ecx
c0019741:	e8 9a fa ff ff       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c0019746:	a1 84 9f 02 c0       	mov    eax,ds:0xc0029f84
c001974b:	83 c4 10             	add    esp,0x10
c001974e:	48                   	dec    eax
c001974f:	90                   	nop
c0019750:	a3 84 9f 02 c0       	mov    ds:0xc0029f84,eax
c0019755:	85 c0                	test   eax,eax
c0019757:	75 0b                	jne    c0019764 <Semaphore::release()+0x50>
c0019759:	a1 80 9f 02 c0       	mov    eax,ds:0xc0029f80
c001975e:	85 c0                	test   eax,eax
c0019760:	75 1e                	jne    c0019780 <Semaphore::release()+0x6c>
c0019762:	66 90                	xchg   ax,ax
c0019764:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019769:	48                   	dec    eax
c001976a:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001976f:	75 03                	jne    c0019774 <Semaphore::release()+0x60>
c0019771:	fb                   	sti    
c0019772:	66 90                	xchg   ax,ax
c0019774:	83 c4 0c             	add    esp,0xc
c0019777:	c3                   	ret    
c0019778:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001977b:	eb d3                	jmp    c0019750 <Semaphore::release()+0x3c>
c001977d:	8d 76 00             	lea    esi,[esi+0x0]
c0019780:	c7 05 80 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029f80,0x0
c001978a:	e8 95 f5 ff ff       	call   c0018d24 <schedule()>
c001978f:	eb d3                	jmp    c0019764 <Semaphore::release()+0x50>
c0019791:	8d 76 00             	lea    esi,[esi+0x0]

c0019794 <__static_initialization_and_destruction_0(int, int)>:
c0019794:	83 ec 0c             	sub    esp,0xc
c0019797:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001979c:	0f 85 8e 00 00 00    	jne    c0019830 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00197a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00197aa:	0f 85 80 00 00 00    	jne    c0019830 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00197b0:	83 ec 0c             	sub    esp,0xc
c00197b3:	68 a4 9f 02 c0       	push   0xc0029fa4
c00197b8:	e8 a7 9f 00 00       	call   c0023764 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00197bd:	83 c4 10             	add    esp,0x10
c00197c0:	83 ec 04             	sub    esp,0x4
c00197c3:	68 d4 7c 02 c0       	push   0xc0027cd4
c00197c8:	68 a4 9f 02 c0       	push   0xc0029fa4
c00197cd:	68 14 37 02 c0       	push   0xc0023714
c00197d2:	e8 01 37 ff ff       	call   c000ced8 <__cxa_atexit>
c00197d7:	83 c4 10             	add    esp,0x10
c00197da:	83 ec 0c             	sub    esp,0xc
c00197dd:	68 98 9f 02 c0       	push   0xc0029f98
c00197e2:	e8 7d 9f 00 00       	call   c0023764 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00197e7:	83 c4 10             	add    esp,0x10
c00197ea:	83 ec 04             	sub    esp,0x4
c00197ed:	68 d4 7c 02 c0       	push   0xc0027cd4
c00197f2:	68 98 9f 02 c0       	push   0xc0029f98
c00197f7:	68 14 37 02 c0       	push   0xc0023714
c00197fc:	e8 d7 36 ff ff       	call   c000ced8 <__cxa_atexit>
c0019801:	83 c4 10             	add    esp,0x10
c0019804:	83 ec 0c             	sub    esp,0xc
c0019807:	68 8c 9f 02 c0       	push   0xc0029f8c
c001980c:	e8 53 9f 00 00       	call   c0023764 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019811:	83 c4 10             	add    esp,0x10
c0019814:	83 ec 04             	sub    esp,0x4
c0019817:	68 d4 7c 02 c0       	push   0xc0027cd4
c001981c:	68 8c 9f 02 c0       	push   0xc0029f8c
c0019821:	68 14 37 02 c0       	push   0xc0023714
c0019826:	e8 ad 36 ff ff       	call   c000ced8 <__cxa_atexit>
c001982b:	83 c4 10             	add    esp,0x10
c001982e:	66 90                	xchg   ax,ax
c0019830:	90                   	nop
c0019831:	83 c4 0c             	add    esp,0xc
c0019834:	c3                   	ret    
c0019835:	8d 76 00             	lea    esi,[esi+0x0]

c0019838 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019838:	83 ec 0c             	sub    esp,0xc
c001983b:	83 ec 08             	sub    esp,0x8
c001983e:	68 ff ff 00 00       	push   0xffff
c0019843:	6a 01                	push   0x1
c0019845:	e8 4a ff ff ff       	call   c0019794 <__static_initialization_and_destruction_0(int, int)>
c001984a:	83 c4 10             	add    esp,0x10
c001984d:	83 c4 0c             	add    esp,0xc
c0019850:	c3                   	ret    

c0019851 <Vm::inbv(unsigned short)>:
c0019851:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019855:	66 81 fa fe fe       	cmp    dx,0xfefe
c001985a:	75 06                	jne    c0019862 <Vm::inbv(unsigned short)+0x11>
c001985c:	a0 ec 9f 02 c0       	mov    al,ds:0xc0029fec
c0019861:	c3                   	ret    
c0019862:	ec                   	in     al,dx
c0019863:	c3                   	ret    

c0019864 <Vm::outbv(unsigned short, unsigned char)>:
c0019864:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001986c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019871:	75 25                	jne    c0019898 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019873:	8b 0d ec 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029fec
c0019879:	8d 51 01             	lea    edx,[ecx+0x1]
c001987c:	88 81 00 a0 02 c0    	mov    BYTE PTR [ecx-0x3ffd6000],al
c0019882:	89 15 ec 9f 02 c0    	mov    DWORD PTR ds:0xc0029fec,edx
c0019888:	83 fa 20             	cmp    edx,0x20
c001988b:	75 0c                	jne    c0019899 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001988d:	c7 05 ec 9f 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0029fec,0x1f
c0019897:	c3                   	ret    
c0019898:	ee                   	out    dx,al
c0019899:	c3                   	ret    

c001989a <Vm::realToLinear(unsigned short, unsigned short)>:
c001989a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001989f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a4:	c1 e0 04             	shl    eax,0x4
c00198a7:	01 d0                	add    eax,edx
c00198a9:	c3                   	ret    

c00198aa <Vm::getSegment(unsigned int)>:
c00198aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198ae:	c1 e8 10             	shr    eax,0x10
c00198b1:	c3                   	ret    

c00198b2 <Vm::getOffset(unsigned int)>:
c00198b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198b6:	c3                   	ret    

c00198b7 <Vm::mainloop2()>:
c00198b7:	83 ec 18             	sub    esp,0x18
c00198ba:	fa                   	cli    
c00198bb:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c00198c1:	6a 02                	push   0x2
c00198c3:	c6 05 e5 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fe5,0x1
c00198ca:	e8 25 f6 ff ff       	call   c0018ef4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00198cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198d4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00198d8:	52                   	push   edx
c00198d9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00198dd:	52                   	push   edx
c00198de:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00198e2:	52                   	push   edx
c00198e3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00198e7:	50                   	push   eax
c00198e8:	e8 42 69 fe ff       	call   c000022f <goToVM86>
c00198ed:	83 c4 2c             	add    esp,0x2c
c00198f0:	c3                   	ret    

c00198f1 <Vm::mainVm8086Loop(void*)>:
c00198f1:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00198f6:	48                   	dec    eax
c00198f7:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00198fc:	75 01                	jne    c00198ff <Vm::mainVm8086Loop(void*)+0xe>
c00198fe:	fb                   	sti    
c00198ff:	eb b6                	jmp    c00198b7 <Vm::mainloop2()>

c0019901 <Vm::mainloop3(unsigned long)>:
c0019901:	83 ec 18             	sub    esp,0x18
c0019904:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019908:	fa                   	cli    
c0019909:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c001990f:	6a 02                	push   0x2
c0019911:	c6 05 e4 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fe4,0x1
c0019918:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c001991d:	e8 d2 f5 ff ff       	call   c0018ef4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019922:	83 c4 1c             	add    esp,0x1c
c0019925:	eb 90                	jmp    c00198b7 <Vm::mainloop2()>

c0019927 <Vm::initialise8086()>:
c0019927:	83 ec 0c             	sub    esp,0xc
c001992a:	68 80 00 00 00       	push   0x80
c001992f:	6a 00                	push   0x0
c0019931:	68 f1 98 01 c0       	push   0xc00198f1
c0019936:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c001993c:	e8 c7 f1 ff ff       	call   c0018b08 <Process::createThread(void (*)(void*), void*, int)>
c0019941:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019948:	a3 e8 9f 02 c0       	mov    ds:0xc0029fe8,eax
c001994d:	68 00 01 00 00       	push   0x100
c0019952:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c0019957:	6a 00                	push   0x0
c0019959:	6a 00                	push   0x0
c001995b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019961:	e8 50 2d ff ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019966:	83 c4 2c             	add    esp,0x2c
c0019969:	c3                   	ret    

c001996a <Vm::finish8086()>:
c001996a:	53                   	push   ebx
c001996b:	83 ec 08             	sub    esp,0x8
c001996e:	fa                   	cli    
c001996f:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019975:	80 3d e4 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fe4,0x0
c001997c:	75 15                	jne    c0019993 <Vm::finish8086()+0x29>
c001997e:	e8 a1 f3 ff ff       	call   c0018d24 <schedule()>
c0019983:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019988:	48                   	dec    eax
c0019989:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c001998e:	75 de                	jne    c001996e <Vm::finish8086()+0x4>
c0019990:	fb                   	sti    
c0019991:	eb db                	jmp    c001996e <Vm::finish8086()+0x4>
c0019993:	83 ec 0c             	sub    esp,0xc
c0019996:	8b 1d e0 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029fe0
c001999c:	ff 35 e8 9f 02 c0    	push   DWORD PTR ds:0xc0029fe8
c00199a2:	c6 05 e4 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029fe4,0x0
c00199a9:	e8 32 f8 ff ff       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c00199ae:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00199b3:	83 c4 10             	add    esp,0x10
c00199b6:	8d 50 ff             	lea    edx,[eax-0x1]
c00199b9:	89 15 88 9f 02 c0    	mov    DWORD PTR ds:0xc0029f88,edx
c00199bf:	85 d2                	test   edx,edx
c00199c1:	75 01                	jne    c00199c4 <Vm::finish8086()+0x5a>
c00199c3:	fb                   	sti    
c00199c4:	89 d8                	mov    eax,ebx
c00199c6:	83 c4 08             	add    esp,0x8
c00199c9:	5b                   	pop    ebx
c00199ca:	c3                   	ret    

c00199cb <Vm::getOutput8086(unsigned char*)>:
c00199cb:	57                   	push   edi
c00199cc:	8b 0d ec 9f 02 c0    	mov    ecx,DWORD PTR ds:0xc0029fec
c00199d2:	56                   	push   esi
c00199d3:	be 00 a0 02 c0       	mov    esi,0xc002a000
c00199d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00199dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199de:	a1 ec 9f 02 c0       	mov    eax,ds:0xc0029fec
c00199e3:	5e                   	pop    esi
c00199e4:	c7 05 ec 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029fec,0x0
c00199ee:	5f                   	pop    edi
c00199ef:	c3                   	ret    

c00199f0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00199f0:	55                   	push   ebp
c00199f1:	57                   	push   edi
c00199f2:	56                   	push   esi
c00199f3:	53                   	push   ebx
c00199f4:	83 ec 0c             	sub    esp,0xc
c00199f7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00199fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00199ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019a03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019a07:	fa                   	cli    
c0019a08:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019a0e:	80 3d e5 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fe5,0x0
c0019a15:	75 15                	jne    c0019a2c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019a17:	e8 08 f3 ff ff       	call   c0018d24 <schedule()>
c0019a1c:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019a21:	48                   	dec    eax
c0019a22:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019a27:	75 de                	jne    c0019a07 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a29:	fb                   	sti    
c0019a2a:	eb db                	jmp    c0019a07 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019a2c:	a1 e8 9f 02 c0       	mov    eax,ds:0xc0029fe8
c0019a31:	c7 05 ec 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029fec,0x0
c0019a3b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019a3f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019a43:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019a47:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019a4b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019a4f:	0f b7 ff             	movzx  edi,di
c0019a52:	0f b7 f6             	movzx  esi,si
c0019a55:	50                   	push   eax
c0019a56:	6a 20                	push   0x20
c0019a58:	6a 00                	push   0x0
c0019a5a:	68 00 a0 02 c0       	push   0xc002a000
c0019a5f:	e8 18 6c fe ff       	call   c000067c <memset>
c0019a64:	5a                   	pop    edx
c0019a65:	59                   	pop    ecx
c0019a66:	57                   	push   edi
c0019a67:	56                   	push   esi
c0019a68:	e8 2d fe ff ff       	call   c001989a <Vm::realToLinear(unsigned short, unsigned short)>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	89 c7                	mov    edi,eax
c0019a72:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019a76:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019a7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a7c:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019a81:	c6 05 e5 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029fe5,0x0
c0019a88:	48                   	dec    eax
c0019a89:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019a8e:	75 01                	jne    c0019a91 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019a90:	fb                   	sti    
c0019a91:	83 ec 0c             	sub    esp,0xc
c0019a94:	ff 35 e8 9f 02 c0    	push   DWORD PTR ds:0xc0029fe8
c0019a9a:	e8 41 f7 ff ff       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c0019a9f:	83 c4 1c             	add    esp,0x1c
c0019aa2:	b0 01                	mov    al,0x1
c0019aa4:	5b                   	pop    ebx
c0019aa5:	5e                   	pop    esi
c0019aa6:	5f                   	pop    edi
c0019aa7:	5d                   	pop    ebp
c0019aa8:	c3                   	ret    

c0019aa9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019aa9:	55                   	push   ebp
c0019aaa:	57                   	push   edi
c0019aab:	56                   	push   esi
c0019aac:	53                   	push   ebx
c0019aad:	83 ec 2c             	sub    esp,0x2c
c0019ab0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019ab4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ab8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019abc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019ac0:	fa                   	cli    
c0019ac1:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0019ac7:	0f b6 35 e5 9f 02 c0 	movzx  esi,BYTE PTR ds:0xc0029fe5
c0019ace:	89 f0                	mov    eax,esi
c0019ad0:	84 c0                	test   al,al
c0019ad2:	75 1d                	jne    c0019af1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019ad4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ad8:	e8 47 f2 ff ff       	call   c0018d24 <schedule()>
c0019add:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019ae2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ae6:	48                   	dec    eax
c0019ae7:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019aec:	75 d2                	jne    c0019ac0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019aee:	fb                   	sti    
c0019aef:	eb cf                	jmp    c0019ac0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019af1:	a1 e8 9f 02 c0       	mov    eax,ds:0xc0029fe8
c0019af6:	c7 05 ec 9f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029fec,0x0
c0019b00:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019b04:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019b08:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019b0c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019b10:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019b14:	50                   	push   eax
c0019b15:	6a 20                	push   0x20
c0019b17:	6a 00                	push   0x0
c0019b19:	68 00 a0 02 c0       	push   0xc002a000
c0019b1e:	e8 59 6b fe ff       	call   c000067c <memset>
c0019b23:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b2a:	e8 24 02 ff ff       	call   c0009d53 <malloc>
c0019b2f:	83 c4 0c             	add    esp,0xc
c0019b32:	89 c3                	mov    ebx,eax
c0019b34:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c0019b3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b3e:	50                   	push   eax
c0019b3f:	e8 66 3a ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c0019b44:	83 c4 10             	add    esp,0x10
c0019b47:	85 db                	test   ebx,ebx
c0019b49:	75 0a                	jne    c0019b55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019b4b:	83 ec 0c             	sub    esp,0xc
c0019b4e:	68 a8 6c 02 c0       	push   0xc0026ca8
c0019b53:	eb 3e                	jmp    c0019b93 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b55:	50                   	push   eax
c0019b56:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019b5a:	50                   	push   eax
c0019b5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b5f:	50                   	push   eax
c0019b60:	53                   	push   ebx
c0019b61:	e8 ca 3d ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c0019b66:	83 c4 10             	add    esp,0x10
c0019b69:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019b6e:	74 0a                	je     c0019b7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019b70:	83 ec 0c             	sub    esp,0xc
c0019b73:	68 bc 6c 02 c0       	push   0xc0026cbc
c0019b78:	eb 19                	jmp    c0019b93 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019b7a:	51                   	push   ecx
c0019b7b:	51                   	push   ecx
c0019b7c:	6a 01                	push   0x1
c0019b7e:	53                   	push   ebx
c0019b7f:	e8 00 3b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c0019b84:	83 c4 10             	add    esp,0x10
c0019b87:	85 c0                	test   eax,eax
c0019b89:	74 24                	je     c0019baf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019b8b:	83 ec 0c             	sub    esp,0xc
c0019b8e:	68 d5 6c 02 c0       	push   0xc0026cd5
c0019b93:	e8 5d b4 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0019b98:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019b9d:	83 c4 10             	add    esp,0x10
c0019ba0:	48                   	dec    eax
c0019ba1:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019ba6:	85 c0                	test   eax,eax
c0019ba8:	75 01                	jne    c0019bab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019baa:	fb                   	sti    
c0019bab:	31 f6                	xor    esi,esi
c0019bad:	eb 58                	jmp    c0019c07 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019baf:	0f b7 ed             	movzx  ebp,bp
c0019bb2:	50                   	push   eax
c0019bb3:	0f b7 ff             	movzx  edi,di
c0019bb6:	50                   	push   eax
c0019bb7:	55                   	push   ebp
c0019bb8:	57                   	push   edi
c0019bb9:	e8 dc fc ff ff       	call   c001989a <Vm::realToLinear(unsigned short, unsigned short)>
c0019bbe:	5a                   	pop    edx
c0019bbf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019bc1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bc5:	51                   	push   ecx
c0019bc6:	50                   	push   eax
c0019bc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bcf:	53                   	push   ebx
c0019bd0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019bd3:	83 c4 14             	add    esp,0x14
c0019bd6:	53                   	push   ebx
c0019bd7:	e8 06 3b ff ff       	call   c000d6e2 <File::close()>
c0019bdc:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	48                   	dec    eax
c0019be5:	c6 05 e5 9f 02 c0 00 	mov    BYTE PTR ds:0xc0029fe5,0x0
c0019bec:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c0019bf1:	85 c0                	test   eax,eax
c0019bf3:	75 01                	jne    c0019bf6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019bf5:	fb                   	sti    
c0019bf6:	83 ec 0c             	sub    esp,0xc
c0019bf9:	ff 35 e8 9f 02 c0    	push   DWORD PTR ds:0xc0029fe8
c0019bff:	e8 dc f5 ff ff       	call   c00191e0 <unblockTask(ThreadControlBlock*)>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	83 c4 2c             	add    esp,0x2c
c0019c0a:	89 f0                	mov    eax,esi
c0019c0c:	5b                   	pop    ebx
c0019c0d:	5e                   	pop    esi
c0019c0e:	5f                   	pop    edi
c0019c0f:	5d                   	pop    ebp
c0019c10:	c3                   	ret    

c0019c11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019c11:	57                   	push   edi
c0019c12:	56                   	push   esi
c0019c13:	53                   	push   ebx
c0019c14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c20:	83 e8 06             	sub    eax,0x6
c0019c23:	0f b7 c0             	movzx  eax,ax
c0019c26:	50                   	push   eax
c0019c27:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019c2c:	50                   	push   eax
c0019c2d:	e8 68 fc ff ff       	call   c001989a <Vm::realToLinear(unsigned short, unsigned short)>
c0019c32:	5a                   	pop    edx
c0019c33:	5e                   	pop    esi
c0019c34:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019c37:	8d 56 fa             	lea    edx,[esi-0x6]
c0019c3a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019c40:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019c43:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019c46:	83 c2 02             	add    edx,0x2
c0019c49:	66 89 10             	mov    WORD PTR [eax],dx
c0019c4c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019c4f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019c53:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019c56:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019c5a:	89 d6                	mov    esi,edx
c0019c5c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019c62:	66 81 e6 ff fd       	and    si,0xfdff
c0019c67:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019c6b:	74 07                	je     c0019c74 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019c6d:	89 d6                	mov    esi,edx
c0019c6f:	66 81 ce 00 02       	or     si,0x200
c0019c74:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019c78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c7d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019c81:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019c89:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019c8c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019c94:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019c97:	5b                   	pop    ebx
c0019c98:	5e                   	pop    esi
c0019c99:	5f                   	pop    edi
c0019c9a:	c3                   	ret    

c0019c9b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019c9b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ca0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019ca5:	c1 e0 04             	shl    eax,0x4
c0019ca8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019cab:	c3                   	ret    

c0019cac <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019cac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cb1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cb6:	c1 e0 04             	shl    eax,0x4
c0019cb9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019cbd:	c3                   	ret    

c0019cbe <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019cbe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cc3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cc8:	c1 e0 04             	shl    eax,0x4
c0019ccb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019cce:	c3                   	ret    

c0019ccf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019ccf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cd4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cd9:	c1 e0 04             	shl    eax,0x4
c0019cdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ce0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019ce3:	c3                   	ret    

c0019ce4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019ce4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019ce9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019cee:	c1 e0 04             	shl    eax,0x4
c0019cf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cf5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019cf9:	c3                   	ret    

c0019cfa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019cfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019cff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019d04:	c1 e0 04             	shl    eax,0x4
c0019d07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d0b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019d0e:	c3                   	ret    

c0019d0f <Vm::faultHandler(regs*)>:
c0019d0f:	55                   	push   ebp
c0019d10:	57                   	push   edi
c0019d11:	56                   	push   esi
c0019d12:	53                   	push   ebx
c0019d13:	83 ec 1c             	sub    esp,0x1c
c0019d16:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d1a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019d1d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019d21:	0f b7 f8             	movzx  edi,ax
c0019d24:	52                   	push   edx
c0019d25:	0f b7 c0             	movzx  eax,ax
c0019d28:	50                   	push   eax
c0019d29:	e8 6c fb ff ff       	call   c001989a <Vm::realToLinear(unsigned short, unsigned short)>
c0019d2e:	5a                   	pop    edx
c0019d2f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019d32:	59                   	pop    ecx
c0019d33:	89 c1                	mov    ecx,eax
c0019d35:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019d38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d3c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019d41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d45:	0f b7 c5             	movzx  eax,bp
c0019d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019d50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019d54:	e8 41 fb ff ff       	call   c001989a <Vm::realToLinear(unsigned short, unsigned short)>
c0019d59:	5e                   	pop    esi
c0019d5a:	be 06 00 00 00       	mov    esi,0x6
c0019d5f:	5a                   	pop    edx
c0019d60:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019d65:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019d6a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019d6d:	80 fa 9d             	cmp    dl,0x9d
c0019d70:	0f 84 2c 02 00 00    	je     c0019fa2 <Vm::faultHandler(regs*)+0x293>
c0019d76:	0f 87 91 00 00 00    	ja     c0019e0d <Vm::faultHandler(regs*)+0xfe>
c0019d7c:	80 fa 66             	cmp    dl,0x66
c0019d7f:	0f 84 98 01 00 00    	je     c0019f1d <Vm::faultHandler(regs*)+0x20e>
c0019d85:	77 47                	ja     c0019dce <Vm::faultHandler(regs*)+0xbf>
c0019d87:	80 fa 36             	cmp    dl,0x36
c0019d8a:	0f 84 80 01 00 00    	je     c0019f10 <Vm::faultHandler(regs*)+0x201>
c0019d90:	77 1a                	ja     c0019dac <Vm::faultHandler(regs*)+0x9d>
c0019d92:	80 fa 26             	cmp    dl,0x26
c0019d95:	0f 84 4e 01 00 00    	je     c0019ee9 <Vm::faultHandler(regs*)+0x1da>
c0019d9b:	80 fa 2e             	cmp    dl,0x2e
c0019d9e:	0f 85 e2 05 00 00    	jne    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019da4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019da7:	31 f6                	xor    esi,esi
c0019da9:	41                   	inc    ecx
c0019daa:	eb be                	jmp    c0019d6a <Vm::faultHandler(regs*)+0x5b>
c0019dac:	80 fa 64             	cmp    dl,0x64
c0019daf:	0f 84 41 01 00 00    	je     c0019ef6 <Vm::faultHandler(regs*)+0x1e7>
c0019db5:	0f 87 48 01 00 00    	ja     c0019f03 <Vm::faultHandler(regs*)+0x1f4>
c0019dbb:	80 fa 3e             	cmp    dl,0x3e
c0019dbe:	0f 85 c2 05 00 00    	jne    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019dc4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dc7:	be 01 00 00 00       	mov    esi,0x1
c0019dcc:	eb db                	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019dce:	80 fa 6d             	cmp    dl,0x6d
c0019dd1:	0f 84 ec 02 00 00    	je     c001a0c3 <Vm::faultHandler(regs*)+0x3b4>
c0019dd7:	77 17                	ja     c0019df0 <Vm::faultHandler(regs*)+0xe1>
c0019dd9:	80 fa 67             	cmp    dl,0x67
c0019ddc:	0f 84 48 01 00 00    	je     c0019f2a <Vm::faultHandler(regs*)+0x21b>
c0019de2:	80 fa 6c             	cmp    dl,0x6c
c0019de5:	0f 84 69 02 00 00    	je     c001a054 <Vm::faultHandler(regs*)+0x345>
c0019deb:	e9 96 05 00 00       	jmp    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019df0:	80 fa 6f             	cmp    dl,0x6f
c0019df3:	0f 84 f4 03 00 00    	je     c001a1ed <Vm::faultHandler(regs*)+0x4de>
c0019df9:	0f 82 59 03 00 00    	jb     c001a158 <Vm::faultHandler(regs*)+0x449>
c0019dff:	80 fa 9c             	cmp    dl,0x9c
c0019e02:	0f 84 2f 01 00 00    	je     c0019f37 <Vm::faultHandler(regs*)+0x228>
c0019e08:	e9 79 05 00 00       	jmp    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019e0d:	80 fa ec             	cmp    dl,0xec
c0019e10:	0f 84 14 05 00 00    	je     c001a32a <Vm::faultHandler(regs*)+0x61b>
c0019e16:	77 7b                	ja     c0019e93 <Vm::faultHandler(regs*)+0x184>
c0019e18:	80 fa e4             	cmp    dl,0xe4
c0019e1b:	0f 84 93 04 00 00    	je     c001a2b4 <Vm::faultHandler(regs*)+0x5a5>
c0019e21:	77 53                	ja     c0019e76 <Vm::faultHandler(regs*)+0x167>
c0019e23:	80 fa cd             	cmp    dl,0xcd
c0019e26:	0f 84 d9 01 00 00    	je     c001a005 <Vm::faultHandler(regs*)+0x2f6>
c0019e2c:	80 fa cf             	cmp    dl,0xcf
c0019e2f:	0f 85 51 05 00 00    	jne    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019e35:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019e38:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019e3b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019e3f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019e42:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019e46:	81 ca 00 02 02 00    	or     edx,0x20200
c0019e4c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019e4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019e53:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019e59:	66 c1 e8 09          	shr    ax,0x9
c0019e5d:	83 e0 01             	and    eax,0x1
c0019e60:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019e63:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019e66:	83 c0 06             	add    eax,0x6
c0019e69:	25 ff ff 00 00       	and    eax,0xffff
c0019e6e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019e71:	e9 0c 05 00 00       	jmp    c001a382 <Vm::faultHandler(regs*)+0x673>
c0019e76:	80 fa e6             	cmp    dl,0xe6
c0019e79:	0f 84 7f 04 00 00    	je     c001a2fe <Vm::faultHandler(regs*)+0x5ef>
c0019e7f:	0f 82 4b 04 00 00    	jb     c001a2d0 <Vm::faultHandler(regs*)+0x5c1>
c0019e85:	80 fa e7             	cmp    dl,0xe7
c0019e88:	0f 84 87 04 00 00    	je     c001a315 <Vm::faultHandler(regs*)+0x606>
c0019e8e:	e9 f3 04 00 00       	jmp    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019e93:	80 fa ef             	cmp    dl,0xef
c0019e96:	0f 84 d1 04 00 00    	je     c001a36d <Vm::faultHandler(regs*)+0x65e>
c0019e9c:	77 28                	ja     c0019ec6 <Vm::faultHandler(regs*)+0x1b7>
c0019e9e:	80 fa ed             	cmp    dl,0xed
c0019ea1:	0f 84 9f 04 00 00    	je     c001a346 <Vm::faultHandler(regs*)+0x637>
c0019ea7:	80 fa ee             	cmp    dl,0xee
c0019eaa:	0f 85 d6 04 00 00    	jne    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019eb0:	50                   	push   eax
c0019eb1:	50                   	push   eax
c0019eb2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019eb6:	50                   	push   eax
c0019eb7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019ebb:	50                   	push   eax
c0019ebc:	e8 a3 f9 ff ff       	call   c0019864 <Vm::outbv(unsigned short, unsigned char)>
c0019ec1:	e9 9f 04 00 00       	jmp    c001a365 <Vm::faultHandler(regs*)+0x656>
c0019ec6:	80 fa fa             	cmp    dl,0xfa
c0019ec9:	0f 84 69 01 00 00    	je     c001a038 <Vm::faultHandler(regs*)+0x329>
c0019ecf:	80 fa fb             	cmp    dl,0xfb
c0019ed2:	0f 84 6e 01 00 00    	je     c001a046 <Vm::faultHandler(regs*)+0x337>
c0019ed8:	80 fa f3             	cmp    dl,0xf3
c0019edb:	0f 85 a5 04 00 00    	jne    c001a386 <Vm::faultHandler(regs*)+0x677>
c0019ee1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ee4:	e9 c0 fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019ee9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eec:	be 02 00 00 00       	mov    esi,0x2
c0019ef1:	e9 b3 fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019ef6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ef9:	be 03 00 00 00       	mov    esi,0x3
c0019efe:	e9 a6 fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019f03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f06:	be 04 00 00 00       	mov    esi,0x4
c0019f0b:	e9 99 fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019f10:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f13:	be 05 00 00 00       	mov    esi,0x5
c0019f18:	e9 8c fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019f1d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f20:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019f25:	e9 7f fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019f2a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019f2d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019f32:	e9 72 fe ff ff       	jmp    c0019da9 <Vm::faultHandler(regs*)+0x9a>
c0019f37:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019f3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019f3e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019f43:	74 30                	je     c0019f75 <Vm::faultHandler(regs*)+0x266>
c0019f45:	83 e9 04             	sub    ecx,0x4
c0019f48:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019f4e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f54:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f57:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f5a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f60:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019f64:	0f 84 15 04 00 00    	je     c001a37f <Vm::faultHandler(regs*)+0x670>
c0019f6a:	80 ce 02             	or     dh,0x2
c0019f6d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019f70:	e9 0a 04 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c0019f75:	83 e9 02             	sub    ecx,0x2
c0019f78:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019f7e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019f81:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019f85:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019f8b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019f8f:	74 05                	je     c0019f96 <Vm::faultHandler(regs*)+0x287>
c0019f91:	80 ce 02             	or     dh,0x2
c0019f94:	eb 03                	jmp    c0019f99 <Vm::faultHandler(regs*)+0x28a>
c0019f96:	80 e6 fd             	and    dh,0xfd
c0019f99:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019f9d:	e9 dd 03 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c0019fa2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019fa7:	74 2a                	je     c0019fd3 <Vm::faultHandler(regs*)+0x2c4>
c0019fa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fab:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019fb1:	81 ca 00 02 02 00    	or     edx,0x20200
c0019fb7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019fba:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fbc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019fc2:	c1 e8 09             	shr    eax,0x9
c0019fc5:	83 e0 01             	and    eax,0x1
c0019fc8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019fcb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019fce:	83 c0 04             	add    eax,0x4
c0019fd1:	eb 25                	jmp    c0019ff8 <Vm::faultHandler(regs*)+0x2e9>
c0019fd3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019fd6:	81 ca 00 02 02 00    	or     edx,0x20200
c0019fdc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019fdf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019fe2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019fe8:	66 c1 e8 09          	shr    ax,0x9
c0019fec:	83 e0 01             	and    eax,0x1
c0019fef:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019ff2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ff5:	83 c0 02             	add    eax,0x2
c0019ff8:	25 ff ff 00 00       	and    eax,0xffff
c0019ffd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a000:	e9 7a 03 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a005:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a009:	3c ee                	cmp    al,0xee
c001a00b:	75 10                	jne    c001a01d <Vm::faultHandler(regs*)+0x30e>
c001a00d:	83 ec 0c             	sub    esp,0xc
c001a010:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a013:	e8 e9 f8 ff ff       	call   c0019901 <Vm::mainloop3(unsigned long)>
c001a018:	e9 4b 03 00 00       	jmp    c001a368 <Vm::faultHandler(regs*)+0x659>
c001a01d:	83 ec 0c             	sub    esp,0xc
c001a020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a028:	51                   	push   ecx
c001a029:	50                   	push   eax
c001a02a:	53                   	push   ebx
c001a02b:	e8 e1 fb ff ff       	call   c0019c11 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a030:	83 c4 20             	add    esp,0x20
c001a033:	e9 4a 03 00 00       	jmp    c001a382 <Vm::faultHandler(regs*)+0x673>
c001a038:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a03d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a041:	e9 39 03 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a046:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a04b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a04f:	e9 2b 03 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a054:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a057:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a05c:	74 2b                	je     c001a089 <Vm::faultHandler(regs*)+0x37a>
c001a05e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a065:	76 22                	jbe    c001a089 <Vm::faultHandler(regs*)+0x37a>
c001a067:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a06b:	50                   	push   eax
c001a06c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a070:	50                   	push   eax
c001a071:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a075:	50                   	push   eax
c001a076:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a07a:	50                   	push   eax
c001a07b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a07f:	50                   	push   eax
c001a080:	6a 6c                	push   0x6c
c001a082:	6a 6c                	push   0x6c
c001a084:	e9 b9 01 00 00       	jmp    c001a242 <Vm::faultHandler(regs*)+0x533>
c001a089:	83 ec 0c             	sub    esp,0xc
c001a08c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a090:	0f b7 f6             	movzx  esi,si
c001a093:	50                   	push   eax
c001a094:	e8 b8 f7 ff ff       	call   c0019851 <Vm::inbv(unsigned short)>
c001a099:	83 c4 0c             	add    esp,0xc
c001a09c:	0f b6 c0             	movzx  eax,al
c001a09f:	50                   	push   eax
c001a0a0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a0a4:	50                   	push   eax
c001a0a5:	56                   	push   esi
c001a0a6:	e8 24 fc ff ff       	call   c0019ccf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a0ab:	83 c4 10             	add    esp,0x10
c001a0ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0b1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a0b5:	74 03                	je     c001a0ba <Vm::faultHandler(regs*)+0x3ab>
c001a0b7:	48                   	dec    eax
c001a0b8:	eb 01                	jmp    c001a0bb <Vm::faultHandler(regs*)+0x3ac>
c001a0ba:	40                   	inc    eax
c001a0bb:	0f b7 c0             	movzx  eax,ax
c001a0be:	e9 8d 00 00 00       	jmp    c001a150 <Vm::faultHandler(regs*)+0x441>
c001a0c3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a0c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a0c9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a0ce:	74 29                	je     c001a0f9 <Vm::faultHandler(regs*)+0x3ea>
c001a0d0:	3d ff ff 00 00       	cmp    eax,0xffff
c001a0d5:	76 22                	jbe    c001a0f9 <Vm::faultHandler(regs*)+0x3ea>
c001a0d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a0db:	50                   	push   eax
c001a0dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a0e0:	50                   	push   eax
c001a0e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a0e5:	50                   	push   eax
c001a0e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a0ea:	50                   	push   eax
c001a0eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a0ef:	50                   	push   eax
c001a0f0:	6a 6d                	push   0x6d
c001a0f2:	6a 6d                	push   0x6d
c001a0f4:	e9 49 01 00 00       	jmp    c001a242 <Vm::faultHandler(regs*)+0x533>
c001a0f9:	0f b7 c8             	movzx  ecx,ax
c001a0fc:	0f b7 f6             	movzx  esi,si
c001a0ff:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a102:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a107:	74 20                	je     c001a129 <Vm::faultHandler(regs*)+0x41a>
c001a109:	ed                   	in     eax,dx
c001a10a:	55                   	push   ebp
c001a10b:	50                   	push   eax
c001a10c:	51                   	push   ecx
c001a10d:	56                   	push   esi
c001a10e:	e8 e7 fb ff ff       	call   c0019cfa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a113:	83 c4 10             	add    esp,0x10
c001a116:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a119:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a11d:	74 05                	je     c001a124 <Vm::faultHandler(regs*)+0x415>
c001a11f:	83 e8 04             	sub    eax,0x4
c001a122:	eb 27                	jmp    c001a14b <Vm::faultHandler(regs*)+0x43c>
c001a124:	83 c0 04             	add    eax,0x4
c001a127:	eb 22                	jmp    c001a14b <Vm::faultHandler(regs*)+0x43c>
c001a129:	66 ed                	in     ax,dx
c001a12b:	0f b7 c0             	movzx  eax,ax
c001a12e:	57                   	push   edi
c001a12f:	50                   	push   eax
c001a130:	51                   	push   ecx
c001a131:	56                   	push   esi
c001a132:	e8 ad fb ff ff       	call   c0019ce4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a137:	83 c4 10             	add    esp,0x10
c001a13a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a13d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a141:	74 05                	je     c001a148 <Vm::faultHandler(regs*)+0x439>
c001a143:	83 e8 02             	sub    eax,0x2
c001a146:	eb 03                	jmp    c001a14b <Vm::faultHandler(regs*)+0x43c>
c001a148:	83 c0 02             	add    eax,0x2
c001a14b:	25 ff ff 00 00       	and    eax,0xffff
c001a150:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a153:	e9 27 02 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a158:	8d 46 ff             	lea    eax,[esi-0x1]
c001a15b:	3c 05                	cmp    al,0x5
c001a15d:	77 24                	ja     c001a183 <Vm::faultHandler(regs*)+0x474>
c001a15f:	0f b6 c0             	movzx  eax,al
c001a162:	ff 24 85 48 6d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd92b8]
c001a169:	0f b7 fd             	movzx  edi,bp
c001a16c:	eb 15                	jmp    c001a183 <Vm::faultHandler(regs*)+0x474>
c001a16e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a172:	eb 0f                	jmp    c001a183 <Vm::faultHandler(regs*)+0x474>
c001a174:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a178:	eb 09                	jmp    c001a183 <Vm::faultHandler(regs*)+0x474>
c001a17a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a17e:	eb 03                	jmp    c001a183 <Vm::faultHandler(regs*)+0x474>
c001a180:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a183:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a186:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a18b:	74 29                	je     c001a1b6 <Vm::faultHandler(regs*)+0x4a7>
c001a18d:	3d ff ff 00 00       	cmp    eax,0xffff
c001a192:	76 22                	jbe    c001a1b6 <Vm::faultHandler(regs*)+0x4a7>
c001a194:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a198:	50                   	push   eax
c001a199:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a19d:	50                   	push   eax
c001a19e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a1a2:	50                   	push   eax
c001a1a3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a1a7:	50                   	push   eax
c001a1a8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a1ac:	50                   	push   eax
c001a1ad:	6a 6e                	push   0x6e
c001a1af:	6a 6e                	push   0x6e
c001a1b1:	e9 8c 00 00 00       	jmp    c001a242 <Vm::faultHandler(regs*)+0x533>
c001a1b6:	0f b7 c0             	movzx  eax,ax
c001a1b9:	52                   	push   edx
c001a1ba:	52                   	push   edx
c001a1bb:	50                   	push   eax
c001a1bc:	57                   	push   edi
c001a1bd:	e8 d9 fa ff ff       	call   c0019c9b <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a1c2:	59                   	pop    ecx
c001a1c3:	0f b6 c0             	movzx  eax,al
c001a1c6:	5e                   	pop    esi
c001a1c7:	50                   	push   eax
c001a1c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a1cc:	50                   	push   eax
c001a1cd:	e8 92 f6 ff ff       	call   c0019864 <Vm::outbv(unsigned short, unsigned char)>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a1d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a1dc:	74 03                	je     c001a1e1 <Vm::faultHandler(regs*)+0x4d2>
c001a1de:	48                   	dec    eax
c001a1df:	eb 01                	jmp    c001a1e2 <Vm::faultHandler(regs*)+0x4d3>
c001a1e1:	40                   	inc    eax
c001a1e2:	0f b7 c0             	movzx  eax,ax
c001a1e5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a1e8:	e9 92 01 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a1ed:	8d 46 ff             	lea    eax,[esi-0x1]
c001a1f0:	3c 05                	cmp    al,0x5
c001a1f2:	77 1f                	ja     c001a213 <Vm::faultHandler(regs*)+0x504>
c001a1f4:	0f b6 c0             	movzx  eax,al
c001a1f7:	ff 24 85 60 6d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd92a0]
c001a1fe:	89 ef                	mov    edi,ebp
c001a200:	eb 11                	jmp    c001a213 <Vm::faultHandler(regs*)+0x504>
c001a202:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a205:	eb 0c                	jmp    c001a213 <Vm::faultHandler(regs*)+0x504>
c001a207:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a20a:	eb 07                	jmp    c001a213 <Vm::faultHandler(regs*)+0x504>
c001a20c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a20f:	eb 02                	jmp    c001a213 <Vm::faultHandler(regs*)+0x504>
c001a211:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a213:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a216:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a21b:	74 37                	je     c001a254 <Vm::faultHandler(regs*)+0x545>
c001a21d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a223:	76 2f                	jbe    c001a254 <Vm::faultHandler(regs*)+0x545>
c001a225:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a229:	50                   	push   eax
c001a22a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a22e:	50                   	push   eax
c001a22f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a233:	50                   	push   eax
c001a234:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a238:	50                   	push   eax
c001a239:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a23d:	50                   	push   eax
c001a23e:	6a 6f                	push   0x6f
c001a240:	6a 6f                	push   0x6f
c001a242:	68 ee 6c 02 c0       	push   0xc0026cee
c001a247:	e8 f3 2d ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001a24c:	83 c4 20             	add    esp,0x20
c001a24f:	e9 86 01 00 00       	jmp    c001a3da <Vm::faultHandler(regs*)+0x6cb>
c001a254:	0f b7 d7             	movzx  edx,di
c001a257:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a25a:	0f b7 c6             	movzx  eax,si
c001a25d:	81 e1 00 04 00 00    	and    ecx,0x400
c001a263:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a266:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a26b:	74 1d                	je     c001a28a <Vm::faultHandler(regs*)+0x57b>
c001a26d:	55                   	push   ebp
c001a26e:	55                   	push   ebp
c001a26f:	50                   	push   eax
c001a270:	52                   	push   edx
c001a271:	e8 48 fa ff ff       	call   c0019cbe <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	89 fa                	mov    edx,edi
c001a27b:	ef                   	out    dx,eax
c001a27c:	85 c9                	test   ecx,ecx
c001a27e:	74 05                	je     c001a285 <Vm::faultHandler(regs*)+0x576>
c001a280:	83 ee 04             	sub    esi,0x4
c001a283:	eb 21                	jmp    c001a2a6 <Vm::faultHandler(regs*)+0x597>
c001a285:	83 c6 04             	add    esi,0x4
c001a288:	eb 1c                	jmp    c001a2a6 <Vm::faultHandler(regs*)+0x597>
c001a28a:	55                   	push   ebp
c001a28b:	55                   	push   ebp
c001a28c:	50                   	push   eax
c001a28d:	52                   	push   edx
c001a28e:	e8 19 fa ff ff       	call   c0019cac <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a293:	83 c4 10             	add    esp,0x10
c001a296:	89 fa                	mov    edx,edi
c001a298:	66 ef                	out    dx,ax
c001a29a:	85 c9                	test   ecx,ecx
c001a29c:	74 05                	je     c001a2a3 <Vm::faultHandler(regs*)+0x594>
c001a29e:	83 ee 02             	sub    esi,0x2
c001a2a1:	eb 03                	jmp    c001a2a6 <Vm::faultHandler(regs*)+0x597>
c001a2a3:	83 c6 02             	add    esi,0x2
c001a2a6:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a2ac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a2af:	e9 cb 00 00 00       	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a2b4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a2bb:	83 ec 0c             	sub    esp,0xc
c001a2be:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2c2:	50                   	push   eax
c001a2c3:	e8 89 f5 ff ff       	call   c0019851 <Vm::inbv(unsigned short)>
c001a2c8:	0f b6 c0             	movzx  eax,al
c001a2cb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a2ce:	eb 3f                	jmp    c001a30f <Vm::faultHandler(regs*)+0x600>
c001a2d0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a2d5:	74 07                	je     c001a2de <Vm::faultHandler(regs*)+0x5cf>
c001a2d7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a2db:	ed                   	in     eax,dx
c001a2dc:	eb 14                	jmp    c001a2f2 <Vm::faultHandler(regs*)+0x5e3>
c001a2de:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a2e1:	66 31 f6             	xor    si,si
c001a2e4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a2e7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a2eb:	66 ed                	in     ax,dx
c001a2ed:	0f b7 c0             	movzx  eax,ax
c001a2f0:	09 f0                	or     eax,esi
c001a2f2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a2f5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a2f9:	e9 84 00 00 00       	jmp    c001a382 <Vm::faultHandler(regs*)+0x673>
c001a2fe:	52                   	push   edx
c001a2ff:	52                   	push   edx
c001a300:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a304:	50                   	push   eax
c001a305:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a309:	50                   	push   eax
c001a30a:	e8 55 f5 ff ff       	call   c0019864 <Vm::outbv(unsigned short, unsigned char)>
c001a30f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a313:	eb 53                	jmp    c001a368 <Vm::faultHandler(regs*)+0x659>
c001a315:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a318:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a31c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a321:	74 03                	je     c001a326 <Vm::faultHandler(regs*)+0x617>
c001a323:	ef                   	out    dx,eax
c001a324:	eb cf                	jmp    c001a2f5 <Vm::faultHandler(regs*)+0x5e6>
c001a326:	66 ef                	out    dx,ax
c001a328:	eb cb                	jmp    c001a2f5 <Vm::faultHandler(regs*)+0x5e6>
c001a32a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a331:	83 ec 0c             	sub    esp,0xc
c001a334:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a338:	50                   	push   eax
c001a339:	e8 13 f5 ff ff       	call   c0019851 <Vm::inbv(unsigned short)>
c001a33e:	0f b6 c0             	movzx  eax,al
c001a341:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a344:	eb 1f                	jmp    c001a365 <Vm::faultHandler(regs*)+0x656>
c001a346:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a349:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a34e:	74 03                	je     c001a353 <Vm::faultHandler(regs*)+0x644>
c001a350:	ed                   	in     eax,dx
c001a351:	eb 0d                	jmp    c001a360 <Vm::faultHandler(regs*)+0x651>
c001a353:	66 ed                	in     ax,dx
c001a355:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a358:	0f b7 c0             	movzx  eax,ax
c001a35b:	66 31 d2             	xor    dx,dx
c001a35e:	09 d0                	or     eax,edx
c001a360:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a363:	eb 1a                	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a365:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a368:	83 c4 10             	add    esp,0x10
c001a36b:	eb 15                	jmp    c001a382 <Vm::faultHandler(regs*)+0x673>
c001a36d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a370:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a373:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a378:	74 03                	je     c001a37d <Vm::faultHandler(regs*)+0x66e>
c001a37a:	ef                   	out    dx,eax
c001a37b:	eb 02                	jmp    c001a37f <Vm::faultHandler(regs*)+0x670>
c001a37d:	66 ef                	out    dx,ax
c001a37f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a382:	b0 01                	mov    al,0x1
c001a384:	eb 56                	jmp    c001a3dc <Vm::faultHandler(regs*)+0x6cd>
c001a386:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a38a:	50                   	push   eax
c001a38b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a38f:	50                   	push   eax
c001a390:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a394:	50                   	push   eax
c001a395:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a399:	50                   	push   eax
c001a39a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a39e:	50                   	push   eax
c001a39f:	52                   	push   edx
c001a3a0:	52                   	push   edx
c001a3a1:	68 1b 6d 02 c0       	push   0xc0026d1b
c001a3a6:	e8 94 2c ff ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001a3ab:	83 c4 20             	add    esp,0x20
c001a3ae:	83 ec 0c             	sub    esp,0xc
c001a3b1:	6a 60                	push   0x60
c001a3b3:	e8 99 f4 ff ff       	call   c0019851 <Vm::inbv(unsigned short)>
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	3c 1c                	cmp    al,0x1c
c001a3bd:	74 04                	je     c001a3c3 <Vm::faultHandler(regs*)+0x6b4>
c001a3bf:	3c 5a                	cmp    al,0x5a
c001a3c1:	75 eb                	jne    c001a3ae <Vm::faultHandler(regs*)+0x69f>
c001a3c3:	3c 5a                	cmp    al,0x5a
c001a3c5:	74 04                	je     c001a3cb <Vm::faultHandler(regs*)+0x6bc>
c001a3c7:	3c 1c                	cmp    al,0x1c
c001a3c9:	75 0f                	jne    c001a3da <Vm::faultHandler(regs*)+0x6cb>
c001a3cb:	83 ec 0c             	sub    esp,0xc
c001a3ce:	6a 60                	push   0x60
c001a3d0:	e8 7c f4 ff ff       	call   c0019851 <Vm::inbv(unsigned short)>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	eb e9                	jmp    c001a3c3 <Vm::faultHandler(regs*)+0x6b4>
c001a3da:	31 c0                	xor    eax,eax
c001a3dc:	83 c4 1c             	add    esp,0x1c
c001a3df:	5b                   	pop    ebx
c001a3e0:	5e                   	pop    esi
c001a3e1:	5f                   	pop    edi
c001a3e2:	5d                   	pop    ebp
c001a3e3:	c3                   	ret    

c001a3e4 <Vm::fpuInternalTo32(unsigned long long)>:
c001a3e4:	57                   	push   edi
c001a3e5:	56                   	push   esi
c001a3e6:	53                   	push   ebx
c001a3e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ef:	89 d6                	mov    esi,edx
c001a3f1:	89 d7                	mov    edi,edx
c001a3f3:	89 c1                	mov    ecx,eax
c001a3f5:	c1 ef 14             	shr    edi,0x14
c001a3f8:	89 d3                	mov    ebx,edx
c001a3fa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a400:	31 d2                	xor    edx,edx
c001a402:	89 f8                	mov    eax,edi
c001a404:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a40a:	bf ff 00 00 00       	mov    edi,0xff
c001a40f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a414:	83 d2 ff             	adc    edx,0xffffffff
c001a417:	39 c7                	cmp    edi,eax
c001a419:	bf 00 00 00 00       	mov    edi,0x0
c001a41e:	19 d7                	sbb    edi,edx
c001a420:	72 16                	jb     c001a438 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a422:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a426:	c1 e0 17             	shl    eax,0x17
c001a429:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a42f:	09 f1                	or     ecx,esi
c001a431:	09 c1                	or     ecx,eax
c001a433:	89 cf                	mov    edi,ecx
c001a435:	eb 05                	jmp    c001a43c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a437:	90                   	nop
c001a438:	31 ff                	xor    edi,edi
c001a43a:	66 90                	xchg   ax,ax
c001a43c:	89 f8                	mov    eax,edi
c001a43e:	5b                   	pop    ebx
c001a43f:	5e                   	pop    esi
c001a440:	5f                   	pop    edi
c001a441:	c3                   	ret    

c001a442 <Vm::fpuInternalTo64(unsigned long long)>:
c001a442:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a446:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a44a:	c3                   	ret    

c001a44b <Vm::fpu32ToInternal(unsigned int)>:
c001a44b:	57                   	push   edi
c001a44c:	31 ff                	xor    edi,edi
c001a44e:	56                   	push   esi
c001a44f:	53                   	push   ebx
c001a450:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a454:	89 cb                	mov    ebx,ecx
c001a456:	89 ce                	mov    esi,ecx
c001a458:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a45e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a464:	c1 e9 17             	shr    ecx,0x17
c001a467:	89 f0                	mov    eax,esi
c001a469:	0f b6 d1             	movzx  edx,cl
c001a46c:	81 c2 80 03 00 00    	add    edx,0x380
c001a472:	89 d1                	mov    ecx,edx
c001a474:	89 fa                	mov    edx,edi
c001a476:	c1 e1 14             	shl    ecx,0x14
c001a479:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a47d:	c1 e0 1d             	shl    eax,0x1d
c001a480:	89 d7                	mov    edi,edx
c001a482:	89 c6                	mov    esi,eax
c001a484:	89 ca                	mov    edx,ecx
c001a486:	89 f0                	mov    eax,esi
c001a488:	09 fa                	or     edx,edi
c001a48a:	09 da                	or     edx,ebx
c001a48c:	5b                   	pop    ebx
c001a48d:	5e                   	pop    esi
c001a48e:	5f                   	pop    edi
c001a48f:	c3                   	ret    

c001a490 <Vm::fpu64ToInternal(unsigned long long)>:
c001a490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a494:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a498:	c3                   	ret    

c001a499 <Vm::fpuFloatToLong(unsigned long long)>:
c001a499:	57                   	push   edi
c001a49a:	31 c0                	xor    eax,eax
c001a49c:	56                   	push   esi
c001a49d:	31 d2                	xor    edx,edx
c001a49f:	53                   	push   ebx
c001a4a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4a4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4a8:	89 d9                	mov    ecx,ebx
c001a4aa:	c1 e9 14             	shr    ecx,0x14
c001a4ad:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a4b3:	89 cf                	mov    edi,ecx
c001a4b5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a4bb:	78 37                	js     c001a4f4 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a4bd:	89 d9                	mov    ecx,ebx
c001a4bf:	89 f0                	mov    eax,esi
c001a4c1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a4c7:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a4cd:	89 ca                	mov    edx,ecx
c001a4cf:	b9 34 00 00 00       	mov    ecx,0x34
c001a4d4:	29 f9                	sub    ecx,edi
c001a4d6:	0f ad d0             	shrd   eax,edx,cl
c001a4d9:	d3 fa                	sar    edx,cl
c001a4db:	f6 c1 20             	test   cl,0x20
c001a4de:	74 08                	je     c001a4e8 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a4e0:	89 d0                	mov    eax,edx
c001a4e2:	c1 fa 1f             	sar    edx,0x1f
c001a4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e8:	85 db                	test   ebx,ebx
c001a4ea:	79 08                	jns    c001a4f4 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a4ec:	f7 d8                	neg    eax
c001a4ee:	83 d2 00             	adc    edx,0x0
c001a4f1:	f7 da                	neg    edx
c001a4f3:	90                   	nop
c001a4f4:	5b                   	pop    ebx
c001a4f5:	5e                   	pop    esi
c001a4f6:	5f                   	pop    edi
c001a4f7:	c3                   	ret    

c001a4f8 <Vm::fpuULongToFloat(unsigned long long)>:
c001a4f8:	57                   	push   edi
c001a4f9:	31 c9                	xor    ecx,ecx
c001a4fb:	56                   	push   esi
c001a4fc:	53                   	push   ebx
c001a4fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a501:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a505:	8d 76 00             	lea    esi,[esi+0x0]
c001a508:	0f ba e7 14          	bt     edi,0x14
c001a50c:	72 0a                	jb     c001a518 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a50e:	01 f6                	add    esi,esi
c001a510:	11 ff                	adc    edi,edi
c001a512:	41                   	inc    ecx
c001a513:	eb f3                	jmp    c001a508 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a515:	8d 76 00             	lea    esi,[esi+0x0]
c001a518:	89 fa                	mov    edx,edi
c001a51a:	89 f0                	mov    eax,esi
c001a51c:	bb 33 04 00 00       	mov    ebx,0x433
c001a521:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a527:	29 cb                	sub    ebx,ecx
c001a529:	89 d9                	mov    ecx,ebx
c001a52b:	5b                   	pop    ebx
c001a52c:	c1 e1 14             	shl    ecx,0x14
c001a52f:	5e                   	pop    esi
c001a530:	09 ca                	or     edx,ecx
c001a532:	5f                   	pop    edi
c001a533:	c3                   	ret    

c001a534 <Vm::fpuLongToFloat(long long)>:
c001a534:	56                   	push   esi
c001a535:	31 c0                	xor    eax,eax
c001a537:	53                   	push   ebx
c001a538:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a53c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a540:	39 c8                	cmp    eax,ecx
c001a542:	19 d8                	sbb    eax,ebx
c001a544:	7d 06                	jge    c001a54c <Vm::fpuLongToFloat(long long)+0x18>
c001a546:	31 f6                	xor    esi,esi
c001a548:	eb 0e                	jmp    c001a558 <Vm::fpuLongToFloat(long long)+0x24>
c001a54a:	66 90                	xchg   ax,ax
c001a54c:	f7 d9                	neg    ecx
c001a54e:	be 01 00 00 00       	mov    esi,0x1
c001a553:	83 d3 00             	adc    ebx,0x0
c001a556:	f7 db                	neg    ebx
c001a558:	31 c0                	xor    eax,eax
c001a55a:	66 90                	xchg   ax,ax
c001a55c:	0f ba e3 14          	bt     ebx,0x14
c001a560:	72 0a                	jb     c001a56c <Vm::fpuLongToFloat(long long)+0x38>
c001a562:	01 c9                	add    ecx,ecx
c001a564:	11 db                	adc    ebx,ebx
c001a566:	40                   	inc    eax
c001a567:	eb f3                	jmp    c001a55c <Vm::fpuLongToFloat(long long)+0x28>
c001a569:	8d 76 00             	lea    esi,[esi+0x0]
c001a56c:	ba 33 04 00 00       	mov    edx,0x433
c001a571:	29 c2                	sub    edx,eax
c001a573:	89 c8                	mov    eax,ecx
c001a575:	c1 e2 14             	shl    edx,0x14
c001a578:	89 d9                	mov    ecx,ebx
c001a57a:	89 f3                	mov    ebx,esi
c001a57c:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a582:	09 ca                	or     edx,ecx
c001a584:	84 db                	test   bl,bl
c001a586:	74 08                	je     c001a590 <Vm::fpuLongToFloat(long long)+0x5c>
c001a588:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a58e:	66 90                	xchg   ax,ax
c001a590:	5b                   	pop    ebx
c001a591:	5e                   	pop    esi
c001a592:	c3                   	ret    

c001a593 <Vm::fpuGet0()>:
c001a593:	31 c0                	xor    eax,eax
c001a595:	31 d2                	xor    edx,edx
c001a597:	c3                   	ret    

c001a598 <Vm::fpuGet1()>:
c001a598:	b8 01 00 00 00       	mov    eax,0x1
c001a59d:	31 d2                	xor    edx,edx
c001a59f:	c3                   	ret    

c001a5a0 <Vm::fpuGetPi()>:
c001a5a0:	b8 03 00 00 00       	mov    eax,0x3
c001a5a5:	31 d2                	xor    edx,edx
c001a5a7:	c3                   	ret    

c001a5a8 <Vm::fpuGetLog2E()>:
c001a5a8:	83 ec 18             	sub    esp,0x18
c001a5ab:	68 78 6d 02 c0       	push   0xc0026d78
c001a5b0:	e8 40 aa ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001a5b5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5ba:	31 d2                	xor    edx,edx
c001a5bc:	83 c4 1c             	add    esp,0x1c
c001a5bf:	c3                   	ret    

c001a5c0 <Vm::fpuGetLogE2()>:
c001a5c0:	83 ec 18             	sub    esp,0x18
c001a5c3:	68 84 6d 02 c0       	push   0xc0026d84
c001a5c8:	e8 28 aa ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001a5cd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5d2:	31 d2                	xor    edx,edx
c001a5d4:	83 c4 1c             	add    esp,0x1c
c001a5d7:	c3                   	ret    

c001a5d8 <Vm::fpuGetLog210()>:
c001a5d8:	83 ec 18             	sub    esp,0x18
c001a5db:	68 90 6d 02 c0       	push   0xc0026d90
c001a5e0:	e8 10 aa ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001a5e5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a5ea:	31 d2                	xor    edx,edx
c001a5ec:	83 c4 1c             	add    esp,0x1c
c001a5ef:	c3                   	ret    

c001a5f0 <Vm::fpuGetLog102()>:
c001a5f0:	83 ec 18             	sub    esp,0x18
c001a5f3:	68 9d 6d 02 c0       	push   0xc0026d9d
c001a5f8:	e8 f8 a9 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001a5fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a602:	31 d2                	xor    edx,edx
c001a604:	83 c4 1c             	add    esp,0x1c
c001a607:	c3                   	ret    

c001a608 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a60c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a614:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a618:	0f 92 c0             	setb   al
c001a61b:	c3                   	ret    

c001a61c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a61c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a624:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a628:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a62c:	09 c2                	or     edx,eax
c001a62e:	0f 94 c0             	sete   al
c001a631:	c3                   	ret    

c001a632 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a632:	57                   	push   edi
c001a633:	56                   	push   esi
c001a634:	53                   	push   ebx
c001a635:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a639:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a63d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a641:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a645:	57                   	push   edi
c001a646:	56                   	push   esi
c001a647:	53                   	push   ebx
c001a648:	51                   	push   ecx
c001a649:	e8 ce ff ff ff       	call   c001a61c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a64e:	83 c4 10             	add    esp,0x10
c001a651:	88 c2                	mov    dl,al
c001a653:	31 c0                	xor    eax,eax
c001a655:	84 d2                	test   dl,dl
c001a657:	75 0f                	jne    c001a668 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a659:	57                   	push   edi
c001a65a:	56                   	push   esi
c001a65b:	53                   	push   ebx
c001a65c:	51                   	push   ecx
c001a65d:	e8 a6 ff ff ff       	call   c001a608 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	8d 76 00             	lea    esi,[esi+0x0]
c001a668:	83 e0 01             	and    eax,0x1
c001a66b:	5b                   	pop    ebx
c001a66c:	88 c1                	mov    cl,al
c001a66e:	83 e2 01             	and    edx,0x1
c001a671:	a0 21 a0 02 c0       	mov    al,ds:0xc002a021
c001a676:	c1 e2 06             	shl    edx,0x6
c001a679:	83 e0 ba             	and    eax,0xffffffba
c001a67c:	5e                   	pop    esi
c001a67d:	09 c8                	or     eax,ecx
c001a67f:	5f                   	pop    edi
c001a680:	09 d0                	or     eax,edx
c001a682:	a2 21 a0 02 c0       	mov    ds:0xc002a021,al
c001a687:	c3                   	ret    

c001a688 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a68c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a690:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a694:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a698:	c3                   	ret    

c001a699 <Vm::fpuAbs(unsigned long long)>:
c001a699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a69d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6a1:	c3                   	ret    

c001a6a2 <Vm::fpuChs(unsigned long long)>:
c001a6a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6aa:	f7 d8                	neg    eax
c001a6ac:	83 d2 00             	adc    edx,0x0
c001a6af:	f7 da                	neg    edx
c001a6b1:	c3                   	ret    

c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a6b2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a6b6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a6bb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a6bf:	eb c7                	jmp    c001a688 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a6c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a6c1:	53                   	push   ebx
c001a6c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a6ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6d2:	0f af ca             	imul   ecx,edx
c001a6d5:	0f af d8             	imul   ebx,eax
c001a6d8:	f7 e2                	mul    edx
c001a6da:	01 d9                	add    ecx,ebx
c001a6dc:	5b                   	pop    ebx
c001a6dd:	01 ca                	add    edx,ecx
c001a6df:	c3                   	ret    

c001a6e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a6e0:	83 ec 0c             	sub    esp,0xc
c001a6e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f3:	e8 14 87 00 00       	call   c0022e0c <__udivdi3>
c001a6f8:	83 c4 1c             	add    esp,0x1c
c001a6fb:	c3                   	ret    

c001a6fc <Vm::fpuSquare(unsigned long long)>:
c001a6fc:	50                   	push   eax
c001a6fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a701:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a705:	52                   	push   edx
c001a706:	50                   	push   eax
c001a707:	52                   	push   edx
c001a708:	50                   	push   eax
c001a709:	e8 b3 ff ff ff       	call   c001a6c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a70e:	83 c4 14             	add    esp,0x14
c001a711:	c3                   	ret    

c001a712 <Vm::fpuGetReg(int)>:
c001a712:	83 ec 0c             	sub    esp,0xc
c001a715:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a71a:	76 10                	jbe    c001a72c <Vm::fpuGetReg(int)+0x1a>
c001a71c:	83 ec 0c             	sub    esp,0xc
c001a71f:	68 aa 6d 02 c0       	push   0xc0026daa
c001a724:	e8 cc a8 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001a729:	83 c4 10             	add    esp,0x10
c001a72c:	a0 21 a0 02 c0       	mov    al,ds:0xc002a021
c001a731:	b9 08 00 00 00       	mov    ecx,0x8
c001a736:	c0 e8 03             	shr    al,0x3
c001a739:	83 e0 07             	and    eax,0x7
c001a73c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a740:	99                   	cdq    
c001a741:	f7 f9                	idiv   ecx
c001a743:	8b 04 d5 24 a0 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5fdc]
c001a74a:	8b 14 d5 28 a0 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5fd8]
c001a751:	83 c4 0c             	add    esp,0xc
c001a754:	c3                   	ret    

c001a755 <Vm::fpuSetReg(int, unsigned long long)>:
c001a755:	57                   	push   edi
c001a756:	56                   	push   esi
c001a757:	52                   	push   edx
c001a758:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a75c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a760:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a765:	76 11                	jbe    c001a778 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a767:	83 ec 0c             	sub    esp,0xc
c001a76a:	68 bd 6d 02 c0       	push   0xc0026dbd
c001a76f:	e8 81 a8 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001a774:	83 c4 10             	add    esp,0x10
c001a777:	90                   	nop
c001a778:	a0 21 a0 02 c0       	mov    al,ds:0xc002a021
c001a77d:	b9 08 00 00 00       	mov    ecx,0x8
c001a782:	c0 e8 03             	shr    al,0x3
c001a785:	83 e0 07             	and    eax,0x7
c001a788:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a78c:	99                   	cdq    
c001a78d:	f7 f9                	idiv   ecx
c001a78f:	89 34 d5 24 a0 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5fdc],esi
c001a796:	89 3c d5 28 a0 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5fd8],edi
c001a79d:	58                   	pop    eax
c001a79e:	5e                   	pop    esi
c001a79f:	5f                   	pop    edi
c001a7a0:	c3                   	ret    

c001a7a1 <Vm::fpuPush(unsigned long long)>:
c001a7a1:	a0 21 a0 02 c0       	mov    al,ds:0xc002a021
c001a7a6:	c0 e8 03             	shr    al,0x3
c001a7a9:	83 e0 07             	and    eax,0x7
c001a7ac:	83 c0 07             	add    eax,0x7
c001a7af:	88 c2                	mov    dl,al
c001a7b1:	83 e0 07             	and    eax,0x7
c001a7b4:	83 e2 07             	and    edx,0x7
c001a7b7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a7be:	8a 15 21 a0 02 c0    	mov    dl,BYTE PTR ds:0xc002a021
c001a7c4:	83 e2 c7             	and    edx,0xffffffc7
c001a7c7:	09 ca                	or     edx,ecx
c001a7c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a7cd:	88 15 21 a0 02 c0    	mov    BYTE PTR ds:0xc002a021,dl
c001a7d3:	89 0c c5 28 a0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5fd8],ecx
c001a7da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a7de:	89 14 c5 24 a0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5fdc],edx
c001a7e5:	a1 64 a0 02 c0       	mov    eax,ds:0xc002a064
c001a7ea:	83 f8 08             	cmp    eax,0x8
c001a7ed:	75 09                	jne    c001a7f8 <Vm::fpuPush(unsigned long long)+0x57>
c001a7ef:	80 0d 20 a0 02 c0 40 	or     BYTE PTR ds:0xc002a020,0x40
c001a7f6:	c3                   	ret    
c001a7f7:	90                   	nop
c001a7f8:	40                   	inc    eax
c001a7f9:	a3 64 a0 02 c0       	mov    ds:0xc002a064,eax
c001a7fe:	c3                   	ret    

c001a7ff <Vm::fpuPop()>:
c001a7ff:	8a 0d 21 a0 02 c0    	mov    cl,BYTE PTR ds:0xc002a021
c001a805:	53                   	push   ebx
c001a806:	c0 e9 03             	shr    cl,0x3
c001a809:	8a 1d 21 a0 02 c0    	mov    bl,BYTE PTR ds:0xc002a021
c001a80f:	83 e1 07             	and    ecx,0x7
c001a812:	83 e3 c7             	and    ebx,0xffffffc7
c001a815:	8b 04 cd 24 a0 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5fdc]
c001a81c:	8b 14 cd 28 a0 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5fd8]
c001a823:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a82a:	83 e1 38             	and    ecx,0x38
c001a82d:	09 d9                	or     ecx,ebx
c001a82f:	88 0d 21 a0 02 c0    	mov    BYTE PTR ds:0xc002a021,cl
c001a835:	8b 0d 64 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a064
c001a83b:	85 c9                	test   ecx,ecx
c001a83d:	74 09                	je     c001a848 <Vm::fpuPop()+0x49>
c001a83f:	49                   	dec    ecx
c001a840:	89 0d 64 a0 02 c0    	mov    DWORD PTR ds:0xc002a064,ecx
c001a846:	eb 08                	jmp    c001a850 <Vm::fpuPop()+0x51>
c001a848:	80 0d 20 a0 02 c0 40 	or     BYTE PTR ds:0xc002a020,0x40
c001a84f:	90                   	nop
c001a850:	5b                   	pop    ebx
c001a851:	c3                   	ret    

c001a852 <Vm::x87Handler(regs*)>:
c001a852:	55                   	push   ebp
c001a853:	57                   	push   edi
c001a854:	56                   	push   esi
c001a855:	53                   	push   ebx
c001a856:	83 ec 1c             	sub    esp,0x1c
c001a859:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a85d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a862:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a865:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a86d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a871:	50                   	push   eax
c001a872:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a876:	50                   	push   eax
c001a877:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a87b:	50                   	push   eax
c001a87c:	53                   	push   ebx
c001a87d:	e8 8c 9e ff ff       	call   c001470e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a882:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a885:	83 c4 10             	add    esp,0x10
c001a888:	89 c6                	mov    esi,eax
c001a88a:	80 fa d9             	cmp    dl,0xd9
c001a88d:	0f 85 79 01 00 00    	jne    c001aa0c <Vm::x87Handler(regs*)+0x1ba>
c001a893:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a897:	8d 50 20             	lea    edx,[eax+0x20]
c001a89a:	80 fa 0e             	cmp    dl,0xe
c001a89d:	0f 87 a5 00 00 00    	ja     c001a948 <Vm::x87Handler(regs*)+0xf6>
c001a8a3:	0f b6 d2             	movzx  edx,dl
c001a8a6:	ff 24 95 d0 6d 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9230]
c001a8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a8b0:	e8 de fc ff ff       	call   c001a593 <Vm::fpuGet0()>
c001a8b5:	eb 09                	jmp    c001a8c0 <Vm::x87Handler(regs*)+0x6e>
c001a8b7:	90                   	nop
c001a8b8:	e8 db fc ff ff       	call   c001a598 <Vm::fpuGet1()>
c001a8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c0:	57                   	push   edi
c001a8c1:	57                   	push   edi
c001a8c2:	66 90                	xchg   ax,ax
c001a8c4:	52                   	push   edx
c001a8c5:	50                   	push   eax
c001a8c6:	e8 d6 fe ff ff       	call   c001a7a1 <Vm::fpuPush(unsigned long long)>
c001a8cb:	90                   	nop
c001a8cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	90                   	nop
c001a8d4:	b0 01                	mov    al,0x1
c001a8d6:	e9 89 0a 00 00       	jmp    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001a8db:	90                   	nop
c001a8dc:	83 ec 0c             	sub    esp,0xc
c001a8df:	6a 00                	push   0x0
c001a8e1:	e8 2c fe ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001a8e6:	59                   	pop    ecx
c001a8e7:	5e                   	pop    esi
c001a8e8:	52                   	push   edx
c001a8e9:	50                   	push   eax
c001a8ea:	e8 b3 fd ff ff       	call   c001a6a2 <Vm::fpuChs(unsigned long long)>
c001a8ef:	eb 17                	jmp    c001a908 <Vm::x87Handler(regs*)+0xb6>
c001a8f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8f4:	83 ec 0c             	sub    esp,0xc
c001a8f7:	6a 00                	push   0x0
c001a8f9:	e8 14 fe ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001a8fe:	5f                   	pop    edi
c001a8ff:	5d                   	pop    ebp
c001a900:	52                   	push   edx
c001a901:	50                   	push   eax
c001a902:	e8 92 fd ff ff       	call   c001a699 <Vm::fpuAbs(unsigned long long)>
c001a907:	90                   	nop
c001a908:	83 c4 0c             	add    esp,0xc
c001a90b:	90                   	nop
c001a90c:	52                   	push   edx
c001a90d:	50                   	push   eax
c001a90e:	66 90                	xchg   ax,ax
c001a910:	6a 00                	push   0x0
c001a912:	66 90                	xchg   ax,ax
c001a914:	e8 3c fe ff ff       	call   c001a755 <Vm::fpuSetReg(int, unsigned long long)>
c001a919:	eb b1                	jmp    c001a8cc <Vm::x87Handler(regs*)+0x7a>
c001a91b:	90                   	nop
c001a91c:	e8 b7 fc ff ff       	call   c001a5d8 <Vm::fpuGetLog210()>
c001a921:	eb 9d                	jmp    c001a8c0 <Vm::x87Handler(regs*)+0x6e>
c001a923:	90                   	nop
c001a924:	e8 7f fc ff ff       	call   c001a5a8 <Vm::fpuGetLog2E()>
c001a929:	eb 95                	jmp    c001a8c0 <Vm::x87Handler(regs*)+0x6e>
c001a92b:	90                   	nop
c001a92c:	e8 6f fc ff ff       	call   c001a5a0 <Vm::fpuGetPi()>
c001a931:	eb 8d                	jmp    c001a8c0 <Vm::x87Handler(regs*)+0x6e>
c001a933:	90                   	nop
c001a934:	e8 b7 fc ff ff       	call   c001a5f0 <Vm::fpuGetLog102()>
c001a939:	eb 85                	jmp    c001a8c0 <Vm::x87Handler(regs*)+0x6e>
c001a93b:	90                   	nop
c001a93c:	e8 7f fc ff ff       	call   c001a5c0 <Vm::fpuGetLogE2()>
c001a941:	e9 7a ff ff ff       	jmp    c001a8c0 <Vm::x87Handler(regs*)+0x6e>
c001a946:	66 90                	xchg   ax,ax
c001a948:	8d 50 40             	lea    edx,[eax+0x40]
c001a94b:	80 fa 07             	cmp    dl,0x7
c001a94e:	77 18                	ja     c001a968 <Vm::x87Handler(regs*)+0x116>
c001a950:	83 ec 0c             	sub    esp,0xc
c001a953:	2d c0 00 00 00       	sub    eax,0xc0
c001a958:	50                   	push   eax
c001a959:	e8 b4 fd ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001a95e:	59                   	pop    ecx
c001a95f:	5e                   	pop    esi
c001a960:	e9 5f ff ff ff       	jmp    c001a8c4 <Vm::x87Handler(regs*)+0x72>
c001a965:	8d 76 00             	lea    esi,[esi+0x0]
c001a968:	8d 50 38             	lea    edx,[eax+0x38]
c001a96b:	80 fa 07             	cmp    dl,0x7
c001a96e:	77 3c                	ja     c001a9ac <Vm::x87Handler(regs*)+0x15a>
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	2d c8 00 00 00       	sub    eax,0xc8
c001a978:	50                   	push   eax
c001a979:	e8 94 fd ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001a97e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a985:	89 c6                	mov    esi,eax
c001a987:	89 d7                	mov    edi,edx
c001a989:	e8 84 fd ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001a98e:	83 c4 0c             	add    esp,0xc
c001a991:	52                   	push   edx
c001a992:	50                   	push   eax
c001a993:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a997:	2d c8 00 00 00       	sub    eax,0xc8
c001a99c:	50                   	push   eax
c001a99d:	e8 b3 fd ff ff       	call   c001a755 <Vm::fpuSetReg(int, unsigned long long)>
c001a9a2:	83 c4 0c             	add    esp,0xc
c001a9a5:	57                   	push   edi
c001a9a6:	56                   	push   esi
c001a9a7:	e9 64 ff ff ff       	jmp    c001a910 <Vm::x87Handler(regs*)+0xbe>
c001a9ac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9b0:	84 d2                	test   dl,dl
c001a9b2:	75 10                	jne    c001a9c4 <Vm::x87Handler(regs*)+0x172>
c001a9b4:	83 ec 0c             	sub    esp,0xc
c001a9b7:	ff 36                	push   DWORD PTR [esi]
c001a9b9:	e8 8d fa ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001a9be:	e9 c9 00 00 00       	jmp    c001aa8c <Vm::x87Handler(regs*)+0x23a>
c001a9c3:	90                   	nop
c001a9c4:	80 fa 03             	cmp    dl,0x3
c001a9c7:	75 13                	jne    c001a9dc <Vm::x87Handler(regs*)+0x18a>
c001a9c9:	e8 31 fe ff ff       	call   c001a7ff <Vm::fpuPop()>
c001a9ce:	55                   	push   ebp
c001a9cf:	55                   	push   ebp
c001a9d0:	52                   	push   edx
c001a9d1:	50                   	push   eax
c001a9d2:	e8 0d fa ff ff       	call   c001a3e4 <Vm::fpuInternalTo32(unsigned long long)>
c001a9d7:	e9 90 00 00 00       	jmp    c001aa6c <Vm::x87Handler(regs*)+0x21a>
c001a9dc:	80 fa 05             	cmp    dl,0x5
c001a9df:	75 0f                	jne    c001a9f0 <Vm::x87Handler(regs*)+0x19e>
c001a9e1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a9e4:	66 a3 22 a0 02 c0    	mov    ds:0xc002a022,ax
c001a9ea:	e9 ed 00 00 00       	jmp    c001aadc <Vm::x87Handler(regs*)+0x28a>
c001a9ef:	90                   	nop
c001a9f0:	31 c0                	xor    eax,eax
c001a9f2:	80 fa 07             	cmp    dl,0x7
c001a9f5:	0f 85 69 09 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001a9fb:	66 a1 22 a0 02 c0    	mov    ax,ds:0xc002a022
c001aa01:	66 89 06             	mov    WORD PTR [esi],ax
c001aa04:	e9 d3 00 00 00       	jmp    c001aadc <Vm::x87Handler(regs*)+0x28a>
c001aa09:	8d 76 00             	lea    esi,[esi+0x0]
c001aa0c:	80 fa d8             	cmp    dl,0xd8
c001aa0f:	0f 84 d3 00 00 00    	je     c001aae8 <Vm::x87Handler(regs*)+0x296>
c001aa15:	80 fa dc             	cmp    dl,0xdc
c001aa18:	0f 84 2a 02 00 00    	je     c001ac48 <Vm::x87Handler(regs*)+0x3f6>
c001aa1e:	80 fa de             	cmp    dl,0xde
c001aa21:	0f 84 f1 02 00 00    	je     c001ad18 <Vm::x87Handler(regs*)+0x4c6>
c001aa27:	80 fa dd             	cmp    dl,0xdd
c001aa2a:	0f 84 94 04 00 00    	je     c001aec4 <Vm::x87Handler(regs*)+0x672>
c001aa30:	80 fa da             	cmp    dl,0xda
c001aa33:	0f 84 5f 05 00 00    	je     c001af98 <Vm::x87Handler(regs*)+0x746>
c001aa39:	80 fa df             	cmp    dl,0xdf
c001aa3c:	0f 84 aa 05 00 00    	je     c001afec <Vm::x87Handler(regs*)+0x79a>
c001aa42:	31 c0                	xor    eax,eax
c001aa44:	80 fa db             	cmp    dl,0xdb
c001aa47:	0f 85 17 09 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001aa4d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa51:	80 fa 03             	cmp    dl,0x3
c001aa54:	0f 85 c2 06 00 00    	jne    c001b11c <Vm::x87Handler(regs*)+0x8ca>
c001aa5a:	e8 a0 fd ff ff       	call   c001a7ff <Vm::fpuPop()>
c001aa5f:	55                   	push   ebp
c001aa60:	55                   	push   ebp
c001aa61:	8d 76 00             	lea    esi,[esi+0x0]
c001aa64:	52                   	push   edx
c001aa65:	50                   	push   eax
c001aa66:	e8 2e fa ff ff       	call   c001a499 <Vm::fpuFloatToLong(unsigned long long)>
c001aa6b:	90                   	nop
c001aa6c:	83 c4 10             	add    esp,0x10
c001aa6f:	89 06                	mov    DWORD PTR [esi],eax
c001aa71:	eb 69                	jmp    c001aadc <Vm::x87Handler(regs*)+0x28a>
c001aa73:	90                   	nop
c001aa74:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa78:	84 d2                	test   dl,dl
c001aa7a:	0f 85 2c 06 00 00    	jne    c001b0ac <Vm::x87Handler(regs*)+0x85a>
c001aa80:	57                   	push   edi
c001aa81:	57                   	push   edi
c001aa82:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa85:	ff 36                	push   DWORD PTR [esi]
c001aa87:	e8 04 fa ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001aa8c:	5e                   	pop    esi
c001aa8d:	5f                   	pop    edi
c001aa8e:	52                   	push   edx
c001aa8f:	50                   	push   eax
c001aa90:	e8 0c fd ff ff       	call   c001a7a1 <Vm::fpuPush(unsigned long long)>
c001aa95:	8d 76 00             	lea    esi,[esi+0x0]
c001aa98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa9c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aa9f:	e9 2c fe ff ff       	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x7e>
c001aaa4:	80 fa 03             	cmp    dl,0x3
c001aaa7:	0f 85 2b 07 00 00    	jne    c001b1d8 <Vm::x87Handler(regs*)+0x986>
c001aaad:	57                   	push   edi
c001aaae:	57                   	push   edi
c001aaaf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aab2:	ff 36                	push   DWORD PTR [esi]
c001aab4:	e8 d7 f9 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001aab9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aac0:	89 c6                	mov    esi,eax
c001aac2:	89 d7                	mov    edi,edx
c001aac4:	e8 49 fc ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001aac9:	57                   	push   edi
c001aaca:	56                   	push   esi
c001aacb:	52                   	push   edx
c001aacc:	50                   	push   eax
c001aacd:	e8 60 fb ff ff       	call   c001a632 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001aad2:	83 c4 20             	add    esp,0x20
c001aad5:	e8 25 fd ff ff       	call   c001a7ff <Vm::fpuPop()>
c001aada:	66 90                	xchg   ax,ax
c001aadc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aae0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aae3:	e9 ec fd ff ff       	jmp    c001a8d4 <Vm::x87Handler(regs*)+0x82>
c001aae8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aaec:	8d 50 40             	lea    edx,[eax+0x40]
c001aaef:	80 fa 07             	cmp    dl,0x7
c001aaf2:	77 2c                	ja     c001ab20 <Vm::x87Handler(regs*)+0x2ce>
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	2d c0 00 00 00       	sub    eax,0xc0
c001aafc:	50                   	push   eax
c001aafd:	e8 10 fc ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ab02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab09:	89 c6                	mov    esi,eax
c001ab0b:	89 d7                	mov    edi,edx
c001ab0d:	e8 00 fc ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ab12:	57                   	push   edi
c001ab13:	56                   	push   esi
c001ab14:	52                   	push   edx
c001ab15:	50                   	push   eax
c001ab16:	e8 6d fb ff ff       	call   c001a688 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ab1b:	eb 33                	jmp    c001ab50 <Vm::x87Handler(regs*)+0x2fe>
c001ab1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab20:	8d 50 38             	lea    edx,[eax+0x38]
c001ab23:	80 fa 07             	cmp    dl,0x7
c001ab26:	77 30                	ja     c001ab58 <Vm::x87Handler(regs*)+0x306>
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	2d c8 00 00 00       	sub    eax,0xc8
c001ab30:	50                   	push   eax
c001ab31:	e8 dc fb ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ab36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab3d:	89 c6                	mov    esi,eax
c001ab3f:	89 d7                	mov    edi,edx
c001ab41:	e8 cc fb ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ab46:	57                   	push   edi
c001ab47:	56                   	push   esi
c001ab48:	52                   	push   edx
c001ab49:	50                   	push   eax
c001ab4a:	e8 72 fb ff ff       	call   c001a6c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab4f:	90                   	nop
c001ab50:	83 c4 1c             	add    esp,0x1c
c001ab53:	e9 b4 fd ff ff       	jmp    c001a90c <Vm::x87Handler(regs*)+0xba>
c001ab58:	8d 50 30             	lea    edx,[eax+0x30]
c001ab5b:	80 fa 07             	cmp    dl,0x7
c001ab5e:	77 10                	ja     c001ab70 <Vm::x87Handler(regs*)+0x31e>
c001ab60:	83 ec 0c             	sub    esp,0xc
c001ab63:	2d d0 00 00 00       	sub    eax,0xd0
c001ab68:	e9 c3 03 00 00       	jmp    c001af30 <Vm::x87Handler(regs*)+0x6de>
c001ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab70:	8d 50 28             	lea    edx,[eax+0x28]
c001ab73:	80 fa 07             	cmp    dl,0x7
c001ab76:	77 10                	ja     c001ab88 <Vm::x87Handler(regs*)+0x336>
c001ab78:	83 ec 0c             	sub    esp,0xc
c001ab7b:	2d d8 00 00 00       	sub    eax,0xd8
c001ab80:	e9 e7 03 00 00       	jmp    c001af6c <Vm::x87Handler(regs*)+0x71a>
c001ab85:	8d 76 00             	lea    esi,[esi+0x0]
c001ab88:	8d 50 20             	lea    edx,[eax+0x20]
c001ab8b:	80 fa 07             	cmp    dl,0x7
c001ab8e:	77 1c                	ja     c001abac <Vm::x87Handler(regs*)+0x35a>
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	2d e0 00 00 00       	sub    eax,0xe0
c001ab98:	50                   	push   eax
c001ab99:	e8 74 fb ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ab9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aba5:	89 c6                	mov    esi,eax
c001aba7:	89 d7                	mov    edi,edx
c001aba9:	eb 25                	jmp    c001abd0 <Vm::x87Handler(regs*)+0x37e>
c001abab:	90                   	nop
c001abac:	8d 50 18             	lea    edx,[eax+0x18]
c001abaf:	80 fa 07             	cmp    dl,0x7
c001abb2:	77 30                	ja     c001abe4 <Vm::x87Handler(regs*)+0x392>
c001abb4:	83 ec 0c             	sub    esp,0xc
c001abb7:	6a 00                	push   0x0
c001abb9:	e8 54 fb ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001abbe:	89 c6                	mov    esi,eax
c001abc0:	89 d7                	mov    edi,edx
c001abc2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001abc6:	2d e8 00 00 00       	sub    eax,0xe8
c001abcb:	89 04 24             	mov    DWORD PTR [esp],eax
c001abce:	66 90                	xchg   ax,ax
c001abd0:	e8 3d fb ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001abd5:	57                   	push   edi
c001abd6:	56                   	push   esi
c001abd7:	52                   	push   edx
c001abd8:	50                   	push   eax
c001abd9:	e8 d4 fa ff ff       	call   c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001abde:	e9 6d ff ff ff       	jmp    c001ab50 <Vm::x87Handler(regs*)+0x2fe>
c001abe3:	90                   	nop
c001abe4:	8d 50 10             	lea    edx,[eax+0x10]
c001abe7:	80 fa 07             	cmp    dl,0x7
c001abea:	77 1c                	ja     c001ac08 <Vm::x87Handler(regs*)+0x3b6>
c001abec:	83 ec 0c             	sub    esp,0xc
c001abef:	2d f0 00 00 00       	sub    eax,0xf0
c001abf4:	50                   	push   eax
c001abf5:	e8 18 fb ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001abfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac01:	89 c6                	mov    esi,eax
c001ac03:	89 d7                	mov    edi,edx
c001ac05:	eb 25                	jmp    c001ac2c <Vm::x87Handler(regs*)+0x3da>
c001ac07:	90                   	nop
c001ac08:	3c f7                	cmp    al,0xf7
c001ac0a:	0f 86 00 04 00 00    	jbe    c001b010 <Vm::x87Handler(regs*)+0x7be>
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	6a 00                	push   0x0
c001ac15:	e8 f8 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ac1a:	89 c6                	mov    esi,eax
c001ac1c:	89 d7                	mov    edi,edx
c001ac1e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac22:	2d f8 00 00 00       	sub    eax,0xf8
c001ac27:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac2a:	66 90                	xchg   ax,ax
c001ac2c:	e8 e1 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ac31:	57                   	push   edi
c001ac32:	56                   	push   esi
c001ac33:	52                   	push   edx
c001ac34:	50                   	push   eax
c001ac35:	e8 a6 fa ff ff       	call   c001a6e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ac3a:	83 c4 1c             	add    esp,0x1c
c001ac3d:	52                   	push   edx
c001ac3e:	50                   	push   eax
c001ac3f:	6a 00                	push   0x0
c001ac41:	e9 6a 02 00 00       	jmp    c001aeb0 <Vm::x87Handler(regs*)+0x65e>
c001ac46:	66 90                	xchg   ax,ax
c001ac48:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac4c:	8d 50 40             	lea    edx,[eax+0x40]
c001ac4f:	80 fa 07             	cmp    dl,0x7
c001ac52:	77 38                	ja     c001ac8c <Vm::x87Handler(regs*)+0x43a>
c001ac54:	83 ec 0c             	sub    esp,0xc
c001ac57:	2d c0 00 00 00       	sub    eax,0xc0
c001ac5c:	50                   	push   eax
c001ac5d:	e8 b0 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ac62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac69:	89 c6                	mov    esi,eax
c001ac6b:	89 d7                	mov    edi,edx
c001ac6d:	e8 a0 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ac72:	57                   	push   edi
c001ac73:	56                   	push   esi
c001ac74:	52                   	push   edx
c001ac75:	50                   	push   eax
c001ac76:	e8 0d fa ff ff       	call   c001a688 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ac7b:	83 c4 1c             	add    esp,0x1c
c001ac7e:	52                   	push   edx
c001ac7f:	50                   	push   eax
c001ac80:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac84:	2d c0 00 00 00       	sub    eax,0xc0
c001ac89:	eb 41                	jmp    c001accc <Vm::x87Handler(regs*)+0x47a>
c001ac8b:	90                   	nop
c001ac8c:	8d 50 38             	lea    edx,[eax+0x38]
c001ac8f:	80 fa 07             	cmp    dl,0x7
c001ac92:	77 40                	ja     c001acd4 <Vm::x87Handler(regs*)+0x482>
c001ac94:	83 ec 0c             	sub    esp,0xc
c001ac97:	2d c8 00 00 00       	sub    eax,0xc8
c001ac9c:	50                   	push   eax
c001ac9d:	e8 70 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001aca2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aca9:	89 c6                	mov    esi,eax
c001acab:	89 d7                	mov    edi,edx
c001acad:	e8 60 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001acb2:	57                   	push   edi
c001acb3:	56                   	push   esi
c001acb4:	52                   	push   edx
c001acb5:	50                   	push   eax
c001acb6:	e8 06 fa ff ff       	call   c001a6c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001acbb:	83 c4 1c             	add    esp,0x1c
c001acbe:	52                   	push   edx
c001acbf:	50                   	push   eax
c001acc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acc4:	2d c8 00 00 00       	sub    eax,0xc8
c001acc9:	8d 76 00             	lea    esi,[esi+0x0]
c001accc:	50                   	push   eax
c001accd:	e9 42 fc ff ff       	jmp    c001a914 <Vm::x87Handler(regs*)+0xc2>
c001acd2:	66 90                	xchg   ax,ax
c001acd4:	83 c0 18             	add    eax,0x18
c001acd7:	3c 07                	cmp    al,0x7
c001acd9:	0f 87 6d 04 00 00    	ja     c001b14c <Vm::x87Handler(regs*)+0x8fa>
c001acdf:	83 ec 0c             	sub    esp,0xc
c001ace2:	6a 00                	push   0x0
c001ace4:	e8 29 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ace9:	89 c6                	mov    esi,eax
c001aceb:	89 d7                	mov    edi,edx
c001aced:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001acf1:	2d e8 00 00 00       	sub    eax,0xe8
c001acf6:	89 04 24             	mov    DWORD PTR [esp],eax
c001acf9:	e8 14 fa ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001acfe:	57                   	push   edi
c001acff:	56                   	push   esi
c001ad00:	52                   	push   edx
c001ad01:	50                   	push   eax
c001ad02:	e8 ab f9 ff ff       	call   c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad07:	83 c4 1c             	add    esp,0x1c
c001ad0a:	52                   	push   edx
c001ad0b:	50                   	push   eax
c001ad0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad10:	2d e8 00 00 00       	sub    eax,0xe8
c001ad15:	eb b5                	jmp    c001accc <Vm::x87Handler(regs*)+0x47a>
c001ad17:	90                   	nop
c001ad18:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad1c:	8d 50 40             	lea    edx,[eax+0x40]
c001ad1f:	80 fa 07             	cmp    dl,0x7
c001ad22:	77 3c                	ja     c001ad60 <Vm::x87Handler(regs*)+0x50e>
c001ad24:	83 ec 0c             	sub    esp,0xc
c001ad27:	2d c0 00 00 00       	sub    eax,0xc0
c001ad2c:	50                   	push   eax
c001ad2d:	e8 e0 f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ad32:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad39:	89 c6                	mov    esi,eax
c001ad3b:	89 d7                	mov    edi,edx
c001ad3d:	e8 d0 f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ad42:	57                   	push   edi
c001ad43:	56                   	push   esi
c001ad44:	52                   	push   edx
c001ad45:	50                   	push   eax
c001ad46:	e8 3d f9 ff ff       	call   c001a688 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad4b:	83 c4 1c             	add    esp,0x1c
c001ad4e:	52                   	push   edx
c001ad4f:	50                   	push   eax
c001ad50:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad54:	2d c0 00 00 00       	sub    eax,0xc0
c001ad59:	e9 b2 01 00 00       	jmp    c001af10 <Vm::x87Handler(regs*)+0x6be>
c001ad5e:	66 90                	xchg   ax,ax
c001ad60:	8d 50 20             	lea    edx,[eax+0x20]
c001ad63:	80 fa 07             	cmp    dl,0x7
c001ad66:	77 3c                	ja     c001ada4 <Vm::x87Handler(regs*)+0x552>
c001ad68:	83 ec 0c             	sub    esp,0xc
c001ad6b:	2d e0 00 00 00       	sub    eax,0xe0
c001ad70:	50                   	push   eax
c001ad71:	e8 9c f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ad76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad7d:	89 c6                	mov    esi,eax
c001ad7f:	89 d7                	mov    edi,edx
c001ad81:	e8 8c f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ad86:	57                   	push   edi
c001ad87:	56                   	push   esi
c001ad88:	52                   	push   edx
c001ad89:	50                   	push   eax
c001ad8a:	e8 23 f9 ff ff       	call   c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ad8f:	83 c4 1c             	add    esp,0x1c
c001ad92:	52                   	push   edx
c001ad93:	50                   	push   eax
c001ad94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad98:	2d e0 00 00 00       	sub    eax,0xe0
c001ad9d:	e9 6e 01 00 00       	jmp    c001af10 <Vm::x87Handler(regs*)+0x6be>
c001ada2:	66 90                	xchg   ax,ax
c001ada4:	8d 50 18             	lea    edx,[eax+0x18]
c001ada7:	80 fa 07             	cmp    dl,0x7
c001adaa:	77 3c                	ja     c001ade8 <Vm::x87Handler(regs*)+0x596>
c001adac:	83 ec 0c             	sub    esp,0xc
c001adaf:	6a 00                	push   0x0
c001adb1:	e8 5c f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001adb6:	89 c6                	mov    esi,eax
c001adb8:	89 d7                	mov    edi,edx
c001adba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001adbe:	2d e8 00 00 00       	sub    eax,0xe8
c001adc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001adc6:	e8 47 f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001adcb:	57                   	push   edi
c001adcc:	56                   	push   esi
c001adcd:	52                   	push   edx
c001adce:	50                   	push   eax
c001adcf:	e8 de f8 ff ff       	call   c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001add4:	83 c4 1c             	add    esp,0x1c
c001add7:	52                   	push   edx
c001add8:	50                   	push   eax
c001add9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001addd:	2d e8 00 00 00       	sub    eax,0xe8
c001ade2:	e9 29 01 00 00       	jmp    c001af10 <Vm::x87Handler(regs*)+0x6be>
c001ade7:	90                   	nop
c001ade8:	8d 50 38             	lea    edx,[eax+0x38]
c001adeb:	80 fa 07             	cmp    dl,0x7
c001adee:	77 3c                	ja     c001ae2c <Vm::x87Handler(regs*)+0x5da>
c001adf0:	83 ec 0c             	sub    esp,0xc
c001adf3:	2d c8 00 00 00       	sub    eax,0xc8
c001adf8:	50                   	push   eax
c001adf9:	e8 14 f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001adfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae05:	89 c6                	mov    esi,eax
c001ae07:	89 d7                	mov    edi,edx
c001ae09:	e8 04 f9 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ae0e:	57                   	push   edi
c001ae0f:	56                   	push   esi
c001ae10:	52                   	push   edx
c001ae11:	50                   	push   eax
c001ae12:	e8 aa f8 ff ff       	call   c001a6c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ae17:	83 c4 1c             	add    esp,0x1c
c001ae1a:	52                   	push   edx
c001ae1b:	50                   	push   eax
c001ae1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae20:	2d c8 00 00 00       	sub    eax,0xc8
c001ae25:	e9 82 00 00 00       	jmp    c001aeac <Vm::x87Handler(regs*)+0x65a>
c001ae2a:	66 90                	xchg   ax,ax
c001ae2c:	3c f7                	cmp    al,0xf7
c001ae2e:	76 38                	jbe    c001ae68 <Vm::x87Handler(regs*)+0x616>
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	6a 00                	push   0x0
c001ae35:	e8 d8 f8 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ae3a:	89 c6                	mov    esi,eax
c001ae3c:	89 d7                	mov    edi,edx
c001ae3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae42:	2d f8 00 00 00       	sub    eax,0xf8
c001ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae4a:	e8 c3 f8 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ae4f:	57                   	push   edi
c001ae50:	56                   	push   esi
c001ae51:	52                   	push   edx
c001ae52:	50                   	push   eax
c001ae53:	e8 88 f8 ff ff       	call   c001a6e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae58:	83 c4 1c             	add    esp,0x1c
c001ae5b:	52                   	push   edx
c001ae5c:	50                   	push   eax
c001ae5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae61:	2d f8 00 00 00       	sub    eax,0xf8
c001ae66:	eb 44                	jmp    c001aeac <Vm::x87Handler(regs*)+0x65a>
c001ae68:	8d 50 10             	lea    edx,[eax+0x10]
c001ae6b:	80 fa 07             	cmp    dl,0x7
c001ae6e:	0f 87 6c 01 00 00    	ja     c001afe0 <Vm::x87Handler(regs*)+0x78e>
c001ae74:	83 ec 0c             	sub    esp,0xc
c001ae77:	2d f0 00 00 00       	sub    eax,0xf0
c001ae7c:	50                   	push   eax
c001ae7d:	e8 90 f8 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ae82:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae89:	89 c6                	mov    esi,eax
c001ae8b:	89 d7                	mov    edi,edx
c001ae8d:	e8 80 f8 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001ae92:	57                   	push   edi
c001ae93:	56                   	push   esi
c001ae94:	52                   	push   edx
c001ae95:	50                   	push   eax
c001ae96:	e8 45 f8 ff ff       	call   c001a6e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ae9b:	83 c4 1c             	add    esp,0x1c
c001ae9e:	52                   	push   edx
c001ae9f:	50                   	push   eax
c001aea0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aea4:	2d f0 00 00 00       	sub    eax,0xf0
c001aea9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeac:	50                   	push   eax
c001aead:	8d 76 00             	lea    esi,[esi+0x0]
c001aeb0:	e8 a0 f8 ff ff       	call   c001a755 <Vm::fpuSetReg(int, unsigned long long)>
c001aeb5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001aeb9:	e8 41 f9 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001aebe:	e9 0d fa ff ff       	jmp    c001a8d0 <Vm::x87Handler(regs*)+0x7e>
c001aec3:	90                   	nop
c001aec4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aec8:	8d 50 30             	lea    edx,[eax+0x30]
c001aecb:	80 fa 07             	cmp    dl,0x7
c001aece:	77 20                	ja     c001aef0 <Vm::x87Handler(regs*)+0x69e>
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	6a 00                	push   0x0
c001aed5:	e8 38 f8 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001aeda:	83 c4 0c             	add    esp,0xc
c001aedd:	52                   	push   edx
c001aede:	50                   	push   eax
c001aedf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aee3:	2d d0 00 00 00       	sub    eax,0xd0
c001aee8:	e9 df fd ff ff       	jmp    c001accc <Vm::x87Handler(regs*)+0x47a>
c001aeed:	8d 76 00             	lea    esi,[esi+0x0]
c001aef0:	8d 50 28             	lea    edx,[eax+0x28]
c001aef3:	80 fa 07             	cmp    dl,0x7
c001aef6:	77 28                	ja     c001af20 <Vm::x87Handler(regs*)+0x6ce>
c001aef8:	83 ec 0c             	sub    esp,0xc
c001aefb:	6a 00                	push   0x0
c001aefd:	e8 10 f8 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001af02:	83 c4 0c             	add    esp,0xc
c001af05:	52                   	push   edx
c001af06:	50                   	push   eax
c001af07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af0b:	2d d8 00 00 00       	sub    eax,0xd8
c001af10:	50                   	push   eax
c001af11:	e8 3f f8 ff ff       	call   c001a755 <Vm::fpuSetReg(int, unsigned long long)>
c001af16:	e8 e4 f8 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001af1b:	e9 ac f9 ff ff       	jmp    c001a8cc <Vm::x87Handler(regs*)+0x7a>
c001af20:	8d 50 20             	lea    edx,[eax+0x20]
c001af23:	80 fa 07             	cmp    dl,0x7
c001af26:	77 30                	ja     c001af58 <Vm::x87Handler(regs*)+0x706>
c001af28:	83 ec 0c             	sub    esp,0xc
c001af2b:	2d e0 00 00 00       	sub    eax,0xe0
c001af30:	50                   	push   eax
c001af31:	e8 dc f7 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001af36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af3d:	89 c6                	mov    esi,eax
c001af3f:	89 d7                	mov    edi,edx
c001af41:	e8 cc f7 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001af46:	57                   	push   edi
c001af47:	56                   	push   esi
c001af48:	52                   	push   edx
c001af49:	50                   	push   eax
c001af4a:	e8 e3 f6 ff ff       	call   c001a632 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af4f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001af53:	e9 78 02 00 00       	jmp    c001b1d0 <Vm::x87Handler(regs*)+0x97e>
c001af58:	8d 50 18             	lea    edx,[eax+0x18]
c001af5b:	80 fa 07             	cmp    dl,0x7
c001af5e:	0f 87 10 fb ff ff    	ja     c001aa74 <Vm::x87Handler(regs*)+0x222>
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	2d e8 00 00 00       	sub    eax,0xe8
c001af6c:	50                   	push   eax
c001af6d:	e8 a0 f7 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001af72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af79:	89 c6                	mov    esi,eax
c001af7b:	89 d7                	mov    edi,edx
c001af7d:	e8 90 f7 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001af82:	57                   	push   edi
c001af83:	56                   	push   esi
c001af84:	52                   	push   edx
c001af85:	50                   	push   eax
c001af86:	e8 a7 f6 ff ff       	call   c001a632 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001af8b:	83 c4 20             	add    esp,0x20
c001af8e:	e8 6c f8 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001af93:	eb 6f                	jmp    c001b004 <Vm::x87Handler(regs*)+0x7b2>
c001af95:	8d 76 00             	lea    esi,[esi+0x0]
c001af98:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001af9c:	0f 85 22 01 00 00    	jne    c001b0c4 <Vm::x87Handler(regs*)+0x872>
c001afa2:	66 90                	xchg   ax,ax
c001afa4:	83 ec 0c             	sub    esp,0xc
c001afa7:	6a 01                	push   0x1
c001afa9:	e8 64 f7 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001afae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afb5:	89 c6                	mov    esi,eax
c001afb7:	89 d7                	mov    edi,edx
c001afb9:	e8 54 f7 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001afbe:	57                   	push   edi
c001afbf:	56                   	push   esi
c001afc0:	52                   	push   edx
c001afc1:	50                   	push   eax
c001afc2:	e8 6b f6 ff ff       	call   c001a632 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001afc7:	83 c4 20             	add    esp,0x20
c001afca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001afce:	e8 2c f8 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001afd3:	e8 27 f8 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001afd8:	e9 f7 f8 ff ff       	jmp    c001a8d4 <Vm::x87Handler(regs*)+0x82>
c001afdd:	8d 76 00             	lea    esi,[esi+0x0]
c001afe0:	3c d9                	cmp    al,0xd9
c001afe2:	0f 85 e8 02 00 00    	jne    c001b2d0 <Vm::x87Handler(regs*)+0xa7e>
c001afe8:	eb ba                	jmp    c001afa4 <Vm::x87Handler(regs*)+0x752>
c001afea:	66 90                	xchg   ax,ax
c001afec:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001aff0:	0f 85 2a 03 00 00    	jne    c001b320 <Vm::x87Handler(regs*)+0xace>
c001aff6:	0f b7 05 20 a0 02 c0 	movzx  eax,WORD PTR ds:0xc002a020
c001affd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b001:	8d 76 00             	lea    esi,[esi+0x0]
c001b004:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b008:	e9 c7 f8 ff ff       	jmp    c001a8d4 <Vm::x87Handler(regs*)+0x82>
c001b00d:	8d 76 00             	lea    esi,[esi+0x0]
c001b010:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b014:	84 d2                	test   dl,dl
c001b016:	75 10                	jne    c001b028 <Vm::x87Handler(regs*)+0x7d6>
c001b018:	83 ec 0c             	sub    esp,0xc
c001b01b:	ff 36                	push   DWORD PTR [esi]
c001b01d:	e8 29 f4 ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001b022:	e9 39 01 00 00       	jmp    c001b160 <Vm::x87Handler(regs*)+0x90e>
c001b027:	90                   	nop
c001b028:	80 fa 01             	cmp    dl,0x1
c001b02b:	75 0f                	jne    c001b03c <Vm::x87Handler(regs*)+0x7ea>
c001b02d:	83 ec 0c             	sub    esp,0xc
c001b030:	ff 36                	push   DWORD PTR [esi]
c001b032:	e8 14 f4 ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001b037:	e9 b4 02 00 00       	jmp    c001b2f0 <Vm::x87Handler(regs*)+0xa9e>
c001b03c:	80 fa 04             	cmp    dl,0x4
c001b03f:	75 0f                	jne    c001b050 <Vm::x87Handler(regs*)+0x7fe>
c001b041:	83 ec 0c             	sub    esp,0xc
c001b044:	ff 36                	push   DWORD PTR [esi]
c001b046:	e8 00 f4 ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001b04b:	e9 9c 01 00 00       	jmp    c001b1ec <Vm::x87Handler(regs*)+0x99a>
c001b050:	80 fa 05             	cmp    dl,0x5
c001b053:	75 1b                	jne    c001b070 <Vm::x87Handler(regs*)+0x81e>
c001b055:	83 ec 0c             	sub    esp,0xc
c001b058:	6a 00                	push   0x0
c001b05a:	e8 b3 f6 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b05f:	89 c7                	mov    edi,eax
c001b061:	89 d5                	mov    ebp,edx
c001b063:	58                   	pop    eax
c001b064:	ff 36                	push   DWORD PTR [esi]
c001b066:	e8 e0 f3 ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001b06b:	e9 bc 01 00 00       	jmp    c001b22c <Vm::x87Handler(regs*)+0x9da>
c001b070:	80 fa 06             	cmp    dl,0x6
c001b073:	75 0f                	jne    c001b084 <Vm::x87Handler(regs*)+0x832>
c001b075:	83 ec 0c             	sub    esp,0xc
c001b078:	ff 36                	push   DWORD PTR [esi]
c001b07a:	e8 cc f3 ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001b07f:	e9 cc 01 00 00       	jmp    c001b250 <Vm::x87Handler(regs*)+0x9fe>
c001b084:	31 c0                	xor    eax,eax
c001b086:	80 fa 07             	cmp    dl,0x7
c001b089:	0f 85 d5 02 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b08f:	83 ec 0c             	sub    esp,0xc
c001b092:	6a 00                	push   0x0
c001b094:	e8 79 f6 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b099:	89 c7                	mov    edi,eax
c001b09b:	89 d5                	mov    ebp,edx
c001b09d:	58                   	pop    eax
c001b09e:	ff 36                	push   DWORD PTR [esi]
c001b0a0:	e8 a6 f3 ff ff       	call   c001a44b <Vm::fpu32ToInternal(unsigned int)>
c001b0a5:	e9 ee 01 00 00       	jmp    c001b298 <Vm::x87Handler(regs*)+0xa46>
c001b0aa:	66 90                	xchg   ax,ax
c001b0ac:	80 fa 03             	cmp    dl,0x3
c001b0af:	0f 85 f7 01 00 00    	jne    c001b2ac <Vm::x87Handler(regs*)+0xa5a>
c001b0b5:	e8 45 f7 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001b0ba:	51                   	push   ecx
c001b0bb:	51                   	push   ecx
c001b0bc:	e9 03 02 00 00       	jmp    c001b2c4 <Vm::x87Handler(regs*)+0xa72>
c001b0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b0c8:	80 fa 01             	cmp    dl,0x1
c001b0cb:	75 0b                	jne    c001b0d8 <Vm::x87Handler(regs*)+0x886>
c001b0cd:	57                   	push   edi
c001b0ce:	57                   	push   edi
c001b0cf:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0d1:	e9 0e 02 00 00       	jmp    c001b2e4 <Vm::x87Handler(regs*)+0xa92>
c001b0d6:	66 90                	xchg   ax,ax
c001b0d8:	80 fa 04             	cmp    dl,0x4
c001b0db:	75 13                	jne    c001b0f0 <Vm::x87Handler(regs*)+0x89e>
c001b0dd:	31 d2                	xor    edx,edx
c001b0df:	51                   	push   ecx
c001b0e0:	51                   	push   ecx
c001b0e1:	8b 06                	mov    eax,DWORD PTR [esi]
c001b0e3:	52                   	push   edx
c001b0e4:	50                   	push   eax
c001b0e5:	e8 4a f4 ff ff       	call   c001a534 <Vm::fpuLongToFloat(long long)>
c001b0ea:	e9 fd 00 00 00       	jmp    c001b1ec <Vm::x87Handler(regs*)+0x99a>
c001b0ef:	90                   	nop
c001b0f0:	31 c0                	xor    eax,eax
c001b0f2:	80 fa 07             	cmp    dl,0x7
c001b0f5:	0f 85 69 02 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b0fb:	83 ec 0c             	sub    esp,0xc
c001b0fe:	6a 00                	push   0x0
c001b100:	e8 0d f6 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b105:	89 c7                	mov    edi,eax
c001b107:	89 d5                	mov    ebp,edx
c001b109:	58                   	pop    eax
c001b10a:	8b 06                	mov    eax,DWORD PTR [esi]
c001b10c:	5a                   	pop    edx
c001b10d:	31 d2                	xor    edx,edx
c001b10f:	52                   	push   edx
c001b110:	50                   	push   eax
c001b111:	e8 1e f4 ff ff       	call   c001a534 <Vm::fpuLongToFloat(long long)>
c001b116:	e9 7d 01 00 00       	jmp    c001b298 <Vm::x87Handler(regs*)+0xa46>
c001b11b:	90                   	nop
c001b11c:	84 d2                	test   dl,dl
c001b11e:	75 10                	jne    c001b130 <Vm::x87Handler(regs*)+0x8de>
c001b120:	31 d2                	xor    edx,edx
c001b122:	55                   	push   ebp
c001b123:	55                   	push   ebp
c001b124:	8b 06                	mov    eax,DWORD PTR [esi]
c001b126:	52                   	push   edx
c001b127:	50                   	push   eax
c001b128:	e9 03 02 00 00       	jmp    c001b330 <Vm::x87Handler(regs*)+0xade>
c001b12d:	8d 76 00             	lea    esi,[esi+0x0]
c001b130:	31 c0                	xor    eax,eax
c001b132:	80 fa 02             	cmp    dl,0x2
c001b135:	0f 85 29 02 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b13b:	83 ec 0c             	sub    esp,0xc
c001b13e:	6a 00                	push   0x0
c001b140:	e8 cd f5 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b145:	59                   	pop    ecx
c001b146:	5f                   	pop    edi
c001b147:	e9 18 f9 ff ff       	jmp    c001aa64 <Vm::x87Handler(regs*)+0x212>
c001b14c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b150:	84 d2                	test   dl,dl
c001b152:	75 2c                	jne    c001b180 <Vm::x87Handler(regs*)+0x92e>
c001b154:	50                   	push   eax
c001b155:	50                   	push   eax
c001b156:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b159:	ff 36                	push   DWORD PTR [esi]
c001b15b:	e8 30 f3 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b160:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b167:	89 c6                	mov    esi,eax
c001b169:	89 d7                	mov    edi,edx
c001b16b:	e8 a2 f5 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b170:	57                   	push   edi
c001b171:	56                   	push   esi
c001b172:	52                   	push   edx
c001b173:	50                   	push   eax
c001b174:	e8 0f f5 ff ff       	call   c001a688 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b179:	e9 8e 01 00 00       	jmp    c001b30c <Vm::x87Handler(regs*)+0xaba>
c001b17e:	66 90                	xchg   ax,ax
c001b180:	80 fa 01             	cmp    dl,0x1
c001b183:	75 13                	jne    c001b198 <Vm::x87Handler(regs*)+0x946>
c001b185:	50                   	push   eax
c001b186:	50                   	push   eax
c001b187:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b18a:	ff 36                	push   DWORD PTR [esi]
c001b18c:	e8 ff f2 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b191:	e9 5a 01 00 00       	jmp    c001b2f0 <Vm::x87Handler(regs*)+0xa9e>
c001b196:	66 90                	xchg   ax,ax
c001b198:	80 fa 02             	cmp    dl,0x2
c001b19b:	0f 85 03 f9 ff ff    	jne    c001aaa4 <Vm::x87Handler(regs*)+0x252>
c001b1a1:	55                   	push   ebp
c001b1a2:	55                   	push   ebp
c001b1a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1a6:	ff 36                	push   DWORD PTR [esi]
c001b1a8:	e8 e3 f2 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b1ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1b4:	89 c6                	mov    esi,eax
c001b1b6:	89 d7                	mov    edi,edx
c001b1b8:	e8 55 f5 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b1bd:	57                   	push   edi
c001b1be:	56                   	push   esi
c001b1bf:	52                   	push   edx
c001b1c0:	50                   	push   eax
c001b1c1:	e8 6c f4 ff ff       	call   c001a632 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b1ca:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d0:	83 c4 20             	add    esp,0x20
c001b1d3:	e9 fc f6 ff ff       	jmp    c001a8d4 <Vm::x87Handler(regs*)+0x82>
c001b1d8:	80 fa 04             	cmp    dl,0x4
c001b1db:	75 2f                	jne    c001b20c <Vm::x87Handler(regs*)+0x9ba>
c001b1dd:	51                   	push   ecx
c001b1de:	51                   	push   ecx
c001b1df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b1e2:	ff 36                	push   DWORD PTR [esi]
c001b1e4:	e8 a7 f2 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b1e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1f3:	89 c6                	mov    esi,eax
c001b1f5:	89 d7                	mov    edi,edx
c001b1f7:	e8 16 f5 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b1fc:	57                   	push   edi
c001b1fd:	56                   	push   esi
c001b1fe:	52                   	push   edx
c001b1ff:	50                   	push   eax
c001b200:	e8 ad f4 ff ff       	call   c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b205:	e9 02 01 00 00       	jmp    c001b30c <Vm::x87Handler(regs*)+0xaba>
c001b20a:	66 90                	xchg   ax,ax
c001b20c:	80 fa 05             	cmp    dl,0x5
c001b20f:	75 2b                	jne    c001b23c <Vm::x87Handler(regs*)+0x9ea>
c001b211:	83 ec 0c             	sub    esp,0xc
c001b214:	6a 00                	push   0x0
c001b216:	e8 f7 f4 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b21b:	89 c7                	mov    edi,eax
c001b21d:	89 d5                	mov    ebp,edx
c001b21f:	58                   	pop    eax
c001b220:	5a                   	pop    edx
c001b221:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b224:	ff 36                	push   DWORD PTR [esi]
c001b226:	e8 65 f2 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b22b:	90                   	nop
c001b22c:	83 c4 10             	add    esp,0x10
c001b22f:	55                   	push   ebp
c001b230:	57                   	push   edi
c001b231:	52                   	push   edx
c001b232:	50                   	push   eax
c001b233:	e8 7a f4 ff ff       	call   c001a6b2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b238:	eb 6a                	jmp    c001b2a4 <Vm::x87Handler(regs*)+0xa52>
c001b23a:	66 90                	xchg   ax,ax
c001b23c:	80 fa 06             	cmp    dl,0x6
c001b23f:	75 2f                	jne    c001b270 <Vm::x87Handler(regs*)+0xa1e>
c001b241:	51                   	push   ecx
c001b242:	51                   	push   ecx
c001b243:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b246:	ff 36                	push   DWORD PTR [esi]
c001b248:	e8 43 f2 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b24d:	8d 76 00             	lea    esi,[esi+0x0]
c001b250:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b257:	89 c6                	mov    esi,eax
c001b259:	89 d7                	mov    edi,edx
c001b25b:	e8 b2 f4 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b260:	57                   	push   edi
c001b261:	56                   	push   esi
c001b262:	52                   	push   edx
c001b263:	50                   	push   eax
c001b264:	e8 77 f4 ff ff       	call   c001a6e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b269:	e9 9e 00 00 00       	jmp    c001b30c <Vm::x87Handler(regs*)+0xaba>
c001b26e:	66 90                	xchg   ax,ax
c001b270:	31 c0                	xor    eax,eax
c001b272:	80 fa 07             	cmp    dl,0x7
c001b275:	0f 85 e9 00 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b27b:	83 ec 0c             	sub    esp,0xc
c001b27e:	6a 00                	push   0x0
c001b280:	e8 8d f4 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b285:	89 c7                	mov    edi,eax
c001b287:	89 d5                	mov    ebp,edx
c001b289:	58                   	pop    eax
c001b28a:	5a                   	pop    edx
c001b28b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b28e:	ff 36                	push   DWORD PTR [esi]
c001b290:	e8 fb f1 ff ff       	call   c001a490 <Vm::fpu64ToInternal(unsigned long long)>
c001b295:	8d 76 00             	lea    esi,[esi+0x0]
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	55                   	push   ebp
c001b29c:	57                   	push   edi
c001b29d:	52                   	push   edx
c001b29e:	50                   	push   eax
c001b29f:	e8 3c f4 ff ff       	call   c001a6e0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b2a4:	83 c4 0c             	add    esp,0xc
c001b2a7:	eb 67                	jmp    c001b310 <Vm::x87Handler(regs*)+0xabe>
c001b2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2ac:	31 c0                	xor    eax,eax
c001b2ae:	80 fa 02             	cmp    dl,0x2
c001b2b1:	0f 85 ad 00 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b2b7:	83 ec 0c             	sub    esp,0xc
c001b2ba:	6a 00                	push   0x0
c001b2bc:	e8 51 f4 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b2c1:	59                   	pop    ecx
c001b2c2:	5f                   	pop    edi
c001b2c3:	90                   	nop
c001b2c4:	52                   	push   edx
c001b2c5:	50                   	push   eax
c001b2c6:	e8 77 f1 ff ff       	call   c001a442 <Vm::fpuInternalTo64(unsigned long long)>
c001b2cb:	e9 84 00 00 00       	jmp    c001b354 <Vm::x87Handler(regs*)+0xb02>
c001b2d0:	31 c0                	xor    eax,eax
c001b2d2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b2d7:	0f 85 87 00 00 00    	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b2dd:	50                   	push   eax
c001b2de:	50                   	push   eax
c001b2df:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b2e2:	66 90                	xchg   ax,ax
c001b2e4:	31 d2                	xor    edx,edx
c001b2e6:	52                   	push   edx
c001b2e7:	50                   	push   eax
c001b2e8:	e8 47 f2 ff ff       	call   c001a534 <Vm::fpuLongToFloat(long long)>
c001b2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b2f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b2f7:	89 c6                	mov    esi,eax
c001b2f9:	89 d7                	mov    edi,edx
c001b2fb:	e8 12 f4 ff ff       	call   c001a712 <Vm::fpuGetReg(int)>
c001b300:	57                   	push   edi
c001b301:	56                   	push   esi
c001b302:	52                   	push   edx
c001b303:	50                   	push   eax
c001b304:	e8 b8 f3 ff ff       	call   c001a6c1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b309:	8d 76 00             	lea    esi,[esi+0x0]
c001b30c:	83 c4 1c             	add    esp,0x1c
c001b30f:	90                   	nop
c001b310:	52                   	push   edx
c001b311:	50                   	push   eax
c001b312:	6a 00                	push   0x0
c001b314:	e8 3c f4 ff ff       	call   c001a755 <Vm::fpuSetReg(int, unsigned long long)>
c001b319:	e9 7a f7 ff ff       	jmp    c001aa98 <Vm::x87Handler(regs*)+0x246>
c001b31e:	66 90                	xchg   ax,ax
c001b320:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b324:	80 fa 05             	cmp    dl,0x5
c001b327:	75 13                	jne    c001b33c <Vm::x87Handler(regs*)+0xaea>
c001b329:	55                   	push   ebp
c001b32a:	55                   	push   ebp
c001b32b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b32e:	ff 36                	push   DWORD PTR [esi]
c001b330:	e8 c3 f1 ff ff       	call   c001a4f8 <Vm::fpuULongToFloat(unsigned long long)>
c001b335:	e9 52 f7 ff ff       	jmp    c001aa8c <Vm::x87Handler(regs*)+0x23a>
c001b33a:	66 90                	xchg   ax,ax
c001b33c:	31 c0                	xor    eax,eax
c001b33e:	80 fa 07             	cmp    dl,0x7
c001b341:	75 21                	jne    c001b364 <Vm::x87Handler(regs*)+0xb12>
c001b343:	e8 b7 f4 ff ff       	call   c001a7ff <Vm::fpuPop()>
c001b348:	51                   	push   ecx
c001b349:	51                   	push   ecx
c001b34a:	52                   	push   edx
c001b34b:	50                   	push   eax
c001b34c:	e8 48 f1 ff ff       	call   c001a499 <Vm::fpuFloatToLong(unsigned long long)>
c001b351:	8d 76 00             	lea    esi,[esi+0x0]
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	89 06                	mov    DWORD PTR [esi],eax
c001b359:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b35c:	e9 7b f7 ff ff       	jmp    c001aadc <Vm::x87Handler(regs*)+0x28a>
c001b361:	8d 76 00             	lea    esi,[esi+0x0]
c001b364:	83 c4 1c             	add    esp,0x1c
c001b367:	5b                   	pop    ebx
c001b368:	5e                   	pop    esi
c001b369:	5f                   	pop    edi
c001b36a:	5d                   	pop    ebp
c001b36b:	c3                   	ret    

c001b36c <__static_initialization_and_destruction_0(int, int)>:
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b374:	75 1a                	jne    c001b390 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b376:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b37e:	75 10                	jne    c001b390 <__static_initialization_and_destruction_0(int, int)+0x24>
c001b380:	83 ec 0c             	sub    esp,0xc
c001b383:	68 20 a0 02 c0       	push   0xc002a020
c001b388:	e8 23 84 00 00       	call   c00237b0 <Vm::_FPUState::_FPUState()>
c001b38d:	83 c4 10             	add    esp,0x10
c001b390:	90                   	nop
c001b391:	83 c4 0c             	add    esp,0xc
c001b394:	c3                   	ret    
c001b395:	8d 76 00             	lea    esi,[esi+0x0]

c001b398 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b398:	83 ec 0c             	sub    esp,0xc
c001b39b:	83 ec 08             	sub    esp,0x8
c001b39e:	68 ff ff 00 00       	push   0xffff
c001b3a3:	6a 01                	push   0x1
c001b3a5:	e8 c2 ff ff ff       	call   c001b36c <__static_initialization_and_destruction_0(int, int)>
c001b3aa:	83 c4 10             	add    esp,0x10
c001b3ad:	83 c4 0c             	add    esp,0xc
c001b3b0:	c3                   	ret    
c001b3b1:	66 90                	xchg   ax,ax
c001b3b3:	90                   	nop

c001b3b4 <FAT::getName()>:
c001b3b4:	b8 0c 6e 02 c0       	mov    eax,0xc0026e0c
c001b3b9:	c3                   	ret    
c001b3ba:	66 90                	xchg   ax,ax

c001b3bc <FAT::tell(void*, unsigned long long*)>:
c001b3bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b3c1:	75 09                	jne    c001b3cc <FAT::tell(void*, unsigned long long*)+0x10>
c001b3c3:	b8 04 00 00 00       	mov    eax,0x4
c001b3c8:	c3                   	ret    
c001b3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b3d1:	75 09                	jne    c001b3dc <FAT::tell(void*, unsigned long long*)+0x20>
c001b3d3:	b8 04 00 00 00       	mov    eax,0x4
c001b3d8:	c3                   	ret    
c001b3d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3e0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b3e3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b3e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b3ea:	89 01                	mov    DWORD PTR [ecx],eax
c001b3ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b3ef:	b8 00 00 00 00       	mov    eax,0x0
c001b3f4:	c3                   	ret    
c001b3f5:	90                   	nop
c001b3f6:	66 90                	xchg   ax,ax

c001b3f8 <FAT::stat(void*, unsigned long long*)>:
c001b3f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b3fd:	75 09                	jne    c001b408 <FAT::stat(void*, unsigned long long*)+0x10>
c001b3ff:	b8 04 00 00 00       	mov    eax,0x4
c001b404:	c3                   	ret    
c001b405:	8d 76 00             	lea    esi,[esi+0x0]
c001b408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b40d:	75 09                	jne    c001b418 <FAT::stat(void*, unsigned long long*)+0x20>
c001b40f:	b8 04 00 00 00       	mov    eax,0x4
c001b414:	c3                   	ret    
c001b415:	8d 76 00             	lea    esi,[esi+0x0]
c001b418:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b41c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b41f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b422:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b426:	89 01                	mov    DWORD PTR [ecx],eax
c001b428:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b42b:	b8 00 00 00 00       	mov    eax,0x0
c001b430:	c3                   	ret    
c001b431:	90                   	nop
c001b432:	66 90                	xchg   ax,ax

c001b434 <FAT::~FAT()>:
c001b434:	83 ec 0c             	sub    esp,0xc
c001b437:	ba 58 6e 02 c0       	mov    edx,0xc0026e58
c001b43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b440:	89 10                	mov    DWORD PTR [eax],edx
c001b442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b446:	83 ec 0c             	sub    esp,0xc
c001b449:	50                   	push   eax
c001b44a:	e8 2b 1f ff ff       	call   c000d37a <Filesystem::~Filesystem()>
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	90                   	nop
c001b453:	83 c4 0c             	add    esp,0xc
c001b456:	c3                   	ret    
c001b457:	90                   	nop

c001b458 <FAT::~FAT()>:
c001b458:	83 ec 0c             	sub    esp,0xc
c001b45b:	83 ec 0c             	sub    esp,0xc
c001b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b462:	e8 cd ff ff ff       	call   c001b434 <FAT::~FAT()>
c001b467:	83 c4 10             	add    esp,0x10
c001b46a:	83 ec 08             	sub    esp,0x8
c001b46d:	6a 08                	push   0x8
c001b46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b473:	e8 e6 1a ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	83 c4 0c             	add    esp,0xc
c001b47e:	c3                   	ret    
c001b47f:	90                   	nop

c001b480 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b480:	83 ec 1c             	sub    esp,0x1c
c001b483:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b48a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b48f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b493:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b49a:	83 f8 ff             	cmp    eax,0xffffffff
c001b49d:	75 35                	jne    c001b4d4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b49f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4a3:	88 c2                	mov    dl,al
c001b4a5:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b4aa:	01 d0                	add    eax,edx
c001b4ac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4b0:	8b 15 80 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a080
c001b4b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4ba:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b4c1:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b4c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4ca:	89 14 85 20 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ee0],edx
c001b4d1:	eb 19                	jmp    c001b4ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b4d3:	90                   	nop
c001b4d4:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b4d8:	88 c2                	mov    dl,al
c001b4da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4de:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b4e5:	01 d0                	add    eax,edx
c001b4e7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b4eb:	90                   	nop
c001b4ec:	83 ec 04             	sub    esp,0x4
c001b4ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b4f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b4f7:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b4fb:	50                   	push   eax
c001b4fc:	e8 29 b7 fe ff       	call   c0006c2a <f_getlabel>
c001b501:	83 c4 10             	add    esp,0x10
c001b504:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b508:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b50d:	75 09                	jne    c001b518 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b50f:	b8 00 00 00 00       	mov    eax,0x0
c001b514:	eb 0a                	jmp    c001b520 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b516:	66 90                	xchg   ax,ax
c001b518:	b8 01 00 00 00       	mov    eax,0x1
c001b51d:	8d 76 00             	lea    esi,[esi+0x0]
c001b520:	83 c4 1c             	add    esp,0x1c
c001b523:	c3                   	ret    

c001b524 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b524:	57                   	push   edi
c001b525:	83 ec 58             	sub    esp,0x58
c001b528:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b530:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b534:	b9 0f 00 00 00       	mov    ecx,0xf
c001b539:	b8 00 00 00 00       	mov    eax,0x0
c001b53e:	fc                   	cld    
c001b53f:	89 d7                	mov    edi,edx
c001b541:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b543:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b547:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b54e:	83 f8 ff             	cmp    eax,0xffffffff
c001b551:	75 35                	jne    c001b588 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b553:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b557:	88 c2                	mov    dl,al
c001b559:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b55e:	01 d0                	add    eax,edx
c001b560:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b564:	8b 15 80 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a080
c001b56a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b56e:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b575:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b57a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b57e:	89 14 85 20 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ee0],edx
c001b585:	eb 19                	jmp    c001b5a0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b587:	90                   	nop
c001b588:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b58c:	88 c2                	mov    dl,al
c001b58e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b592:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b599:	01 d0                	add    eax,edx
c001b59b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b59f:	90                   	nop
c001b5a0:	83 ec 08             	sub    esp,0x8
c001b5a3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b5a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5ab:	50                   	push   eax
c001b5ac:	e8 c7 52 fe ff       	call   c0000878 <strcat>
c001b5b1:	83 c4 10             	add    esp,0x10
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5bb:	50                   	push   eax
c001b5bc:	e8 57 b8 fe ff       	call   c0006e18 <f_setlabel>
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b5c8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b5cd:	75 09                	jne    c001b5d8 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b5cf:	b8 00 00 00 00       	mov    eax,0x0
c001b5d4:	eb 0a                	jmp    c001b5e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b5d6:	66 90                	xchg   ax,ax
c001b5d8:	b8 01 00 00 00       	mov    eax,0x1
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	83 c4 58             	add    esp,0x58
c001b5e3:	5f                   	pop    edi
c001b5e4:	c3                   	ret    
c001b5e5:	90                   	nop
c001b5e6:	66 90                	xchg   ax,ax

c001b5e8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b5e8:	83 ec 2c             	sub    esp,0x2c
c001b5eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b5f3:	83 ec 08             	sub    esp,0x8
c001b5f6:	68 30 6e 02 c0       	push   0xc0026e30
c001b5fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b5ff:	e8 c0 51 fe ff       	call   c00007c4 <strcmp>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	85 c0                	test   eax,eax
c001b609:	0f 94 c0             	sete   al
c001b60c:	84 c0                	test   al,al
c001b60e:	74 10                	je     c001b620 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b610:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b618:	e9 b3 00 00 00       	jmp    c001b6d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b61d:	8d 76 00             	lea    esi,[esi+0x0]
c001b620:	83 ec 08             	sub    esp,0x8
c001b623:	68 22 6e 02 c0       	push   0xc0026e22
c001b628:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b62c:	e8 93 51 fe ff       	call   c00007c4 <strcmp>
c001b631:	83 c4 10             	add    esp,0x10
c001b634:	85 c0                	test   eax,eax
c001b636:	0f 94 c0             	sete   al
c001b639:	84 c0                	test   al,al
c001b63b:	74 0f                	je     c001b64c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b63d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b645:	e9 86 00 00 00       	jmp    c001b6d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b64a:	66 90                	xchg   ax,ax
c001b64c:	83 ec 08             	sub    esp,0x8
c001b64f:	68 28 6e 02 c0       	push   0xc0026e28
c001b654:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b658:	e8 67 51 fe ff       	call   c00007c4 <strcmp>
c001b65d:	83 c4 10             	add    esp,0x10
c001b660:	85 c0                	test   eax,eax
c001b662:	0f 94 c0             	sete   al
c001b665:	84 c0                	test   al,al
c001b667:	74 0b                	je     c001b674 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b669:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b671:	eb 5d                	jmp    c001b6d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b673:	90                   	nop
c001b674:	83 ec 08             	sub    esp,0x8
c001b677:	68 2c 3f 02 c0       	push   0xc0023f2c
c001b67c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b680:	e8 3f 51 fe ff       	call   c00007c4 <strcmp>
c001b685:	83 c4 10             	add    esp,0x10
c001b688:	85 c0                	test   eax,eax
c001b68a:	0f 94 c0             	sete   al
c001b68d:	84 c0                	test   al,al
c001b68f:	74 0b                	je     c001b69c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b691:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b699:	eb 35                	jmp    c001b6d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b69b:	90                   	nop
c001b69c:	83 ec 08             	sub    esp,0x8
c001b69f:	68 2e 6e 02 c0       	push   0xc0026e2e
c001b6a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6a8:	e8 17 51 fe ff       	call   c00007c4 <strcmp>
c001b6ad:	83 c4 10             	add    esp,0x10
c001b6b0:	85 c0                	test   eax,eax
c001b6b2:	0f 94 c0             	sete   al
c001b6b5:	84 c0                	test   al,al
c001b6b7:	74 0b                	je     c001b6c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b6b9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b6c1:	eb 0d                	jmp    c001b6d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b6c3:	90                   	nop
c001b6c4:	b8 08 00 00 00       	mov    eax,0x8
c001b6c9:	e9 ea 00 00 00       	jmp    c001b7b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b6ce:	66 90                	xchg   ax,ax
c001b6d0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b6d7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b6dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6e0:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b6e7:	83 f8 ff             	cmp    eax,0xffffffff
c001b6ea:	75 34                	jne    c001b720 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b6ec:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b6f0:	88 c2                	mov    dl,al
c001b6f2:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b6f7:	01 d0                	add    eax,edx
c001b6f9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b6fd:	8b 15 80 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a080
c001b703:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b707:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b70e:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b713:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b717:	89 14 85 20 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ee0],edx
c001b71e:	eb 18                	jmp    c001b738 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b720:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b724:	88 c2                	mov    dl,al
c001b726:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b72a:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b731:	01 d0                	add    eax,edx
c001b733:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b737:	90                   	nop
c001b738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b73c:	88 04 24             	mov    BYTE PTR [esp],al
c001b73f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b747:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b74f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b754:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b75c:	83 ec 0c             	sub    esp,0xc
c001b75f:	68 00 20 00 00       	push   0x2000
c001b764:	e8 ea e5 fe ff       	call   c0009d53 <malloc>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b770:	68 00 20 00 00       	push   0x2000
c001b775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b779:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b77d:	50                   	push   eax
c001b77e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b782:	50                   	push   eax
c001b783:	e8 11 bd fe ff       	call   c0007499 <f_mkfs>
c001b788:	83 c4 10             	add    esp,0x10
c001b78b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b78f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b794:	75 0a                	jne    c001b7a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b796:	b8 00 00 00 00       	mov    eax,0x0
c001b79b:	eb 1b                	jmp    c001b7b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b79d:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b7a5:	75 09                	jne    c001b7b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b7a7:	b8 09 00 00 00       	mov    eax,0x9
c001b7ac:	eb 0a                	jmp    c001b7b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b7ae:	66 90                	xchg   ax,ax
c001b7b0:	b8 01 00 00 00       	mov    eax,0x1
c001b7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b8:	83 c4 2c             	add    esp,0x2c
c001b7bb:	c3                   	ret    

c001b7bc <FAT::tryMount(LogicalDisk*, int)>:
c001b7bc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b7c2:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b7c7:	83 f8 14             	cmp    eax,0x14
c001b7ca:	75 18                	jne    c001b7e4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b7cc:	83 ec 0c             	sub    esp,0xc
c001b7cf:	68 34 6e 02 c0       	push   0xc0026e34
c001b7d4:	e8 1c 98 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	b0 00                	mov    al,0x0
c001b7de:	e9 e9 01 00 00       	jmp    c001b9cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b7e3:	90                   	nop
c001b7e4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b7eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b7f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7f7:	3d 00 02 00 00       	cmp    eax,0x200
c001b7fc:	74 0a                	je     c001b808 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b7fe:	b0 00                	mov    al,0x0
c001b800:	e9 c7 01 00 00       	jmp    c001b9cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b805:	8d 76 00             	lea    esi,[esi+0x0]
c001b808:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b810:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b817:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001b81e:	83 f8 ff             	cmp    eax,0xffffffff
c001b821:	74 09                	je     c001b82c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b823:	b0 01                	mov    al,0x1
c001b825:	e9 a2 01 00 00       	jmp    c001b9cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b82a:	66 90                	xchg   ax,ax
c001b82c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b836:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b83e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b845:	88 c2                	mov    dl,al
c001b847:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b84c:	01 d0                	add    eax,edx
c001b84e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b855:	8b 15 80 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a080
c001b85b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b862:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c001b869:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b86e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b875:	89 14 85 20 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ee0],edx
c001b87c:	83 ec 0c             	sub    esp,0xc
c001b87f:	68 54 02 00 00       	push   0x254
c001b884:	e8 ca e4 fe ff       	call   c0009d53 <malloc>
c001b889:	83 c4 10             	add    esp,0x10
c001b88c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b893:	83 ec 04             	sub    esp,0x4
c001b896:	6a 00                	push   0x0
c001b898:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b89f:	50                   	push   eax
c001b8a0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b8a7:	e8 75 95 fe ff       	call   c0004e21 <f_mount>
c001b8ac:	83 c4 10             	add    esp,0x10
c001b8af:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b8b6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b8be:	74 1c                	je     c001b8dc <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b8c0:	83 ec 0c             	sub    esp,0xc
c001b8c3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b8ca:	e8 a4 e4 fe ff       	call   c0009d73 <rfree>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	b0 00                	mov    al,0x0
c001b8d4:	e9 f3 00 00 00       	jmp    c001b9cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b8d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b8dc:	83 ec 04             	sub    esp,0x4
c001b8df:	68 00 01 00 00       	push   0x100
c001b8e4:	6a 00                	push   0x0
c001b8e6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b8ed:	50                   	push   eax
c001b8ee:	e8 89 4d fe ff       	call   c000067c <memset>
c001b8f3:	83 c4 10             	add    esp,0x10
c001b8f6:	83 ec 08             	sub    esp,0x8
c001b8f9:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b900:	50                   	push   eax
c001b901:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b908:	50                   	push   eax
c001b909:	e8 6a 4f fe ff       	call   c0000878 <strcat>
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	83 ec 08             	sub    esp,0x8
c001b914:	68 42 6e 02 c0       	push   0xc0026e42
c001b919:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b920:	50                   	push   eax
c001b921:	e8 52 4f fe ff       	call   c0000878 <strcat>
c001b926:	83 c4 10             	add    esp,0x10
c001b929:	83 ec 04             	sub    esp,0x4
c001b92c:	6a 01                	push   0x1
c001b92e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b935:	50                   	push   eax
c001b936:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b93a:	50                   	push   eax
c001b93b:	e8 43 95 fe ff       	call   c0004e83 <f_open>
c001b940:	83 c4 10             	add    esp,0x10
c001b943:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b94a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b951:	85 c0                	test   eax,eax
c001b953:	74 0b                	je     c001b960 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b955:	78 31                	js     c001b988 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b957:	83 e8 04             	sub    eax,0x4
c001b95a:	83 f8 01             	cmp    eax,0x1
c001b95d:	77 29                	ja     c001b988 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b95f:	90                   	nop
c001b960:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b96f:	50                   	push   eax
c001b970:	e8 60 a0 fe ff       	call   c00059d5 <f_close>
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	90                   	nop
c001b979:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b981:	74 41                	je     c001b9c4 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b983:	eb 33                	jmp    c001b9b8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b985:	8d 76 00             	lea    esi,[esi+0x0]
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b992:	e8 dc e3 fe ff       	call   c0009d73 <rfree>
c001b997:	83 c4 10             	add    esp,0x10
c001b99a:	83 ec 04             	sub    esp,0x4
c001b99d:	6a 00                	push   0x0
c001b99f:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b9a6:	50                   	push   eax
c001b9a7:	6a 00                	push   0x0
c001b9a9:	e8 73 94 fe ff       	call   c0004e21 <f_mount>
c001b9ae:	83 c4 10             	add    esp,0x10
c001b9b1:	b0 00                	mov    al,0x0
c001b9b3:	eb 17                	jmp    c001b9cc <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b8:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c001b9bd:	40                   	inc    eax
c001b9be:	a3 80 a0 02 c0       	mov    ds:0xc002a080,eax
c001b9c3:	90                   	nop
c001b9c4:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b9cb:	90                   	nop
c001b9cc:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b9d2:	c3                   	ret    
c001b9d3:	90                   	nop

c001b9d4 <FAT::allocateSwapfile(char const*, int)>:
c001b9d4:	55                   	push   ebp
c001b9d5:	57                   	push   edi
c001b9d6:	56                   	push   esi
c001b9d7:	53                   	push   ebx
c001b9d8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b9de:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b9e9:	83 ec 0c             	sub    esp,0xc
c001b9ec:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b9f3:	e8 5b e3 fe ff       	call   c0009d53 <malloc>
c001b9f8:	83 c4 10             	add    esp,0x10
c001b9fb:	89 c7                	mov    edi,eax
c001b9fd:	a1 b0 9f 02 c0       	mov    eax,ds:0xc0029fb0
c001ba02:	83 ec 04             	sub    esp,0x4
c001ba05:	50                   	push   eax
c001ba06:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ba0d:	57                   	push   edi
c001ba0e:	e8 97 1b ff ff       	call   c000d5aa <File::File(char const*, Process*)>
c001ba13:	83 c4 10             	add    esp,0x10
c001ba16:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ba1d:	83 ec 04             	sub    esp,0x4
c001ba20:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ba24:	50                   	push   eax
c001ba25:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba29:	50                   	push   eax
c001ba2a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba31:	e8 fa 1e ff ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c001ba36:	83 c4 10             	add    esp,0x10
c001ba39:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ba40:	c1 e0 14             	shl    eax,0x14
c001ba43:	89 c7                	mov    edi,eax
c001ba45:	89 c5                	mov    ebp,eax
c001ba47:	c1 fd 1f             	sar    ebp,0x1f
c001ba4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba52:	89 f9                	mov    ecx,edi
c001ba54:	31 c1                	xor    ecx,eax
c001ba56:	89 cb                	mov    ebx,ecx
c001ba58:	89 e9                	mov    ecx,ebp
c001ba5a:	31 d1                	xor    ecx,edx
c001ba5c:	89 ce                	mov    esi,ecx
c001ba5e:	89 f0                	mov    eax,esi
c001ba60:	09 d8                	or     eax,ebx
c001ba62:	0f 84 98 00 00 00    	je     c001bb00 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba72:	e8 85 1d ff ff       	call   c000d7fc <File::unlink()>
c001ba77:	83 c4 10             	add    esp,0x10
c001ba7a:	83 ec 08             	sub    esp,0x8
c001ba7d:	6a 12                	push   0x12
c001ba7f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba86:	e8 f9 1b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c001ba8b:	83 c4 10             	add    esp,0x10
c001ba8e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ba95:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ba9b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001baa2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001baa9:	c1 e0 14             	shl    eax,0x14
c001baac:	99                   	cdq    
c001baad:	6a 01                	push   0x1
c001baaf:	52                   	push   edx
c001bab0:	50                   	push   eax
c001bab1:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bab8:	e8 c8 b5 fe ff       	call   c0007085 <f_expand>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bac7:	8b 00                	mov    eax,DWORD PTR [eax]
c001bac9:	83 c0 10             	add    eax,0x10
c001bacc:	8b 00                	mov    eax,DWORD PTR [eax]
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bad5:	52                   	push   edx
c001bad6:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bada:	52                   	push   edx
c001badb:	6a 00                	push   0x0
c001badd:	68 00 04 00 00       	push   0x400
c001bae2:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bae9:	ff d0                	call   eax
c001baeb:	83 c4 20             	add    esp,0x20
c001baee:	83 ec 0c             	sub    esp,0xc
c001baf1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001baf8:	e8 e5 1b ff ff       	call   c000d6e2 <File::close()>
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	83 ec 08             	sub    esp,0x8
c001bb03:	6a 01                	push   0x1
c001bb05:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb0c:	e8 73 1b ff ff       	call   c000d684 <File::open(FileOpenMode)>
c001bb11:	83 c4 10             	add    esp,0x10
c001bb14:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb1d:	83 c0 0c             	add    eax,0xc
c001bb20:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb22:	83 ec 0c             	sub    esp,0xc
c001bb25:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bb29:	52                   	push   edx
c001bb2a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bb2e:	52                   	push   edx
c001bb2f:	6a 00                	push   0x0
c001bb31:	6a 04                	push   0x4
c001bb33:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bb3a:	ff d0                	call   eax
c001bb3c:	83 c4 20             	add    esp,0x20
c001bb3f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bb46:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bb4c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bb53:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bb5a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bb5d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bb60:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bb67:	83 ec 0c             	sub    esp,0xc
c001bb6a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bb71:	e8 6c 1b ff ff       	call   c000d6e2 <File::close()>
c001bb76:	83 c4 10             	add    esp,0x10
c001bb79:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bb80:	ba 00 00 00 00       	mov    edx,0x0
c001bb85:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bb8b:	5b                   	pop    ebx
c001bb8c:	5e                   	pop    esi
c001bb8d:	5f                   	pop    edi
c001bb8e:	5d                   	pop    ebp
c001bb8f:	c3                   	ret    

c001bb90 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bb90:	57                   	push   edi
c001bb91:	56                   	push   esi
c001bb92:	53                   	push   ebx
c001bb93:	81 ec 50 02 00 00    	sub    esp,0x250
c001bb99:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bba1:	74 0d                	je     c001bbb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bba3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bbab:	75 0f                	jne    c001bbbc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001bbad:	8d 76 00             	lea    esi,[esi+0x0]
c001bbb0:	b8 04 00 00 00       	mov    eax,0x4
c001bbb5:	e9 36 01 00 00       	jmp    c001bcf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bbba:	66 90                	xchg   ax,ax
c001bbbc:	83 ec 08             	sub    esp,0x8
c001bbbf:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bbc6:	50                   	push   eax
c001bbc7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001bbce:	e8 0c a4 fe ff       	call   c0005fdf <f_readdir>
c001bbd3:	83 c4 10             	add    esp,0x10
c001bbd6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bbdd:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001bbe4:	83 ec 0c             	sub    esp,0xc
c001bbe7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bbee:	83 c0 1a             	add    eax,0x1a
c001bbf1:	50                   	push   eax
c001bbf2:	e8 a1 4a fe ff       	call   c0000698 <strlen>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	ba 00 00 00 00       	mov    edx,0x0
c001bbff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bc03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bc07:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bc0e:	0f b6 c0             	movzx  eax,al
c001bc11:	83 e0 10             	and    eax,0x10
c001bc14:	74 0a                	je     c001bc20 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bc16:	b8 02 00 00 00       	mov    eax,0x2
c001bc1b:	eb 0b                	jmp    c001bc28 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bc1d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc20:	b8 01 00 00 00       	mov    eax,0x1
c001bc25:	8d 76 00             	lea    esi,[esi+0x0]
c001bc28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc2c:	83 ec 08             	sub    esp,0x8
c001bc2f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001bc36:	83 c0 1a             	add    eax,0x1a
c001bc39:	50                   	push   eax
c001bc3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc3e:	83 c0 10             	add    eax,0x10
c001bc41:	50                   	push   eax
c001bc42:	e8 f1 4a fe ff       	call   c0000738 <strcpy>
c001bc47:	83 c4 10             	add    esp,0x10
c001bc4a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bc51:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bc58:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bc5c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bc63:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bc6a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bc71:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bc78:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bc7f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bc86:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bc8d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bc94:	89 c6                	mov    esi,eax
c001bc96:	89 d7                	mov    edi,edx
c001bc98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc9a:	89 c8                	mov    eax,ecx
c001bc9c:	89 fa                	mov    edx,edi
c001bc9e:	89 f3                	mov    ebx,esi
c001bca0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bca7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bcae:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bcb5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bcbc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bcc2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bcc9:	84 c0                	test   al,al
c001bccb:	75 07                	jne    c001bcd4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bccd:	b8 07 00 00 00       	mov    eax,0x7
c001bcd2:	eb 1c                	jmp    c001bcf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bcd4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bcdb:	85 c0                	test   eax,eax
c001bcdd:	75 09                	jne    c001bce8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bcdf:	b8 00 00 00 00       	mov    eax,0x0
c001bce4:	eb 0a                	jmp    c001bcf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bce6:	66 90                	xchg   ax,ax
c001bce8:	b8 01 00 00 00       	mov    eax,0x1
c001bced:	8d 76 00             	lea    esi,[esi+0x0]
c001bcf0:	81 c4 50 02 00 00    	add    esp,0x250
c001bcf6:	5b                   	pop    ebx
c001bcf7:	5e                   	pop    esi
c001bcf8:	5f                   	pop    edi
c001bcf9:	c3                   	ret    
c001bcfa:	66 90                	xchg   ax,ax

c001bcfc <FAT::read(void*, unsigned long, void*, int*)>:
c001bcfc:	83 ec 1c             	sub    esp,0x1c
c001bcff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd04:	74 0a                	je     c001bd10 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bd06:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bd0b:	75 0b                	jne    c001bd18 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bd0d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd10:	b8 04 00 00 00       	mov    eax,0x4
c001bd15:	eb 41                	jmp    c001bd58 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bd17:	90                   	nop
c001bd18:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd1c:	50                   	push   eax
c001bd1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd29:	e8 91 95 fe ff       	call   c00052bf <f_read>
c001bd2e:	83 c4 10             	add    esp,0x10
c001bd31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd39:	89 c2                	mov    edx,eax
c001bd3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd3f:	89 10                	mov    DWORD PTR [eax],edx
c001bd41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd45:	85 c0                	test   eax,eax
c001bd47:	75 07                	jne    c001bd50 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bd49:	b8 00 00 00 00       	mov    eax,0x0
c001bd4e:	eb 08                	jmp    c001bd58 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bd50:	b8 01 00 00 00       	mov    eax,0x1
c001bd55:	8d 76 00             	lea    esi,[esi+0x0]
c001bd58:	83 c4 1c             	add    esp,0x1c
c001bd5b:	c3                   	ret    

c001bd5c <FAT::write(void*, unsigned long, void*, int*)>:
c001bd5c:	83 ec 1c             	sub    esp,0x1c
c001bd5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd64:	74 0a                	je     c001bd70 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bd66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bd6b:	75 0b                	jne    c001bd78 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bd6d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd70:	b8 04 00 00 00       	mov    eax,0x4
c001bd75:	eb 41                	jmp    c001bdb8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bd77:	90                   	nop
c001bd78:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd7c:	50                   	push   eax
c001bd7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bd85:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd89:	e8 b1 97 fe ff       	call   c000553f <f_write>
c001bd8e:	83 c4 10             	add    esp,0x10
c001bd91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd99:	89 c2                	mov    edx,eax
c001bd9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd9f:	89 10                	mov    DWORD PTR [eax],edx
c001bda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bda5:	85 c0                	test   eax,eax
c001bda7:	75 07                	jne    c001bdb0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bda9:	b8 00 00 00 00       	mov    eax,0x0
c001bdae:	eb 08                	jmp    c001bdb8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bdb0:	b8 01 00 00 00       	mov    eax,0x1
c001bdb5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb8:	83 c4 1c             	add    esp,0x1c
c001bdbb:	c3                   	ret    

c001bdbc <FAT::close(void*)>:
c001bdbc:	83 ec 1c             	sub    esp,0x1c
c001bdbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bdc4:	75 0a                	jne    c001bdd0 <FAT::close(void*)+0x14>
c001bdc6:	b8 04 00 00 00       	mov    eax,0x4
c001bdcb:	eb 3f                	jmp    c001be0c <FAT::close(void*)+0x50>
c001bdcd:	8d 76 00             	lea    esi,[esi+0x0]
c001bdd0:	83 ec 0c             	sub    esp,0xc
c001bdd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdd7:	e8 f9 9b fe ff       	call   c00059d5 <f_close>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bde3:	83 ec 0c             	sub    esp,0xc
c001bde6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bdea:	e8 74 df fe ff       	call   c0009d63 <free>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdf6:	85 c0                	test   eax,eax
c001bdf8:	75 0a                	jne    c001be04 <FAT::close(void*)+0x48>
c001bdfa:	b8 00 00 00 00       	mov    eax,0x0
c001bdff:	eb 0b                	jmp    c001be0c <FAT::close(void*)+0x50>
c001be01:	8d 76 00             	lea    esi,[esi+0x0]
c001be04:	b8 01 00 00 00       	mov    eax,0x1
c001be09:	8d 76 00             	lea    esi,[esi+0x0]
c001be0c:	83 c4 1c             	add    esp,0x1c
c001be0f:	c3                   	ret    

c001be10 <FAT::closeDir(void*)>:
c001be10:	83 ec 1c             	sub    esp,0x1c
c001be13:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001be18:	75 0a                	jne    c001be24 <FAT::closeDir(void*)+0x14>
c001be1a:	b8 04 00 00 00       	mov    eax,0x4
c001be1f:	eb 3f                	jmp    c001be60 <FAT::closeDir(void*)+0x50>
c001be21:	8d 76 00             	lea    esi,[esi+0x0]
c001be24:	83 ec 0c             	sub    esp,0xc
c001be27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be2b:	e8 8d a1 fe ff       	call   c0005fbd <f_closedir>
c001be30:	83 c4 10             	add    esp,0x10
c001be33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be37:	83 ec 0c             	sub    esp,0xc
c001be3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be3e:	e8 20 df fe ff       	call   c0009d63 <free>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be4a:	85 c0                	test   eax,eax
c001be4c:	75 0a                	jne    c001be58 <FAT::closeDir(void*)+0x48>
c001be4e:	b8 00 00 00 00       	mov    eax,0x0
c001be53:	eb 0b                	jmp    c001be60 <FAT::closeDir(void*)+0x50>
c001be55:	8d 76 00             	lea    esi,[esi+0x0]
c001be58:	b8 01 00 00 00       	mov    eax,0x1
c001be5d:	8d 76 00             	lea    esi,[esi+0x0]
c001be60:	83 c4 1c             	add    esp,0x1c
c001be63:	c3                   	ret    

c001be64 <FAT::seek(void*, unsigned long long)>:
c001be64:	83 ec 2c             	sub    esp,0x2c
c001be67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be77:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001be7c:	75 0a                	jne    c001be88 <FAT::seek(void*, unsigned long long)+0x24>
c001be7e:	b8 04 00 00 00       	mov    eax,0x4
c001be83:	eb 37                	jmp    c001bebc <FAT::seek(void*, unsigned long long)+0x58>
c001be85:	8d 76 00             	lea    esi,[esi+0x0]
c001be88:	83 ec 04             	sub    esp,0x4
c001be8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be93:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001be97:	e8 68 9b fe ff       	call   c0005a04 <f_lseek>
c001be9c:	83 c4 10             	add    esp,0x10
c001be9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bea7:	85 c0                	test   eax,eax
c001bea9:	75 09                	jne    c001beb4 <FAT::seek(void*, unsigned long long)+0x50>
c001beab:	b8 00 00 00 00       	mov    eax,0x0
c001beb0:	eb 0a                	jmp    c001bebc <FAT::seek(void*, unsigned long long)+0x58>
c001beb2:	66 90                	xchg   ax,ax
c001beb4:	b8 01 00 00 00       	mov    eax,0x1
c001beb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bebc:	83 c4 2c             	add    esp,0x2c
c001bebf:	c3                   	ret    

c001bec0 <fatWrapperReadDisk>:
c001bec0:	83 ec 1c             	sub    esp,0x1c
c001bec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bec7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001becb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001becf:	89 04 24             	mov    DWORD PTR [esp],eax
c001bed2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bedf:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c001bee6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001beea:	83 ec 0c             	sub    esp,0xc
c001beed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bef1:	52                   	push   edx
c001bef2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bef6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001befa:	50                   	push   eax
c001befb:	e8 98 49 ff ff       	call   c0010898 <LogicalDisk::read(unsigned long long, int, void*)>
c001bf00:	83 c4 20             	add    esp,0x20
c001bf03:	83 c4 1c             	add    esp,0x1c
c001bf06:	c3                   	ret    
c001bf07:	90                   	nop

c001bf08 <fatWrapperWriteDisk>:
c001bf08:	83 ec 1c             	sub    esp,0x1c
c001bf0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bf17:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf27:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c001bf2e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bf39:	52                   	push   edx
c001bf3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf42:	50                   	push   eax
c001bf43:	e8 bc 49 ff ff       	call   c0010904 <LogicalDisk::write(unsigned long long, int, void*)>
c001bf48:	83 c4 20             	add    esp,0x20
c001bf4b:	83 c4 1c             	add    esp,0x1c
c001bf4e:	c3                   	ret    
c001bf4f:	90                   	nop

c001bf50 <fatWrapperIoctl>:
c001bf50:	53                   	push   ebx
c001bf51:	83 ec 28             	sub    esp,0x28
c001bf54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bf58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bf5c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bf60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf64:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001bf69:	75 31                	jne    c001bf9c <fatWrapperIoctl+0x4c>
c001bf6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf78:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c001bf7f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bf85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf8f:	66 89 02             	mov    WORD PTR [edx],ax
c001bf92:	b8 00 00 00 00       	mov    eax,0x0
c001bf97:	e9 bc 00 00 00       	jmp    c001c058 <fatWrapperIoctl+0x108>
c001bf9c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001bfa1:	75 6d                	jne    c001c010 <fatWrapperIoctl+0xc0>
c001bfa3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bfb0:	8b 04 85 20 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6fe0]
c001bfb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bfbd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bfc3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bfc9:	89 c8                	mov    eax,ecx
c001bfcb:	89 da                	mov    edx,ebx
c001bfcd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bfd1:	c1 e0 0a             	shl    eax,0xa
c001bfd4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bfd9:	8b 0c 8d 20 90 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6fe0]
c001bfe0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bfe6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bfec:	89 cb                	mov    ebx,ecx
c001bfee:	c1 fb 1f             	sar    ebx,0x1f
c001bff1:	53                   	push   ebx
c001bff2:	51                   	push   ecx
c001bff3:	52                   	push   edx
c001bff4:	50                   	push   eax
c001bff5:	e8 12 6e 00 00       	call   c0022e0c <__udivdi3>
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c001:	89 01                	mov    DWORD PTR [ecx],eax
c001c003:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c006:	b8 00 00 00 00       	mov    eax,0x0
c001c00b:	eb 4b                	jmp    c001c058 <fatWrapperIoctl+0x108>
c001c00d:	8d 76 00             	lea    esi,[esi+0x0]
c001c010:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c015:	75 09                	jne    c001c020 <fatWrapperIoctl+0xd0>
c001c017:	b8 00 00 00 00       	mov    eax,0x0
c001c01c:	eb 3a                	jmp    c001c058 <fatWrapperIoctl+0x108>
c001c01e:	66 90                	xchg   ax,ax
c001c020:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c025:	75 19                	jne    c001c040 <fatWrapperIoctl+0xf0>
c001c027:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c02b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c02f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c033:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c039:	b8 00 00 00 00       	mov    eax,0x0
c001c03e:	eb 18                	jmp    c001c058 <fatWrapperIoctl+0x108>
c001c040:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c045:	75 09                	jne    c001c050 <fatWrapperIoctl+0x100>
c001c047:	b8 00 00 00 00       	mov    eax,0x0
c001c04c:	eb 0a                	jmp    c001c058 <fatWrapperIoctl+0x108>
c001c04e:	66 90                	xchg   ax,ax
c001c050:	b8 04 00 00 00       	mov    eax,0x4
c001c055:	8d 76 00             	lea    esi,[esi+0x0]
c001c058:	83 c4 28             	add    esp,0x28
c001c05b:	5b                   	pop    ebx
c001c05c:	c3                   	ret    
c001c05d:	90                   	nop
c001c05e:	66 90                	xchg   ax,ax

c001c060 <FAT::FAT()>:
c001c060:	83 ec 1c             	sub    esp,0x1c
c001c063:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c067:	83 ec 0c             	sub    esp,0xc
c001c06a:	50                   	push   eax
c001c06b:	e8 e6 12 ff ff       	call   c000d356 <Filesystem::Filesystem()>
c001c070:	83 c4 10             	add    esp,0x10
c001c073:	ba 58 6e 02 c0       	mov    edx,0xc0026e58
c001c078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c07c:	89 10                	mov    DWORD PTR [eax],edx
c001c07e:	c7 05 80 a0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a080,0x0
c001c088:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c090:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c095:	7f 15                	jg     c001c0ac <FAT::FAT()+0x4c>
c001c097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c09b:	c7 04 85 a0 a0 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5f60],0xffffffff
c001c0a6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c0aa:	eb e4                	jmp    c001c090 <FAT::FAT()+0x30>
c001c0ac:	90                   	nop
c001c0ad:	83 c4 1c             	add    esp,0x1c
c001c0b0:	c3                   	ret    
c001c0b1:	90                   	nop
c001c0b2:	66 90                	xchg   ax,ax

c001c0b4 <FAT::fixFilepath(char*)>:
c001c0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0b8:	8a 00                	mov    al,BYTE PTR [eax]
c001c0ba:	3c 40                	cmp    al,0x40
c001c0bc:	7e 2e                	jle    c001c0ec <FAT::fixFilepath(char*)+0x38>
c001c0be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0c2:	8a 00                	mov    al,BYTE PTR [eax]
c001c0c4:	83 e8 41             	sub    eax,0x41
c001c0c7:	88 c2                	mov    dl,al
c001c0c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0cd:	88 10                	mov    BYTE PTR [eax],dl
c001c0cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0d3:	8a 00                	mov    al,BYTE PTR [eax]
c001c0d5:	0f be c0             	movsx  eax,al
c001c0d8:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c001c0df:	83 c0 30             	add    eax,0x30
c001c0e2:	88 c2                	mov    dl,al
c001c0e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0e8:	88 10                	mov    BYTE PTR [eax],dl
c001c0ea:	66 90                	xchg   ax,ax
c001c0ec:	90                   	nop
c001c0ed:	c3                   	ret    
c001c0ee:	66 90                	xchg   ax,ax

c001c0f0 <FAT::open(char const*, void**, FileOpenMode)>:
c001c0f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c0f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c0fe:	74 0c                	je     c001c10c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c100:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c108:	75 0e                	jne    c001c118 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c10a:	66 90                	xchg   ax,ax
c001c10c:	b8 04 00 00 00       	mov    eax,0x4
c001c111:	e9 06 01 00 00       	jmp    c001c21c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c116:	66 90                	xchg   ax,ax
c001c118:	83 ec 08             	sub    esp,0x8
c001c11b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c122:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c126:	50                   	push   eax
c001c127:	e8 0c 46 fe ff       	call   c0000738 <strcpy>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	83 ec 08             	sub    esp,0x8
c001c132:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c136:	50                   	push   eax
c001c137:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c13e:	e8 71 ff ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c14e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c155:	83 e0 01             	and    eax,0x1
c001c158:	74 0a                	je     c001c164 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c15a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c162:	66 90                	xchg   ax,ax
c001c164:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c16b:	83 e0 04             	and    eax,0x4
c001c16e:	74 10                	je     c001c180 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c170:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c178:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c180:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c187:	83 e0 02             	and    eax,0x2
c001c18a:	74 08                	je     c001c194 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c18c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c194:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c19b:	83 e0 08             	and    eax,0x8
c001c19e:	74 08                	je     c001c1a8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c1a0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c1a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c1af:	83 e0 10             	and    eax,0x10
c001c1b2:	74 08                	je     c001c1bc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c1b4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c1bc:	83 ec 0c             	sub    esp,0xc
c001c1bf:	68 50 02 00 00       	push   0x250
c001c1c4:	e8 8a db fe ff       	call   c0009d53 <malloc>
c001c1c9:	83 c4 10             	add    esp,0x10
c001c1cc:	89 c2                	mov    edx,eax
c001c1ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1d5:	89 10                	mov    DWORD PTR [eax],edx
c001c1d7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c1df:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c1e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1e8:	83 ec 04             	sub    esp,0x4
c001c1eb:	52                   	push   edx
c001c1ec:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c1f0:	52                   	push   edx
c001c1f1:	50                   	push   eax
c001c1f2:	e8 8c 8c fe ff       	call   c0004e83 <f_open>
c001c1f7:	83 c4 10             	add    esp,0x10
c001c1fa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c201:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c209:	74 09                	je     c001c214 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c20b:	b8 01 00 00 00       	mov    eax,0x1
c001c210:	eb 0a                	jmp    c001c21c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c212:	66 90                	xchg   ax,ax
c001c214:	b8 00 00 00 00       	mov    eax,0x0
c001c219:	8d 76 00             	lea    esi,[esi+0x0]
c001c21c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c222:	c3                   	ret    
c001c223:	90                   	nop

c001c224 <FAT::openDir(char const*, void**)>:
c001c224:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c22a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c232:	74 0c                	je     c001c240 <FAT::openDir(char const*, void**)+0x1c>
c001c234:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c23c:	75 0e                	jne    c001c24c <FAT::openDir(char const*, void**)+0x28>
c001c23e:	66 90                	xchg   ax,ax
c001c240:	b8 04 00 00 00       	mov    eax,0x4
c001c245:	e9 82 00 00 00       	jmp    c001c2cc <FAT::openDir(char const*, void**)+0xa8>
c001c24a:	66 90                	xchg   ax,ax
c001c24c:	83 ec 08             	sub    esp,0x8
c001c24f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c256:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c25a:	50                   	push   eax
c001c25b:	e8 d8 44 fe ff       	call   c0000738 <strcpy>
c001c260:	83 c4 10             	add    esp,0x10
c001c263:	83 ec 08             	sub    esp,0x8
c001c266:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c26a:	50                   	push   eax
c001c26b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c272:	e8 3d fe ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c277:	83 c4 10             	add    esp,0x10
c001c27a:	83 ec 0c             	sub    esp,0xc
c001c27d:	6a 4c                	push   0x4c
c001c27f:	e8 cf da fe ff       	call   c0009d53 <malloc>
c001c284:	83 c4 10             	add    esp,0x10
c001c287:	89 c2                	mov    edx,eax
c001c289:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c290:	89 10                	mov    DWORD PTR [eax],edx
c001c292:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c299:	8b 00                	mov    eax,DWORD PTR [eax]
c001c29b:	83 ec 08             	sub    esp,0x8
c001c29e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c2a2:	52                   	push   edx
c001c2a3:	50                   	push   eax
c001c2a4:	e8 12 9c fe ff       	call   c0005ebb <f_opendir>
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c2b3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c2bb:	74 07                	je     c001c2c4 <FAT::openDir(char const*, void**)+0xa0>
c001c2bd:	b8 01 00 00 00       	mov    eax,0x1
c001c2c2:	eb 08                	jmp    c001c2cc <FAT::openDir(char const*, void**)+0xa8>
c001c2c4:	b8 00 00 00 00       	mov    eax,0x0
c001c2c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c2cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c2d2:	c3                   	ret    
c001c2d3:	90                   	nop

c001c2d4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c2d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c2da:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c2e2:	75 0c                	jne    c001c2f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c2e4:	b8 04 00 00 00       	mov    eax,0x4
c001c2e9:	e9 d2 00 00 00       	jmp    c001c3c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c2ee:	66 90                	xchg   ax,ax
c001c2f0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c2f8:	75 0a                	jne    c001c304 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c2fa:	b8 04 00 00 00       	mov    eax,0x4
c001c2ff:	e9 bc 00 00 00       	jmp    c001c3c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c304:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c30c:	75 0a                	jne    c001c318 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c30e:	b8 04 00 00 00       	mov    eax,0x4
c001c313:	e9 a8 00 00 00       	jmp    c001c3c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c318:	83 ec 08             	sub    esp,0x8
c001c31b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c322:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c329:	50                   	push   eax
c001c32a:	e8 09 44 fe ff       	call   c0000738 <strcpy>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	83 ec 08             	sub    esp,0x8
c001c335:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c33c:	50                   	push   eax
c001c33d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c344:	e8 6b fd ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c349:	83 c4 10             	add    esp,0x10
c001c34c:	83 ec 08             	sub    esp,0x8
c001c34f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c353:	50                   	push   eax
c001c354:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c35b:	50                   	push   eax
c001c35c:	e8 19 9d fe ff       	call   c000607a <f_stat>
c001c361:	83 c4 10             	add    esp,0x10
c001c364:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c36b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c372:	85 c0                	test   eax,eax
c001c374:	74 0a                	je     c001c380 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c376:	83 f8 04             	cmp    eax,0x4
c001c379:	74 35                	je     c001c3b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c37b:	eb 3b                	jmp    c001c3b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c37d:	8d 76 00             	lea    esi,[esi+0x0]
c001c380:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c384:	0f b6 c0             	movzx  eax,al
c001c387:	83 e0 10             	and    eax,0x10
c001c38a:	0f 95 c2             	setne  dl
c001c38d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c394:	88 10                	mov    BYTE PTR [eax],dl
c001c396:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c399:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c39d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c3a4:	89 01                	mov    DWORD PTR [ecx],eax
c001c3a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c3a9:	b8 00 00 00 00       	mov    eax,0x0
c001c3ae:	eb 10                	jmp    c001c3c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c3b0:	b8 02 00 00 00       	mov    eax,0x2
c001c3b5:	eb 09                	jmp    c001c3c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c3b7:	90                   	nop
c001c3b8:	b8 01 00 00 00       	mov    eax,0x1
c001c3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c3c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c3c6:	c3                   	ret    
c001c3c7:	90                   	nop

c001c3c8 <FAT::unlink(char const*)>:
c001c3c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c3ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c3d6:	75 08                	jne    c001c3e0 <FAT::unlink(char const*)+0x18>
c001c3d8:	b8 04 00 00 00       	mov    eax,0x4
c001c3dd:	eb 61                	jmp    c001c440 <FAT::unlink(char const*)+0x78>
c001c3df:	90                   	nop
c001c3e0:	83 ec 08             	sub    esp,0x8
c001c3e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c3ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3ee:	50                   	push   eax
c001c3ef:	e8 44 43 fe ff       	call   c0000738 <strcpy>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	83 ec 08             	sub    esp,0x8
c001c3fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3fe:	50                   	push   eax
c001c3ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c406:	e8 a9 fc ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	83 ec 0c             	sub    esp,0xc
c001c411:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c415:	50                   	push   eax
c001c416:	e8 b1 9f fe ff       	call   c00063cc <f_unlink>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c425:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c42c:	85 c0                	test   eax,eax
c001c42e:	75 08                	jne    c001c438 <FAT::unlink(char const*)+0x70>
c001c430:	b8 00 00 00 00       	mov    eax,0x0
c001c435:	eb 09                	jmp    c001c440 <FAT::unlink(char const*)+0x78>
c001c437:	90                   	nop
c001c438:	b8 01 00 00 00       	mov    eax,0x1
c001c43d:	8d 76 00             	lea    esi,[esi+0x0]
c001c440:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c446:	c3                   	ret    
c001c447:	90                   	nop

c001c448 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c448:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c44e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c455:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c45c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c460:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c464:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c46c:	75 0a                	jne    c001c478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c46e:	b8 04 00 00 00       	mov    eax,0x4
c001c473:	e9 30 01 00 00       	jmp    c001c5a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c478:	83 ec 08             	sub    esp,0x8
c001c47b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c482:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c486:	50                   	push   eax
c001c487:	e8 ac 42 fe ff       	call   c0000738 <strcpy>
c001c48c:	83 c4 10             	add    esp,0x10
c001c48f:	83 ec 08             	sub    esp,0x8
c001c492:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c496:	50                   	push   eax
c001c497:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c49e:	e8 11 fc ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c4a3:	83 c4 10             	add    esp,0x10
c001c4a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c4ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c4b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4bb:	83 e0 01             	and    eax,0x1
c001c4be:	74 08                	je     c001c4c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c4c0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c4c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4cd:	83 e0 02             	and    eax,0x2
c001c4d0:	74 0a                	je     c001c4dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c4d2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c4da:	66 90                	xchg   ax,ax
c001c4dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4e1:	83 e0 04             	and    eax,0x4
c001c4e4:	74 0a                	je     c001c4f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c4e6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c4ee:	66 90                	xchg   ax,ax
c001c4f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4f5:	83 e0 08             	and    eax,0x8
c001c4f8:	74 0a                	je     c001c504 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c4fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c502:	66 90                	xchg   ax,ax
c001c504:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c509:	83 e0 01             	and    eax,0x1
c001c50c:	74 0a                	je     c001c518 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c50e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c516:	66 90                	xchg   ax,ax
c001c518:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c51d:	83 e0 02             	and    eax,0x2
c001c520:	74 0a                	je     c001c52c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c522:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c52a:	66 90                	xchg   ax,ax
c001c52c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c531:	83 e0 04             	and    eax,0x4
c001c534:	74 0a                	je     c001c540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c536:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c53e:	66 90                	xchg   ax,ax
c001c540:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c545:	83 e0 08             	and    eax,0x8
c001c548:	74 0a                	je     c001c554 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c54a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c552:	66 90                	xchg   ax,ax
c001c554:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c55b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c562:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c56a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c572:	83 ec 04             	sub    esp,0x4
c001c575:	52                   	push   edx
c001c576:	50                   	push   eax
c001c577:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c57b:	50                   	push   eax
c001c57c:	e8 ed a4 fe ff       	call   c0006a6e <f_chmod>
c001c581:	83 c4 10             	add    esp,0x10
c001c584:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c58b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c592:	85 c0                	test   eax,eax
c001c594:	75 0a                	jne    c001c5a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c596:	b8 00 00 00 00       	mov    eax,0x0
c001c59b:	eb 0b                	jmp    c001c5a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c59d:	8d 76 00             	lea    esi,[esi+0x0]
c001c5a0:	b8 01 00 00 00       	mov    eax,0x1
c001c5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5a8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c5ae:	c3                   	ret    
c001c5af:	90                   	nop

c001c5b0 <FAT::rename(char const*, char const*)>:
c001c5b0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5b6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c5be:	74 0c                	je     c001c5cc <FAT::rename(char const*, char const*)+0x1c>
c001c5c0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c5c8:	75 0e                	jne    c001c5d8 <FAT::rename(char const*, char const*)+0x28>
c001c5ca:	66 90                	xchg   ax,ax
c001c5cc:	b8 04 00 00 00       	mov    eax,0x4
c001c5d1:	e9 9e 00 00 00       	jmp    c001c674 <FAT::rename(char const*, char const*)+0xc4>
c001c5d6:	66 90                	xchg   ax,ax
c001c5d8:	83 ec 08             	sub    esp,0x8
c001c5db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5e2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c5e9:	50                   	push   eax
c001c5ea:	e8 49 41 fe ff       	call   c0000738 <strcpy>
c001c5ef:	83 c4 10             	add    esp,0x10
c001c5f2:	83 ec 08             	sub    esp,0x8
c001c5f5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c5fc:	50                   	push   eax
c001c5fd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c604:	e8 ab fa ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	83 ec 08             	sub    esp,0x8
c001c60f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c616:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c61a:	50                   	push   eax
c001c61b:	e8 18 41 fe ff       	call   c0000738 <strcpy>
c001c620:	83 c4 10             	add    esp,0x10
c001c623:	83 ec 08             	sub    esp,0x8
c001c626:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c62a:	50                   	push   eax
c001c62b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c632:	e8 7d fa ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	83 ec 08             	sub    esp,0x8
c001c63d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c641:	50                   	push   eax
c001c642:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c649:	50                   	push   eax
c001c64a:	e8 2c a1 fe ff       	call   c000677b <f_rename>
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c659:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c660:	85 c0                	test   eax,eax
c001c662:	75 08                	jne    c001c66c <FAT::rename(char const*, char const*)+0xbc>
c001c664:	b8 00 00 00 00       	mov    eax,0x0
c001c669:	eb 09                	jmp    c001c674 <FAT::rename(char const*, char const*)+0xc4>
c001c66b:	90                   	nop
c001c66c:	b8 01 00 00 00       	mov    eax,0x1
c001c671:	8d 76 00             	lea    esi,[esi+0x0]
c001c674:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c67a:	c3                   	ret    
c001c67b:	90                   	nop

c001c67c <FAT::mkdir(char const*)>:
c001c67c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c682:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c68a:	75 08                	jne    c001c694 <FAT::mkdir(char const*)+0x18>
c001c68c:	b8 04 00 00 00       	mov    eax,0x4
c001c691:	eb 61                	jmp    c001c6f4 <FAT::mkdir(char const*)+0x78>
c001c693:	90                   	nop
c001c694:	83 ec 08             	sub    esp,0x8
c001c697:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c69e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6a2:	50                   	push   eax
c001c6a3:	e8 90 40 fe ff       	call   c0000738 <strcpy>
c001c6a8:	83 c4 10             	add    esp,0x10
c001c6ab:	83 ec 08             	sub    esp,0x8
c001c6ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c6b2:	50                   	push   eax
c001c6b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6ba:	e8 f5 f9 ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c6bf:	83 c4 10             	add    esp,0x10
c001c6c2:	83 ec 0c             	sub    esp,0xc
c001c6c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6c9:	50                   	push   eax
c001c6ca:	e8 80 9e fe ff       	call   c000654f <f_mkdir>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c6d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c6e0:	85 c0                	test   eax,eax
c001c6e2:	75 08                	jne    c001c6ec <FAT::mkdir(char const*)+0x70>
c001c6e4:	b8 00 00 00 00       	mov    eax,0x0
c001c6e9:	eb 09                	jmp    c001c6f4 <FAT::mkdir(char const*)+0x78>
c001c6eb:	90                   	nop
c001c6ec:	b8 01 00 00 00       	mov    eax,0x1
c001c6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c6fa:	c3                   	ret    
c001c6fb:	90                   	nop

c001c6fc <FAT::exists(char const*)>:
c001c6fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c702:	83 ec 08             	sub    esp,0x8
c001c705:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c70c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c710:	50                   	push   eax
c001c711:	e8 22 40 fe ff       	call   c0000738 <strcpy>
c001c716:	83 c4 10             	add    esp,0x10
c001c719:	83 ec 08             	sub    esp,0x8
c001c71c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c720:	50                   	push   eax
c001c721:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c728:	e8 87 f9 ff ff       	call   c001c0b4 <FAT::fixFilepath(char*)>
c001c72d:	83 c4 10             	add    esp,0x10
c001c730:	83 ec 08             	sub    esp,0x8
c001c733:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c73a:	50                   	push   eax
c001c73b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c73f:	50                   	push   eax
c001c740:	e8 35 99 fe ff       	call   c000607a <f_stat>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c74f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c756:	85 c0                	test   eax,eax
c001c758:	75 06                	jne    c001c760 <FAT::exists(char const*)+0x64>
c001c75a:	b0 01                	mov    al,0x1
c001c75c:	eb 06                	jmp    c001c764 <FAT::exists(char const*)+0x68>
c001c75e:	66 90                	xchg   ax,ax
c001c760:	b0 00                	mov    al,0x0
c001c762:	66 90                	xchg   ax,ax
c001c764:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c76a:	c3                   	ret    
c001c76b:	90                   	nop

c001c76c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c76c:	b8 08 00 00 00       	mov    eax,0x8
c001c771:	c3                   	ret    

c001c772 <ISO9660::seek(void*, unsigned long long)>:
c001c772:	53                   	push   ebx
c001c773:	b8 04 00 00 00       	mov    eax,0x4
c001c778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c77c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c780:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c784:	85 d2                	test   edx,edx
c001c786:	74 17                	je     c001c79f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c788:	89 c8                	mov    eax,ecx
c001c78a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c78d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c790:	b8 01 00 00 00       	mov    eax,0x1
c001c795:	73 08                	jae    c001c79f <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c797:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c79a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c79d:	31 c0                	xor    eax,eax
c001c79f:	5b                   	pop    ebx
c001c7a0:	c3                   	ret    
c001c7a1:	90                   	nop

c001c7a2 <ISO9660::tell(void*, unsigned long long*)>:
c001c7a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7aa:	85 d2                	test   edx,edx
c001c7ac:	74 12                	je     c001c7c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c7ae:	85 c0                	test   eax,eax
c001c7b0:	74 0e                	je     c001c7c0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c7b2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7b5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c7b8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c7bb:	89 10                	mov    DWORD PTR [eax],edx
c001c7bd:	31 c0                	xor    eax,eax
c001c7bf:	c3                   	ret    
c001c7c0:	b8 04 00 00 00       	mov    eax,0x4
c001c7c5:	c3                   	ret    

c001c7c6 <ISO9660::getName()>:
c001c7c6:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c001c7cb:	c3                   	ret    

c001c7cc <ISO9660::stat(void*, unsigned long long*)>:
c001c7cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7d4:	85 d2                	test   edx,edx
c001c7d6:	74 12                	je     c001c7ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c7d8:	85 c0                	test   eax,eax
c001c7da:	74 0e                	je     c001c7ea <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c7dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c7df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c7e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c7e5:	89 10                	mov    DWORD PTR [eax],edx
c001c7e7:	31 c0                	xor    eax,eax
c001c7e9:	c3                   	ret    
c001c7ea:	b8 04 00 00 00       	mov    eax,0x4
c001c7ef:	c3                   	ret    

c001c7f0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c7f0:	b8 01 00 00 00       	mov    eax,0x1
c001c7f5:	c3                   	ret    

c001c7f6 <ISO9660::unlink(char const*)>:
c001c7f6:	b8 01 00 00 00       	mov    eax,0x1
c001c7fb:	c3                   	ret    

c001c7fc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c7fc:	b8 01 00 00 00       	mov    eax,0x1
c001c801:	c3                   	ret    

c001c802 <ISO9660::rename(char const*, char const*)>:
c001c802:	b8 01 00 00 00       	mov    eax,0x1
c001c807:	c3                   	ret    

c001c808 <ISO9660::mkdir(char const*)>:
c001c808:	b8 01 00 00 00       	mov    eax,0x1
c001c80d:	c3                   	ret    

c001c80e <ISO9660::close(void*)>:
c001c80e:	83 ec 0c             	sub    esp,0xc
c001c811:	b8 04 00 00 00       	mov    eax,0x4
c001c816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c81a:	85 d2                	test   edx,edx
c001c81c:	74 0e                	je     c001c82c <ISO9660::close(void*)+0x1e>
c001c81e:	83 ec 0c             	sub    esp,0xc
c001c821:	52                   	push   edx
c001c822:	e8 3c d5 fe ff       	call   c0009d63 <free>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	31 c0                	xor    eax,eax
c001c82c:	83 c4 0c             	add    esp,0xc
c001c82f:	c3                   	ret    

c001c830 <ISO9660::closeDir(void*)>:
c001c830:	83 ec 0c             	sub    esp,0xc
c001c833:	b8 04 00 00 00       	mov    eax,0x4
c001c838:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c83c:	85 d2                	test   edx,edx
c001c83e:	74 0e                	je     c001c84e <ISO9660::closeDir(void*)+0x1e>
c001c840:	83 ec 0c             	sub    esp,0xc
c001c843:	52                   	push   edx
c001c844:	e8 1a d5 fe ff       	call   c0009d63 <free>
c001c849:	83 c4 10             	add    esp,0x10
c001c84c:	31 c0                	xor    eax,eax
c001c84e:	83 c4 0c             	add    esp,0xc
c001c851:	c3                   	ret    

c001c852 <ISO9660::~ISO9660()>:
c001c852:	83 ec 0c             	sub    esp,0xc
c001c855:	ba dc 6e 02 c0       	mov    edx,0xc0026edc
c001c85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85e:	89 10                	mov    DWORD PTR [eax],edx
c001c860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	50                   	push   eax
c001c868:	e8 0d 0b ff ff       	call   c000d37a <Filesystem::~Filesystem()>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	90                   	nop
c001c871:	83 c4 0c             	add    esp,0xc
c001c874:	c3                   	ret    
c001c875:	90                   	nop

c001c876 <ISO9660::~ISO9660()>:
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	83 ec 0c             	sub    esp,0xc
c001c87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c880:	e8 cd ff ff ff       	call   c001c852 <ISO9660::~ISO9660()>
c001c885:	83 c4 10             	add    esp,0x10
c001c888:	83 ec 08             	sub    esp,0x8
c001c88b:	6a 08                	push   0x8
c001c88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c891:	e8 c8 06 ff ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001c896:	83 c4 10             	add    esp,0x10
c001c899:	83 c4 0c             	add    esp,0xc
c001c89c:	c3                   	ret    

c001c89d <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c89d:	55                   	push   ebp
c001c89e:	31 c9                	xor    ecx,ecx
c001c8a0:	57                   	push   edi
c001c8a1:	56                   	push   esi
c001c8a2:	53                   	push   ebx
c001c8a3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c8a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c8ab:	89 eb                	mov    ebx,ebp
c001c8ad:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c8b1:	39 ce                	cmp    esi,ecx
c001c8b3:	7e 17                	jle    c001c8cc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c8b5:	31 d2                	xor    edx,edx
c001c8b7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c8bb:	7d 13                	jge    c001c8d0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c8bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c8c1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c8c4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c8c7:	75 0d                	jne    c001c8d6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c8c9:	42                   	inc    edx
c001c8ca:	eb eb                	jmp    c001c8b7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c8cc:	31 c0                	xor    eax,eax
c001c8ce:	eb 0a                	jmp    c001c8da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c8d0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c8d4:	eb 04                	jmp    c001c8da <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c8d6:	41                   	inc    ecx
c001c8d7:	43                   	inc    ebx
c001c8d8:	eb d7                	jmp    c001c8b1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c8da:	5b                   	pop    ebx
c001c8db:	5e                   	pop    esi
c001c8dc:	5f                   	pop    edi
c001c8dd:	5d                   	pop    ebp
c001c8de:	c3                   	ret    

c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c8df:	57                   	push   edi
c001c8e0:	56                   	push   esi
c001c8e1:	53                   	push   ebx
c001c8e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8ea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c8ee:	39 35 80 a1 02 c0    	cmp    DWORD PTR ds:0xc002a180,esi
c001c8f4:	75 08                	jne    c001c8fe <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c8f6:	38 1d 94 84 02 c0    	cmp    BYTE PTR ds:0xc0028494,bl
c001c8fc:	74 4a                	je     c001c948 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c8fe:	83 ec 0c             	sub    esp,0xc
c001c901:	31 d2                	xor    edx,edx
c001c903:	68 a0 a1 02 c0       	push   0xc002a1a0
c001c908:	0f be c3             	movsx  eax,bl
c001c90b:	6a 01                	push   0x1
c001c90d:	52                   	push   edx
c001c90e:	56                   	push   esi
c001c90f:	ff 34 85 1c 8f 02 c0 	push   DWORD PTR [eax*4-0x3ffd70e4]
c001c916:	e8 7d 3f ff ff       	call   c0010898 <LogicalDisk::read(unsigned long long, int, void*)>
c001c91b:	83 c4 20             	add    esp,0x20
c001c91e:	85 c0                	test   eax,eax
c001c920:	75 0e                	jne    c001c930 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c922:	89 35 80 a1 02 c0    	mov    DWORD PTR ds:0xc002a180,esi
c001c928:	88 1d 94 84 02 c0    	mov    BYTE PTR ds:0xc0028494,bl
c001c92e:	eb 18                	jmp    c001c948 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c930:	50                   	push   eax
c001c931:	68 00 08 00 00       	push   0x800
c001c936:	6a 00                	push   0x0
c001c938:	57                   	push   edi
c001c939:	e8 3e 3d fe ff       	call   c000067c <memset>
c001c93e:	83 c4 10             	add    esp,0x10
c001c941:	b8 01 00 00 00       	mov    eax,0x1
c001c946:	eb 0e                	jmp    c001c956 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c948:	be a0 a1 02 c0       	mov    esi,0xc002a1a0
c001c94d:	b9 00 08 00 00       	mov    ecx,0x800
c001c952:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c954:	31 c0                	xor    eax,eax
c001c956:	5b                   	pop    ebx
c001c957:	5e                   	pop    esi
c001c958:	5f                   	pop    edi
c001c959:	c3                   	ret    

c001c95a <ISO9660::tryMount(LogicalDisk*, int)>:
c001c95a:	81 ec 10 08 00 00    	sub    esp,0x810
c001c960:	c7 05 80 a1 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a180,0xdeadbeef
c001c96a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c971:	83 c0 41             	add    eax,0x41
c001c974:	0f be c0             	movsx  eax,al
c001c977:	50                   	push   eax
c001c978:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c97c:	50                   	push   eax
c001c97d:	6a 10                	push   0x10
c001c97f:	e8 5b ff ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c984:	83 c4 10             	add    esp,0x10
c001c987:	31 d2                	xor    edx,edx
c001c989:	85 c0                	test   eax,eax
c001c98b:	75 24                	jne    c001c9b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c98d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c992:	75 1d                	jne    c001c9b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c994:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c999:	75 16                	jne    c001c9b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c99b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c9a0:	75 0f                	jne    c001c9b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9a2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c9a7:	75 08                	jne    c001c9b1 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c9a9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c9ae:	0f 94 c2             	sete   dl
c001c9b1:	88 d0                	mov    al,dl
c001c9b3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c9b9:	c3                   	ret    

c001c9ba <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c9ba:	55                   	push   ebp
c001c9bb:	57                   	push   edi
c001c9bc:	56                   	push   esi
c001c9bd:	53                   	push   ebx
c001c9be:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c9c4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c9cb:	85 ed                	test   ebp,ebp
c001c9cd:	0f 84 da 01 00 00    	je     c001cbad <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c9d3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c9db:	0f 84 cc 01 00 00    	je     c001cbad <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c9e1:	b8 01 00 00 00       	mov    eax,0x1
c001c9e6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c9ea:	0f 85 c2 01 00 00    	jne    c001cbb2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c9f0:	31 d2                	xor    edx,edx
c001c9f2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c9f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c9fc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c9ff:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ca02:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca09:	01 c8                	add    eax,ecx
c001ca0b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ca0e:	11 da                	adc    edx,ebx
c001ca10:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001ca14:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ca18:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ca20:	19 d7                	sbb    edi,edx
c001ca22:	72 11                	jb     c001ca35 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001ca24:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001ca27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001ca2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca33:	eb 0c                	jmp    c001ca41 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001ca35:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ca39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ca3d:	29 ce                	sub    esi,ecx
c001ca3f:	19 df                	sbb    edi,ebx
c001ca41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca44:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ca47:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ca4b:	c1 e0 0b             	shl    eax,0xb
c001ca4e:	01 c8                	add    eax,ecx
c001ca50:	11 da                	adc    edx,ebx
c001ca52:	89 04 24             	mov    DWORD PTR [esp],eax
c001ca55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ca59:	51                   	push   ecx
c001ca5a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ca5e:	50                   	push   eax
c001ca5f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ca63:	53                   	push   ebx
c001ca64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca6c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ca70:	50                   	push   eax
c001ca71:	e8 69 fe ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ca76:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ca79:	b8 00 08 00 00       	mov    eax,0x800
c001ca7e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ca84:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001ca88:	29 d0                	sub    eax,edx
c001ca8a:	83 c4 10             	add    esp,0x10
c001ca8d:	89 f9                	mov    ecx,edi
c001ca8f:	39 c6                	cmp    esi,eax
c001ca91:	83 d9 00             	sbb    ecx,0x0
c001ca94:	7d 1b                	jge    c001cab1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ca96:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ca9b:	75 12                	jne    c001caaf <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001ca9d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001caa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001caaa:	e9 fa 00 00 00       	jmp    c001cba9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001caaf:	89 f0                	mov    eax,esi
c001cab1:	01 d3                	add    ebx,edx
c001cab3:	31 d2                	xor    edx,edx
c001cab5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cab9:	39 c2                	cmp    edx,eax
c001cabb:	7d 14                	jge    c001cad1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cabd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001cac4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cac8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cacb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cace:	42                   	inc    edx
c001cacf:	eb e8                	jmp    c001cab9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cad1:	89 c2                	mov    edx,eax
c001cad3:	85 c0                	test   eax,eax
c001cad5:	79 02                	jns    c001cad9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001cad7:	31 d2                	xor    edx,edx
c001cad9:	01 c2                	add    edx,eax
c001cadb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001cade:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001cae5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001cae9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001caed:	99                   	cdq    
c001caee:	01 c1                	add    ecx,eax
c001caf0:	11 d3                	adc    ebx,edx
c001caf2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001caf6:	29 c6                	sub    esi,eax
c001caf8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cafc:	19 d7                	sbb    edi,edx
c001cafe:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb01:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cb05:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cb0a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cb0d:	b8 00 00 00 00       	mov    eax,0x0
c001cb12:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cb16:	7d 43                	jge    c001cb5b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cb18:	52                   	push   edx
c001cb19:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb1d:	50                   	push   eax
c001cb1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb2a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cb2e:	50                   	push   eax
c001cb2f:	e8 ab fd ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb34:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cb3c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cb41:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cb49:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cb51:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	eb aa                	jmp    c001cb05 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cb5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cb62:	74 2a                	je     c001cb8e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cb64:	50                   	push   eax
c001cb65:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cb69:	50                   	push   eax
c001cb6a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cb6e:	56                   	push   esi
c001cb6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cb73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb77:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cb7b:	51                   	push   ecx
c001cb7c:	e8 5e fd ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cb81:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cb95:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb9d:	89 18                	mov    DWORD PTR [eax],ebx
c001cb9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cba3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cba6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cba9:	31 c0                	xor    eax,eax
c001cbab:	eb 05                	jmp    c001cbb2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cbad:	b8 04 00 00 00       	mov    eax,0x4
c001cbb2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001cbb8:	5b                   	pop    ebx
c001cbb9:	5e                   	pop    esi
c001cbba:	5f                   	pop    edi
c001cbbb:	5d                   	pop    ebp
c001cbbc:	c3                   	ret    
c001cbbd:	90                   	nop

c001cbbe <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001cbbe:	55                   	push   ebp
c001cbbf:	57                   	push   edi
c001cbc0:	56                   	push   esi
c001cbc1:	53                   	push   ebx
c001cbc2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001cbc8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001cbcf:	85 ed                	test   ebp,ebp
c001cbd1:	0f 84 51 02 00 00    	je     c001ce28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cbd7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001cbdf:	0f 84 43 02 00 00    	je     c001ce28 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001cbe5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cbe8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001cbeb:	75 0a                	jne    c001cbf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001cbed:	b8 07 00 00 00       	mov    eax,0x7
c001cbf2:	e9 36 02 00 00       	jmp    c001ce2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001cbf7:	50                   	push   eax
c001cbf8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cbfc:	50                   	push   eax
c001cbfd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cc04:	53                   	push   ebx
c001cc05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc08:	c1 e0 0b             	shl    eax,0xb
c001cc0b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001cc0e:	c1 e8 0b             	shr    eax,0xb
c001cc11:	50                   	push   eax
c001cc12:	e8 c8 fc ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cc1a:	83 c4 10             	add    esp,0x10
c001cc1d:	89 c1                	mov    ecx,eax
c001cc1f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001cc22:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cc28:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001cc2b:	84 db                	test   bl,bl
c001cc2d:	0f 85 8b 00 00 00    	jne    c001ccbe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001cc33:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001cc39:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc3c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cc42:	29 c6                	sub    esi,eax
c001cc44:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cc48:	89 f3                	mov    ebx,esi
c001cc4a:	89 f1                	mov    ecx,esi
c001cc4c:	c1 fb 1f             	sar    ebx,0x1f
c001cc4f:	01 f0                	add    eax,esi
c001cc51:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc54:	11 da                	adc    edx,ebx
c001cc56:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc5d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cc60:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cc63:	89 d8                	mov    eax,ebx
c001cc65:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cc69:	ba 00 00 00 00       	mov    edx,0x0
c001cc6e:	19 f8                	sbb    eax,edi
c001cc70:	b8 00 00 00 00       	mov    eax,0x0
c001cc75:	73 08                	jae    c001cc7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001cc77:	89 f0                	mov    eax,esi
c001cc79:	89 fa                	mov    edx,edi
c001cc7b:	29 c8                	sub    eax,ecx
c001cc7d:	19 da                	sbb    edx,ebx
c001cc7f:	89 d7                	mov    edi,edx
c001cc81:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cc84:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cc87:	09 c7                	or     edi,eax
c001cc89:	0f 84 5e ff ff ff    	je     c001cbed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cc8f:	57                   	push   edi
c001cc90:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cc94:	50                   	push   eax
c001cc95:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cc9c:	53                   	push   ebx
c001cc9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cca0:	c1 e0 0b             	shl    eax,0xb
c001cca3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cca7:	c1 e8 0b             	shr    eax,0xb
c001ccaa:	50                   	push   eax
c001ccab:	e8 2f fc ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ccb0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	25 ff 07 00 00       	and    eax,0x7ff
c001ccbb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ccbe:	31 ff                	xor    edi,edi
c001ccc0:	56                   	push   esi
c001ccc1:	6a 28                	push   0x28
c001ccc3:	6a 00                	push   0x0
c001ccc5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ccc9:	50                   	push   eax
c001ccca:	e8 ad 39 fe ff       	call   c000067c <memset>
c001cccf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ccd2:	25 ff 07 00 00       	and    eax,0x7ff
c001ccd7:	89 c6                	mov    esi,eax
c001ccd9:	83 c6 21             	add    esi,0x21
c001ccdc:	83 d7 00             	adc    edi,0x0
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	31 c9                	xor    ecx,ecx
c001cce4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cceb:	83 f9 28             	cmp    ecx,0x28
c001ccee:	88 04 24             	mov    BYTE PTR [esp],al
c001ccf1:	0f 94 c2             	sete   dl
c001ccf4:	88 d0                	mov    al,dl
c001ccf6:	ba ff 07 00 00       	mov    edx,0x7ff
c001ccfb:	39 f2                	cmp    edx,esi
c001ccfd:	ba 00 00 00 00       	mov    edx,0x0
c001cd02:	19 fa                	sbb    edx,edi
c001cd04:	0f 92 c2             	setb   dl
c001cd07:	09 c2                	or     edx,eax
c001cd09:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cd0d:	0f 94 c0             	sete   al
c001cd10:	08 d0                	or     al,dl
c001cd12:	75 16                	jne    c001cd2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cd14:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cd18:	74 10                	je     c001cd2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cd1a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cd1d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cd21:	41                   	inc    ecx
c001cd22:	83 c6 01             	add    esi,0x1
c001cd25:	83 d7 00             	adc    edi,0x0
c001cd28:	eb ba                	jmp    c001cce4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cd2a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cd31:	83 ec 0c             	sub    esp,0xc
c001cd34:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cd38:	56                   	push   esi
c001cd39:	e8 5a 39 fe ff       	call   c0000698 <strlen>
c001cd3e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cd45:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cd49:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cd51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cd54:	5a                   	pop    edx
c001cd55:	25 ff 07 00 00       	and    eax,0x7ff
c001cd5a:	59                   	pop    ecx
c001cd5b:	01 f8                	add    eax,edi
c001cd5d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cd63:	83 e0 02             	and    eax,0x2
c001cd66:	3c 01                	cmp    al,0x1
c001cd68:	19 c0                	sbb    eax,eax
c001cd6a:	83 c0 02             	add    eax,0x2
c001cd6d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cd71:	56                   	push   esi
c001cd72:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cd76:	50                   	push   eax
c001cd77:	e8 bc 39 fe ff       	call   c0000738 <strcpy>
c001cd7c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cd80:	83 c4 10             	add    esp,0x10
c001cd83:	84 c0                	test   al,al
c001cd85:	75 21                	jne    c001cda8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001cd87:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001cd8f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cd97:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cd9f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001cda6:	eb 28                	jmp    c001cdd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cda8:	fe c8                	dec    al
c001cdaa:	75 24                	jne    c001cdd0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001cdac:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001cdb4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cdbc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001cdc4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001cdcb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001cdd0:	8d 74 24 40          	lea    esi,[esp+0x40]
c001cdd4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001cddb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001cde2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cde4:	0f b6 f3             	movzx  esi,bl
c001cde7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001cdee:	31 db                	xor    ebx,ebx
c001cdf0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001cdf6:	89 df                	mov    edi,ebx
c001cdf8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001cdfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cdfe:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001ce01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ce04:	39 c6                	cmp    esi,eax
c001ce06:	19 d7                	sbb    edi,edx
c001ce08:	72 10                	jb     c001ce1a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001ce0a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001ce11:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001ce18:	eb 0a                	jmp    c001ce24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001ce1a:	29 f0                	sub    eax,esi
c001ce1c:	19 da                	sbb    edx,ebx
c001ce1e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001ce21:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001ce24:	31 c0                	xor    eax,eax
c001ce26:	eb 05                	jmp    c001ce2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce28:	b8 04 00 00 00       	mov    eax,0x4
c001ce2d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001ce33:	5b                   	pop    ebx
c001ce34:	5e                   	pop    esi
c001ce35:	5f                   	pop    edi
c001ce36:	5d                   	pop    ebp
c001ce37:	c3                   	ret    

c001ce38 <readRoot(unsigned int*, unsigned int*, char)>:
c001ce38:	57                   	push   edi
c001ce39:	56                   	push   esi
c001ce3a:	81 ec 38 08 00 00    	sub    esp,0x838
c001ce40:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001ce48:	50                   	push   eax
c001ce49:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ce4d:	50                   	push   eax
c001ce4e:	6a 10                	push   0x10
c001ce50:	e8 8a fa ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce55:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001ce5c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001ce60:	b9 22 00 00 00       	mov    ecx,0x22
c001ce65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce67:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ce6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce72:	89 10                	mov    DWORD PTR [eax],edx
c001ce74:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ce7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce7f:	89 10                	mov    DWORD PTR [eax],edx
c001ce81:	81 c4 44 08 00 00    	add    esp,0x844
c001ce87:	b0 01                	mov    al,0x1
c001ce89:	5e                   	pop    esi
c001ce8a:	5f                   	pop    edi
c001ce8b:	c3                   	ret    

c001ce8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001ce8c:	55                   	push   ebp
c001ce8d:	57                   	push   edi
c001ce8e:	56                   	push   esi
c001ce8f:	53                   	push   ebx
c001ce90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ce96:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001ce9d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001cea4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cea8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001ceac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ceb0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ceb4:	75 03                	jne    c001ceb9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001ceb6:	83 c3 02             	add    ebx,0x2
c001ceb9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001cebc:	75 03                	jne    c001cec1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001cebe:	43                   	inc    ebx
c001cebf:	eb f8                	jmp    c001ceb9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001cec1:	52                   	push   edx
c001cec2:	68 00 01 00 00       	push   0x100
c001cec7:	6a 00                	push   0x0
c001cec9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cecd:	50                   	push   eax
c001cece:	e8 a9 37 fe ff       	call   c000067c <memset>
c001ced3:	83 c4 10             	add    esp,0x10
c001ced6:	31 d2                	xor    edx,edx
c001ced8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cedb:	84 c0                	test   al,al
c001cedd:	74 21                	je     c001cf00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001cedf:	3c 2f                	cmp    al,0x2f
c001cee1:	75 0b                	jne    c001ceee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001cee3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001cee7:	bd 01 00 00 00       	mov    ebp,0x1
c001ceec:	eb 14                	jmp    c001cf02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ceee:	8d 48 9f             	lea    ecx,[eax-0x61]
c001cef1:	80 f9 19             	cmp    cl,0x19
c001cef4:	77 03                	ja     c001cef9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cef6:	83 e8 20             	sub    eax,0x20
c001cef9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001cefd:	42                   	inc    edx
c001cefe:	eb d8                	jmp    c001ced8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001cf00:	31 ed                	xor    ebp,ebp
c001cf02:	83 ec 0c             	sub    esp,0xc
c001cf05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cf0c:	e8 42 ce fe ff       	call   c0009d53 <malloc>
c001cf11:	89 c6                	mov    esi,eax
c001cf13:	89 c2                	mov    edx,eax
c001cf15:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cf1c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001cf22:	c1 ef 0b             	shr    edi,0xb
c001cf25:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001cf2c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001cf38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf3c:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001cf43:	74 29                	je     c001cf6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001cf45:	50                   	push   eax
c001cf46:	57                   	push   edi
c001cf47:	52                   	push   edx
c001cf48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cf4c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001cf53:	e8 87 f9 ff ff       	call   c001c8df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cf58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf5c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001cf63:	81 c2 00 08 00 00    	add    edx,0x800
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	eb ca                	jmp    c001cf38 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001cf6e:	83 ec 0c             	sub    esp,0xc
c001cf71:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001cf75:	57                   	push   edi
c001cf76:	e8 1d 37 fe ff       	call   c0000698 <strlen>
c001cf7b:	50                   	push   eax
c001cf7c:	57                   	push   edi
c001cf7d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001cf84:	56                   	push   esi
c001cf85:	e8 13 f9 ff ff       	call   c001c89d <__memmem(unsigned char*, int, unsigned char*, int)>
c001cf8a:	83 c4 20             	add    esp,0x20
c001cf8d:	85 c0                	test   eax,eax
c001cf8f:	75 13                	jne    c001cfa4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001cf91:	83 ec 0c             	sub    esp,0xc
c001cf94:	56                   	push   esi
c001cf95:	e8 c9 cd fe ff       	call   c0009d63 <free>
c001cf9a:	83 c4 10             	add    esp,0x10
c001cf9d:	31 c0                	xor    eax,eax
c001cf9f:	e9 b3 00 00 00       	jmp    c001d057 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001cfa4:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001cfa8:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001cfac:	c1 e7 08             	shl    edi,0x8
c001cfaf:	c1 e2 10             	shl    edx,0x10
c001cfb2:	09 d7                	or     edi,edx
c001cfb4:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001cfb8:	09 d7                	or     edi,edx
c001cfba:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001cfbe:	c1 e2 18             	shl    edx,0x18
c001cfc1:	09 d7                	or     edi,edx
c001cfc3:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001cfc7:	89 d1                	mov    ecx,edx
c001cfc9:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001cfcd:	c1 e1 08             	shl    ecx,0x8
c001cfd0:	c1 e2 10             	shl    edx,0x10
c001cfd3:	09 ca                	or     edx,ecx
c001cfd5:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001cfd9:	09 ca                	or     edx,ecx
c001cfdb:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001cfdf:	c1 e1 18             	shl    ecx,0x18
c001cfe2:	09 ca                	or     edx,ecx
c001cfe4:	89 e9                	mov    ecx,ebp
c001cfe6:	84 c9                	test   cl,cl
c001cfe8:	74 3c                	je     c001d026 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001cfea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cfee:	83 ec 0c             	sub    esp,0xc
c001cff1:	56                   	push   esi
c001cff2:	e8 6c cd fe ff       	call   c0009d63 <free>
c001cff7:	83 c4 0c             	add    esp,0xc
c001cffa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d001:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d006:	50                   	push   eax
c001d007:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d00e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d015:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d019:	52                   	push   edx
c001d01a:	57                   	push   edi
c001d01b:	53                   	push   ebx
c001d01c:	e8 6b fe ff ff       	call   c001ce8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d021:	83 c4 20             	add    esp,0x20
c001d024:	eb 31                	jmp    c001d057 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d026:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d029:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d030:	d0 e8                	shr    al,1
c001d032:	89 3b                	mov    DWORD PTR [ebx],edi
c001d034:	83 e0 01             	and    eax,0x1
c001d037:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d03e:	83 ec 0c             	sub    esp,0xc
c001d041:	89 13                	mov    DWORD PTR [ebx],edx
c001d043:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d04a:	89 03                	mov    DWORD PTR [ebx],eax
c001d04c:	56                   	push   esi
c001d04d:	e8 11 cd fe ff       	call   c0009d63 <free>
c001d052:	83 c4 10             	add    esp,0x10
c001d055:	b0 01                	mov    al,0x1
c001d057:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d05d:	5b                   	pop    ebx
c001d05e:	5e                   	pop    esi
c001d05f:	5f                   	pop    edi
c001d060:	5d                   	pop    ebp
c001d061:	c3                   	ret    

c001d062 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d062:	55                   	push   ebp
c001d063:	57                   	push   edi
c001d064:	56                   	push   esi
c001d065:	53                   	push   ebx
c001d066:	83 ec 20             	sub    esp,0x20
c001d069:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d06d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d071:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d075:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d07d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d085:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d08a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d090:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d096:	57                   	push   edi
c001d097:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d09b:	50                   	push   eax
c001d09c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d0a0:	50                   	push   eax
c001d0a1:	e8 92 fd ff ff       	call   c001ce38 <readRoot(unsigned int*, unsigned int*, char)>
c001d0a6:	5a                   	pop    edx
c001d0a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0ab:	e8 e8 35 fe ff       	call   c0000698 <strlen>
c001d0b0:	83 c4 10             	add    esp,0x10
c001d0b3:	83 f8 03             	cmp    eax,0x3
c001d0b6:	77 17                	ja     c001d0cf <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d0b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0bc:	89 03                	mov    DWORD PTR [ebx],eax
c001d0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c2:	89 06                	mov    DWORD PTR [esi],eax
c001d0c4:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d0cb:	b0 01                	mov    al,0x1
c001d0cd:	eb 19                	jmp    c001d0e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d0cf:	50                   	push   eax
c001d0d0:	55                   	push   ebp
c001d0d1:	57                   	push   edi
c001d0d2:	56                   	push   esi
c001d0d3:	53                   	push   ebx
c001d0d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0e0:	e8 a7 fd ff ff       	call   c001ce8c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d0e5:	83 c4 20             	add    esp,0x20
c001d0e8:	83 c4 1c             	add    esp,0x1c
c001d0eb:	5b                   	pop    ebx
c001d0ec:	5e                   	pop    esi
c001d0ed:	5f                   	pop    edi
c001d0ee:	5d                   	pop    ebp
c001d0ef:	c3                   	ret    

c001d0f0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d0f0:	57                   	push   edi
c001d0f1:	56                   	push   esi
c001d0f2:	53                   	push   ebx
c001d0f3:	83 ec 10             	sub    esp,0x10
c001d0f6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d0fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d0fe:	85 ff                	test   edi,edi
c001d100:	0f 84 8b 00 00 00    	je     c001d191 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d106:	85 f6                	test   esi,esi
c001d108:	0f 84 83 00 00 00    	je     c001d191 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d10e:	b8 03 00 00 00       	mov    eax,0x3
c001d113:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d118:	75 7c                	jne    c001d196 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d11a:	83 ec 0c             	sub    esp,0xc
c001d11d:	6a 1c                	push   0x1c
c001d11f:	e8 2f cc fe ff       	call   c0009d53 <malloc>
c001d124:	89 07                	mov    DWORD PTR [edi],eax
c001d126:	89 c3                	mov    ebx,eax
c001d128:	58                   	pop    eax
c001d129:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d12d:	50                   	push   eax
c001d12e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d131:	50                   	push   eax
c001d132:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d136:	50                   	push   eax
c001d137:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d13b:	50                   	push   eax
c001d13c:	56                   	push   esi
c001d13d:	e8 20 ff ff ff       	call   c001d062 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d142:	83 c4 20             	add    esp,0x20
c001d145:	84 c0                	test   al,al
c001d147:	74 07                	je     c001d150 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d149:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d14e:	74 0b                	je     c001d15b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d150:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d154:	b8 01 00 00 00       	mov    eax,0x1
c001d159:	eb 3b                	jmp    c001d196 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d15b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d15f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d163:	89 03                	mov    DWORD PTR [ebx],eax
c001d165:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d16c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d170:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d177:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d17e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d181:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d188:	8a 06                	mov    al,BYTE PTR [esi]
c001d18a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d18d:	31 c0                	xor    eax,eax
c001d18f:	eb 05                	jmp    c001d196 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d191:	b8 04 00 00 00       	mov    eax,0x4
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	5b                   	pop    ebx
c001d19a:	5e                   	pop    esi
c001d19b:	5f                   	pop    edi
c001d19c:	c3                   	ret    
c001d19d:	90                   	nop

c001d19e <ISO9660::exists(char const*)>:
c001d19e:	83 ec 28             	sub    esp,0x28
c001d1a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d1a9:	52                   	push   edx
c001d1aa:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d1ad:	52                   	push   edx
c001d1ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d1b2:	52                   	push   edx
c001d1b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d1b7:	52                   	push   edx
c001d1b8:	50                   	push   eax
c001d1b9:	e8 a4 fe ff ff       	call   c001d062 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d1be:	83 c4 3c             	add    esp,0x3c
c001d1c1:	c3                   	ret    

c001d1c2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d1c2:	56                   	push   esi
c001d1c3:	53                   	push   ebx
c001d1c4:	83 ec 14             	sub    esp,0x14
c001d1c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d1cb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d1cf:	85 db                	test   ebx,ebx
c001d1d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d1d5:	0f 94 c2             	sete   dl
c001d1d8:	85 f6                	test   esi,esi
c001d1da:	0f 94 c0             	sete   al
c001d1dd:	08 c2                	or     dl,al
c001d1df:	75 68                	jne    c001d249 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d1e1:	85 c9                	test   ecx,ecx
c001d1e3:	74 64                	je     c001d249 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d1e5:	83 ec 0c             	sub    esp,0xc
c001d1e8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d1eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d1ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d1f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d1fc:	50                   	push   eax
c001d1fd:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d200:	50                   	push   eax
c001d201:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d205:	50                   	push   eax
c001d206:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d20a:	50                   	push   eax
c001d20b:	51                   	push   ecx
c001d20c:	e8 51 fe ff ff       	call   c001d062 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d211:	83 c4 20             	add    esp,0x20
c001d214:	ba 01 00 00 00       	mov    edx,0x1
c001d219:	84 c0                	test   al,al
c001d21b:	74 31                	je     c001d24e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d21d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d221:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d228:	89 03                	mov    DWORD PTR [ebx],eax
c001d22a:	ba 00 00 00 00       	mov    edx,0x0
c001d22f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d233:	85 c0                	test   eax,eax
c001d235:	0f 95 06             	setne  BYTE PTR [esi]
c001d238:	74 14                	je     c001d24e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d23a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d240:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d247:	eb 05                	jmp    c001d24e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d249:	ba 04 00 00 00       	mov    edx,0x4
c001d24e:	83 c4 14             	add    esp,0x14
c001d251:	89 d0                	mov    eax,edx
c001d253:	5b                   	pop    ebx
c001d254:	5e                   	pop    esi
c001d255:	c3                   	ret    

c001d256 <ISO9660::openDir(char const*, void**)>:
c001d256:	57                   	push   edi
c001d257:	56                   	push   esi
c001d258:	53                   	push   ebx
c001d259:	83 ec 10             	sub    esp,0x10
c001d25c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d260:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d264:	85 ff                	test   edi,edi
c001d266:	74 7b                	je     c001d2e3 <ISO9660::openDir(char const*, void**)+0x8d>
c001d268:	85 f6                	test   esi,esi
c001d26a:	74 77                	je     c001d2e3 <ISO9660::openDir(char const*, void**)+0x8d>
c001d26c:	83 ec 0c             	sub    esp,0xc
c001d26f:	6a 1c                	push   0x1c
c001d271:	e8 dd ca fe ff       	call   c0009d53 <malloc>
c001d276:	89 07                	mov    DWORD PTR [edi],eax
c001d278:	89 c3                	mov    ebx,eax
c001d27a:	58                   	pop    eax
c001d27b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d27f:	50                   	push   eax
c001d280:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d283:	50                   	push   eax
c001d284:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d288:	50                   	push   eax
c001d289:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d28d:	50                   	push   eax
c001d28e:	56                   	push   esi
c001d28f:	e8 ce fd ff ff       	call   c001d062 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d294:	83 c4 20             	add    esp,0x20
c001d297:	84 c0                	test   al,al
c001d299:	74 07                	je     c001d2a2 <ISO9660::openDir(char const*, void**)+0x4c>
c001d29b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d2a0:	75 0b                	jne    c001d2ad <ISO9660::openDir(char const*, void**)+0x57>
c001d2a2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d2a6:	b8 01 00 00 00       	mov    eax,0x1
c001d2ab:	eb 3b                	jmp    c001d2e8 <ISO9660::openDir(char const*, void**)+0x92>
c001d2ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d2b5:	89 03                	mov    DWORD PTR [ebx],eax
c001d2b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d2be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d2c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d2c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d2d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d2d3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d2da:	8a 06                	mov    al,BYTE PTR [esi]
c001d2dc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d2df:	31 c0                	xor    eax,eax
c001d2e1:	eb 05                	jmp    c001d2e8 <ISO9660::openDir(char const*, void**)+0x92>
c001d2e3:	b8 04 00 00 00       	mov    eax,0x4
c001d2e8:	83 c4 10             	add    esp,0x10
c001d2eb:	5b                   	pop    ebx
c001d2ec:	5e                   	pop    esi
c001d2ed:	5f                   	pop    edi
c001d2ee:	c3                   	ret    
c001d2ef:	90                   	nop

c001d2f0 <ISO9660::ISO9660()>:
c001d2f0:	83 ec 0c             	sub    esp,0xc
c001d2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2f7:	83 ec 0c             	sub    esp,0xc
c001d2fa:	50                   	push   eax
c001d2fb:	e8 56 00 ff ff       	call   c000d356 <Filesystem::Filesystem()>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	ba dc 6e 02 c0       	mov    edx,0xc0026edc
c001d308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d30c:	89 10                	mov    DWORD PTR [eax],edx
c001d30e:	90                   	nop
c001d30f:	83 c4 0c             	add    esp,0xc
c001d312:	c3                   	ret    
c001d313:	90                   	nop

c001d314 <SoundCard::beginPlayback()>:
c001d314:	c7 44 24 04 3c 6f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026f3c
c001d31c:	e9 d4 7c ff ff       	jmp    c0014ff5 <Krnl::panic(char const*)>
c001d321:	90                   	nop

c001d322 <SoundCard::stopPlayback()>:
c001d322:	c7 44 24 04 70 6f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026f70
c001d32a:	e9 c6 7c ff ff       	jmp    c0014ff5 <Krnl::panic(char const*)>
c001d32f:	90                   	nop

c001d330 <SoundCard::SoundCard(char const*)>:
c001d330:	83 ec 1c             	sub    esp,0x1c
c001d333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d337:	83 ec 08             	sub    esp,0x8
c001d33a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d33e:	50                   	push   eax
c001d33f:	e8 72 14 ff ff       	call   c000e7b6 <Device::Device(char const*)>
c001d344:	83 c4 10             	add    esp,0x10
c001d347:	ba 08 70 02 c0       	mov    edx,0xc0027008
c001d34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d350:	89 10                	mov    DWORD PTR [eax],edx
c001d352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d356:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d361:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d38b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d395:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d39d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d3a2:	7f 19                	jg     c001d3bd <SoundCard::SoundCard(char const*)+0x8d>
c001d3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d3ac:	83 c2 54             	add    edx,0x54
c001d3af:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d3b7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d3bb:	eb e0                	jmp    c001d39d <SoundCard::SoundCard(char const*)+0x6d>
c001d3bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d3c8:	90                   	nop
c001d3c9:	83 c4 1c             	add    esp,0x1c
c001d3cc:	c3                   	ret    
c001d3cd:	90                   	nop

c001d3ce <SoundCard::~SoundCard()>:
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	ba 08 70 02 c0       	mov    edx,0xc0027008
c001d3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3da:	89 10                	mov    DWORD PTR [eax],edx
c001d3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	50                   	push   eax
c001d3e4:	e8 97 10 ff ff       	call   c000e480 <Device::~Device()>
c001d3e9:	83 c4 10             	add    esp,0x10
c001d3ec:	90                   	nop
c001d3ed:	83 c4 0c             	add    esp,0xc
c001d3f0:	c3                   	ret    
c001d3f1:	90                   	nop

c001d3f2 <SoundCard::~SoundCard()>:
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	83 ec 0c             	sub    esp,0xc
c001d3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3fc:	e8 cd ff ff ff       	call   c001d3ce <SoundCard::~SoundCard()>
c001d401:	83 c4 10             	add    esp,0x10
c001d404:	83 ec 08             	sub    esp,0x8
c001d407:	68 e8 01 00 00       	push   0x1e8
c001d40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d410:	e8 49 fb fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c001d415:	83 c4 10             	add    esp,0x10
c001d418:	83 c4 0c             	add    esp,0xc
c001d41b:	c3                   	ret    

c001d41c <SoundCard::configureRates(int, int, int)>:
c001d41c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d420:	31 c0                	xor    eax,eax
c001d422:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d429:	75 20                	jne    c001d44b <SoundCard::configureRates(int, int, int)+0x2f>
c001d42b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d42f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d439:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d443:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d449:	b0 01                	mov    al,0x1
c001d44b:	c3                   	ret    

c001d44c <SoundCard::getSamples16(int, short*)>:
c001d44c:	55                   	push   ebp
c001d44d:	57                   	push   edi
c001d44e:	31 ff                	xor    edi,edi
c001d450:	56                   	push   esi
c001d451:	53                   	push   ebx
c001d452:	31 db                	xor    ebx,ebx
c001d454:	83 ec 18             	sub    esp,0x18
c001d457:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d45b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d45f:	68 a3 6f 02 c0       	push   0xc0026fa3
c001d464:	e8 d6 fb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d469:	83 c4 0c             	add    esp,0xc
c001d46c:	8d 04 36             	lea    eax,[esi+esi*1]
c001d46f:	50                   	push   eax
c001d470:	6a 00                	push   0x0
c001d472:	55                   	push   ebp
c001d473:	e8 04 32 fe ff       	call   c000067c <memset>
c001d478:	83 c4 10             	add    esp,0x10
c001d47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d47f:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d486:	85 c0                	test   eax,eax
c001d488:	74 1b                	je     c001d4a5 <SoundCard::getSamples16(int, short*)+0x59>
c001d48a:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d48e:	75 15                	jne    c001d4a5 <SoundCard::getSamples16(int, short*)+0x59>
c001d490:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d494:	55                   	push   ebp
c001d495:	56                   	push   esi
c001d496:	50                   	push   eax
c001d497:	e8 58 03 00 00       	call   c001d7f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d49c:	83 c4 10             	add    esp,0x10
c001d49f:	39 c7                	cmp    edi,eax
c001d4a1:	7d 02                	jge    c001d4a5 <SoundCard::getSamples16(int, short*)+0x59>
c001d4a3:	89 c7                	mov    edi,eax
c001d4a5:	43                   	inc    ebx
c001d4a6:	83 fb 20             	cmp    ebx,0x20
c001d4a9:	75 d0                	jne    c001d47b <SoundCard::getSamples16(int, short*)+0x2f>
c001d4ab:	83 c4 0c             	add    esp,0xc
c001d4ae:	89 f8                	mov    eax,edi
c001d4b0:	5b                   	pop    ebx
c001d4b1:	5e                   	pop    esi
c001d4b2:	5f                   	pop    edi
c001d4b3:	5d                   	pop    ebp
c001d4b4:	c3                   	ret    
c001d4b5:	90                   	nop

c001d4b6 <SoundCard::getSamples32(int, int*)>:
c001d4b6:	55                   	push   ebp
c001d4b7:	57                   	push   edi
c001d4b8:	31 ff                	xor    edi,edi
c001d4ba:	56                   	push   esi
c001d4bb:	31 f6                	xor    esi,esi
c001d4bd:	53                   	push   ebx
c001d4be:	83 ec 10             	sub    esp,0x10
c001d4c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4c5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d4c9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d4cd:	c1 e0 02             	shl    eax,0x2
c001d4d0:	50                   	push   eax
c001d4d1:	6a 00                	push   0x0
c001d4d3:	55                   	push   ebp
c001d4d4:	e8 a3 31 fe ff       	call   c000067c <memset>
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d4e3:	85 c0                	test   eax,eax
c001d4e5:	74 1b                	je     c001d502 <SoundCard::getSamples32(int, int*)+0x4c>
c001d4e7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d4eb:	75 15                	jne    c001d502 <SoundCard::getSamples32(int, int*)+0x4c>
c001d4ed:	53                   	push   ebx
c001d4ee:	55                   	push   ebp
c001d4ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4f3:	50                   	push   eax
c001d4f4:	e8 f7 03 00 00       	call   c001d8f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d4f9:	83 c4 10             	add    esp,0x10
c001d4fc:	39 c6                	cmp    esi,eax
c001d4fe:	7d 02                	jge    c001d502 <SoundCard::getSamples32(int, int*)+0x4c>
c001d500:	89 c6                	mov    esi,eax
c001d502:	47                   	inc    edi
c001d503:	83 ff 20             	cmp    edi,0x20
c001d506:	75 d4                	jne    c001d4dc <SoundCard::getSamples32(int, int*)+0x26>
c001d508:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d50e:	85 f6                	test   esi,esi
c001d510:	75 0f                	jne    c001d521 <SoundCard::getSamples32(int, int*)+0x6b>
c001d512:	84 c0                	test   al,al
c001d514:	74 1b                	je     c001d531 <SoundCard::getSamples32(int, int*)+0x7b>
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d51b:	53                   	push   ebx
c001d51c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d51f:	eb 0d                	jmp    c001d52e <SoundCard::getSamples32(int, int*)+0x78>
c001d521:	84 c0                	test   al,al
c001d523:	75 0c                	jne    c001d531 <SoundCard::getSamples32(int, int*)+0x7b>
c001d525:	83 ec 0c             	sub    esp,0xc
c001d528:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d52a:	53                   	push   ebx
c001d52b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	83 c4 0c             	add    esp,0xc
c001d534:	89 f0                	mov    eax,esi
c001d536:	5b                   	pop    ebx
c001d537:	5e                   	pop    esi
c001d538:	5f                   	pop    edi
c001d539:	5d                   	pop    ebp
c001d53a:	c3                   	ret    
c001d53b:	90                   	nop

c001d53c <SoundCard::addChannel(SoundPort*)>:
c001d53c:	56                   	push   esi
c001d53d:	53                   	push   ebx
c001d53e:	53                   	push   ebx
c001d53f:	31 db                	xor    ebx,ebx
c001d541:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d545:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d54d:	74 27                	je     c001d576 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d54f:	43                   	inc    ebx
c001d550:	83 fb 20             	cmp    ebx,0x20
c001d553:	75 f0                	jne    c001d545 <SoundCard::addChannel(SoundPort*)+0x9>
c001d555:	83 ec 0c             	sub    esp,0xc
c001d558:	83 cb ff             	or     ebx,0xffffffff
c001d55b:	68 c9 6f 02 c0       	push   0xc0026fc9
c001d560:	e8 da fa fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d565:	c7 04 24 c2 6f 02 c0 	mov    DWORD PTR [esp],0xc0026fc2
c001d56c:	e8 84 7a ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	eb 1b                	jmp    c001d591 <SoundCard::addChannel(SoundPort*)+0x55>
c001d576:	51                   	push   ecx
c001d577:	51                   	push   ecx
c001d578:	53                   	push   ebx
c001d579:	68 e1 6f 02 c0       	push   0xc0026fe1
c001d57e:	e8 bc fa fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d583:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d587:	83 c4 10             	add    esp,0x10
c001d58a:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d591:	89 d8                	mov    eax,ebx
c001d593:	5a                   	pop    edx
c001d594:	5b                   	pop    ebx
c001d595:	5e                   	pop    esi
c001d596:	c3                   	ret    
c001d597:	90                   	nop

c001d598 <SoundCard::removeChannel(int)>:
c001d598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d59c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5a0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d5ab:	c3                   	ret    

c001d5ac <SoundPort::SoundPort(int, int, int, int)>:
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5b3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5be:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d5c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d5ca:	89 10                	mov    DWORD PTR [eax],edx
c001d5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d5d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d5df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d5e2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d5e7:	75 13                	jne    c001d5fc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d5e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5ef:	05 a0 0f 00 00       	add    eax,0xfa0
c001d5f4:	01 c0                	add    eax,eax
c001d5f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5fa:	66 90                	xchg   ax,ax
c001d5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d600:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d604:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d616:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d619:	c1 e0 02             	shl    eax,0x2
c001d61c:	83 ec 0c             	sub    esp,0xc
c001d61f:	50                   	push   eax
c001d620:	e8 2e c7 fe ff       	call   c0009d53 <malloc>
c001d625:	83 c4 10             	add    esp,0x10
c001d628:	89 c2                	mov    edx,eax
c001d62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d631:	90                   	nop
c001d632:	83 c4 0c             	add    esp,0xc
c001d635:	c3                   	ret    
c001d636:	66 90                	xchg   ax,ax

c001d638 <SoundPort::~SoundPort()>:
c001d638:	83 ec 0c             	sub    esp,0xc
c001d63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d642:	85 c0                	test   eax,eax
c001d644:	74 1e                	je     c001d664 <SoundPort::~SoundPort()+0x2c>
c001d646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d64d:	83 ec 0c             	sub    esp,0xc
c001d650:	50                   	push   eax
c001d651:	e8 0d c7 fe ff       	call   c0009d63 <free>
c001d656:	83 c4 10             	add    esp,0x10
c001d659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d664:	90                   	nop
c001d665:	83 c4 0c             	add    esp,0xc
c001d668:	c3                   	ret    
c001d669:	90                   	nop
c001d66a:	66 90                	xchg   ax,ax

c001d66c <SoundPort::unpause()>:
c001d66c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d670:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d674:	c3                   	ret    
c001d675:	90                   	nop
c001d676:	66 90                	xchg   ax,ax

c001d678 <SoundPort::pause()>:
c001d678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d67c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d680:	c3                   	ret    
c001d681:	90                   	nop
c001d682:	66 90                	xchg   ax,ax

c001d684 <SoundPort::getBufferUsed()>:
c001d684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d688:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d68b:	c3                   	ret    

c001d68c <SoundPort::getBufferSize()>:
c001d68c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d690:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d693:	c3                   	ret    

c001d694 <SoundPort::buffer16(short*, int)>:
c001d694:	55                   	push   ebp
c001d695:	57                   	push   edi
c001d696:	56                   	push   esi
c001d697:	53                   	push   ebx
c001d698:	83 ec 1c             	sub    esp,0x1c
c001d69b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d69f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d6a3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d6a6:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d6a9:	0f 84 85 00 00 00    	je     c001d734 <SoundPort::buffer16(short*, int)+0xa0>
c001d6af:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d6b3:	85 c9                	test   ecx,ecx
c001d6b5:	7e 7d                	jle    c001d734 <SoundPort::buffer16(short*, int)+0xa0>
c001d6b7:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d6bb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d6be:	c1 e1 0f             	shl    ecx,0xf
c001d6c1:	8d 70 01             	lea    esi,[eax+0x1]
c001d6c4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d6c7:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d6ca:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d6cd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d6d0:	74 6e                	je     c001d740 <SoundPort::buffer16(short*, int)+0xac>
c001d6d2:	31 f6                	xor    esi,esi
c001d6d4:	eb 22                	jmp    c001d6f8 <SoundPort::buffer16(short*, int)+0x64>
c001d6d6:	66 90                	xchg   ax,ax
c001d6d8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d6dd:	8d 79 01             	lea    edi,[ecx+0x1]
c001d6e0:	c1 e3 0f             	shl    ebx,0xf
c001d6e3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d6e6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d6e9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d6ec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d6ef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d6f2:	74 1c                	je     c001d710 <SoundPort::buffer16(short*, int)+0x7c>
c001d6f4:	89 c6                	mov    esi,eax
c001d6f6:	66 90                	xchg   ax,ax
c001d6f8:	8d 46 01             	lea    eax,[esi+0x1]
c001d6fb:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d6ff:	75 d7                	jne    c001d6d8 <SoundPort::buffer16(short*, int)+0x44>
c001d701:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d705:	83 c4 1c             	add    esp,0x1c
c001d708:	5b                   	pop    ebx
c001d709:	5e                   	pop    esi
c001d70a:	5f                   	pop    edi
c001d70b:	5d                   	pop    ebp
c001d70c:	c3                   	ret    
c001d70d:	8d 76 00             	lea    esi,[esi+0x0]
c001d710:	8d 46 02             	lea    eax,[esi+0x2]
c001d713:	90                   	nop
c001d714:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d718:	83 ec 0c             	sub    esp,0xc
c001d71b:	68 34 70 02 c0       	push   0xc0027034
c001d720:	e8 1a f9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d725:	83 c4 10             	add    esp,0x10
c001d728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d72c:	83 c4 1c             	add    esp,0x1c
c001d72f:	5b                   	pop    ebx
c001d730:	5e                   	pop    esi
c001d731:	5f                   	pop    edi
c001d732:	5d                   	pop    ebp
c001d733:	c3                   	ret    
c001d734:	83 c4 1c             	add    esp,0x1c
c001d737:	31 c0                	xor    eax,eax
c001d739:	5b                   	pop    ebx
c001d73a:	5e                   	pop    esi
c001d73b:	5f                   	pop    edi
c001d73c:	5d                   	pop    ebp
c001d73d:	c3                   	ret    
c001d73e:	66 90                	xchg   ax,ax
c001d740:	b8 01 00 00 00       	mov    eax,0x1
c001d745:	eb cd                	jmp    c001d714 <SoundPort::buffer16(short*, int)+0x80>
c001d747:	90                   	nop

c001d748 <SoundPort::buffer32(int*, int)>:
c001d748:	55                   	push   ebp
c001d749:	57                   	push   edi
c001d74a:	56                   	push   esi
c001d74b:	53                   	push   ebx
c001d74c:	83 ec 1c             	sub    esp,0x1c
c001d74f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d753:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d757:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d75a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d75e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d762:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d765:	74 79                	je     c001d7e0 <SoundPort::buffer32(int*, int)+0x98>
c001d767:	85 c0                	test   eax,eax
c001d769:	7e 75                	jle    c001d7e0 <SoundPort::buffer32(int*, int)+0x98>
c001d76b:	8d 71 01             	lea    esi,[ecx+0x1]
c001d76e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d771:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d774:	8b 37                	mov    esi,DWORD PTR [edi]
c001d776:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d779:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d77c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d77f:	74 6b                	je     c001d7ec <SoundPort::buffer32(int*, int)+0xa4>
c001d781:	31 f6                	xor    esi,esi
c001d783:	eb 1f                	jmp    c001d7a4 <SoundPort::buffer32(int*, int)+0x5c>
c001d785:	8d 76 00             	lea    esi,[esi+0x0]
c001d788:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d78b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d78e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d791:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d794:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d798:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d79b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d79e:	74 1c                	je     c001d7bc <SoundPort::buffer32(int*, int)+0x74>
c001d7a0:	89 de                	mov    esi,ebx
c001d7a2:	66 90                	xchg   ax,ax
c001d7a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d7a7:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d7ab:	75 db                	jne    c001d788 <SoundPort::buffer32(int*, int)+0x40>
c001d7ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7b1:	83 c4 1c             	add    esp,0x1c
c001d7b4:	5b                   	pop    ebx
c001d7b5:	5e                   	pop    esi
c001d7b6:	5f                   	pop    edi
c001d7b7:	5d                   	pop    ebp
c001d7b8:	c3                   	ret    
c001d7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d7bc:	8d 46 02             	lea    eax,[esi+0x2]
c001d7bf:	90                   	nop
c001d7c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d7c4:	83 ec 0c             	sub    esp,0xc
c001d7c7:	68 4f 70 02 c0       	push   0xc002704f
c001d7cc:	e8 6e f8 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7d8:	83 c4 1c             	add    esp,0x1c
c001d7db:	5b                   	pop    ebx
c001d7dc:	5e                   	pop    esi
c001d7dd:	5f                   	pop    edi
c001d7de:	5d                   	pop    ebp
c001d7df:	c3                   	ret    
c001d7e0:	83 c4 1c             	add    esp,0x1c
c001d7e3:	31 c0                	xor    eax,eax
c001d7e5:	5b                   	pop    ebx
c001d7e6:	5e                   	pop    esi
c001d7e7:	5f                   	pop    edi
c001d7e8:	5d                   	pop    ebp
c001d7e9:	c3                   	ret    
c001d7ea:	66 90                	xchg   ax,ax
c001d7ec:	b8 01 00 00 00       	mov    eax,0x1
c001d7f1:	eb cd                	jmp    c001d7c0 <SoundPort::buffer32(int*, int)+0x78>
c001d7f3:	90                   	nop

c001d7f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d7f4:	57                   	push   edi
c001d7f5:	56                   	push   esi
c001d7f6:	53                   	push   ebx
c001d7f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7fb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d7ff:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d805:	39 03                	cmp    DWORD PTR [ebx],eax
c001d807:	74 13                	je     c001d81c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d809:	83 ec 0c             	sub    esp,0xc
c001d80c:	68 a4 70 02 c0       	push   0xc00270a4
c001d811:	e8 df 77 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	8d 76 00             	lea    esi,[esi+0x0]
c001d81c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d822:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d825:	74 11                	je     c001d838 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d827:	83 ec 0c             	sub    esp,0xc
c001d82a:	68 6a 70 02 c0       	push   0xc002706a
c001d82f:	e8 c1 77 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d834:	83 c4 10             	add    esp,0x10
c001d837:	90                   	nop
c001d838:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d83e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d841:	74 11                	je     c001d854 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d843:	83 ec 0c             	sub    esp,0xc
c001d846:	68 6a 70 02 c0       	push   0xc002706a
c001d84b:	e8 a5 77 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d850:	83 c4 10             	add    esp,0x10
c001d853:	90                   	nop
c001d854:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d857:	89 c6                	mov    esi,eax
c001d859:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d85d:	7e 05                	jle    c001d864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d85f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d863:	90                   	nop
c001d864:	85 f6                	test   esi,esi
c001d866:	7e 30                	jle    c001d898 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d868:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d86c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d86f:	31 c9                	xor    ecx,ecx
c001d871:	01 d7                	add    edi,edx
c001d873:	90                   	nop
c001d874:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d877:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d87a:	85 c0                	test   eax,eax
c001d87c:	79 06                	jns    c001d884 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d87e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d883:	90                   	nop
c001d884:	c1 f8 0f             	sar    eax,0xf
c001d887:	83 c1 04             	add    ecx,0x4
c001d88a:	66 01 02             	add    WORD PTR [edx],ax
c001d88d:	83 c2 02             	add    edx,0x2
c001d890:	39 d7                	cmp    edi,edx
c001d892:	75 e0                	jne    c001d874 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d894:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d897:	90                   	nop
c001d898:	56                   	push   esi
c001d899:	89 c2                	mov    edx,eax
c001d89b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d8a2:	29 f2                	sub    edx,esi
c001d8a4:	52                   	push   edx
c001d8a5:	50                   	push   eax
c001d8a6:	68 c4 70 02 c0       	push   0xc00270c4
c001d8ab:	e8 8f f7 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d8b3:	50                   	push   eax
c001d8b4:	01 f8                	add    eax,edi
c001d8b6:	50                   	push   eax
c001d8b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8ba:	29 f0                	sub    eax,esi
c001d8bc:	c1 e0 02             	shl    eax,0x2
c001d8bf:	50                   	push   eax
c001d8c0:	68 f4 70 02 c0       	push   0xc00270f4
c001d8c5:	e8 75 f7 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001d8ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d8cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d8d0:	83 c4 1c             	add    esp,0x1c
c001d8d3:	01 d7                	add    edi,edx
c001d8d5:	29 f0                	sub    eax,esi
c001d8d7:	c1 e0 02             	shl    eax,0x2
c001d8da:	50                   	push   eax
c001d8db:	57                   	push   edi
c001d8dc:	52                   	push   edx
c001d8dd:	e8 d2 2c fe ff       	call   c00005b4 <memmove>
c001d8e2:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d8e5:	83 c4 10             	add    esp,0x10
c001d8e8:	89 f0                	mov    eax,esi
c001d8ea:	5b                   	pop    ebx
c001d8eb:	5e                   	pop    esi
c001d8ec:	5f                   	pop    edi
c001d8ed:	c3                   	ret    
c001d8ee:	66 90                	xchg   ax,ax

c001d8f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d8f0:	57                   	push   edi
c001d8f1:	56                   	push   esi
c001d8f2:	53                   	push   ebx
c001d8f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8f7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d8ff:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d905:	39 06                	cmp    DWORD PTR [esi],eax
c001d907:	74 13                	je     c001d91c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d909:	83 ec 0c             	sub    esp,0xc
c001d90c:	68 18 71 02 c0       	push   0xc0027118
c001d911:	e8 df 76 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d916:	83 c4 10             	add    esp,0x10
c001d919:	8d 76 00             	lea    esi,[esi+0x0]
c001d91c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d922:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d925:	74 11                	je     c001d938 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d927:	83 ec 0c             	sub    esp,0xc
c001d92a:	68 86 70 02 c0       	push   0xc0027086
c001d92f:	e8 c1 76 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d934:	83 c4 10             	add    esp,0x10
c001d937:	90                   	nop
c001d938:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d93e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d941:	74 11                	je     c001d954 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d943:	83 ec 0c             	sub    esp,0xc
c001d946:	68 86 70 02 c0       	push   0xc0027086
c001d94b:	e8 a5 76 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001d950:	83 c4 10             	add    esp,0x10
c001d953:	90                   	nop
c001d954:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d957:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d95b:	7e 07                	jle    c001d964 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d95d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d961:	8d 76 00             	lea    esi,[esi+0x0]
c001d964:	85 ff                	test   edi,edi
c001d966:	7e 1c                	jle    c001d984 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d968:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d96f:	31 c0                	xor    eax,eax
c001d971:	8d 76 00             	lea    esi,[esi+0x0]
c001d974:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d977:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d97a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d97d:	83 c0 04             	add    eax,0x4
c001d980:	39 c1                	cmp    ecx,eax
c001d982:	75 f0                	jne    c001d974 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d984:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d987:	50                   	push   eax
c001d988:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d98b:	29 f8                	sub    eax,edi
c001d98d:	c1 e0 02             	shl    eax,0x2
c001d990:	50                   	push   eax
c001d991:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d994:	50                   	push   eax
c001d995:	52                   	push   edx
c001d996:	e8 19 2c fe ff       	call   c00005b4 <memmove>
c001d99b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	89 f8                	mov    eax,edi
c001d9a3:	5b                   	pop    ebx
c001d9a4:	5e                   	pop    esi
c001d9a5:	5f                   	pop    edi
c001d9a6:	c3                   	ret    
c001d9a7:	90                   	nop

c001d9a8 <PCI::open(int, int, void*)>:
c001d9a8:	83 ec 18             	sub    esp,0x18
c001d9ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9b9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d9bb:	50                   	push   eax
c001d9bc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d9bf:	31 c0                	xor    eax,eax
c001d9c1:	83 c4 1c             	add    esp,0x1c
c001d9c4:	c3                   	ret    
c001d9c5:	90                   	nop

c001d9c6 <PCI::close(int, int, void*)>:
c001d9c6:	31 c0                	xor    eax,eax
c001d9c8:	c3                   	ret    
c001d9c9:	90                   	nop

c001d9ca <PCI::PCI()>:
c001d9ca:	83 ec 0c             	sub    esp,0xc
c001d9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d1:	83 ec 08             	sub    esp,0x8
c001d9d4:	68 37 71 02 c0       	push   0xc0027137
c001d9d9:	50                   	push   eax
c001d9da:	e8 39 04 ff ff       	call   c000de18 <Bus::Bus(char const*)>
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	ba 0c 73 02 c0       	mov    edx,0xc002730c
c001d9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9eb:	89 10                	mov    DWORD PTR [eax],edx
c001d9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9f1:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9ff:	a3 a0 a9 02 c0       	mov    ds:0xc002a9a0,eax
c001da04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da0e:	0f b6 d0             	movzx  edx,al
c001da11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da15:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001da1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da26:	0f b6 d0             	movzx  edx,al
c001da29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da2d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001da32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001da3c:	8d 50 01             	lea    edx,[eax+0x1]
c001da3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da43:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001da49:	0f b6 d0             	movzx  edx,al
c001da4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da50:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001da54:	83 c9 c0             	or     ecx,0xffffffc0
c001da57:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001da5b:	90                   	nop
c001da5c:	83 c4 0c             	add    esp,0xc
c001da5f:	c3                   	ret    

c001da60 <PCI::readBAR8(unsigned int, int)>:
c001da60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da68:	f6 c2 01             	test   dl,0x1
c001da6b:	74 07                	je     c001da74 <PCI::readBAR8(unsigned int, int)+0x14>
c001da6d:	83 e2 fc             	and    edx,0xfffffffc
c001da70:	01 c2                	add    edx,eax
c001da72:	ec                   	in     al,dx
c001da73:	c3                   	ret    
c001da74:	83 e2 f0             	and    edx,0xfffffff0
c001da77:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001da7a:	c3                   	ret    
c001da7b:	90                   	nop

c001da7c <PCI::readBAR16(unsigned int, int)>:
c001da7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da84:	f6 c2 01             	test   dl,0x1
c001da87:	74 08                	je     c001da91 <PCI::readBAR16(unsigned int, int)+0x15>
c001da89:	83 e2 fc             	and    edx,0xfffffffc
c001da8c:	01 c2                	add    edx,eax
c001da8e:	66 ed                	in     ax,dx
c001da90:	c3                   	ret    
c001da91:	83 e2 f0             	and    edx,0xfffffff0
c001da94:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001da98:	c3                   	ret    
c001da99:	90                   	nop

c001da9a <PCI::readBAR32(unsigned int, int)>:
c001da9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daa2:	f6 c2 01             	test   dl,0x1
c001daa5:	74 07                	je     c001daae <PCI::readBAR32(unsigned int, int)+0x14>
c001daa7:	83 e2 fc             	and    edx,0xfffffffc
c001daaa:	01 c2                	add    edx,eax
c001daac:	ed                   	in     eax,dx
c001daad:	c3                   	ret    
c001daae:	83 e2 f0             	and    edx,0xfffffff0
c001dab1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dab4:	c3                   	ret    
c001dab5:	90                   	nop

c001dab6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dab6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001daba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dabe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dac2:	f6 c2 01             	test   dl,0x1
c001dac5:	74 07                	je     c001dace <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dac7:	83 e2 fc             	and    edx,0xfffffffc
c001daca:	01 ca                	add    edx,ecx
c001dacc:	ee                   	out    dx,al
c001dacd:	c3                   	ret    
c001dace:	83 e2 f0             	and    edx,0xfffffff0
c001dad1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dad4:	c3                   	ret    
c001dad5:	90                   	nop

c001dad6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dada:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dade:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dae2:	f6 c2 01             	test   dl,0x1
c001dae5:	74 08                	je     c001daef <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dae7:	83 e2 fc             	and    edx,0xfffffffc
c001daea:	01 ca                	add    edx,ecx
c001daec:	66 ef                	out    dx,ax
c001daee:	c3                   	ret    
c001daef:	83 e2 f0             	and    edx,0xfffffff0
c001daf2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001daf6:	c3                   	ret    
c001daf7:	90                   	nop

c001daf8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001daf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dafc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db04:	f6 c2 01             	test   dl,0x1
c001db07:	74 07                	je     c001db10 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001db09:	83 e2 fc             	and    edx,0xfffffffc
c001db0c:	01 ca                	add    edx,ecx
c001db0e:	ef                   	out    dx,eax
c001db0f:	c3                   	ret    
c001db10:	83 e2 f0             	and    edx,0xfffffff0
c001db13:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001db16:	c3                   	ret    
c001db17:	90                   	nop

c001db18 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db18:	55                   	push   ebp
c001db19:	57                   	push   edi
c001db1a:	56                   	push   esi
c001db1b:	53                   	push   ebx
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001db23:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001db27:	89 f0                	mov    eax,esi
c001db29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001db2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001db31:	3c 07                	cmp    al,0x7
c001db33:	76 10                	jbe    c001db45 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001db35:	83 ec 0c             	sub    esp,0xc
c001db38:	68 3f 71 02 c0       	push   0xc002713f
c001db3d:	e8 b3 74 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001db42:	83 c4 10             	add    esp,0x10
c001db45:	80 fb 0f             	cmp    bl,0xf
c001db48:	76 10                	jbe    c001db5a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001db4a:	83 ec 0c             	sub    esp,0xc
c001db4d:	68 6f 71 02 c0       	push   0xc002716f
c001db52:	e8 9e 74 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001db57:	83 c4 10             	add    esp,0x10
c001db5a:	8d 04 36             	lea    eax,[esi+esi*1]
c001db5d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001db62:	83 c8 f0             	or     eax,0xfffffff0
c001db65:	ee                   	out    dx,al
c001db66:	ba fa 0c 00 00       	mov    edx,0xcfa
c001db6b:	89 e8                	mov    eax,ebp
c001db6d:	ee                   	out    dx,al
c001db6e:	83 c4 0c             	add    esp,0xc
c001db71:	89 d8                	mov    eax,ebx
c001db73:	66 81 e7 fc 00       	and    di,0xfc
c001db78:	5b                   	pop    ebx
c001db79:	c1 e0 08             	shl    eax,0x8
c001db7c:	5e                   	pop    esi
c001db7d:	09 f8                	or     eax,edi
c001db7f:	5f                   	pop    edi
c001db80:	66 0d 00 c0          	or     ax,0xc000
c001db84:	5d                   	pop    ebp
c001db85:	c3                   	ret    

c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001db86:	57                   	push   edi
c001db87:	56                   	push   esi
c001db88:	53                   	push   ebx
c001db89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db91:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001db97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dba3:	83 ff 01             	cmp    edi,0x1
c001dba6:	75 3e                	jne    c001dbe6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001dba8:	89 de                	mov    esi,ebx
c001dbaa:	0f b6 c0             	movzx  eax,al
c001dbad:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dbb3:	c1 e0 10             	shl    eax,0x10
c001dbb6:	0f b6 c9             	movzx  ecx,cl
c001dbb9:	09 f0                	or     eax,esi
c001dbbb:	c1 e1 08             	shl    ecx,0x8
c001dbbe:	0f b6 d2             	movzx  edx,dl
c001dbc1:	09 c8                	or     eax,ecx
c001dbc3:	c1 e2 0b             	shl    edx,0xb
c001dbc6:	09 d0                	or     eax,edx
c001dbc8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dbcd:	0d 00 00 00 80       	or     eax,0x80000000
c001dbd2:	ef                   	out    dx,eax
c001dbd3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dbd8:	ed                   	in     eax,dx
c001dbd9:	83 e3 02             	and    ebx,0x2
c001dbdc:	0f b6 cb             	movzx  ecx,bl
c001dbdf:	c1 e1 03             	shl    ecx,0x3
c001dbe2:	d3 e8                	shr    eax,cl
c001dbe4:	eb 43                	jmp    c001dc29 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dbe6:	83 ff 02             	cmp    edi,0x2
c001dbe9:	75 2c                	jne    c001dc17 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001dbeb:	83 ec 0c             	sub    esp,0xc
c001dbee:	0f b6 c9             	movzx  ecx,cl
c001dbf1:	0f b6 d2             	movzx  edx,dl
c001dbf4:	0f b6 fb             	movzx  edi,bl
c001dbf7:	0f b6 c0             	movzx  eax,al
c001dbfa:	57                   	push   edi
c001dbfb:	51                   	push   ecx
c001dbfc:	52                   	push   edx
c001dbfd:	50                   	push   eax
c001dbfe:	56                   	push   esi
c001dbff:	e8 14 ff ff ff       	call   c001db18 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc04:	89 c2                	mov    edx,eax
c001dc06:	ed                   	in     eax,dx
c001dc07:	83 e3 02             	and    ebx,0x2
c001dc0a:	83 c4 20             	add    esp,0x20
c001dc0d:	0f b6 cb             	movzx  ecx,bl
c001dc10:	c1 e1 03             	shl    ecx,0x3
c001dc13:	d3 e8                	shr    eax,cl
c001dc15:	eb 12                	jmp    c001dc29 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001dc17:	83 ec 0c             	sub    esp,0xc
c001dc1a:	68 9f 71 02 c0       	push   0xc002719f
c001dc1f:	e8 d1 73 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001dc24:	83 c4 10             	add    esp,0x10
c001dc27:	31 c0                	xor    eax,eax
c001dc29:	5b                   	pop    ebx
c001dc2a:	5e                   	pop    esi
c001dc2b:	5f                   	pop    edi
c001dc2c:	c3                   	ret    
c001dc2d:	90                   	nop

c001dc2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dc2e:	83 ec 18             	sub    esp,0x18
c001dc31:	6a 00                	push   0x0
c001dc33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc38:	50                   	push   eax
c001dc39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc3e:	50                   	push   eax
c001dc3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc44:	50                   	push   eax
c001dc45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc49:	e8 38 ff ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc4e:	83 c4 2c             	add    esp,0x2c
c001dc51:	c3                   	ret    

c001dc52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dc52:	83 ec 18             	sub    esp,0x18
c001dc55:	6a 0e                	push   0xe
c001dc57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc5c:	50                   	push   eax
c001dc5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc62:	50                   	push   eax
c001dc63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dc68:	50                   	push   eax
c001dc69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc6d:	e8 14 ff ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc72:	83 c4 2c             	add    esp,0x2c
c001dc75:	0f b6 c0             	movzx  eax,al
c001dc78:	c3                   	ret    
c001dc79:	90                   	nop

c001dc7a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dc7a:	55                   	push   ebp
c001dc7b:	57                   	push   edi
c001dc7c:	56                   	push   esi
c001dc7d:	53                   	push   ebx
c001dc7e:	83 ec 18             	sub    esp,0x18
c001dc81:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001dc86:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001dc8b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001dc90:	6a 0a                	push   0xa
c001dc92:	56                   	push   esi
c001dc93:	55                   	push   ebp
c001dc94:	57                   	push   edi
c001dc95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc99:	e8 e8 fe ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc9e:	83 c4 14             	add    esp,0x14
c001dca1:	89 c3                	mov    ebx,eax
c001dca3:	6a 0a                	push   0xa
c001dca5:	0f b6 db             	movzx  ebx,bl
c001dca8:	56                   	push   esi
c001dca9:	55                   	push   ebp
c001dcaa:	57                   	push   edi
c001dcab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcaf:	e8 d2 fe ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dcb4:	83 c4 2c             	add    esp,0x2c
c001dcb7:	25 00 ff 00 00       	and    eax,0xff00
c001dcbc:	09 d8                	or     eax,ebx
c001dcbe:	5b                   	pop    ebx
c001dcbf:	5e                   	pop    esi
c001dcc0:	5f                   	pop    edi
c001dcc1:	5d                   	pop    ebp
c001dcc2:	c3                   	ret    
c001dcc3:	90                   	nop

c001dcc4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001dcc4:	83 ec 18             	sub    esp,0x18
c001dcc7:	6a 08                	push   0x8
c001dcc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcce:	50                   	push   eax
c001dccf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcd4:	50                   	push   eax
c001dcd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcda:	50                   	push   eax
c001dcdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcdf:	e8 a2 fe ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dce4:	83 c4 2c             	add    esp,0x2c
c001dce7:	0f b6 c4             	movzx  eax,ah
c001dcea:	c3                   	ret    
c001dceb:	90                   	nop

c001dcec <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001dcec:	83 ec 18             	sub    esp,0x18
c001dcef:	6a 08                	push   0x8
c001dcf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcf6:	50                   	push   eax
c001dcf7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dcfc:	50                   	push   eax
c001dcfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd02:	50                   	push   eax
c001dd03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd07:	e8 7a fe ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd0c:	83 c4 2c             	add    esp,0x2c
c001dd0f:	c3                   	ret    

c001dd10 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001dd10:	83 ec 18             	sub    esp,0x18
c001dd13:	6a 3c                	push   0x3c
c001dd15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd1a:	50                   	push   eax
c001dd1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd20:	50                   	push   eax
c001dd21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd26:	50                   	push   eax
c001dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd2b:	e8 56 fe ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd30:	83 c4 2c             	add    esp,0x2c
c001dd33:	c3                   	ret    

c001dd34 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dd34:	83 ec 18             	sub    esp,0x18
c001dd37:	6a 18                	push   0x18
c001dd39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd3e:	50                   	push   eax
c001dd3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd44:	50                   	push   eax
c001dd45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd4a:	50                   	push   eax
c001dd4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd4f:	e8 32 fe ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd54:	83 c4 2c             	add    esp,0x2c
c001dd57:	0f b6 c4             	movzx  eax,ah
c001dd5a:	c3                   	ret    
c001dd5b:	90                   	nop

c001dd5c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd5c:	55                   	push   ebp
c001dd5d:	57                   	push   edi
c001dd5e:	56                   	push   esi
c001dd5f:	53                   	push   ebx
c001dd60:	83 ec 28             	sub    esp,0x28
c001dd63:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dd67:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dd6c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dd71:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dd76:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dd7d:	8d 43 12             	lea    eax,[ebx+0x12]
c001dd80:	83 c3 10             	add    ebx,0x10
c001dd83:	0f b6 c0             	movzx  eax,al
c001dd86:	0f b6 db             	movzx  ebx,bl
c001dd89:	50                   	push   eax
c001dd8a:	51                   	push   ecx
c001dd8b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001dd8f:	57                   	push   edi
c001dd90:	55                   	push   ebp
c001dd91:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dd95:	e8 ec fd ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd9a:	83 c4 14             	add    esp,0x14
c001dd9d:	89 c6                	mov    esi,eax
c001dd9f:	53                   	push   ebx
c001dda0:	c1 e6 10             	shl    esi,0x10
c001dda3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dda7:	51                   	push   ecx
c001dda8:	57                   	push   edi
c001dda9:	55                   	push   ebp
c001ddaa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ddae:	e8 d3 fd ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddb3:	83 c4 3c             	add    esp,0x3c
c001ddb6:	0f b7 c0             	movzx  eax,ax
c001ddb9:	5b                   	pop    ebx
c001ddba:	09 f0                	or     eax,esi
c001ddbc:	5e                   	pop    esi
c001ddbd:	5f                   	pop    edi
c001ddbe:	5d                   	pop    ebp
c001ddbf:	c3                   	ret    

c001ddc0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ddc0:	55                   	push   ebp
c001ddc1:	57                   	push   edi
c001ddc2:	56                   	push   esi
c001ddc3:	53                   	push   ebx
c001ddc4:	83 ec 0c             	sub    esp,0xc
c001ddc7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ddcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ddcf:	89 f5                	mov    ebp,esi
c001ddd1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001ddd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dddb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dddf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dde3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dde7:	83 f9 01             	cmp    ecx,0x1
c001ddea:	75 5d                	jne    c001de49 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ddec:	0f b6 c8             	movzx  ecx,al
c001ddef:	0f b6 d2             	movzx  edx,dl
c001ddf2:	c1 e1 10             	shl    ecx,0x10
c001ddf5:	c1 e2 0b             	shl    edx,0xb
c001ddf8:	89 f0                	mov    eax,esi
c001ddfa:	25 fc 00 00 00       	and    eax,0xfc
c001ddff:	09 c1                	or     ecx,eax
c001de01:	89 e8                	mov    eax,ebp
c001de03:	0f b6 c0             	movzx  eax,al
c001de06:	c1 e0 08             	shl    eax,0x8
c001de09:	09 c1                	or     ecx,eax
c001de0b:	09 d1                	or     ecx,edx
c001de0d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de12:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001de18:	89 c8                	mov    eax,ecx
c001de1a:	ef                   	out    dx,eax
c001de1b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de20:	ed                   	in     eax,dx
c001de21:	0f b7 db             	movzx  ebx,bx
c001de24:	83 e6 02             	and    esi,0x2
c001de27:	74 0a                	je     c001de33 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001de29:	0f b7 d0             	movzx  edx,ax
c001de2c:	c1 e3 10             	shl    ebx,0x10
c001de2f:	09 d3                	or     ebx,edx
c001de31:	eb 05                	jmp    c001de38 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001de33:	66 31 c0             	xor    ax,ax
c001de36:	09 c3                	or     ebx,eax
c001de38:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de3d:	89 c8                	mov    eax,ecx
c001de3f:	ef                   	out    dx,eax
c001de40:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de45:	89 d8                	mov    eax,ebx
c001de47:	eb 41                	jmp    c001de8a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de49:	83 f9 02             	cmp    ecx,0x2
c001de4c:	75 45                	jne    c001de93 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001de4e:	83 ec 0c             	sub    esp,0xc
c001de51:	0f b6 d2             	movzx  edx,dl
c001de54:	89 f1                	mov    ecx,esi
c001de56:	0f b6 c0             	movzx  eax,al
c001de59:	0f b6 f1             	movzx  esi,cl
c001de5c:	89 e9                	mov    ecx,ebp
c001de5e:	56                   	push   esi
c001de5f:	0f b6 c9             	movzx  ecx,cl
c001de62:	51                   	push   ecx
c001de63:	52                   	push   edx
c001de64:	50                   	push   eax
c001de65:	57                   	push   edi
c001de66:	e8 ad fc ff ff       	call   c001db18 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de6b:	89 c2                	mov    edx,eax
c001de6d:	ed                   	in     eax,dx
c001de6e:	83 c4 20             	add    esp,0x20
c001de71:	0f b7 db             	movzx  ebx,bx
c001de74:	f6 c2 02             	test   dl,0x2
c001de77:	74 0c                	je     c001de85 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001de79:	0f b7 c8             	movzx  ecx,ax
c001de7c:	89 d8                	mov    eax,ebx
c001de7e:	c1 e0 10             	shl    eax,0x10
c001de81:	09 c8                	or     eax,ecx
c001de83:	eb 05                	jmp    c001de8a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001de85:	66 31 c0             	xor    ax,ax
c001de88:	09 d8                	or     eax,ebx
c001de8a:	ef                   	out    dx,eax
c001de8b:	83 c4 0c             	add    esp,0xc
c001de8e:	5b                   	pop    ebx
c001de8f:	5e                   	pop    esi
c001de90:	5f                   	pop    edi
c001de91:	5d                   	pop    ebp
c001de92:	c3                   	ret    
c001de93:	c7 44 24 20 9f 71 02 c0 	mov    DWORD PTR [esp+0x20],0xc002719f
c001de9b:	83 c4 0c             	add    esp,0xc
c001de9e:	5b                   	pop    ebx
c001de9f:	5e                   	pop    esi
c001dea0:	5f                   	pop    edi
c001dea1:	5d                   	pop    ebp
c001dea2:	e9 4e 71 ff ff       	jmp    c0014ff5 <Krnl::panic(char const*)>
c001dea7:	90                   	nop

c001dea8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001dea8:	55                   	push   ebp
c001dea9:	57                   	push   edi
c001deaa:	56                   	push   esi
c001deab:	53                   	push   ebx
c001deac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001deb2:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001deb9:	75 0f                	jne    c001deca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001debb:	80 3d ac a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a9ac,0x0
c001dec2:	0f 85 fa 00 00 00    	jne    c001dfc2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001dec8:	eb 2f                	jmp    c001def9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001deca:	83 ec 0c             	sub    esp,0xc
c001decd:	68 a5 71 02 c0       	push   0xc00271a5
c001ded2:	e8 d6 be fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001ded7:	83 c4 10             	add    esp,0x10
c001deda:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001dee1:	75 d8                	jne    c001debb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001dee3:	e4 60                	in     al,0x60
c001dee5:	3c 1c                	cmp    al,0x1c
c001dee7:	74 04                	je     c001deed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001dee9:	3c 5a                	cmp    al,0x5a
c001deeb:	75 f6                	jne    c001dee3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001deed:	e4 60                	in     al,0x60
c001deef:	3c 5a                	cmp    al,0x5a
c001def1:	74 fa                	je     c001deed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001def3:	3c 1c                	cmp    al,0x1c
c001def5:	74 f6                	je     c001deed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001def7:	eb c2                	jmp    c001debb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001def9:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001df00:	0f 85 86 00 00 00    	jne    c001df8c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001df06:	83 ec 0c             	sub    esp,0xc
c001df09:	68 14 01 00 00       	push   0x114
c001df0e:	e8 40 be fe ff       	call   c0009d53 <malloc>
c001df13:	83 c4 0c             	add    esp,0xc
c001df16:	89 c3                	mov    ebx,eax
c001df18:	ff 35 b0 9f 02 c0    	push   DWORD PTR ds:0xc0029fb0
c001df1e:	68 bf 71 02 c0       	push   0xc00271bf
c001df23:	50                   	push   eax
c001df24:	e8 81 f6 fe ff       	call   c000d5aa <File::File(char const*, Process*)>
c001df29:	5a                   	pop    edx
c001df2a:	59                   	pop    ecx
c001df2b:	6a 01                	push   0x1
c001df2d:	53                   	push   ebx
c001df2e:	e8 51 f7 fe ff       	call   c000d684 <File::open(FileOpenMode)>
c001df33:	83 c4 0c             	add    esp,0xc
c001df36:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001df3a:	50                   	push   eax
c001df3b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001df3f:	50                   	push   eax
c001df40:	53                   	push   ebx
c001df41:	e8 ea f9 fe ff       	call   c000d930 <File::stat(unsigned long long*, bool*)>
c001df46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df4a:	40                   	inc    eax
c001df4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001df4e:	e8 00 be fe ff       	call   c0009d53 <malloc>
c001df53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001df57:	a3 a8 a9 02 c0       	mov    ds:0xc002a9a8,eax
c001df5c:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001df60:	5e                   	pop    esi
c001df61:	8b 13                	mov    edx,DWORD PTR [ebx]
c001df63:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001df67:	51                   	push   ecx
c001df68:	50                   	push   eax
c001df69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001df6d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001df71:	53                   	push   ebx
c001df72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001df75:	83 c4 14             	add    esp,0x14
c001df78:	53                   	push   ebx
c001df79:	e8 64 f7 fe ff       	call   c000d6e2 <File::close()>
c001df7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df82:	83 c4 10             	add    esp,0x10
c001df85:	a3 a4 a9 02 c0       	mov    ds:0xc002a9a4,eax
c001df8a:	eb 36                	jmp    c001dfc2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001df8c:	83 ec 0c             	sub    esp,0xc
c001df8f:	68 d8 71 02 c0       	push   0xc00271d8
c001df94:	e8 14 be fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001df99:	83 c4 10             	add    esp,0x10
c001df9c:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001dfa3:	0f 85 5d ff ff ff    	jne    c001df06 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dfa9:	e4 60                	in     al,0x60
c001dfab:	3c 1c                	cmp    al,0x1c
c001dfad:	74 04                	je     c001dfb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfaf:	3c 5a                	cmp    al,0x5a
c001dfb1:	75 f6                	jne    c001dfa9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001dfb3:	e4 60                	in     al,0x60
c001dfb5:	3c 5a                	cmp    al,0x5a
c001dfb7:	74 fa                	je     c001dfb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfb9:	3c 1c                	cmp    al,0x1c
c001dfbb:	74 f6                	je     c001dfb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001dfbd:	e9 44 ff ff ff       	jmp    c001df06 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001dfc2:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001dfc9:	75 0b                	jne    c001dfd6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001dfcb:	31 f6                	xor    esi,esi
c001dfcd:	31 db                	xor    ebx,ebx
c001dfcf:	31 ed                	xor    ebp,ebp
c001dfd1:	e9 a3 01 00 00       	jmp    c001e179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dfd6:	83 ec 0c             	sub    esp,0xc
c001dfd9:	68 ea 71 02 c0       	push   0xc00271ea
c001dfde:	e8 ca bd fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001dfe3:	8b 15 80 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a80
c001dfe9:	83 c4 10             	add    esp,0x10
c001dfec:	f6 c2 80             	test   dl,0x80
c001dfef:	74 0c                	je     c001dffd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001dff1:	0f ba e2 0b          	bt     edx,0xb
c001dff5:	72 1a                	jb     c001e011 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001dff7:	eb d2                	jmp    c001dfcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001dff9:	3c 5a                	cmp    al,0x5a
c001dffb:	74 0c                	je     c001e009 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001dffd:	e4 60                	in     al,0x60
c001dfff:	3c 1c                	cmp    al,0x1c
c001e001:	75 f6                	jne    c001dff9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e003:	eb 04                	jmp    c001e009 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e005:	3c 1c                	cmp    al,0x1c
c001e007:	75 e8                	jne    c001dff1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e009:	e4 60                	in     al,0x60
c001e00b:	3c 5a                	cmp    al,0x5a
c001e00d:	74 fa                	je     c001e009 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e00f:	eb f4                	jmp    c001e005 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e011:	83 ec 0c             	sub    esp,0xc
c001e014:	68 ef 71 02 c0       	push   0xc00271ef
c001e019:	e8 8f bd fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e01e:	83 c4 10             	add    esp,0x10
c001e021:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e028:	75 a1                	jne    c001dfcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e02a:	e4 60                	in     al,0x60
c001e02c:	3c 5a                	cmp    al,0x5a
c001e02e:	74 04                	je     c001e034 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e030:	3c 1c                	cmp    al,0x1c
c001e032:	75 f6                	jne    c001e02a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e034:	e4 60                	in     al,0x60
c001e036:	3c 5a                	cmp    al,0x5a
c001e038:	74 fa                	je     c001e034 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e03a:	3c 1c                	cmp    al,0x1c
c001e03c:	74 f6                	je     c001e034 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e03e:	eb 8b                	jmp    c001dfcb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e040:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e047:	0f 85 3d 01 00 00    	jne    c001e18a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e04d:	a1 a8 a9 02 c0       	mov    eax,ds:0xc002a9a8
c001e052:	8d 7e 01             	lea    edi,[esi+0x1]
c001e055:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e058:	d4 40                	aam    0x40
c001e05a:	d5 39                	aad    0x39
c001e05c:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e063:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e067:	0f 85 53 01 00 00    	jne    c001e1c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e06d:	8b 15 a8 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9a8
c001e073:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e076:	d4 40                	aam    0x40
c001e078:	d5 39                	aad    0x39
c001e07a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e07e:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e082:	d4 40                	aam    0x40
c001e084:	d5 39                	aad    0x39
c001e086:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e08a:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e08e:	d4 40                	aam    0x40
c001e090:	d5 39                	aad    0x39
c001e092:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e096:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e09a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e09e:	3c 56                	cmp    al,0x56
c001e0a0:	74 49                	je     c001e0eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e0a2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e0a6:	d4 40                	aam    0x40
c001e0a8:	d5 39                	aad    0x39
c001e0aa:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e0ad:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e0b1:	0f b6 c9             	movzx  ecx,cl
c001e0b4:	c1 e1 04             	shl    ecx,0x4
c001e0b7:	d4 40                	aam    0x40
c001e0b9:	d5 39                	aad    0x39
c001e0bb:	83 e8 30             	sub    eax,0x30
c001e0be:	0f b6 c0             	movzx  eax,al
c001e0c1:	09 c1                	or     ecx,eax
c001e0c3:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e0c7:	c1 e1 04             	shl    ecx,0x4
c001e0ca:	d4 40                	aam    0x40
c001e0cc:	d5 39                	aad    0x39
c001e0ce:	83 e8 30             	sub    eax,0x30
c001e0d1:	0f b6 c0             	movzx  eax,al
c001e0d4:	09 c1                	or     ecx,eax
c001e0d6:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e0da:	c1 e1 04             	shl    ecx,0x4
c001e0dd:	d4 40                	aam    0x40
c001e0df:	d5 39                	aad    0x39
c001e0e1:	83 e8 30             	sub    eax,0x30
c001e0e4:	0f b6 c0             	movzx  eax,al
c001e0e7:	09 c8                	or     eax,ecx
c001e0e9:	89 c5                	mov    ebp,eax
c001e0eb:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e0ef:	80 f9 44             	cmp    cl,0x44
c001e0f2:	74 47                	je     c001e13b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e0f4:	88 c8                	mov    al,cl
c001e0f6:	d4 40                	aam    0x40
c001e0f8:	d5 39                	aad    0x39
c001e0fa:	83 e8 30             	sub    eax,0x30
c001e0fd:	0f b6 f8             	movzx  edi,al
c001e100:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e104:	c1 e7 04             	shl    edi,0x4
c001e107:	d4 40                	aam    0x40
c001e109:	d5 39                	aad    0x39
c001e10b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e10e:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e112:	0f b6 db             	movzx  ebx,bl
c001e115:	09 fb                	or     ebx,edi
c001e117:	c1 e3 04             	shl    ebx,0x4
c001e11a:	d4 40                	aam    0x40
c001e11c:	d5 39                	aad    0x39
c001e11e:	83 e8 30             	sub    eax,0x30
c001e121:	0f b6 f8             	movzx  edi,al
c001e124:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e128:	09 fb                	or     ebx,edi
c001e12a:	89 df                	mov    edi,ebx
c001e12c:	c1 e7 04             	shl    edi,0x4
c001e12f:	d4 40                	aam    0x40
c001e131:	d5 39                	aad    0x39
c001e133:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e136:	0f b6 db             	movzx  ebx,bl
c001e139:	09 fb                	or     ebx,edi
c001e13b:	a1 a4 a9 02 c0       	mov    eax,ds:0xc002a9a4
c001e140:	83 c6 10             	add    esi,0x10
c001e143:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e147:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e14b:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e14e:	3c 0a                	cmp    al,0xa
c001e150:	0f 85 a0 00 00 00    	jne    c001e1f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e156:	3c 0a                	cmp    al,0xa
c001e158:	0f 94 c0             	sete   al
c001e15b:	0f b6 c0             	movzx  eax,al
c001e15e:	01 c6                	add    esi,eax
c001e160:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e165:	0f 84 a2 00 00 00    	je     c001e20d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e16b:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e173:	0f 84 94 00 00 00    	je     c001e20d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e179:	39 35 a4 a9 02 c0    	cmp    DWORD PTR ds:0xc002a9a4,esi
c001e17f:	0f 8f bb fe ff ff    	jg     c001e040 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e185:	e9 e8 00 00 00       	jmp    c001e272 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	68 f6 71 02 c0       	push   0xc00271f6
c001e192:	e8 16 bc fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e197:	83 c4 10             	add    esp,0x10
c001e19a:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e1a1:	0f 85 a6 fe ff ff    	jne    c001e04d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e1a7:	e4 60                	in     al,0x60
c001e1a9:	3c 5a                	cmp    al,0x5a
c001e1ab:	74 04                	je     c001e1b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1ad:	3c 1c                	cmp    al,0x1c
c001e1af:	75 f6                	jne    c001e1a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e1b1:	e4 60                	in     al,0x60
c001e1b3:	3c 5a                	cmp    al,0x5a
c001e1b5:	74 fa                	je     c001e1b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1b7:	3c 1c                	cmp    al,0x1c
c001e1b9:	74 f6                	je     c001e1b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e1bb:	e9 8d fe ff ff       	jmp    c001e04d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	68 fe 71 02 c0       	push   0xc00271fe
c001e1c8:	e8 e0 bb fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e1cd:	83 c4 10             	add    esp,0x10
c001e1d0:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e1d7:	0f 85 90 fe ff ff    	jne    c001e06d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e1dd:	e4 60                	in     al,0x60
c001e1df:	3c 5a                	cmp    al,0x5a
c001e1e1:	74 04                	je     c001e1e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e1e3:	3c 1c                	cmp    al,0x1c
c001e1e5:	75 f6                	jne    c001e1dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e1e7:	e4 60                	in     al,0x60
c001e1e9:	3c 5a                	cmp    al,0x5a
c001e1eb:	74 fa                	je     c001e1e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e1ed:	3c 1c                	cmp    al,0x1c
c001e1ef:	74 f6                	je     c001e1e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e1f1:	e9 77 fe ff ff       	jmp    c001e06d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e1f6:	47                   	inc    edi
c001e1f7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e1fb:	0f 84 55 ff ff ff    	je     c001e156 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e201:	46                   	inc    esi
c001e202:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e205:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e208:	e9 3e ff ff ff       	jmp    c001e14b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e20d:	80 f9 44             	cmp    cl,0x44
c001e210:	74 0e                	je     c001e220 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e212:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e21a:	0f 85 59 ff ff ff    	jne    c001e179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e220:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e224:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e228:	c1 e0 04             	shl    eax,0x4
c001e22b:	83 ea 30             	sub    edx,0x30
c001e22e:	09 d0                	or     eax,edx
c001e230:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e237:	0f 85 3c ff ff ff    	jne    c001e179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e23d:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e241:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e245:	c1 e2 04             	shl    edx,0x4
c001e248:	83 e8 30             	sub    eax,0x30
c001e24b:	09 d0                	or     eax,edx
c001e24d:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e254:	0f 85 1f ff ff ff    	jne    c001e179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e25a:	50                   	push   eax
c001e25b:	50                   	push   eax
c001e25c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e260:	50                   	push   eax
c001e261:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e268:	e8 cb 24 fe ff       	call   c0000738 <strcpy>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	eb 15                	jmp    c001e287 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e272:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e279:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e284:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e287:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e28e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e294:	5b                   	pop    ebx
c001e295:	5e                   	pop    esi
c001e296:	5f                   	pop    edi
c001e297:	5d                   	pop    ebp
c001e298:	c3                   	ret    
c001e299:	90                   	nop

c001e29a <PCI::checkBus(unsigned char)>:
c001e29a:	56                   	push   esi
c001e29b:	53                   	push   ebx
c001e29c:	31 db                	xor    ebx,ebx
c001e29e:	51                   	push   ecx
c001e29f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e2a4:	52                   	push   edx
c001e2a5:	53                   	push   ebx
c001e2a6:	43                   	inc    ebx
c001e2a7:	56                   	push   esi
c001e2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2ac:	e8 bf 07 00 00       	call   c001ea70 <PCI::checkDevice(unsigned char, unsigned char)>
c001e2b1:	83 c4 10             	add    esp,0x10
c001e2b4:	83 fb 20             	cmp    ebx,0x20
c001e2b7:	75 eb                	jne    c001e2a4 <PCI::checkBus(unsigned char)+0xa>
c001e2b9:	58                   	pop    eax
c001e2ba:	5b                   	pop    ebx
c001e2bb:	5e                   	pop    esi
c001e2bc:	c3                   	ret    
c001e2bd:	90                   	nop

c001e2be <PCI::foundDevice(PCIDeviceInfo)>:
c001e2be:	55                   	push   ebp
c001e2bf:	57                   	push   edi
c001e2c0:	56                   	push   esi
c001e2c1:	53                   	push   ebx
c001e2c2:	83 ec 1c             	sub    esp,0x1c
c001e2c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e2c9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e2cf:	0f 84 20 04 00 00    	je     c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e2d5:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e2dc:	75 37                	jne    c001e315 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e2de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e2e2:	66 81 f9 06 04       	cmp    cx,0x406
c001e2e7:	75 5b                	jne    c001e344 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e2e9:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e2ee:	50                   	push   eax
c001e2ef:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e2f4:	50                   	push   eax
c001e2f5:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e2fa:	50                   	push   eax
c001e2fb:	53                   	push   ebx
c001e2fc:	e8 33 fa ff ff       	call   c001dd34 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e301:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e305:	0f b6 c0             	movzx  eax,al
c001e308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e30c:	83 c4 2c             	add    esp,0x2c
c001e30f:	5b                   	pop    ebx
c001e310:	5e                   	pop    esi
c001e311:	5f                   	pop    edi
c001e312:	5d                   	pop    ebp
c001e313:	eb 85                	jmp    c001e29a <PCI::checkBus(unsigned char)>
c001e315:	83 ec 0c             	sub    esp,0xc
c001e318:	68 07 72 02 c0       	push   0xc0027207
c001e31d:	e8 8b ba fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e322:	83 c4 10             	add    esp,0x10
c001e325:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e32c:	75 b0                	jne    c001e2de <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e32e:	e4 60                	in     al,0x60
c001e330:	3c 5a                	cmp    al,0x5a
c001e332:	74 04                	je     c001e338 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e334:	3c 1c                	cmp    al,0x1c
c001e336:	75 f6                	jne    c001e32e <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e338:	e4 60                	in     al,0x60
c001e33a:	3c 5a                	cmp    al,0x5a
c001e33c:	74 fa                	je     c001e338 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e33e:	3c 1c                	cmp    al,0x1c
c001e340:	74 f6                	je     c001e338 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e342:	eb 9a                	jmp    c001e2de <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e344:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e34a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e34e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e352:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e356:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e35a:	88 d0                	mov    al,dl
c001e35c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e361:	74 3b                	je     c001e39e <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e363:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e367:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e36a:	85 d2                	test   edx,edx
c001e36c:	74 24                	je     c001e392 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e36e:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e374:	31 ef                	xor    edi,ebp
c001e376:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e37c:	75 14                	jne    c001e392 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e37e:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e384:	75 0c                	jne    c001e392 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e386:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e38c:	0f 84 63 03 00 00    	je     c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e392:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e396:	8b 12                	mov    edx,DWORD PTR [edx]
c001e398:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e39c:	eb be                	jmp    c001e35c <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e39e:	66 81 f9 01 06       	cmp    cx,0x601
c001e3a3:	0f 85 81 01 00 00    	jne    c001e52a <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e3a9:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e3b0:	75 25                	jne    c001e3d7 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e3b2:	83 ec 0c             	sub    esp,0xc
c001e3b5:	68 64 01 00 00       	push   0x164
c001e3ba:	e8 94 b9 fe ff       	call   c0009d53 <malloc>
c001e3bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3c2:	89 c5                	mov    ebp,eax
c001e3c4:	e8 b7 12 00 00       	call   c001f680 <SATABus::SATABus()>
c001e3c9:	83 c4 10             	add    esp,0x10
c001e3cc:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e3d3:	74 4a                	je     c001e41f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e3d5:	eb 2f                	jmp    c001e406 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e3d7:	83 ec 0c             	sub    esp,0xc
c001e3da:	68 17 72 02 c0       	push   0xc0027217
c001e3df:	e8 c9 b9 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e3ee:	75 c2                	jne    c001e3b2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e3f0:	e4 60                	in     al,0x60
c001e3f2:	3c 1c                	cmp    al,0x1c
c001e3f4:	74 04                	je     c001e3fa <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e3f6:	3c 5a                	cmp    al,0x5a
c001e3f8:	75 f6                	jne    c001e3f0 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e3fa:	e4 60                	in     al,0x60
c001e3fc:	3c 5a                	cmp    al,0x5a
c001e3fe:	74 fa                	je     c001e3fa <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e400:	3c 1c                	cmp    al,0x1c
c001e402:	74 f6                	je     c001e3fa <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e404:	eb ac                	jmp    c001e3b2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	68 1d 72 02 c0       	push   0xc002721d
c001e40e:	e8 9a b9 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e41d:	74 1b                	je     c001e43a <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e41f:	50                   	push   eax
c001e420:	50                   	push   eax
c001e421:	55                   	push   ebp
c001e422:	53                   	push   ebx
c001e423:	e8 8a 01 ff ff       	call   c000e5b2 <Device::addChild(Device*)>
c001e428:	83 c4 10             	add    esp,0x10
c001e42b:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e432:	74 33                	je     c001e467 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e434:	eb 18                	jmp    c001e44e <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e436:	3c 1c                	cmp    al,0x1c
c001e438:	74 0c                	je     c001e446 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e43a:	e4 60                	in     al,0x60
c001e43c:	3c 5a                	cmp    al,0x5a
c001e43e:	75 f6                	jne    c001e436 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e440:	eb 04                	jmp    c001e446 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e442:	3c 1c                	cmp    al,0x1c
c001e444:	75 d9                	jne    c001e41f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e446:	e4 60                	in     al,0x60
c001e448:	3c 5a                	cmp    al,0x5a
c001e44a:	74 fa                	je     c001e446 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e44c:	eb f4                	jmp    c001e442 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e44e:	83 ec 0c             	sub    esp,0xc
c001e451:	68 25 72 02 c0       	push   0xc0027225
c001e456:	e8 52 b9 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e45b:	83 c4 10             	add    esp,0x10
c001e45e:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e465:	74 29                	je     c001e490 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e467:	83 ec 2c             	sub    esp,0x2c
c001e46a:	b9 09 00 00 00       	mov    ecx,0x9
c001e46f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e473:	fc                   	cld    
c001e474:	89 e7                	mov    edi,esp
c001e476:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e478:	55                   	push   ebp
c001e479:	e8 46 00 ff ff       	call   c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e47e:	83 c4 30             	add    esp,0x30
c001e481:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e488:	74 33                	je     c001e4bd <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e48a:	eb 18                	jmp    c001e4a4 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e48c:	3c 1c                	cmp    al,0x1c
c001e48e:	74 0c                	je     c001e49c <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e490:	e4 60                	in     al,0x60
c001e492:	3c 5a                	cmp    al,0x5a
c001e494:	75 f6                	jne    c001e48c <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e496:	eb 04                	jmp    c001e49c <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e498:	3c 1c                	cmp    al,0x1c
c001e49a:	75 cb                	jne    c001e467 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e49c:	e4 60                	in     al,0x60
c001e49e:	3c 5a                	cmp    al,0x5a
c001e4a0:	74 fa                	je     c001e49c <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e4a2:	eb f4                	jmp    c001e498 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e4a4:	83 ec 0c             	sub    esp,0xc
c001e4a7:	68 2d 72 02 c0       	push   0xc002722d
c001e4ac:	e8 fc b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e4bb:	74 23                	je     c001e4e0 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e4bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e4c0:	6a 00                	push   0x0
c001e4c2:	6a 00                	push   0x0
c001e4c4:	6a 00                	push   0x0
c001e4c6:	55                   	push   ebp
c001e4c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4ca:	83 c4 10             	add    esp,0x10
c001e4cd:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e4d4:	0f 84 1b 02 00 00    	je     c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e4da:	eb 18                	jmp    c001e4f4 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e4dc:	3c 1c                	cmp    al,0x1c
c001e4de:	74 0c                	je     c001e4ec <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e4e0:	e4 60                	in     al,0x60
c001e4e2:	3c 5a                	cmp    al,0x5a
c001e4e4:	75 f6                	jne    c001e4dc <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e4e6:	eb 04                	jmp    c001e4ec <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e4e8:	3c 1c                	cmp    al,0x1c
c001e4ea:	75 d1                	jne    c001e4bd <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e4ec:	e4 60                	in     al,0x60
c001e4ee:	3c 5a                	cmp    al,0x5a
c001e4f0:	74 fa                	je     c001e4ec <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e4f2:	eb f4                	jmp    c001e4e8 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e4f4:	83 ec 0c             	sub    esp,0xc
c001e4f7:	68 35 72 02 c0       	push   0xc0027235
c001e4fc:	e8 ac b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e501:	83 c4 10             	add    esp,0x10
c001e504:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e50b:	0f 85 e4 01 00 00    	jne    c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e511:	e4 60                	in     al,0x60
c001e513:	3c 5a                	cmp    al,0x5a
c001e515:	74 04                	je     c001e51b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e517:	3c 1c                	cmp    al,0x1c
c001e519:	75 f6                	jne    c001e511 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e51b:	e4 60                	in     al,0x60
c001e51d:	3c 5a                	cmp    al,0x5a
c001e51f:	74 fa                	je     c001e51b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e521:	3c 1c                	cmp    al,0x1c
c001e523:	74 f6                	je     c001e51b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e525:	e9 cb 01 00 00       	jmp    c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e52a:	66 81 f9 01 01       	cmp    cx,0x101
c001e52f:	0f 85 7a 01 00 00    	jne    c001e6af <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e535:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e53c:	75 25                	jne    c001e563 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	68 70 02 00 00       	push   0x270
c001e546:	e8 08 b8 fe ff       	call   c0009d53 <malloc>
c001e54b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e54e:	89 c5                	mov    ebp,eax
c001e550:	e8 df 05 00 00       	call   c001eb34 <IDE::IDE()>
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e55f:	74 4a                	je     c001e5ab <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e561:	eb 2f                	jmp    c001e592 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e563:	83 ec 0c             	sub    esp,0xc
c001e566:	68 3d 72 02 c0       	push   0xc002723d
c001e56b:	e8 3d b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e570:	83 c4 10             	add    esp,0x10
c001e573:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e57a:	75 c2                	jne    c001e53e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e57c:	e4 60                	in     al,0x60
c001e57e:	3c 5a                	cmp    al,0x5a
c001e580:	74 04                	je     c001e586 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e582:	3c 1c                	cmp    al,0x1c
c001e584:	75 f6                	jne    c001e57c <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e586:	e4 60                	in     al,0x60
c001e588:	3c 5a                	cmp    al,0x5a
c001e58a:	74 fa                	je     c001e586 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e58c:	3c 1c                	cmp    al,0x1c
c001e58e:	74 f6                	je     c001e586 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e590:	eb ac                	jmp    c001e53e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e592:	83 ec 0c             	sub    esp,0xc
c001e595:	68 44 72 02 c0       	push   0xc0027244
c001e59a:	e8 0e b8 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e5a9:	74 1b                	je     c001e5c6 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e5ab:	57                   	push   edi
c001e5ac:	57                   	push   edi
c001e5ad:	55                   	push   ebp
c001e5ae:	53                   	push   ebx
c001e5af:	e8 fe ff fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001e5b4:	83 c4 10             	add    esp,0x10
c001e5b7:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e5be:	74 33                	je     c001e5f3 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e5c0:	eb 18                	jmp    c001e5da <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e5c2:	3c 1c                	cmp    al,0x1c
c001e5c4:	74 0c                	je     c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e5c6:	e4 60                	in     al,0x60
c001e5c8:	3c 5a                	cmp    al,0x5a
c001e5ca:	75 f6                	jne    c001e5c2 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e5cc:	eb 04                	jmp    c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e5ce:	3c 1c                	cmp    al,0x1c
c001e5d0:	75 d9                	jne    c001e5ab <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e5d2:	e4 60                	in     al,0x60
c001e5d4:	3c 5a                	cmp    al,0x5a
c001e5d6:	74 fa                	je     c001e5d2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e5d8:	eb f4                	jmp    c001e5ce <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	68 4b 72 02 c0       	push   0xc002724b
c001e5e2:	e8 c6 b7 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e5e7:	83 c4 10             	add    esp,0x10
c001e5ea:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e5f1:	74 29                	je     c001e61c <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e5f3:	83 ec 2c             	sub    esp,0x2c
c001e5f6:	b9 09 00 00 00       	mov    ecx,0x9
c001e5fb:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e5ff:	fc                   	cld    
c001e600:	89 e7                	mov    edi,esp
c001e602:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e604:	55                   	push   ebp
c001e605:	e8 ba fe fe ff       	call   c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e60a:	83 c4 30             	add    esp,0x30
c001e60d:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e614:	74 33                	je     c001e649 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e616:	eb 18                	jmp    c001e630 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e618:	3c 1c                	cmp    al,0x1c
c001e61a:	74 0c                	je     c001e628 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e61c:	e4 60                	in     al,0x60
c001e61e:	3c 5a                	cmp    al,0x5a
c001e620:	75 f6                	jne    c001e618 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e622:	eb 04                	jmp    c001e628 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e624:	3c 1c                	cmp    al,0x1c
c001e626:	75 cb                	jne    c001e5f3 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e628:	e4 60                	in     al,0x60
c001e62a:	3c 5a                	cmp    al,0x5a
c001e62c:	74 fa                	je     c001e628 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e62e:	eb f4                	jmp    c001e624 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e630:	83 ec 0c             	sub    esp,0xc
c001e633:	68 52 72 02 c0       	push   0xc0027252
c001e638:	e8 70 b7 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e63d:	83 c4 10             	add    esp,0x10
c001e640:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e647:	74 23                	je     c001e66c <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e649:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e64c:	6a 00                	push   0x0
c001e64e:	6a 00                	push   0x0
c001e650:	6a 00                	push   0x0
c001e652:	55                   	push   ebp
c001e653:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e656:	83 c4 10             	add    esp,0x10
c001e659:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e660:	0f 84 8f 00 00 00    	je     c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e666:	eb 18                	jmp    c001e680 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e668:	3c 1c                	cmp    al,0x1c
c001e66a:	74 0c                	je     c001e678 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e66c:	e4 60                	in     al,0x60
c001e66e:	3c 5a                	cmp    al,0x5a
c001e670:	75 f6                	jne    c001e668 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e672:	eb 04                	jmp    c001e678 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e674:	3c 1c                	cmp    al,0x1c
c001e676:	75 d1                	jne    c001e649 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e678:	e4 60                	in     al,0x60
c001e67a:	3c 5a                	cmp    al,0x5a
c001e67c:	74 fa                	je     c001e678 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e67e:	eb f4                	jmp    c001e674 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	68 59 72 02 c0       	push   0xc0027259
c001e688:	e8 20 b7 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e697:	75 5c                	jne    c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e699:	e4 60                	in     al,0x60
c001e69b:	3c 5a                	cmp    al,0x5a
c001e69d:	74 04                	je     c001e6a3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e69f:	3c 1c                	cmp    al,0x1c
c001e6a1:	75 f6                	jne    c001e699 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e6a3:	e4 60                	in     al,0x60
c001e6a5:	3c 5a                	cmp    al,0x5a
c001e6a7:	74 fa                	je     c001e6a3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6a9:	3c 1c                	cmp    al,0x1c
c001e6ab:	74 f6                	je     c001e6a3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e6ad:	eb 46                	jmp    c001e6f5 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e6af:	83 ec 0c             	sub    esp,0xc
c001e6b2:	68 58 01 00 00       	push   0x158
c001e6b7:	e8 97 b6 fe ff       	call   c0009d53 <malloc>
c001e6bc:	89 c5                	mov    ebp,eax
c001e6be:	58                   	pop    eax
c001e6bf:	5a                   	pop    edx
c001e6c0:	68 60 72 02 c0       	push   0xc0027260
c001e6c5:	55                   	push   ebp
c001e6c6:	e8 f1 01 ff ff       	call   c000e8bc <DriverlessDevice::DriverlessDevice(char const*)>
c001e6cb:	59                   	pop    ecx
c001e6cc:	5e                   	pop    esi
c001e6cd:	55                   	push   ebp
c001e6ce:	53                   	push   ebx
c001e6cf:	e8 de fe fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001e6d4:	83 c4 10             	add    esp,0x10
c001e6d7:	b9 09 00 00 00       	mov    ecx,0x9
c001e6dc:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e6e0:	fc                   	cld    
c001e6e1:	89 fe                	mov    esi,edi
c001e6e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6e5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e6e9:	83 c4 1c             	add    esp,0x1c
c001e6ec:	5b                   	pop    ebx
c001e6ed:	5e                   	pop    esi
c001e6ee:	5f                   	pop    edi
c001e6ef:	5d                   	pop    ebp
c001e6f0:	e9 cf fd fe ff       	jmp    c000e4c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e6f5:	83 c4 1c             	add    esp,0x1c
c001e6f8:	5b                   	pop    ebx
c001e6f9:	5e                   	pop    esi
c001e6fa:	5f                   	pop    edi
c001e6fb:	5d                   	pop    ebp
c001e6fc:	c3                   	ret    
c001e6fd:	90                   	nop

c001e6fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e6fe:	55                   	push   ebp
c001e6ff:	57                   	push   edi
c001e700:	56                   	push   esi
c001e701:	53                   	push   ebx
c001e702:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e708:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e70f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e716:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e71a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e721:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e725:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e72c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e730:	68 7a 72 02 c0       	push   0xc002727a
c001e735:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e739:	53                   	push   ebx
c001e73a:	e8 f9 1f fe ff       	call   c0000738 <strcpy>
c001e73f:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e744:	b2 64                	mov    dl,0x64
c001e746:	89 c8                	mov    eax,ecx
c001e748:	f6 f2                	div    dl
c001e74a:	b2 0a                	mov    dl,0xa
c001e74c:	83 c0 30             	add    eax,0x30
c001e74f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e753:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e757:	83 c4 10             	add    esp,0x10
c001e75a:	89 c8                	mov    eax,ecx
c001e75c:	f6 f2                	div    dl
c001e75e:	89 c1                	mov    ecx,eax
c001e760:	0f b6 c0             	movzx  eax,al
c001e763:	88 e9                	mov    cl,ch
c001e765:	f6 f2                	div    dl
c001e767:	88 e0                	mov    al,ah
c001e769:	83 c0 30             	add    eax,0x30
c001e76c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e770:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e774:	8d 41 30             	lea    eax,[ecx+0x30]
c001e777:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e77b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e77f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e784:	f6 f2                	div    dl
c001e786:	89 c1                	mov    ecx,eax
c001e788:	0f b6 c0             	movzx  eax,al
c001e78b:	88 e9                	mov    cl,ch
c001e78d:	f6 f2                	div    dl
c001e78f:	88 e0                	mov    al,ah
c001e791:	83 c0 30             	add    eax,0x30
c001e794:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e798:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e79c:	8d 41 30             	lea    eax,[ecx+0x30]
c001e79f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e7a3:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e7a7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e7ac:	f6 f2                	div    dl
c001e7ae:	89 c1                	mov    ecx,eax
c001e7b0:	0f b6 c0             	movzx  eax,al
c001e7b3:	88 e9                	mov    cl,ch
c001e7b5:	f6 f2                	div    dl
c001e7b7:	88 e0                	mov    al,ah
c001e7b9:	83 c0 30             	add    eax,0x30
c001e7bc:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e7c3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e7c7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e7cb:	8d 41 30             	lea    eax,[ecx+0x30]
c001e7ce:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e7d2:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e7d6:	74 29                	je     c001e801 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	53                   	push   ebx
c001e7dc:	e8 cc b5 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e7e1:	83 c4 10             	add    esp,0x10
c001e7e4:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e7eb:	75 14                	jne    c001e801 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e7ed:	e4 60                	in     al,0x60
c001e7ef:	3c 1c                	cmp    al,0x1c
c001e7f1:	74 04                	je     c001e7f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e7f3:	3c 5a                	cmp    al,0x5a
c001e7f5:	75 f6                	jne    c001e7ed <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e7f7:	e4 60                	in     al,0x60
c001e7f9:	3c 5a                	cmp    al,0x5a
c001e7fb:	74 fa                	je     c001e7f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e7fd:	3c 1c                	cmp    al,0x1c
c001e7ff:	74 f6                	je     c001e7f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e801:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e806:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e80b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e810:	83 ec 0c             	sub    esp,0xc
c001e813:	6a 0c                	push   0xc
c001e815:	56                   	push   esi
c001e816:	53                   	push   ebx
c001e817:	57                   	push   edi
c001e818:	55                   	push   ebp
c001e819:	e8 68 f3 ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e81e:	83 c4 20             	add    esp,0x20
c001e821:	56                   	push   esi
c001e822:	53                   	push   ebx
c001e823:	57                   	push   edi
c001e824:	55                   	push   ebp
c001e825:	e8 50 f4 ff ff       	call   c001dc7a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e82a:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e82f:	56                   	push   esi
c001e830:	53                   	push   ebx
c001e831:	57                   	push   edi
c001e832:	55                   	push   ebp
c001e833:	e8 d8 f4 ff ff       	call   c001dd10 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e838:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e83c:	83 c4 14             	add    esp,0x14
c001e83f:	6a 3c                	push   0x3c
c001e841:	56                   	push   esi
c001e842:	53                   	push   ebx
c001e843:	57                   	push   edi
c001e844:	55                   	push   ebp
c001e845:	e8 3c f3 ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e84a:	0f b6 c4             	movzx  eax,ah
c001e84d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e851:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e855:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e85c:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001e861:	83 c4 20             	add    esp,0x20
c001e864:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e86a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e871:	0f 84 38 01 00 00    	je     c001e9af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e877:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e87f:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001e884:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e888:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e88e:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e894:	0f 8e 15 01 00 00    	jle    c001e9af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e89a:	50                   	push   eax
c001e89b:	50                   	push   eax
c001e89c:	68 95 72 02 c0       	push   0xc0027295
c001e8a1:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e8a5:	50                   	push   eax
c001e8a6:	e8 8d 1e fe ff       	call   c0000738 <strcpy>
c001e8ab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e8af:	b9 0a 00 00 00       	mov    ecx,0xa
c001e8b4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e8b8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e8bc:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e8c0:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e8c4:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e8c8:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e8cc:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e8d0:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e8d4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e8d8:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e8dc:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e8e0:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e8e4:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e8e8:	83 c4 10             	add    esp,0x10
c001e8eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ef:	99                   	cdq    
c001e8f0:	f7 f9                	idiv   ecx
c001e8f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e8f6:	99                   	cdq    
c001e8f7:	f7 f9                	idiv   ecx
c001e8f9:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e8fd:	83 c2 30             	add    edx,0x30
c001e900:	83 c0 30             	add    eax,0x30
c001e903:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e907:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e90b:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001e912:	74 2d                	je     c001e941 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e914:	83 ec 0c             	sub    esp,0xc
c001e917:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e91b:	50                   	push   eax
c001e91c:	e8 8c b4 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001e92b:	75 14                	jne    c001e941 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e92d:	e4 60                	in     al,0x60
c001e92f:	3c 5a                	cmp    al,0x5a
c001e931:	74 04                	je     c001e937 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e933:	3c 1c                	cmp    al,0x1c
c001e935:	75 f6                	jne    c001e92d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e937:	e4 60                	in     al,0x60
c001e939:	3c 5a                	cmp    al,0x5a
c001e93b:	74 fa                	je     c001e937 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e93d:	3c 1c                	cmp    al,0x1c
c001e93f:	74 f6                	je     c001e937 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e941:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e945:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001e94a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e950:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e953:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e95a:	39 d3                	cmp    ebx,edx
c001e95c:	75 48                	jne    c001e9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e95e:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e965:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e969:	75 3b                	jne    c001e9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e96b:	83 ec 0c             	sub    esp,0xc
c001e96e:	68 c4 72 02 c0       	push   0xc00272c4
c001e973:	e8 c7 e6 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001e978:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e97c:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c001e981:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e987:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e98f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e993:	50                   	push   eax
c001e994:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e998:	53                   	push   ebx
c001e999:	68 e9 72 02 c0       	push   0xc00272e9
c001e99e:	e8 9c e6 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001e9a3:	83 c4 20             	add    esp,0x20
c001e9a6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e9aa:	e9 d0 fe ff ff       	jmp    c001e87f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e9af:	31 d2                	xor    edx,edx
c001e9b1:	83 ec 0c             	sub    esp,0xc
c001e9b4:	56                   	push   esi
c001e9b5:	53                   	push   ebx
c001e9b6:	57                   	push   edi
c001e9b7:	52                   	push   edx
c001e9b8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e9bc:	55                   	push   ebp
c001e9bd:	e8 9a f3 ff ff       	call   c001dd5c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e9c6:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e9cd:	42                   	inc    edx
c001e9ce:	83 c4 20             	add    esp,0x20
c001e9d1:	83 fa 06             	cmp    edx,0x6
c001e9d4:	75 db                	jne    c001e9b1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e9d6:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e9db:	83 ec 0c             	sub    esp,0xc
c001e9de:	86 e0                	xchg   al,ah
c001e9e0:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e9e8:	6a 02                	push   0x2
c001e9ea:	56                   	push   esi
c001e9eb:	53                   	push   ebx
c001e9ec:	57                   	push   edi
c001e9ed:	55                   	push   ebp
c001e9ee:	e8 93 f1 ff ff       	call   c001db86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e9f3:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e9fb:	83 c4 20             	add    esp,0x20
c001e9fe:	56                   	push   esi
c001e9ff:	53                   	push   ebx
c001ea00:	57                   	push   edi
c001ea01:	55                   	push   ebp
c001ea02:	e8 bd f2 ff ff       	call   c001dcc4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ea07:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ea0e:	56                   	push   esi
c001ea0f:	53                   	push   ebx
c001ea10:	57                   	push   edi
c001ea11:	55                   	push   ebp
c001ea12:	e8 17 f2 ff ff       	call   c001dc2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea17:	b9 09 00 00 00       	mov    ecx,0x9
c001ea1c:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001ea24:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001ea28:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ea2f:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ea33:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ea3a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ea3e:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ea45:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ea49:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	fc                   	cld    
c001ea54:	89 e7                	mov    edi,esp
c001ea56:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ea5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ea5f:	55                   	push   ebp
c001ea60:	e8 59 f8 ff ff       	call   c001e2be <PCI::foundDevice(PCIDeviceInfo)>
c001ea65:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ea6b:	5b                   	pop    ebx
c001ea6c:	5e                   	pop    esi
c001ea6d:	5f                   	pop    edi
c001ea6e:	5d                   	pop    ebp
c001ea6f:	c3                   	ret    

c001ea70 <PCI::checkDevice(unsigned char, unsigned char)>:
c001ea70:	55                   	push   ebp
c001ea71:	57                   	push   edi
c001ea72:	56                   	push   esi
c001ea73:	53                   	push   ebx
c001ea74:	83 ec 0c             	sub    esp,0xc
c001ea77:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ea7b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ea80:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ea85:	6a 00                	push   0x0
c001ea87:	56                   	push   esi
c001ea88:	57                   	push   edi
c001ea89:	55                   	push   ebp
c001ea8a:	e8 9f f1 ff ff       	call   c001dc2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ea8f:	6a 00                	push   0x0
c001ea91:	56                   	push   esi
c001ea92:	57                   	push   edi
c001ea93:	55                   	push   ebp
c001ea94:	e8 65 fc ff ff       	call   c001e6fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ea99:	83 c4 20             	add    esp,0x20
c001ea9c:	6a 00                	push   0x0
c001ea9e:	56                   	push   esi
c001ea9f:	57                   	push   edi
c001eaa0:	55                   	push   ebp
c001eaa1:	e8 ac f1 ff ff       	call   c001dc52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eaa6:	83 c4 10             	add    esp,0x10
c001eaa9:	84 c0                	test   al,al
c001eaab:	79 27                	jns    c001ead4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001eaad:	bb 01 00 00 00       	mov    ebx,0x1
c001eab2:	53                   	push   ebx
c001eab3:	56                   	push   esi
c001eab4:	57                   	push   edi
c001eab5:	55                   	push   ebp
c001eab6:	e8 73 f1 ff ff       	call   c001dc2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	66 40                	inc    ax
c001eac0:	74 0c                	je     c001eace <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001eac2:	53                   	push   ebx
c001eac3:	56                   	push   esi
c001eac4:	57                   	push   edi
c001eac5:	55                   	push   ebp
c001eac6:	e8 33 fc ff ff       	call   c001e6fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	43                   	inc    ebx
c001eacf:	83 fb 08             	cmp    ebx,0x8
c001ead2:	75 de                	jne    c001eab2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ead4:	83 c4 0c             	add    esp,0xc
c001ead7:	5b                   	pop    ebx
c001ead8:	5e                   	pop    esi
c001ead9:	5f                   	pop    edi
c001eada:	5d                   	pop    ebp
c001eadb:	c3                   	ret    

c001eadc <PCI::detect()>:
c001eadc:	56                   	push   esi
c001eadd:	53                   	push   ebx
c001eade:	53                   	push   ebx
c001eadf:	31 db                	xor    ebx,ebx
c001eae1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eae5:	6a 00                	push   0x0
c001eae7:	6a 00                	push   0x0
c001eae9:	6a 00                	push   0x0
c001eaeb:	56                   	push   esi
c001eaec:	e8 61 f1 ff ff       	call   c001dc52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001eaf1:	83 c4 10             	add    esp,0x10
c001eaf4:	a8 80                	test   al,0x80
c001eaf6:	75 21                	jne    c001eb19 <PCI::detect()+0x3d>
c001eaf8:	51                   	push   ecx
c001eaf9:	51                   	push   ecx
c001eafa:	6a 00                	push   0x0
c001eafc:	56                   	push   esi
c001eafd:	e8 98 f7 ff ff       	call   c001e29a <PCI::checkBus(unsigned char)>
c001eb02:	83 c4 10             	add    esp,0x10
c001eb05:	eb 24                	jmp    c001eb2b <PCI::detect()+0x4f>
c001eb07:	52                   	push   edx
c001eb08:	52                   	push   edx
c001eb09:	53                   	push   ebx
c001eb0a:	43                   	inc    ebx
c001eb0b:	56                   	push   esi
c001eb0c:	e8 89 f7 ff ff       	call   c001e29a <PCI::checkBus(unsigned char)>
c001eb11:	83 c4 10             	add    esp,0x10
c001eb14:	83 fb 08             	cmp    ebx,0x8
c001eb17:	74 12                	je     c001eb2b <PCI::detect()+0x4f>
c001eb19:	53                   	push   ebx
c001eb1a:	6a 00                	push   0x0
c001eb1c:	6a 00                	push   0x0
c001eb1e:	56                   	push   esi
c001eb1f:	e8 0a f1 ff ff       	call   c001dc2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eb24:	83 c4 10             	add    esp,0x10
c001eb27:	66 40                	inc    ax
c001eb29:	74 dc                	je     c001eb07 <PCI::detect()+0x2b>
c001eb2b:	58                   	pop    eax
c001eb2c:	5b                   	pop    ebx
c001eb2d:	5e                   	pop    esi
c001eb2e:	c3                   	ret    
c001eb2f:	90                   	nop

c001eb30 <IDE::close(int, int, void*)>:
c001eb30:	83 c8 ff             	or     eax,0xffffffff
c001eb33:	c3                   	ret    

c001eb34 <IDE::IDE()>:
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3b:	83 ec 08             	sub    esp,0x8
c001eb3e:	68 30 73 02 c0       	push   0xc0027330
c001eb43:	50                   	push   eax
c001eb44:	e8 17 fe fe ff       	call   c000e960 <HardDiskController::HardDiskController(char const*)>
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	ba c0 73 02 c0       	mov    edx,0xc00273c0
c001eb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb55:	89 10                	mov    DWORD PTR [eax],edx
c001eb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001eb62:	90                   	nop
c001eb63:	83 c4 0c             	add    esp,0xc
c001eb66:	c3                   	ret    
c001eb67:	90                   	nop

c001eb68 <IDE::prepareInterrupt(unsigned char)>:
c001eb68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb71:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001eb79:	c3                   	ret    

c001eb7a <selectDrive(unsigned char, unsigned char)>:
c001eb7a:	c3                   	ret    
c001eb7b:	90                   	nop

c001eb7c <IDE::getBase(unsigned char)>:
c001eb7c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001eb81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb85:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001eb8d:	c3                   	ret    

c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001eb8e:	55                   	push   ebp
c001eb8f:	57                   	push   edi
c001eb90:	56                   	push   esi
c001eb91:	53                   	push   ebx
c001eb92:	83 ec 1c             	sub    esp,0x1c
c001eb95:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eb99:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eb9d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001eba0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eba4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eba8:	80 f9 03             	cmp    cl,0x3
c001ebab:	77 51                	ja     c001ebfe <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ebad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebb1:	0f b6 f2             	movzx  esi,dl
c001ebb4:	0f b6 db             	movzx  ebx,bl
c001ebb7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ebba:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ebbe:	83 ca 80             	or     edx,0xffffff80
c001ebc1:	0f b6 d2             	movzx  edx,dl
c001ebc4:	52                   	push   edx
c001ebc5:	6a 0c                	push   0xc
c001ebc7:	56                   	push   esi
c001ebc8:	57                   	push   edi
c001ebc9:	e8 c0 ff ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebce:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ebd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebd7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ebdb:	ee                   	out    dx,al
c001ebdc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ebe1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ebe5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ebe9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ebed:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ebf5:	83 c4 2c             	add    esp,0x2c
c001ebf8:	5b                   	pop    ebx
c001ebf9:	5e                   	pop    esi
c001ebfa:	5f                   	pop    edi
c001ebfb:	5d                   	pop    ebp
c001ebfc:	eb 90                	jmp    c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebfe:	80 fb 07             	cmp    bl,0x7
c001ec01:	77 12                	ja     c001ec15 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ec03:	0f b6 d2             	movzx  edx,dl
c001ec06:	0f b6 db             	movzx  ebx,bl
c001ec09:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ec11:	89 da                	mov    edx,ebx
c001ec13:	eb 2f                	jmp    c001ec44 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ec15:	80 fb 0d             	cmp    bl,0xd
c001ec18:	77 13                	ja     c001ec2d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ec1a:	0f b6 d2             	movzx  edx,dl
c001ec1d:	0f b6 db             	movzx  ebx,bl
c001ec20:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ec27:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ec2b:	eb 17                	jmp    c001ec44 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ec2d:	80 fb 15             	cmp    bl,0x15
c001ec30:	77 13                	ja     c001ec45 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ec32:	0f b6 d2             	movzx  edx,dl
c001ec35:	0f b6 db             	movzx  ebx,bl
c001ec38:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ec40:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ec44:	ee                   	out    dx,al
c001ec45:	83 c4 1c             	add    esp,0x1c
c001ec48:	5b                   	pop    ebx
c001ec49:	5e                   	pop    esi
c001ec4a:	5f                   	pop    edi
c001ec4b:	5d                   	pop    ebp
c001ec4c:	c3                   	ret    
c001ec4d:	90                   	nop

c001ec4e <IDE::read(unsigned char, unsigned char)>:
c001ec4e:	55                   	push   ebp
c001ec4f:	57                   	push   edi
c001ec50:	56                   	push   esi
c001ec51:	53                   	push   ebx
c001ec52:	83 ec 1c             	sub    esp,0x1c
c001ec55:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ec59:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec5d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ec60:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ec64:	3c 03                	cmp    al,0x3
c001ec66:	77 43                	ja     c001ecab <IDE::read(unsigned char, unsigned char)+0x5d>
c001ec68:	0f b6 f2             	movzx  esi,dl
c001ec6b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ec6e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ec72:	83 c8 80             	or     eax,0xffffff80
c001ec75:	0f b6 c0             	movzx  eax,al
c001ec78:	50                   	push   eax
c001ec79:	6a 0c                	push   0xc
c001ec7b:	56                   	push   esi
c001ec7c:	57                   	push   edi
c001ec7d:	e8 0c ff ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec82:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ec87:	0f b6 c3             	movzx  eax,bl
c001ec8a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ec8e:	ec                   	in     al,dx
c001ec8f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ec93:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ec98:	52                   	push   edx
c001ec99:	6a 0c                	push   0xc
c001ec9b:	56                   	push   esi
c001ec9c:	57                   	push   edi
c001ec9d:	e8 ec fe ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca2:	83 c4 20             	add    esp,0x20
c001eca5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001eca9:	eb 49                	jmp    c001ecf4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ecab:	80 fb 07             	cmp    bl,0x7
c001ecae:	77 12                	ja     c001ecc2 <IDE::read(unsigned char, unsigned char)+0x74>
c001ecb0:	0f b6 d2             	movzx  edx,dl
c001ecb3:	0f b6 c3             	movzx  eax,bl
c001ecb6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ecbe:	89 c2                	mov    edx,eax
c001ecc0:	eb 31                	jmp    c001ecf3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ecc2:	80 fb 0d             	cmp    bl,0xd
c001ecc5:	77 13                	ja     c001ecda <IDE::read(unsigned char, unsigned char)+0x8c>
c001ecc7:	0f b6 d2             	movzx  edx,dl
c001ecca:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ecd1:	0f b6 d3             	movzx  edx,bl
c001ecd4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ecd8:	eb 19                	jmp    c001ecf3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ecda:	31 c0                	xor    eax,eax
c001ecdc:	80 fb 15             	cmp    bl,0x15
c001ecdf:	77 13                	ja     c001ecf4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ece1:	0f b6 d2             	movzx  edx,dl
c001ece4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ecec:	0f b6 d3             	movzx  edx,bl
c001ecef:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ecf3:	ec                   	in     al,dx
c001ecf4:	83 c4 1c             	add    esp,0x1c
c001ecf7:	5b                   	pop    ebx
c001ecf8:	5e                   	pop    esi
c001ecf9:	5f                   	pop    edi
c001ecfa:	5d                   	pop    ebp
c001ecfb:	c3                   	ret    

c001ecfc <IDE::waitInterrupt(unsigned char)>:
c001ecfc:	55                   	push   ebp
c001ecfd:	57                   	push   edi
c001ecfe:	56                   	push   esi
c001ecff:	53                   	push   ebx
c001ed00:	31 db                	xor    ebx,ebx
c001ed02:	83 ec 0c             	sub    esp,0xc
c001ed05:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ed09:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ed0e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ed16:	89 e8                	mov    eax,ebp
c001ed18:	84 c0                	test   al,al
c001ed1a:	75 30                	jne    c001ed4c <IDE::waitInterrupt(unsigned char)+0x50>
c001ed1c:	50                   	push   eax
c001ed1d:	6a 0c                	push   0xc
c001ed1f:	56                   	push   esi
c001ed20:	57                   	push   edi
c001ed21:	e8 28 ff ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001ed26:	83 c4 10             	add    esp,0x10
c001ed29:	a8 01                	test   al,0x1
c001ed2b:	75 27                	jne    c001ed54 <IDE::waitInterrupt(unsigned char)+0x58>
c001ed2d:	f6 c3 04             	test   bl,0x4
c001ed30:	75 12                	jne    c001ed44 <IDE::waitInterrupt(unsigned char)+0x48>
c001ed32:	83 fb 32             	cmp    ebx,0x32
c001ed35:	7e 0d                	jle    c001ed44 <IDE::waitInterrupt(unsigned char)+0x48>
c001ed37:	83 ec 0c             	sub    esp,0xc
c001ed3a:	6a 64                	push   0x64
c001ed3c:	e8 db a2 ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	83 fb 3c             	cmp    ebx,0x3c
c001ed47:	74 0b                	je     c001ed54 <IDE::waitInterrupt(unsigned char)+0x58>
c001ed49:	43                   	inc    ebx
c001ed4a:	eb c2                	jmp    c001ed0e <IDE::waitInterrupt(unsigned char)+0x12>
c001ed4c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ed54:	83 c4 0c             	add    esp,0xc
c001ed57:	89 e8                	mov    eax,ebp
c001ed59:	5b                   	pop    ebx
c001ed5a:	5e                   	pop    esi
c001ed5b:	5f                   	pop    edi
c001ed5c:	5d                   	pop    ebp
c001ed5d:	c3                   	ret    

c001ed5e <ideChannel0IRQHandler(regs*, void*)>:
c001ed5e:	83 ec 10             	sub    esp,0x10
c001ed61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed65:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ed6c:	6a 07                	push   0x7
c001ed6e:	6a 00                	push   0x0
c001ed70:	50                   	push   eax
c001ed71:	e8 d8 fe ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001ed76:	83 c4 1c             	add    esp,0x1c
c001ed79:	c3                   	ret    

c001ed7a <ideChannel1IRQHandler(regs*, void*)>:
c001ed7a:	83 ec 10             	sub    esp,0x10
c001ed7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ed81:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ed88:	6a 07                	push   0x7
c001ed8a:	6a 01                	push   0x1
c001ed8c:	50                   	push   eax
c001ed8d:	e8 bc fe ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001ed92:	83 c4 1c             	add    esp,0x1c
c001ed95:	c3                   	ret    

c001ed96 <IDE::enableIRQs(unsigned char, bool)>:
c001ed96:	57                   	push   edi
c001ed97:	56                   	push   esi
c001ed98:	be 04 00 00 00       	mov    esi,0x4
c001ed9d:	53                   	push   ebx
c001ed9e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001eda3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eda7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001edac:	0f 94 c0             	sete   al
c001edaf:	d1 e0                	shl    eax,1
c001edb1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001edb8:	0f b6 c0             	movzx  eax,al
c001edbb:	50                   	push   eax
c001edbc:	6a 0c                	push   0xc
c001edbe:	57                   	push   edi
c001edbf:	53                   	push   ebx
c001edc0:	e8 c9 fd ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edc5:	83 c4 10             	add    esp,0x10
c001edc8:	50                   	push   eax
c001edc9:	6a 0c                	push   0xc
c001edcb:	57                   	push   edi
c001edcc:	53                   	push   ebx
c001edcd:	e8 7c fe ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001edd2:	83 c4 10             	add    esp,0x10
c001edd5:	4e                   	dec    esi
c001edd6:	75 f0                	jne    c001edc8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001edd8:	5b                   	pop    ebx
c001edd9:	5e                   	pop    esi
c001edda:	5f                   	pop    edi
c001eddb:	c3                   	ret    

c001eddc <IDE::open(int, int, void*)>:
c001eddc:	55                   	push   ebp
c001eddd:	57                   	push   edi
c001edde:	56                   	push   esi
c001eddf:	53                   	push   ebx
c001ede0:	83 ec 1c             	sub    esp,0x1c
c001ede3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ede7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001edf0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001edf9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ee00:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ee07:	0f 85 b0 02 00 00    	jne    c001f0bd <IDE::open(int, int, void*)+0x2e1>
c001ee0d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ee13:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ee17:	83 e0 7f             	and    eax,0x7f
c001ee1a:	3c 05                	cmp    al,0x5
c001ee1c:	74 04                	je     c001ee22 <IDE::open(int, int, void*)+0x46>
c001ee1e:	3c 0f                	cmp    al,0xf
c001ee20:	75 32                	jne    c001ee54 <IDE::open(int, int, void*)+0x78>
c001ee22:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ee28:	83 e0 fc             	and    eax,0xfffffffc
c001ee2b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ee32:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ee38:	83 e0 fc             	and    eax,0xfffffffc
c001ee3b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ee42:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ee48:	83 e0 fc             	and    eax,0xfffffffc
c001ee4b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ee52:	eb 14                	jmp    c001ee68 <IDE::open(int, int, void*)+0x8c>
c001ee54:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ee5e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ee68:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ee6f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ee76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ee7a:	89 c6                	mov    esi,eax
c001ee7c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ee81:	c1 e6 10             	shl    esi,0x10
c001ee84:	89 e8                	mov    eax,ebp
c001ee86:	89 fa                	mov    edx,edi
c001ee88:	c1 e0 0b             	shl    eax,0xb
c001ee8b:	09 f0                	or     eax,esi
c001ee8d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ee94:	c1 e6 08             	shl    esi,0x8
c001ee97:	09 c6                	or     esi,eax
c001ee99:	89 f0                	mov    eax,esi
c001ee9b:	0d 08 00 00 80       	or     eax,0x80000008
c001eea0:	ef                   	out    dx,eax
c001eea1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001eea6:	89 ca                	mov    edx,ecx
c001eea8:	ed                   	in     eax,dx
c001eea9:	c1 e8 10             	shr    eax,0x10
c001eeac:	3d ff ff 00 00       	cmp    eax,0xffff
c001eeb1:	0f 84 f5 00 00 00    	je     c001efac <IDE::open(int, int, void*)+0x1d0>
c001eeb7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001eebd:	89 fa                	mov    edx,edi
c001eebf:	89 f0                	mov    eax,esi
c001eec1:	ef                   	out    dx,eax
c001eec2:	b0 fe                	mov    al,0xfe
c001eec4:	89 ca                	mov    edx,ecx
c001eec6:	ee                   	out    dx,al
c001eec7:	89 f0                	mov    eax,esi
c001eec9:	89 fa                	mov    edx,edi
c001eecb:	ef                   	out    dx,eax
c001eecc:	89 ca                	mov    edx,ecx
c001eece:	ed                   	in     eax,dx
c001eecf:	3c fe                	cmp    al,0xfe
c001eed1:	0f 85 a9 00 00 00    	jne    c001ef80 <IDE::open(int, int, void*)+0x1a4>
c001eed7:	8b 15 68 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a68
c001eedd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001eee4:	74 33                	je     c001ef19 <IDE::open(int, int, void*)+0x13d>
c001eee6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001eeec:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001eef0:	40                   	inc    eax
c001eef1:	83 ec 0c             	sub    esp,0xc
c001eef4:	0f b6 c0             	movzx  eax,al
c001eef7:	50                   	push   eax
c001eef8:	55                   	push   ebp
c001eef9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eefd:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ef03:	51                   	push   ecx
c001ef04:	e8 fb 35 ff ff       	call   c0012504 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ef09:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ef0e:	83 c4 1c             	add    esp,0x1c
c001ef11:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ef17:	eb 0a                	jmp    c001ef23 <IDE::open(int, int, void*)+0x147>
c001ef19:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ef23:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ef2a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef31:	c1 e1 10             	shl    ecx,0x10
c001ef34:	c1 e0 08             	shl    eax,0x8
c001ef37:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ef3c:	09 c1                	or     ecx,eax
c001ef3e:	89 fa                	mov    edx,edi
c001ef40:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef47:	c1 e0 0b             	shl    eax,0xb
c001ef4a:	09 c1                	or     ecx,eax
c001ef4c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ef52:	89 c8                	mov    eax,ecx
c001ef54:	ef                   	out    dx,eax
c001ef55:	be fc 0c 00 00       	mov    esi,0xcfc
c001ef5a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ef60:	89 f2                	mov    edx,esi
c001ef62:	ee                   	out    dx,al
c001ef63:	89 c8                	mov    eax,ecx
c001ef65:	89 fa                	mov    edx,edi
c001ef67:	ef                   	out    dx,eax
c001ef68:	89 f2                	mov    edx,esi
c001ef6a:	ed                   	in     eax,dx
c001ef6b:	0f b6 c0             	movzx  eax,al
c001ef6e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ef74:	74 46                	je     c001efbc <IDE::open(int, int, void*)+0x1e0>
c001ef76:	83 ec 0c             	sub    esp,0xc
c001ef79:	68 48 73 02 c0       	push   0xc0027348
c001ef7e:	eb 34                	jmp    c001efb4 <IDE::open(int, int, void*)+0x1d8>
c001ef80:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ef89:	75 17                	jne    c001efa2 <IDE::open(int, int, void*)+0x1c6>
c001ef8b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ef90:	74 07                	je     c001ef99 <IDE::open(int, int, void*)+0x1bd>
c001ef92:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ef97:	75 09                	jne    c001efa2 <IDE::open(int, int, void*)+0x1c6>
c001ef99:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001efa0:	eb 1a                	jmp    c001efbc <IDE::open(int, int, void*)+0x1e0>
c001efa2:	83 ec 0c             	sub    esp,0xc
c001efa5:	68 50 73 02 c0       	push   0xc0027350
c001efaa:	eb 08                	jmp    c001efb4 <IDE::open(int, int, void*)+0x1d8>
c001efac:	83 ec 0c             	sub    esp,0xc
c001efaf:	68 81 73 02 c0       	push   0xc0027381
c001efb4:	e8 3c 60 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001efc3:	79 1a                	jns    c001efdf <IDE::open(int, int, void*)+0x203>
c001efc5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001efcb:	83 e0 fc             	and    eax,0xfffffffc
c001efce:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001efd5:	83 c0 08             	add    eax,0x8
c001efd8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001efdf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001efe5:	89 c2                	mov    edx,eax
c001efe7:	83 e2 0f             	and    edx,0xf
c001efea:	66 83 fa 08          	cmp    dx,0x8
c001efee:	75 0a                	jne    c001effa <IDE::open(int, int, void*)+0x21e>
c001eff0:	83 e8 02             	sub    eax,0x2
c001eff3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001effa:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f000:	89 c2                	mov    edx,eax
c001f002:	83 e2 0f             	and    edx,0xf
c001f005:	66 83 fa 08          	cmp    dx,0x8
c001f009:	75 0a                	jne    c001f015 <IDE::open(int, int, void*)+0x239>
c001f00b:	83 e8 02             	sub    eax,0x2
c001f00e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f015:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f01c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f023:	89 d0                	mov    eax,edx
c001f025:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f028:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f02c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f030:	8d 4a 01             	lea    ecx,[edx+0x1]
c001f033:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f038:	0f b6 c9             	movzx  ecx,cl
c001f03b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f042:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f045:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f049:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f04d:	8d 50 02             	lea    edx,[eax+0x2]
c001f050:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f055:	0f b6 d2             	movzx  edx,dl
c001f058:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f05e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f061:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f065:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f069:	8d 48 03             	lea    ecx,[eax+0x3]
c001f06c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f071:	0f b6 c9             	movzx  ecx,cl
c001f074:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f07a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f07d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f081:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f085:	8d 50 04             	lea    edx,[eax+0x4]
c001f088:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f08e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f093:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f09a:	66 85 f6             	test   si,si
c001f09d:	74 5b                	je     c001f0fa <IDE::open(int, int, void*)+0x31e>
c001f09f:	0f b6 d2             	movzx  edx,dl
c001f0a2:	83 c0 05             	add    eax,0x5
c001f0a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f0a8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f0ac:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f0b0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f0b6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f0bb:	eb 3d                	jmp    c001f0fa <IDE::open(int, int, void*)+0x31e>
c001f0bd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f0c3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f0ca:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f0d1:	66 05 06 02          	add    ax,0x206
c001f0d5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f0dc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f0e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f0ea:	66 05 06 02          	add    ax,0x206
c001f0ee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f0f5:	e9 e5 fe ff ff       	jmp    c001efdf <IDE::open(int, int, void*)+0x203>
c001f0fa:	50                   	push   eax
c001f0fb:	50                   	push   eax
c001f0fc:	6a 00                	push   0x0
c001f0fe:	53                   	push   ebx
c001f0ff:	e8 64 fa ff ff       	call   c001eb68 <IDE::prepareInterrupt(unsigned char)>
c001f104:	5a                   	pop    edx
c001f105:	59                   	pop    ecx
c001f106:	6a 01                	push   0x1
c001f108:	53                   	push   ebx
c001f109:	e8 5a fa ff ff       	call   c001eb68 <IDE::prepareInterrupt(unsigned char)>
c001f10e:	83 c4 0c             	add    esp,0xc
c001f111:	6a 00                	push   0x0
c001f113:	6a 00                	push   0x0
c001f115:	53                   	push   ebx
c001f116:	e8 7b fc ff ff       	call   c001ed96 <IDE::enableIRQs(unsigned char, bool)>
c001f11b:	83 c4 0c             	add    esp,0xc
c001f11e:	6a 00                	push   0x0
c001f120:	6a 01                	push   0x1
c001f122:	53                   	push   ebx
c001f123:	e8 6e fc ff ff       	call   c001ed96 <IDE::enableIRQs(unsigned char, bool)>
c001f128:	83 c4 10             	add    esp,0x10
c001f12b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f132:	74 34                	je     c001f168 <IDE::open(int, int, void*)+0x38c>
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	53                   	push   ebx
c001f138:	6a 01                	push   0x1
c001f13a:	68 5e ed 01 c0       	push   0xc001ed5e
c001f13f:	6a 0e                	push   0xe
c001f141:	53                   	push   ebx
c001f142:	e8 e3 f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f147:	83 c4 14             	add    esp,0x14
c001f14a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f150:	53                   	push   ebx
c001f151:	6a 01                	push   0x1
c001f153:	68 7a ed 01 c0       	push   0xc001ed7a
c001f158:	6a 0f                	push   0xf
c001f15a:	53                   	push   ebx
c001f15b:	e8 ca f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f160:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f166:	eb 38                	jmp    c001f1a0 <IDE::open(int, int, void*)+0x3c4>
c001f168:	83 ec 0c             	sub    esp,0xc
c001f16b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f175:	53                   	push   ebx
c001f176:	6a 00                	push   0x0
c001f178:	68 5e ed 01 c0       	push   0xc001ed5e
c001f17d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f183:	53                   	push   ebx
c001f184:	e8 a1 f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f189:	83 c4 14             	add    esp,0x14
c001f18c:	53                   	push   ebx
c001f18d:	6a 00                	push   0x0
c001f18f:	68 7a ed 01 c0       	push   0xc001ed7a
c001f194:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f19a:	53                   	push   ebx
c001f19b:	e8 8a f3 fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f1a2:	83 c4 20             	add    esp,0x20
c001f1a5:	83 ec 0c             	sub    esp,0xc
c001f1a8:	53                   	push   ebx
c001f1a9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f1ac:	83 c4 0c             	add    esp,0xc
c001f1af:	6a 07                	push   0x7
c001f1b1:	6a 00                	push   0x0
c001f1b3:	53                   	push   ebx
c001f1b4:	e8 95 fa ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f1b9:	83 c4 0c             	add    esp,0xc
c001f1bc:	6a 07                	push   0x7
c001f1be:	6a 01                	push   0x1
c001f1c0:	53                   	push   ebx
c001f1c1:	e8 88 fa ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f1c6:	83 c4 0c             	add    esp,0xc
c001f1c9:	6a 01                	push   0x1
c001f1cb:	6a 00                	push   0x0
c001f1cd:	53                   	push   ebx
c001f1ce:	e8 c3 fb ff ff       	call   c001ed96 <IDE::enableIRQs(unsigned char, bool)>
c001f1d3:	83 c4 0c             	add    esp,0xc
c001f1d6:	6a 01                	push   0x1
c001f1d8:	6a 01                	push   0x1
c001f1da:	53                   	push   ebx
c001f1db:	e8 b6 fb ff ff       	call   c001ed96 <IDE::enableIRQs(unsigned char, bool)>
c001f1e0:	83 c4 2c             	add    esp,0x2c
c001f1e3:	31 c0                	xor    eax,eax
c001f1e5:	5b                   	pop    ebx
c001f1e6:	5e                   	pop    esi
c001f1e7:	5f                   	pop    edi
c001f1e8:	5d                   	pop    ebp
c001f1e9:	c3                   	ret    

c001f1ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f1ea:	55                   	push   ebp
c001f1eb:	57                   	push   edi
c001f1ec:	56                   	push   esi
c001f1ed:	53                   	push   ebx
c001f1ee:	83 ec 1c             	sub    esp,0x1c
c001f1f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f1f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f1f9:	8d 50 f8             	lea    edx,[eax-0x8]
c001f1fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f200:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f204:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f208:	80 fa 03             	cmp    dl,0x3
c001f20b:	77 5d                	ja     c001f26a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f20d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f215:	0f b6 db             	movzx  ebx,bl
c001f218:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f21b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f21f:	83 ca 80             	or     edx,0xffffff80
c001f222:	0f b6 d2             	movzx  edx,dl
c001f225:	52                   	push   edx
c001f226:	6a 0c                	push   0xc
c001f228:	53                   	push   ebx
c001f229:	56                   	push   esi
c001f22a:	e8 5f f9 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f22f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f234:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f238:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f23c:	0f b6 c0             	movzx  eax,al
c001f23f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f243:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f245:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f24a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f24e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f252:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f256:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f25e:	83 c4 2c             	add    esp,0x2c
c001f261:	5b                   	pop    ebx
c001f262:	5e                   	pop    esi
c001f263:	5f                   	pop    edi
c001f264:	5d                   	pop    ebp
c001f265:	e9 24 f9 ff ff       	jmp    c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f26a:	3c 07                	cmp    al,0x7
c001f26c:	77 10                	ja     c001f27e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f26e:	0f b6 db             	movzx  ebx,bl
c001f271:	0f b6 d0             	movzx  edx,al
c001f274:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f27c:	eb 2d                	jmp    c001f2ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f27e:	3c 0d                	cmp    al,0xd
c001f280:	77 13                	ja     c001f295 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f282:	0f b6 db             	movzx  ebx,bl
c001f285:	0f b6 c0             	movzx  eax,al
c001f288:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f28f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f293:	eb 16                	jmp    c001f2ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f295:	3c 15                	cmp    al,0x15
c001f297:	77 14                	ja     c001f2ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f299:	0f b6 db             	movzx  ebx,bl
c001f29c:	0f b6 c0             	movzx  eax,al
c001f29f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f2a7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f2ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f2ad:	83 c4 1c             	add    esp,0x1c
c001f2b0:	5b                   	pop    ebx
c001f2b1:	5e                   	pop    esi
c001f2b2:	5f                   	pop    edi
c001f2b3:	5d                   	pop    ebp
c001f2b4:	c3                   	ret    
c001f2b5:	90                   	nop

c001f2b6 <IDE::detect()>:
c001f2b6:	55                   	push   ebp
c001f2b7:	57                   	push   edi
c001f2b8:	56                   	push   esi
c001f2b9:	53                   	push   ebx
c001f2ba:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f2c0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f2c7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f2ce:	0f 85 97 02 00 00    	jne    c001f56b <IDE::detect()+0x2b5>
c001f2d4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f2db:	31 f6                	xor    esi,esi
c001f2dd:	31 ed                	xor    ebp,ebp
c001f2df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f2e7:	89 e8                	mov    eax,ebp
c001f2e9:	c1 e0 06             	shl    eax,0x6
c001f2ec:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f2f4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f2f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f2fc:	c1 e0 04             	shl    eax,0x4
c001f2ff:	83 c8 a0             	or     eax,0xffffffa0
c001f302:	0f b6 c0             	movzx  eax,al
c001f305:	50                   	push   eax
c001f306:	6a 06                	push   0x6
c001f308:	56                   	push   esi
c001f309:	53                   	push   ebx
c001f30a:	e8 7f f8 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f30f:	83 c4 0c             	add    esp,0xc
c001f312:	6a 0c                	push   0xc
c001f314:	56                   	push   esi
c001f315:	53                   	push   ebx
c001f316:	e8 33 f9 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f31b:	83 c4 0c             	add    esp,0xc
c001f31e:	6a 0c                	push   0xc
c001f320:	56                   	push   esi
c001f321:	53                   	push   ebx
c001f322:	e8 27 f9 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f327:	83 c4 0c             	add    esp,0xc
c001f32a:	6a 0c                	push   0xc
c001f32c:	56                   	push   esi
c001f32d:	53                   	push   ebx
c001f32e:	e8 1b f9 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f333:	83 c4 0c             	add    esp,0xc
c001f336:	6a 0c                	push   0xc
c001f338:	56                   	push   esi
c001f339:	53                   	push   ebx
c001f33a:	e8 0f f9 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f33f:	68 ec 00 00 00       	push   0xec
c001f344:	6a 07                	push   0x7
c001f346:	56                   	push   esi
c001f347:	53                   	push   ebx
c001f348:	e8 41 f8 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f34d:	83 c4 1c             	add    esp,0x1c
c001f350:	6a 0c                	push   0xc
c001f352:	56                   	push   esi
c001f353:	53                   	push   ebx
c001f354:	e8 f5 f8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f359:	83 c4 0c             	add    esp,0xc
c001f35c:	6a 0c                	push   0xc
c001f35e:	56                   	push   esi
c001f35f:	53                   	push   ebx
c001f360:	e8 e9 f8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f365:	83 c4 0c             	add    esp,0xc
c001f368:	6a 0c                	push   0xc
c001f36a:	56                   	push   esi
c001f36b:	53                   	push   ebx
c001f36c:	e8 dd f8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f371:	83 c4 0c             	add    esp,0xc
c001f374:	6a 0c                	push   0xc
c001f376:	56                   	push   esi
c001f377:	53                   	push   ebx
c001f378:	e8 d1 f8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f37d:	83 c4 0c             	add    esp,0xc
c001f380:	6a 0c                	push   0xc
c001f382:	56                   	push   esi
c001f383:	53                   	push   ebx
c001f384:	e8 c5 f8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f389:	83 c4 10             	add    esp,0x10
c001f38c:	84 c0                	test   al,al
c001f38e:	0f 84 5f 01 00 00    	je     c001f4f3 <IDE::detect()+0x23d>
c001f394:	31 ff                	xor    edi,edi
c001f396:	50                   	push   eax
c001f397:	6a 0c                	push   0xc
c001f399:	56                   	push   esi
c001f39a:	53                   	push   ebx
c001f39b:	e8 ae f8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f3a0:	83 c4 10             	add    esp,0x10
c001f3a3:	a8 01                	test   al,0x1
c001f3a5:	0f 85 69 01 00 00    	jne    c001f514 <IDE::detect()+0x25e>
c001f3ab:	84 c0                	test   al,al
c001f3ad:	78 04                	js     c001f3b3 <IDE::detect()+0xfd>
c001f3af:	a8 08                	test   al,0x8
c001f3b1:	75 23                	jne    c001f3d6 <IDE::detect()+0x120>
c001f3b3:	47                   	inc    edi
c001f3b4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f3ba:	7e da                	jle    c001f396 <IDE::detect()+0xe0>
c001f3bc:	83 ec 0c             	sub    esp,0xc
c001f3bf:	6a 32                	push   0x32
c001f3c1:	e8 56 9c ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c001f3c6:	83 c4 10             	add    esp,0x10
c001f3c9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f3cf:	75 c5                	jne    c001f396 <IDE::detect()+0xe0>
c001f3d1:	e9 3e 01 00 00       	jmp    c001f514 <IDE::detect()+0x25e>
c001f3d6:	31 c9                	xor    ecx,ecx
c001f3d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f3dc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f3e0:	83 ec 0c             	sub    esp,0xc
c001f3e3:	68 80 00 00 00       	push   0x80
c001f3e8:	57                   	push   edi
c001f3e9:	6a 00                	push   0x0
c001f3eb:	56                   	push   esi
c001f3ec:	53                   	push   ebx
c001f3ed:	e8 f8 fd ff ff       	call   c001f1ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f3f2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f3f7:	89 e8                	mov    eax,ebp
c001f3f9:	89 d1                	mov    ecx,edx
c001f3fb:	c1 e0 06             	shl    eax,0x6
c001f3fe:	01 d8                	add    eax,ebx
c001f400:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f407:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f40e:	89 f2                	mov    edx,esi
c001f410:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f416:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f41a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f420:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f424:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f42b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f433:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f43a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f442:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f448:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f44f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f455:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f459:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f45d:	83 c4 20             	add    esp,0x20
c001f460:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f463:	83 c0 02             	add    eax,0x2
c001f466:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f46c:	83 c7 02             	add    edi,0x2
c001f46f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f472:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f478:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f47c:	75 e2                	jne    c001f460 <IDE::detect()+0x1aa>
c001f47e:	89 e8                	mov    eax,ebp
c001f480:	c1 e0 06             	shl    eax,0x6
c001f483:	01 d8                	add    eax,ebx
c001f485:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f48b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f492:	66 c1 ea 09          	shr    dx,0x9
c001f496:	83 e2 01             	and    edx,0x1
c001f499:	84 c9                	test   cl,cl
c001f49b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f4a1:	75 22                	jne    c001f4c5 <IDE::detect()+0x20f>
c001f4a3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f4aa:	74 46                	je     c001f4f2 <IDE::detect()+0x23c>
c001f4ac:	83 ec 0c             	sub    esp,0xc
c001f4af:	68 7c 01 00 00       	push   0x17c
c001f4b4:	e8 9a a8 fe ff       	call   c0009d53 <malloc>
c001f4b9:	89 c7                	mov    edi,eax
c001f4bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4be:	e8 35 06 00 00       	call   c001faf8 <ATA::ATA()>
c001f4c3:	eb 17                	jmp    c001f4dc <IDE::detect()+0x226>
c001f4c5:	83 ec 0c             	sub    esp,0xc
c001f4c8:	68 84 01 00 00       	push   0x184
c001f4cd:	e8 81 a8 fe ff       	call   c0009d53 <malloc>
c001f4d2:	89 c7                	mov    edi,eax
c001f4d4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4d7:	e8 a4 0c 00 00       	call   c0020180 <ATAPI::ATAPI()>
c001f4dc:	5a                   	pop    edx
c001f4dd:	59                   	pop    ecx
c001f4de:	57                   	push   edi
c001f4df:	53                   	push   ebx
c001f4e0:	e8 cd f0 fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001f4e5:	8b 07                	mov    eax,DWORD PTR [edi]
c001f4e7:	53                   	push   ebx
c001f4e8:	55                   	push   ebp
c001f4e9:	6a 00                	push   0x0
c001f4eb:	57                   	push   edi
c001f4ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f4ef:	83 c4 20             	add    esp,0x20
c001f4f2:	45                   	inc    ebp
c001f4f3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f4f8:	74 0d                	je     c001f507 <IDE::detect()+0x251>
c001f4fa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f502:	e9 e0 fd ff ff       	jmp    c001f2e7 <IDE::detect()+0x31>
c001f507:	4e                   	dec    esi
c001f508:	74 61                	je     c001f56b <IDE::detect()+0x2b5>
c001f50a:	be 01 00 00 00       	mov    esi,0x1
c001f50f:	e9 cb fd ff ff       	jmp    c001f2df <IDE::detect()+0x29>
c001f514:	50                   	push   eax
c001f515:	6a 04                	push   0x4
c001f517:	56                   	push   esi
c001f518:	53                   	push   ebx
c001f519:	e8 30 f7 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f51e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f522:	83 c4 0c             	add    esp,0xc
c001f525:	6a 05                	push   0x5
c001f527:	56                   	push   esi
c001f528:	53                   	push   ebx
c001f529:	e8 20 f7 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f535:	80 fa 14             	cmp    dl,0x14
c001f538:	75 04                	jne    c001f53e <IDE::detect()+0x288>
c001f53a:	3c eb                	cmp    al,0xeb
c001f53c:	eb 07                	jmp    c001f545 <IDE::detect()+0x28f>
c001f53e:	3c 96                	cmp    al,0x96
c001f540:	75 b1                	jne    c001f4f3 <IDE::detect()+0x23d>
c001f542:	80 fa 69             	cmp    dl,0x69
c001f545:	75 ac                	jne    c001f4f3 <IDE::detect()+0x23d>
c001f547:	68 a1 00 00 00       	push   0xa1
c001f54c:	6a 07                	push   0x7
c001f54e:	56                   	push   esi
c001f54f:	53                   	push   ebx
c001f550:	e8 39 f6 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f555:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f55c:	e8 bb 9a ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c001f561:	83 c4 10             	add    esp,0x10
c001f564:	b1 01                	mov    cl,0x1
c001f566:	e9 6d fe ff ff       	jmp    c001f3d8 <IDE::detect()+0x122>
c001f56b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f571:	5b                   	pop    ebx
c001f572:	5e                   	pop    esi
c001f573:	5f                   	pop    edi
c001f574:	5d                   	pop    ebp
c001f575:	c3                   	ret    

c001f576 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f576:	55                   	push   ebp
c001f577:	57                   	push   edi
c001f578:	56                   	push   esi
c001f579:	53                   	push   ebx
c001f57a:	83 ec 1c             	sub    esp,0x1c
c001f57d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f581:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f585:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f589:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f58d:	88 c3                	mov    bl,al
c001f58f:	84 c0                	test   al,al
c001f591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f595:	0f 84 81 00 00 00    	je     c001f61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f59b:	83 ec 0c             	sub    esp,0xc
c001f59e:	68 ab 73 02 c0       	push   0xc00273ab
c001f5a3:	e8 97 da fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001f5a8:	83 c4 10             	add    esp,0x10
c001f5ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5af:	3c 01                	cmp    al,0x1
c001f5b1:	74 63                	je     c001f616 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f5b3:	3c 02                	cmp    al,0x2
c001f5b5:	75 53                	jne    c001f60a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f5b7:	d1 e6                	shl    esi,1
c001f5b9:	09 ee                	or     esi,ebp
c001f5bb:	50                   	push   eax
c001f5bc:	89 f0                	mov    eax,esi
c001f5be:	6a 01                	push   0x1
c001f5c0:	0f b6 f0             	movzx  esi,al
c001f5c3:	c1 e6 06             	shl    esi,0x6
c001f5c6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f5ce:	50                   	push   eax
c001f5cf:	57                   	push   edi
c001f5d0:	e8 79 f6 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f5d5:	83 c4 10             	add    esp,0x10
c001f5d8:	a8 01                	test   al,0x1
c001f5da:	74 02                	je     c001f5de <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f5dc:	b3 07                	mov    bl,0x7
c001f5de:	a8 02                	test   al,0x2
c001f5e0:	74 02                	je     c001f5e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f5e2:	b3 03                	mov    bl,0x3
c001f5e4:	a8 04                	test   al,0x4
c001f5e6:	74 02                	je     c001f5ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f5e8:	b3 14                	mov    bl,0x14
c001f5ea:	a8 08                	test   al,0x8
c001f5ec:	74 02                	je     c001f5f0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f5ee:	b3 03                	mov    bl,0x3
c001f5f0:	a8 10                	test   al,0x10
c001f5f2:	74 02                	je     c001f5f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f5f4:	b3 15                	mov    bl,0x15
c001f5f6:	a8 20                	test   al,0x20
c001f5f8:	74 02                	je     c001f5fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f5fa:	b3 03                	mov    bl,0x3
c001f5fc:	a8 40                	test   al,0x40
c001f5fe:	74 02                	je     c001f602 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f600:	b3 16                	mov    bl,0x16
c001f602:	84 c0                	test   al,al
c001f604:	79 16                	jns    c001f61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f606:	b3 0d                	mov    bl,0xd
c001f608:	eb 12                	jmp    c001f61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f60a:	3c 03                	cmp    al,0x3
c001f60c:	74 0c                	je     c001f61a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f60e:	3c 04                	cmp    al,0x4
c001f610:	75 0a                	jne    c001f61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f612:	b3 08                	mov    bl,0x8
c001f614:	eb 06                	jmp    c001f61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f616:	b3 13                	mov    bl,0x13
c001f618:	eb 02                	jmp    c001f61c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f61a:	b3 17                	mov    bl,0x17
c001f61c:	83 c4 1c             	add    esp,0x1c
c001f61f:	88 d8                	mov    al,bl
c001f621:	5b                   	pop    ebx
c001f622:	5e                   	pop    esi
c001f623:	5f                   	pop    edi
c001f624:	5d                   	pop    ebp
c001f625:	c3                   	ret    

c001f626 <IDE::polling(unsigned char, unsigned int)>:
c001f626:	57                   	push   edi
c001f627:	56                   	push   esi
c001f628:	53                   	push   ebx
c001f629:	bb 04 00 00 00       	mov    ebx,0x4
c001f62e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f632:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f637:	52                   	push   edx
c001f638:	6a 0c                	push   0xc
c001f63a:	56                   	push   esi
c001f63b:	57                   	push   edi
c001f63c:	e8 0d f6 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f641:	83 c4 10             	add    esp,0x10
c001f644:	4b                   	dec    ebx
c001f645:	75 f0                	jne    c001f637 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f647:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f64c:	50                   	push   eax
c001f64d:	6a 0c                	push   0xc
c001f64f:	56                   	push   esi
c001f650:	57                   	push   edi
c001f651:	e8 f8 f5 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001f656:	83 c4 10             	add    esp,0x10
c001f659:	a8 01                	test   al,0x1
c001f65b:	75 17                	jne    c001f674 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f65d:	a8 20                	test   al,0x20
c001f65f:	75 0f                	jne    c001f670 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f661:	4b                   	dec    ebx
c001f662:	74 10                	je     c001f674 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f664:	84 c0                	test   al,al
c001f666:	78 e4                	js     c001f64c <IDE::polling(unsigned char, unsigned int)+0x26>
c001f668:	a8 08                	test   al,0x8
c001f66a:	74 e0                	je     c001f64c <IDE::polling(unsigned char, unsigned int)+0x26>
c001f66c:	31 c0                	xor    eax,eax
c001f66e:	eb 06                	jmp    c001f676 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f670:	b0 01                	mov    al,0x1
c001f672:	eb 02                	jmp    c001f676 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f674:	b0 02                	mov    al,0x2
c001f676:	5b                   	pop    ebx
c001f677:	5e                   	pop    esi
c001f678:	5f                   	pop    edi
c001f679:	c3                   	ret    

c001f67a <SATABus::close(int, int, void*)>:
c001f67a:	31 c0                	xor    eax,eax
c001f67c:	c3                   	ret    
c001f67d:	90                   	nop

c001f67e <SATABus::detect()>:
c001f67e:	c3                   	ret    
c001f67f:	90                   	nop

c001f680 <SATABus::SATABus()>:
c001f680:	83 ec 0c             	sub    esp,0xc
c001f683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f687:	83 ec 08             	sub    esp,0x8
c001f68a:	68 e4 73 02 c0       	push   0xc00273e4
c001f68f:	50                   	push   eax
c001f690:	e8 cb f2 fe ff       	call   c000e960 <HardDiskController::HardDiskController(char const*)>
c001f695:	83 c4 10             	add    esp,0x10
c001f698:	ba 7c 74 02 c0       	mov    edx,0xc002747c
c001f69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a1:	89 10                	mov    DWORD PTR [eax],edx
c001f6a3:	83 ec 0c             	sub    esp,0xc
c001f6a6:	6a 50                	push   0x50
c001f6a8:	e8 48 ae fe ff       	call   c000a4f5 <Phys::allocateContiguousPages(int)>
c001f6ad:	83 c4 10             	add    esp,0x10
c001f6b0:	89 c2                	mov    edx,eax
c001f6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f6bc:	83 ec 0c             	sub    esp,0xc
c001f6bf:	6a 50                	push   0x50
c001f6c1:	e8 53 c6 fe ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c001f6c6:	83 c4 10             	add    esp,0x10
c001f6c9:	89 c2                	mov    edx,eax
c001f6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f6d5:	a1 90 8b 02 c0       	mov    eax,ds:0xc0028b90
c001f6da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6de:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f6e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f6e8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f6ee:	83 ec 0c             	sub    esp,0xc
c001f6f1:	6a 03                	push   0x3
c001f6f3:	6a 50                	push   0x50
c001f6f5:	51                   	push   ecx
c001f6f6:	52                   	push   edx
c001f6f7:	50                   	push   eax
c001f6f8:	e8 b9 cf fe ff       	call   c000c6b6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f6fd:	83 c4 20             	add    esp,0x20
c001f700:	90                   	nop
c001f701:	83 c4 0c             	add    esp,0xc
c001f704:	c3                   	ret    
c001f705:	90                   	nop

c001f706 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f70a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f70d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f710:	09 c2                	or     edx,eax
c001f712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f716:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f71c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f71e:	31 c0                	xor    eax,eax
c001f720:	c1 e9 08             	shr    ecx,0x8
c001f723:	83 e1 0f             	and    ecx,0xf
c001f726:	39 c8                	cmp    eax,ecx
c001f728:	74 0a                	je     c001f734 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f72a:	f6 c2 01             	test   dl,0x1
c001f72d:	74 08                	je     c001f737 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f72f:	d1 ea                	shr    edx,1
c001f731:	40                   	inc    eax
c001f732:	eb f2                	jmp    c001f726 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f734:	83 c8 ff             	or     eax,0xffffffff
c001f737:	c3                   	ret    

c001f738 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f738:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f73c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f73f:	89 c2                	mov    edx,eax
c001f741:	c1 ea 08             	shr    edx,0x8
c001f744:	83 e2 0f             	and    edx,0xf
c001f747:	fe ca                	dec    dl
c001f749:	75 31                	jne    c001f77c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f74b:	83 e0 0f             	and    eax,0xf
c001f74e:	3c 03                	cmp    al,0x3
c001f750:	75 2a                	jne    c001f77c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f752:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f755:	b8 02 00 00 00       	mov    eax,0x2
c001f75a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f760:	74 1c                	je     c001f77e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f762:	b8 04 00 00 00       	mov    eax,0x4
c001f767:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f76d:	74 0f                	je     c001f77e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f76f:	31 c0                	xor    eax,eax
c001f771:	83 fa 03             	cmp    edx,0x3
c001f774:	0f 94 c0             	sete   al
c001f777:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f77b:	c3                   	ret    
c001f77c:	31 c0                	xor    eax,eax
c001f77e:	c3                   	ret    
c001f77f:	90                   	nop

c001f780 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f784:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f787:	0f ba e2 0f          	bt     edx,0xf
c001f78b:	72 f7                	jb     c001f784 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f78d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f790:	83 ca 10             	or     edx,0x10
c001f793:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f796:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f799:	83 ca 01             	or     edx,0x1
c001f79c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f79f:	c3                   	ret    

c001f7a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f7a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7a7:	83 e2 fe             	and    edx,0xfffffffe
c001f7aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7b0:	83 e2 ef             	and    edx,0xffffffef
c001f7b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f7b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7b9:	0f ba e2 0e          	bt     edx,0xe
c001f7bd:	72 f7                	jb     c001f7b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f7bf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f7c2:	0f ba e2 0f          	bt     edx,0xf
c001f7c6:	72 ee                	jb     c001f7b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f7c8:	c3                   	ret    
c001f7c9:	90                   	nop

c001f7ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f7ca:	55                   	push   ebp
c001f7cb:	57                   	push   edi
c001f7cc:	56                   	push   esi
c001f7cd:	53                   	push   ebx
c001f7ce:	83 ec 1c             	sub    esp,0x1c
c001f7d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f7d9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7dd:	53                   	push   ebx
c001f7de:	89 fd                	mov    ebp,edi
c001f7e0:	56                   	push   esi
c001f7e1:	c1 e5 0a             	shl    ebp,0xa
c001f7e4:	e8 b7 ff ff ff       	call   c001f7a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f7e9:	83 ec 0c             	sub    esp,0xc
c001f7ec:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f7f2:	01 e8                	add    eax,ebp
c001f7f4:	89 03                	mov    DWORD PTR [ebx],eax
c001f7f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f7f8:	68 00 04 00 00       	push   0x400
c001f7fd:	6a 00                	push   0x0
c001f7ff:	50                   	push   eax
c001f800:	e8 77 0e fe ff       	call   c000067c <memset>
c001f805:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f80b:	89 fa                	mov    edx,edi
c001f80d:	01 e8                	add    eax,ebp
c001f80f:	c1 e7 0d             	shl    edi,0xd
c001f812:	89 03                	mov    DWORD PTR [ebx],eax
c001f814:	c1 e2 08             	shl    edx,0x8
c001f817:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f81e:	81 c2 00 80 00 00    	add    edx,0x8000
c001f824:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f828:	89 d0                	mov    eax,edx
c001f82a:	83 c4 1c             	add    esp,0x1c
c001f82d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f833:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f836:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f839:	68 00 01 00 00       	push   0x100
c001f83e:	6a 00                	push   0x0
c001f840:	50                   	push   eax
c001f841:	e8 36 0e fe ff       	call   c000067c <memset>
c001f846:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f84a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f850:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f856:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f85a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f85d:	83 c4 10             	add    esp,0x10
c001f860:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f867:	31 ff                	xor    edi,edi
c001f869:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f86f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f879:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f87f:	83 c5 20             	add    ebp,0x20
c001f882:	01 f8                	add    eax,edi
c001f884:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f887:	52                   	push   edx
c001f888:	68 00 01 00 00       	push   0x100
c001f88d:	6a 00                	push   0x0
c001f88f:	50                   	push   eax
c001f890:	e8 e7 0d fe ff       	call   c000067c <memset>
c001f895:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f899:	83 c4 10             	add    esp,0x10
c001f89c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f8a2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f8a9:	01 f8                	add    eax,edi
c001f8ab:	81 c7 00 01 00 00    	add    edi,0x100
c001f8b1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f8b4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f8ba:	75 b3                	jne    c001f86f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f8bc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f8c0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f8c4:	83 c4 1c             	add    esp,0x1c
c001f8c7:	5b                   	pop    ebx
c001f8c8:	5e                   	pop    esi
c001f8c9:	5f                   	pop    edi
c001f8ca:	5d                   	pop    ebp
c001f8cb:	e9 b0 fe ff ff       	jmp    c001f780 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f8d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f8d0:	55                   	push   ebp
c001f8d1:	57                   	push   edi
c001f8d2:	56                   	push   esi
c001f8d3:	53                   	push   ebx
c001f8d4:	83 ec 0c             	sub    esp,0xc
c001f8d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f8db:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001f8e2:	74 2d                	je     c001f911 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	68 08 74 02 c0       	push   0xc0027408
c001f8ec:	e8 bc a4 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f8f1:	83 c4 10             	add    esp,0x10
c001f8f4:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001f8fb:	75 14                	jne    c001f911 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f8fd:	e4 60                	in     al,0x60
c001f8ff:	3c 1c                	cmp    al,0x1c
c001f901:	74 04                	je     c001f907 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f903:	3c 5a                	cmp    al,0x5a
c001f905:	75 f6                	jne    c001f8fd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f907:	e4 60                	in     al,0x60
c001f909:	3c 5a                	cmp    al,0x5a
c001f90b:	74 fa                	je     c001f907 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f90d:	3c 1c                	cmp    al,0x1c
c001f90f:	74 f6                	je     c001f907 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f911:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f915:	31 db                	xor    ebx,ebx
c001f917:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f91a:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f920:	0f 84 78 01 00 00    	je     c001fa9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f926:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f92a:	89 d8                	mov    eax,ebx
c001f92c:	c1 e0 07             	shl    eax,0x7
c001f92f:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f936:	50                   	push   eax
c001f937:	50                   	push   eax
c001f938:	57                   	push   edi
c001f939:	56                   	push   esi
c001f93a:	e8 f9 fd ff ff       	call   c001f738 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f93f:	83 c4 10             	add    esp,0x10
c001f942:	83 f8 01             	cmp    eax,0x1
c001f945:	0f 85 19 01 00 00    	jne    c001fa64 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f94b:	50                   	push   eax
c001f94c:	53                   	push   ebx
c001f94d:	57                   	push   edi
c001f94e:	56                   	push   esi
c001f94f:	e8 76 fe ff ff       	call   c001f7ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f954:	83 c4 10             	add    esp,0x10
c001f957:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001f95e:	74 2d                	je     c001f98d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f960:	83 ec 0c             	sub    esp,0xc
c001f963:	68 1d 74 02 c0       	push   0xc002741d
c001f968:	e8 40 a4 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f96d:	83 c4 10             	add    esp,0x10
c001f970:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001f977:	75 14                	jne    c001f98d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f979:	e4 60                	in     al,0x60
c001f97b:	3c 1c                	cmp    al,0x1c
c001f97d:	74 04                	je     c001f983 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f97f:	3c 5a                	cmp    al,0x5a
c001f981:	75 f6                	jne    c001f979 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f983:	e4 60                	in     al,0x60
c001f985:	3c 5a                	cmp    al,0x5a
c001f987:	74 fa                	je     c001f983 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f989:	3c 1c                	cmp    al,0x1c
c001f98b:	74 f6                	je     c001f983 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f98d:	83 ec 0c             	sub    esp,0xc
c001f990:	68 7c 01 00 00       	push   0x17c
c001f995:	e8 b9 a3 fe ff       	call   c0009d53 <malloc>
c001f99a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f99d:	89 c7                	mov    edi,eax
c001f99f:	e8 14 10 00 00       	call   c00209b8 <SATA::SATA()>
c001f9a4:	83 c4 10             	add    esp,0x10
c001f9a7:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001f9ae:	74 2d                	je     c001f9dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	68 32 74 02 c0       	push   0xc0027432
c001f9b8:	e8 f0 a3 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f9bd:	83 c4 10             	add    esp,0x10
c001f9c0:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001f9c7:	75 14                	jne    c001f9dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f9c9:	e4 60                	in     al,0x60
c001f9cb:	3c 5a                	cmp    al,0x5a
c001f9cd:	74 04                	je     c001f9d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f9cf:	3c 1c                	cmp    al,0x1c
c001f9d1:	75 f6                	jne    c001f9c9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f9d3:	e4 60                	in     al,0x60
c001f9d5:	3c 5a                	cmp    al,0x5a
c001f9d7:	74 fa                	je     c001f9d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f9d9:	3c 1c                	cmp    al,0x1c
c001f9db:	74 f6                	je     c001f9d3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f9dd:	50                   	push   eax
c001f9de:	50                   	push   eax
c001f9df:	57                   	push   edi
c001f9e0:	56                   	push   esi
c001f9e1:	e8 cc eb fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001f9e6:	83 c4 10             	add    esp,0x10
c001f9e9:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001f9f0:	74 2d                	je     c001fa1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f9f2:	83 ec 0c             	sub    esp,0xc
c001f9f5:	68 47 74 02 c0       	push   0xc0027447
c001f9fa:	e8 ae a3 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001fa09:	75 14                	jne    c001fa1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fa0b:	e4 60                	in     al,0x60
c001fa0d:	3c 1c                	cmp    al,0x1c
c001fa0f:	74 04                	je     c001fa15 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa11:	3c 5a                	cmp    al,0x5a
c001fa13:	75 f6                	jne    c001fa0b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fa15:	e4 60                	in     al,0x60
c001fa17:	3c 5a                	cmp    al,0x5a
c001fa19:	74 fa                	je     c001fa15 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa1b:	3c 1c                	cmp    al,0x1c
c001fa1d:	74 f6                	je     c001fa15 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fa1f:	8b 07                	mov    eax,DWORD PTR [edi]
c001fa21:	56                   	push   esi
c001fa22:	6a 00                	push   0x0
c001fa24:	53                   	push   ebx
c001fa25:	57                   	push   edi
c001fa26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa29:	83 c4 10             	add    esp,0x10
c001fa2c:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c001fa33:	74 69                	je     c001fa9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa35:	83 ec 0c             	sub    esp,0xc
c001fa38:	68 5c 74 02 c0       	push   0xc002745c
c001fa3d:	e8 6b a3 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c001fa42:	83 c4 10             	add    esp,0x10
c001fa45:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c001fa4c:	75 50                	jne    c001fa9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa4e:	e4 60                	in     al,0x60
c001fa50:	3c 1c                	cmp    al,0x1c
c001fa52:	74 04                	je     c001fa58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa54:	3c 5a                	cmp    al,0x5a
c001fa56:	75 f6                	jne    c001fa4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fa58:	e4 60                	in     al,0x60
c001fa5a:	3c 5a                	cmp    al,0x5a
c001fa5c:	74 fa                	je     c001fa58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa5e:	3c 1c                	cmp    al,0x1c
c001fa60:	74 f6                	je     c001fa58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fa62:	eb 3a                	jmp    c001fa9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa64:	83 f8 04             	cmp    eax,0x4
c001fa67:	75 35                	jne    c001fa9e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fa69:	50                   	push   eax
c001fa6a:	53                   	push   ebx
c001fa6b:	57                   	push   edi
c001fa6c:	56                   	push   esi
c001fa6d:	e8 58 fd ff ff       	call   c001f7ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fa72:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fa79:	e8 d5 a2 fe ff       	call   c0009d53 <malloc>
c001fa7e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa81:	89 c7                	mov    edi,eax
c001fa83:	e8 a6 17 00 00       	call   c002122e <SATAPI::SATAPI()>
c001fa88:	5a                   	pop    edx
c001fa89:	59                   	pop    ecx
c001fa8a:	57                   	push   edi
c001fa8b:	56                   	push   esi
c001fa8c:	e8 21 eb fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c001fa91:	8b 07                	mov    eax,DWORD PTR [edi]
c001fa93:	56                   	push   esi
c001fa94:	6a 00                	push   0x0
c001fa96:	53                   	push   ebx
c001fa97:	57                   	push   edi
c001fa98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa9b:	83 c4 20             	add    esp,0x20
c001fa9e:	d1 ed                	shr    ebp,1
c001faa0:	43                   	inc    ebx
c001faa1:	83 fb 20             	cmp    ebx,0x20
c001faa4:	0f 85 70 fe ff ff    	jne    c001f91a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001faaa:	83 c4 0c             	add    esp,0xc
c001faad:	5b                   	pop    ebx
c001faae:	5e                   	pop    esi
c001faaf:	5f                   	pop    edi
c001fab0:	5d                   	pop    ebp
c001fab1:	c3                   	ret    

c001fab2 <SATABus::open(int, int, void*)>:
c001fab2:	83 ec 14             	sub    esp,0x14
c001fab5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fab9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001fabf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fac5:	52                   	push   edx
c001fac6:	50                   	push   eax
c001fac7:	e8 04 fe ff ff       	call   c001f8d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001facc:	31 c0                	xor    eax,eax
c001face:	83 c4 1c             	add    esp,0x1c
c001fad1:	c3                   	ret    

c001fad2 <ATA::close(int, int, void*)>:
c001fad2:	83 ec 0c             	sub    esp,0xc
c001fad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fadf:	85 c0                	test   eax,eax
c001fae1:	74 0c                	je     c001faef <ATA::close(int, int, void*)+0x1d>
c001fae3:	83 ec 0c             	sub    esp,0xc
c001fae6:	8b 10                	mov    edx,DWORD PTR [eax]
c001fae8:	50                   	push   eax
c001fae9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001faec:	83 c4 10             	add    esp,0x10
c001faef:	31 c0                	xor    eax,eax
c001faf1:	83 c4 0c             	add    esp,0xc
c001faf4:	c3                   	ret    
c001faf5:	90                   	nop

c001faf6 <ATA::powerSaving(PowerSavingLevel)>:
c001faf6:	c3                   	ret    
c001faf7:	90                   	nop

c001faf8 <ATA::ATA()>:
c001faf8:	83 ec 0c             	sub    esp,0xc
c001fafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faff:	83 ec 04             	sub    esp,0x4
c001fb02:	68 00 02 00 00       	push   0x200
c001fb07:	68 eb 75 02 c0       	push   0xc00275eb
c001fb0c:	50                   	push   eax
c001fb0d:	e8 d8 ee fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb12:	83 c4 10             	add    esp,0x10
c001fb15:	ba f4 74 02 c0       	mov    edx,0xc00274f4
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	89 10                	mov    DWORD PTR [eax],edx
c001fb20:	90                   	nop
c001fb21:	83 c4 0c             	add    esp,0xc
c001fb24:	c3                   	ret    
c001fb25:	90                   	nop

c001fb26 <ATA::flush(bool)>:
c001fb26:	53                   	push   ebx
c001fb27:	83 ec 08             	sub    esp,0x8
c001fb2a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fb2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb33:	19 c0                	sbb    eax,eax
c001fb35:	83 e0 fd             	and    eax,0xfffffffd
c001fb38:	05 ea 00 00 00       	add    eax,0xea
c001fb3d:	50                   	push   eax
c001fb3e:	6a 07                	push   0x7
c001fb40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb47:	50                   	push   eax
c001fb48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb4e:	e8 3b f0 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb53:	83 c4 0c             	add    esp,0xc
c001fb56:	6a 00                	push   0x0
c001fb58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb5f:	50                   	push   eax
c001fb60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb66:	e8 bb fa ff ff       	call   c001f626 <IDE::polling(unsigned char, unsigned int)>
c001fb6b:	83 c4 18             	add    esp,0x18
c001fb6e:	5b                   	pop    ebx
c001fb6f:	c3                   	ret    

c001fb70 <ATA::readyForCommand()>:
c001fb70:	56                   	push   esi
c001fb71:	53                   	push   ebx
c001fb72:	53                   	push   ebx
c001fb73:	31 db                	xor    ebx,ebx
c001fb75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb79:	51                   	push   ecx
c001fb7a:	6a 0c                	push   0xc
c001fb7c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb83:	50                   	push   eax
c001fb84:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb8a:	e8 bf f0 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c001fb8f:	83 c4 10             	add    esp,0x10
c001fb92:	a8 88                	test   al,0x88
c001fb94:	74 1f                	je     c001fbb5 <ATA::readyForCommand()+0x45>
c001fb96:	43                   	inc    ebx
c001fb97:	83 fb 63             	cmp    ebx,0x63
c001fb9a:	7e dd                	jle    c001fb79 <ATA::readyForCommand()+0x9>
c001fb9c:	83 ec 0c             	sub    esp,0xc
c001fb9f:	6a 0a                	push   0xa
c001fba1:	e8 76 94 ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c001fba6:	83 c4 10             	add    esp,0x10
c001fba9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fbaf:	75 c8                	jne    c001fb79 <ATA::readyForCommand()+0x9>
c001fbb1:	31 c0                	xor    eax,eax
c001fbb3:	eb 02                	jmp    c001fbb7 <ATA::readyForCommand()+0x47>
c001fbb5:	b0 01                	mov    al,0x1
c001fbb7:	5a                   	pop    edx
c001fbb8:	5b                   	pop    ebx
c001fbb9:	5e                   	pop    esi
c001fbba:	c3                   	ret    
c001fbbb:	90                   	nop

c001fbbc <ATA::access(unsigned long long, int, void*, bool)>:
c001fbbc:	55                   	push   ebp
c001fbbd:	57                   	push   edi
c001fbbe:	56                   	push   esi
c001fbbf:	53                   	push   ebx
c001fbc0:	83 ec 38             	sub    esp,0x38
c001fbc3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fbc7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fbcb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fbcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fbd3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fbd7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fbdb:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fbdf:	68 a0 74 02 c0       	push   0xc00274a0
c001fbe4:	e8 56 d4 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fbe9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fbfc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc00:	c1 e0 06             	shl    eax,0x6
c001fc03:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fc0b:	74 5d                	je     c001fc6a <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fc0d:	89 fa                	mov    edx,edi
c001fc0f:	89 f0                	mov    eax,esi
c001fc11:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fc15:	c1 ea 1c             	shr    edx,0x1c
c001fc18:	89 d1                	mov    ecx,edx
c001fc1a:	09 c1                	or     ecx,eax
c001fc1c:	74 25                	je     c001fc43 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fc1e:	31 ed                	xor    ebp,ebp
c001fc20:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fc27:	89 fa                	mov    edx,edi
c001fc29:	89 f0                	mov    eax,esi
c001fc2b:	0f ad d0             	shrd   eax,edx,cl
c001fc2e:	d3 ea                	shr    edx,cl
c001fc30:	f6 c1 20             	test   cl,0x20
c001fc33:	74 02                	je     c001fc37 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fc35:	89 d0                	mov    eax,edx
c001fc37:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fc3b:	45                   	inc    ebp
c001fc3c:	83 fd 06             	cmp    ebp,0x6
c001fc3f:	75 df                	jne    c001fc20 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fc41:	eb 76                	jmp    c001fcb9 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fc43:	89 f0                	mov    eax,esi
c001fc45:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fc4a:	89 fa                	mov    edx,edi
c001fc4c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc53:	0f ac d0 10          	shrd   eax,edx,0x10
c001fc57:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc5c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc60:	c1 ee 18             	shr    esi,0x18
c001fc63:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fc68:	eb 56                	jmp    c001fcc0 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fc6a:	6a 00                	push   0x0
c001fc6c:	6a 3f                	push   0x3f
c001fc6e:	57                   	push   edi
c001fc6f:	56                   	push   esi
c001fc70:	e8 97 32 00 00       	call   c0022f0c <__umoddi3>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	40                   	inc    eax
c001fc79:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fc7d:	6a 00                	push   0x0
c001fc7f:	68 f0 03 00 00       	push   0x3f0
c001fc84:	57                   	push   edi
c001fc85:	56                   	push   esi
c001fc86:	e8 81 31 00 00       	call   c0022e0c <__udivdi3>
c001fc8b:	83 c4 10             	add    esp,0x10
c001fc8e:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fc93:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc9f:	6a 00                	push   0x0
c001fca1:	6a 3f                	push   0x3f
c001fca3:	57                   	push   edi
c001fca4:	56                   	push   esi
c001fca5:	e8 62 31 00 00       	call   c0022e0c <__udivdi3>
c001fcaa:	83 c4 10             	add    esp,0x10
c001fcad:	89 c6                	mov    esi,eax
c001fcaf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fcb4:	83 e6 0f             	and    esi,0xf
c001fcb7:	eb 07                	jmp    c001fcc0 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fcb9:	31 f6                	xor    esi,esi
c001fcbb:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fcc0:	bf 01 00 00 00       	mov    edi,0x1
c001fcc5:	50                   	push   eax
c001fcc6:	6a 00                	push   0x0
c001fcc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fccf:	50                   	push   eax
c001fcd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fcd4:	e8 bd f0 ff ff       	call   c001ed96 <IDE::enableIRQs(unsigned char, bool)>
c001fcd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcdc:	e8 8f fe ff ff       	call   c001fb70 <ATA::readyForCommand()>
c001fce1:	83 c4 10             	add    esp,0x10
c001fce4:	84 c0                	test   al,al
c001fce6:	0f 84 bc 02 00 00    	je     c001ffa8 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fcec:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fcf2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fcf8:	c1 e0 04             	shl    eax,0x4
c001fcfb:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001fd02:	09 c6                	or     esi,eax
c001fd04:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd09:	75 05                	jne    c001fd10 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001fd0b:	83 ce a0             	or     esi,0xffffffa0
c001fd0e:	eb 03                	jmp    c001fd13 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001fd10:	83 ce e0             	or     esi,0xffffffe0
c001fd13:	89 f0                	mov    eax,esi
c001fd15:	0f b6 f0             	movzx  esi,al
c001fd18:	56                   	push   esi
c001fd19:	6a 06                	push   0x6
c001fd1b:	51                   	push   ecx
c001fd1c:	52                   	push   edx
c001fd1d:	e8 6c ee ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd22:	83 c4 10             	add    esp,0x10
c001fd25:	6a 00                	push   0x0
c001fd27:	6a 01                	push   0x1
c001fd29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd30:	50                   	push   eax
c001fd31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd37:	e8 52 ee ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd3c:	83 c4 10             	add    esp,0x10
c001fd3f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fd44:	75 6e                	jne    c001fdb4 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fd46:	6a 00                	push   0x0
c001fd48:	6a 08                	push   0x8
c001fd4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd51:	50                   	push   eax
c001fd52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd58:	e8 31 ee ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd5d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd62:	50                   	push   eax
c001fd63:	6a 09                	push   0x9
c001fd65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd6c:	50                   	push   eax
c001fd6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd73:	e8 16 ee ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd78:	83 c4 20             	add    esp,0x20
c001fd7b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fd80:	50                   	push   eax
c001fd81:	6a 0a                	push   0xa
c001fd83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd8a:	50                   	push   eax
c001fd8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd91:	e8 f8 ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd96:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fd9b:	50                   	push   eax
c001fd9c:	6a 0b                	push   0xb
c001fd9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fda5:	50                   	push   eax
c001fda6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdac:	e8 dd ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdb1:	83 c4 20             	add    esp,0x20
c001fdb4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fdb9:	50                   	push   eax
c001fdba:	6a 02                	push   0x2
c001fdbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdc3:	50                   	push   eax
c001fdc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdca:	e8 bf ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdcf:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fdd4:	50                   	push   eax
c001fdd5:	6a 03                	push   0x3
c001fdd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdde:	50                   	push   eax
c001fddf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde5:	e8 a4 ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdea:	83 c4 20             	add    esp,0x20
c001fded:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fdf2:	50                   	push   eax
c001fdf3:	6a 04                	push   0x4
c001fdf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdfc:	50                   	push   eax
c001fdfd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe03:	e8 86 ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe08:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fe0d:	50                   	push   eax
c001fe0e:	6a 05                	push   0x5
c001fe10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe17:	50                   	push   eax
c001fe18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe1e:	e8 6b ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe23:	83 c4 20             	add    esp,0x20
c001fe26:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fe2b:	0f 94 c0             	sete   al
c001fe2e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe33:	74 09                	je     c001fe3e <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fe35:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fe3c:	eb 07                	jmp    c001fe45 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fe3e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fe45:	0f b6 c0             	movzx  eax,al
c001fe48:	50                   	push   eax
c001fe49:	6a 07                	push   0x7
c001fe4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe52:	50                   	push   eax
c001fe53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe59:	e8 30 ed ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe5e:	c7 04 24 ad 74 02 c0 	mov    DWORD PTR [esp],0xc00274ad
c001fe65:	e8 d5 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fe6a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fe6e:	83 c4 10             	add    esp,0x10
c001fe71:	85 f6                	test   esi,esi
c001fe73:	0f 84 f7 00 00 00    	je     c001ff70 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fe79:	83 ec 0c             	sub    esp,0xc
c001fe7c:	68 b0 74 02 c0       	push   0xc00274b0
c001fe81:	e8 b9 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fe86:	83 c4 0c             	add    esp,0xc
c001fe89:	6a 01                	push   0x1
c001fe8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe92:	50                   	push   eax
c001fe93:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe99:	e8 88 f7 ff ff       	call   c001f626 <IDE::polling(unsigned char, unsigned int)>
c001fe9e:	c7 04 24 b3 74 02 c0 	mov    DWORD PTR [esp],0xc00274b3
c001fea5:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fea9:	e8 91 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001feae:	83 c4 10             	add    esp,0x10
c001feb1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001feb5:	84 c0                	test   al,al
c001feb7:	74 2b                	je     c001fee4 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001feb9:	0f b6 f8             	movzx  edi,al
c001febc:	57                   	push   edi
c001febd:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fec4:	50                   	push   eax
c001fec5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fecc:	50                   	push   eax
c001fecd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fed3:	e8 9e f6 ff ff       	call   c001f576 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fed8:	c7 04 24 b6 74 02 c0 	mov    DWORD PTR [esp],0xc00274b6
c001fedf:	e9 bc 00 00 00       	jmp    c001ffa0 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fee4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fee9:	74 50                	je     c001ff3b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	31 ed                	xor    ebp,ebp
c001fef0:	68 c1 74 02 c0       	push   0xc00274c1
c001fef5:	e8 45 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001fefa:	83 c4 10             	add    esp,0x10
c001fefd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ff01:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001ff05:	50                   	push   eax
c001ff06:	50                   	push   eax
c001ff07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff0e:	50                   	push   eax
c001ff0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff15:	e8 62 ec ff ff       	call   c001eb7c <IDE::getBase(unsigned char)>
c001ff1a:	89 c2                	mov    edx,eax
c001ff1c:	89 f8                	mov    eax,edi
c001ff1e:	66 ef                	out    dx,ax
c001ff20:	45                   	inc    ebp
c001ff21:	83 c4 10             	add    esp,0x10
c001ff24:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001ff2a:	75 d1                	jne    c001fefd <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	68 c4 74 02 c0       	push   0xc00274c4
c001ff34:	e8 06 d1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ff39:	eb 24                	jmp    c001ff5f <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001ff3b:	51                   	push   ecx
c001ff3c:	51                   	push   ecx
c001ff3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff44:	50                   	push   eax
c001ff45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff4b:	e8 2c ec ff ff       	call   c001eb7c <IDE::getBase(unsigned char)>
c001ff50:	b9 00 01 00 00       	mov    ecx,0x100
c001ff55:	89 c2                	mov    edx,eax
c001ff57:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff5b:	fc                   	cld    
c001ff5c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff5f:	83 c4 10             	add    esp,0x10
c001ff62:	4e                   	dec    esi
c001ff63:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ff6b:	e9 01 ff ff ff       	jmp    c001fe71 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ff70:	31 ff                	xor    edi,edi
c001ff72:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff77:	74 2f                	je     c001ffa8 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	68 c7 74 02 c0       	push   0xc00274c7
c001ff81:	e8 b9 d0 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ff86:	58                   	pop    eax
c001ff87:	31 c0                	xor    eax,eax
c001ff89:	5a                   	pop    edx
c001ff8a:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ff8f:	0f 94 c0             	sete   al
c001ff92:	50                   	push   eax
c001ff93:	53                   	push   ebx
c001ff94:	e8 8d fb ff ff       	call   c001fb26 <ATA::flush(bool)>
c001ff99:	c7 04 24 ca 74 02 c0 	mov    DWORD PTR [esp],0xc00274ca
c001ffa0:	e8 9a d0 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	83 c4 2c             	add    esp,0x2c
c001ffab:	89 f8                	mov    eax,edi
c001ffad:	5b                   	pop    ebx
c001ffae:	5e                   	pop    esi
c001ffaf:	5f                   	pop    edi
c001ffb0:	5d                   	pop    ebp
c001ffb1:	c3                   	ret    

c001ffb2 <ATA::read(unsigned long long, int, void*)>:
c001ffb2:	57                   	push   edi
c001ffb3:	b8 04 00 00 00       	mov    eax,0x4
c001ffb8:	56                   	push   esi
c001ffb9:	53                   	push   ebx
c001ffba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffbe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ffc2:	8d 7a ff             	lea    edi,[edx-0x1]
c001ffc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ffc9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ffcd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ffd3:	77 25                	ja     c001fffa <ATA::read(unsigned long long, int, void*)+0x48>
c001ffd5:	b8 06 00 00 00       	mov    eax,0x6
c001ffda:	85 f6                	test   esi,esi
c001ffdc:	74 1c                	je     c001fffa <ATA::read(unsigned long long, int, void*)+0x48>
c001ffde:	50                   	push   eax
c001ffdf:	50                   	push   eax
c001ffe0:	6a 00                	push   0x0
c001ffe2:	56                   	push   esi
c001ffe3:	52                   	push   edx
c001ffe4:	53                   	push   ebx
c001ffe5:	51                   	push   ecx
c001ffe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ffea:	e8 cd fb ff ff       	call   c001fbbc <ATA::access(unsigned long long, int, void*, bool)>
c001ffef:	83 c4 20             	add    esp,0x20
c001fff2:	85 c0                	test   eax,eax
c001fff4:	0f 95 c0             	setne  al
c001fff7:	0f b6 c0             	movzx  eax,al
c001fffa:	5b                   	pop    ebx
c001fffb:	5e                   	pop    esi
c001fffc:	5f                   	pop    edi
c001fffd:	c3                   	ret    

c001fffe <ATA::write(unsigned long long, int, void*)>:
c001fffe:	55                   	push   ebp
c001ffff:	57                   	push   edi
c0020000:	56                   	push   esi
c0020001:	53                   	push   ebx
c0020002:	83 ec 18             	sub    esp,0x18
c0020005:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020009:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002000d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020011:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020015:	68 cd 74 02 c0       	push   0xc00274cd
c002001a:	e8 20 d0 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002001f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020022:	83 c4 10             	add    esp,0x10
c0020025:	b8 04 00 00 00       	mov    eax,0x4
c002002a:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020030:	77 25                	ja     c0020057 <ATA::write(unsigned long long, int, void*)+0x59>
c0020032:	b8 06 00 00 00       	mov    eax,0x6
c0020037:	85 f6                	test   esi,esi
c0020039:	74 1c                	je     c0020057 <ATA::write(unsigned long long, int, void*)+0x59>
c002003b:	50                   	push   eax
c002003c:	50                   	push   eax
c002003d:	6a 01                	push   0x1
c002003f:	56                   	push   esi
c0020040:	53                   	push   ebx
c0020041:	55                   	push   ebp
c0020042:	57                   	push   edi
c0020043:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020047:	e8 70 fb ff ff       	call   c001fbbc <ATA::access(unsigned long long, int, void*, bool)>
c002004c:	83 c4 20             	add    esp,0x20
c002004f:	85 c0                	test   eax,eax
c0020051:	0f 95 c0             	setne  al
c0020054:	0f b6 c0             	movzx  eax,al
c0020057:	83 c4 0c             	add    esp,0xc
c002005a:	5b                   	pop    ebx
c002005b:	5e                   	pop    esi
c002005c:	5f                   	pop    edi
c002005d:	5d                   	pop    ebp
c002005e:	c3                   	ret    
c002005f:	90                   	nop

c0020060 <ATA::detectCHS()>:
c0020060:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020064:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002006a:	c1 e0 06             	shl    eax,0x6
c002006d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020073:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002007d:	c7 44 24 04 d9 74 02 c0 	mov    DWORD PTR [esp+0x4],0xc00274d9
c0020085:	e9 6b 4f ff ff       	jmp    c0014ff5 <Krnl::panic(char const*)>

c002008a <ATA::open(int, int, void*)>:
c002008a:	53                   	push   ebx
c002008b:	83 ec 08             	sub    esp,0x8
c002008e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020092:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020096:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002009a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200a0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00200a6:	c1 e0 06             	shl    eax,0x6
c00200a9:	01 d0                	add    eax,edx
c00200ab:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00200b2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00200b8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00200bf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00200c9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00200cf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00200d6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00200dd:	75 0c                	jne    c00200eb <ATA::open(int, int, void*)+0x61>
c00200df:	83 ec 0c             	sub    esp,0xc
c00200e2:	53                   	push   ebx
c00200e3:	e8 78 ff ff ff       	call   c0020060 <ATA::detectCHS()>
c00200e8:	83 c4 10             	add    esp,0x10
c00200eb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00200f1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00200f7:	c1 e0 06             	shl    eax,0x6
c00200fa:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020101:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002010b:	d1 e8                	shr    eax,1
c002010d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020113:	6a 04                	push   0x4
c0020115:	6a 0c                	push   0xc
c0020117:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002011e:	50                   	push   eax
c002011f:	52                   	push   edx
c0020120:	e8 69 ea ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020125:	90                   	nop
c0020126:	90                   	nop
c0020127:	6a 00                	push   0x0
c0020129:	6a 0c                	push   0xc
c002012b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020132:	50                   	push   eax
c0020133:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020139:	e8 50 ea ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002013e:	83 c4 14             	add    esp,0x14
c0020141:	53                   	push   ebx
c0020142:	e8 0b e9 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0020147:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002014a:	e8 4f 09 ff ff       	call   c0010a9e <createPartitionsForDisk(PhysicalDisk*)>
c002014f:	31 c0                	xor    eax,eax
c0020151:	83 c4 18             	add    esp,0x18
c0020154:	5b                   	pop    ebx
c0020155:	c3                   	ret    

c0020156 <ATAPI::write(unsigned long long, int, void*)>:
c0020156:	b8 03 00 00 00       	mov    eax,0x3
c002015b:	c3                   	ret    

c002015c <ATAPI::close(int, int, void*)>:
c002015c:	83 ec 0c             	sub    esp,0xc
c002015f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020163:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020169:	85 c0                	test   eax,eax
c002016b:	74 0c                	je     c0020179 <ATAPI::close(int, int, void*)+0x1d>
c002016d:	83 ec 0c             	sub    esp,0xc
c0020170:	8b 10                	mov    edx,DWORD PTR [eax]
c0020172:	50                   	push   eax
c0020173:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020176:	83 c4 10             	add    esp,0x10
c0020179:	31 c0                	xor    eax,eax
c002017b:	83 c4 0c             	add    esp,0xc
c002017e:	c3                   	ret    
c002017f:	90                   	nop

c0020180 <ATAPI::ATAPI()>:
c0020180:	83 ec 0c             	sub    esp,0xc
c0020183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020187:	83 ec 04             	sub    esp,0x4
c002018a:	68 00 08 00 00       	push   0x800
c002018f:	68 c5 77 02 c0       	push   0xc00277c5
c0020194:	50                   	push   eax
c0020195:	e8 50 e8 fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c002019a:	83 c4 10             	add    esp,0x10
c002019d:	ba 58 75 02 c0       	mov    edx,0xc0027558
c00201a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a6:	89 10                	mov    DWORD PTR [eax],edx
c00201a8:	90                   	nop
c00201a9:	83 c4 0c             	add    esp,0xc
c00201ac:	c3                   	ret    
c00201ad:	90                   	nop

c00201ae <ATAPI::readyForCommand()>:
c00201ae:	56                   	push   esi
c00201af:	53                   	push   ebx
c00201b0:	53                   	push   ebx
c00201b1:	31 db                	xor    ebx,ebx
c00201b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00201b7:	51                   	push   ecx
c00201b8:	6a 0c                	push   0xc
c00201ba:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00201c1:	50                   	push   eax
c00201c2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00201c8:	e8 81 ea ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c00201cd:	83 c4 10             	add    esp,0x10
c00201d0:	a8 88                	test   al,0x88
c00201d2:	74 25                	je     c00201f9 <ATAPI::readyForCommand()+0x4b>
c00201d4:	43                   	inc    ebx
c00201d5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00201db:	7e da                	jle    c00201b7 <ATAPI::readyForCommand()+0x9>
c00201dd:	83 ec 0c             	sub    esp,0xc
c00201e0:	68 5e 01 00 00       	push   0x15e
c00201e5:	e8 32 8e ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c00201ea:	83 c4 10             	add    esp,0x10
c00201ed:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00201f3:	75 c2                	jne    c00201b7 <ATAPI::readyForCommand()+0x9>
c00201f5:	31 c0                	xor    eax,eax
c00201f7:	eb 02                	jmp    c00201fb <ATAPI::readyForCommand()+0x4d>
c00201f9:	b0 01                	mov    al,0x1
c00201fb:	5a                   	pop    edx
c00201fc:	5b                   	pop    ebx
c00201fd:	5e                   	pop    esi
c00201fe:	c3                   	ret    
c00201ff:	90                   	nop

c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020200:	55                   	push   ebp
c0020201:	57                   	push   edi
c0020202:	56                   	push   esi
c0020203:	53                   	push   ebx
c0020204:	83 ec 20             	sub    esp,0x20
c0020207:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002020b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002020f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020213:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020217:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002021b:	6a 01                	push   0x1
c002021d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020224:	50                   	push   eax
c0020225:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002022b:	e8 66 eb ff ff       	call   c001ed96 <IDE::enableIRQs(unsigned char, bool)>
c0020230:	5e                   	pop    esi
c0020231:	58                   	pop    eax
c0020232:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020239:	50                   	push   eax
c002023a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020240:	e8 23 e9 ff ff       	call   c001eb68 <IDE::prepareInterrupt(unsigned char)>
c0020245:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020248:	e8 61 ff ff ff       	call   c00201ae <ATAPI::readyForCommand()>
c002024d:	83 c4 10             	add    esp,0x10
c0020250:	84 c0                	test   al,al
c0020252:	75 0a                	jne    c002025e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020254:	bb 01 00 00 00       	mov    ebx,0x1
c0020259:	e9 57 02 00 00       	jmp    c00204b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002025e:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020264:	c1 e0 04             	shl    eax,0x4
c0020267:	0f b6 c0             	movzx  eax,al
c002026a:	50                   	push   eax
c002026b:	6a 06                	push   0x6
c002026d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020274:	50                   	push   eax
c0020275:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002027b:	e8 0e e9 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020280:	6a 00                	push   0x0
c0020282:	6a 01                	push   0x1
c0020284:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002028b:	50                   	push   eax
c002028c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020292:	e8 f7 e8 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020297:	83 c4 20             	add    esp,0x20
c002029a:	0f b6 c3             	movzx  eax,bl
c002029d:	0f b6 df             	movzx  ebx,bh
c00202a0:	50                   	push   eax
c00202a1:	6a 04                	push   0x4
c00202a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202aa:	50                   	push   eax
c00202ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202b1:	e8 d8 e8 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202b6:	53                   	push   ebx
c00202b7:	6a 05                	push   0x5
c00202b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202c0:	50                   	push   eax
c00202c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202c7:	e8 c2 e8 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202cc:	83 c4 20             	add    esp,0x20
c00202cf:	68 a0 00 00 00       	push   0xa0
c00202d4:	6a 07                	push   0x7
c00202d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202dd:	50                   	push   eax
c00202de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202e4:	e8 a5 e8 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202e9:	83 c4 0c             	add    esp,0xc
c00202ec:	6a 01                	push   0x1
c00202ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202f5:	50                   	push   eax
c00202f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202fc:	e8 25 f3 ff ff       	call   c001f626 <IDE::polling(unsigned char, unsigned int)>
c0020301:	83 c4 10             	add    esp,0x10
c0020304:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002030a:	84 c0                	test   al,al
c002030c:	74 23                	je     c0020331 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002030e:	0f b6 d8             	movzx  ebx,al
c0020311:	0f b6 d2             	movzx  edx,dl
c0020314:	53                   	push   ebx
c0020315:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002031c:	50                   	push   eax
c002031d:	52                   	push   edx
c002031e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020324:	e8 4d f2 ff ff       	call   c001f576 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020329:	83 c4 10             	add    esp,0x10
c002032c:	e9 84 01 00 00       	jmp    c00204b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020331:	0f b6 d2             	movzx  edx,dl
c0020334:	53                   	push   ebx
c0020335:	53                   	push   ebx
c0020336:	52                   	push   edx
c0020337:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002033d:	e8 3a e8 ff ff       	call   c001eb7c <IDE::getBase(unsigned char)>
c0020342:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020346:	b9 06 00 00 00       	mov    ecx,0x6
c002034b:	89 c2                	mov    edx,eax
c002034d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020350:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020354:	83 c4 10             	add    esp,0x10
c0020357:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002035d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020364:	85 db                	test   ebx,ebx
c0020366:	0f 84 ec 00 00 00    	je     c0020458 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002036c:	51                   	push   ecx
c002036d:	51                   	push   ecx
c002036e:	52                   	push   edx
c002036f:	50                   	push   eax
c0020370:	e8 87 e9 ff ff       	call   c001ecfc <IDE::waitInterrupt(unsigned char)>
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	84 c0                	test   al,al
c002037a:	0f 84 d4 fe ff ff    	je     c0020254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020380:	56                   	push   esi
c0020381:	56                   	push   esi
c0020382:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020389:	50                   	push   eax
c002038a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020390:	e8 d3 e7 ff ff       	call   c001eb68 <IDE::prepareInterrupt(unsigned char)>
c0020395:	83 c4 0c             	add    esp,0xc
c0020398:	6a 04                	push   0x4
c002039a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203a1:	50                   	push   eax
c00203a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203a8:	e8 a1 e8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c00203ad:	83 c4 0c             	add    esp,0xc
c00203b0:	89 c6                	mov    esi,eax
c00203b2:	6a 05                	push   0x5
c00203b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203bb:	50                   	push   eax
c00203bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203c2:	e8 87 e8 ff ff       	call   c001ec4e <IDE::read(unsigned char, unsigned char)>
c00203c7:	89 f1                	mov    ecx,esi
c00203c9:	0f b6 c0             	movzx  eax,al
c00203cc:	0f b6 f1             	movzx  esi,cl
c00203cf:	c1 e0 08             	shl    eax,0x8
c00203d2:	09 c6                	or     esi,eax
c00203d4:	d1 fe                	sar    esi,1
c00203d6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00203da:	83 c4 10             	add    esp,0x10
c00203dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00203e2:	74 41                	je     c0020425 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00203e4:	31 c9                	xor    ecx,ecx
c00203e6:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00203ec:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00203f3:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00203f7:	75 0a                	jne    c0020403 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00203f9:	01 c9                	add    ecx,ecx
c00203fb:	01 cd                	add    ebp,ecx
c00203fd:	4b                   	dec    ebx
c00203fe:	e9 54 ff ff ff       	jmp    c0020357 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0020403:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020408:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002040c:	51                   	push   ecx
c002040d:	51                   	push   ecx
c002040e:	52                   	push   edx
c002040f:	50                   	push   eax
c0020410:	e8 67 e7 ff ff       	call   c001eb7c <IDE::getBase(unsigned char)>
c0020415:	89 c2                	mov    edx,eax
c0020417:	89 f0                	mov    eax,esi
c0020419:	66 ef                	out    dx,ax
c002041b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	41                   	inc    ecx
c0020423:	eb c1                	jmp    c00203e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020425:	31 f6                	xor    esi,esi
c0020427:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002042d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020434:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020438:	75 06                	jne    c0020440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002043a:	01 f6                	add    esi,esi
c002043c:	01 f5                	add    ebp,esi
c002043e:	eb bd                	jmp    c00203fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020440:	51                   	push   ecx
c0020441:	51                   	push   ecx
c0020442:	52                   	push   edx
c0020443:	50                   	push   eax
c0020444:	e8 33 e7 ff ff       	call   c001eb7c <IDE::getBase(unsigned char)>
c0020449:	89 c2                	mov    edx,eax
c002044b:	66 ed                	in     ax,dx
c002044d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020452:	83 c4 10             	add    esp,0x10
c0020455:	46                   	inc    esi
c0020456:	eb cf                	jmp    c0020427 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020458:	51                   	push   ecx
c0020459:	51                   	push   ecx
c002045a:	52                   	push   edx
c002045b:	50                   	push   eax
c002045c:	e8 9b e8 ff ff       	call   c001ecfc <IDE::waitInterrupt(unsigned char)>
c0020461:	83 c4 10             	add    esp,0x10
c0020464:	84 c0                	test   al,al
c0020466:	0f 84 e8 fd ff ff    	je     c0020254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002046c:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020471:	52                   	push   edx
c0020472:	52                   	push   edx
c0020473:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002047a:	50                   	push   eax
c002047b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020481:	e8 e2 e6 ff ff       	call   c001eb68 <IDE::prepareInterrupt(unsigned char)>
c0020486:	83 c4 10             	add    esp,0x10
c0020489:	50                   	push   eax
c002048a:	50                   	push   eax
c002048b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020492:	50                   	push   eax
c0020493:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020499:	e8 de e6 ff ff       	call   c001eb7c <IDE::getBase(unsigned char)>
c002049e:	8d 50 07             	lea    edx,[eax+0x7]
c00204a1:	ec                   	in     al,dx
c00204a2:	83 c4 10             	add    esp,0x10
c00204a5:	a8 88                	test   al,0x88
c00204a7:	74 0a                	je     c00204b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00204a9:	4b                   	dec    ebx
c00204aa:	75 dd                	jne    c0020489 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00204ac:	bb 02 00 00 00       	mov    ebx,0x2
c00204b1:	eb 02                	jmp    c00204b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204b3:	31 db                	xor    ebx,ebx
c00204b5:	83 c4 1c             	add    esp,0x1c
c00204b8:	89 d8                	mov    eax,ebx
c00204ba:	5b                   	pop    ebx
c00204bb:	5e                   	pop    esi
c00204bc:	5f                   	pop    edi
c00204bd:	5d                   	pop    ebp
c00204be:	c3                   	ret    
c00204bf:	90                   	nop

c00204c0 <ATAPI::diskRemoved()>:
c00204c0:	53                   	push   ebx
c00204c1:	83 ec 14             	sub    esp,0x14
c00204c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00204c8:	68 d1 77 02 c0       	push   0xc00277d1
c00204cd:	e8 6d cb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00204d2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00204d9:	c7 04 24 24 75 02 c0 	mov    DWORD PTR [esp],0xc0027524
c00204e0:	e8 5a cb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00204e5:	58                   	pop    eax
c00204e6:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00204ec:	e8 2d 03 ff ff       	call   c001081e <LogicalDisk::unmount()>
c00204f1:	c7 04 24 33 75 02 c0 	mov    DWORD PTR [esp],0xc0027533
c00204f8:	e8 42 cb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00204fd:	5a                   	pop    edx
c00204fe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020504:	e8 1b 0d ff ff       	call   c0011224 <VCache::writeWriteBuffer()>
c0020509:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002050f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020513:	83 c4 18             	add    esp,0x18
c0020516:	5b                   	pop    ebx
c0020517:	e9 f8 0c ff ff       	jmp    c0011214 <VCache::invalidateReadBuffer()>

c002051c <ATAPI::eject()>:
c002051c:	57                   	push   edi
c002051d:	b9 03 00 00 00       	mov    ecx,0x3
c0020522:	53                   	push   ebx
c0020523:	83 ec 14             	sub    esp,0x14
c0020526:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002052a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002052e:	fc                   	cld    
c002052f:	31 c0                	xor    eax,eax
c0020531:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020533:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020538:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002053d:	50                   	push   eax
c002053e:	50                   	push   eax
c002053f:	6a 00                	push   0x0
c0020541:	6a 00                	push   0x0
c0020543:	6a 00                	push   0x0
c0020545:	6a 02                	push   0x2
c0020547:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002054b:	50                   	push   eax
c002054c:	53                   	push   ebx
c002054d:	e8 ae fc ff ff       	call   c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020552:	83 c4 14             	add    esp,0x14
c0020555:	53                   	push   ebx
c0020556:	e8 65 ff ff ff       	call   c00204c0 <ATAPI::diskRemoved()>
c002055b:	83 c4 24             	add    esp,0x24
c002055e:	31 c0                	xor    eax,eax
c0020560:	5b                   	pop    ebx
c0020561:	5f                   	pop    edi
c0020562:	c3                   	ret    
c0020563:	90                   	nop

c0020564 <ATAPI::diskInserted()>:
c0020564:	83 ec 18             	sub    esp,0x18
c0020567:	68 e8 77 02 c0       	push   0xc00277e8
c002056c:	e8 ce ca fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0020571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020575:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002057c:	83 c4 1c             	add    esp,0x1c
c002057f:	c3                   	ret    

c0020580 <ATAPI::detectMedia()>:
c0020580:	56                   	push   esi
c0020581:	53                   	push   ebx
c0020582:	83 ec 28             	sub    esp,0x28
c0020585:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020589:	6a 0c                	push   0xc
c002058b:	6a 00                	push   0x0
c002058d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020591:	56                   	push   esi
c0020592:	e8 e5 00 fe ff       	call   c000067c <memset>
c0020597:	58                   	pop    eax
c0020598:	5a                   	pop    edx
c0020599:	6a 00                	push   0x0
c002059b:	6a 00                	push   0x0
c002059d:	6a 00                	push   0x0
c002059f:	6a 00                	push   0x0
c00205a1:	56                   	push   esi
c00205a2:	53                   	push   ebx
c00205a3:	e8 58 fc ff ff       	call   c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00205a8:	83 c4 1c             	add    esp,0x1c
c00205ab:	6a 0c                	push   0xc
c00205ad:	6a 00                	push   0x0
c00205af:	56                   	push   esi
c00205b0:	e8 c7 00 fe ff       	call   c000067c <memset>
c00205b5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00205ba:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00205bf:	59                   	pop    ecx
c00205c0:	58                   	pop    eax
c00205c1:	6a 01                	push   0x1
c00205c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00205c7:	50                   	push   eax
c00205c8:	6a 00                	push   0x0
c00205ca:	6a 12                	push   0x12
c00205cc:	56                   	push   esi
c00205cd:	53                   	push   ebx
c00205ce:	e8 2d fc ff ff       	call   c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00205d3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00205d7:	83 c4 20             	add    esp,0x20
c00205da:	83 e0 7f             	and    eax,0x7f
c00205dd:	3c 70                	cmp    al,0x70
c00205df:	74 15                	je     c00205f6 <ATAPI::detectMedia()+0x76>
c00205e1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205e8:	75 0c                	jne    c00205f6 <ATAPI::detectMedia()+0x76>
c00205ea:	83 ec 0c             	sub    esp,0xc
c00205ed:	53                   	push   ebx
c00205ee:	e8 71 ff ff ff       	call   c0020564 <ATAPI::diskInserted()>
c00205f3:	83 c4 10             	add    esp,0x10
c00205f6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00205fa:	83 e0 0f             	and    eax,0xf
c00205fd:	3c 02                	cmp    al,0x2
c00205ff:	75 1b                	jne    c002061c <ATAPI::detectMedia()+0x9c>
c0020601:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020606:	75 2d                	jne    c0020635 <ATAPI::detectMedia()+0xb5>
c0020608:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002060f:	74 24                	je     c0020635 <ATAPI::detectMedia()+0xb5>
c0020611:	83 ec 0c             	sub    esp,0xc
c0020614:	53                   	push   ebx
c0020615:	e8 a6 fe ff ff       	call   c00204c0 <ATAPI::diskRemoved()>
c002061a:	eb 16                	jmp    c0020632 <ATAPI::detectMedia()+0xb2>
c002061c:	84 c0                	test   al,al
c002061e:	75 15                	jne    c0020635 <ATAPI::detectMedia()+0xb5>
c0020620:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020627:	75 0c                	jne    c0020635 <ATAPI::detectMedia()+0xb5>
c0020629:	83 ec 0c             	sub    esp,0xc
c002062c:	53                   	push   ebx
c002062d:	e8 32 ff ff ff       	call   c0020564 <ATAPI::diskInserted()>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	83 c4 24             	add    esp,0x24
c0020638:	5b                   	pop    ebx
c0020639:	5e                   	pop    esi
c002063a:	c3                   	ret    
c002063b:	90                   	nop

c002063c <ATAPI::open(int, int, void*)>:
c002063c:	56                   	push   esi
c002063d:	53                   	push   ebx
c002063e:	50                   	push   eax
c002063f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020643:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002064b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020651:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020657:	c1 e0 06             	shl    eax,0x6
c002065a:	01 d0                	add    eax,edx
c002065c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020663:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020669:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020670:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002067a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020680:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020687:	6a 04                	push   0x4
c0020689:	6a 0c                	push   0xc
c002068b:	51                   	push   ecx
c002068c:	52                   	push   edx
c002068d:	e8 fc e4 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020692:	90                   	nop
c0020693:	90                   	nop
c0020694:	6a 00                	push   0x0
c0020696:	6a 0c                	push   0xc
c0020698:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002069f:	50                   	push   eax
c00206a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00206a6:	e8 e3 e4 ff ff       	call   c001eb8e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00206ab:	83 c4 14             	add    esp,0x14
c00206ae:	68 74 01 00 00       	push   0x174
c00206b3:	e8 9b 96 fe ff       	call   c0009d53 <malloc>
c00206b8:	83 c4 0c             	add    esp,0xc
c00206bb:	89 c6                	mov    esi,eax
c00206bd:	6a 00                	push   0x0
c00206bf:	68 ff ff ff 7f       	push   0x7fffffff
c00206c4:	6a 00                	push   0x0
c00206c6:	6a 00                	push   0x0
c00206c8:	53                   	push   ebx
c00206c9:	68 b0 78 02 c0       	push   0xc00278b0
c00206ce:	50                   	push   eax
c00206cf:	e8 56 ff fe ff       	call   c001062a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00206d4:	83 c4 14             	add    esp,0x14
c00206d7:	56                   	push   esi
c00206d8:	e8 03 00 ff ff       	call   c00106e0 <LogicalDisk::assignDriveLetter()>
c00206dd:	5a                   	pop    edx
c00206de:	0f be c0             	movsx  eax,al
c00206e1:	59                   	pop    ecx
c00206e2:	50                   	push   eax
c00206e3:	68 41 75 02 c0       	push   0xc0027541
c00206e8:	e8 52 c9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00206ed:	58                   	pop    eax
c00206ee:	5a                   	pop    edx
c00206ef:	56                   	push   esi
c00206f0:	53                   	push   ebx
c00206f1:	e8 bc de fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c00206f6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00206fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00206ff:	e8 4e e3 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0020704:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002070b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002070e:	e8 6d fe ff ff       	call   c0020580 <ATAPI::detectMedia()>
c0020713:	83 c4 14             	add    esp,0x14
c0020716:	31 c0                	xor    eax,eax
c0020718:	5b                   	pop    ebx
c0020719:	5e                   	pop    esi
c002071a:	c3                   	ret    
c002071b:	90                   	nop

c002071c <ATAPI::read(unsigned long long, int, void*)>:
c002071c:	55                   	push   ebp
c002071d:	57                   	push   edi
c002071e:	56                   	push   esi
c002071f:	53                   	push   ebx
c0020720:	83 ec 1c             	sub    esp,0x1c
c0020723:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020727:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002072b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002072f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020736:	74 41                	je     c0020779 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0020738:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002073c:	b9 03 00 00 00       	mov    ecx,0x3
c0020741:	fc                   	cld    
c0020742:	31 c0                	xor    eax,eax
c0020744:	86 fb                	xchg   bl,bh
c0020746:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020748:	c1 c3 10             	rol    ebx,0x10
c002074b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020750:	89 e8                	mov    eax,ebp
c0020752:	86 fb                	xchg   bl,bh
c0020754:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020758:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002075c:	50                   	push   eax
c002075d:	50                   	push   eax
c002075e:	55                   	push   ebp
c002075f:	c1 e5 0b             	shl    ebp,0xb
c0020762:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020766:	6a 00                	push   0x0
c0020768:	55                   	push   ebp
c0020769:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002076d:	50                   	push   eax
c002076e:	56                   	push   esi
c002076f:	e8 8c fa ff ff       	call   c0020200 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020774:	83 c4 20             	add    esp,0x20
c0020777:	eb 1a                	jmp    c0020793 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020779:	83 ec 0c             	sub    esp,0xc
c002077c:	56                   	push   esi
c002077d:	e8 fe fd ff ff       	call   c0020580 <ATAPI::detectMedia()>
c0020782:	83 c4 10             	add    esp,0x10
c0020785:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002078c:	75 aa                	jne    c0020738 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002078e:	b8 02 00 00 00       	mov    eax,0x2
c0020793:	83 c4 1c             	add    esp,0x1c
c0020796:	5b                   	pop    ebx
c0020797:	5e                   	pop    esi
c0020798:	5f                   	pop    edi
c0020799:	5d                   	pop    ebp
c002079a:	c3                   	ret    
c002079b:	90                   	nop

c002079c <SATA::close(int, int, void*)>:
c002079c:	83 ec 0c             	sub    esp,0xc
c002079f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00207a9:	85 c0                	test   eax,eax
c00207ab:	74 0c                	je     c00207b9 <SATA::close(int, int, void*)+0x1d>
c00207ad:	83 ec 0c             	sub    esp,0xc
c00207b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00207b2:	50                   	push   eax
c00207b3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00207b6:	83 c4 10             	add    esp,0x10
c00207b9:	31 c0                	xor    eax,eax
c00207bb:	83 c4 0c             	add    esp,0xc
c00207be:	c3                   	ret    
c00207bf:	90                   	nop

c00207c0 <SATA::powerSaving(PowerSavingLevel)>:
c00207c0:	c3                   	ret    
c00207c1:	90                   	nop

c00207c2 <SATA::open(int, int, void*)>:
c00207c2:	56                   	push   esi
c00207c3:	53                   	push   ebx
c00207c4:	51                   	push   ecx
c00207c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00207c9:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c00207d0:	74 2d                	je     c00207ff <SATA::open(int, int, void*)+0x3d>
c00207d2:	83 ec 0c             	sub    esp,0xc
c00207d5:	68 88 75 02 c0       	push   0xc0027588
c00207da:	e8 ce 95 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00207df:	83 c4 10             	add    esp,0x10
c00207e2:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c00207e9:	75 14                	jne    c00207ff <SATA::open(int, int, void*)+0x3d>
c00207eb:	e4 60                	in     al,0x60
c00207ed:	3c 5a                	cmp    al,0x5a
c00207ef:	74 04                	je     c00207f5 <SATA::open(int, int, void*)+0x33>
c00207f1:	3c 1c                	cmp    al,0x1c
c00207f3:	75 f6                	jne    c00207eb <SATA::open(int, int, void*)+0x29>
c00207f5:	e4 60                	in     al,0x60
c00207f7:	3c 5a                	cmp    al,0x5a
c00207f9:	74 fa                	je     c00207f5 <SATA::open(int, int, void*)+0x33>
c00207fb:	3c 1c                	cmp    al,0x1c
c00207fd:	74 f6                	je     c00207f5 <SATA::open(int, int, void*)+0x33>
c00207ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020803:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002080d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020813:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002081d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020821:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002082b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020831:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020838:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c002083f:	74 2d                	je     c002086e <SATA::open(int, int, void*)+0xac>
c0020841:	83 ec 0c             	sub    esp,0xc
c0020844:	68 95 75 02 c0       	push   0xc0027595
c0020849:	e8 5f 95 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002084e:	83 c4 10             	add    esp,0x10
c0020851:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020858:	75 14                	jne    c002086e <SATA::open(int, int, void*)+0xac>
c002085a:	e4 60                	in     al,0x60
c002085c:	3c 1c                	cmp    al,0x1c
c002085e:	74 04                	je     c0020864 <SATA::open(int, int, void*)+0xa2>
c0020860:	3c 5a                	cmp    al,0x5a
c0020862:	75 f6                	jne    c002085a <SATA::open(int, int, void*)+0x98>
c0020864:	e4 60                	in     al,0x60
c0020866:	3c 5a                	cmp    al,0x5a
c0020868:	74 fa                	je     c0020864 <SATA::open(int, int, void*)+0xa2>
c002086a:	3c 1c                	cmp    al,0x1c
c002086c:	74 f6                	je     c0020864 <SATA::open(int, int, void*)+0xa2>
c002086e:	e8 97 9b fe ff       	call   c000a40a <Phys::allocatePage()>
c0020873:	89 c6                	mov    esi,eax
c0020875:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002087b:	81 c6 00 10 00 00    	add    esi,0x1000
c0020881:	e8 84 9b fe ff       	call   c000a40a <Phys::allocatePage()>
c0020886:	39 c6                	cmp    esi,eax
c0020888:	74 10                	je     c002089a <SATA::open(int, int, void*)+0xd8>
c002088a:	83 ec 0c             	sub    esp,0xc
c002088d:	68 a2 75 02 c0       	push   0xc00275a2
c0020892:	e8 5e 47 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0020897:	83 c4 10             	add    esp,0x10
c002089a:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c00208a1:	74 2d                	je     c00208d0 <SATA::open(int, int, void*)+0x10e>
c00208a3:	83 ec 0c             	sub    esp,0xc
c00208a6:	68 b6 75 02 c0       	push   0xc00275b6
c00208ab:	e8 fd 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00208b0:	83 c4 10             	add    esp,0x10
c00208b3:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c00208ba:	75 14                	jne    c00208d0 <SATA::open(int, int, void*)+0x10e>
c00208bc:	e4 60                	in     al,0x60
c00208be:	3c 1c                	cmp    al,0x1c
c00208c0:	74 04                	je     c00208c6 <SATA::open(int, int, void*)+0x104>
c00208c2:	3c 5a                	cmp    al,0x5a
c00208c4:	75 f6                	jne    c00208bc <SATA::open(int, int, void*)+0xfa>
c00208c6:	e4 60                	in     al,0x60
c00208c8:	3c 5a                	cmp    al,0x5a
c00208ca:	74 fa                	je     c00208c6 <SATA::open(int, int, void*)+0x104>
c00208cc:	3c 1c                	cmp    al,0x1c
c00208ce:	74 f6                	je     c00208c6 <SATA::open(int, int, void*)+0x104>
c00208d0:	83 ec 0c             	sub    esp,0xc
c00208d3:	6a 02                	push   0x2
c00208d5:	e8 3f b4 fe ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c00208da:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00208e0:	6a 03                	push   0x3
c00208e2:	50                   	push   eax
c00208e3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00208e9:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c00208ef:	e8 cc ba fe ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00208f4:	83 c4 20             	add    esp,0x20
c00208f7:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c00208fe:	74 2d                	je     c002092d <SATA::open(int, int, void*)+0x16b>
c0020900:	83 ec 0c             	sub    esp,0xc
c0020903:	68 c3 75 02 c0       	push   0xc00275c3
c0020908:	e8 a0 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020917:	75 14                	jne    c002092d <SATA::open(int, int, void*)+0x16b>
c0020919:	e4 60                	in     al,0x60
c002091b:	3c 1c                	cmp    al,0x1c
c002091d:	74 04                	je     c0020923 <SATA::open(int, int, void*)+0x161>
c002091f:	3c 5a                	cmp    al,0x5a
c0020921:	75 f6                	jne    c0020919 <SATA::open(int, int, void*)+0x157>
c0020923:	e4 60                	in     al,0x60
c0020925:	3c 5a                	cmp    al,0x5a
c0020927:	74 fa                	je     c0020923 <SATA::open(int, int, void*)+0x161>
c0020929:	3c 1c                	cmp    al,0x1c
c002092b:	74 f6                	je     c0020923 <SATA::open(int, int, void*)+0x161>
c002092d:	83 ec 0c             	sub    esp,0xc
c0020930:	53                   	push   ebx
c0020931:	e8 1c e1 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c0020936:	83 c4 10             	add    esp,0x10
c0020939:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020940:	74 2d                	je     c002096f <SATA::open(int, int, void*)+0x1ad>
c0020942:	83 ec 0c             	sub    esp,0xc
c0020945:	68 d0 75 02 c0       	push   0xc00275d0
c002094a:	e8 5e 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002094f:	83 c4 10             	add    esp,0x10
c0020952:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020959:	75 14                	jne    c002096f <SATA::open(int, int, void*)+0x1ad>
c002095b:	e4 60                	in     al,0x60
c002095d:	3c 1c                	cmp    al,0x1c
c002095f:	74 04                	je     c0020965 <SATA::open(int, int, void*)+0x1a3>
c0020961:	3c 5a                	cmp    al,0x5a
c0020963:	75 f6                	jne    c002095b <SATA::open(int, int, void*)+0x199>
c0020965:	e4 60                	in     al,0x60
c0020967:	3c 5a                	cmp    al,0x5a
c0020969:	74 fa                	je     c0020965 <SATA::open(int, int, void*)+0x1a3>
c002096b:	3c 1c                	cmp    al,0x1c
c002096d:	74 f6                	je     c0020965 <SATA::open(int, int, void*)+0x1a3>
c002096f:	83 ec 0c             	sub    esp,0xc
c0020972:	53                   	push   ebx
c0020973:	e8 26 01 ff ff       	call   c0010a9e <createPartitionsForDisk(PhysicalDisk*)>
c0020978:	83 c4 10             	add    esp,0x10
c002097b:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020982:	74 2d                	je     c00209b1 <SATA::open(int, int, void*)+0x1ef>
c0020984:	83 ec 0c             	sub    esp,0xc
c0020987:	68 dd 75 02 c0       	push   0xc00275dd
c002098c:	e8 1c 94 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020991:	83 c4 10             	add    esp,0x10
c0020994:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c002099b:	75 14                	jne    c00209b1 <SATA::open(int, int, void*)+0x1ef>
c002099d:	e4 60                	in     al,0x60
c002099f:	3c 1c                	cmp    al,0x1c
c00209a1:	74 04                	je     c00209a7 <SATA::open(int, int, void*)+0x1e5>
c00209a3:	3c 5a                	cmp    al,0x5a
c00209a5:	75 f6                	jne    c002099d <SATA::open(int, int, void*)+0x1db>
c00209a7:	e4 60                	in     al,0x60
c00209a9:	3c 5a                	cmp    al,0x5a
c00209ab:	74 fa                	je     c00209a7 <SATA::open(int, int, void*)+0x1e5>
c00209ad:	3c 1c                	cmp    al,0x1c
c00209af:	74 f6                	je     c00209a7 <SATA::open(int, int, void*)+0x1e5>
c00209b1:	5a                   	pop    edx
c00209b2:	31 c0                	xor    eax,eax
c00209b4:	5b                   	pop    ebx
c00209b5:	5e                   	pop    esi
c00209b6:	c3                   	ret    
c00209b7:	90                   	nop

c00209b8 <SATA::SATA()>:
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bf:	83 ec 04             	sub    esp,0x4
c00209c2:	68 00 02 00 00       	push   0x200
c00209c7:	68 ea 75 02 c0       	push   0xc00275ea
c00209cc:	50                   	push   eax
c00209cd:	e8 18 e0 fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	ba 94 77 02 c0       	mov    edx,0xc0027794
c00209da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209de:	89 10                	mov    DWORD PTR [eax],edx
c00209e0:	90                   	nop
c00209e1:	83 c4 0c             	add    esp,0xc
c00209e4:	c3                   	ret    
c00209e5:	90                   	nop

c00209e6 <SATA::access(unsigned long long, int, void*, bool)>:
c00209e6:	55                   	push   ebp
c00209e7:	57                   	push   edi
c00209e8:	56                   	push   esi
c00209e9:	53                   	push   ebx
c00209ea:	83 ec 2c             	sub    esp,0x2c
c00209ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00209f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00209f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209f9:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020a00:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020a04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020a08:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020a0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a10:	75 19                	jne    c0020a2b <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020a12:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020a17:	7e 41                	jle    c0020a5a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020a19:	83 ec 0c             	sub    esp,0xc
c0020a1c:	68 09 76 02 c0       	push   0xc0027609
c0020a21:	e8 cf 45 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	eb 2f                	jmp    c0020a5a <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020a2b:	83 ec 0c             	sub    esp,0xc
c0020a2e:	68 fa 75 02 c0       	push   0xc00275fa
c0020a33:	e8 75 93 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020a38:	83 c4 10             	add    esp,0x10
c0020a3b:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020a42:	75 ce                	jne    c0020a12 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a44:	e4 60                	in     al,0x60
c0020a46:	3c 1c                	cmp    al,0x1c
c0020a48:	74 04                	je     c0020a4e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a4a:	3c 5a                	cmp    al,0x5a
c0020a4c:	75 f6                	jne    c0020a44 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020a4e:	e4 60                	in     al,0x60
c0020a50:	3c 5a                	cmp    al,0x5a
c0020a52:	74 fa                	je     c0020a4e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a54:	3c 1c                	cmp    al,0x1c
c0020a56:	74 f6                	je     c0020a4e <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020a58:	eb b8                	jmp    c0020a12 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020a5a:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020a61:	75 29                	jne    c0020a8c <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020a63:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020a69:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020a6f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020a75:	8d 75 02             	lea    esi,[ebp+0x2]
c0020a78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a7c:	c1 e6 07             	shl    esi,0x7
c0020a7f:	01 c6                	add    esi,eax
c0020a81:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020a88:	74 4a                	je     c0020ad4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020a8a:	eb 2f                	jmp    c0020abb <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020a8c:	83 ec 0c             	sub    esp,0xc
c0020a8f:	68 42 76 02 c0       	push   0xc0027642
c0020a94:	e8 14 93 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020a99:	83 c4 10             	add    esp,0x10
c0020a9c:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020aa3:	75 be                	jne    c0020a63 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020aa5:	e4 60                	in     al,0x60
c0020aa7:	3c 1c                	cmp    al,0x1c
c0020aa9:	74 04                	je     c0020aaf <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020aab:	3c 5a                	cmp    al,0x5a
c0020aad:	75 f6                	jne    c0020aa5 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020aaf:	e4 60                	in     al,0x60
c0020ab1:	3c 5a                	cmp    al,0x5a
c0020ab3:	74 fa                	je     c0020aaf <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020ab5:	3c 1c                	cmp    al,0x1c
c0020ab7:	74 f6                	je     c0020aaf <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020ab9:	eb a8                	jmp    c0020a63 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020abb:	83 ec 0c             	sub    esp,0xc
c0020abe:	68 51 76 02 c0       	push   0xc0027651
c0020ac3:	e8 e5 92 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020ac8:	83 c4 10             	add    esp,0x10
c0020acb:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020ad2:	74 3d                	je     c0020b11 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020ad4:	89 e8                	mov    eax,ebp
c0020ad6:	c1 e0 07             	shl    eax,0x7
c0020ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020add:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020ae7:	52                   	push   edx
c0020ae8:	52                   	push   edx
c0020ae9:	56                   	push   esi
c0020aea:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020af0:	e8 11 ec ff ff       	call   c001f706 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020af5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020af9:	83 c4 10             	add    esp,0x10
c0020afc:	b8 01 00 00 00       	mov    eax,0x1
c0020b01:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020b06:	75 1d                	jne    c0020b25 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020b08:	e9 c8 04 00 00       	jmp    c0020fd5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020b0d:	3c 5a                	cmp    al,0x5a
c0020b0f:	74 0c                	je     c0020b1d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b11:	e4 60                	in     al,0x60
c0020b13:	3c 1c                	cmp    al,0x1c
c0020b15:	75 f6                	jne    c0020b0d <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020b17:	eb 04                	jmp    c0020b1d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b19:	3c 1c                	cmp    al,0x1c
c0020b1b:	75 b7                	jne    c0020ad4 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020b1d:	e4 60                	in     al,0x60
c0020b1f:	3c 5a                	cmp    al,0x5a
c0020b21:	74 fa                	je     c0020b1d <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020b23:	eb f4                	jmp    c0020b19 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020b25:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020b2c:	74 3a                	je     c0020b68 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020b2e:	83 ec 0c             	sub    esp,0xc
c0020b31:	68 60 76 02 c0       	push   0xc0027660
c0020b36:	e8 72 92 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020b3b:	83 c4 10             	add    esp,0x10
c0020b3e:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020b45:	74 0d                	je     c0020b54 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020b47:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b4c:	74 34                	je     c0020b82 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020b4e:	eb 1f                	jmp    c0020b6f <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020b50:	3c 1c                	cmp    al,0x1c
c0020b52:	74 0c                	je     c0020b60 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b54:	e4 60                	in     al,0x60
c0020b56:	3c 5a                	cmp    al,0x5a
c0020b58:	75 f6                	jne    c0020b50 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020b5a:	eb 04                	jmp    c0020b60 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b5c:	3c 1c                	cmp    al,0x1c
c0020b5e:	75 e7                	jne    c0020b47 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020b60:	e4 60                	in     al,0x60
c0020b62:	3c 5a                	cmp    al,0x5a
c0020b64:	74 fa                	je     c0020b60 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020b66:	eb f4                	jmp    c0020b5c <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020b68:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020b6d:	74 1c                	je     c0020b8b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020b6f:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020b73:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020b79:	c1 e1 09             	shl    ecx,0x9
c0020b7c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020b80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020b82:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020b89:	75 55                	jne    c0020be0 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020b8b:	8d 45 02             	lea    eax,[ebp+0x2]
c0020b8e:	c1 e0 07             	shl    eax,0x7
c0020b91:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020b95:	8b 38                	mov    edi,DWORD PTR [eax]
c0020b97:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020b9d:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020ba3:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bad:	c1 e0 05             	shl    eax,0x5
c0020bb0:	01 c7                	add    edi,eax
c0020bb2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020bb6:	83 e0 01             	and    eax,0x1
c0020bb9:	c1 e0 06             	shl    eax,0x6
c0020bbc:	88 c2                	mov    dl,al
c0020bbe:	8a 07                	mov    al,BYTE PTR [edi]
c0020bc0:	83 e0 bf             	and    eax,0xffffffbf
c0020bc3:	09 d0                	or     eax,edx
c0020bc5:	88 07                	mov    BYTE PTR [edi],al
c0020bc7:	8b 07                	mov    eax,DWORD PTR [edi]
c0020bc9:	25 e0 ff 00 00       	and    eax,0xffe0
c0020bce:	0d 05 00 01 00       	or     eax,0x10005
c0020bd3:	89 07                	mov    DWORD PTR [edi],eax
c0020bd5:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020bdc:	74 4d                	je     c0020c2b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020bde:	eb 32                	jmp    c0020c12 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020be0:	83 ec 0c             	sub    esp,0xc
c0020be3:	68 6f 76 02 c0       	push   0xc002766f
c0020be8:	e8 c0 91 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020bed:	83 c4 10             	add    esp,0x10
c0020bf0:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020bf7:	75 92                	jne    c0020b8b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020bf9:	e4 60                	in     al,0x60
c0020bfb:	3c 1c                	cmp    al,0x1c
c0020bfd:	74 04                	je     c0020c03 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020bff:	3c 5a                	cmp    al,0x5a
c0020c01:	75 f6                	jne    c0020bf9 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020c03:	e4 60                	in     al,0x60
c0020c05:	3c 5a                	cmp    al,0x5a
c0020c07:	74 fa                	je     c0020c03 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c09:	3c 1c                	cmp    al,0x1c
c0020c0b:	74 f6                	je     c0020c03 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c0d:	e9 79 ff ff ff       	jmp    c0020b8b <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020c12:	83 ec 0c             	sub    esp,0xc
c0020c15:	68 7e 76 02 c0       	push   0xc002767e
c0020c1a:	e8 8e 91 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020c1f:	83 c4 10             	add    esp,0x10
c0020c22:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020c29:	74 3b                	je     c0020c66 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020c2b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020c31:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020c37:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020c3d:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020c40:	50                   	push   eax
c0020c41:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020c45:	83 c0 08             	add    eax,0x8
c0020c48:	c1 e0 04             	shl    eax,0x4
c0020c4b:	50                   	push   eax
c0020c4c:	6a 00                	push   0x0
c0020c4e:	56                   	push   esi
c0020c4f:	e8 28 fa fd ff       	call   c000067c <memset>
c0020c54:	83 c4 10             	add    esp,0x10
c0020c57:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020c5e:	74 33                	je     c0020c93 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020c60:	eb 18                	jmp    c0020c7a <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020c62:	3c 1c                	cmp    al,0x1c
c0020c64:	74 0c                	je     c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c66:	e4 60                	in     al,0x60
c0020c68:	3c 5a                	cmp    al,0x5a
c0020c6a:	75 f6                	jne    c0020c62 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020c6c:	eb 04                	jmp    c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c6e:	3c 1c                	cmp    al,0x1c
c0020c70:	75 b9                	jne    c0020c2b <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020c72:	e4 60                	in     al,0x60
c0020c74:	3c 5a                	cmp    al,0x5a
c0020c76:	74 fa                	je     c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020c78:	eb f4                	jmp    c0020c6e <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020c7a:	83 ec 0c             	sub    esp,0xc
c0020c7d:	68 8d 76 02 c0       	push   0xc002768d
c0020c82:	e8 26 91 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020c87:	83 c4 10             	add    esp,0x10
c0020c8a:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020c91:	74 48                	je     c0020cdb <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020c93:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020c99:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020c9f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020ca3:	c1 e0 09             	shl    eax,0x9
c0020ca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020caa:	48                   	dec    eax
c0020cab:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020cb0:	89 c2                	mov    edx,eax
c0020cb2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020cb8:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020cbd:	09 d0                	or     eax,edx
c0020cbf:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020cc5:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020ccc:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020cd3:	74 33                	je     c0020d08 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020cd5:	eb 18                	jmp    c0020cef <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020cd7:	3c 1c                	cmp    al,0x1c
c0020cd9:	74 0c                	je     c0020ce7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020cdb:	e4 60                	in     al,0x60
c0020cdd:	3c 5a                	cmp    al,0x5a
c0020cdf:	75 f6                	jne    c0020cd7 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020ce1:	eb 04                	jmp    c0020ce7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ce3:	3c 1c                	cmp    al,0x1c
c0020ce5:	75 ac                	jne    c0020c93 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020ce7:	e4 60                	in     al,0x60
c0020ce9:	3c 5a                	cmp    al,0x5a
c0020ceb:	74 fa                	je     c0020ce7 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020ced:	eb f4                	jmp    c0020ce3 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020cef:	83 ec 0c             	sub    esp,0xc
c0020cf2:	68 9c 76 02 c0       	push   0xc002769c
c0020cf7:	e8 b1 90 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020cfc:	83 c4 10             	add    esp,0x10
c0020cff:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020d06:	74 63                	je     c0020d6b <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020d08:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020d0b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020d0f:	66 25 00 7f          	and    ax,0x7f00
c0020d13:	66 0d 27 80          	or     ax,0x8027
c0020d17:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020d1c:	66 89 06             	mov    WORD PTR [esi],ax
c0020d1f:	19 c0                	sbb    eax,eax
c0020d21:	83 e0 f0             	and    eax,0xfffffff0
c0020d24:	83 c0 35             	add    eax,0x35
c0020d27:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020d2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d2e:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020d32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d36:	c1 e8 10             	shr    eax,0x10
c0020d39:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d40:	c1 e8 18             	shr    eax,0x18
c0020d43:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020d4a:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020d4d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020d51:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d58:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020d5b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020d5f:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020d63:	74 33                	je     c0020d98 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020d65:	eb 18                	jmp    c0020d7f <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020d67:	3c 1c                	cmp    al,0x1c
c0020d69:	74 0c                	je     c0020d77 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d6b:	e4 60                	in     al,0x60
c0020d6d:	3c 5a                	cmp    al,0x5a
c0020d6f:	75 f6                	jne    c0020d67 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020d71:	eb 04                	jmp    c0020d77 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d73:	3c 1c                	cmp    al,0x1c
c0020d75:	75 91                	jne    c0020d08 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020d77:	e4 60                	in     al,0x60
c0020d79:	3c 5a                	cmp    al,0x5a
c0020d7b:	74 fa                	je     c0020d77 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020d7d:	eb f4                	jmp    c0020d73 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020d7f:	83 ec 0c             	sub    esp,0xc
c0020d82:	68 ab 76 02 c0       	push   0xc00276ab
c0020d87:	e8 21 90 fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020d8c:	83 c4 10             	add    esp,0x10
c0020d8f:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020d96:	74 11                	je     c0020da9 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020d98:	89 e8                	mov    eax,ebp
c0020d9a:	31 f6                	xor    esi,esi
c0020d9c:	c1 e0 07             	shl    eax,0x7
c0020d9f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020da3:	eb 21                	jmp    c0020dc6 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020da5:	3c 1c                	cmp    al,0x1c
c0020da7:	74 0c                	je     c0020db5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020da9:	e4 60                	in     al,0x60
c0020dab:	3c 5a                	cmp    al,0x5a
c0020dad:	75 f6                	jne    c0020da5 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020daf:	eb 04                	jmp    c0020db5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020db1:	3c 1c                	cmp    al,0x1c
c0020db3:	75 e3                	jne    c0020d98 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020db5:	e4 60                	in     al,0x60
c0020db7:	3c 5a                	cmp    al,0x5a
c0020db9:	74 fa                	je     c0020db5 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020dbb:	eb f4                	jmp    c0020db1 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020dbd:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020dc3:	74 0c                	je     c0020dd1 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020dc5:	46                   	inc    esi
c0020dc6:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020dcc:	80 e2 88             	and    dl,0x88
c0020dcf:	75 ec                	jne    c0020dbd <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020dd1:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020dd8:	74 3d                	je     c0020e17 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020dda:	83 ec 0c             	sub    esp,0xc
c0020ddd:	68 ba 76 02 c0       	push   0xc00276ba
c0020de2:	e8 c6 8f fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020de7:	8b 15 80 8a 02 c0    	mov    edx,DWORD PTR ds:0xc0028a80
c0020ded:	83 c4 10             	add    esp,0x10
c0020df0:	f6 c2 80             	test   dl,0x80
c0020df3:	74 0e                	je     c0020e03 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020df5:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020dfb:	75 2f                	jne    c0020e2c <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020dfd:	eb 20                	jmp    c0020e1f <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020dff:	3c 1c                	cmp    al,0x1c
c0020e01:	74 0c                	je     c0020e0f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e03:	e4 60                	in     al,0x60
c0020e05:	3c 5a                	cmp    al,0x5a
c0020e07:	75 f6                	jne    c0020dff <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020e09:	eb 04                	jmp    c0020e0f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e0b:	3c 1c                	cmp    al,0x1c
c0020e0d:	75 e6                	jne    c0020df5 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020e0f:	e4 60                	in     al,0x60
c0020e11:	3c 5a                	cmp    al,0x5a
c0020e13:	74 fa                	je     c0020e0f <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020e15:	eb f4                	jmp    c0020e0b <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020e17:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020e1d:	75 13                	jne    c0020e32 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e1f:	83 ec 0c             	sub    esp,0xc
c0020e22:	68 ca 76 02 c0       	push   0xc00276ca
c0020e27:	e9 d2 00 00 00       	jmp    c0020efe <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020e2c:	0f ba e2 0b          	bt     edx,0xb
c0020e30:	72 25                	jb     c0020e57 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020e32:	be 01 00 00 00       	mov    esi,0x1
c0020e37:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e3b:	89 e8                	mov    eax,ebp
c0020e3d:	d3 e6                	shl    esi,cl
c0020e3f:	c1 e0 07             	shl    eax,0x7
c0020e42:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e46:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020e4d:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020e53:	74 4a                	je     c0020e9f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020e55:	eb 2f                	jmp    c0020e86 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020e57:	83 ec 0c             	sub    esp,0xc
c0020e5a:	68 d8 76 02 c0       	push   0xc00276d8
c0020e5f:	e8 49 8f fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020e64:	83 c4 10             	add    esp,0x10
c0020e67:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020e6e:	75 c2                	jne    c0020e32 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e70:	e4 60                	in     al,0x60
c0020e72:	3c 5a                	cmp    al,0x5a
c0020e74:	74 04                	je     c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e76:	3c 1c                	cmp    al,0x1c
c0020e78:	75 f6                	jne    c0020e70 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020e7a:	e4 60                	in     al,0x60
c0020e7c:	3c 5a                	cmp    al,0x5a
c0020e7e:	74 fa                	je     c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e80:	3c 1c                	cmp    al,0x1c
c0020e82:	74 f6                	je     c0020e7a <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020e84:	eb ac                	jmp    c0020e32 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020e86:	83 ec 0c             	sub    esp,0xc
c0020e89:	68 e8 76 02 c0       	push   0xc00276e8
c0020e8e:	e8 1a 8f fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020e93:	83 c4 10             	add    esp,0x10
c0020e96:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020e9d:	74 0f                	je     c0020eae <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020e9f:	89 e8                	mov    eax,ebp
c0020ea1:	c1 e0 07             	shl    eax,0x7
c0020ea4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020ea8:	eb 24                	jmp    c0020ece <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020eaa:	3c 1c                	cmp    al,0x1c
c0020eac:	74 0c                	je     c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020eae:	e4 60                	in     al,0x60
c0020eb0:	3c 5a                	cmp    al,0x5a
c0020eb2:	75 f6                	jne    c0020eaa <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020eb4:	eb 04                	jmp    c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020eb6:	3c 1c                	cmp    al,0x1c
c0020eb8:	75 e5                	jne    c0020e9f <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020eba:	e4 60                	in     al,0x60
c0020ebc:	3c 5a                	cmp    al,0x5a
c0020ebe:	74 fa                	je     c0020eba <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020ec0:	eb f4                	jmp    c0020eb6 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020ec2:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020ec8:	0f ba e2 1e          	bt     edx,0x1e
c0020ecc:	72 28                	jb     c0020ef6 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020ece:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020ed4:	85 d6                	test   esi,edx
c0020ed6:	75 ea                	jne    c0020ec2 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020ed8:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020edf:	75 2f                	jne    c0020f10 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020ee1:	89 e8                	mov    eax,ebp
c0020ee3:	c1 e0 07             	shl    eax,0x7
c0020ee6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020eea:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020ef0:	0f ba e0 1e          	bt     eax,0x1e
c0020ef4:	73 49                	jae    c0020f3f <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020ef6:	83 ec 0c             	sub    esp,0xc
c0020ef9:	68 f8 76 02 c0       	push   0xc00276f8
c0020efe:	e8 f2 40 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0020f03:	83 c4 10             	add    esp,0x10
c0020f06:	b8 01 00 00 00       	mov    eax,0x1
c0020f0b:	e9 c5 00 00 00       	jmp    c0020fd5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020f10:	83 ec 0c             	sub    esp,0xc
c0020f13:	68 09 77 02 c0       	push   0xc0027709
c0020f18:	e8 90 8e fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020f1d:	83 c4 10             	add    esp,0x10
c0020f20:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020f27:	75 b8                	jne    c0020ee1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020f29:	e4 60                	in     al,0x60
c0020f2b:	3c 5a                	cmp    al,0x5a
c0020f2d:	74 04                	je     c0020f33 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f2f:	3c 1c                	cmp    al,0x1c
c0020f31:	75 f6                	jne    c0020f29 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c0020f33:	e4 60                	in     al,0x60
c0020f35:	3c 5a                	cmp    al,0x5a
c0020f37:	74 fa                	je     c0020f33 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f39:	3c 1c                	cmp    al,0x1c
c0020f3b:	74 f6                	je     c0020f33 <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020f3d:	eb a2                	jmp    c0020ee1 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020f3f:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020f46:	74 3a                	je     c0020f82 <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020f48:	83 ec 0c             	sub    esp,0xc
c0020f4b:	68 19 77 02 c0       	push   0xc0027719
c0020f50:	e8 58 8e fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020f55:	83 c4 10             	add    esp,0x10
c0020f58:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020f5f:	74 0d                	je     c0020f6e <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020f61:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f66:	75 31                	jne    c0020f99 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020f68:	eb 1f                	jmp    c0020f89 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020f6a:	3c 1c                	cmp    al,0x1c
c0020f6c:	74 0c                	je     c0020f7a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f6e:	e4 60                	in     al,0x60
c0020f70:	3c 5a                	cmp    al,0x5a
c0020f72:	75 f6                	jne    c0020f6a <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020f74:	eb 04                	jmp    c0020f7a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f76:	3c 1c                	cmp    al,0x1c
c0020f78:	75 e7                	jne    c0020f61 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020f7a:	e4 60                	in     al,0x60
c0020f7c:	3c 5a                	cmp    al,0x5a
c0020f7e:	74 fa                	je     c0020f7a <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020f80:	eb f4                	jmp    c0020f76 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020f82:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f87:	75 19                	jne    c0020fa2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020f89:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020f8f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020f93:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f99:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020fa0:	75 04                	jne    c0020fa6 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020fa2:	31 c0                	xor    eax,eax
c0020fa4:	eb 2f                	jmp    c0020fd5 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020fa6:	83 ec 0c             	sub    esp,0xc
c0020fa9:	68 29 77 02 c0       	push   0xc0027729
c0020fae:	e8 fa 8d fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0020fb3:	83 c4 10             	add    esp,0x10
c0020fb6:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0020fbd:	75 e3                	jne    c0020fa2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020fbf:	e4 60                	in     al,0x60
c0020fc1:	3c 1c                	cmp    al,0x1c
c0020fc3:	74 04                	je     c0020fc9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020fc5:	3c 5a                	cmp    al,0x5a
c0020fc7:	75 f6                	jne    c0020fbf <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020fc9:	e4 60                	in     al,0x60
c0020fcb:	3c 5a                	cmp    al,0x5a
c0020fcd:	74 fa                	je     c0020fc9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020fcf:	3c 1c                	cmp    al,0x1c
c0020fd1:	74 f6                	je     c0020fc9 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020fd3:	eb cd                	jmp    c0020fa2 <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020fd5:	83 c4 2c             	add    esp,0x2c
c0020fd8:	5b                   	pop    ebx
c0020fd9:	5e                   	pop    esi
c0020fda:	5f                   	pop    edi
c0020fdb:	5d                   	pop    ebp
c0020fdc:	c3                   	ret    
c0020fdd:	90                   	nop

c0020fde <SATA::read(unsigned long long, int, void*)>:
c0020fde:	55                   	push   ebp
c0020fdf:	57                   	push   edi
c0020fe0:	56                   	push   esi
c0020fe1:	53                   	push   ebx
c0020fe2:	83 ec 0c             	sub    esp,0xc
c0020fe5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020fe9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020fed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020ff1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020ff5:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0020ffc:	74 2d                	je     c002102b <SATA::read(unsigned long long, int, void*)+0x4d>
c0020ffe:	83 ec 0c             	sub    esp,0xc
c0021001:	68 39 77 02 c0       	push   0xc0027739
c0021006:	e8 a2 8d fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002100b:	83 c4 10             	add    esp,0x10
c002100e:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0021015:	75 14                	jne    c002102b <SATA::read(unsigned long long, int, void*)+0x4d>
c0021017:	e4 60                	in     al,0x60
c0021019:	3c 1c                	cmp    al,0x1c
c002101b:	74 04                	je     c0021021 <SATA::read(unsigned long long, int, void*)+0x43>
c002101d:	3c 5a                	cmp    al,0x5a
c002101f:	75 f6                	jne    c0021017 <SATA::read(unsigned long long, int, void*)+0x39>
c0021021:	e4 60                	in     al,0x60
c0021023:	3c 5a                	cmp    al,0x5a
c0021025:	74 fa                	je     c0021021 <SATA::read(unsigned long long, int, void*)+0x43>
c0021027:	3c 1c                	cmp    al,0x1c
c0021029:	74 f6                	je     c0021021 <SATA::read(unsigned long long, int, void*)+0x43>
c002102b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002102e:	b8 04 00 00 00       	mov    eax,0x4
c0021033:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021039:	0f 87 96 00 00 00    	ja     c00210d5 <SATA::read(unsigned long long, int, void*)+0xf7>
c002103f:	b8 06 00 00 00       	mov    eax,0x6
c0021044:	85 ed                	test   ebp,ebp
c0021046:	0f 84 89 00 00 00    	je     c00210d5 <SATA::read(unsigned long long, int, void*)+0xf7>
c002104c:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0021053:	74 2d                	je     c0021082 <SATA::read(unsigned long long, int, void*)+0xa4>
c0021055:	83 ec 0c             	sub    esp,0xc
c0021058:	68 46 77 02 c0       	push   0xc0027746
c002105d:	e8 4b 8d fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0021062:	83 c4 10             	add    esp,0x10
c0021065:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c002106c:	75 14                	jne    c0021082 <SATA::read(unsigned long long, int, void*)+0xa4>
c002106e:	e4 60                	in     al,0x60
c0021070:	3c 5a                	cmp    al,0x5a
c0021072:	74 04                	je     c0021078 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021074:	3c 1c                	cmp    al,0x1c
c0021076:	75 f6                	jne    c002106e <SATA::read(unsigned long long, int, void*)+0x90>
c0021078:	e4 60                	in     al,0x60
c002107a:	3c 5a                	cmp    al,0x5a
c002107c:	74 fa                	je     c0021078 <SATA::read(unsigned long long, int, void*)+0x9a>
c002107e:	3c 1c                	cmp    al,0x1c
c0021080:	74 f6                	je     c0021078 <SATA::read(unsigned long long, int, void*)+0x9a>
c0021082:	50                   	push   eax
c0021083:	50                   	push   eax
c0021084:	6a 00                	push   0x0
c0021086:	55                   	push   ebp
c0021087:	53                   	push   ebx
c0021088:	57                   	push   edi
c0021089:	56                   	push   esi
c002108a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002108e:	e8 53 f9 ff ff       	call   c00209e6 <SATA::access(unsigned long long, int, void*, bool)>
c0021093:	83 c4 20             	add    esp,0x20
c0021096:	89 c3                	mov    ebx,eax
c0021098:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c002109f:	74 2d                	je     c00210ce <SATA::read(unsigned long long, int, void*)+0xf0>
c00210a1:	83 ec 0c             	sub    esp,0xc
c00210a4:	68 53 77 02 c0       	push   0xc0027753
c00210a9:	e8 ff 8c fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00210ae:	83 c4 10             	add    esp,0x10
c00210b1:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c00210b8:	75 14                	jne    c00210ce <SATA::read(unsigned long long, int, void*)+0xf0>
c00210ba:	e4 60                	in     al,0x60
c00210bc:	3c 5a                	cmp    al,0x5a
c00210be:	74 04                	je     c00210c4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210c0:	3c 1c                	cmp    al,0x1c
c00210c2:	75 f6                	jne    c00210ba <SATA::read(unsigned long long, int, void*)+0xdc>
c00210c4:	e4 60                	in     al,0x60
c00210c6:	3c 5a                	cmp    al,0x5a
c00210c8:	74 fa                	je     c00210c4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210ca:	3c 1c                	cmp    al,0x1c
c00210cc:	74 f6                	je     c00210c4 <SATA::read(unsigned long long, int, void*)+0xe6>
c00210ce:	31 c0                	xor    eax,eax
c00210d0:	85 db                	test   ebx,ebx
c00210d2:	0f 95 c0             	setne  al
c00210d5:	83 c4 0c             	add    esp,0xc
c00210d8:	5b                   	pop    ebx
c00210d9:	5e                   	pop    esi
c00210da:	5f                   	pop    edi
c00210db:	5d                   	pop    ebp
c00210dc:	c3                   	ret    
c00210dd:	90                   	nop

c00210de <SATA::write(unsigned long long, int, void*)>:
c00210de:	55                   	push   ebp
c00210df:	57                   	push   edi
c00210e0:	56                   	push   esi
c00210e1:	53                   	push   ebx
c00210e2:	83 ec 1c             	sub    esp,0x1c
c00210e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00210e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00210ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00210f1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00210f5:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c00210fc:	74 2d                	je     c002112b <SATA::write(unsigned long long, int, void*)+0x4d>
c00210fe:	83 ec 0c             	sub    esp,0xc
c0021101:	68 60 77 02 c0       	push   0xc0027760
c0021106:	e8 a2 8c fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c002110b:	83 c4 10             	add    esp,0x10
c002110e:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c0021115:	75 14                	jne    c002112b <SATA::write(unsigned long long, int, void*)+0x4d>
c0021117:	e4 60                	in     al,0x60
c0021119:	3c 1c                	cmp    al,0x1c
c002111b:	74 04                	je     c0021121 <SATA::write(unsigned long long, int, void*)+0x43>
c002111d:	3c 5a                	cmp    al,0x5a
c002111f:	75 f6                	jne    c0021117 <SATA::write(unsigned long long, int, void*)+0x39>
c0021121:	e4 60                	in     al,0x60
c0021123:	3c 5a                	cmp    al,0x5a
c0021125:	74 fa                	je     c0021121 <SATA::write(unsigned long long, int, void*)+0x43>
c0021127:	3c 1c                	cmp    al,0x1c
c0021129:	74 f6                	je     c0021121 <SATA::write(unsigned long long, int, void*)+0x43>
c002112b:	8d 55 ff             	lea    edx,[ebp-0x1]
c002112e:	b8 04 00 00 00       	mov    eax,0x4
c0021133:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0021139:	0f 87 bd 00 00 00    	ja     c00211fc <SATA::write(unsigned long long, int, void*)+0x11e>
c002113f:	b8 06 00 00 00       	mov    eax,0x6
c0021144:	85 db                	test   ebx,ebx
c0021146:	0f 84 b0 00 00 00    	je     c00211fc <SATA::write(unsigned long long, int, void*)+0x11e>
c002114c:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c0021153:	74 2d                	je     c0021182 <SATA::write(unsigned long long, int, void*)+0xa4>
c0021155:	83 ec 0c             	sub    esp,0xc
c0021158:	68 6e 77 02 c0       	push   0xc002776e
c002115d:	e8 4b 8c fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c0021162:	83 c4 10             	add    esp,0x10
c0021165:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c002116c:	75 14                	jne    c0021182 <SATA::write(unsigned long long, int, void*)+0xa4>
c002116e:	e4 60                	in     al,0x60
c0021170:	3c 1c                	cmp    al,0x1c
c0021172:	74 04                	je     c0021178 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021174:	3c 5a                	cmp    al,0x5a
c0021176:	75 f6                	jne    c002116e <SATA::write(unsigned long long, int, void*)+0x90>
c0021178:	e4 60                	in     al,0x60
c002117a:	3c 5a                	cmp    al,0x5a
c002117c:	74 fa                	je     c0021178 <SATA::write(unsigned long long, int, void*)+0x9a>
c002117e:	3c 1c                	cmp    al,0x1c
c0021180:	74 f6                	je     c0021178 <SATA::write(unsigned long long, int, void*)+0x9a>
c0021182:	c1 e5 09             	shl    ebp,0x9
c0021185:	01 dd                	add    ebp,ebx
c0021187:	89 f0                	mov    eax,esi
c0021189:	89 fa                	mov    edx,edi
c002118b:	83 c0 01             	add    eax,0x1
c002118e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021192:	83 d2 00             	adc    edx,0x0
c0021195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021199:	50                   	push   eax
c002119a:	50                   	push   eax
c002119b:	6a 01                	push   0x1
c002119d:	53                   	push   ebx
c002119e:	81 c3 00 02 00 00    	add    ebx,0x200
c00211a4:	6a 01                	push   0x1
c00211a6:	57                   	push   edi
c00211a7:	56                   	push   esi
c00211a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00211ac:	e8 35 f8 ff ff       	call   c00209e6 <SATA::access(unsigned long long, int, void*, bool)>
c00211b1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00211b5:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00211b9:	83 c4 20             	add    esp,0x20
c00211bc:	39 dd                	cmp    ebp,ebx
c00211be:	75 c7                	jne    c0021187 <SATA::write(unsigned long long, int, void*)+0xa9>
c00211c0:	f6 05 81 8a 02 c0 08 	test   BYTE PTR ds:0xc0028a81,0x8
c00211c7:	75 04                	jne    c00211cd <SATA::write(unsigned long long, int, void*)+0xef>
c00211c9:	31 c0                	xor    eax,eax
c00211cb:	eb 2f                	jmp    c00211fc <SATA::write(unsigned long long, int, void*)+0x11e>
c00211cd:	83 ec 0c             	sub    esp,0xc
c00211d0:	68 7c 77 02 c0       	push   0xc002777c
c00211d5:	e8 d3 8b fe ff       	call   c0009dad <Krnl::setBootMessage(char const*)>
c00211da:	83 c4 10             	add    esp,0x10
c00211dd:	f6 05 80 8a 02 c0 80 	test   BYTE PTR ds:0xc0028a80,0x80
c00211e4:	75 e3                	jne    c00211c9 <SATA::write(unsigned long long, int, void*)+0xeb>
c00211e6:	e4 60                	in     al,0x60
c00211e8:	3c 5a                	cmp    al,0x5a
c00211ea:	74 04                	je     c00211f0 <SATA::write(unsigned long long, int, void*)+0x112>
c00211ec:	3c 1c                	cmp    al,0x1c
c00211ee:	75 f6                	jne    c00211e6 <SATA::write(unsigned long long, int, void*)+0x108>
c00211f0:	e4 60                	in     al,0x60
c00211f2:	3c 5a                	cmp    al,0x5a
c00211f4:	74 fa                	je     c00211f0 <SATA::write(unsigned long long, int, void*)+0x112>
c00211f6:	3c 1c                	cmp    al,0x1c
c00211f8:	74 f6                	je     c00211f0 <SATA::write(unsigned long long, int, void*)+0x112>
c00211fa:	eb cd                	jmp    c00211c9 <SATA::write(unsigned long long, int, void*)+0xeb>
c00211fc:	83 c4 1c             	add    esp,0x1c
c00211ff:	5b                   	pop    ebx
c0021200:	5e                   	pop    esi
c0021201:	5f                   	pop    edi
c0021202:	5d                   	pop    ebp
c0021203:	c3                   	ret    

c0021204 <SATAPI::write(unsigned long long, int, void*)>:
c0021204:	b8 03 00 00 00       	mov    eax,0x3
c0021209:	c3                   	ret    

c002120a <SATAPI::close(int, int, void*)>:
c002120a:	83 ec 0c             	sub    esp,0xc
c002120d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021211:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021217:	85 c0                	test   eax,eax
c0021219:	74 0c                	je     c0021227 <SATAPI::close(int, int, void*)+0x1d>
c002121b:	83 ec 0c             	sub    esp,0xc
c002121e:	8b 10                	mov    edx,DWORD PTR [eax]
c0021220:	50                   	push   eax
c0021221:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021224:	83 c4 10             	add    esp,0x10
c0021227:	31 c0                	xor    eax,eax
c0021229:	83 c4 0c             	add    esp,0xc
c002122c:	c3                   	ret    
c002122d:	90                   	nop

c002122e <SATAPI::SATAPI()>:
c002122e:	83 ec 0c             	sub    esp,0xc
c0021231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021235:	83 ec 04             	sub    esp,0x4
c0021238:	68 00 08 00 00       	push   0x800
c002123d:	68 c4 77 02 c0       	push   0xc00277c4
c0021242:	50                   	push   eax
c0021243:	e8 a2 d7 fe ff       	call   c000e9ea <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021248:	83 c4 10             	add    esp,0x10
c002124b:	ba 00 79 02 c0       	mov    edx,0xc0027900
c0021250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021254:	89 10                	mov    DWORD PTR [eax],edx
c0021256:	90                   	nop
c0021257:	83 c4 0c             	add    esp,0xc
c002125a:	c3                   	ret    
c002125b:	90                   	nop

c002125c <SATAPI::diskRemoved()>:
c002125c:	53                   	push   ebx
c002125d:	83 ec 14             	sub    esp,0x14
c0021260:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021264:	68 d0 77 02 c0       	push   0xc00277d0
c0021269:	e8 d1 bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002126e:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021275:	c7 04 24 24 75 02 c0 	mov    DWORD PTR [esp],0xc0027524
c002127c:	e8 be bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021281:	58                   	pop    eax
c0021282:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0021288:	e8 91 f5 fe ff       	call   c001081e <LogicalDisk::unmount()>
c002128d:	c7 04 24 33 75 02 c0 	mov    DWORD PTR [esp],0xc0027533
c0021294:	e8 a6 bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021299:	5a                   	pop    edx
c002129a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00212a0:	e8 7f ff fe ff       	call   c0011224 <VCache::writeWriteBuffer()>
c00212a5:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00212ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00212af:	83 c4 18             	add    esp,0x18
c00212b2:	5b                   	pop    ebx
c00212b3:	e9 5c ff fe ff       	jmp    c0011214 <VCache::invalidateReadBuffer()>

c00212b8 <SATAPI::diskInserted()>:
c00212b8:	83 ec 18             	sub    esp,0x18
c00212bb:	68 e7 77 02 c0       	push   0xc00277e7
c00212c0:	e8 7a bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00212c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212c9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00212d0:	83 c4 1c             	add    esp,0x1c
c00212d3:	c3                   	ret    

c00212d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00212d4:	55                   	push   ebp
c00212d5:	57                   	push   edi
c00212d6:	56                   	push   esi
c00212d7:	53                   	push   ebx
c00212d8:	83 ec 38             	sub    esp,0x38
c00212db:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00212df:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00212e3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00212e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00212eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00212ef:	68 ff 77 02 c0       	push   0xc00277ff
c00212f4:	e8 46 bd fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00212f9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00212ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021305:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021309:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002130f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021313:	c1 e0 07             	shl    eax,0x7
c0021316:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c002131a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002131e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0021328:	5a                   	pop    edx
c0021329:	59                   	pop    ecx
c002132a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002132e:	8d 58 02             	lea    ebx,[eax+0x2]
c0021331:	c1 e3 07             	shl    ebx,0x7
c0021334:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0021338:	53                   	push   ebx
c0021339:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002133f:	e8 c2 e3 ff ff       	call   c001f706 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021344:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021348:	83 c4 10             	add    esp,0x10
c002134b:	b8 01 00 00 00       	mov    eax,0x1
c0021350:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021355:	0f 84 04 02 00 00    	je     c002155f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c002135b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021361:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021363:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0021369:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002136f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021373:	c1 e1 05             	shl    ecx,0x5
c0021376:	01 c8                	add    eax,ecx
c0021378:	8b 08                	mov    ecx,DWORD PTR [eax]
c002137a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021380:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021386:	89 08                	mov    DWORD PTR [eax],ecx
c0021388:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002138e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021394:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002139a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002139d:	8d 7b 40             	lea    edi,[ebx+0x40]
c00213a0:	50                   	push   eax
c00213a1:	68 90 00 00 00       	push   0x90
c00213a6:	6a 00                	push   0x0
c00213a8:	53                   	push   ebx
c00213a9:	e8 ce f2 fd ff       	call   c000067c <memset>
c00213ae:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00213b2:	b9 0c 00 00 00       	mov    ecx,0xc
c00213b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213b9:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00213bf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00213c3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00213c9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00213cd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00213d1:	48                   	dec    eax
c00213d2:	25 ff ff 3f 00       	and    eax,0x3fffff
c00213d7:	89 c1                	mov    ecx,eax
c00213d9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00213df:	25 00 00 c0 ff       	and    eax,0xffc00000
c00213e4:	09 c8                	or     eax,ecx
c00213e6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00213ec:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00213ef:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00213f6:	66 25 00 7f          	and    ax,0x7f00
c00213fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00213fe:	66 0d 27 80          	or     ax,0x8027
c0021402:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0021406:	66 89 03             	mov    WORD PTR [ebx],ax
c0021409:	89 d0                	mov    eax,edx
c002140b:	c1 ea 18             	shr    edx,0x18
c002140e:	c1 e8 10             	shr    eax,0x10
c0021411:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021414:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021417:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002141b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002141e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021422:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0021425:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0021429:	83 c4 10             	add    esp,0x10
c002142c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021434:	31 c0                	xor    eax,eax
c0021436:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002143c:	80 e1 88             	and    cl,0x88
c002143f:	74 0a                	je     c002144b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0021441:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021446:	74 0a                	je     c0021452 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0021448:	40                   	inc    eax
c0021449:	eb eb                	jmp    c0021436 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c002144b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021450:	75 0f                	jne    c0021461 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0021452:	83 ec 0c             	sub    esp,0xc
c0021455:	68 ca 76 02 c0       	push   0xc00276ca
c002145a:	e8 96 3b ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002145f:	eb 48                	jmp    c00214a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0021461:	be 01 00 00 00       	mov    esi,0x1
c0021466:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002146a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002146e:	d3 e6                	shl    esi,cl
c0021470:	c1 e7 07             	shl    edi,0x7
c0021473:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0021479:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c002147e:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0021482:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021488:	85 c6                	test   esi,eax
c002148a:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0021490:	0f 84 96 00 00 00    	je     c002152c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0021496:	0f ba e0 1e          	bt     eax,0x1e
c002149a:	73 1a                	jae    c00214b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c002149c:	83 ec 0c             	sub    esp,0xc
c002149f:	68 19 78 02 c0       	push   0xc0027819
c00214a4:	e8 96 bb fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00214a9:	83 c4 10             	add    esp,0x10
c00214ac:	b8 01 00 00 00       	mov    eax,0x1
c00214b1:	e9 a9 00 00 00       	jmp    c002155f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c00214b6:	83 fb 0d             	cmp    ebx,0xd
c00214b9:	77 12                	ja     c00214cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00214bb:	83 ec 0c             	sub    esp,0xc
c00214be:	68 c8 00 00 00       	push   0xc8
c00214c3:	e8 54 7b ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c00214c8:	83 c4 10             	add    esp,0x10
c00214cb:	eb 2a                	jmp    c00214f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c00214cd:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c00214d3:	83 f8 0d             	cmp    eax,0xd
c00214d6:	77 0a                	ja     c00214e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c00214d8:	83 ec 0c             	sub    esp,0xc
c00214db:	68 58 02 00 00       	push   0x258
c00214e0:	eb 28                	jmp    c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c00214e2:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c00214e8:	83 f8 0d             	cmp    eax,0xd
c00214eb:	77 0a                	ja     c00214f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c00214ed:	83 ec 0c             	sub    esp,0xc
c00214f0:	68 dc 05 00 00       	push   0x5dc
c00214f5:	eb 13                	jmp    c002150a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c00214f7:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c00214fd:	83 f8 0d             	cmp    eax,0xd
c0021500:	77 10                	ja     c0021512 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0021502:	83 ec 0c             	sub    esp,0xc
c0021505:	68 c4 09 00 00       	push   0x9c4
c002150a:	e8 0d 7b ff ff       	call   c001901c <milliTenthSleep(unsigned int)>
c002150f:	83 c4 10             	add    esp,0x10
c0021512:	43                   	inc    ebx
c0021513:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0021519:	0f 85 63 ff ff ff    	jne    c0021482 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c002151f:	83 ec 0c             	sub    esp,0xc
c0021522:	68 2c 78 02 c0       	push   0xc002782c
c0021527:	e9 78 ff ff ff       	jmp    c00214a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c002152c:	0f ba e0 1e          	bt     eax,0x1e
c0021530:	73 0d                	jae    c002153f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0021532:	83 ec 0c             	sub    esp,0xc
c0021535:	68 40 78 02 c0       	push   0xc0027840
c002153a:	e9 65 ff ff ff       	jmp    c00214a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c002153f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021544:	74 17                	je     c002155d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0021546:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002154b:	74 10                	je     c002155d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c002154d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0021553:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0021557:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002155b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002155d:	31 c0                	xor    eax,eax
c002155f:	83 c4 2c             	add    esp,0x2c
c0021562:	5b                   	pop    ebx
c0021563:	5e                   	pop    esi
c0021564:	5f                   	pop    edi
c0021565:	5d                   	pop    ebp
c0021566:	c3                   	ret    
c0021567:	90                   	nop

c0021568 <SATAPI::eject()>:
c0021568:	57                   	push   edi
c0021569:	b9 03 00 00 00       	mov    ecx,0x3
c002156e:	53                   	push   ebx
c002156f:	83 ec 14             	sub    esp,0x14
c0021572:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021576:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002157a:	fc                   	cld    
c002157b:	31 c0                	xor    eax,eax
c002157d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002157f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021584:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021589:	50                   	push   eax
c002158a:	6a 00                	push   0x0
c002158c:	6a 00                	push   0x0
c002158e:	6a 00                	push   0x0
c0021590:	6a 00                	push   0x0
c0021592:	6a 02                	push   0x2
c0021594:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021598:	50                   	push   eax
c0021599:	53                   	push   ebx
c002159a:	e8 35 fd ff ff       	call   c00212d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002159f:	83 c4 20             	add    esp,0x20
c00215a2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00215a9:	74 0c                	je     c00215b7 <SATAPI::eject()+0x4f>
c00215ab:	83 ec 0c             	sub    esp,0xc
c00215ae:	53                   	push   ebx
c00215af:	e8 a8 fc ff ff       	call   c002125c <SATAPI::diskRemoved()>
c00215b4:	83 c4 10             	add    esp,0x10
c00215b7:	83 c4 14             	add    esp,0x14
c00215ba:	31 c0                	xor    eax,eax
c00215bc:	5b                   	pop    ebx
c00215bd:	5f                   	pop    edi
c00215be:	c3                   	ret    
c00215bf:	90                   	nop

c00215c0 <SATAPI::detectMedia()>:
c00215c0:	56                   	push   esi
c00215c1:	53                   	push   ebx
c00215c2:	83 ec 30             	sub    esp,0x30
c00215c5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00215c9:	68 55 78 02 c0       	push   0xc0027855
c00215ce:	e8 6c ba fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00215d3:	83 c4 0c             	add    esp,0xc
c00215d6:	6a 0c                	push   0xc
c00215d8:	6a 00                	push   0x0
c00215da:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00215de:	56                   	push   esi
c00215df:	e8 98 f0 fd ff       	call   c000067c <memset>
c00215e4:	83 c4 0c             	add    esp,0xc
c00215e7:	6a 00                	push   0x0
c00215e9:	6a 00                	push   0x0
c00215eb:	6a 00                	push   0x0
c00215ed:	6a 00                	push   0x0
c00215ef:	6a 00                	push   0x0
c00215f1:	56                   	push   esi
c00215f2:	53                   	push   ebx
c00215f3:	e8 dc fc ff ff       	call   c00212d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00215f8:	83 c4 20             	add    esp,0x20
c00215fb:	48                   	dec    eax
c00215fc:	75 27                	jne    c0021625 <SATAPI::detectMedia()+0x65>
c00215fe:	83 ec 0c             	sub    esp,0xc
c0021601:	68 69 78 02 c0       	push   0xc0027869
c0021606:	e8 34 ba fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c002160b:	83 c4 10             	add    esp,0x10
c002160e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021615:	74 0e                	je     c0021625 <SATAPI::detectMedia()+0x65>
c0021617:	83 ec 0c             	sub    esp,0xc
c002161a:	53                   	push   ebx
c002161b:	e8 3c fc ff ff       	call   c002125c <SATAPI::diskRemoved()>
c0021620:	e9 d1 00 00 00       	jmp    c00216f6 <SATAPI::detectMedia()+0x136>
c0021625:	50                   	push   eax
c0021626:	6a 0c                	push   0xc
c0021628:	6a 00                	push   0x0
c002162a:	56                   	push   esi
c002162b:	e8 4c f0 fd ff       	call   c000067c <memset>
c0021630:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021635:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002163a:	83 c4 0c             	add    esp,0xc
c002163d:	6a 01                	push   0x1
c002163f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021643:	50                   	push   eax
c0021644:	6a 00                	push   0x0
c0021646:	6a 00                	push   0x0
c0021648:	6a 12                	push   0x12
c002164a:	56                   	push   esi
c002164b:	53                   	push   ebx
c002164c:	e8 83 fc ff ff       	call   c00212d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021651:	83 c4 20             	add    esp,0x20
c0021654:	48                   	dec    eax
c0021655:	75 19                	jne    c0021670 <SATAPI::detectMedia()+0xb0>
c0021657:	83 ec 0c             	sub    esp,0xc
c002165a:	68 73 78 02 c0       	push   0xc0027873
c002165f:	e8 db b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021664:	83 c4 10             	add    esp,0x10
c0021667:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002166e:	75 a7                	jne    c0021617 <SATAPI::detectMedia()+0x57>
c0021670:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021674:	83 e0 7f             	and    eax,0x7f
c0021677:	3c 70                	cmp    al,0x70
c0021679:	74 25                	je     c00216a0 <SATAPI::detectMedia()+0xe0>
c002167b:	83 ec 0c             	sub    esp,0xc
c002167e:	68 7d 78 02 c0       	push   0xc002787d
c0021683:	e8 b7 b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021688:	83 c4 10             	add    esp,0x10
c002168b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021692:	75 0c                	jne    c00216a0 <SATAPI::detectMedia()+0xe0>
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	53                   	push   ebx
c0021698:	e8 1b fc ff ff       	call   c00212b8 <SATAPI::diskInserted()>
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00216a4:	83 e0 0f             	and    eax,0xf
c00216a7:	3c 02                	cmp    al,0x2
c00216a9:	75 25                	jne    c00216d0 <SATAPI::detectMedia()+0x110>
c00216ab:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00216b0:	75 47                	jne    c00216f9 <SATAPI::detectMedia()+0x139>
c00216b2:	83 ec 0c             	sub    esp,0xc
c00216b5:	68 86 78 02 c0       	push   0xc0027886
c00216ba:	e8 80 b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216c9:	74 2e                	je     c00216f9 <SATAPI::detectMedia()+0x139>
c00216cb:	e9 47 ff ff ff       	jmp    c0021617 <SATAPI::detectMedia()+0x57>
c00216d0:	84 c0                	test   al,al
c00216d2:	75 25                	jne    c00216f9 <SATAPI::detectMedia()+0x139>
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	68 8f 78 02 c0       	push   0xc002788f
c00216dc:	e8 5e b9 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00216e1:	83 c4 10             	add    esp,0x10
c00216e4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00216eb:	75 0c                	jne    c00216f9 <SATAPI::detectMedia()+0x139>
c00216ed:	83 ec 0c             	sub    esp,0xc
c00216f0:	53                   	push   ebx
c00216f1:	e8 c2 fb ff ff       	call   c00212b8 <SATAPI::diskInserted()>
c00216f6:	83 c4 10             	add    esp,0x10
c00216f9:	83 c4 24             	add    esp,0x24
c00216fc:	5b                   	pop    ebx
c00216fd:	5e                   	pop    esi
c00216fe:	c3                   	ret    
c00216ff:	90                   	nop

c0021700 <SATAPI::open(int, int, void*)>:
c0021700:	56                   	push   esi
c0021701:	53                   	push   ebx
c0021702:	51                   	push   ecx
c0021703:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002170b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021715:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002171b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021729:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021733:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021739:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021740:	e8 c5 8c fe ff       	call   c000a40a <Phys::allocatePage()>
c0021745:	89 c6                	mov    esi,eax
c0021747:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002174d:	81 c6 00 10 00 00    	add    esi,0x1000
c0021753:	e8 b2 8c fe ff       	call   c000a40a <Phys::allocatePage()>
c0021758:	39 c6                	cmp    esi,eax
c002175a:	74 10                	je     c002176c <SATAPI::open(int, int, void*)+0x6c>
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	68 99 78 02 c0       	push   0xc0027899
c0021764:	e8 8c 38 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0021769:	83 c4 10             	add    esp,0x10
c002176c:	83 ec 0c             	sub    esp,0xc
c002176f:	6a 02                	push   0x2
c0021771:	e8 a3 a5 fe ff       	call   c000bd19 <Virt::allocateKernelVirtualPages(int)>
c0021776:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002177c:	6a 03                	push   0x3
c002177e:	50                   	push   eax
c002177f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021785:	ff 35 90 8b 02 c0    	push   DWORD PTR ds:0xc0028b90
c002178b:	e8 30 ac fe ff       	call   c000c3c0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021790:	83 c4 14             	add    esp,0x14
c0021793:	68 74 01 00 00       	push   0x174
c0021798:	e8 b6 85 fe ff       	call   c0009d53 <malloc>
c002179d:	83 c4 0c             	add    esp,0xc
c00217a0:	89 c6                	mov    esi,eax
c00217a2:	6a 00                	push   0x0
c00217a4:	68 ff ff ff 7f       	push   0x7fffffff
c00217a9:	6a 00                	push   0x0
c00217ab:	6a 00                	push   0x0
c00217ad:	53                   	push   ebx
c00217ae:	68 af 78 02 c0       	push   0xc00278af
c00217b3:	50                   	push   eax
c00217b4:	e8 71 ee fe ff       	call   c001062a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00217b9:	83 c4 14             	add    esp,0x14
c00217bc:	56                   	push   esi
c00217bd:	e8 1e ef fe ff       	call   c00106e0 <LogicalDisk::assignDriveLetter()>
c00217c2:	5a                   	pop    edx
c00217c3:	0f be c0             	movsx  eax,al
c00217c6:	59                   	pop    ecx
c00217c7:	50                   	push   eax
c00217c8:	68 41 75 02 c0       	push   0xc0027541
c00217cd:	e8 6d b8 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c00217d2:	58                   	pop    eax
c00217d3:	5a                   	pop    edx
c00217d4:	56                   	push   esi
c00217d5:	53                   	push   ebx
c00217d6:	e8 d7 cd fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c00217db:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00217e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217e4:	e8 69 d2 fe ff       	call   c000ea52 <PhysicalDisk::startCache()>
c00217e9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00217f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217f3:	e8 c8 fd ff ff       	call   c00215c0 <SATAPI::detectMedia()>
c00217f8:	83 c4 14             	add    esp,0x14
c00217fb:	31 c0                	xor    eax,eax
c00217fd:	5b                   	pop    ebx
c00217fe:	5e                   	pop    esi
c00217ff:	c3                   	ret    

c0021800 <SATAPI::read(unsigned long long, int, void*)>:
c0021800:	55                   	push   ebp
c0021801:	57                   	push   edi
c0021802:	56                   	push   esi
c0021803:	53                   	push   ebx
c0021804:	83 ec 48             	sub    esp,0x48
c0021807:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c002180b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c002180f:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021813:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021817:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002181b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002181f:	68 bd 78 02 c0       	push   0xc00278bd
c0021824:	e8 16 b8 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021829:	83 c4 10             	add    esp,0x10
c002182c:	83 fb 04             	cmp    ebx,0x4
c002182f:	7e 10                	jle    c0021841 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021831:	83 ec 0c             	sub    esp,0xc
c0021834:	68 ce 78 02 c0       	push   0xc00278ce
c0021839:	e8 b7 37 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002183e:	83 c4 10             	add    esp,0x10
c0021841:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021845:	31 ed                	xor    ebp,ebp
c0021847:	b9 03 00 00 00       	mov    ecx,0x3
c002184c:	fc                   	cld    
c002184d:	89 e8                	mov    eax,ebp
c002184f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021851:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021856:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c002185b:	50                   	push   eax
c002185c:	6a 00                	push   0x0
c002185e:	6a 00                	push   0x0
c0021860:	6a 00                	push   0x0
c0021862:	6a 00                	push   0x0
c0021864:	6a 02                	push   0x2
c0021866:	8d 44 24 30          	lea    eax,[esp+0x30]
c002186a:	50                   	push   eax
c002186b:	56                   	push   esi
c002186c:	e8 63 fa ff ff       	call   c00212d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021871:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021875:	89 e8                	mov    eax,ebp
c0021877:	b9 03 00 00 00       	mov    ecx,0x3
c002187c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002187e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021882:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021886:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c002188b:	86 e0                	xchg   al,ah
c002188d:	c1 c0 10             	rol    eax,0x10
c0021890:	86 e0                	xchg   al,ah
c0021892:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021896:	83 c4 1c             	add    esp,0x1c
c0021899:	53                   	push   ebx
c002189a:	c1 e3 0b             	shl    ebx,0xb
c002189d:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c00218a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00218a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00218a9:	53                   	push   ebx
c00218aa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00218ae:	50                   	push   eax
c00218af:	56                   	push   esi
c00218b0:	e8 1f fa ff ff       	call   c00212d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00218b5:	83 c4 20             	add    esp,0x20
c00218b8:	85 c0                	test   eax,eax
c00218ba:	74 14                	je     c00218d0 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00218bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218c0:	83 ec 0c             	sub    esp,0xc
c00218c3:	56                   	push   esi
c00218c4:	e8 f7 fc ff ff       	call   c00215c0 <SATAPI::detectMedia()>
c00218c9:	83 c4 10             	add    esp,0x10
c00218cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218d0:	83 c4 3c             	add    esp,0x3c
c00218d3:	5b                   	pop    ebx
c00218d4:	5e                   	pop    esi
c00218d5:	5f                   	pop    edi
c00218d6:	5d                   	pop    ebp
c00218d7:	c3                   	ret    

c00218d8 <AVX::open(int, int, void*)>:
c00218d8:	83 ec 0c             	sub    esp,0xc
c00218db:	e8 98 11 00 00       	call   c0022a78 <avxInit>
c00218e0:	b8 00 00 00 00       	mov    eax,0x0
c00218e5:	83 c4 0c             	add    esp,0xc
c00218e8:	c3                   	ret    
c00218e9:	90                   	nop
c00218ea:	66 90                	xchg   ax,ax

c00218ec <AVX::close(int, int, void*)>:
c00218ec:	83 ec 0c             	sub    esp,0xc
c00218ef:	e8 85 11 00 00       	call   c0022a79 <avxClose>
c00218f4:	b8 00 00 00 00       	mov    eax,0x0
c00218f9:	83 c4 0c             	add    esp,0xc
c00218fc:	c3                   	ret    
c00218fd:	90                   	nop
c00218fe:	66 90                	xchg   ax,ax

c0021900 <AVX::available()>:
c0021900:	83 ec 0c             	sub    esp,0xc
c0021903:	e8 68 11 00 00       	call   c0022a70 <avxDetect>
c0021908:	85 c0                	test   eax,eax
c002190a:	0f 95 c0             	setne  al
c002190d:	83 c4 0c             	add    esp,0xc
c0021910:	c3                   	ret    
c0021911:	90                   	nop
c0021912:	66 90                	xchg   ax,ax

c0021914 <AVX::save(void*)>:
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002191b:	83 ec 0c             	sub    esp,0xc
c002191e:	50                   	push   eax
c002191f:	e8 52 11 00 00       	call   c0022a76 <avxSave>
c0021924:	83 c4 10             	add    esp,0x10
c0021927:	90                   	nop
c0021928:	83 c4 0c             	add    esp,0xc
c002192b:	c3                   	ret    

c002192c <AVX::load(void*)>:
c002192c:	83 ec 0c             	sub    esp,0xc
c002192f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021933:	83 ec 0c             	sub    esp,0xc
c0021936:	50                   	push   eax
c0021937:	e8 3b 11 00 00       	call   c0022a77 <avxLoad>
c002193c:	83 c4 10             	add    esp,0x10
c002193f:	90                   	nop
c0021940:	83 c4 0c             	add    esp,0xc
c0021943:	c3                   	ret    

c0021944 <AVX::AVX()>:
c0021944:	83 ec 0c             	sub    esp,0xc
c0021947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194b:	83 ec 08             	sub    esp,0x8
c002194e:	68 30 79 02 c0       	push   0xc0027930
c0021953:	50                   	push   eax
c0021954:	e8 6f d1 fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021959:	83 c4 10             	add    esp,0x10
c002195c:	ba 40 79 02 c0       	mov    edx,0xc0027940
c0021961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021965:	89 10                	mov    DWORD PTR [eax],edx
c0021967:	90                   	nop
c0021968:	83 c4 0c             	add    esp,0xc
c002196b:	c3                   	ret    

c002196c <MMX::available()>:
c002196c:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0021971:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021977:	83 e0 20             	and    eax,0x20
c002197a:	84 c0                	test   al,al
c002197c:	0f 95 c0             	setne  al
c002197f:	c3                   	ret    

c0021980 <MMX::open(int, int, void*)>:
c0021980:	83 ec 0c             	sub    esp,0xc
c0021983:	e8 79 11 00 00       	call   c0022b01 <x87Init>
c0021988:	b8 00 00 00 00       	mov    eax,0x0
c002198d:	83 c4 0c             	add    esp,0xc
c0021990:	c3                   	ret    
c0021991:	90                   	nop
c0021992:	66 90                	xchg   ax,ax

c0021994 <MMX::close(int, int, void*)>:
c0021994:	83 ec 0c             	sub    esp,0xc
c0021997:	e8 78 11 00 00       	call   c0022b14 <x87Close>
c002199c:	b8 00 00 00 00       	mov    eax,0x0
c00219a1:	83 c4 0c             	add    esp,0xc
c00219a4:	c3                   	ret    
c00219a5:	90                   	nop
c00219a6:	66 90                	xchg   ax,ax

c00219a8 <MMX::save(void*)>:
c00219a8:	83 ec 0c             	sub    esp,0xc
c00219ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219af:	83 ec 0c             	sub    esp,0xc
c00219b2:	50                   	push   eax
c00219b3:	e8 39 11 00 00       	call   c0022af1 <x87Save>
c00219b8:	83 c4 10             	add    esp,0x10
c00219bb:	90                   	nop
c00219bc:	83 c4 0c             	add    esp,0xc
c00219bf:	c3                   	ret    

c00219c0 <MMX::load(void*)>:
c00219c0:	83 ec 0c             	sub    esp,0xc
c00219c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219c7:	83 ec 0c             	sub    esp,0xc
c00219ca:	50                   	push   eax
c00219cb:	e8 29 11 00 00       	call   c0022af9 <x87Load>
c00219d0:	83 c4 10             	add    esp,0x10
c00219d3:	90                   	nop
c00219d4:	83 c4 0c             	add    esp,0xc
c00219d7:	c3                   	ret    

c00219d8 <MMX::MMX()>:
c00219d8:	83 ec 0c             	sub    esp,0xc
c00219db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219df:	83 ec 08             	sub    esp,0x8
c00219e2:	68 70 79 02 c0       	push   0xc0027970
c00219e7:	50                   	push   eax
c00219e8:	e8 db d0 fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c00219ed:	83 c4 10             	add    esp,0x10
c00219f0:	ba 80 79 02 c0       	mov    edx,0xc0027980
c00219f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f9:	89 10                	mov    DWORD PTR [eax],edx
c00219fb:	90                   	nop
c00219fc:	83 c4 0c             	add    esp,0xc
c00219ff:	c3                   	ret    

c0021a00 <SSE::open(int, int, void*)>:
c0021a00:	83 ec 0c             	sub    esp,0xc
c0021a03:	e8 ac 10 00 00       	call   c0022ab4 <sseInit>
c0021a08:	b8 00 00 00 00       	mov    eax,0x0
c0021a0d:	83 c4 0c             	add    esp,0xc
c0021a10:	c3                   	ret    
c0021a11:	90                   	nop
c0021a12:	66 90                	xchg   ax,ax

c0021a14 <SSE::close(int, int, void*)>:
c0021a14:	83 ec 0c             	sub    esp,0xc
c0021a17:	e8 a8 10 00 00       	call   c0022ac4 <sseClose>
c0021a1c:	b8 00 00 00 00       	mov    eax,0x0
c0021a21:	83 c4 0c             	add    esp,0xc
c0021a24:	c3                   	ret    
c0021a25:	90                   	nop
c0021a26:	66 90                	xchg   ax,ax

c0021a28 <SSE::available()>:
c0021a28:	83 ec 1c             	sub    esp,0x1c
c0021a2b:	e8 60 10 00 00       	call   c0022a90 <absolutelyNoChanceInHell>
c0021a30:	85 c0                	test   eax,eax
c0021a32:	0f 95 c0             	setne  al
c0021a35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021a39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021a3d:	83 c4 1c             	add    esp,0x1c
c0021a40:	c3                   	ret    
c0021a41:	90                   	nop
c0021a42:	66 90                	xchg   ax,ax

c0021a44 <SSE::save(void*)>:
c0021a44:	83 ec 0c             	sub    esp,0xc
c0021a47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a4b:	83 ec 0c             	sub    esp,0xc
c0021a4e:	50                   	push   eax
c0021a4f:	e8 54 10 00 00       	call   c0022aa8 <sseSave>
c0021a54:	83 c4 10             	add    esp,0x10
c0021a57:	90                   	nop
c0021a58:	83 c4 0c             	add    esp,0xc
c0021a5b:	c3                   	ret    

c0021a5c <SSE::load(void*)>:
c0021a5c:	83 ec 0c             	sub    esp,0xc
c0021a5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a63:	83 ec 0c             	sub    esp,0xc
c0021a66:	50                   	push   eax
c0021a67:	e8 42 10 00 00       	call   c0022aae <sseLoad>
c0021a6c:	83 c4 10             	add    esp,0x10
c0021a6f:	90                   	nop
c0021a70:	83 c4 0c             	add    esp,0xc
c0021a73:	c3                   	ret    

c0021a74 <SSE::SSE()>:
c0021a74:	83 ec 0c             	sub    esp,0xc
c0021a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7b:	83 ec 08             	sub    esp,0x8
c0021a7e:	68 b0 79 02 c0       	push   0xc00279b0
c0021a83:	50                   	push   eax
c0021a84:	e8 3f d0 fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021a89:	83 c4 10             	add    esp,0x10
c0021a8c:	ba c0 79 02 c0       	mov    edx,0xc00279c0
c0021a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a95:	89 10                	mov    DWORD PTR [eax],edx
c0021a97:	90                   	nop
c0021a98:	83 c4 0c             	add    esp,0xc
c0021a9b:	c3                   	ret    

c0021a9c <x87::open(int, int, void*)>:
c0021a9c:	83 ec 0c             	sub    esp,0xc
c0021a9f:	83 ec 0c             	sub    esp,0xc
c0021aa2:	68 f0 79 02 c0       	push   0xc00279f0
c0021aa7:	e8 93 b5 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021aac:	83 c4 10             	add    esp,0x10
c0021aaf:	e8 4d 10 00 00       	call   c0022b01 <x87Init>
c0021ab4:	b8 00 00 00 00       	mov    eax,0x0
c0021ab9:	83 c4 0c             	add    esp,0xc
c0021abc:	c3                   	ret    
c0021abd:	90                   	nop
c0021abe:	66 90                	xchg   ax,ax

c0021ac0 <x87::close(int, int, void*)>:
c0021ac0:	83 ec 0c             	sub    esp,0xc
c0021ac3:	e8 4c 10 00 00       	call   c0022b14 <x87Close>
c0021ac8:	b8 00 00 00 00       	mov    eax,0x0
c0021acd:	83 c4 0c             	add    esp,0xc
c0021ad0:	c3                   	ret    
c0021ad1:	90                   	nop
c0021ad2:	66 90                	xchg   ax,ax

c0021ad4 <x87::available()>:
c0021ad4:	83 ec 0c             	sub    esp,0xc
c0021ad7:	e8 fa 0f 00 00       	call   c0022ad6 <x87Detect>
c0021adc:	85 c0                	test   eax,eax
c0021ade:	0f 95 c0             	setne  al
c0021ae1:	83 c4 0c             	add    esp,0xc
c0021ae4:	c3                   	ret    
c0021ae5:	90                   	nop
c0021ae6:	66 90                	xchg   ax,ax

c0021ae8 <x87::save(void*)>:
c0021ae8:	83 ec 1c             	sub    esp,0x1c
c0021aeb:	0f 20 c0             	mov    eax,cr0
c0021aee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021af2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021af6:	83 ec 08             	sub    esp,0x8
c0021af9:	50                   	push   eax
c0021afa:	68 ff 79 02 c0       	push   0xc00279ff
c0021aff:	e8 3b b5 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b04:	83 c4 10             	add    esp,0x10
c0021b07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021b0b:	83 ec 0c             	sub    esp,0xc
c0021b0e:	50                   	push   eax
c0021b0f:	e8 dd 0f 00 00       	call   c0022af1 <x87Save>
c0021b14:	83 c4 10             	add    esp,0x10
c0021b17:	83 ec 0c             	sub    esp,0xc
c0021b1a:	68 1d 7a 02 c0       	push   0xc0027a1d
c0021b1f:	e8 1b b5 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b24:	83 c4 10             	add    esp,0x10
c0021b27:	90                   	nop
c0021b28:	83 c4 1c             	add    esp,0x1c
c0021b2b:	c3                   	ret    

c0021b2c <x87::load(void*)>:
c0021b2c:	83 ec 0c             	sub    esp,0xc
c0021b2f:	83 ec 0c             	sub    esp,0xc
c0021b32:	68 2e 7a 02 c0       	push   0xc0027a2e
c0021b37:	e8 03 b5 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b3c:	83 c4 10             	add    esp,0x10
c0021b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b43:	83 ec 0c             	sub    esp,0xc
c0021b46:	50                   	push   eax
c0021b47:	e8 ad 0f 00 00       	call   c0022af9 <x87Load>
c0021b4c:	83 c4 10             	add    esp,0x10
c0021b4f:	83 ec 0c             	sub    esp,0xc
c0021b52:	68 3f 7a 02 c0       	push   0xc0027a3f
c0021b57:	e8 e3 b4 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021b5c:	83 c4 10             	add    esp,0x10
c0021b5f:	90                   	nop
c0021b60:	83 c4 0c             	add    esp,0xc
c0021b63:	c3                   	ret    

c0021b64 <x87::x87()>:
c0021b64:	83 ec 0c             	sub    esp,0xc
c0021b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6b:	83 ec 08             	sub    esp,0x8
c0021b6e:	68 50 7a 02 c0       	push   0xc0027a50
c0021b73:	50                   	push   eax
c0021b74:	e8 4f cf fe ff       	call   c000eac8 <FPU::FPU(char const*)>
c0021b79:	83 c4 10             	add    esp,0x10
c0021b7c:	ba 60 7a 02 c0       	mov    edx,0xc0027a60
c0021b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b85:	89 10                	mov    DWORD PTR [eax],edx
c0021b87:	90                   	nop
c0021b88:	83 c4 0c             	add    esp,0xc
c0021b8b:	c3                   	ret    

c0021b8c <APIC::disable()>:
c0021b8c:	90                   	nop
c0021b8d:	c3                   	ret    

c0021b8e <APIC::close(int, int, void*)>:
c0021b8e:	55                   	push   ebp
c0021b8f:	89 e5                	mov    ebp,esp
c0021b91:	83 ec 08             	sub    esp,0x8
c0021b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b99:	83 c0 3c             	add    eax,0x3c
c0021b9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b9e:	83 ec 0c             	sub    esp,0xc
c0021ba1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ba4:	ff d0                	call   eax
c0021ba6:	83 c4 10             	add    esp,0x10
c0021ba9:	b8 00 00 00 00       	mov    eax,0x0
c0021bae:	c9                   	leave  
c0021baf:	c3                   	ret    

c0021bb0 <IOAPIC::close(int, int, void*)>:
c0021bb0:	b8 00 00 00 00       	mov    eax,0x0
c0021bb5:	c3                   	ret    

c0021bb6 <APIC::io_wait()>:
c0021bb6:	eb 00                	jmp    c0021bb8 <APIC::io_wait()+0x2>
c0021bb8:	eb 00                	jmp    c0021bba <APIC::io_wait()+0x4>
c0021bba:	90                   	nop
c0021bbb:	c3                   	ret    

c0021bbc <APIC::getBase()>:
c0021bbc:	55                   	push   ebp
c0021bbd:	89 e5                	mov    ebp,esp
c0021bbf:	83 ec 18             	sub    esp,0x18
c0021bc2:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0021bc7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021bcd:	83 e0 08             	and    eax,0x8
c0021bd0:	84 c0                	test   al,al
c0021bd2:	75 07                	jne    c0021bdb <APIC::getBase()+0x1f>
c0021bd4:	b8 00 00 00 00       	mov    eax,0x0
c0021bd9:	eb 21                	jmp    c0021bfc <APIC::getBase()+0x40>
c0021bdb:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0021be0:	83 ec 08             	sub    esp,0x8
c0021be3:	6a 1b                	push   0x1b
c0021be5:	50                   	push   eax
c0021be6:	e8 7b 76 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021beb:	83 c4 10             	add    esp,0x10
c0021bee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021bf1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021bf4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021bf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021bfc:	c9                   	leave  
c0021bfd:	c3                   	ret    

c0021bfe <APIC::eoi(unsigned char)>:
c0021bfe:	55                   	push   ebp
c0021bff:	89 e5                	mov    ebp,esp
c0021c01:	83 ec 28             	sub    esp,0x28
c0021c04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c07:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c10:	e8 a7 ff ff ff       	call   c0021bbc <APIC::getBase()>
c0021c15:	83 c4 10             	add    esp,0x10
c0021c18:	05 b0 00 00 00       	add    eax,0xb0
c0021c1d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021c20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021c23:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021c29:	90                   	nop
c0021c2a:	c9                   	leave  
c0021c2b:	c3                   	ret    

c0021c2c <APIC::open(int, int, void*)>:
c0021c2c:	55                   	push   ebp
c0021c2d:	89 e5                	mov    ebp,esp
c0021c2f:	57                   	push   edi
c0021c30:	56                   	push   esi
c0021c31:	53                   	push   ebx
c0021c32:	83 ec 2c             	sub    esp,0x2c
c0021c35:	83 ec 0c             	sub    esp,0xc
c0021c38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c3b:	e8 7c ff ff ff       	call   c0021bbc <APIC::getBase()>
c0021c40:	83 c4 10             	add    esp,0x10
c0021c43:	89 c2                	mov    edx,eax
c0021c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c48:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021c4e:	0f b6 f8             	movzx  edi,al
c0021c51:	89 d0                	mov    eax,edx
c0021c53:	ba 00 00 00 00       	mov    edx,0x0
c0021c58:	89 c1                	mov    ecx,eax
c0021c5a:	80 e5 ff             	and    ch,0xff
c0021c5d:	89 cb                	mov    ebx,ecx
c0021c5f:	0f b6 f2             	movzx  esi,dl
c0021c62:	89 d8                	mov    eax,ebx
c0021c64:	89 f2                	mov    edx,esi
c0021c66:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021c69:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021c6c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021c70:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021c74:	83 e0 00             	and    eax,0x0
c0021c77:	09 d0                	or     eax,edx
c0021c79:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c80:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021c86:	8d 50 01             	lea    edx,[eax+0x1]
c0021c89:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021c8c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021c92:	0f b6 d0             	movzx  edx,al
c0021c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c98:	83 c2 08             	add    edx,0x8
c0021c9b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021c9f:	0f b6 c9             	movzx  ecx,cl
c0021ca2:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021ca8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021cac:	83 ec 0c             	sub    esp,0xc
c0021caf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cb2:	e8 05 ff ff ff       	call   c0021bbc <APIC::getBase()>
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	05 f0 00 00 00       	add    eax,0xf0
c0021cbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021cc2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cc7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021cca:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021cd1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021cd8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021cdb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021cde:	89 10                	mov    DWORD PTR [eax],edx
c0021ce0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021ce7:	a1 d0 92 02 c0       	mov    eax,ds:0xc00292d0
c0021cec:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021cef:	7d 7c                	jge    c0021d6d <APIC::open(int, int, void*)+0x141>
c0021cf1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021cf4:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c0021cfb:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021cfe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021d01:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c0021d08:	c1 e8 08             	shr    eax,0x8
c0021d0b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021d0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021d12:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c0021d19:	c1 e8 18             	shr    eax,0x18
c0021d1c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021d1f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021d23:	75 40                	jne    c0021d65 <APIC::open(int, int, void*)+0x139>
c0021d25:	83 ec 0c             	sub    esp,0xc
c0021d28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d2b:	e8 8c fe ff ff       	call   c0021bbc <APIC::getBase()>
c0021d30:	83 c4 10             	add    esp,0x10
c0021d33:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021d37:	75 07                	jne    c0021d40 <APIC::open(int, int, void*)+0x114>
c0021d39:	ba 60 03 00 00       	mov    edx,0x360
c0021d3e:	eb 05                	jmp    c0021d45 <APIC::open(int, int, void*)+0x119>
c0021d40:	ba 50 03 00 00       	mov    edx,0x350
c0021d45:	01 d0                	add    eax,edx
c0021d47:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021d4a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d4f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021d52:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021d59:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021d5d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021d60:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021d63:	89 10                	mov    DWORD PTR [eax],edx
c0021d65:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021d68:	e9 7a ff ff ff       	jmp    c0021ce7 <APIC::open(int, int, void*)+0xbb>
c0021d6d:	b8 00 00 00 00       	mov    eax,0x0
c0021d72:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021d75:	5b                   	pop    ebx
c0021d76:	5e                   	pop    esi
c0021d77:	5f                   	pop    edi
c0021d78:	5d                   	pop    ebp
c0021d79:	c3                   	ret    

c0021d7a <IOAPIC::IOAPIC()>:
c0021d7a:	83 ec 0c             	sub    esp,0xc
c0021d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d81:	83 ec 08             	sub    esp,0x8
c0021d84:	68 90 7a 02 c0       	push   0xc0027a90
c0021d89:	50                   	push   eax
c0021d8a:	e8 27 ca fe ff       	call   c000e7b6 <Device::Device(char const*)>
c0021d8f:	83 c4 10             	add    esp,0x10
c0021d92:	ba b8 7b 02 c0       	mov    edx,0xc0027bb8
c0021d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9b:	89 10                	mov    DWORD PTR [eax],edx
c0021d9d:	90                   	nop
c0021d9e:	83 c4 0c             	add    esp,0xc
c0021da1:	c3                   	ret    

c0021da2 <APIC::APIC()>:
c0021da2:	53                   	push   ebx
c0021da3:	83 ec 18             	sub    esp,0x18
c0021da6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021daa:	83 ec 08             	sub    esp,0x8
c0021dad:	68 98 7a 02 c0       	push   0xc0027a98
c0021db2:	50                   	push   eax
c0021db3:	e8 2a d1 fe ff       	call   c000eee2 <InterruptController::InterruptController(char const*)>
c0021db8:	83 c4 10             	add    esp,0x10
c0021dbb:	ba 70 7b 02 c0       	mov    edx,0xc0027b70
c0021dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dc4:	89 10                	mov    DWORD PTR [eax],edx
c0021dc6:	a0 00 aa 02 c0       	mov    al,ds:0xc002aa00
c0021dcb:	83 f0 01             	xor    eax,0x1
c0021dce:	84 c0                	test   al,al
c0021dd0:	0f 84 a1 00 00 00    	je     c0021e77 <APIC::APIC()+0xd5>
c0021dd6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021ddb:	a0 80 93 02 c0       	mov    al,ds:0xc0029380
c0021de0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021de4:	0f 83 86 00 00 00    	jae    c0021e70 <APIC::APIC()+0xce>
c0021dea:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021df2:	83 ec 0c             	sub    esp,0xc
c0021df5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021df9:	e8 55 7f fe ff       	call   c0009d53 <malloc>
c0021dfe:	83 c4 10             	add    esp,0x10
c0021e01:	89 c3                	mov    ebx,eax
c0021e03:	83 ec 0c             	sub    esp,0xc
c0021e06:	53                   	push   ebx
c0021e07:	e8 6e ff ff ff       	call   c0021d7a <IOAPIC::IOAPIC()>
c0021e0c:	83 c4 10             	add    esp,0x10
c0021e0f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021e13:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021e18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e1c:	89 14 85 e0 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5620],edx
c0021e23:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c0021e28:	40                   	inc    eax
c0021e29:	a3 c0 a9 02 c0       	mov    ds:0xc002a9c0,eax
c0021e2e:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c0021e33:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021e39:	83 ec 08             	sub    esp,0x8
c0021e3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021e40:	50                   	push   eax
c0021e41:	e8 6c c7 fe ff       	call   c000e5b2 <Device::addChild(Device*)>
c0021e46:	83 c4 10             	add    esp,0x10
c0021e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e4f:	83 c0 08             	add    eax,0x8
c0021e52:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e54:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021e59:	6a 00                	push   0x0
c0021e5b:	6a 00                	push   0x0
c0021e5d:	52                   	push   edx
c0021e5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e62:	ff d0                	call   eax
c0021e64:	83 c4 10             	add    esp,0x10
c0021e67:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021e6b:	e9 6b ff ff ff       	jmp    c0021ddb <APIC::APIC()+0x39>
c0021e70:	c6 05 00 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa00,0x1
c0021e77:	90                   	nop
c0021e78:	83 c4 18             	add    esp,0x18
c0021e7b:	5b                   	pop    ebx
c0021e7c:	c3                   	ret    
c0021e7d:	90                   	nop

c0021e7e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021e7e:	55                   	push   ebp
c0021e7f:	89 e5                	mov    ebp,esp
c0021e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021e8a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021e8d:	72 1d                	jb     c0021eac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e92:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e9b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021ea1:	01 d0                	add    eax,edx
c0021ea3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021ea6:	73 04                	jae    c0021eac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021ea8:	b0 01                	mov    al,0x1
c0021eaa:	eb 02                	jmp    c0021eae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021eac:	b0 00                	mov    al,0x0
c0021eae:	5d                   	pop    ebp
c0021eaf:	c3                   	ret    

c0021eb0 <IOAPIC::read(int)>:
c0021eb0:	55                   	push   ebp
c0021eb1:	89 e5                	mov    ebp,esp
c0021eb3:	83 ec 10             	sub    esp,0x10
c0021eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eb9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021ebf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021ec2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ec5:	0f b6 d0             	movzx  edx,al
c0021ec8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021ecb:	89 10                	mov    DWORD PTR [eax],edx
c0021ecd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021ed0:	83 c0 10             	add    eax,0x10
c0021ed3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ed5:	c9                   	leave  
c0021ed6:	c3                   	ret    
c0021ed7:	90                   	nop

c0021ed8 <IOAPIC::open(int, int, void*)>:
c0021ed8:	55                   	push   ebp
c0021ed9:	89 e5                	mov    ebp,esp
c0021edb:	57                   	push   edi
c0021edc:	56                   	push   esi
c0021edd:	53                   	push   ebx
c0021ede:	83 ec 0c             	sub    esp,0xc
c0021ee1:	83 ec 0c             	sub    esp,0xc
c0021ee4:	68 c3 7a 02 c0       	push   0xc0027ac3
c0021ee9:	e8 51 b1 fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0021eee:	83 c4 10             	add    esp,0x10
c0021ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ef4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ef7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f00:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021f06:	8b 14 85 c0 93 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6c40]
c0021f0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021f1f:	8b 14 85 40 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6bc0]
c0021f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f29:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f32:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f3b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021f41:	0f b6 f8             	movzx  edi,al
c0021f44:	89 d0                	mov    eax,edx
c0021f46:	ba 00 00 00 00       	mov    edx,0x0
c0021f4b:	89 c1                	mov    ecx,eax
c0021f4d:	80 e5 ff             	and    ch,0xff
c0021f50:	89 cb                	mov    ebx,ecx
c0021f52:	0f b6 f2             	movzx  esi,dl
c0021f55:	89 d8                	mov    eax,ebx
c0021f57:	89 f2                	mov    edx,esi
c0021f59:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f5c:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021f5f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021f63:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021f67:	83 e0 00             	and    eax,0x0
c0021f6a:	09 d0                	or     eax,edx
c0021f6c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021f70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f73:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021f79:	8d 50 01             	lea    edx,[eax+0x1]
c0021f7c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021f7f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021f85:	0f b6 d0             	movzx  edx,al
c0021f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f8b:	83 c2 08             	add    edx,0x8
c0021f8e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021f92:	0f b6 c9             	movzx  ecx,cl
c0021f95:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021f9b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021f9f:	83 ec 08             	sub    esp,0x8
c0021fa2:	6a 01                	push   0x1
c0021fa4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fa7:	e8 04 ff ff ff       	call   c0021eb0 <IOAPIC::read(int)>
c0021fac:	83 c4 10             	add    esp,0x10
c0021faf:	c1 f8 10             	sar    eax,0x10
c0021fb2:	0f b6 c0             	movzx  eax,al
c0021fb5:	8d 50 01             	lea    edx,[eax+0x1]
c0021fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fbb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021fc1:	b8 00 00 00 00       	mov    eax,0x0
c0021fc6:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021fc9:	5b                   	pop    ebx
c0021fca:	5e                   	pop    esi
c0021fcb:	5f                   	pop    edi
c0021fcc:	5d                   	pop    ebp
c0021fcd:	c3                   	ret    

c0021fce <IOAPIC::write(int, int)>:
c0021fce:	55                   	push   ebp
c0021fcf:	89 e5                	mov    ebp,esp
c0021fd1:	83 ec 10             	sub    esp,0x10
c0021fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021fd7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021fdd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021fe0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fe3:	0f b6 d0             	movzx  edx,al
c0021fe6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021fe9:	89 10                	mov    DWORD PTR [eax],edx
c0021feb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021fee:	8d 50 10             	lea    edx,[eax+0x10]
c0021ff1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ff4:	89 02                	mov    DWORD PTR [edx],eax
c0021ff6:	90                   	nop
c0021ff7:	c9                   	leave  
c0021ff8:	c3                   	ret    
c0021ff9:	90                   	nop

c0021ffa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021ffa:	55                   	push   ebp
c0021ffb:	89 e5                	mov    ebp,esp
c0021ffd:	53                   	push   ebx
c0021ffe:	83 ec 2c             	sub    esp,0x2c
c0022001:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022004:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022007:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002200a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002200d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022010:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022013:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022016:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022019:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002201c:	88 d8                	mov    al,bl
c002201e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0022021:	88 c8                	mov    al,cl
c0022023:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022026:	88 d0                	mov    al,dl
c0022028:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002202b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002202f:	83 c0 08             	add    eax,0x8
c0022032:	01 c0                	add    eax,eax
c0022034:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022037:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002203b:	83 c0 08             	add    eax,0x8
c002203e:	01 c0                	add    eax,eax
c0022040:	40                   	inc    eax
c0022041:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022044:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022047:	50                   	push   eax
c0022048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002204b:	e8 60 fe ff ff       	call   c0021eb0 <IOAPIC::read(int)>
c0022050:	83 c4 08             	add    esp,0x8
c0022053:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022056:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002205d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0022060:	c1 e0 18             	shl    eax,0x18
c0022063:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022066:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022069:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002206c:	52                   	push   edx
c002206d:	50                   	push   eax
c002206e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022071:	e8 58 ff ff ff       	call   c0021fce <IOAPIC::write(int, int)>
c0022076:	83 c4 0c             	add    esp,0xc
c0022079:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002207c:	50                   	push   eax
c002207d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022080:	e8 2b fe ff ff       	call   c0021eb0 <IOAPIC::read(int)>
c0022085:	83 c4 08             	add    esp,0x8
c0022088:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002208b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022092:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022099:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00220a0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00220a4:	74 09                	je     c00220af <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00220a6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00220ad:	eb 07                	jmp    c00220b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00220af:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00220b6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00220ba:	74 09                	je     c00220c5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00220bc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00220c3:	eb 07                	jmp    c00220cc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00220c5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00220cc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00220d3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00220d7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00220da:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00220dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00220e0:	52                   	push   edx
c00220e1:	50                   	push   eax
c00220e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00220e5:	e8 e4 fe ff ff       	call   c0021fce <IOAPIC::write(int, int)>
c00220ea:	83 c4 0c             	add    esp,0xc
c00220ed:	90                   	nop
c00220ee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00220f1:	c9                   	leave  
c00220f2:	c3                   	ret    
c00220f3:	90                   	nop

c00220f4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00220f4:	55                   	push   ebp
c00220f5:	89 e5                	mov    ebp,esp
c00220f7:	57                   	push   edi
c00220f8:	56                   	push   esi
c00220f9:	53                   	push   ebx
c00220fa:	83 ec 2c             	sub    esp,0x2c
c00220fd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022100:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022103:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022107:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002210b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002210f:	74 5a                	je     c002216b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022111:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0022115:	7f 44                	jg     c002215b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022117:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002211a:	05 60 81 02 c0       	add    eax,0xc0028160
c002211f:	8a 00                	mov    al,BYTE PTR [eax]
c0022121:	0f b6 c0             	movzx  eax,al
c0022124:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022127:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002212a:	66 8b 84 00 60 93 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6ca0]
c0022132:	0f b7 c0             	movzx  eax,ax
c0022135:	83 e0 02             	and    eax,0x2
c0022138:	85 c0                	test   eax,eax
c002213a:	74 04                	je     c0022140 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002213c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0022140:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022143:	66 8b 84 00 60 93 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6ca0]
c002214b:	0f b7 c0             	movzx  eax,ax
c002214e:	83 e0 08             	and    eax,0x8
c0022151:	85 c0                	test   eax,eax
c0022153:	74 16                	je     c002216b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022155:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022159:	eb 10                	jmp    c002216b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002215b:	83 ec 0c             	sub    esp,0xc
c002215e:	68 d4 7a 02 c0       	push   0xc0027ad4
c0022163:	e8 8d 2e ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0022168:	83 c4 10             	add    esp,0x10
c002216b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002216f:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c0022174:	83 ec 08             	sub    esp,0x8
c0022177:	50                   	push   eax
c0022178:	68 0c 7b 02 c0       	push   0xc0027b0c
c002217d:	e8 bd ae fe ff       	call   c000d03f <Dbg::kprintf(char const*, ...)>
c0022182:	83 c4 10             	add    esp,0x10
c0022185:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002218c:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c0022191:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022194:	7d 67                	jge    c00221fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022196:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022199:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c00221a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00221a3:	83 ec 08             	sub    esp,0x8
c00221a6:	52                   	push   edx
c00221a7:	50                   	push   eax
c00221a8:	e8 d1 fc ff ff       	call   c0021e7e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00221ad:	83 c4 10             	add    esp,0x10
c00221b0:	84 c0                	test   al,al
c00221b2:	74 44                	je     c00221f8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00221b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00221b7:	8b 1c 85 e0 a9 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5620]
c00221be:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00221c2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00221c5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00221c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00221cc:	83 c0 20             	add    eax,0x20
c00221cf:	0f b6 f0             	movzx  esi,al
c00221d2:	b8 00 00 00 00       	mov    eax,0x0
c00221d7:	99                   	cdq    
c00221d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00221db:	0f b6 c9             	movzx  ecx,cl
c00221de:	83 ec 04             	sub    esp,0x4
c00221e1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00221e4:	57                   	push   edi
c00221e5:	56                   	push   esi
c00221e6:	52                   	push   edx
c00221e7:	50                   	push   eax
c00221e8:	51                   	push   ecx
c00221e9:	53                   	push   ebx
c00221ea:	e8 0b fe ff ff       	call   c0021ffa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00221ef:	83 c4 20             	add    esp,0x20
c00221f2:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00221f6:	eb 05                	jmp    c00221fd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00221f8:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00221fb:	eb 8f                	jmp    c002218c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00221fd:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0022200:	83 f0 01             	xor    eax,0x1
c0022203:	84 c0                	test   al,al
c0022205:	74 10                	je     c0022217 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022207:	83 ec 0c             	sub    esp,0xc
c002220a:	68 23 7b 02 c0       	push   0xc0027b23
c002220f:	e8 e1 2d ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0022214:	83 c4 10             	add    esp,0x10
c0022217:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002221b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0022222:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022226:	7f 65                	jg     c002228d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002222b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002222e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022235:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022238:	01 ca                	add    edx,ecx
c002223a:	83 c2 54             	add    edx,0x54
c002223d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022241:	85 c0                	test   eax,eax
c0022243:	75 43                	jne    c0022288 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022248:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002224b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022252:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022255:	01 ca                	add    edx,ecx
c0022257:	8d 4a 54             	lea    ecx,[edx+0x54]
c002225a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002225d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022264:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022267:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002226e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022271:	01 ca                	add    edx,ecx
c0022273:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022279:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002227c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0022280:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022283:	83 e8 20             	sub    eax,0x20
c0022286:	eb 1a                	jmp    c00222a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022288:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002228b:	eb 95                	jmp    c0022222 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002228d:	83 ec 0c             	sub    esp,0xc
c0022290:	68 30 7b 02 c0       	push   0xc0027b30
c0022295:	e8 5b 2d ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002229a:	83 c4 10             	add    esp,0x10
c002229d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00222a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00222a5:	5b                   	pop    ebx
c00222a6:	5e                   	pop    esi
c00222a7:	5f                   	pop    edi
c00222a8:	5d                   	pop    ebp
c00222a9:	c3                   	ret    

c00222aa <PIC::disable()>:
c00222aa:	55                   	push   ebp
c00222ab:	89 e5                	mov    ebp,esp
c00222ad:	83 ec 10             	sub    esp,0x10
c00222b0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00222b6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00222ba:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00222bd:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00222c1:	ee                   	out    dx,al
c00222c2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00222c8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00222cc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00222cf:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00222d3:	ee                   	out    dx,al
c00222d4:	90                   	nop
c00222d5:	c9                   	leave  
c00222d6:	c3                   	ret    
c00222d7:	90                   	nop

c00222d8 <PIC::close(int, int, void*)>:
c00222d8:	55                   	push   ebp
c00222d9:	89 e5                	mov    ebp,esp
c00222db:	83 ec 08             	sub    esp,0x8
c00222de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00222e3:	83 c0 3c             	add    eax,0x3c
c00222e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00222e8:	83 ec 0c             	sub    esp,0xc
c00222eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222ee:	ff d0                	call   eax
c00222f0:	83 c4 10             	add    esp,0x10
c00222f3:	b8 00 00 00 00       	mov    eax,0x0
c00222f8:	c9                   	leave  
c00222f9:	c3                   	ret    

c00222fa <PIC::PIC()>:
c00222fa:	83 ec 0c             	sub    esp,0xc
c00222fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022301:	83 ec 08             	sub    esp,0x8
c0022304:	68 dc 7b 02 c0       	push   0xc0027bdc
c0022309:	50                   	push   eax
c002230a:	e8 d3 cb fe ff       	call   c000eee2 <InterruptController::InterruptController(char const*)>
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	ba 08 7c 02 c0       	mov    edx,0xc0027c08
c0022317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231b:	89 10                	mov    DWORD PTR [eax],edx
c002231d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022321:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022327:	0f b6 d0             	movzx  edx,al
c002232a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002232e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022339:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002233f:	0f b6 d0             	movzx  edx,al
c0022342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022346:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002234b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022355:	8d 50 01             	lea    edx,[eax+0x1]
c0022358:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002235c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022362:	0f b6 d0             	movzx  edx,al
c0022365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022369:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002236d:	83 e1 3f             	and    ecx,0x3f
c0022370:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022378:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002237e:	0f b6 d0             	movzx  edx,al
c0022381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022385:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002238c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022390:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022396:	0f b6 d0             	movzx  edx,al
c0022399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00223a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223ac:	8d 50 01             	lea    edx,[eax+0x1]
c00223af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223b3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223b9:	0f b6 d0             	movzx  edx,al
c00223bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223c4:	83 e1 3f             	and    ecx,0x3f
c00223c7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223cb:	90                   	nop
c00223cc:	83 c4 0c             	add    esp,0xc
c00223cf:	c3                   	ret    

c00223d0 <PIC::ioWait()>:
c00223d0:	eb 00                	jmp    c00223d2 <PIC::ioWait()+0x2>
c00223d2:	eb 00                	jmp    c00223d4 <PIC::ioWait()+0x4>
c00223d4:	90                   	nop
c00223d5:	c3                   	ret    

c00223d6 <PIC::getIRQReg(int)>:
c00223d6:	55                   	push   ebp
c00223d7:	89 e5                	mov    ebp,esp
c00223d9:	83 ec 10             	sub    esp,0x10
c00223dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223df:	0f b6 c0             	movzx  eax,al
c00223e2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00223e8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00223eb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00223ee:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00223f2:	ee                   	out    dx,al
c00223f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223f6:	0f b6 c0             	movzx  eax,al
c00223f9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00223ff:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022402:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022405:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022409:	ee                   	out    dx,al
c002240a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022410:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022414:	89 c2                	mov    edx,eax
c0022416:	ec                   	in     al,dx
c0022417:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002241a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002241d:	0f b6 c0             	movzx  eax,al
c0022420:	c1 e0 08             	shl    eax,0x8
c0022423:	89 c1                	mov    ecx,eax
c0022425:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002242b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002242f:	89 c2                	mov    edx,eax
c0022431:	ec                   	in     al,dx
c0022432:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022435:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022438:	0f b6 c0             	movzx  eax,al
c002243b:	09 c8                	or     eax,ecx
c002243d:	c9                   	leave  
c002243e:	c3                   	ret    
c002243f:	90                   	nop

c0022440 <PIC::eoi(unsigned char)>:
c0022440:	55                   	push   ebp
c0022441:	89 e5                	mov    ebp,esp
c0022443:	83 ec 14             	sub    esp,0x14
c0022446:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022449:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002244c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022450:	75 1e                	jne    c0022470 <PIC::eoi(unsigned char)+0x30>
c0022452:	6a 0b                	push   0xb
c0022454:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022457:	e8 7a ff ff ff       	call   c00223d6 <PIC::getIRQReg(int)>
c002245c:	83 c4 08             	add    esp,0x8
c002245f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022463:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022467:	25 80 00 00 00       	and    eax,0x80
c002246c:	85 c0                	test   eax,eax
c002246e:	74 5f                	je     c00224cf <PIC::eoi(unsigned char)+0x8f>
c0022470:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022474:	75 2d                	jne    c00224a3 <PIC::eoi(unsigned char)+0x63>
c0022476:	6a 0b                	push   0xb
c0022478:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002247b:	e8 56 ff ff ff       	call   c00223d6 <PIC::getIRQReg(int)>
c0022480:	83 c4 08             	add    esp,0x8
c0022483:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022487:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002248a:	66 85 c0             	test   ax,ax
c002248d:	78 14                	js     c00224a3 <PIC::eoi(unsigned char)+0x63>
c002248f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022495:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022499:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002249c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00224a0:	ee                   	out    dx,al
c00224a1:	eb 2d                	jmp    c00224d0 <PIC::eoi(unsigned char)+0x90>
c00224a3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00224a7:	76 12                	jbe    c00224bb <PIC::eoi(unsigned char)+0x7b>
c00224a9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00224af:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00224b3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00224b6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00224ba:	ee                   	out    dx,al
c00224bb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00224c1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00224c5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00224c8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00224cc:	ee                   	out    dx,al
c00224cd:	eb 01                	jmp    c00224d0 <PIC::eoi(unsigned char)+0x90>
c00224cf:	90                   	nop
c00224d0:	c9                   	leave  
c00224d1:	c3                   	ret    

c00224d2 <PIC::remap()>:
c00224d2:	55                   	push   ebp
c00224d3:	89 e5                	mov    ebp,esp
c00224d5:	83 ec 48             	sub    esp,0x48
c00224d8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00224df:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00224e6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00224ec:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00224ef:	89 c2                	mov    edx,eax
c00224f1:	ec                   	in     al,dx
c00224f2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00224f5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00224f8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00224fb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022501:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022504:	89 c2                	mov    edx,eax
c0022506:	ec                   	in     al,dx
c0022507:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002250a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002250d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022510:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022516:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002251a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002251d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022520:	ee                   	out    dx,al
c0022521:	83 ec 0c             	sub    esp,0xc
c0022524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022527:	e8 a4 fe ff ff       	call   c00223d0 <PIC::ioWait()>
c002252c:	83 c4 10             	add    esp,0x10
c002252f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022535:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022539:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002253c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002253f:	ee                   	out    dx,al
c0022540:	83 ec 0c             	sub    esp,0xc
c0022543:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022546:	e8 85 fe ff ff       	call   c00223d0 <PIC::ioWait()>
c002254b:	83 c4 10             	add    esp,0x10
c002254e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022551:	0f b6 c0             	movzx  eax,al
c0022554:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002255a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002255d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022560:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022563:	ee                   	out    dx,al
c0022564:	83 ec 0c             	sub    esp,0xc
c0022567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002256a:	e8 61 fe ff ff       	call   c00223d0 <PIC::ioWait()>
c002256f:	83 c4 10             	add    esp,0x10
c0022572:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022575:	0f b6 c0             	movzx  eax,al
c0022578:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002257e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022581:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022584:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022587:	ee                   	out    dx,al
c0022588:	83 ec 0c             	sub    esp,0xc
c002258b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002258e:	e8 3d fe ff ff       	call   c00223d0 <PIC::ioWait()>
c0022593:	83 c4 10             	add    esp,0x10
c0022596:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002259c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00225a0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00225a3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00225a6:	ee                   	out    dx,al
c00225a7:	83 ec 0c             	sub    esp,0xc
c00225aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225ad:	e8 1e fe ff ff       	call   c00223d0 <PIC::ioWait()>
c00225b2:	83 c4 10             	add    esp,0x10
c00225b5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00225bb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00225bf:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00225c2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00225c5:	ee                   	out    dx,al
c00225c6:	83 ec 0c             	sub    esp,0xc
c00225c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225cc:	e8 ff fd ff ff       	call   c00223d0 <PIC::ioWait()>
c00225d1:	83 c4 10             	add    esp,0x10
c00225d4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00225da:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00225de:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00225e1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00225e4:	ee                   	out    dx,al
c00225e5:	83 ec 0c             	sub    esp,0xc
c00225e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00225eb:	e8 e0 fd ff ff       	call   c00223d0 <PIC::ioWait()>
c00225f0:	83 c4 10             	add    esp,0x10
c00225f3:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00225f9:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00225fd:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022600:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022603:	ee                   	out    dx,al
c0022604:	83 ec 0c             	sub    esp,0xc
c0022607:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002260a:	e8 c1 fd ff ff       	call   c00223d0 <PIC::ioWait()>
c002260f:	83 c4 10             	add    esp,0x10
c0022612:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022616:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002261c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002261f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022622:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022625:	ee                   	out    dx,al
c0022626:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002262a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022630:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022633:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022636:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022639:	ee                   	out    dx,al
c002263a:	90                   	nop
c002263b:	c9                   	leave  
c002263c:	c3                   	ret    
c002263d:	90                   	nop

c002263e <PIC::open(int, int, void*)>:
c002263e:	55                   	push   ebp
c002263f:	89 e5                	mov    ebp,esp
c0022641:	83 ec 18             	sub    esp,0x18
c0022644:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002264a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002264e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022651:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022655:	ee                   	out    dx,al
c0022656:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002265c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022660:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022663:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022667:	ee                   	out    dx,al
c0022668:	83 ec 0c             	sub    esp,0xc
c002266b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002266e:	e8 5f fe ff ff       	call   c00224d2 <PIC::remap()>
c0022673:	83 c4 10             	add    esp,0x10
c0022676:	b8 00 00 00 00       	mov    eax,0x0
c002267b:	c9                   	leave  
c002267c:	c3                   	ret    
c002267d:	66 90                	xchg   ax,ax
c002267f:	90                   	nop

c0022680 <APICTimer::close(int, int, void*)>:
c0022680:	b8 00 00 00 00       	mov    eax,0x0
c0022685:	c3                   	ret    
c0022686:	66 90                	xchg   ax,ax

c0022688 <apicTimerHandler(regs*, void*)>:
c0022688:	83 ec 0c             	sub    esp,0xc
c002268b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002268f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022691:	b8 10 27 00 00       	mov    eax,0x2710
c0022696:	ba 00 00 00 00       	mov    edx,0x0
c002269b:	f7 f1                	div    ecx
c002269d:	83 ec 0c             	sub    esp,0xc
c00226a0:	50                   	push   eax
c00226a1:	e8 a3 e7 fe ff       	call   c0010e49 <timerHandler(unsigned int)>
c00226a6:	83 c4 10             	add    esp,0x10
c00226a9:	90                   	nop
c00226aa:	83 c4 0c             	add    esp,0xc
c00226ad:	c3                   	ret    
c00226ae:	66 90                	xchg   ax,ax

c00226b0 <APICTimer::write(int)>:
c00226b0:	83 ec 1c             	sub    esp,0x1c
c00226b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00226bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00226c1:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00226c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00226cc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00226d2:	83 ec 0c             	sub    esp,0xc
c00226d5:	50                   	push   eax
c00226d6:	e8 e1 f4 ff ff       	call   c0021bbc <APIC::getBase()>
c00226db:	83 c4 10             	add    esp,0x10
c00226de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226e2:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c00226e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00226eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226ef:	05 e0 03 00 00       	add    eax,0x3e0
c00226f4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00226fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00226fe:	05 80 03 00 00       	add    eax,0x380
c0022703:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022709:	fb                   	sti    
c002270a:	66 90                	xchg   ax,ax
c002270c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022710:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0022716:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c002271b:	39 c2                	cmp    edx,eax
c002271d:	76 05                	jbe    c0022724 <APICTimer::write(int)+0x74>
c002271f:	eb eb                	jmp    c002270c <APICTimer::write(int)+0x5c>
c0022721:	8d 76 00             	lea    esi,[esi+0x0]
c0022724:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022728:	05 20 03 00 00       	add    eax,0x320
c002272d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022733:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022737:	05 90 03 00 00       	add    eax,0x390
c002273c:	8b 00                	mov    eax,DWORD PTR [eax]
c002273e:	f7 d0                	not    eax
c0022740:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022744:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002274c:	ba 00 00 00 00       	mov    edx,0x0
c0022751:	f7 f1                	div    ecx
c0022753:	89 04 24             	mov    DWORD PTR [esp],eax
c0022756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002275a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022760:	0d 00 00 02 00       	or     eax,0x20000
c0022765:	89 c2                	mov    edx,eax
c0022767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002276b:	05 20 03 00 00       	add    eax,0x320
c0022770:	89 10                	mov    DWORD PTR [eax],edx
c0022772:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022776:	05 e0 03 00 00       	add    eax,0x3e0
c002277b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022785:	05 80 03 00 00       	add    eax,0x380
c002278a:	89 c2                	mov    edx,eax
c002278c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002278f:	89 02                	mov    DWORD PTR [edx],eax
c0022791:	90                   	nop
c0022792:	83 c4 1c             	add    esp,0x1c
c0022795:	c3                   	ret    
c0022796:	66 90                	xchg   ax,ax

c0022798 <APICTimer::open(int, int, void*)>:
c0022798:	57                   	push   edi
c0022799:	56                   	push   esi
c002279a:	53                   	push   ebx
c002279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279f:	8b 00                	mov    eax,DWORD PTR [eax]
c00227a1:	83 c0 24             	add    eax,0x24
c00227a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00227a6:	83 ec 08             	sub    esp,0x8
c00227a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227b1:	ff d0                	call   eax
c00227b3:	83 c4 10             	add    esp,0x10
c00227b6:	a1 68 8a 02 c0       	mov    eax,ds:0xc0028a68
c00227bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00227c1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00227c7:	83 ec 0c             	sub    esp,0xc
c00227ca:	50                   	push   eax
c00227cb:	e8 ec f3 ff ff       	call   c0021bbc <APIC::getBase()>
c00227d0:	83 c4 10             	add    esp,0x10
c00227d3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00227d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00227e3:	0f b6 f8             	movzx  edi,al
c00227e6:	89 d0                	mov    eax,edx
c00227e8:	ba 00 00 00 00       	mov    edx,0x0
c00227ed:	89 c1                	mov    ecx,eax
c00227ef:	80 e5 ff             	and    ch,0xff
c00227f2:	89 cb                	mov    ebx,ecx
c00227f4:	0f b6 f2             	movzx  esi,dl
c00227f7:	89 d8                	mov    eax,ebx
c00227f9:	89 f2                	mov    edx,esi
c00227fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227ff:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022802:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022806:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002280a:	83 e0 00             	and    eax,0x0
c002280d:	09 d0                	or     eax,edx
c002280f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022817:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002281d:	8d 50 01             	lea    edx,[eax+0x1]
c0022820:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022824:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002282a:	0f b6 d0             	movzx  edx,al
c002282d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022831:	83 c2 08             	add    edx,0x8
c0022834:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022838:	0f b6 c9             	movzx  ecx,cl
c002283b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022841:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022849:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002284d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022857:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002285b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022865:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002286b:	83 ec 0c             	sub    esp,0xc
c002286e:	51                   	push   ecx
c002286f:	6a 01                	push   0x1
c0022871:	68 88 26 02 c0       	push   0xc0022688
c0022876:	52                   	push   edx
c0022877:	50                   	push   eax
c0022878:	e8 ad bc fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002287d:	83 c4 20             	add    esp,0x20
c0022880:	89 c2                	mov    edx,eax
c0022882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022886:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002288c:	b8 00 00 00 00       	mov    eax,0x0
c0022891:	5b                   	pop    ebx
c0022892:	5e                   	pop    esi
c0022893:	5f                   	pop    edi
c0022894:	c3                   	ret    
c0022895:	90                   	nop
c0022896:	66 90                	xchg   ax,ax

c0022898 <APICTimer::APICTimer()>:
c0022898:	83 ec 0c             	sub    esp,0xc
c002289b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289f:	83 ec 08             	sub    esp,0x8
c00228a2:	68 48 7c 02 c0       	push   0xc0027c48
c00228a7:	50                   	push   eax
c00228a8:	e8 0b e5 fe ff       	call   c0010db8 <Timer::Timer(char const*)>
c00228ad:	83 c4 10             	add    esp,0x10
c00228b0:	ba 5c 7c 02 c0       	mov    edx,0xc0027c5c
c00228b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b9:	89 10                	mov    DWORD PTR [eax],edx
c00228bb:	90                   	nop
c00228bc:	83 c4 0c             	add    esp,0xc
c00228bf:	c3                   	ret    

c00228c0 <PIT::write(int)>:
c00228c0:	83 ec 10             	sub    esp,0x10
c00228c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00228c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00228cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00228d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228d5:	a3 04 aa 02 c0       	mov    ds:0xc002aa04,eax
c00228da:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00228df:	99                   	cdq    
c00228e0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00228e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228e8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00228ef:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00228f4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00228f8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00228fd:	ee                   	out    dx,al
c00228fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022902:	0f b6 c0             	movzx  eax,al
c0022905:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002290c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022910:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022914:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022919:	ee                   	out    dx,al
c002291a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002291e:	c1 f8 08             	sar    eax,0x8
c0022921:	0f b6 c0             	movzx  eax,al
c0022924:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002292b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002292f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022933:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022938:	ee                   	out    dx,al
c0022939:	90                   	nop
c002293a:	83 c4 10             	add    esp,0x10
c002293d:	c3                   	ret    
c002293e:	66 90                	xchg   ax,ax

c0022940 <pitHandler(regs*, void*)>:
c0022940:	83 ec 0c             	sub    esp,0xc
c0022943:	8b 0d 04 aa 02 c0    	mov    ecx,DWORD PTR ds:0xc002aa04
c0022949:	b8 10 27 00 00       	mov    eax,0x2710
c002294e:	99                   	cdq    
c002294f:	f7 f9                	idiv   ecx
c0022951:	83 ec 0c             	sub    esp,0xc
c0022954:	50                   	push   eax
c0022955:	e8 ef e4 fe ff       	call   c0010e49 <timerHandler(unsigned int)>
c002295a:	83 c4 10             	add    esp,0x10
c002295d:	90                   	nop
c002295e:	83 c4 0c             	add    esp,0xc
c0022961:	c3                   	ret    
c0022962:	66 90                	xchg   ax,ax

c0022964 <PIT::open(int, int, void*)>:
c0022964:	83 ec 0c             	sub    esp,0xc
c0022967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296b:	8b 00                	mov    eax,DWORD PTR [eax]
c002296d:	83 c0 24             	add    eax,0x24
c0022970:	8b 00                	mov    eax,DWORD PTR [eax]
c0022972:	83 ec 08             	sub    esp,0x8
c0022975:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002297d:	ff d0                	call   eax
c002297f:	83 c4 10             	add    esp,0x10
c0022982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022986:	83 ec 0c             	sub    esp,0xc
c0022989:	6a 00                	push   0x0
c002298b:	6a 01                	push   0x1
c002298d:	68 40 29 02 c0       	push   0xc0022940
c0022992:	6a 00                	push   0x0
c0022994:	50                   	push   eax
c0022995:	e8 90 bb fe ff       	call   c000e52a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002299a:	83 c4 20             	add    esp,0x20
c002299d:	89 c2                	mov    edx,eax
c002299f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00229a9:	b8 00 00 00 00       	mov    eax,0x0
c00229ae:	83 c4 0c             	add    esp,0xc
c00229b1:	c3                   	ret    
c00229b2:	66 90                	xchg   ax,ax

c00229b4 <PIT::close(int, int, void*)>:
c00229b4:	83 ec 0c             	sub    esp,0xc
c00229b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00229c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c9:	6a 01                	push   0x1
c00229cb:	68 40 29 02 c0       	push   0xc0022940
c00229d0:	6a 00                	push   0x0
c00229d2:	50                   	push   eax
c00229d3:	e8 9c bb fe ff       	call   c000e574 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00229d8:	83 c4 10             	add    esp,0x10
c00229db:	b8 00 00 00 00       	mov    eax,0x0
c00229e0:	83 c4 0c             	add    esp,0xc
c00229e3:	c3                   	ret    

c00229e4 <PIT::PIT()>:
c00229e4:	83 ec 0c             	sub    esp,0xc
c00229e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229eb:	83 ec 08             	sub    esp,0x8
c00229ee:	68 84 7c 02 c0       	push   0xc0027c84
c00229f3:	50                   	push   eax
c00229f4:	e8 bf e3 fe ff       	call   c0010db8 <Timer::Timer(char const*)>
c00229f9:	83 c4 10             	add    esp,0x10
c00229fc:	ba ac 7c 02 c0       	mov    edx,0xc0027cac
c0022a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a05:	89 10                	mov    DWORD PTR [eax],edx
c0022a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a11:	0f b6 d0             	movzx  edx,al
c0022a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a18:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a29:	0f b6 d0             	movzx  edx,al
c0022a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a30:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022a35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a3f:	8d 50 01             	lea    edx,[eax+0x1]
c0022a42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a46:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a4c:	0f b6 d0             	movzx  edx,al
c0022a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a57:	83 e1 3f             	and    ecx,0x3f
c0022a5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a5e:	90                   	nop
c0022a5f:	83 c4 0c             	add    esp,0xc
c0022a62:	c3                   	ret    
c0022a63:	66 90                	xchg   ax,ax
c0022a65:	66 90                	xchg   ax,ax
c0022a67:	66 90                	xchg   ax,ax
c0022a69:	66 90                	xchg   ax,ax
c0022a6b:	66 90                	xchg   ax,ax
c0022a6d:	66 90                	xchg   ax,ax
c0022a6f:	90                   	nop

c0022a70 <avxDetect>:
c0022a70:	b8 00 00 00 00       	mov    eax,0x0
c0022a75:	c3                   	ret    

c0022a76 <avxSave>:
c0022a76:	c3                   	ret    

c0022a77 <avxLoad>:
c0022a77:	c3                   	ret    

c0022a78 <avxInit>:
c0022a78:	c3                   	ret    

c0022a79 <avxClose>:
c0022a79:	c3                   	ret    

c0022a7a <wouldSheSayYes>:
c0022a7a:	c3                   	ret    
c0022a7b:	49                   	dec    ecx
c0022a7c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022a80:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022a84:	75 20                	jne    c0022aa6 <sseDetect.noSSE+0x1>
c0022a86:	4e                   	dec    esi
c0022a87:	79 61                	jns    c0022aea <x87Detect+0x14>
c0022a89:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022a8e:	66 90                	xchg   ax,ax

c0022a90 <absolutelyNoChanceInHell>:
c0022a90:	b8 01 00 00 00       	mov    eax,0x1
c0022a95:	0f a2                	cpuid  
c0022a97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022a9d:	74 06                	je     c0022aa5 <sseDetect.noSSE>
c0022a9f:	b8 01 00 00 00       	mov    eax,0x1
c0022aa4:	c3                   	ret    

c0022aa5 <sseDetect.noSSE>:
c0022aa5:	31 c0                	xor    eax,eax
c0022aa7:	c3                   	ret    

c0022aa8 <sseSave>:
c0022aa8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0022aad:	c3                   	ret    

c0022aae <sseLoad>:
c0022aae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022ab3:	c3                   	ret    

c0022ab4 <sseInit>:
c0022ab4:	e8 48 00 00 00       	call   c0022b01 <x87Init>
c0022ab9:	0f 20 e0             	mov    eax,cr4
c0022abc:	66 0d 00 06          	or     ax,0x600
c0022ac0:	0f 22 e0             	mov    cr4,eax
c0022ac3:	c3                   	ret    

c0022ac4 <sseClose>:
c0022ac4:	c3                   	ret    
c0022ac5:	66 90                	xchg   ax,ax
c0022ac7:	66 90                	xchg   ax,ax
c0022ac9:	66 90                	xchg   ax,ax
c0022acb:	66 90                	xchg   ax,ax
c0022acd:	66 90                	xchg   ax,ax
c0022acf:	90                   	nop

c0022ad0 <value_37F>:
c0022ad0:	7f 03                	jg     c0022ad5 <value_37A+0x1>

c0022ad2 <value_37E>:
c0022ad2:	7e 03                	jle    c0022ad7 <x87Detect+0x1>

c0022ad4 <value_37A>:
c0022ad4:	7a 03                	jp     c0022ad9 <x87Detect+0x3>

c0022ad6 <x87Detect>:
c0022ad6:	b8 01 00 00 00       	mov    eax,0x1
c0022adb:	0f a2                	cpuid  
c0022add:	f7 c2 01 00 00 00    	test   edx,0x1
c0022ae3:	74 06                	je     c0022aeb <x87Detect.nox87>
c0022ae5:	b8 01 00 00 00       	mov    eax,0x1
c0022aea:	c3                   	ret    

c0022aeb <x87Detect.nox87>:
c0022aeb:	b8 00 00 00 00       	mov    eax,0x0
c0022af0:	c3                   	ret    

c0022af1 <x87Save>:
c0022af1:	55                   	push   ebp
c0022af2:	89 e5                	mov    ebp,esp
c0022af4:	dd 75 08             	fnsave [ebp+0x8]
c0022af7:	c9                   	leave  
c0022af8:	c3                   	ret    

c0022af9 <x87Load>:
c0022af9:	55                   	push   ebp
c0022afa:	89 e5                	mov    ebp,esp
c0022afc:	dd 65 08             	frstor [ebp+0x8]
c0022aff:	c9                   	leave  
c0022b00:	c3                   	ret    

c0022b01 <x87Init>:
c0022b01:	db e3                	fninit 
c0022b03:	0f 20 c0             	mov    eax,cr0
c0022b06:	66 25 fb ff          	and    ax,0xfffb
c0022b0a:	66 0d 22 00          	or     ax,0x22
c0022b0e:	0f 22 c0             	mov    cr0,eax
c0022b11:	0f 06                	clts   
c0022b13:	c3                   	ret    

c0022b14 <x87Close>:
c0022b14:	c3                   	ret    
c0022b15:	66 90                	xchg   ax,ax
c0022b17:	90                   	nop

c0022b18 <__do_global_ctors_aux>:
c0022b18:	a1 b4 3c 02 c0       	mov    eax,ds:0xc0023cb4
c0022b1d:	83 f8 ff             	cmp    eax,0xffffffff
c0022b20:	74 1a                	je     c0022b3c <__do_global_ctors_aux+0x24>
c0022b22:	55                   	push   ebp
c0022b23:	89 e5                	mov    ebp,esp
c0022b25:	53                   	push   ebx
c0022b26:	52                   	push   edx
c0022b27:	bb b4 3c 02 c0       	mov    ebx,0xc0023cb4
c0022b2c:	ff d0                	call   eax
c0022b2e:	83 eb 04             	sub    ebx,0x4
c0022b31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022b33:	83 f8 ff             	cmp    eax,0xffffffff
c0022b36:	75 f4                	jne    c0022b2c <__do_global_ctors_aux+0x14>
c0022b38:	58                   	pop    eax
c0022b39:	5b                   	pop    ebx
c0022b3a:	5d                   	pop    ebp
c0022b3b:	c3                   	ret    
c0022b3c:	c3                   	ret    
c0022b3d:	66 90                	xchg   ax,ax
c0022b3f:	90                   	nop

c0022b40 <__divdi3>:
c0022b40:	55                   	push   ebp
c0022b41:	57                   	push   edi
c0022b42:	56                   	push   esi
c0022b43:	53                   	push   ebx
c0022b44:	83 ec 1c             	sub    esp,0x1c
c0022b47:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022b4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022b4f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022b52:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022b56:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022b5a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b5e:	85 db                	test   ebx,ebx
c0022b60:	0f 88 8e 00 00 00    	js     c0022bf4 <__divdi3+0xb4>
c0022b66:	89 dd                	mov    ebp,ebx
c0022b68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b70:	89 d3                	mov    ebx,edx
c0022b72:	85 d2                	test   edx,edx
c0022b74:	79 0d                	jns    c0022b83 <__divdi3+0x43>
c0022b76:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022b7a:	f7 d8                	neg    eax
c0022b7c:	83 d2 00             	adc    edx,0x0
c0022b7f:	f7 da                	neg    edx
c0022b81:	89 d3                	mov    ebx,edx
c0022b83:	89 c7                	mov    edi,eax
c0022b85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022b88:	85 db                	test   ebx,ebx
c0022b8a:	75 48                	jne    c0022bd4 <__divdi3+0x94>
c0022b8c:	39 ef                	cmp    edi,ebp
c0022b8e:	76 24                	jbe    c0022bb4 <__divdi3+0x74>
c0022b90:	89 ea                	mov    edx,ebp
c0022b92:	f7 f7                	div    edi
c0022b94:	89 c1                	mov    ecx,eax
c0022b96:	31 f6                	xor    esi,esi
c0022b98:	89 c8                	mov    eax,ecx
c0022b9a:	89 f2                	mov    edx,esi
c0022b9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ba0:	85 c9                	test   ecx,ecx
c0022ba2:	74 07                	je     c0022bab <__divdi3+0x6b>
c0022ba4:	f7 d8                	neg    eax
c0022ba6:	83 d2 00             	adc    edx,0x0
c0022ba9:	f7 da                	neg    edx
c0022bab:	83 c4 1c             	add    esp,0x1c
c0022bae:	5b                   	pop    ebx
c0022baf:	5e                   	pop    esi
c0022bb0:	5f                   	pop    edi
c0022bb1:	5d                   	pop    ebp
c0022bb2:	c3                   	ret    
c0022bb3:	90                   	nop
c0022bb4:	85 ff                	test   edi,edi
c0022bb6:	75 0b                	jne    c0022bc3 <__divdi3+0x83>
c0022bb8:	b8 01 00 00 00       	mov    eax,0x1
c0022bbd:	31 d2                	xor    edx,edx
c0022bbf:	f7 f3                	div    ebx
c0022bc1:	89 c7                	mov    edi,eax
c0022bc3:	31 d2                	xor    edx,edx
c0022bc5:	89 e8                	mov    eax,ebp
c0022bc7:	f7 f7                	div    edi
c0022bc9:	89 c6                	mov    esi,eax
c0022bcb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022bce:	f7 f7                	div    edi
c0022bd0:	89 c1                	mov    ecx,eax
c0022bd2:	eb c4                	jmp    c0022b98 <__divdi3+0x58>
c0022bd4:	39 eb                	cmp    ebx,ebp
c0022bd6:	77 3c                	ja     c0022c14 <__divdi3+0xd4>
c0022bd8:	0f bd f3             	bsr    esi,ebx
c0022bdb:	83 f6 1f             	xor    esi,0x1f
c0022bde:	75 40                	jne    c0022c20 <__divdi3+0xe0>
c0022be0:	39 eb                	cmp    ebx,ebp
c0022be2:	72 09                	jb     c0022bed <__divdi3+0xad>
c0022be4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022be7:	0f 87 97 00 00 00    	ja     c0022c84 <__divdi3+0x144>
c0022bed:	b9 01 00 00 00       	mov    ecx,0x1
c0022bf2:	eb a4                	jmp    c0022b98 <__divdi3+0x58>
c0022bf4:	f7 d9                	neg    ecx
c0022bf6:	83 d3 00             	adc    ebx,0x0
c0022bf9:	f7 db                	neg    ebx
c0022bfb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022bfe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022c02:	89 dd                	mov    ebp,ebx
c0022c04:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022c0c:	e9 5f ff ff ff       	jmp    c0022b70 <__divdi3+0x30>
c0022c11:	8d 76 00             	lea    esi,[esi+0x0]
c0022c14:	31 f6                	xor    esi,esi
c0022c16:	31 c9                	xor    ecx,ecx
c0022c18:	e9 7b ff ff ff       	jmp    c0022b98 <__divdi3+0x58>
c0022c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0022c20:	b8 20 00 00 00       	mov    eax,0x20
c0022c25:	29 f0                	sub    eax,esi
c0022c27:	89 f1                	mov    ecx,esi
c0022c29:	d3 e3                	shl    ebx,cl
c0022c2b:	89 fa                	mov    edx,edi
c0022c2d:	88 c1                	mov    cl,al
c0022c2f:	d3 ea                	shr    edx,cl
c0022c31:	09 da                	or     edx,ebx
c0022c33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c37:	89 f1                	mov    ecx,esi
c0022c39:	d3 e7                	shl    edi,cl
c0022c3b:	89 eb                	mov    ebx,ebp
c0022c3d:	88 c1                	mov    cl,al
c0022c3f:	d3 eb                	shr    ebx,cl
c0022c41:	89 f1                	mov    ecx,esi
c0022c43:	d3 e5                	shl    ebp,cl
c0022c45:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022c48:	88 c1                	mov    cl,al
c0022c4a:	d3 ea                	shr    edx,cl
c0022c4c:	09 d5                	or     ebp,edx
c0022c4e:	89 e8                	mov    eax,ebp
c0022c50:	89 da                	mov    edx,ebx
c0022c52:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022c56:	89 d3                	mov    ebx,edx
c0022c58:	89 c5                	mov    ebp,eax
c0022c5a:	f7 e7                	mul    edi
c0022c5c:	39 d3                	cmp    ebx,edx
c0022c5e:	72 18                	jb     c0022c78 <__divdi3+0x138>
c0022c60:	74 0a                	je     c0022c6c <__divdi3+0x12c>
c0022c62:	89 e9                	mov    ecx,ebp
c0022c64:	31 f6                	xor    esi,esi
c0022c66:	e9 2d ff ff ff       	jmp    c0022b98 <__divdi3+0x58>
c0022c6b:	90                   	nop
c0022c6c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022c6f:	89 f1                	mov    ecx,esi
c0022c71:	d3 e7                	shl    edi,cl
c0022c73:	39 c7                	cmp    edi,eax
c0022c75:	73 eb                	jae    c0022c62 <__divdi3+0x122>
c0022c77:	90                   	nop
c0022c78:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022c7b:	31 f6                	xor    esi,esi
c0022c7d:	e9 16 ff ff ff       	jmp    c0022b98 <__divdi3+0x58>
c0022c82:	66 90                	xchg   ax,ax
c0022c84:	31 c9                	xor    ecx,ecx
c0022c86:	e9 0d ff ff ff       	jmp    c0022b98 <__divdi3+0x58>
c0022c8b:	90                   	nop

c0022c8c <__moddi3>:
c0022c8c:	55                   	push   ebp
c0022c8d:	57                   	push   edi
c0022c8e:	56                   	push   esi
c0022c8f:	53                   	push   ebx
c0022c90:	83 ec 2c             	sub    esp,0x2c
c0022c93:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022c97:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022c9b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022c9f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022ca3:	85 db                	test   ebx,ebx
c0022ca5:	0f 88 85 00 00 00    	js     c0022d30 <__moddi3+0xa4>
c0022cab:	89 de                	mov    esi,ebx
c0022cad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022cb5:	89 d7                	mov    edi,edx
c0022cb7:	85 d2                	test   edx,edx
c0022cb9:	79 09                	jns    c0022cc4 <__moddi3+0x38>
c0022cbb:	f7 d8                	neg    eax
c0022cbd:	83 d2 00             	adc    edx,0x0
c0022cc0:	f7 da                	neg    edx
c0022cc2:	89 d7                	mov    edi,edx
c0022cc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cc8:	89 cd                	mov    ebp,ecx
c0022cca:	85 ff                	test   edi,edi
c0022ccc:	75 52                	jne    c0022d20 <__moddi3+0x94>
c0022cce:	89 c3                	mov    ebx,eax
c0022cd0:	39 f0                	cmp    eax,esi
c0022cd2:	76 24                	jbe    c0022cf8 <__moddi3+0x6c>
c0022cd4:	89 c8                	mov    eax,ecx
c0022cd6:	89 f2                	mov    edx,esi
c0022cd8:	f7 f3                	div    ebx
c0022cda:	89 d6                	mov    esi,edx
c0022cdc:	89 f0                	mov    eax,esi
c0022cde:	31 d2                	xor    edx,edx
c0022ce0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022ce4:	85 c9                	test   ecx,ecx
c0022ce6:	74 07                	je     c0022cef <__moddi3+0x63>
c0022ce8:	f7 d8                	neg    eax
c0022cea:	83 d2 00             	adc    edx,0x0
c0022ced:	f7 da                	neg    edx
c0022cef:	83 c4 2c             	add    esp,0x2c
c0022cf2:	5b                   	pop    ebx
c0022cf3:	5e                   	pop    esi
c0022cf4:	5f                   	pop    edi
c0022cf5:	5d                   	pop    ebp
c0022cf6:	c3                   	ret    
c0022cf7:	90                   	nop
c0022cf8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022cfc:	85 db                	test   ebx,ebx
c0022cfe:	75 0d                	jne    c0022d0d <__moddi3+0x81>
c0022d00:	b8 01 00 00 00       	mov    eax,0x1
c0022d05:	31 d2                	xor    edx,edx
c0022d07:	f7 f7                	div    edi
c0022d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d0d:	89 f0                	mov    eax,esi
c0022d0f:	31 d2                	xor    edx,edx
c0022d11:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d15:	f7 f7                	div    edi
c0022d17:	89 e8                	mov    eax,ebp
c0022d19:	f7 f7                	div    edi
c0022d1b:	89 d6                	mov    esi,edx
c0022d1d:	eb bd                	jmp    c0022cdc <__moddi3+0x50>
c0022d1f:	90                   	nop
c0022d20:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022d24:	39 f7                	cmp    edi,esi
c0022d26:	76 20                	jbe    c0022d48 <__moddi3+0xbc>
c0022d28:	89 c8                	mov    eax,ecx
c0022d2a:	89 f2                	mov    edx,esi
c0022d2c:	eb b2                	jmp    c0022ce0 <__moddi3+0x54>
c0022d2e:	66 90                	xchg   ax,ax
c0022d30:	f7 d9                	neg    ecx
c0022d32:	83 d3 00             	adc    ebx,0x0
c0022d35:	f7 db                	neg    ebx
c0022d37:	89 de                	mov    esi,ebx
c0022d39:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022d41:	e9 6f ff ff ff       	jmp    c0022cb5 <__moddi3+0x29>
c0022d46:	66 90                	xchg   ax,ax
c0022d48:	0f bd c7             	bsr    eax,edi
c0022d4b:	83 f0 1f             	xor    eax,0x1f
c0022d4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d52:	75 24                	jne    c0022d78 <__moddi3+0xec>
c0022d54:	39 f7                	cmp    edi,esi
c0022d56:	72 06                	jb     c0022d5e <__moddi3+0xd2>
c0022d58:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022d5c:	77 0c                	ja     c0022d6a <__moddi3+0xde>
c0022d5e:	89 e9                	mov    ecx,ebp
c0022d60:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022d64:	19 fe                	sbb    esi,edi
c0022d66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022d6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d6e:	89 f2                	mov    edx,esi
c0022d70:	e9 6b ff ff ff       	jmp    c0022ce0 <__moddi3+0x54>
c0022d75:	8d 76 00             	lea    esi,[esi+0x0]
c0022d78:	b8 20 00 00 00       	mov    eax,0x20
c0022d7d:	89 c2                	mov    edx,eax
c0022d7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022d83:	29 da                	sub    edx,ebx
c0022d85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022d89:	88 d9                	mov    cl,bl
c0022d8b:	d3 e7                	shl    edi,cl
c0022d8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d91:	88 d1                	mov    cl,dl
c0022d93:	d3 e8                	shr    eax,cl
c0022d95:	09 c7                	or     edi,eax
c0022d97:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022d9b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d9f:	89 d8                	mov    eax,ebx
c0022da1:	88 d9                	mov    cl,bl
c0022da3:	d3 e7                	shl    edi,cl
c0022da5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022da9:	89 f3                	mov    ebx,esi
c0022dab:	88 d1                	mov    cl,dl
c0022dad:	d3 eb                	shr    ebx,cl
c0022daf:	89 c7                	mov    edi,eax
c0022db1:	88 c1                	mov    cl,al
c0022db3:	d3 e6                	shl    esi,cl
c0022db5:	89 e8                	mov    eax,ebp
c0022db7:	88 d1                	mov    cl,dl
c0022db9:	d3 e8                	shr    eax,cl
c0022dbb:	09 f0                	or     eax,esi
c0022dbd:	89 f9                	mov    ecx,edi
c0022dbf:	d3 e5                	shl    ebp,cl
c0022dc1:	89 da                	mov    edx,ebx
c0022dc3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022dc7:	89 d3                	mov    ebx,edx
c0022dc9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022dcd:	89 c6                	mov    esi,eax
c0022dcf:	89 d1                	mov    ecx,edx
c0022dd1:	39 d3                	cmp    ebx,edx
c0022dd3:	72 27                	jb     c0022dfc <__moddi3+0x170>
c0022dd5:	74 21                	je     c0022df8 <__moddi3+0x16c>
c0022dd7:	29 f5                	sub    ebp,esi
c0022dd9:	19 cb                	sbb    ebx,ecx
c0022ddb:	89 de                	mov    esi,ebx
c0022ddd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022de1:	d3 e6                	shl    esi,cl
c0022de3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022de7:	89 f9                	mov    ecx,edi
c0022de9:	d3 ed                	shr    ebp,cl
c0022deb:	09 ee                	or     esi,ebp
c0022ded:	89 f0                	mov    eax,esi
c0022def:	d3 eb                	shr    ebx,cl
c0022df1:	89 da                	mov    edx,ebx
c0022df3:	e9 e8 fe ff ff       	jmp    c0022ce0 <__moddi3+0x54>
c0022df8:	39 c5                	cmp    ebp,eax
c0022dfa:	73 db                	jae    c0022dd7 <__moddi3+0x14b>
c0022dfc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022e00:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022e04:	89 d1                	mov    ecx,edx
c0022e06:	89 c6                	mov    esi,eax
c0022e08:	eb cd                	jmp    c0022dd7 <__moddi3+0x14b>
c0022e0a:	66 90                	xchg   ax,ax

c0022e0c <__udivdi3>:
c0022e0c:	55                   	push   ebp
c0022e0d:	57                   	push   edi
c0022e0e:	56                   	push   esi
c0022e0f:	53                   	push   ebx
c0022e10:	83 ec 1c             	sub    esp,0x1c
c0022e13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022e17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022e1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022e1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022e23:	85 d2                	test   edx,edx
c0022e25:	75 41                	jne    c0022e68 <__udivdi3+0x5c>
c0022e27:	39 f7                	cmp    edi,esi
c0022e29:	76 15                	jbe    c0022e40 <__udivdi3+0x34>
c0022e2b:	89 e8                	mov    eax,ebp
c0022e2d:	89 f2                	mov    edx,esi
c0022e2f:	f7 f7                	div    edi
c0022e31:	31 db                	xor    ebx,ebx
c0022e33:	89 da                	mov    edx,ebx
c0022e35:	83 c4 1c             	add    esp,0x1c
c0022e38:	5b                   	pop    ebx
c0022e39:	5e                   	pop    esi
c0022e3a:	5f                   	pop    edi
c0022e3b:	5d                   	pop    ebp
c0022e3c:	c3                   	ret    
c0022e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0022e40:	89 f9                	mov    ecx,edi
c0022e42:	85 ff                	test   edi,edi
c0022e44:	75 0b                	jne    c0022e51 <__udivdi3+0x45>
c0022e46:	b8 01 00 00 00       	mov    eax,0x1
c0022e4b:	31 d2                	xor    edx,edx
c0022e4d:	f7 f7                	div    edi
c0022e4f:	89 c1                	mov    ecx,eax
c0022e51:	31 d2                	xor    edx,edx
c0022e53:	89 f0                	mov    eax,esi
c0022e55:	f7 f1                	div    ecx
c0022e57:	89 c3                	mov    ebx,eax
c0022e59:	89 e8                	mov    eax,ebp
c0022e5b:	f7 f1                	div    ecx
c0022e5d:	89 da                	mov    edx,ebx
c0022e5f:	83 c4 1c             	add    esp,0x1c
c0022e62:	5b                   	pop    ebx
c0022e63:	5e                   	pop    esi
c0022e64:	5f                   	pop    edi
c0022e65:	5d                   	pop    ebp
c0022e66:	c3                   	ret    
c0022e67:	90                   	nop
c0022e68:	39 f2                	cmp    edx,esi
c0022e6a:	77 1c                	ja     c0022e88 <__udivdi3+0x7c>
c0022e6c:	0f bd da             	bsr    ebx,edx
c0022e6f:	83 f3 1f             	xor    ebx,0x1f
c0022e72:	75 24                	jne    c0022e98 <__udivdi3+0x8c>
c0022e74:	39 f2                	cmp    edx,esi
c0022e76:	72 08                	jb     c0022e80 <__udivdi3+0x74>
c0022e78:	39 ef                	cmp    edi,ebp
c0022e7a:	0f 87 84 00 00 00    	ja     c0022f04 <__udivdi3+0xf8>
c0022e80:	b8 01 00 00 00       	mov    eax,0x1
c0022e85:	eb ac                	jmp    c0022e33 <__udivdi3+0x27>
c0022e87:	90                   	nop
c0022e88:	31 db                	xor    ebx,ebx
c0022e8a:	31 c0                	xor    eax,eax
c0022e8c:	89 da                	mov    edx,ebx
c0022e8e:	83 c4 1c             	add    esp,0x1c
c0022e91:	5b                   	pop    ebx
c0022e92:	5e                   	pop    esi
c0022e93:	5f                   	pop    edi
c0022e94:	5d                   	pop    ebp
c0022e95:	c3                   	ret    
c0022e96:	66 90                	xchg   ax,ax
c0022e98:	b8 20 00 00 00       	mov    eax,0x20
c0022e9d:	29 d8                	sub    eax,ebx
c0022e9f:	88 d9                	mov    cl,bl
c0022ea1:	d3 e2                	shl    edx,cl
c0022ea3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022ea7:	89 fa                	mov    edx,edi
c0022ea9:	88 c1                	mov    cl,al
c0022eab:	d3 ea                	shr    edx,cl
c0022ead:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022eb1:	09 d1                	or     ecx,edx
c0022eb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022eb7:	88 d9                	mov    cl,bl
c0022eb9:	d3 e7                	shl    edi,cl
c0022ebb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022ebf:	89 f7                	mov    edi,esi
c0022ec1:	88 c1                	mov    cl,al
c0022ec3:	d3 ef                	shr    edi,cl
c0022ec5:	88 d9                	mov    cl,bl
c0022ec7:	d3 e6                	shl    esi,cl
c0022ec9:	89 ea                	mov    edx,ebp
c0022ecb:	88 c1                	mov    cl,al
c0022ecd:	d3 ea                	shr    edx,cl
c0022ecf:	09 d6                	or     esi,edx
c0022ed1:	89 f0                	mov    eax,esi
c0022ed3:	89 fa                	mov    edx,edi
c0022ed5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022ed9:	89 d7                	mov    edi,edx
c0022edb:	89 c6                	mov    esi,eax
c0022edd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022ee1:	39 d7                	cmp    edi,edx
c0022ee3:	72 13                	jb     c0022ef8 <__udivdi3+0xec>
c0022ee5:	74 09                	je     c0022ef0 <__udivdi3+0xe4>
c0022ee7:	89 f0                	mov    eax,esi
c0022ee9:	31 db                	xor    ebx,ebx
c0022eeb:	e9 43 ff ff ff       	jmp    c0022e33 <__udivdi3+0x27>
c0022ef0:	88 d9                	mov    cl,bl
c0022ef2:	d3 e5                	shl    ebp,cl
c0022ef4:	39 c5                	cmp    ebp,eax
c0022ef6:	73 ef                	jae    c0022ee7 <__udivdi3+0xdb>
c0022ef8:	8d 46 ff             	lea    eax,[esi-0x1]
c0022efb:	31 db                	xor    ebx,ebx
c0022efd:	e9 31 ff ff ff       	jmp    c0022e33 <__udivdi3+0x27>
c0022f02:	66 90                	xchg   ax,ax
c0022f04:	31 c0                	xor    eax,eax
c0022f06:	e9 28 ff ff ff       	jmp    c0022e33 <__udivdi3+0x27>
c0022f0b:	90                   	nop

c0022f0c <__umoddi3>:
c0022f0c:	55                   	push   ebp
c0022f0d:	57                   	push   edi
c0022f0e:	56                   	push   esi
c0022f0f:	53                   	push   ebx
c0022f10:	83 ec 1c             	sub    esp,0x1c
c0022f13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f17:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022f1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f23:	89 da                	mov    edx,ebx
c0022f25:	85 c0                	test   eax,eax
c0022f27:	75 37                	jne    c0022f60 <__umoddi3+0x54>
c0022f29:	39 df                	cmp    edi,ebx
c0022f2b:	76 13                	jbe    c0022f40 <__umoddi3+0x34>
c0022f2d:	89 f0                	mov    eax,esi
c0022f2f:	f7 f7                	div    edi
c0022f31:	89 d0                	mov    eax,edx
c0022f33:	31 d2                	xor    edx,edx
c0022f35:	83 c4 1c             	add    esp,0x1c
c0022f38:	5b                   	pop    ebx
c0022f39:	5e                   	pop    esi
c0022f3a:	5f                   	pop    edi
c0022f3b:	5d                   	pop    ebp
c0022f3c:	c3                   	ret    
c0022f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0022f40:	89 fd                	mov    ebp,edi
c0022f42:	85 ff                	test   edi,edi
c0022f44:	75 0b                	jne    c0022f51 <__umoddi3+0x45>
c0022f46:	b8 01 00 00 00       	mov    eax,0x1
c0022f4b:	31 d2                	xor    edx,edx
c0022f4d:	f7 f7                	div    edi
c0022f4f:	89 c5                	mov    ebp,eax
c0022f51:	89 d8                	mov    eax,ebx
c0022f53:	31 d2                	xor    edx,edx
c0022f55:	f7 f5                	div    ebp
c0022f57:	89 f0                	mov    eax,esi
c0022f59:	f7 f5                	div    ebp
c0022f5b:	89 d0                	mov    eax,edx
c0022f5d:	eb d4                	jmp    c0022f33 <__umoddi3+0x27>
c0022f5f:	90                   	nop
c0022f60:	89 f1                	mov    ecx,esi
c0022f62:	39 d8                	cmp    eax,ebx
c0022f64:	76 0a                	jbe    c0022f70 <__umoddi3+0x64>
c0022f66:	89 f0                	mov    eax,esi
c0022f68:	83 c4 1c             	add    esp,0x1c
c0022f6b:	5b                   	pop    ebx
c0022f6c:	5e                   	pop    esi
c0022f6d:	5f                   	pop    edi
c0022f6e:	5d                   	pop    ebp
c0022f6f:	c3                   	ret    
c0022f70:	0f bd e8             	bsr    ebp,eax
c0022f73:	83 f5 1f             	xor    ebp,0x1f
c0022f76:	75 1c                	jne    c0022f94 <__umoddi3+0x88>
c0022f78:	39 d8                	cmp    eax,ebx
c0022f7a:	72 04                	jb     c0022f80 <__umoddi3+0x74>
c0022f7c:	39 f7                	cmp    edi,esi
c0022f7e:	77 08                	ja     c0022f88 <__umoddi3+0x7c>
c0022f80:	89 da                	mov    edx,ebx
c0022f82:	29 fe                	sub    esi,edi
c0022f84:	19 c2                	sbb    edx,eax
c0022f86:	89 f1                	mov    ecx,esi
c0022f88:	89 c8                	mov    eax,ecx
c0022f8a:	83 c4 1c             	add    esp,0x1c
c0022f8d:	5b                   	pop    ebx
c0022f8e:	5e                   	pop    esi
c0022f8f:	5f                   	pop    edi
c0022f90:	5d                   	pop    ebp
c0022f91:	c3                   	ret    
c0022f92:	66 90                	xchg   ax,ax
c0022f94:	ba 20 00 00 00       	mov    edx,0x20
c0022f99:	29 ea                	sub    edx,ebp
c0022f9b:	89 e9                	mov    ecx,ebp
c0022f9d:	d3 e0                	shl    eax,cl
c0022f9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fa3:	89 f8                	mov    eax,edi
c0022fa5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022fa9:	88 d1                	mov    cl,dl
c0022fab:	d3 e8                	shr    eax,cl
c0022fad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022fb1:	09 c1                	or     ecx,eax
c0022fb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022fb7:	89 e9                	mov    ecx,ebp
c0022fb9:	d3 e7                	shl    edi,cl
c0022fbb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022fbf:	89 d8                	mov    eax,ebx
c0022fc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fc5:	88 d1                	mov    cl,dl
c0022fc7:	d3 e8                	shr    eax,cl
c0022fc9:	89 c7                	mov    edi,eax
c0022fcb:	89 e9                	mov    ecx,ebp
c0022fcd:	d3 e3                	shl    ebx,cl
c0022fcf:	89 f0                	mov    eax,esi
c0022fd1:	88 d1                	mov    cl,dl
c0022fd3:	d3 e8                	shr    eax,cl
c0022fd5:	09 d8                	or     eax,ebx
c0022fd7:	89 e9                	mov    ecx,ebp
c0022fd9:	d3 e6                	shl    esi,cl
c0022fdb:	89 f3                	mov    ebx,esi
c0022fdd:	89 fa                	mov    edx,edi
c0022fdf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022fe3:	89 d1                	mov    ecx,edx
c0022fe5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022fe9:	89 c6                	mov    esi,eax
c0022feb:	89 d7                	mov    edi,edx
c0022fed:	39 d1                	cmp    ecx,edx
c0022fef:	72 27                	jb     c0023018 <__umoddi3+0x10c>
c0022ff1:	74 21                	je     c0023014 <__umoddi3+0x108>
c0022ff3:	89 ca                	mov    edx,ecx
c0022ff5:	29 f3                	sub    ebx,esi
c0022ff7:	19 fa                	sbb    edx,edi
c0022ff9:	89 d0                	mov    eax,edx
c0022ffb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022fff:	d3 e0                	shl    eax,cl
c0023001:	89 e9                	mov    ecx,ebp
c0023003:	d3 eb                	shr    ebx,cl
c0023005:	09 d8                	or     eax,ebx
c0023007:	d3 ea                	shr    edx,cl
c0023009:	83 c4 1c             	add    esp,0x1c
c002300c:	5b                   	pop    ebx
c002300d:	5e                   	pop    esi
c002300e:	5f                   	pop    edi
c002300f:	5d                   	pop    ebp
c0023010:	c3                   	ret    
c0023011:	8d 76 00             	lea    esi,[esi+0x0]
c0023014:	39 c3                	cmp    ebx,eax
c0023016:	73 db                	jae    c0022ff3 <__umoddi3+0xe7>
c0023018:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002301c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023020:	89 d7                	mov    edi,edx
c0023022:	89 c6                	mov    esi,eax
c0023024:	eb cd                	jmp    c0022ff3 <__umoddi3+0xe7>

Disassembly of section .init:

c0023026 <_init>:
c0023026:	55                   	push   ebp
c0023027:	89 e5                	mov    ebp,esp
c0023029:	e8 ea d0 fd ff       	call   c0000118 <frame_dummy>
c002302e:	e8 e5 fa ff ff       	call   c0022b18 <__do_global_ctors_aux>
c0023033:	5d                   	pop    ebp
c0023034:	c3                   	ret    

Disassembly of section .fini:

c0023035 <_fini>:
c0023035:	55                   	push   ebp
c0023036:	89 e5                	mov    ebp,esp
c0023038:	e8 6b d0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002303d:	5d                   	pop    ebp
c002303e:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0023040 <Computer::~Computer()>:
c0023040:	83 ec 0c             	sub    esp,0xc
c0023043:	ba c0 47 02 c0       	mov    edx,0xc00247c0
c0023048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304c:	89 10                	mov    DWORD PTR [eax],edx
c002304e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023052:	83 ec 0c             	sub    esp,0xc
c0023055:	50                   	push   eax
c0023056:	e8 25 b4 fe ff       	call   c000e480 <Device::~Device()>
c002305b:	83 c4 10             	add    esp,0x10
c002305e:	90                   	nop
c002305f:	83 c4 0c             	add    esp,0xc
c0023062:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0023064 <Computer::~Computer()>:
c0023064:	83 ec 0c             	sub    esp,0xc
c0023067:	83 ec 0c             	sub    esp,0xc
c002306a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002306e:	e8 cd ff ff ff       	call   c0023040 <Computer::~Computer()>
c0023073:	83 c4 10             	add    esp,0x10
c0023076:	83 ec 08             	sub    esp,0x8
c0023079:	68 ec 01 00 00       	push   0x1ec
c002307e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023082:	e8 d7 9e fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023087:	83 c4 10             	add    esp,0x10
c002308a:	83 c4 0c             	add    esp,0xc
c002308d:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002308e <idleCommon()>:
c002308e:	83 ec 0c             	sub    esp,0xc
c0023091:	fa                   	cli    
c0023092:	ff 05 88 9f 02 c0    	inc    DWORD PTR ds:0xc0029f88
c0023098:	e8 87 5c ff ff       	call   c0018d24 <schedule()>
c002309d:	a1 88 9f 02 c0       	mov    eax,ds:0xc0029f88
c00230a2:	48                   	dec    eax
c00230a3:	a3 88 9f 02 c0       	mov    ds:0xc0029f88,eax
c00230a8:	75 01                	jne    c00230ab <idleCommon()+0x1d>
c00230aa:	fb                   	sti    
c00230ab:	83 c4 0c             	add    esp,0xc
c00230ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00230b0 <LinkedList<UnixFile>::~LinkedList()>:
c00230b0:	90                   	nop
c00230b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00230b2 <LinkedList<UnixFile>::LinkedList()>:
c00230b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00230dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00230e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00230f2:	90                   	nop
c00230f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00230f4 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00230f4:	83 ec 0c             	sub    esp,0xc
c00230f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00230fc:	75 10                	jne    c002310e <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00230fe:	83 ec 0c             	sub    esp,0xc
c0023101:	68 8c 4b 02 c0       	push   0xc0024b8c
c0023106:	e8 ea 1e ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002310b:	83 c4 10             	add    esp,0x10
c002310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023112:	8b 00                	mov    eax,DWORD PTR [eax]
c0023114:	85 c0                	test   eax,eax
c0023116:	74 34                	je     c002314c <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0023118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002311f:	85 c0                	test   eax,eax
c0023121:	74 29                	je     c002314c <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0023123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023127:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002312a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002312e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023135:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023139:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002313c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023143:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002314a:	eb 65                	jmp    c00231b1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002314c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023150:	8b 00                	mov    eax,DWORD PTR [eax]
c0023152:	85 c0                	test   eax,eax
c0023154:	75 4b                	jne    c00231a1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002315a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002315d:	85 c0                	test   eax,eax
c002315f:	75 40                	jne    c00231a1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0023161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023165:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023169:	89 10                	mov    DWORD PTR [eax],edx
c002316b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002316f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023173:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002317a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002317d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023188:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002318b:	85 c0                	test   eax,eax
c002318d:	74 22                	je     c00231b1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002318f:	83 ec 0c             	sub    esp,0xc
c0023192:	68 ae 4b 02 c0       	push   0xc0024bae
c0023197:	e8 59 1e ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002319c:	83 c4 10             	add    esp,0x10
c002319f:	eb 10                	jmp    c00231b1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00231a1:	83 ec 0c             	sub    esp,0xc
c00231a4:	68 b8 4b 02 c0       	push   0xc0024bb8
c00231a9:	e8 47 1e ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c00231ae:	83 c4 10             	add    esp,0x10
c00231b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231b8:	8d 50 01             	lea    edx,[eax+0x1]
c00231bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231bf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00231c2:	90                   	nop
c00231c3:	83 c4 0c             	add    esp,0xc
c00231c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00231c8 <LinkedList<UnixFile>::getFirstElement()>:
c00231c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00231ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00231d0 <LinkedList<UnixFile>::removeFirst()>:
c00231d0:	83 ec 0c             	sub    esp,0xc
c00231d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00231d9:	85 c0                	test   eax,eax
c00231db:	75 12                	jne    c00231ef <LinkedList<UnixFile>::removeFirst()+0x1f>
c00231dd:	83 ec 0c             	sub    esp,0xc
c00231e0:	68 c4 4b 02 c0       	push   0xc0024bc4
c00231e5:	e8 0b 1e ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c00231ea:	83 c4 10             	add    esp,0x10
c00231ed:	eb 7e                	jmp    c002326d <LinkedList<UnixFile>::removeFirst()+0x9d>
c00231ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00231f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00231f9:	85 c0                	test   eax,eax
c00231fb:	74 10                	je     c002320d <LinkedList<UnixFile>::removeFirst()+0x3d>
c00231fd:	83 ec 0c             	sub    esp,0xc
c0023200:	68 0f 4c 02 c0       	push   0xc0024c0f
c0023205:	e8 eb 1d ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002320a:	83 c4 10             	add    esp,0x10
c002320d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023211:	8b 00                	mov    eax,DWORD PTR [eax]
c0023213:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023216:	85 c0                	test   eax,eax
c0023218:	75 33                	jne    c002324d <LinkedList<UnixFile>::removeFirst()+0x7d>
c002321a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002321e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023228:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002322f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023233:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023236:	83 f8 01             	cmp    eax,0x1
c0023239:	74 21                	je     c002325c <LinkedList<UnixFile>::removeFirst()+0x8c>
c002323b:	83 ec 0c             	sub    esp,0xc
c002323e:	68 e8 4b 02 c0       	push   0xc0024be8
c0023243:	e8 ad 1d ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023248:	83 c4 10             	add    esp,0x10
c002324b:	eb 0f                	jmp    c002325c <LinkedList<UnixFile>::removeFirst()+0x8c>
c002324d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023251:	8b 00                	mov    eax,DWORD PTR [eax]
c0023253:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0023256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002325a:	89 10                	mov    DWORD PTR [eax],edx
c002325c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023260:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023263:	8d 50 ff             	lea    edx,[eax-0x1]
c0023266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002326a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002326d:	83 c4 0c             	add    esp,0xc
c0023270:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0023272 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0023272:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023276:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023279:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002327a <DriverlessDevice::~DriverlessDevice()>:
c002327a:	ba 3c 54 02 c0       	mov    edx,0xc002543c
c002327f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023283:	89 10                	mov    DWORD PTR [eax],edx
c0023285:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023289:	50                   	push   eax
c002328a:	e8 f1 b1 fe ff       	call   c000e480 <Device::~Device()>
c002328f:	83 c4 04             	add    esp,0x4
c0023292:	90                   	nop
c0023293:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023294 <DriverlessDevice::~DriverlessDevice()>:
c0023294:	83 ec 0c             	sub    esp,0xc
c0023297:	83 ec 0c             	sub    esp,0xc
c002329a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002329e:	e8 d7 ff ff ff       	call   c002327a <DriverlessDevice::~DriverlessDevice()>
c00232a3:	83 c4 10             	add    esp,0x10
c00232a6:	83 ec 08             	sub    esp,0x8
c00232a9:	68 58 01 00 00       	push   0x158
c00232ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232b2:	e8 a7 9c fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00232b7:	83 c4 10             	add    esp,0x10
c00232ba:	83 c4 0c             	add    esp,0xc
c00232bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00232be <LinkedList<Device>::addElement(Device*)>:
c00232be:	83 ec 0c             	sub    esp,0xc
c00232c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00232c6:	75 10                	jne    c00232d8 <LinkedList<Device>::addElement(Device*)+0x1a>
c00232c8:	83 ec 0c             	sub    esp,0xc
c00232cb:	68 8c 4b 02 c0       	push   0xc0024b8c
c00232d0:	e8 20 1d ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c00232d5:	83 c4 10             	add    esp,0x10
c00232d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00232de:	85 c0                	test   eax,eax
c00232e0:	74 3a                	je     c002331c <LinkedList<Device>::addElement(Device*)+0x5e>
c00232e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232e9:	85 c0                	test   eax,eax
c00232eb:	74 2f                	je     c002331c <LinkedList<Device>::addElement(Device*)+0x5e>
c00232ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00232f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00232f8:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00232fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023302:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023306:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002330d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023310:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002331a:	eb 68                	jmp    c0023384 <LinkedList<Device>::addElement(Device*)+0xc6>
c002331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023320:	8b 00                	mov    eax,DWORD PTR [eax]
c0023322:	85 c0                	test   eax,eax
c0023324:	75 4e                	jne    c0023374 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002332d:	85 c0                	test   eax,eax
c002332f:	75 43                	jne    c0023374 <LinkedList<Device>::addElement(Device*)+0xb6>
c0023331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023339:	89 10                	mov    DWORD PTR [eax],edx
c002333b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023343:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002334d:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0023357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002335b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002335e:	85 c0                	test   eax,eax
c0023360:	74 22                	je     c0023384 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023362:	83 ec 0c             	sub    esp,0xc
c0023365:	68 ae 4b 02 c0       	push   0xc0024bae
c002336a:	e8 86 1c ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002336f:	83 c4 10             	add    esp,0x10
c0023372:	eb 10                	jmp    c0023384 <LinkedList<Device>::addElement(Device*)+0xc6>
c0023374:	83 ec 0c             	sub    esp,0xc
c0023377:	68 b8 4b 02 c0       	push   0xc0024bb8
c002337c:	e8 74 1c ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023381:	83 c4 10             	add    esp,0x10
c0023384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023388:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002338b:	8d 50 01             	lea    edx,[eax+0x1]
c002338e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023392:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023395:	90                   	nop
c0023396:	83 c4 0c             	add    esp,0xc
c0023399:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002339a <LinkedList<Device>::LinkedList()>:
c002339a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002339e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00233ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00233c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00233cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00233da:	90                   	nop
c00233db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00233dc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00233dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00233e2:	85 c0                	test   eax,eax
c00233e4:	75 0e                	jne    c00233f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00233e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233ed:	85 c0                	test   eax,eax
c00233ef:	75 03                	jne    c00233f4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00233f1:	b0 01                	mov    al,0x1
c00233f3:	c3                   	ret    
c00233f4:	b0 00                	mov    al,0x0
c00233f6:	90                   	nop
c00233f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00233f8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00233f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00233fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00233fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023400 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023400:	83 ec 0c             	sub    esp,0xc
c0023403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023407:	8b 00                	mov    eax,DWORD PTR [eax]
c0023409:	85 c0                	test   eax,eax
c002340b:	75 17                	jne    c0023424 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002340d:	83 ec 0c             	sub    esp,0xc
c0023410:	68 c4 4b 02 c0       	push   0xc0024bc4
c0023415:	e8 db 1b ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002341a:	83 c4 10             	add    esp,0x10
c002341d:	e9 92 00 00 00       	jmp    c00234b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0023422:	66 90                	xchg   ax,ax
c0023424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002342b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002342e:	85 c0                	test   eax,eax
c0023430:	0f 95 c0             	setne  al
c0023433:	84 c0                	test   al,al
c0023435:	74 11                	je     c0023448 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0023437:	83 ec 0c             	sub    esp,0xc
c002343a:	68 0f 4c 02 c0       	push   0xc0024c0f
c002343f:	e8 b1 1b ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023444:	83 c4 10             	add    esp,0x10
c0023447:	90                   	nop
c0023448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344c:	8b 00                	mov    eax,DWORD PTR [eax]
c002344e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023451:	85 c0                	test   eax,eax
c0023453:	0f 94 c0             	sete   al
c0023456:	84 c0                	test   al,al
c0023458:	74 36                	je     c0023490 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023468:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002346f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023473:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023476:	83 f8 01             	cmp    eax,0x1
c0023479:	74 25                	je     c00234a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002347b:	83 ec 0c             	sub    esp,0xc
c002347e:	68 e8 4b 02 c0       	push   0xc0024be8
c0023483:	e8 6d 1b ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023488:	83 c4 10             	add    esp,0x10
c002348b:	eb 13                	jmp    c00234a0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023494:	8b 00                	mov    eax,DWORD PTR [eax]
c0023496:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0023499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002349d:	89 10                	mov    DWORD PTR [eax],edx
c002349f:	90                   	nop
c00234a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234a7:	8d 50 ff             	lea    edx,[eax-0x1]
c00234aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00234b1:	8d 76 00             	lea    esi,[esi+0x0]
c00234b4:	83 c4 0c             	add    esp,0xc
c00234b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00234b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00234b8:	83 ec 0c             	sub    esp,0xc
c00234bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00234c0:	75 12                	jne    c00234d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00234c2:	83 ec 0c             	sub    esp,0xc
c00234c5:	68 8c 4b 02 c0       	push   0xc0024b8c
c00234ca:	e8 26 1b ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c00234cf:	83 c4 10             	add    esp,0x10
c00234d2:	66 90                	xchg   ax,ax
c00234d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00234da:	85 c0                	test   eax,eax
c00234dc:	74 36                	je     c0023514 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00234de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234e5:	85 c0                	test   eax,eax
c00234e7:	74 2b                	je     c0023514 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00234e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00234f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234f4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00234f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00234ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023509:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023510:	eb 6a                	jmp    c002357c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023512:	66 90                	xchg   ax,ax
c0023514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023518:	8b 00                	mov    eax,DWORD PTR [eax]
c002351a:	85 c0                	test   eax,eax
c002351c:	75 4e                	jne    c002356c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002351e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023525:	85 c0                	test   eax,eax
c0023527:	75 43                	jne    c002356c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0023529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023531:	89 10                	mov    DWORD PTR [eax],edx
c0023533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023537:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002353b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002353e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023542:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023545:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002354c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023550:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023553:	85 c0                	test   eax,eax
c0023555:	74 25                	je     c002357c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023557:	83 ec 0c             	sub    esp,0xc
c002355a:	68 ae 4b 02 c0       	push   0xc0024bae
c002355f:	e8 91 1a ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023564:	83 c4 10             	add    esp,0x10
c0023567:	eb 13                	jmp    c002357c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023569:	8d 76 00             	lea    esi,[esi+0x0]
c002356c:	83 ec 0c             	sub    esp,0xc
c002356f:	68 b8 4b 02 c0       	push   0xc0024bb8
c0023574:	e8 7c 1a ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023579:	83 c4 10             	add    esp,0x10
c002357c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023580:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023583:	8d 50 01             	lea    edx,[eax+0x1]
c0023586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002358a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002358d:	90                   	nop
c002358e:	83 c4 0c             	add    esp,0xc
c0023591:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023594 <ACPI::~ACPI()>:
c0023594:	83 ec 0c             	sub    esp,0xc
c0023597:	ba f4 5e 02 c0       	mov    edx,0xc0025ef4
c002359c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a0:	89 10                	mov    DWORD PTR [eax],edx
c00235a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a6:	83 ec 0c             	sub    esp,0xc
c00235a9:	50                   	push   eax
c00235aa:	e8 d1 ae fe ff       	call   c000e480 <Device::~Device()>
c00235af:	83 c4 10             	add    esp,0x10
c00235b2:	90                   	nop
c00235b3:	83 c4 0c             	add    esp,0xc
c00235b6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00235b8 <ACPI::~ACPI()>:
c00235b8:	83 ec 0c             	sub    esp,0xc
c00235bb:	83 ec 0c             	sub    esp,0xc
c00235be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235c2:	e8 cd ff ff ff       	call   c0023594 <ACPI::~ACPI()>
c00235c7:	83 c4 10             	add    esp,0x10
c00235ca:	83 ec 08             	sub    esp,0x8
c00235cd:	68 64 12 00 00       	push   0x1264
c00235d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235d6:	e8 83 99 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00235db:	83 c4 10             	add    esp,0x10
c00235de:	83 c4 0c             	add    esp,0xc
c00235e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00235e4 <LinkedList<Device>::~LinkedList()>:
c00235e4:	90                   	nop
c00235e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00235e8 <LinkedList<Device>::isEmpty()>:
c00235e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00235ee:	85 c0                	test   eax,eax
c00235f0:	75 0e                	jne    c0023600 <LinkedList<Device>::isEmpty()+0x18>
c00235f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235f9:	85 c0                	test   eax,eax
c00235fb:	75 03                	jne    c0023600 <LinkedList<Device>::isEmpty()+0x18>
c00235fd:	b0 01                	mov    al,0x1
c00235ff:	c3                   	ret    
c0023600:	b0 00                	mov    al,0x0
c0023602:	90                   	nop
c0023603:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023604 <LinkedList<Device>::getFirstElement()>:
c0023604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023608:	8b 00                	mov    eax,DWORD PTR [eax]
c002360a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002360c <LinkedList<Device>::removeFirst()>:
c002360c:	83 ec 0c             	sub    esp,0xc
c002360f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023613:	8b 00                	mov    eax,DWORD PTR [eax]
c0023615:	85 c0                	test   eax,eax
c0023617:	75 17                	jne    c0023630 <LinkedList<Device>::removeFirst()+0x24>
c0023619:	83 ec 0c             	sub    esp,0xc
c002361c:	68 c4 4b 02 c0       	push   0xc0024bc4
c0023621:	e8 cf 19 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023626:	83 c4 10             	add    esp,0x10
c0023629:	e9 92 00 00 00       	jmp    c00236c0 <LinkedList<Device>::removeFirst()+0xb4>
c002362e:	66 90                	xchg   ax,ax
c0023630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023637:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002363d:	85 c0                	test   eax,eax
c002363f:	74 13                	je     c0023654 <LinkedList<Device>::removeFirst()+0x48>
c0023641:	83 ec 0c             	sub    esp,0xc
c0023644:	68 0f 4c 02 c0       	push   0xc0024c0f
c0023649:	e8 a7 19 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c002364e:	83 c4 10             	add    esp,0x10
c0023651:	8d 76 00             	lea    esi,[esi+0x0]
c0023654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023658:	8b 00                	mov    eax,DWORD PTR [eax]
c002365a:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023660:	85 c0                	test   eax,eax
c0023662:	75 34                	jne    c0023698 <LinkedList<Device>::removeFirst()+0x8c>
c0023664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023668:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002366e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023672:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002367d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023680:	83 f8 01             	cmp    eax,0x1
c0023683:	74 27                	je     c00236ac <LinkedList<Device>::removeFirst()+0xa0>
c0023685:	83 ec 0c             	sub    esp,0xc
c0023688:	68 e8 4b 02 c0       	push   0xc0024be8
c002368d:	e8 63 19 ff ff       	call   c0014ff5 <Krnl::panic(char const*)>
c0023692:	83 c4 10             	add    esp,0x10
c0023695:	eb 15                	jmp    c00236ac <LinkedList<Device>::removeFirst()+0xa0>
c0023697:	90                   	nop
c0023698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002369c:	8b 00                	mov    eax,DWORD PTR [eax]
c002369e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00236a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236a8:	89 10                	mov    DWORD PTR [eax],edx
c00236aa:	66 90                	xchg   ax,ax
c00236ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236b3:	8d 50 ff             	lea    edx,[eax-0x1]
c00236b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00236bd:	8d 76 00             	lea    esi,[esi+0x0]
c00236c0:	83 c4 0c             	add    esp,0xc
c00236c3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00236c4 <CPU::~CPU()>:
c00236c4:	83 ec 0c             	sub    esp,0xc
c00236c7:	ba 84 64 02 c0       	mov    edx,0xc0026484
c00236cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d0:	89 10                	mov    DWORD PTR [eax],edx
c00236d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d6:	83 ec 0c             	sub    esp,0xc
c00236d9:	50                   	push   eax
c00236da:	e8 a1 ad fe ff       	call   c000e480 <Device::~Device()>
c00236df:	83 c4 10             	add    esp,0x10
c00236e2:	90                   	nop
c00236e3:	83 c4 0c             	add    esp,0xc
c00236e6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00236e8 <CPU::~CPU()>:
c00236e8:	83 ec 0c             	sub    esp,0xc
c00236eb:	83 ec 0c             	sub    esp,0xc
c00236ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236f2:	e8 cd ff ff ff       	call   c00236c4 <CPU::~CPU()>
c00236f7:	83 c4 10             	add    esp,0x10
c00236fa:	83 ec 08             	sub    esp,0x8
c00236fd:	68 98 11 00 00       	push   0x1198
c0023702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023706:	e8 53 98 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c002370b:	83 c4 10             	add    esp,0x10
c002370e:	83 c4 0c             	add    esp,0xc
c0023711:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023714 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023714:	90                   	nop
c0023715:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0023718 <ThreadControlBlock::ThreadControlBlock()>:
c0023718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002371c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023727:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002372e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023732:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002373d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0023744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023748:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002374f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023753:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0023757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002375b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002375f:	90                   	nop
c0023760:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0023764 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0023764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023768:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002376e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023772:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002377d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023788:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002378e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023792:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023799:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002379d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00237a4:	90                   	nop
c00237a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00237a8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00237a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00237ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00237af:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00237b0 <Vm::_FPUState::_FPUState()>:
c00237b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237b4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00237bb:	90                   	nop
c00237bc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00237be <PCI::~PCI()>:
c00237be:	83 ec 0c             	sub    esp,0xc
c00237c1:	ba 0c 73 02 c0       	mov    edx,0xc002730c
c00237c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ca:	89 10                	mov    DWORD PTR [eax],edx
c00237cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d0:	83 ec 0c             	sub    esp,0xc
c00237d3:	50                   	push   eax
c00237d4:	e8 77 a6 fe ff       	call   c000de50 <Bus::~Bus()>
c00237d9:	83 c4 10             	add    esp,0x10
c00237dc:	90                   	nop
c00237dd:	83 c4 0c             	add    esp,0xc
c00237e0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00237e2 <PCI::~PCI()>:
c00237e2:	83 ec 0c             	sub    esp,0xc
c00237e5:	83 ec 0c             	sub    esp,0xc
c00237e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237ec:	e8 cd ff ff ff       	call   c00237be <PCI::~PCI()>
c00237f1:	83 c4 10             	add    esp,0x10
c00237f4:	83 ec 08             	sub    esp,0x8
c00237f7:	68 5c 01 00 00       	push   0x15c
c00237fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023800:	e8 59 97 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023805:	83 c4 10             	add    esp,0x10
c0023808:	83 c4 0c             	add    esp,0xc
c002380b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002380c <IDE::~IDE()>:
c002380c:	83 ec 0c             	sub    esp,0xc
c002380f:	ba c0 73 02 c0       	mov    edx,0xc00273c0
c0023814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023818:	89 10                	mov    DWORD PTR [eax],edx
c002381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002381e:	83 ec 0c             	sub    esp,0xc
c0023821:	50                   	push   eax
c0023822:	e8 71 b1 fe ff       	call   c000e998 <HardDiskController::~HardDiskController()>
c0023827:	83 c4 10             	add    esp,0x10
c002382a:	90                   	nop
c002382b:	83 c4 0c             	add    esp,0xc
c002382e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023830 <IDE::~IDE()>:
c0023830:	83 ec 0c             	sub    esp,0xc
c0023833:	83 ec 0c             	sub    esp,0xc
c0023836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002383a:	e8 cd ff ff ff       	call   c002380c <IDE::~IDE()>
c002383f:	83 c4 10             	add    esp,0x10
c0023842:	83 ec 08             	sub    esp,0x8
c0023845:	68 70 02 00 00       	push   0x270
c002384a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002384e:	e8 0b 97 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023853:	83 c4 10             	add    esp,0x10
c0023856:	83 c4 0c             	add    esp,0xc
c0023859:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002385a <SATABus::~SATABus()>:
c002385a:	83 ec 0c             	sub    esp,0xc
c002385d:	ba 7c 74 02 c0       	mov    edx,0xc002747c
c0023862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023866:	89 10                	mov    DWORD PTR [eax],edx
c0023868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386c:	83 ec 0c             	sub    esp,0xc
c002386f:	50                   	push   eax
c0023870:	e8 23 b1 fe ff       	call   c000e998 <HardDiskController::~HardDiskController()>
c0023875:	83 c4 10             	add    esp,0x10
c0023878:	90                   	nop
c0023879:	83 c4 0c             	add    esp,0xc
c002387c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002387e <SATABus::~SATABus()>:
c002387e:	83 ec 0c             	sub    esp,0xc
c0023881:	83 ec 0c             	sub    esp,0xc
c0023884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023888:	e8 cd ff ff ff       	call   c002385a <SATABus::~SATABus()>
c002388d:	83 c4 10             	add    esp,0x10
c0023890:	83 ec 08             	sub    esp,0x8
c0023893:	68 64 01 00 00       	push   0x164
c0023898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002389c:	e8 bd 96 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00238a1:	83 c4 10             	add    esp,0x10
c00238a4:	83 c4 0c             	add    esp,0xc
c00238a7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00238a8 <ATA::~ATA()>:
c00238a8:	83 ec 0c             	sub    esp,0xc
c00238ab:	ba f4 74 02 c0       	mov    edx,0xc00274f4
c00238b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238b4:	89 10                	mov    DWORD PTR [eax],edx
c00238b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ba:	83 ec 0c             	sub    esp,0xc
c00238bd:	50                   	push   eax
c00238be:	e8 b7 b1 fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c00238c3:	83 c4 10             	add    esp,0x10
c00238c6:	90                   	nop
c00238c7:	83 c4 0c             	add    esp,0xc
c00238ca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00238cc <ATA::~ATA()>:
c00238cc:	83 ec 0c             	sub    esp,0xc
c00238cf:	83 ec 0c             	sub    esp,0xc
c00238d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238d6:	e8 cd ff ff ff       	call   c00238a8 <ATA::~ATA()>
c00238db:	83 c4 10             	add    esp,0x10
c00238de:	83 ec 08             	sub    esp,0x8
c00238e1:	68 7c 01 00 00       	push   0x17c
c00238e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238ea:	e8 6f 96 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00238ef:	83 c4 10             	add    esp,0x10
c00238f2:	83 c4 0c             	add    esp,0xc
c00238f5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00238f6 <ATAPI::~ATAPI()>:
c00238f6:	83 ec 0c             	sub    esp,0xc
c00238f9:	ba 58 75 02 c0       	mov    edx,0xc0027558
c00238fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023902:	89 10                	mov    DWORD PTR [eax],edx
c0023904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023908:	83 ec 0c             	sub    esp,0xc
c002390b:	50                   	push   eax
c002390c:	e8 69 b1 fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c0023911:	83 c4 10             	add    esp,0x10
c0023914:	90                   	nop
c0023915:	83 c4 0c             	add    esp,0xc
c0023918:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002391a <ATAPI::~ATAPI()>:
c002391a:	83 ec 0c             	sub    esp,0xc
c002391d:	83 ec 0c             	sub    esp,0xc
c0023920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023924:	e8 cd ff ff ff       	call   c00238f6 <ATAPI::~ATAPI()>
c0023929:	83 c4 10             	add    esp,0x10
c002392c:	83 ec 08             	sub    esp,0x8
c002392f:	68 84 01 00 00       	push   0x184
c0023934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023938:	e8 21 96 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c002393d:	83 c4 10             	add    esp,0x10
c0023940:	83 c4 0c             	add    esp,0xc
c0023943:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023944 <SATA::~SATA()>:
c0023944:	83 ec 0c             	sub    esp,0xc
c0023947:	ba 94 77 02 c0       	mov    edx,0xc0027794
c002394c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023950:	89 10                	mov    DWORD PTR [eax],edx
c0023952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023956:	83 ec 0c             	sub    esp,0xc
c0023959:	50                   	push   eax
c002395a:	e8 1b b1 fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c002395f:	83 c4 10             	add    esp,0x10
c0023962:	90                   	nop
c0023963:	83 c4 0c             	add    esp,0xc
c0023966:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023968 <SATA::~SATA()>:
c0023968:	83 ec 0c             	sub    esp,0xc
c002396b:	83 ec 0c             	sub    esp,0xc
c002396e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023972:	e8 cd ff ff ff       	call   c0023944 <SATA::~SATA()>
c0023977:	83 c4 10             	add    esp,0x10
c002397a:	83 ec 08             	sub    esp,0x8
c002397d:	68 7c 01 00 00       	push   0x17c
c0023982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023986:	e8 d3 95 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c002398b:	83 c4 10             	add    esp,0x10
c002398e:	83 c4 0c             	add    esp,0xc
c0023991:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023992 <SATAPI::~SATAPI()>:
c0023992:	83 ec 0c             	sub    esp,0xc
c0023995:	ba 00 79 02 c0       	mov    edx,0xc0027900
c002399a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002399e:	89 10                	mov    DWORD PTR [eax],edx
c00239a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239a4:	83 ec 0c             	sub    esp,0xc
c00239a7:	50                   	push   eax
c00239a8:	e8 cd b0 fe ff       	call   c000ea7a <PhysicalDisk::~PhysicalDisk()>
c00239ad:	83 c4 10             	add    esp,0x10
c00239b0:	90                   	nop
c00239b1:	83 c4 0c             	add    esp,0xc
c00239b4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00239b6 <SATAPI::~SATAPI()>:
c00239b6:	83 ec 0c             	sub    esp,0xc
c00239b9:	83 ec 0c             	sub    esp,0xc
c00239bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239c0:	e8 cd ff ff ff       	call   c0023992 <SATAPI::~SATAPI()>
c00239c5:	83 c4 10             	add    esp,0x10
c00239c8:	83 ec 08             	sub    esp,0x8
c00239cb:	68 84 01 00 00       	push   0x184
c00239d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00239d4:	e8 85 95 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c00239d9:	83 c4 10             	add    esp,0x10
c00239dc:	83 c4 0c             	add    esp,0xc
c00239df:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00239e0 <AVX::~AVX()>:
c00239e0:	83 ec 0c             	sub    esp,0xc
c00239e3:	ba 40 79 02 c0       	mov    edx,0xc0027940
c00239e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ec:	89 10                	mov    DWORD PTR [eax],edx
c00239ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239f2:	83 ec 0c             	sub    esp,0xc
c00239f5:	50                   	push   eax
c00239f6:	e8 05 b1 fe ff       	call   c000eb00 <FPU::~FPU()>
c00239fb:	83 c4 10             	add    esp,0x10
c00239fe:	90                   	nop
c00239ff:	83 c4 0c             	add    esp,0xc
c0023a02:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023a04 <AVX::~AVX()>:
c0023a04:	83 ec 0c             	sub    esp,0xc
c0023a07:	83 ec 0c             	sub    esp,0xc
c0023a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a0e:	e8 cd ff ff ff       	call   c00239e0 <AVX::~AVX()>
c0023a13:	83 c4 10             	add    esp,0x10
c0023a16:	83 ec 08             	sub    esp,0x8
c0023a19:	68 58 01 00 00       	push   0x158
c0023a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a22:	e8 37 95 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	83 c4 0c             	add    esp,0xc
c0023a2d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023a30 <MMX::~MMX()>:
c0023a30:	83 ec 0c             	sub    esp,0xc
c0023a33:	ba 80 79 02 c0       	mov    edx,0xc0027980
c0023a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3c:	89 10                	mov    DWORD PTR [eax],edx
c0023a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a42:	83 ec 0c             	sub    esp,0xc
c0023a45:	50                   	push   eax
c0023a46:	e8 b5 b0 fe ff       	call   c000eb00 <FPU::~FPU()>
c0023a4b:	83 c4 10             	add    esp,0x10
c0023a4e:	90                   	nop
c0023a4f:	83 c4 0c             	add    esp,0xc
c0023a52:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023a54 <MMX::~MMX()>:
c0023a54:	83 ec 0c             	sub    esp,0xc
c0023a57:	83 ec 0c             	sub    esp,0xc
c0023a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a5e:	e8 cd ff ff ff       	call   c0023a30 <MMX::~MMX()>
c0023a63:	83 c4 10             	add    esp,0x10
c0023a66:	83 ec 08             	sub    esp,0x8
c0023a69:	68 58 01 00 00       	push   0x158
c0023a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a72:	e8 e7 94 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023a77:	83 c4 10             	add    esp,0x10
c0023a7a:	83 c4 0c             	add    esp,0xc
c0023a7d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023a80 <SSE::~SSE()>:
c0023a80:	83 ec 0c             	sub    esp,0xc
c0023a83:	ba c0 79 02 c0       	mov    edx,0xc00279c0
c0023a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a8c:	89 10                	mov    DWORD PTR [eax],edx
c0023a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a92:	83 ec 0c             	sub    esp,0xc
c0023a95:	50                   	push   eax
c0023a96:	e8 65 b0 fe ff       	call   c000eb00 <FPU::~FPU()>
c0023a9b:	83 c4 10             	add    esp,0x10
c0023a9e:	90                   	nop
c0023a9f:	83 c4 0c             	add    esp,0xc
c0023aa2:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023aa4 <SSE::~SSE()>:
c0023aa4:	83 ec 0c             	sub    esp,0xc
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023aae:	e8 cd ff ff ff       	call   c0023a80 <SSE::~SSE()>
c0023ab3:	83 c4 10             	add    esp,0x10
c0023ab6:	83 ec 08             	sub    esp,0x8
c0023ab9:	68 58 01 00 00       	push   0x158
c0023abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ac2:	e8 97 94 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023ac7:	83 c4 10             	add    esp,0x10
c0023aca:	83 c4 0c             	add    esp,0xc
c0023acd:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023ad0 <x87::~x87()>:
c0023ad0:	83 ec 0c             	sub    esp,0xc
c0023ad3:	ba 60 7a 02 c0       	mov    edx,0xc0027a60
c0023ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023adc:	89 10                	mov    DWORD PTR [eax],edx
c0023ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ae2:	83 ec 0c             	sub    esp,0xc
c0023ae5:	50                   	push   eax
c0023ae6:	e8 15 b0 fe ff       	call   c000eb00 <FPU::~FPU()>
c0023aeb:	83 c4 10             	add    esp,0x10
c0023aee:	90                   	nop
c0023aef:	83 c4 0c             	add    esp,0xc
c0023af2:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023af4 <x87::~x87()>:
c0023af4:	83 ec 0c             	sub    esp,0xc
c0023af7:	83 ec 0c             	sub    esp,0xc
c0023afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023afe:	e8 cd ff ff ff       	call   c0023ad0 <x87::~x87()>
c0023b03:	83 c4 10             	add    esp,0x10
c0023b06:	83 ec 08             	sub    esp,0x8
c0023b09:	68 58 01 00 00       	push   0x158
c0023b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b12:	e8 47 94 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	83 c4 0c             	add    esp,0xc
c0023b1d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023b1e <IOAPIC::~IOAPIC()>:
c0023b1e:	83 ec 0c             	sub    esp,0xc
c0023b21:	ba b8 7b 02 c0       	mov    edx,0xc0027bb8
c0023b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b2a:	89 10                	mov    DWORD PTR [eax],edx
c0023b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b30:	83 ec 0c             	sub    esp,0xc
c0023b33:	50                   	push   eax
c0023b34:	e8 47 a9 fe ff       	call   c000e480 <Device::~Device()>
c0023b39:	83 c4 10             	add    esp,0x10
c0023b3c:	90                   	nop
c0023b3d:	83 c4 0c             	add    esp,0xc
c0023b40:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023b42 <IOAPIC::~IOAPIC()>:
c0023b42:	83 ec 0c             	sub    esp,0xc
c0023b45:	83 ec 0c             	sub    esp,0xc
c0023b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b4c:	e8 cd ff ff ff       	call   c0023b1e <IOAPIC::~IOAPIC()>
c0023b51:	83 c4 10             	add    esp,0x10
c0023b54:	83 ec 08             	sub    esp,0x8
c0023b57:	68 68 01 00 00       	push   0x168
c0023b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b60:	e8 f9 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023b65:	83 c4 10             	add    esp,0x10
c0023b68:	83 c4 0c             	add    esp,0xc
c0023b6b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023b6c <APIC::~APIC()>:
c0023b6c:	83 ec 0c             	sub    esp,0xc
c0023b6f:	ba 70 7b 02 c0       	mov    edx,0xc0027b70
c0023b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b78:	89 10                	mov    DWORD PTR [eax],edx
c0023b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b7e:	83 ec 0c             	sub    esp,0xc
c0023b81:	50                   	push   eax
c0023b82:	e8 01 b4 fe ff       	call   c000ef88 <InterruptController::~InterruptController()>
c0023b87:	83 c4 10             	add    esp,0x10
c0023b8a:	90                   	nop
c0023b8b:	83 c4 0c             	add    esp,0xc
c0023b8e:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023b90 <APIC::~APIC()>:
c0023b90:	83 ec 0c             	sub    esp,0xc
c0023b93:	83 ec 0c             	sub    esp,0xc
c0023b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b9a:	e8 cd ff ff ff       	call   c0023b6c <APIC::~APIC()>
c0023b9f:	83 c4 10             	add    esp,0x10
c0023ba2:	83 ec 08             	sub    esp,0x8
c0023ba5:	68 58 21 00 00       	push   0x2158
c0023baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bae:	e8 ab 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023bb3:	83 c4 10             	add    esp,0x10
c0023bb6:	83 c4 0c             	add    esp,0xc
c0023bb9:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023bba <PIC::~PIC()>:
c0023bba:	83 ec 0c             	sub    esp,0xc
c0023bbd:	ba 08 7c 02 c0       	mov    edx,0xc0027c08
c0023bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc6:	89 10                	mov    DWORD PTR [eax],edx
c0023bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bcc:	83 ec 0c             	sub    esp,0xc
c0023bcf:	50                   	push   eax
c0023bd0:	e8 b3 b3 fe ff       	call   c000ef88 <InterruptController::~InterruptController()>
c0023bd5:	83 c4 10             	add    esp,0x10
c0023bd8:	90                   	nop
c0023bd9:	83 c4 0c             	add    esp,0xc
c0023bdc:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023bde <PIC::~PIC()>:
c0023bde:	83 ec 0c             	sub    esp,0xc
c0023be1:	83 ec 0c             	sub    esp,0xc
c0023be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023be8:	e8 cd ff ff ff       	call   c0023bba <PIC::~PIC()>
c0023bed:	83 c4 10             	add    esp,0x10
c0023bf0:	83 ec 08             	sub    esp,0x8
c0023bf3:	68 58 21 00 00       	push   0x2158
c0023bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bfc:	e8 5d 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023c01:	83 c4 10             	add    esp,0x10
c0023c04:	83 c4 0c             	add    esp,0xc
c0023c07:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023c08 <APICTimer::~APICTimer()>:
c0023c08:	83 ec 0c             	sub    esp,0xc
c0023c0b:	ba 5c 7c 02 c0       	mov    edx,0xc0027c5c
c0023c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c14:	89 10                	mov    DWORD PTR [eax],edx
c0023c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c1a:	83 ec 0c             	sub    esp,0xc
c0023c1d:	50                   	push   eax
c0023c1e:	e8 cd d1 fe ff       	call   c0010df0 <Timer::~Timer()>
c0023c23:	83 c4 10             	add    esp,0x10
c0023c26:	90                   	nop
c0023c27:	83 c4 0c             	add    esp,0xc
c0023c2a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023c2c <APICTimer::~APICTimer()>:
c0023c2c:	83 ec 0c             	sub    esp,0xc
c0023c2f:	83 ec 0c             	sub    esp,0xc
c0023c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c36:	e8 cd ff ff ff       	call   c0023c08 <APICTimer::~APICTimer()>
c0023c3b:	83 c4 10             	add    esp,0x10
c0023c3e:	83 ec 08             	sub    esp,0x8
c0023c41:	68 60 01 00 00       	push   0x160
c0023c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c4a:	e8 0f 93 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023c4f:	83 c4 10             	add    esp,0x10
c0023c52:	83 c4 0c             	add    esp,0xc
c0023c55:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023c58 <PIT::~PIT()>:
c0023c58:	83 ec 0c             	sub    esp,0xc
c0023c5b:	ba ac 7c 02 c0       	mov    edx,0xc0027cac
c0023c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c64:	89 10                	mov    DWORD PTR [eax],edx
c0023c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c6a:	83 ec 0c             	sub    esp,0xc
c0023c6d:	50                   	push   eax
c0023c6e:	e8 7d d1 fe ff       	call   c0010df0 <Timer::~Timer()>
c0023c73:	83 c4 10             	add    esp,0x10
c0023c76:	90                   	nop
c0023c77:	83 c4 0c             	add    esp,0xc
c0023c7a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023c7c <PIT::~PIT()>:
c0023c7c:	83 ec 0c             	sub    esp,0xc
c0023c7f:	83 ec 0c             	sub    esp,0xc
c0023c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c86:	e8 cd ff ff ff       	call   c0023c58 <PIT::~PIT()>
c0023c8b:	83 c4 10             	add    esp,0x10
c0023c8e:	83 ec 08             	sub    esp,0x8
c0023c91:	68 5c 01 00 00       	push   0x15c
c0023c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c9a:	e8 bf 92 fe ff       	call   c000cf5e <operator delete(void*, unsigned long)>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	83 c4 0c             	add    esp,0xc
c0023ca5:	c3                   	ret    
