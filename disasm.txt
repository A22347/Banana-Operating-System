
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 86 02 00       	call   c0028688 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 92 02 c0       	mov    ebx,0xc0029232
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 40 92 02 c0    	cmp    ebx,0xc0029240
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 da 02 c0       	mov    eax,0xc002da38
c0000049:	3d 38 da 02 c0       	cmp    eax,0xc002da38
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 da 02 c0       	push   0xc002da38
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 da 02 c0       	mov    eax,0xc002da38
c0000075:	2d 38 da 02 c0       	sub    eax,0xc002da38
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 da 02 c0       	push   0xc002da38
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e068,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 48 92 02 c0       	mov    ebx,0xc0029248
c00000bb:	81 eb 44 92 02 c0    	sub    ebx,0xc0029244
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 44 92 02 c0       	mov    esi,0xc0029244
c00000ca:	a1 6c e0 02 c0       	mov    eax,ds:0xc002e06c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c e0 02 c0       	mov    ds:0xc002e06c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c e0 02 c0       	mov    eax,ds:0xc002e06c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 da 02 c0       	push   0xc002da38
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e068,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 e0 02 c0       	push   0xc002e070
c000012c:	68 38 da 02 c0       	push   0xc002da38
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 41 d6 01 00       	call   c001d9dc <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 9f 29 01 00       	call   c0012d52 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 1f d6 01 00       	call   c001d9dc <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 6d da 01 00       	call   c001de49 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 1b e0 01 00       	call   c001e400 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 b0 e4 02 c0 	lgdtd  ds:0xc002e4b0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 7c 46 01 00       	call   c0014c55 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 88 e0 02 c0       	mov    ds:0xc002e088,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 88 e0 02 c0    	mov    DWORD PTR ds:0xc002e088,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 88 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e088
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6da0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6da0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6da0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6da0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d a0 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0a0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 a4 e0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f5c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 a4 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f5c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 cc e0 02 c0    	cmp    DWORD PTR ds:0xc002e0cc,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d dc e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0dc
c0000e60:	c7 42 0c d4 e0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e0d4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 dc e0 02 c0    	mov    DWORD PTR ds:0xc002e0dc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 cc e0 02 c0    	mov    DWORD PTR ds:0xc002e0cc,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 a0 e0 02 c0 02 	test   BYTE PTR ds:0xc002e0a0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d a0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0a0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 a4 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f5c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 a4 e0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1f5c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 d4 e0 02 c0 	lea    edx,[eax*8-0x3ffd1f2c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d e0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0e0
c00011e2:	81 fb d4 e0 02 c0    	cmp    ebx,0xc002e0d4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d d4 e0 02 c0       	cmp    eax,0xc002e0d4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d d0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0d0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 dc e0 02 c0       	mov    ds:0xc002e0dc,eax
c000121e:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c0001223:	a3 d0 e0 02 c0       	mov    ds:0xc002e0d0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 d4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0d4
c0001231:	c7 40 0c d4 e0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e0d4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 d4 e0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e0d4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 98 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f68]
c0001282:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 a0 e0 02 c0 	lea    ecx,[edx*4-0x3ffd1f60]
c000129d:	8b 14 95 a0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f60]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd d4 e3 02 c0 	or     DWORD PTR [edi*4-0x3ffd1c2c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 d4 e0 02 c0 	lea    eax,[eax*8-0x3ffd1f2c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d dc e0 02 c0    	mov    DWORD PTR ds:0xc002e0dc,ecx
c0001357:	89 0d e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,ecx
c000135d:	c7 41 08 d4 e0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e0d4
c0001364:	c7 41 0c d4 e0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e0d4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd cc e0 02 c0 	lea    edx,[ecx*8-0x3ffd1f34]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d d4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c2c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d d4 e3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1c2c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 cc e0 02 c0 	lea    edx,[eax*4-0x3ffd1f34]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d d4 e3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1c2c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d dc e0 02 c0    	mov    DWORD PTR ds:0xc002e0dc,edi
c000142a:	89 3d e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,edi
c0001430:	c7 47 08 d4 e0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e0d4
c0001437:	c7 47 0c d4 e0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e0d4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d d0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0d0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 cc e0 02 c0       	mov    eax,ds:0xc002e0cc
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d cc e0 02 c0    	mov    DWORD PTR ds:0xc002e0cc,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba a0 e0 02 c0       	mov    edx,0xc002e0a0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d a0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0a0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d f4 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e3f4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 f4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3f4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d f4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3f4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 cc e0 02 c0    	cmp    DWORD PTR ds:0xc002e0cc,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d cc e0 02 c0    	mov    DWORD PTR ds:0xc002e0cc,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d a0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0a0,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 fc e3 02 c0    	push   DWORD PTR ds:0xc002e3fc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d a0 e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0a0,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 fc e3 02 c0       	mov    eax,ds:0xc002e3fc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d cc e0 02 c0 00 	cmp    DWORD PTR ds:0xc002e0cc,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 cc e0 02 c0       	mov    eax,ds:0xc002e0cc
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 a4 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f5c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 d4 e0 02 c0       	mov    eax,0xc002e0d4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d cc e3 02 c0       	cmp    eax,0xc002e3cc
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 f0 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e3f0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 04 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e404
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 14 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e414
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 a0 e0 02 c0       	mov    eax,0xc002e0a0
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c9c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 a0 e0 02 c0       	mov    eax,ds:0xc002e0a0
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 a0 e0 02 c0       	mov    ds:0xc002e0a0,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d e4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d e8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d ec e3 02 c0    	mov    DWORD PTR ds:0xc002e3ec,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 f4 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3f4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 80 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce480]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 cc f1 01 00       	jmp    c0020df8 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 80 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce480]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 fd f1 01 00       	jmp    c0020e3f <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 80 1b 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce480]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 25 f2 01 00       	jmp    c0020e86 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 a8 4a 02 00       	call   c00269ec <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b80]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b80]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba c0 c8 02 c0       	mov    edx,0xc002c8c0
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 94 02 c0       	mov    edx,0xc00294ac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 94 02 c0       	mov    edx,0xc0029490
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 40 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1bc0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 20 e4 02 c0    	mov    ax,ds:0xc002e420
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 20 e4 02 c0    	mov    ds:0xc002e420,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 a5 38 02 00       	call   c00269ec <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 94 02 c0       	mov    eax,0xc00294b2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6c00]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 94 02 c0       	mov    eax,0xc00294bb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b80]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 70 22 02 00       	call   c00269ec <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 94 02 c0       	mov    edx,0xc0029490
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 93 02 c0       	mov    edx,0xc0029380
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 93 02 c0       	mov    edx,0xc0029390
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 40 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1bc0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 40 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1bc0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 37 0c 02 00       	call   c00269ec <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 1d 0c 02 00       	call   c00269ec <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 93 02 c0       	mov    eax,0xc00293d7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 93 02 c0       	mov    eax,0xc00293d0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 40 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1bc0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 93 02 c0       	mov    esi,0xc00293c0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 60 f3 01 00       	call   c00269ec <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 94 02 c0       	mov    edx,0xc00294a0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 93 02 c0       	mov    edx,0xc00293a0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 94 02 c0       	mov    edx,0xc00294c2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 94 02 c0       	mov    edx,0xc00294ce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 94 02 c0       	mov    edx,0xc00294e2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029800
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029800
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 96 02 c0       	mov    eax,0xc0029600
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 95 02 c0       	mov    eax,0xc0029540
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 b4 fc 01 00       	call   c00284bf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 77 fc 01 00       	call   c00284a1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 4b fc 01 00       	call   c00284bf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 fe f2 01 00       	call   c0027bc4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 78 fd 01 00       	call   c0028650 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 c5 fb 01 00       	call   c00284bf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 07 fb 01 00       	call   c00284bf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 d4 fa 01 00       	call   c00284a1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 c1 f9 01 00       	call   c00284bf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 89 f9 01 00       	call   c00284a1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 95 f7 01 00       	call   c00284bf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 5a f7 01 00       	call   c00284a1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 6a f4 01 00       	call   c0028253 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 e8 ed 01 00       	call   c0027bf0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 a4 f6 01 00       	call   c00284c3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 92 f7 01 00       	call   c00285e7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 7c ed 01 00       	call   c0027bf0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 27 f6 01 00       	call   c00284bd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 08 f6 01 00       	call   c00284c1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 96 f7 01 00       	call   c0028670 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 48 f3 01 00       	call   c0028253 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 c6 ec 01 00       	call   c0027bf0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 82 f5 01 00       	call   c00284c3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 70 f6 01 00       	call   c00285e7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 5a ec 01 00       	call   c0027bf0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 05 f5 01 00       	call   c00284bd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 e5 f4 01 00       	call   c00284c1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 72 f6 01 00       	call   c0028670 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 20 f4 01 00       	call   c00284bf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 de f3 01 00       	call   c00284a1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 c6 f3 01 00       	call   c00284bf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 38 f1 01 00       	call   c0028253 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 3a e4 01 00       	call   c0027573 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 9d ea 01 00       	call   c0027bf0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ef f0 01 00       	call   c0028253 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 f5 e3 01 00       	call   c0027573 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 c4 f0 01 00       	call   c0028253 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 14 f3 01 00       	call   c00284bd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 f1 e9 01 00       	call   c0027bc4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 6b f4 01 00       	call   c0028650 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 9a f2 01 00       	call   c00284a1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 95 e9 01 00       	call   c0027bc4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 13 f0 01 00       	call   c0028253 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 96 e9 01 00       	call   c0027bf0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 e8 ef 01 00       	call   c0028253 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 4f ec 01 00       	call   c0027ed4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ce e2 01 00       	call   c0027573 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 2e dc 01 00       	call   c0026f08 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 05 f3 01 00       	call   c00285e7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ee e8 01 00       	call   c0027bf0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 d5 f2 01 00       	call   c00285e7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 47 e2 01 00       	call   c0027573 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 80 f1 01 00       	call   c00284c3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 68 eb 01 00       	call   c0027ed4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ee e1 01 00       	call   c0027573 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 d4 f2 01 00       	call   c0028670 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ae ee 01 00       	call   c0028253 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 05 e8 01 00       	call   c0027bc4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 e4 f0 01 00       	call   c00284bf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 7d e1 01 00       	call   c0027573 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 a9 e7 01 00       	call   c0027bc4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 43 f2 01 00       	call   c0028670 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 fc ed 01 00       	call   c0028253 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 79 e7 01 00       	call   c0027bf0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 cc ed 01 00       	call   c0028253 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 d2 e0 01 00       	call   c0027573 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 a2 ed 01 00       	call   c0028253 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 f4 ef 01 00       	call   c00284bf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 cb e6 01 00       	call   c0027bc4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 45 f1 01 00       	call   c0028650 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 74 ef 01 00       	call   c00284a1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 6e e6 01 00       	call   c0027bc4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ec ec 01 00       	call   c0028253 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 6f e6 01 00       	call   c0027bf0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 c1 ec 01 00       	call   c0028253 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 28 e9 01 00       	call   c0027ed4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 a7 df 01 00       	call   c0027573 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 f7 d8 01 00       	call   c0026f08 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ce ef 01 00       	call   c00285e7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 b7 e5 01 00       	call   c0027bf0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 9e ef 01 00       	call   c00285e7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 10 df 01 00       	call   c0027573 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 49 ee 01 00       	call   c00284c3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 30 e8 01 00       	call   c0027ed4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 af de 01 00       	call   c0027573 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 95 ef 01 00       	call   c0028670 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 6f eb 01 00       	call   c0028253 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 c6 e4 01 00       	call   c0027bc4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 a5 ed 01 00       	call   c00284bf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 3e de 01 00       	call   c0027573 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 6a e4 01 00       	call   c0027bc4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 df ea 01 00       	call   c0028253 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 e5 dd 01 00       	call   c0027573 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 9d 02 c0       	mov    eax,0xc0029dc0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 9d 02 c0       	mov    eax,0xc0029dd4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 5a e9 01 00       	call   c0028253 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 d8 e2 01 00       	call   c0027bf0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 6a d5 01 00       	call   c0026f08 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 41 ec 01 00       	call   c00285e7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 2a e2 01 00       	call   c0027bf0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 0d ec 01 00       	call   c00285e7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 7f db 01 00       	call   c0027573 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 df eb 01 00       	call   c00285e7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ce e1 01 00       	call   c0027bf0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 37 db 01 00       	call   c0027573 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 58 d4 01 00       	call   c0026f08 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 2f eb 01 00       	call   c00285e7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 18 e1 01 00       	call   c0027bf0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 fb ea 01 00       	call   c00285e7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 6d da 01 00       	call   c0027573 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 cd ea 01 00       	call   c00285e7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 bc e0 01 00       	call   c0027bf0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 25 da 01 00       	call   c0027573 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 03 da 01 00       	call   c0027573 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 df d2 01 00       	call   c0026f08 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 b6 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 9f df 01 00       	call   c0027bf0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 82 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 f4 d8 01 00       	call   c0027573 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 54 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 3d df 01 00       	call   c0027bf0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 a6 d8 01 00       	call   c0027573 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 06 e9 01 00       	call   c00285e7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ef de 01 00       	call   c0027bf0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 58 d8 01 00       	call   c0027573 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 6d d1 01 00       	call   c0026f08 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 44 e8 01 00       	call   c00285e7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 2d de 01 00       	call   c0027bf0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 14 e8 01 00       	call   c00285e7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 86 d7 01 00       	call   c0027573 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 e6 e7 01 00       	call   c00285e7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 cf dd 01 00       	call   c0027bf0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 38 d7 01 00       	call   c0027573 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 98 e7 01 00       	call   c00285e7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 81 dd 01 00       	call   c0027bf0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ea d6 01 00       	call   c0027573 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 be d6 01 00       	call   c0027573 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 1b dd 01 00       	call   c0027bf0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 d7 e5 01 00       	call   c00284c3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 66 d6 01 00       	call   c0027573 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 c3 dc 01 00       	call   c0027bf0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 7f e5 01 00       	call   c00284c3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 f9 ce 01 00       	call   c0026f08 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 d0 e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 b9 db 01 00       	call   c0027bf0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 9c e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 0e d5 01 00       	call   c0027573 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 6e e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 57 db 01 00       	call   c0027bf0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 c0 d4 01 00       	call   c0027573 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 20 e5 01 00       	call   c00285e7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 09 db 01 00       	call   c0027bf0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 72 d4 01 00       	call   c0027573 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 d2 e4 01 00       	call   c00285e7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 bb da 01 00       	call   c0027bf0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 24 d4 01 00       	call   c0027573 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 84 e4 01 00       	call   c00285e7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 6d da 01 00       	call   c0027bf0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 d6 d3 01 00       	call   c0027573 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 d8 cc 01 00       	call   c0026f08 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 af e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 98 d9 01 00       	call   c0027bf0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 7f e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 f1 d2 01 00       	call   c0027573 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 51 e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 3a d9 01 00       	call   c0027bf0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 a3 d2 01 00       	call   c0027573 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 03 e3 01 00       	call   c00285e7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ec d8 01 00       	call   c0027bf0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 55 d2 01 00       	call   c0027573 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 b5 e2 01 00       	call   c00285e7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 9e d8 01 00       	call   c0027bf0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 07 d2 01 00       	call   c0027573 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 67 e2 01 00       	call   c00285e7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 50 d8 01 00       	call   c0027bf0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 b9 d1 01 00       	call   c0027573 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 8d d1 01 00       	call   c0027573 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ea d7 01 00       	call   c0027bf0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 a6 e0 01 00       	call   c00284c3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 35 d1 01 00       	call   c0027573 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 92 d7 01 00       	call   c0027bf0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 4e e0 01 00       	call   c00284c3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 dc d0 01 00       	call   c0027573 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 39 d7 01 00       	call   c0027bf0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 f5 df 01 00       	call   c00284c3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 83 d0 01 00       	call   c0027573 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 e0 d6 01 00       	call   c0027bf0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 9c df 01 00       	call   c00284c3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 fa c8 01 00       	call   c0026f08 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 d1 df 01 00       	call   c00285e7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ba d5 01 00       	call   c0027bf0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 9d df 01 00       	call   c00285e7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 0f cf 01 00       	call   c0027573 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 6f df 01 00       	call   c00285e7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 58 d5 01 00       	call   c0027bf0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 c1 ce 01 00       	call   c0027573 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 21 df 01 00       	call   c00285e7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 0a d5 01 00       	call   c0027bf0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 73 ce 01 00       	call   c0027573 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 d3 de 01 00       	call   c00285e7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 bc d4 01 00       	call   c0027bf0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 25 ce 01 00       	call   c0027573 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 85 de 01 00       	call   c00285e7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 6e d4 01 00       	call   c0027bf0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 d7 cd 01 00       	call   c0027573 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 37 de 01 00       	call   c00285e7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 20 d4 01 00       	call   c0027bf0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 86 cd 01 00       	call   c0027573 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 e6 dd 01 00       	call   c00285e7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 cf d3 01 00       	call   c0027bf0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 38 cd 01 00       	call   c0027573 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 32 c6 01 00       	call   c0026f08 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 09 dd 01 00       	call   c00285e7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 f2 d2 01 00       	call   c0027bf0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 d2 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 44 cc 01 00       	call   c0027573 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 a4 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 8d d2 01 00       	call   c0027bf0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 f6 cb 01 00       	call   c0027573 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 56 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 3f d2 01 00       	call   c0027bf0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 a8 cb 01 00       	call   c0027573 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 08 dc 01 00       	call   c00285e7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 f1 d1 01 00       	call   c0027bf0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 5a cb 01 00       	call   c0027573 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ba db 01 00       	call   c00285e7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 a3 d1 01 00       	call   c0027bf0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 0c cb 01 00       	call   c0027573 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 6c db 01 00       	call   c00285e7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 55 d1 01 00       	call   c0027bf0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 bb ca 01 00       	call   c0027573 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 1b db 01 00       	call   c00285e7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 04 d1 01 00       	call   c0027bf0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 73 ca 01 00       	call   c0027573 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 4c ca 01 00       	call   c0027573 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 aa d0 01 00       	call   c0027bf0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 66 d9 01 00       	call   c00284c3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 f5 c9 01 00       	call   c0027573 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 53 d0 01 00       	call   c0027bf0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 0f d9 01 00       	call   c00284c3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 9d c9 01 00       	call   c0027573 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 fb cf 01 00       	call   c0027bf0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 b7 d8 01 00       	call   c00284c3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 45 c9 01 00       	call   c0027573 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 a3 cf 01 00       	call   c0027bf0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 5f d8 01 00       	call   c00284c3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ed c8 01 00       	call   c0027573 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 4b cf 01 00       	call   c0027bf0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 07 d8 01 00       	call   c00284c3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 9b c8 01 00       	call   c0027573 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 f9 ce 01 00       	call   c0027bf0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 b5 d7 01 00       	call   c00284c3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 c9 c0 01 00       	call   c0026f08 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 a0 d7 01 00       	call   c00285e7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 89 cd 01 00       	call   c0027bf0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 70 d7 01 00       	call   c00285e7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 e2 c6 01 00       	call   c0027573 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 16 d7 01 00       	call   c00285e7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 ff cc 01 00       	call   c0027bf0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 6a c6 01 00       	call   c0027573 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 b7 d6 01 00       	call   c00285e7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 a0 cc 01 00       	call   c0027bf0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 0b c6 01 00       	call   c0027573 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 58 d6 01 00       	call   c00285e7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 41 cc 01 00       	call   c0027bf0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ac c5 01 00       	call   c0027573 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 f9 d5 01 00       	call   c00285e7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 e2 cb 01 00       	call   c0027bf0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 4d c5 01 00       	call   c0027573 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 9a d5 01 00       	call   c00285e7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 83 cb 01 00       	call   c0027bf0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ee c4 01 00       	call   c0027573 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 3b d5 01 00       	call   c00285e7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 24 cb 01 00       	call   c0027bf0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 8f c4 01 00       	call   c0027573 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 dc d4 01 00       	call   c00285e7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 c5 ca 01 00       	call   c0027bf0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 30 c4 01 00       	call   c0027573 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 7d d4 01 00       	call   c00285e7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 66 ca 01 00       	call   c0027bf0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 d1 c3 01 00       	call   c0027573 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 db bc 01 00       	call   c0026f08 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 b2 d3 01 00       	call   c00285e7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 9b c9 01 00       	call   c0027bf0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 82 d3 01 00       	call   c00285e7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 f4 c2 01 00       	call   c0027573 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 27 d3 01 00       	call   c00285e7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 10 c9 01 00       	call   c0027bf0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 7b c2 01 00       	call   c0027573 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 c7 d2 01 00       	call   c00285e7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 b0 c8 01 00       	call   c0027bf0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 1b c2 01 00       	call   c0027573 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 67 d2 01 00       	call   c00285e7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 50 c8 01 00       	call   c0027bf0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 bb c1 01 00       	call   c0027573 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 07 d2 01 00       	call   c00285e7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 f0 c7 01 00       	call   c0027bf0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 5b c1 01 00       	call   c0027573 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 a7 d1 01 00       	call   c00285e7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 90 c7 01 00       	call   c0027bf0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 fb c0 01 00       	call   c0027573 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 47 d1 01 00       	call   c00285e7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 30 c7 01 00       	call   c0027bf0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 9b c0 01 00       	call   c0027573 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 e7 d0 01 00       	call   c00285e7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 d0 c6 01 00       	call   c0027bf0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 3b c0 01 00       	call   c0027573 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 87 d0 01 00       	call   c00285e7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 70 c6 01 00       	call   c0027bf0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 db bf 01 00       	call   c0027573 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 80 bf 01 00       	call   c0027573 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 dd c5 01 00       	call   c0027bf0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 99 ce 01 00       	call   c00284c3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 23 bf 01 00       	call   c0027573 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 80 c5 01 00       	call   c0027bf0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 3c ce 01 00       	call   c00284c3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 c6 be 01 00       	call   c0027573 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 23 c5 01 00       	call   c0027bf0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 df cd 01 00       	call   c00284c3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 69 be 01 00       	call   c0027573 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 c6 c4 01 00       	call   c0027bf0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 82 cd 01 00       	call   c00284c3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 0c be 01 00       	call   c0027573 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 69 c4 01 00       	call   c0027bf0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 25 cd 01 00       	call   c00284c3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 af bd 01 00       	call   c0027573 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 0c c4 01 00       	call   c0027bf0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 c8 cc 01 00       	call   c00284c3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 52 bd 01 00       	call   c0027573 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 af c3 01 00       	call   c0027bf0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 6b cc 01 00       	call   c00284c3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 f5 bc 01 00       	call   c0027573 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 52 c3 01 00       	call   c0027bf0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 0e cc 01 00       	call   c00284c3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 0a c3 01 00       	call   c0027bf0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 7a cd 01 00       	jmp    c0028670 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ec c9 01 00       	call   c00284bf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 aa c9 01 00       	call   c00284a1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 41 c7 01 00       	call   c0028253 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 42 ba 01 00       	call   c0027573 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 11 c7 01 00       	call   c0028253 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 78 c3 01 00       	call   c0027ed4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 17 c9 01 00       	call   c00284a1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 1a c9 01 00       	call   c00284bf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ed c8 01 00       	call   c00284bf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 e6 c2 01 00       	call   c0027ed4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 68 ca 01 00       	call   c0028670 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 43 ca 01 00       	call   c0028670 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 1d c6 01 00       	call   c0028253 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 74 bf 01 00       	call   c0027bc4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 53 c8 01 00       	call   c00284bf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ec b8 01 00       	call   c0027573 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 10 bf 01 00       	call   c0027bc4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 aa c9 01 00       	call   c0028670 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ea c1 01 00       	call   c0027ed4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 67 b8 01 00       	call   c0027573 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 93 c4 01 00       	call   c0028253 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 93 b7 01 00       	call   c0027573 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 73 b7 01 00       	call   c0027573 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 43 c4 01 00       	call   c0028253 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 93 c6 01 00       	call   c00284bd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 72 bd 01 00       	call   c0027bc4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ec c7 01 00       	call   c0028650 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 1b c6 01 00       	call   c00284a1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 19 bd 01 00       	call   c0027bc4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 97 c3 01 00       	call   c0028253 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 1a bd 01 00       	call   c0027bf0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 6c c3 01 00       	call   c0028253 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 d3 bf 01 00       	call   c0027ed4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 52 b6 01 00       	call   c0027573 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 1c c3 01 00       	call   c0028253 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 68 c5 01 00       	call   c00284bf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 5d bc 01 00       	call   c0027bf0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 2f bc 01 00       	call   c0027bf0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 68 c2 01 00       	call   c0028253 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 cc be 01 00       	call   c0027ed4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 94 be 01 00       	call   c0027ed4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 13 b5 01 00       	call   c0027573 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 f8 c5 01 00       	call   c0028670 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 d2 c1 01 00       	call   c0028253 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 29 bb 01 00       	call   c0027bc4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 08 c4 01 00       	call   c00284bf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 a0 b4 01 00       	call   c0027573 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 c4 ba 01 00       	call   c0027bc4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 5e c5 01 00       	call   c0028670 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 27 c3 01 00       	call   c00284bf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 e5 c2 01 00       	call   c00284a1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 7c c0 01 00       	call   c0028253 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 7d b3 01 00       	call   c0027573 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 4c c0 01 00       	call   c0028253 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 b3 bc 01 00       	call   c0027ed4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 52 c2 01 00       	call   c00284a1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 55 c2 01 00       	call   c00284bf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 28 c2 01 00       	call   c00284bf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 21 bc 01 00       	call   c0027ed4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 a3 c3 01 00       	call   c0028670 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 7e c3 01 00       	call   c0028670 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 58 bf 01 00       	call   c0028253 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 af b8 01 00       	call   c0027bc4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 8e c1 01 00       	call   c00284bf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 27 b2 01 00       	call   c0027573 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 4b b8 01 00       	call   c0027bc4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 e5 c2 01 00       	call   c0028670 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 25 bb 01 00       	call   c0027ed4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 a2 b1 01 00       	call   c0027573 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 cd bd 01 00       	call   c0028253 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 cd b0 01 00       	call   c0027573 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ad b0 01 00       	call   c0027573 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 7d bd 01 00       	call   c0028253 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 cd bf 01 00       	call   c00284bd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 ab b6 01 00       	call   c0027bc4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 25 c1 01 00       	call   c0028650 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 54 bf 01 00       	call   c00284a1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 51 b6 01 00       	call   c0027bc4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 cf bc 01 00       	call   c0028253 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 52 b6 01 00       	call   c0027bf0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 a4 bc 01 00       	call   c0028253 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 0b b9 01 00       	call   c0027ed4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 8a af 01 00       	call   c0027573 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 54 bc 01 00       	call   c0028253 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 a0 be 01 00       	call   c00284bf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 95 b5 01 00       	call   c0027bf0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 67 b5 01 00       	call   c0027bf0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 9e bb 01 00       	call   c0028253 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 02 b8 01 00       	call   c0027ed4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 cf b7 01 00       	call   c0027ed4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 4e ae 01 00       	call   c0027573 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 33 bf 01 00       	call   c0028670 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 0d bb 01 00       	call   c0028253 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 64 b4 01 00       	call   c0027bc4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 43 bd 01 00       	call   c00284bf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 db ad 01 00       	call   c0027573 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 ff b3 01 00       	call   c0027bc4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 99 be 01 00       	call   c0028670 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 62 bc 01 00       	call   c00284bf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 20 bc 01 00       	call   c00284a1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 b7 b9 01 00       	call   c0028253 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 b8 ac 01 00       	call   c0027573 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 87 b9 01 00       	call   c0028253 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ee b5 01 00       	call   c0027ed4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 8d bb 01 00       	call   c00284a1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 90 bb 01 00       	call   c00284bf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 63 bb 01 00       	call   c00284bf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 5c b5 01 00       	call   c0027ed4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 de bc 01 00       	call   c0028670 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 b9 bc 01 00       	call   c0028670 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 93 b8 01 00       	call   c0028253 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ea b1 01 00       	call   c0027bc4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 c9 ba 01 00       	call   c00284bf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 62 ab 01 00       	call   c0027573 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 86 b1 01 00       	call   c0027bc4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 20 bc 01 00       	call   c0028670 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 60 b4 01 00       	call   c0027ed4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 dd aa 01 00       	call   c0027573 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 08 b7 01 00       	call   c0028253 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 08 aa 01 00       	call   c0027573 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 e8 a9 01 00       	call   c0027573 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 b8 b6 01 00       	call   c0028253 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 08 b9 01 00       	call   c00284bd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 e6 af 01 00       	call   c0027bc4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 60 ba 01 00       	call   c0028650 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 8f b8 01 00       	call   c00284a1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 8c af 01 00       	call   c0027bc4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 0a b6 01 00       	call   c0028253 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 8d af 01 00       	call   c0027bf0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 df b5 01 00       	call   c0028253 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 46 b2 01 00       	call   c0027ed4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 c5 a8 01 00       	call   c0027573 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 8f b5 01 00       	call   c0028253 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 db b7 01 00       	call   c00284bf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 d0 ae 01 00       	call   c0027bf0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 a2 ae 01 00       	call   c0027bf0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 d9 b4 01 00       	call   c0028253 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 3d b1 01 00       	call   c0027ed4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 0a b1 01 00       	call   c0027ed4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 89 a7 01 00       	call   c0027573 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 6e b8 01 00       	call   c0028670 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 48 b4 01 00       	call   c0028253 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 9f ad 01 00       	call   c0027bc4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 7e b6 01 00       	call   c00284bf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 16 a7 01 00       	call   c0027573 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 3a ad 01 00       	call   c0027bc4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 d4 b7 01 00       	call   c0028670 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 9d b5 01 00       	call   c00284bf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 5b b5 01 00       	call   c00284a1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 f2 b2 01 00       	call   c0028253 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 f3 a5 01 00       	call   c0027573 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 c2 b2 01 00       	call   c0028253 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 29 af 01 00       	call   c0027ed4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 c8 b4 01 00       	call   c00284a1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 cb b4 01 00       	call   c00284bf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 9e b4 01 00       	call   c00284bf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 97 ae 01 00       	call   c0027ed4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 19 b6 01 00       	call   c0028670 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 f4 b5 01 00       	call   c0028670 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ce b1 01 00       	call   c0028253 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 25 ab 01 00       	call   c0027bc4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 04 b4 01 00       	call   c00284bf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 9d a4 01 00       	call   c0027573 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 c1 aa 01 00       	call   c0027bc4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 5b b5 01 00       	call   c0028670 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 9b ad 01 00       	call   c0027ed4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 18 a4 01 00       	call   c0027573 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 43 b0 01 00       	call   c0028253 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 43 a3 01 00       	call   c0027573 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 23 a3 01 00       	call   c0027573 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 f3 af 01 00       	call   c0028253 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 43 b2 01 00       	call   c00284bd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 21 a9 01 00       	call   c0027bc4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 9b b3 01 00       	call   c0028650 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ca b1 01 00       	call   c00284a1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 c7 a8 01 00       	call   c0027bc4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 45 af 01 00       	call   c0028253 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 c8 a8 01 00       	call   c0027bf0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 1a af 01 00       	call   c0028253 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 81 ab 01 00       	call   c0027ed4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 00 a2 01 00       	call   c0027573 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ca ae 01 00       	call   c0028253 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 16 b1 01 00       	call   c00284bf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 0b a8 01 00       	call   c0027bf0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 dd a7 01 00       	call   c0027bf0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 14 ae 01 00       	call   c0028253 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 78 aa 01 00       	call   c0027ed4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 45 aa 01 00       	call   c0027ed4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 c4 a0 01 00       	call   c0027573 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 a9 b1 01 00       	call   c0028670 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 83 ad 01 00       	call   c0028253 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 da a6 01 00       	call   c0027bc4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 b9 af 01 00       	call   c00284bf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 51 a0 01 00       	call   c0027573 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 75 a6 01 00       	call   c0027bc4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 0f b1 01 00       	call   c0028670 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 d5 ae 01 00       	call   c00284bf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 93 ae 01 00       	call   c00284a1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 2a ac 01 00       	call   c0028253 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 2b 9f 01 00       	call   c0027573 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 fa ab 01 00       	call   c0028253 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 61 a8 01 00       	call   c0027ed4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 00 ae 01 00       	call   c00284a1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 03 ae 01 00       	call   c00284bf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 d6 ad 01 00       	call   c00284bf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 cf a7 01 00       	call   c0027ed4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 51 af 01 00       	call   c0028670 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 28 af 01 00       	call   c0028670 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 02 ab 01 00       	call   c0028253 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 59 a4 01 00       	call   c0027bc4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 38 ad 01 00       	call   c00284bf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 d1 9d 01 00       	call   c0027573 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 f9 a3 01 00       	call   c0027bc4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 93 ae 01 00       	call   c0028670 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 d4 a6 01 00       	call   c0027ed4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 51 9d 01 00       	call   c0027573 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 7d a9 01 00       	call   c0028253 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 7d 9c 01 00       	call   c0027573 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 5d 9c 01 00       	call   c0027573 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 2d a9 01 00       	call   c0028253 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 61 ab 01 00       	call   c00284a1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 58 a2 01 00       	call   c0027bc4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 d2 ac 01 00       	call   c0028650 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 01 ab 01 00       	call   c00284a1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 fb a1 01 00       	call   c0027bc4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 79 a8 01 00       	call   c0028253 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 fc a1 01 00       	call   c0027bf0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 4e a8 01 00       	call   c0028253 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 b5 a4 01 00       	call   c0027ed4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 34 9b 01 00       	call   c0027573 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 fe a7 01 00       	call   c0028253 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 4a aa 01 00       	call   c00284bf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 3f a1 01 00       	call   c0027bf0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 11 a1 01 00       	call   c0027bf0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 55 a7 01 00       	call   c0028253 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 bc a3 01 00       	call   c0027ed4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 a5 a0 01 00       	call   c0027bf0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 61 a9 01 00       	call   c00284c3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 54 a3 01 00       	call   c0027ed4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 d3 99 01 00       	call   c0027573 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 b8 aa 01 00       	call   c0028670 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 92 a6 01 00       	call   c0028253 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 e9 9f 01 00       	call   c0027bc4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 c8 a8 01 00       	call   c00284bf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 60 99 01 00       	call   c0027573 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 88 9f 01 00       	call   c0027bc4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 22 aa 01 00       	call   c0028670 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd619c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd61a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 dd a6 01 00       	call   c00284bf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 9b a6 01 00       	call   c00284a1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 87 a6 01 00       	call   c00284bf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 f9 a3 01 00       	call   c0028253 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 77 9d 01 00       	call   c0027bf0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 c9 a3 01 00       	call   c0028253 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 cf 96 01 00       	call   c0027573 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 9e a3 01 00       	call   c0028253 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ee a5 01 00       	call   c00284bd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 cf 9c 01 00       	call   c0027bc4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 49 a7 01 00       	call   c0028650 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 78 a5 01 00       	call   c00284a1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 77 9c 01 00       	call   c0027bc4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 f5 a2 01 00       	call   c0028253 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 78 9c 01 00       	call   c0027bf0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ca a2 01 00       	call   c0028253 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 31 9f 01 00       	call   c0027ed4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 b0 95 01 00       	call   c0027573 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 d8 9e 01 00       	call   c0027ed4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 5e 95 01 00       	call   c0027573 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 44 a6 01 00       	call   c0028670 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 1e a2 01 00       	call   c0028253 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 75 9b 01 00       	call   c0027bc4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 54 a4 01 00       	call   c00284bf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ed 94 01 00       	call   c0027573 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 19 9b 01 00       	call   c0027bc4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 b3 a5 01 00       	call   c0028670 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 68 a1 01 00       	call   c0028253 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 e5 9a 01 00       	call   c0027bf0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 36 a1 01 00       	call   c0028253 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 3c 94 01 00       	call   c0027573 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 0c a1 01 00       	call   c0028253 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 60 a3 01 00       	call   c00284c1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 39 9a 01 00       	call   c0027bc4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 b3 a4 01 00       	call   c0028650 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 e2 a2 01 00       	call   c00284a1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 e0 99 01 00       	call   c0027bc4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 5e a0 01 00       	call   c0028253 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 e1 99 01 00       	call   c0027bf0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 33 a0 01 00       	call   c0028253 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 9a 9c 01 00       	call   c0027ed4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 19 93 01 00       	call   c0027573 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 35 9c 01 00       	call   c0027ed4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 b4 92 01 00       	call   c0027573 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 9a a3 01 00       	call   c0028670 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 74 9f 01 00       	call   c0028253 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 cb 98 01 00       	call   c0027bc4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 aa a1 01 00       	call   c00284bf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 43 92 01 00       	call   c0027573 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 6f 98 01 00       	call   c0027bc4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 e0 9e 01 00       	call   c0028253 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 e6 91 01 00       	call   c0027573 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9f 02 c0       	mov    eax,0xc0029f7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9f 02 c0       	mov    eax,0xc0029f8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9f 02 c0       	push   0xc0029fc6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 a8 e4 02 c0       	mov    eax,0xc002e4a8
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9f 02 c0       	push   0xc0029fcf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ec 69 02 c0       	mov    eax,0xc00269ec
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9f 02 c0       	push   0xc0029fd9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 20 67 02 c0       	mov    eax,0xc0026720
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9f 02 c0       	push   0xc0029fe2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ec 6a 02 c0       	mov    eax,0xc0026aec
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9f 02 c0       	push   0xc0029fec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 6c 68 02 c0       	mov    eax,0xc002686c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9f 02 c0       	push   0xc0029ff5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 ac e4 02 c0       	mov    eax,0xc002e4ac
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 a0 02 c0       	push   0xc002a002
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 ad e4 02 c0       	mov    eax,0xc002e4ad
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 ed 5e 00 00       	call   c0014510 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c000e668:	68 0f a0 02 c0       	push   0xc002a00f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 d5 f5 00 00       	call   c001dc4a <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 be f8 00 00       	call   c001df48 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 a6 e7 01 c0       	push   0xc001e7a6
c000e693:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c000e699:	e8 aa f8 00 00       	call   c001df48 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 c8 19 03 c0       	mov    ds:0xc00319c8,eax
c000e6a6:	c6 05 ad e4 02 c0 01 	mov    BYTE PTR ds:0xc002e4ad,0x1
c000e6ad:	e8 75 04 01 00       	call   c001eb27 <Vm::initialise8086()>
c000e6b2:	e8 41 4c 00 00       	call   c00132f8 <Fs::initVFS()>
c000e6b7:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 ed de 00 00       	call   c001c5c0 <Sys::loadSyscalls()>
c000e6d3:	e8 10 be 00 00       	call   c001a4e8 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c a0 02 c0       	push   0xc002a01c
c000e6e2:	68 25 a0 02 c0       	push   0xc002a025
c000e6e7:	e8 22 cb 00 00       	call   c001b20e <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 ec 56 00 00       	call   c0013de0 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 df 5d 00 00       	call   c00144e4 <Device::loadDriversForAll()>
c000e705:	e8 24 b9 00 00       	call   c001a02e <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d a0 02 c0       	push   0xc002a02d
c000e719:	e8 36 f0 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 7c f2 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 78 fb 00 00       	call   c001e2ac <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 a0 02 c0       	push   0xc002a049
c000e749:	50                   	push   eax
c000e74a:	e8 3b 5e 00 00       	call   c001458a <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 c1 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4c1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 d3 7d 01 00       	call   c00266b6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 22 a4 00 00       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 fb a3 00 00       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 d9 a3 00 00       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 b7 a3 00 00       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 c0 e4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e4c0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 c5 a2 00 00       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 a0 a2 00 00       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 3d 7c 01 00       	call   c0026670 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 fa 7b 01 00       	call   c0026650 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 bc a2 00 00       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 a0 02 c0       	push   0xc002a059
c000eaaf:	e8 c0 44 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c a0 02 c0       	push   0xc002a06c
c000ead2:	e8 9d 44 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d a0 02 c0       	push   0xc002a07d
c000eaf5:	e8 7a 44 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e a0 02 c0       	push   0xc002a08e
c000eb18:	e8 57 44 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f a0 02 c0       	push   0xc002a09f
c000eb3b:	e8 34 44 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 a0 02 c0       	push   0xc002a0b0
c000eb5e:	e8 11 44 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 a0 02 c0       	push   0xc002a0c1
c000eb81:	e8 ee 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 a0 02 c0       	push   0xc002a0d2
c000eba4:	e8 cb 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 a0 02 c0       	push   0xc002a0e3
c000ebc7:	e8 a8 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 a0 02 c0       	push   0xc002a0f4
c000ebea:	e8 85 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 a1 02 c0       	push   0xc002a105
c000ec0d:	e8 62 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 a1 02 c0       	push   0xc002a116
c000ec30:	e8 3f 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 a1 02 c0       	push   0xc002a127
c000ec53:	e8 1c 43 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 a1 02 c0       	push   0xc002a138
c000ec76:	e8 f9 42 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 a1 02 c0       	push   0xc002a149
c000ec99:	e8 d6 42 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a a1 02 c0       	push   0xc002a15a
c000ecbc:	e8 b3 42 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b a1 02 c0       	push   0xc002a16b
c000ecdf:	e8 90 42 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c a1 02 c0       	push   0xc002a17c
c000ed02:	e8 6d 42 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d a1 02 c0       	push   0xc002a18d
c000ed21:	e8 4e 42 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 8c bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bb8c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 3d 42 00 00       	jmp    c0012f74 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e a1 02 c0       	push   0xc002a19e
c000ee0a:	e8 12 b8 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 a1 02 c0       	push   0xc002a1a4
c000ee42:	e8 da b7 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 c0 e4 02 c0 04 	test   BYTE PTR ds:0xc002e4c0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 e4 d3 02 c0 	sete   BYTE PTR ds:0xc002d3e4
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 5b 93 00 00       	call   c0018210 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 d6 54 00 00       	call   c001439a <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 04 9f 00 00       	call   c0018df8 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 97 54 00 00       	call   c001439a <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 01 5a 00 00       	call   c0014920 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 67 54 00 00       	call   c001439a <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 f3 f0 00 00       	call   c001e048 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa a1 02 c0       	push   0xc002a1aa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 d1 3f 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb a1 02 c0       	push   0xc002a1bb
c000efc0:	e8 5c b6 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 a1 02 c0       	push   0xc002a1c8
c000efd5:	e8 47 b6 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a1d2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 30 b6 00 00       	jmp    c001a621 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c a2 02 c0       	push   0xc002a20c
c000f086:	e8 e9 3e 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 b2 e4 02 c0       	mov    ds:0xc002e4b2,eax
c000f0c7:	66 89 15 b0 e4 02 c0 	mov    WORD PTR ds:0xc002e4b0,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 3a ec 00 00       	call   c001de18 <unlockScheduler()>
c000f1de:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 c4 94 01 00       	call   c00286f0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 bb 94 01 00       	call   c00286f0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 b8 e4 02 c0 ff 07 	mov    WORD PTR ds:0xc002e4b8,0x7ff
c000f323:	a3 ba e4 02 c0       	mov    ds:0xc002e4ba,eax
c000f328:	0f 01 1d b8 e4 02 c0 	lidtd  ds:0xc002e4b8
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 c9 27 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 10 2e 00 00       	call   c0012430 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 36 1e 00 00       	call   c0011474 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 67 1e 00 00       	call   c00114b4 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 a8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a8
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d d4 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3d4
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 d4 d3 02 c0       	mov    eax,ds:0xc002d3d4
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 a2 02 c0       	push   0xc002a228
c000f6f4:	e8 7b 38 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 d4 d3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d3d4,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 bf 26 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d d4 d3 02 c0    	mov    ebp,DWORD PTR ds:0xc002d3d4
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 f7 2b 00 00       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d d4 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3d4
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 a2 02 c0       	push   0xc002a258
c000f7ad:	e8 6f ae 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d a2 02 c0       	push   0xc002a25d
c000f7c3:	e8 59 ae 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 3d e6 00 00       	call   c001de16 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 2e e6 00 00       	call   c001de18 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 e3 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 23 2c 00 00       	call   c0012430 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 c5 25 00 00       	call   c0011dde <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 c6 28 00 00       	call   c00120ec <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 e0 d3 02 c0       	mov    eax,ds:0xc002d3e0
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 e0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3e0
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 e0 d3 02 c0       	mov    eax,ds:0xc002d3e0
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 53 0c 00 00       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 15 0c 00 00       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 ac 0c 00 00       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 e0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3e0
c000fb49:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d e0 d3 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d3e0,0x8000
c000fba3:	c6 05 40 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e540,0x1
c000fbaa:	c7 05 78 e5 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e578,0xc000fa16
c000fbb4:	c7 05 64 e5 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e564,0xc000f89d
c000fbbe:	c7 05 60 e5 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e560,0xc000f8e8
c000fbc8:	c7 05 6c e5 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e56c,0xc000fa5c
c000fbd2:	c7 05 74 e5 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e574,0xc000f966
c000fbdc:	c7 05 68 e5 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e568,0xc000f9c4
c000fbe6:	c7 05 70 e5 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e570,0xc000f9c5
c000fbf0:	c7 05 7c e5 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e57c,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 93 09 00 00       	call   c00105a0 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 64 a2 02 c0       	push   0xc002a264
c000fc4d:	e8 22 33 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 f3 03 00 00       	call   c001005c <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 94 20 00 00       	call   c0011d02 <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 8d bb 02 c0       	push   0xc002bb8d
c000fc95:	e8 87 a9 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d c0 e4 02 c0    	mov    DWORD PTR ds:0xc002e4c0,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 64 22 00 00       	call   c0011f14 <VAS::VAS()>
c000fcb0:	89 1d 2c e6 02 c0    	mov    DWORD PTR ds:0xc002e62c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 7b a2 02 c0 	mov    DWORD PTR [esp],0xc002a27b
c000fcc2:	e8 ad 32 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 b5 20 00 00       	call   c0011d81 <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 a8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4a8,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 98 a2 02 c0       	push   0xc002a298
c000fcf0:	e8 7f 32 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 b5 24 00 00       	call   c00121c4 <VAS::~VAS()>
c000fd0f:	c7 04 24 ab a2 02 c0 	mov    DWORD PTR [esp],0xc002a2ab
c000fd16:	e8 06 a9 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000fd1b:	83 c4 30             	add    esp,0x30
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba 00 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1b00],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be 00 e5 02 c0       	mov    esi,0xc002e500
c000fd8c:	8d 90 00 e5 02 c0    	lea    edx,[eax-0x3ffd1b00]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 00 e5 02 c0    	lea    eax,[edx-0x3ffd1b00]
c000fdf2:	8d 94 11 00 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1b00]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 d8 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3d8
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 d8 d3 02 c0    	add    eax,DWORD PTR ds:0xc002d3d8
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 d8 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3d8
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 f0 e4 02 c0       	mov    ds:0xc002e4f0,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d f4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4f4
c000fe94:	39 05 ec e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ec,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 ec e4 02 c0       	mov    ds:0xc002e4ec,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 77 0a 00 00       	call   c0010934 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 c6 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a2c6
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 3c a7 00 00       	jmp    c001a621 <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	51                   	push   ecx
c000fee8:	8b 35 e4 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e4e4
c000feee:	89 f3                	mov    ebx,esi
c000fef0:	eb 0a                	jmp    c000fefc <Phys::allocatePage()+0x17>
c000fef2:	89 1d e4 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e4,ebx
c000fef8:	39 de                	cmp    esi,ebx
c000fefa:	74 24                	je     c000ff20 <Phys::allocatePage()+0x3b>
c000fefc:	53                   	push   ebx
c000fefd:	e8 3d ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff02:	5a                   	pop    edx
c000ff03:	84 c0                	test   al,al
c000ff05:	74 77                	je     c000ff7e <Phys::allocatePage()+0x99>
c000ff07:	43                   	inc    ebx
c000ff08:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0e:	75 e2                	jne    c000fef2 <Phys::allocatePage()+0xd>
c000ff10:	31 db                	xor    ebx,ebx
c000ff12:	c7 05 e4 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e4e4,0x0
c000ff1c:	39 de                	cmp    esi,ebx
c000ff1e:	75 dc                	jne    c000fefc <Phys::allocatePage()+0x17>
c000ff20:	83 ec 0c             	sub    esp,0xc
c000ff23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff31:	e8 84 2d 00 00       	call   c0012cba <VAS::scanForEviction()>
c000ff36:	83 c4 10             	add    esp,0x10
c000ff39:	85 c0                	test   eax,eax
c000ff3b:	75 76                	jne    c000ffb3 <Phys::allocatePage()+0xce>
c000ff3d:	83 ec 0c             	sub    esp,0xc
c000ff40:	68 dc a2 02 c0       	push   0xc002a2dc
c000ff45:	e8 2a 30 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c000ff4a:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff51:	e8 cc fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff56:	83 c4 10             	add    esp,0x10
c000ff59:	85 c0                	test   eax,eax
c000ff5b:	75 56                	jne    c000ffb3 <Phys::allocatePage()+0xce>
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	68 ed a2 02 c0       	push   0xc002a2ed
c000ff65:	e8 b7 a6 00 00       	call   c001a621 <Krnl::panic(char const*)>
c000ff6a:	83 c4 10             	add    esp,0x10
c000ff6d:	8b 1d e4 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e4
c000ff73:	53                   	push   ebx
c000ff74:	e8 c6 fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff79:	5a                   	pop    edx
c000ff7a:	84 c0                	test   al,al
c000ff7c:	75 89                	jne    c000ff07 <Phys::allocatePage()+0x22>
c000ff7e:	6a 01                	push   0x1
c000ff80:	53                   	push   ebx
c000ff81:	e8 87 fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff86:	a1 f0 e4 02 c0       	mov    eax,ds:0xc002e4f0
c000ff8b:	59                   	pop    ecx
c000ff8c:	40                   	inc    eax
c000ff8d:	5b                   	pop    ebx
c000ff8e:	a3 f0 e4 02 c0       	mov    ds:0xc002e4f0,eax
c000ff93:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff96:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff99:	c1 e0 02             	shl    eax,0x2
c000ff9c:	99                   	cdq    
c000ff9d:	f7 3d f4 e4 02 c0    	idiv   DWORD PTR ds:0xc002e4f4
c000ffa3:	39 05 ec e4 02 c0    	cmp    DWORD PTR ds:0xc002e4ec,eax
c000ffa9:	75 0c                	jne    c000ffb7 <Phys::allocatePage()+0xd2>
c000ffab:	a1 e4 e4 02 c0       	mov    eax,ds:0xc002e4e4
c000ffb0:	c1 e0 0c             	shl    eax,0xc
c000ffb3:	5a                   	pop    edx
c000ffb4:	5b                   	pop    ebx
c000ffb5:	5e                   	pop    esi
c000ffb6:	c3                   	ret    
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	a3 ec e4 02 c0       	mov    ds:0xc002e4ec,eax
c000ffbf:	50                   	push   eax
c000ffc0:	e8 6f 09 00 00       	call   c0010934 <VgaText::updateRAMUsageDisplay(int)>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	eb e1                	jmp    c000ffab <Phys::allocatePage()+0xc6>

c000ffca <Phys::allocateContiguousPages(int)>:
c000ffca:	57                   	push   edi
c000ffcb:	56                   	push   esi
c000ffcc:	53                   	push   ebx
c000ffcd:	31 db                	xor    ebx,ebx
c000ffcf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffd3:	e8 3e de 00 00       	call   c001de16 <lockScheduler()>
c000ffd8:	85 db                	test   ebx,ebx
c000ffda:	75 11                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x23>
c000ffdc:	e8 04 ff ff ff       	call   c000fee5 <Phys::allocatePage()>
c000ffe1:	83 ff 01             	cmp    edi,0x1
c000ffe4:	89 c6                	mov    esi,eax
c000ffe6:	74 21                	je     c0010009 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe8:	bb 01 00 00 00       	mov    ebx,0x1
c000ffed:	e8 f3 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c000fff2:	89 da                	mov    edx,ebx
c000fff4:	c1 e2 0c             	shl    edx,0xc
c000fff7:	01 f2                	add    edx,esi
c000fff9:	39 c2                	cmp    edx,eax
c000fffb:	74 17                	je     c0010014 <Phys::allocateContiguousPages(int)+0x4a>
c000fffd:	bb 01 00 00 00       	mov    ebx,0x1
c0010002:	89 c6                	mov    esi,eax
c0010004:	83 ff 01             	cmp    edi,0x1
c0010007:	75 e4                	jne    c000ffed <Phys::allocateContiguousPages(int)+0x23>
c0010009:	e8 0a de 00 00       	call   c001de18 <unlockScheduler()>
c001000e:	89 f0                	mov    eax,esi
c0010010:	5b                   	pop    ebx
c0010011:	5e                   	pop    esi
c0010012:	5f                   	pop    edi
c0010013:	c3                   	ret    
c0010014:	43                   	inc    ebx
c0010015:	39 fb                	cmp    ebx,edi
c0010017:	75 bf                	jne    c000ffd8 <Phys::allocateContiguousPages(int)+0xe>
c0010019:	e8 fa dd 00 00       	call   c001de18 <unlockScheduler()>
c001001e:	89 f0                	mov    eax,esi
c0010020:	5b                   	pop    ebx
c0010021:	5e                   	pop    esi
c0010022:	5f                   	pop    edi
c0010023:	c3                   	ret    

c0010024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001002a:	39 1d e8 e4 02 c0    	cmp    DWORD PTR ds:0xc002e4e8,ebx
c0010030:	73 06                	jae    c0010038 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010032:	89 1d e8 e4 02 c0    	mov    DWORD PTR ds:0xc002e4e8,ebx
c0010038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001003c:	c1 eb 0c             	shr    ebx,0xc
c001003f:	c1 e8 0c             	shr    eax,0xc
c0010042:	39 d8                	cmp    eax,ebx
c0010044:	73 13                	jae    c0010059 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010046:	6a 00                	push   0x0
c0010048:	8d 70 01             	lea    esi,[eax+0x1]
c001004b:	50                   	push   eax
c001004c:	e8 bc fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c0010051:	5a                   	pop    edx
c0010052:	89 f0                	mov    eax,esi
c0010054:	59                   	pop    ecx
c0010055:	39 f3                	cmp    ebx,esi
c0010057:	75 ed                	jne    c0010046 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010059:	5b                   	pop    ebx
c001005a:	5e                   	pop    esi
c001005b:	c3                   	ret    

c001005c <Phys::physicalMemorySetup(unsigned int)>:
c001005c:	55                   	push   ebp
c001005d:	57                   	push   edi
c001005e:	56                   	push   esi
c001005f:	53                   	push   ebx
c0010060:	31 db                	xor    ebx,ebx
c0010062:	83 ec 40             	sub    esp,0x40
c0010065:	6a 30                	push   0x30
c0010067:	6a 00                	push   0x0
c0010069:	68 00 e5 02 c0       	push   0xc002e500
c001006e:	e8 05 07 ff ff       	call   c0000778 <memset>
c0010073:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010077:	25 00 f0 ff ff       	and    eax,0xfffff000
c001007c:	05 00 10 00 00       	add    eax,0x1000
c0010081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	83 ec 08             	sub    esp,0x8
c001008b:	6a 01                	push   0x1
c001008d:	53                   	push   ebx
c001008e:	43                   	inc    ebx
c001008f:	e8 79 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001009d:	75 e9                	jne    c0010088 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001009f:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100a6:	66 85 c0             	test   ax,ax
c00100a9:	0f 84 8e 01 00 00    	je     c001023d <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100bf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100d0:	eb 15                	jmp    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100d2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100d6:	83 c3 18             	add    ebx,0x18
c00100d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100dd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100e1:	0f 84 66 01 00 00    	je     c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ed:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100fa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100fd:	01 f0                	add    eax,esi
c00100ff:	55                   	push   ebp
c0010100:	11 fa                	adc    edx,edi
c0010102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010106:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001010a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001010e:	56                   	push   esi
c001010f:	68 28 a3 02 c0       	push   0xc002a328
c0010114:	e8 5b 2e 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0010119:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	09 f8                	or     eax,edi
c0010122:	0f 85 25 01 00 00    	jne    c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010128:	4d                   	dec    ebp
c0010129:	75 a7                	jne    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001012b:	ba 00 00 08 00       	mov    edx,0x80000
c0010130:	89 c1                	mov    ecx,eax
c0010132:	39 f2                	cmp    edx,esi
c0010134:	19 f9                	sbb    ecx,edi
c0010136:	0f 82 a7 00 00 00    	jb     c00101e3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001013c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010140:	89 c1                	mov    ecx,eax
c0010142:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010146:	0f 83 97 00 00 00    	jae    c00101e3 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001014c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010151:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010155:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010159:	39 fa                	cmp    edx,edi
c001015b:	19 e8                	sbb    eax,ebp
c001015d:	0f 82 14 01 00 00    	jb     c0010277 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010163:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010167:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001016b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010171:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010176:	83 d5 ff             	adc    ebp,0xffffffff
c0010179:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001017d:	31 c0                	xor    eax,eax
c001017f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010183:	39 fa                	cmp    edx,edi
c0010185:	89 c1                	mov    ecx,eax
c0010187:	19 e9                	sbb    ecx,ebp
c0010189:	0f 83 43 ff ff ff    	jae    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018f:	be 00 00 08 00       	mov    esi,0x80000
c0010194:	50                   	push   eax
c0010195:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010199:	57                   	push   edi
c001019a:	56                   	push   esi
c001019b:	68 4c a3 02 c0       	push   0xc002a34c
c00101a0:	e8 cf 2d 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00101a5:	5a                   	pop    edx
c00101a6:	59                   	pop    ecx
c00101a7:	57                   	push   edi
c00101a8:	56                   	push   esi
c00101a9:	e8 76 fe ff ff       	call   c0010024 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101ae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101b6:	83 c4 0c             	add    esp,0xc
c00101b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101bd:	03 05 f4 e4 02 c0    	add    eax,DWORD PTR ds:0xc002e4f4
c00101c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101ca:	a3 f4 e4 02 c0       	mov    ds:0xc002e4f4,eax
c00101cf:	52                   	push   edx
c00101d0:	50                   	push   eax
c00101d1:	68 09 a3 02 c0       	push   0xc002a309
c00101d6:	e8 99 2d 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	e9 ef fe ff ff       	jmp    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101e3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ef:	39 ea                	cmp    edx,ebp
c00101f1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101f5:	0f 82 d7 fe ff ff    	jb     c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101fb:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010200:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010204:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010208:	0f 83 c4 fe ff ff    	jae    c00100d2 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001020e:	39 ee                	cmp    esi,ebp
c0010210:	89 f8                	mov    eax,edi
c0010212:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010216:	0f 83 78 ff ff ff    	jae    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010220:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010224:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010228:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001022c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010234:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010238:	e9 57 ff ff ff       	jmp    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001023d:	83 ec 0c             	sub    esp,0xc
c0010240:	68 fb a2 02 c0       	push   0xc002a2fb
c0010245:	e8 d7 a3 00 00       	call   c001a621 <Krnl::panic(char const*)>
c001024a:	83 c4 10             	add    esp,0x10
c001024d:	bb 40 01 00 00       	mov    ebx,0x140
c0010252:	83 ec 08             	sub    esp,0x8
c0010255:	6a 00                	push   0x0
c0010257:	53                   	push   ebx
c0010258:	43                   	inc    ebx
c0010259:	e8 af fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001025e:	ff 05 f4 e4 02 c0    	inc    DWORD PTR ds:0xc002e4f4
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001026d:	75 e3                	jne    c0010252 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001026f:	83 c4 3c             	add    esp,0x3c
c0010272:	5b                   	pop    ebx
c0010273:	5e                   	pop    esi
c0010274:	5f                   	pop    edi
c0010275:	5d                   	pop    ebp
c0010276:	c3                   	ret    
c0010277:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001027f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010287:	e9 d7 fe ff ff       	jmp    c0010163 <Phys::physicalMemorySetup(unsigned int)+0x107>

c001028c <Pipe::isAtty()>:
c001028c:	31 c0                	xor    eax,eax
c001028e:	c3                   	ret    
c001028f:	90                   	nop

c0010290 <Pipe::~Pipe()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	ba b8 a3 02 c0       	mov    edx,0xc002a3b8
c0010298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029c:	89 10                	mov    DWORD PTR [eax],edx
c001029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a2:	83 ec 0c             	sub    esp,0xc
c00102a5:	50                   	push   eax
c00102a6:	e8 37 16 00 00       	call   c00118e2 <UnixFile::~UnixFile()>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	90                   	nop
c00102af:	83 c4 0c             	add    esp,0xc
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <Pipe::~Pipe()>:
c00102b4:	83 ec 0c             	sub    esp,0xc
c00102b7:	83 ec 0c             	sub    esp,0xc
c00102ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102be:	e8 cd ff ff ff       	call   c0010290 <Pipe::~Pipe()>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	83 ec 08             	sub    esp,0x8
c00102c9:	6a 20                	push   0x20
c00102cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cf:	e8 c0 2b 00 00       	call   c0012e94 <operator delete(void*, unsigned long)>
c00102d4:	83 c4 10             	add    esp,0x10
c00102d7:	83 c4 0c             	add    esp,0xc
c00102da:	c3                   	ret    
c00102db:	90                   	nop

c00102dc <Pipe::read(unsigned long long, void*, int*)>:
c00102dc:	55                   	push   ebp
c00102dd:	57                   	push   edi
c00102de:	56                   	push   esi
c00102df:	53                   	push   ebx
c00102e0:	83 ec 1c             	sub    esp,0x1c
c00102e3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102eb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102ef:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102f2:	89 c8                	mov    eax,ecx
c00102f4:	99                   	cdq    
c00102f5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f9:	74 19                	je     c0010314 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102fb:	39 f9                	cmp    ecx,edi
c00102fd:	89 d1                	mov    ecx,edx
c00102ff:	19 f1                	sbb    ecx,esi
c0010301:	73 11                	jae    c0010314 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010303:	e8 0e db 00 00       	call   c001de16 <lockScheduler()>
c0010308:	e8 45 de 00 00       	call   c001e152 <schedule()>
c001030d:	e8 06 db 00 00       	call   c001de18 <unlockScheduler()>
c0010312:	eb db                	jmp    c00102ef <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010314:	39 f8                	cmp    eax,edi
c0010316:	89 d1                	mov    ecx,edx
c0010318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001031c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010320:	19 f1                	sbb    ecx,esi
c0010322:	73 08                	jae    c001032c <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010328:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001032c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001032f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010332:	29 c6                	sub    esi,eax
c0010334:	89 f1                	mov    ecx,esi
c0010336:	c1 f9 1f             	sar    ecx,0x1f
c0010339:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001033d:	89 ca                	mov    edx,ecx
c001033f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010343:	19 d1                	sbb    ecx,edx
c0010345:	73 04                	jae    c001034b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010347:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001034b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001034f:	89 fd                	mov    ebp,edi
c0010351:	29 f5                	sub    ebp,esi
c0010353:	85 f6                	test   esi,esi
c0010355:	74 12                	je     c0010369 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010357:	52                   	push   edx
c0010358:	56                   	push   esi
c0010359:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001035c:	50                   	push   eax
c001035d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010361:	e8 de 03 ff ff       	call   c0000744 <memcpy>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	85 ed                	test   ebp,ebp
c001036b:	74 12                	je     c001037f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001036d:	50                   	push   eax
c001036e:	55                   	push   ebp
c001036f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010372:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010376:	56                   	push   esi
c0010377:	e8 c8 03 ff ff       	call   c0000744 <memcpy>
c001037c:	83 c4 10             	add    esp,0x10
c001037f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010382:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010385:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010388:	99                   	cdq    
c0010389:	89 f7                	mov    edi,esi
c001038b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001038f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010393:	c1 ff 1f             	sar    edi,0x1f
c0010396:	57                   	push   edi
c0010397:	56                   	push   esi
c0010398:	52                   	push   edx
c0010399:	50                   	push   eax
c001039a:	e8 4d 67 01 00       	call   c0026aec <__umoddi3>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103a5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103aa:	75 10                	jne    c00103bc <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	68 75 a3 02 c0       	push   0xc002a375
c00103b4:	e8 68 a2 00 00       	call   c001a621 <Krnl::panic(char const*)>
c00103b9:	83 c4 10             	add    esp,0x10
c00103bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c4:	89 10                	mov    DWORD PTR [eax],edx
c00103c6:	83 c4 1c             	add    esp,0x1c
c00103c9:	31 c0                	xor    eax,eax
c00103cb:	5b                   	pop    ebx
c00103cc:	5e                   	pop    esi
c00103cd:	5f                   	pop    edi
c00103ce:	5d                   	pop    ebp
c00103cf:	c3                   	ret    

c00103d0 <Pipe::write(unsigned long long, void*, int*)>:
c00103d0:	55                   	push   ebp
c00103d1:	57                   	push   edi
c00103d2:	56                   	push   esi
c00103d3:	53                   	push   ebx
c00103d4:	83 ec 1c             	sub    esp,0x1c
c00103d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00103e6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103f0:	89 de                	mov    esi,ebx
c00103f2:	89 df                	mov    edi,ebx
c00103f4:	c1 ff 1f             	sar    edi,0x1f
c00103f7:	01 c6                	add    esi,eax
c00103f9:	89 c8                	mov    eax,ecx
c00103fb:	11 d7                	adc    edi,edx
c00103fd:	99                   	cdq    
c00103fe:	39 f1                	cmp    ecx,esi
c0010400:	89 d0                	mov    eax,edx
c0010402:	19 f8                	sbb    eax,edi
c0010404:	b8 01 00 00 00       	mov    eax,0x1
c0010409:	0f 82 80 00 00 00    	jb     c001048f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001040f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010412:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010415:	01 d8                	add    eax,ebx
c0010417:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001041b:	99                   	cdq    
c001041c:	f7 f9                	idiv   ecx
c001041e:	29 d1                	sub    ecx,edx
c0010420:	89 d7                	mov    edi,edx
c0010422:	89 c8                	mov    eax,ecx
c0010424:	99                   	cdq    
c0010425:	39 ce                	cmp    esi,ecx
c0010427:	19 d3                	sbb    ebx,edx
c0010429:	bb 00 00 00 00       	mov    ebx,0x0
c001042e:	72 04                	jb     c0010434 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010430:	89 f3                	mov    ebx,esi
c0010432:	29 cb                	sub    ebx,ecx
c0010434:	89 f1                	mov    ecx,esi
c0010436:	29 d9                	sub    ecx,ebx
c0010438:	74 1a                	je     c0010454 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001043a:	52                   	push   edx
c001043b:	51                   	push   ecx
c001043c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010444:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010447:	57                   	push   edi
c0010448:	e8 f7 02 ff ff       	call   c0000744 <memcpy>
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010454:	85 db                	test   ebx,ebx
c0010456:	74 12                	je     c001046a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010458:	50                   	push   eax
c0010459:	53                   	push   ebx
c001045a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001045e:	51                   	push   ecx
c001045f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010462:	e8 dd 02 ff ff       	call   c0000744 <memcpy>
c0010467:	83 c4 10             	add    esp,0x10
c001046a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001046d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010472:	75 10                	jne    c0010484 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	68 91 a3 02 c0       	push   0xc002a391
c001047c:	e8 a0 a1 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010488:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001048b:	89 38                	mov    DWORD PTR [eax],edi
c001048d:	31 c0                	xor    eax,eax
c001048f:	83 c4 1c             	add    esp,0x1c
c0010492:	5b                   	pop    ebx
c0010493:	5e                   	pop    esi
c0010494:	5f                   	pop    edi
c0010495:	5d                   	pop    ebp
c0010496:	c3                   	ret    
c0010497:	90                   	nop

c0010498 <Pipe::Pipe(int)>:
c0010498:	83 ec 0c             	sub    esp,0xc
c001049b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049f:	83 ec 08             	sub    esp,0x8
c00104a2:	6a 00                	push   0x0
c00104a4:	50                   	push   eax
c00104a5:	e8 56 12 00 00       	call   c0011700 <UnixFile::UnixFile(int)>
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	ba b8 a3 02 c0       	mov    edx,0xc002a3b8
c00104b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b6:	89 10                	mov    DWORD PTR [eax],edx
c00104b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104dd:	83 ec 0c             	sub    esp,0xc
c00104e0:	50                   	push   eax
c00104e1:	e8 5d f3 ff ff       	call   c000f843 <malloc>
c00104e6:	83 c4 10             	add    esp,0x10
c00104e9:	89 c2                	mov    edx,eax
c00104eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104fa:	90                   	nop
c00104fb:	83 c4 0c             	add    esp,0xc
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <VgaText::isAtty()>:
c0010500:	b0 01                	mov    al,0x1
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <VgaText::~VgaText()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	89 10                	mov    DWORD PTR [eax],edx
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	83 ec 0c             	sub    esp,0xc
c0010519:	50                   	push   eax
c001051a:	e8 c3 13 00 00       	call   c00118e2 <UnixFile::~UnixFile()>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	90                   	nop
c0010523:	83 c4 0c             	add    esp,0xc
c0010526:	c3                   	ret    
c0010527:	90                   	nop

c0010528 <VgaText::~VgaText()>:
c0010528:	83 ec 0c             	sub    esp,0xc
c001052b:	83 ec 0c             	sub    esp,0xc
c001052e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010532:	e8 cd ff ff ff       	call   c0010504 <VgaText::~VgaText()>
c0010537:	83 c4 10             	add    esp,0x10
c001053a:	83 ec 08             	sub    esp,0x8
c001053d:	68 60 12 00 00       	push   0x1260
c0010542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010546:	e8 49 29 00 00       	call   c0012e94 <operator delete(void*, unsigned long)>
c001054b:	83 c4 10             	add    esp,0x10
c001054e:	83 c4 0c             	add    esp,0xc
c0010551:	c3                   	ret    

c0010552 <VgaText::read(unsigned long long, void*, int*)>:
c0010552:	83 ec 10             	sub    esp,0x10
c0010555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010559:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001055d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010561:	e8 bc 5d 00 00       	call   c0016322 <readKeyboard(VgaText*, char*, unsigned long)>
c0010566:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001056a:	89 02                	mov    DWORD PTR [edx],eax
c001056c:	31 c0                	xor    eax,eax
c001056e:	83 c4 1c             	add    esp,0x1c
c0010571:	c3                   	ret    

c0010572 <setTerminalScrollLock(bool)>:
c0010572:	c3                   	ret    

c0010573 <addToTerminalCycle(VgaText*)>:
c0010573:	8b 15 80 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e580
c0010579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001057d:	85 d2                	test   edx,edx
c001057f:	75 0c                	jne    c001058d <addToTerminalCycle(VgaText*)+0x1a>
c0010581:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010587:	a3 80 e5 02 c0       	mov    ds:0xc002e580,eax
c001058c:	c3                   	ret    
c001058d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010593:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010599:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001059f:	c3                   	ret    

c00105a0 <installVgaTextImplementation()>:
c00105a0:	83 ec 10             	sub    esp,0x10
c00105a3:	6a 20                	push   0x20
c00105a5:	6a 00                	push   0x0
c00105a7:	68 60 e5 02 c0       	push   0xc002e560
c00105ac:	e8 c7 01 ff ff       	call   c0000778 <memset>
c00105b1:	83 c4 1c             	add    esp,0x1c
c00105b4:	c3                   	ret    

c00105b5 <scrollTerminalScrollLock(int)>:
c00105b5:	c3                   	ret    

c00105b6 <VgaText::load()>:
c00105b6:	53                   	push   ebx
c00105b7:	31 c0                	xor    eax,eax
c00105b9:	83 ec 58             	sub    esp,0x58
c00105bc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105c0:	89 e2                	mov    edx,esp
c00105c2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105c6:	40                   	inc    eax
c00105c7:	83 f8 50             	cmp    eax,0x50
c00105ca:	75 f6                	jne    c00105c2 <VgaText::load()+0xc>
c00105cc:	31 c0                	xor    eax,eax
c00105ce:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105d5:	84 c9                	test   cl,cl
c00105d7:	74 06                	je     c00105df <VgaText::load()+0x29>
c00105d9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105dc:	40                   	inc    eax
c00105dd:	eb ef                	jmp    c00105ce <VgaText::load()+0x18>
c00105df:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105e5:	85 c0                	test   eax,eax
c00105e7:	74 09                	je     c00105f2 <VgaText::load()+0x3c>
c00105e9:	51                   	push   ecx
c00105ea:	51                   	push   ecx
c00105eb:	52                   	push   edx
c00105ec:	53                   	push   ebx
c00105ed:	ff d0                	call   eax
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f8:	85 c0                	test   eax,eax
c00105fa:	74 09                	je     c0010605 <VgaText::load()+0x4f>
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	53                   	push   ebx
c0010600:	ff d0                	call   eax
c0010602:	83 c4 10             	add    esp,0x10
c0010605:	83 c4 58             	add    esp,0x58
c0010608:	5b                   	pop    ebx
c0010609:	c3                   	ret    

c001060a <VgaText::updateCursor()>:
c001060a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060e:	39 05 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,eax
c0010614:	75 0c                	jne    c0010622 <VgaText::updateCursor()+0x18>
c0010616:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001061c:	85 c0                	test   eax,eax
c001061e:	74 02                	je     c0010622 <VgaText::updateCursor()+0x18>
c0010620:	ff e0                	jmp    eax
c0010622:	c3                   	ret    
c0010623:	90                   	nop

c0010624 <VgaText::showCursor(bool)>:
c0010624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001062c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010632:	c3                   	ret    
c0010633:	90                   	nop

c0010634 <VgaText::disableBlink(bool)>:
c0010634:	56                   	push   esi
c0010635:	53                   	push   ebx
c0010636:	51                   	push   ecx
c0010637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063f:	39 1d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ebx
c0010645:	75 18                	jne    c001065f <VgaText::disableBlink(bool)+0x2b>
c0010647:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001064d:	85 c0                	test   eax,eax
c001064f:	74 0e                	je     c001065f <VgaText::disableBlink(bool)+0x2b>
c0010651:	89 f1                	mov    ecx,esi
c0010653:	52                   	push   edx
c0010654:	52                   	push   edx
c0010655:	0f b6 d1             	movzx  edx,cl
c0010658:	52                   	push   edx
c0010659:	53                   	push   ebx
c001065a:	ff d0                	call   eax
c001065c:	83 c4 10             	add    esp,0x10
c001065f:	89 f0                	mov    eax,esi
c0010661:	83 f0 01             	xor    eax,0x1
c0010664:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001066a:	58                   	pop    eax
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	c3                   	ret    

c001066e <VgaText::doANSI_SGR(int)>:
c001066e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010676:	85 d2                	test   edx,edx
c0010678:	75 14                	jne    c001068e <VgaText::doANSI_SGR(int)+0x20>
c001067a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010680:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010686:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001068c:	eb 65                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c001068e:	83 fa 07             	cmp    edx,0x7
c0010691:	75 14                	jne    c00106a7 <VgaText::doANSI_SGR(int)+0x39>
c0010693:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010699:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001069f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106a5:	eb 4c                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c00106a7:	83 fa 1b             	cmp    edx,0x1b
c00106aa:	74 ce                	je     c001067a <VgaText::doANSI_SGR(int)+0xc>
c00106ac:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106af:	83 f9 07             	cmp    ecx,0x7
c00106b2:	77 09                	ja     c00106bd <VgaText::doANSI_SGR(int)+0x4f>
c00106b4:	8b 14 8d 00 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c00]
c00106bb:	eb 20                	jmp    c00106dd <VgaText::doANSI_SGR(int)+0x6f>
c00106bd:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106c0:	83 f9 07             	cmp    ecx,0x7
c00106c3:	77 09                	ja     c00106ce <VgaText::doANSI_SGR(int)+0x60>
c00106c5:	8b 14 8d 00 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2c00]
c00106cc:	eb 25                	jmp    c00106f3 <VgaText::doANSI_SGR(int)+0x85>
c00106ce:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106d1:	83 f9 07             	cmp    ecx,0x7
c00106d4:	77 0e                	ja     c00106e4 <VgaText::doANSI_SGR(int)+0x76>
c00106d6:	8b 14 95 b8 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d48]
c00106dd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e3:	c3                   	ret    
c00106e4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106e7:	83 f9 07             	cmp    ecx,0x7
c00106ea:	77 0d                	ja     c00106f9 <VgaText::doANSI_SGR(int)+0x8b>
c00106ec:	8b 14 95 90 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d70]
c00106f3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f9:	c3                   	ret    

c00106fa <VgaText::setDefaultBgColour(VgaColour)>:
c00106fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010702:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010708:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001070e:	c3                   	ret    
c001070f:	90                   	nop

c0010710 <VgaText::setDefaultFgColour(VgaColour)>:
c0010710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010718:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001071e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010724:	c3                   	ret    
c0010725:	90                   	nop

c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010726:	53                   	push   ebx
c0010727:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001072b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001072f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010733:	51                   	push   ecx
c0010734:	e8 c1 ff ff ff       	call   c00106fa <VgaText::setDefaultBgColour(VgaColour)>
c0010739:	58                   	pop    eax
c001073a:	5a                   	pop    edx
c001073b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001073f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010743:	5b                   	pop    ebx
c0010744:	eb ca                	jmp    c0010710 <VgaText::setDefaultFgColour(VgaColour)>

c0010746 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010746:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001074a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001074f:	83 e0 0f             	and    eax,0xf
c0010752:	c1 e2 04             	shl    edx,0x4
c0010755:	09 d0                	or     eax,edx
c0010757:	c3                   	ret    

c0010758 <VgaText::scrollScreen()>:
c0010758:	57                   	push   edi
c0010759:	56                   	push   esi
c001075a:	be 01 00 00 00       	mov    esi,0x1
c001075f:	53                   	push   ebx
c0010760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010764:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001076a:	31 ff                	xor    edi,edi
c001076c:	01 d9                	add    ecx,ebx
c001076e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010771:	83 fe 17             	cmp    esi,0x17
c0010774:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001077a:	75 28                	jne    c00107a4 <VgaText::scrollScreen()+0x4c>
c001077c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010782:	74 1c                	je     c00107a0 <VgaText::scrollScreen()+0x48>
c0010784:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001078b:	50                   	push   eax
c001078c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010793:	50                   	push   eax
c0010794:	e8 ad ff ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010799:	5a                   	pop    edx
c001079a:	5a                   	pop    edx
c001079b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001079e:	eb 04                	jmp    c00107a4 <VgaText::scrollScreen()+0x4c>
c00107a0:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107a4:	47                   	inc    edi
c00107a5:	41                   	inc    ecx
c00107a6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107ac:	75 c0                	jne    c001076e <VgaText::scrollScreen()+0x16>
c00107ae:	46                   	inc    esi
c00107af:	83 fe 18             	cmp    esi,0x18
c00107b2:	75 b0                	jne    c0010764 <VgaText::scrollScreen()+0xc>
c00107b4:	39 1d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ebx
c00107ba:	75 24                	jne    c00107e0 <VgaText::scrollScreen()+0x88>
c00107bc:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107c3:	74 08                	je     c00107cd <VgaText::scrollScreen()+0x75>
c00107c5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107cb:	eb 13                	jmp    c00107e0 <VgaText::scrollScreen()+0x88>
c00107cd:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107d3:	85 c0                	test   eax,eax
c00107d5:	74 09                	je     c00107e0 <VgaText::scrollScreen()+0x88>
c00107d7:	83 ec 0c             	sub    esp,0xc
c00107da:	53                   	push   ebx
c00107db:	ff d0                	call   eax
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107e4:	5b                   	pop    ebx
c00107e5:	5e                   	pop    esi
c00107e6:	5f                   	pop    edi
c00107e7:	e9 1e fe ff ff       	jmp    c001060a <VgaText::updateCursor()>

c00107ec <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107f1:	c1 e0 08             	shl    eax,0x8
c00107f4:	89 c2                	mov    edx,eax
c00107f6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107fb:	09 d0                	or     eax,edx
c00107fd:	c3                   	ret    

c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107fe:	53                   	push   ebx
c00107ff:	83 ec 08             	sub    esp,0x8
c0010802:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010806:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001080b:	50                   	push   eax
c001080c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010811:	50                   	push   eax
c0010812:	e8 2f ff ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010817:	5a                   	pop    edx
c0010818:	0f b6 c0             	movzx  eax,al
c001081b:	5b                   	pop    ebx
c001081c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010821:	50                   	push   eax
c0010822:	53                   	push   ebx
c0010823:	e8 c4 ff ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010828:	5a                   	pop    edx
c0010829:	5a                   	pop    edx
c001082a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010830:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010834:	0f b7 d2             	movzx  edx,dx
c0010837:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001083c:	39 0d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ecx
c0010842:	75 14                	jne    c0010858 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010844:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001084a:	85 c0                	test   eax,eax
c001084c:	74 0a                	je     c0010858 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010852:	83 c4 08             	add    esp,0x8
c0010855:	5b                   	pop    ebx
c0010856:	ff e0                	jmp    eax
c0010858:	83 c4 08             	add    esp,0x8
c001085b:	5b                   	pop    ebx
c001085c:	c3                   	ret    
c001085d:	90                   	nop

c001085e <VgaText::getCursorX()>:
c001085e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010862:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010868:	c3                   	ret    
c0010869:	90                   	nop

c001086a <VgaText::getCursorY()>:
c001086a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010874:	c3                   	ret    
c0010875:	90                   	nop

c0010876 <VgaText::setCursor(int, int)>:
c0010876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001087a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001087e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010888:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001088e:	e9 77 fd ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010893:	90                   	nop

c0010894 <VgaText::setCursorX(int)>:
c0010894:	83 ec 10             	sub    esp,0x10
c0010897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001089b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a5:	50                   	push   eax
c00108a6:	e8 cb ff ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00108ab:	83 c4 1c             	add    esp,0x1c
c00108ae:	c3                   	ret    
c00108af:	90                   	nop

c00108b0 <VgaText::setCursorY(int)>:
c00108b0:	83 ec 10             	sub    esp,0x10
c00108b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108bb:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108c1:	50                   	push   eax
c00108c2:	e8 af ff ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00108c7:	83 c4 1c             	add    esp,0x1c
c00108ca:	c3                   	ret    
c00108cb:	90                   	nop

c00108cc <VgaText::incrementCursor(bool)>:
c00108cc:	56                   	push   esi
c00108cd:	53                   	push   ebx
c00108ce:	51                   	push   ecx
c00108cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108d7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108dd:	40                   	inc    eax
c00108de:	83 f8 50             	cmp    eax,0x50
c00108e1:	74 08                	je     c00108eb <VgaText::incrementCursor(bool)+0x1f>
c00108e3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e9:	eb 33                	jmp    c001091e <VgaText::incrementCursor(bool)+0x52>
c00108eb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108f1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108fb:	8d 50 01             	lea    edx,[eax+0x1]
c00108fe:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010904:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001090a:	75 12                	jne    c001091e <VgaText::incrementCursor(bool)+0x52>
c001090c:	83 ec 0c             	sub    esp,0xc
c001090f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010915:	53                   	push   ebx
c0010916:	e8 3d fe ff ff       	call   c0010758 <VgaText::scrollScreen()>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	89 f0                	mov    eax,esi
c0010920:	84 c0                	test   al,al
c0010922:	74 0c                	je     c0010930 <VgaText::incrementCursor(bool)+0x64>
c0010924:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010928:	5a                   	pop    edx
c0010929:	5b                   	pop    ebx
c001092a:	5e                   	pop    esi
c001092b:	e9 da fc ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010930:	58                   	pop    eax
c0010931:	5b                   	pop    ebx
c0010932:	5e                   	pop    esi
c0010933:	c3                   	ret    

c0010934 <VgaText::updateRAMUsageDisplay(int)>:
c0010934:	56                   	push   esi
c0010935:	8b 35 e0 d3 02 c0    	mov    esi,DWORD PTR ds:0xc002d3e0
c001093b:	53                   	push   ebx
c001093c:	bb 0a 00 00 00       	mov    ebx,0xa
c0010941:	6a 0f                	push   0xf
c0010943:	6a 00                	push   0x0
c0010945:	e8 fc fd ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c001094a:	5a                   	pop    edx
c001094b:	59                   	pop    ecx
c001094c:	0f b6 c8             	movzx  ecx,al
c001094f:	51                   	push   ecx
c0010950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010954:	99                   	cdq    
c0010955:	f7 fb                	idiv   ebx
c0010957:	89 d3                	mov    ebx,edx
c0010959:	83 c0 30             	add    eax,0x30
c001095c:	83 c3 30             	add    ebx,0x30
c001095f:	0f be c0             	movsx  eax,al
c0010962:	0f b6 db             	movzx  ebx,bl
c0010965:	50                   	push   eax
c0010966:	e8 81 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001096b:	5a                   	pop    edx
c001096c:	5a                   	pop    edx
c001096d:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010974:	51                   	push   ecx
c0010975:	53                   	push   ebx
c0010976:	e8 71 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001097b:	5b                   	pop    ebx
c001097c:	5a                   	pop    edx
c001097d:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010984:	51                   	push   ecx
c0010985:	6a 25                	push   0x25
c0010987:	e8 60 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c001098c:	59                   	pop    ecx
c001098d:	5b                   	pop    ebx
c001098e:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010995:	5b                   	pop    ebx
c0010996:	5e                   	pop    esi
c0010997:	c3                   	ret    

c0010998 <VgaText::updateDiskUsage()>:
c0010998:	55                   	push   ebp
c0010999:	bd 10 27 00 00       	mov    ebp,0x2710
c001099e:	57                   	push   edi
c001099f:	8b 3d e0 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d3e0
c00109a5:	56                   	push   esi
c00109a6:	53                   	push   ebx
c00109a7:	6a 0f                	push   0xf
c00109a9:	6a 00                	push   0x0
c00109ab:	e8 96 fd ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c00109b0:	5a                   	pop    edx
c00109b1:	0f b6 d8             	movzx  ebx,al
c00109b4:	59                   	pop    ecx
c00109b5:	8b 35 08 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032808
c00109bb:	53                   	push   ebx
c00109bc:	b9 0a 00 00 00       	mov    ecx,0xa
c00109c1:	89 f0                	mov    eax,esi
c00109c3:	99                   	cdq    
c00109c4:	f7 fd                	idiv   ebp
c00109c6:	99                   	cdq    
c00109c7:	f7 f9                	idiv   ecx
c00109c9:	8d 42 30             	lea    eax,[edx+0x30]
c00109cc:	0f b6 c0             	movzx  eax,al
c00109cf:	50                   	push   eax
c00109d0:	e8 17 fe ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c00109d5:	5d                   	pop    ebp
c00109d6:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109db:	5a                   	pop    edx
c00109dc:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109e0:	53                   	push   ebx
c00109e1:	89 f0                	mov    eax,esi
c00109e3:	99                   	cdq    
c00109e4:	f7 fd                	idiv   ebp
c00109e6:	99                   	cdq    
c00109e7:	f7 f9                	idiv   ecx
c00109e9:	8d 42 30             	lea    eax,[edx+0x30]
c00109ec:	0f b6 c0             	movzx  eax,al
c00109ef:	50                   	push   eax
c00109f0:	e8 f7 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c00109f5:	5d                   	pop    ebp
c00109f6:	bd 64 00 00 00       	mov    ebp,0x64
c00109fb:	5a                   	pop    edx
c00109fc:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a03:	53                   	push   ebx
c0010a04:	89 f0                	mov    eax,esi
c0010a06:	99                   	cdq    
c0010a07:	f7 fd                	idiv   ebp
c0010a09:	99                   	cdq    
c0010a0a:	f7 f9                	idiv   ecx
c0010a0c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0f:	0f b6 c0             	movzx  eax,al
c0010a12:	50                   	push   eax
c0010a13:	e8 d4 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a18:	5d                   	pop    ebp
c0010a19:	5a                   	pop    edx
c0010a1a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a21:	53                   	push   ebx
c0010a22:	89 f0                	mov    eax,esi
c0010a24:	99                   	cdq    
c0010a25:	f7 f9                	idiv   ecx
c0010a27:	89 d6                	mov    esi,edx
c0010a29:	99                   	cdq    
c0010a2a:	f7 f9                	idiv   ecx
c0010a2c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2f:	0f b6 c0             	movzx  eax,al
c0010a32:	50                   	push   eax
c0010a33:	e8 b4 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a38:	5d                   	pop    ebp
c0010a39:	5a                   	pop    edx
c0010a3a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a41:	53                   	push   ebx
c0010a42:	8d 46 30             	lea    eax,[esi+0x30]
c0010a45:	0f b6 f0             	movzx  esi,al
c0010a48:	56                   	push   esi
c0010a49:	e8 9e fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4e:	5e                   	pop    esi
c0010a4f:	8b 35 04 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032804
c0010a55:	5d                   	pop    ebp
c0010a56:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a5d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a62:	53                   	push   ebx
c0010a63:	89 f0                	mov    eax,esi
c0010a65:	99                   	cdq    
c0010a66:	f7 fd                	idiv   ebp
c0010a68:	99                   	cdq    
c0010a69:	f7 f9                	idiv   ecx
c0010a6b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6e:	0f b6 c0             	movzx  eax,al
c0010a71:	50                   	push   eax
c0010a72:	e8 75 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a77:	5a                   	pop    edx
c0010a78:	5d                   	pop    ebp
c0010a79:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a80:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a85:	53                   	push   ebx
c0010a86:	89 f0                	mov    eax,esi
c0010a88:	99                   	cdq    
c0010a89:	f7 fd                	idiv   ebp
c0010a8b:	99                   	cdq    
c0010a8c:	f7 f9                	idiv   ecx
c0010a8e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	50                   	push   eax
c0010a95:	e8 52 fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9a:	5a                   	pop    edx
c0010a9b:	5d                   	pop    ebp
c0010a9c:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010aa3:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa8:	53                   	push   ebx
c0010aa9:	89 f0                	mov    eax,esi
c0010aab:	99                   	cdq    
c0010aac:	f7 fd                	idiv   ebp
c0010aae:	99                   	cdq    
c0010aaf:	f7 f9                	idiv   ecx
c0010ab1:	83 c2 30             	add    edx,0x30
c0010ab4:	0f b6 d2             	movzx  edx,dl
c0010ab7:	52                   	push   edx
c0010ab8:	e8 2f fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010abd:	5a                   	pop    edx
c0010abe:	5d                   	pop    ebp
c0010abf:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ac6:	53                   	push   ebx
c0010ac7:	89 f0                	mov    eax,esi
c0010ac9:	99                   	cdq    
c0010aca:	f7 f9                	idiv   ecx
c0010acc:	89 d6                	mov    esi,edx
c0010ace:	99                   	cdq    
c0010acf:	f7 f9                	idiv   ecx
c0010ad1:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad4:	0f b6 c0             	movzx  eax,al
c0010ad7:	50                   	push   eax
c0010ad8:	e8 0f fd ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010add:	5a                   	pop    edx
c0010ade:	59                   	pop    ecx
c0010adf:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ae6:	53                   	push   ebx
c0010ae7:	8d 46 30             	lea    eax,[esi+0x30]
c0010aea:	0f b6 f0             	movzx  esi,al
c0010aed:	56                   	push   esi
c0010aee:	e8 f9 fc ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010af3:	5b                   	pop    ebx
c0010af4:	5e                   	pop    esi
c0010af5:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010afc:	5b                   	pop    ebx
c0010afd:	5e                   	pop    esi
c0010afe:	5f                   	pop    edi
c0010aff:	5d                   	pop    ebp
c0010b00:	c3                   	ret    
c0010b01:	90                   	nop

c0010b02 <VgaText::updateTitle()>:
c0010b02:	53                   	push   ebx
c0010b03:	31 c0                	xor    eax,eax
c0010b05:	83 ec 58             	sub    esp,0x58
c0010b08:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b0c:	89 e1                	mov    ecx,esp
c0010b0e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b12:	40                   	inc    eax
c0010b13:	83 f8 50             	cmp    eax,0x50
c0010b16:	75 f6                	jne    c0010b0e <VgaText::updateTitle()+0xc>
c0010b18:	31 c0                	xor    eax,eax
c0010b1a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b21:	84 db                	test   bl,bl
c0010b23:	74 06                	je     c0010b2b <VgaText::updateTitle()+0x29>
c0010b25:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b28:	40                   	inc    eax
c0010b29:	eb ef                	jmp    c0010b1a <VgaText::updateTitle()+0x18>
c0010b2b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b31:	85 c0                	test   eax,eax
c0010b33:	74 09                	je     c0010b3e <VgaText::updateTitle()+0x3c>
c0010b35:	53                   	push   ebx
c0010b36:	53                   	push   ebx
c0010b37:	51                   	push   ecx
c0010b38:	52                   	push   edx
c0010b39:	ff d0                	call   eax
c0010b3b:	83 c4 10             	add    esp,0x10
c0010b3e:	e8 55 fe ff ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0010b43:	83 c4 58             	add    esp,0x58
c0010b46:	5b                   	pop    ebx
c0010b47:	c3                   	ret    

c0010b48 <VgaText::setTitleTextColour(VgaColour)>:
c0010b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b50:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b56:	eb aa                	jmp    c0010b02 <VgaText::updateTitle()>

c0010b58 <VgaText::setTitleColour(VgaColour)>:
c0010b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b60:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b66:	eb 9a                	jmp    c0010b02 <VgaText::updateTitle()>

c0010b68 <VgaText::setTitle(char*)>:
c0010b68:	53                   	push   ebx
c0010b69:	83 ec 10             	sub    esp,0x10
c0010b6c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b74:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b7a:	50                   	push   eax
c0010b7b:	e8 b4 fc fe ff       	call   c0000834 <strcpy>
c0010b80:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b84:	83 c4 18             	add    esp,0x18
c0010b87:	5b                   	pop    ebx
c0010b88:	e9 75 ff ff ff       	jmp    c0010b02 <VgaText::updateTitle()>
c0010b8d:	90                   	nop

c0010b8e <VgaText::decrementCursor(bool)>:
c0010b8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b96:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b9c:	85 c0                	test   eax,eax
c0010b9e:	74 07                	je     c0010ba7 <VgaText::decrementCursor(bool)+0x19>
c0010ba0:	48                   	dec    eax
c0010ba1:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010ba7:	84 c9                	test   cl,cl
c0010ba9:	74 09                	je     c0010bb4 <VgaText::decrementCursor(bool)+0x26>
c0010bab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010baf:	e9 56 fa ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010bb4:	c3                   	ret    
c0010bb5:	90                   	nop

c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bb6:	53                   	push   ebx
c0010bb7:	83 ec 08             	sub    esp,0x8
c0010bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bc6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bca:	3c 07                	cmp    al,0x7
c0010bcc:	75 2a                	jne    c0010bf8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bce:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0010bd3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bdb:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010be3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010beb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bef:	83 c4 08             	add    esp,0x8
c0010bf2:	5b                   	pop    ebx
c0010bf3:	e9 7a 31 00 00       	jmp    c0013d72 <Buzzer::beep(int, int, bool)>
c0010bf8:	3c 0d                	cmp    al,0xd
c0010bfa:	75 0c                	jne    c0010c08 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bfc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c06:	eb 3b                	jmp    c0010c43 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c08:	3c 0a                	cmp    al,0xa
c0010c0a:	75 40                	jne    c0010c4c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c0c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c12:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c1c:	8d 50 01             	lea    edx,[eax+0x1]
c0010c1f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c25:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c2b:	75 12                	jne    c0010c3f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c2d:	83 ec 0c             	sub    esp,0xc
c0010c30:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c36:	53                   	push   ebx
c0010c37:	e8 1c fb ff ff       	call   c0010758 <VgaText::scrollScreen()>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c43:	83 c4 08             	add    esp,0x8
c0010c46:	5b                   	pop    ebx
c0010c47:	e9 be f9 ff ff       	jmp    c001060a <VgaText::updateCursor()>
c0010c4c:	3c 08                	cmp    al,0x8
c0010c4e:	75 31                	jne    c0010c81 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c50:	50                   	push   eax
c0010c51:	50                   	push   eax
c0010c52:	6a 01                	push   0x1
c0010c54:	53                   	push   ebx
c0010c55:	e8 34 ff ff ff       	call   c0010b8e <VgaText::decrementCursor(bool)>
c0010c5a:	5a                   	pop    edx
c0010c5b:	59                   	pop    ecx
c0010c5c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c62:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c68:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c6e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c74:	6a 20                	push   0x20
c0010c76:	53                   	push   ebx
c0010c77:	e8 82 fb ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7c:	83 c4 28             	add    esp,0x28
c0010c7f:	5b                   	pop    ebx
c0010c80:	c3                   	ret    
c0010c81:	83 ec 08             	sub    esp,0x8
c0010c84:	0f be c0             	movsx  eax,al
c0010c87:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c8d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c93:	51                   	push   ecx
c0010c94:	52                   	push   edx
c0010c95:	50                   	push   eax
c0010c96:	53                   	push   ebx
c0010c97:	e8 62 fb ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c9c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010ca0:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca8:	83 c4 28             	add    esp,0x28
c0010cab:	5b                   	pop    ebx
c0010cac:	e9 1b fc ff ff       	jmp    c00108cc <VgaText::incrementCursor(bool)>
c0010cb1:	90                   	nop

c0010cb2 <VgaText::isShowingCursor()>:
c0010cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb6:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cbc:	c3                   	ret    
c0010cbd:	90                   	nop

c0010cbe <VgaText::isBlinkDisabled()>:
c0010cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cc2:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc8:	83 f0 01             	xor    eax,0x1
c0010ccb:	c3                   	ret    

c0010ccc <VgaText::setCursorHeight(int)>:
c0010ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd4:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cda:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce5:	e9 3a f9 ff ff       	jmp    c0010624 <VgaText::showCursor(bool)>

c0010cea <VgaText::getCursorHeight()>:
c0010cea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cee:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cf4:	c3                   	ret    

c0010cf5 <setActiveTerminal(VgaText*)>:
c0010cf5:	53                   	push   ebx
c0010cf6:	83 ec 08             	sub    esp,0x8
c0010cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cfd:	85 db                	test   ebx,ebx
c0010cff:	75 11                	jne    c0010d12 <setActiveTerminal(VgaText*)+0x1d>
c0010d01:	c7 44 24 10 cc a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a3cc
c0010d09:	83 c4 08             	add    esp,0x8
c0010d0c:	5b                   	pop    ebx
c0010d0d:	e9 0f 99 00 00       	jmp    c001a621 <Krnl::panic(char const*)>
c0010d12:	50                   	push   eax
c0010d13:	50                   	push   eax
c0010d14:	53                   	push   ebx
c0010d15:	68 da a3 02 c0       	push   0xc002a3da
c0010d1a:	e8 55 22 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0010d1f:	a1 84 e5 02 c0       	mov    eax,ds:0xc002e584
c0010d24:	83 c4 10             	add    esp,0x10
c0010d27:	85 c0                	test   eax,eax
c0010d29:	74 0c                	je     c0010d37 <setActiveTerminal(VgaText*)+0x42>
c0010d2b:	83 ec 0c             	sub    esp,0xc
c0010d2e:	50                   	push   eax
c0010d2f:	e8 d6 f8 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	89 1d 84 e5 02 c0    	mov    DWORD PTR ds:0xc002e584,ebx
c0010d3d:	51                   	push   ecx
c0010d3e:	51                   	push   ecx
c0010d3f:	53                   	push   ebx
c0010d40:	68 f2 a3 02 c0       	push   0xc002a3f2
c0010d45:	e8 2a 22 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0010d4a:	83 c4 0c             	add    esp,0xc
c0010d4d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d53:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d59:	53                   	push   ebx
c0010d5a:	e8 17 fb ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0010d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d62:	e8 57 ff ff ff       	call   c0010cbe <VgaText::isBlinkDisabled()>
c0010d67:	5a                   	pop    edx
c0010d68:	0f b6 c0             	movzx  eax,al
c0010d6b:	59                   	pop    ecx
c0010d6c:	50                   	push   eax
c0010d6d:	53                   	push   ebx
c0010d6e:	e8 c1 f8 ff ff       	call   c0010634 <VgaText::disableBlink(bool)>
c0010d73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d76:	e8 6f ff ff ff       	call   c0010cea <VgaText::getCursorHeight()>
c0010d7b:	5a                   	pop    edx
c0010d7c:	59                   	pop    ecx
c0010d7d:	50                   	push   eax
c0010d7e:	53                   	push   ebx
c0010d7f:	e8 48 ff ff ff       	call   c0010ccc <VgaText::setCursorHeight(int)>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d8e:	75 0a                	jne    c0010d9a <setActiveTerminal(VgaText*)+0xa5>
c0010d90:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d9e:	83 c4 08             	add    esp,0x8
c0010da1:	5b                   	pop    ebx
c0010da2:	e9 0f f8 ff ff       	jmp    c00105b6 <VgaText::load()>

c0010da7 <doTerminalCycle()>:
c0010da7:	83 ec 18             	sub    esp,0x18
c0010daa:	a1 80 e5 02 c0       	mov    eax,ds:0xc002e580
c0010daf:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010db5:	50                   	push   eax
c0010db6:	a3 80 e5 02 c0       	mov    ds:0xc002e580,eax
c0010dbb:	e8 35 ff ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	c3                   	ret    

c0010dc4 <VgaText::doUpdate()>:
c0010dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc8:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dce:	85 c0                	test   eax,eax
c0010dd0:	74 02                	je     c0010dd4 <VgaText::doUpdate()+0x10>
c0010dd2:	ff e0                	jmp    eax
c0010dd4:	c3                   	ret    
c0010dd5:	90                   	nop

c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dd6:	55                   	push   ebp
c0010dd7:	57                   	push   edi
c0010dd8:	56                   	push   esi
c0010dd9:	53                   	push   ebx
c0010dda:	83 ec 1c             	sub    esp,0x1c
c0010ddd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010de1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010ded:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010df0:	50                   	push   eax
c0010df1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df6:	50                   	push   eax
c0010df7:	e8 4a f9 ff ff       	call   c0010746 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dfc:	59                   	pop    ecx
c0010dfd:	0f b6 c0             	movzx  eax,al
c0010e00:	5b                   	pop    ebx
c0010e01:	31 c9                	xor    ecx,ecx
c0010e03:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e0f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e19:	0f b7 db             	movzx  ebx,bx
c0010e1c:	01 db                	add    ebx,ebx
c0010e1e:	01 fb                	add    ebx,edi
c0010e20:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e23:	84 c0                	test   al,al
c0010e25:	0f 84 38 01 00 00    	je     c0010f63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e2b:	3c 0d                	cmp    al,0xd
c0010e2d:	75 0f                	jne    c0010e3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e2f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e39:	e9 1f 01 00 00       	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e3e:	3c 0a                	cmp    al,0xa
c0010e40:	75 5b                	jne    c0010e9d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e42:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e48:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e52:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e55:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e5b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e61:	75 12                	jne    c0010e75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e63:	83 ec 0c             	sub    esp,0xc
c0010e66:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e6c:	55                   	push   ebp
c0010e6d:	e8 e6 f8 ff ff       	call   c0010758 <VgaText::scrollScreen()>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	55                   	push   ebp
c0010e79:	e8 8c f7 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010e7e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e86:	83 c4 10             	add    esp,0x10
c0010e89:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e8f:	31 c9                	xor    ecx,ecx
c0010e91:	0f b7 db             	movzx  ebx,bx
c0010e94:	01 db                	add    ebx,ebx
c0010e96:	01 fb                	add    ebx,edi
c0010e98:	e9 c0 00 00 00       	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9d:	3c 08                	cmp    al,0x8
c0010e9f:	75 4e                	jne    c0010eef <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ea1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ea5:	53                   	push   ebx
c0010ea6:	53                   	push   ebx
c0010ea7:	6a 01                	push   0x1
c0010ea9:	55                   	push   ebp
c0010eaa:	e8 df fc ff ff       	call   c0010b8e <VgaText::decrementCursor(bool)>
c0010eaf:	58                   	pop    eax
c0010eb0:	5a                   	pop    edx
c0010eb1:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eb7:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ebd:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ec3:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec9:	6a 20                	push   0x20
c0010ecb:	55                   	push   ebp
c0010ecc:	e8 2d f9 ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ed1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed9:	83 c4 20             	add    esp,0x20
c0010edc:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ee2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ee6:	0f b7 db             	movzx  ebx,bx
c0010ee9:	01 db                	add    ebx,ebx
c0010eeb:	01 fb                	add    ebx,edi
c0010eed:	eb 6e                	jmp    c0010f5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eef:	51                   	push   ecx
c0010ef0:	51                   	push   ecx
c0010ef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef5:	50                   	push   eax
c0010ef6:	e8 f1 f8 ff ff       	call   c00107ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f01:	39 2d 84 e5 02 c0    	cmp    DWORD PTR ds:0xc002e584,ebp
c0010f07:	75 2a                	jne    c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f09:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f0f:	85 c0                	test   eax,eax
c0010f11:	74 20                	je     c0010f33 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f13:	52                   	push   edx
c0010f14:	52                   	push   edx
c0010f15:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f1b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f29:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f2c:	51                   	push   ecx
c0010f2d:	55                   	push   ebp
c0010f2e:	ff d0                	call   eax
c0010f30:	83 c4 20             	add    esp,0x20
c0010f33:	83 c3 02             	add    ebx,0x2
c0010f36:	50                   	push   eax
c0010f37:	50                   	push   eax
c0010f38:	6a 00                	push   0x0
c0010f3a:	55                   	push   ebp
c0010f3b:	e8 8c f9 ff ff       	call   c00108cc <VgaText::incrementCursor(bool)>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f4a:	75 0f                	jne    c0010f5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f4c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f54:	0f b7 db             	movzx  ebx,bx
c0010f57:	01 db                	add    ebx,ebx
c0010f59:	01 fb                	add    ebx,edi
c0010f5b:	b1 01                	mov    cl,0x1
c0010f5d:	46                   	inc    esi
c0010f5e:	e9 bd fe ff ff       	jmp    c0010e20 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f63:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f67:	83 ec 0c             	sub    esp,0xc
c0010f6a:	55                   	push   ebp
c0010f6b:	e8 9a f6 ff ff       	call   c001060a <VgaText::updateCursor()>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f77:	84 c9                	test   cl,cl
c0010f79:	74 0c                	je     c0010f87 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f7b:	83 ec 0c             	sub    esp,0xc
c0010f7e:	55                   	push   ebp
c0010f7f:	e8 40 fe ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f8e:	83 c4 1c             	add    esp,0x1c
c0010f91:	5b                   	pop    ebx
c0010f92:	5e                   	pop    esi
c0010f93:	5f                   	pop    edi
c0010f94:	5d                   	pop    ebp
c0010f95:	c3                   	ret    

c0010f96 <VgaText::clearScreen()>:
c0010f96:	57                   	push   edi
c0010f97:	56                   	push   esi
c0010f98:	31 f6                	xor    esi,esi
c0010f9a:	53                   	push   ebx
c0010f9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f9f:	52                   	push   edx
c0010fa0:	6a 00                	push   0x0
c0010fa2:	6a 00                	push   0x0
c0010fa4:	53                   	push   ebx
c0010fa5:	e8 cc f8 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0010faa:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fba:	7e 26                	jle    c0010fe2 <VgaText::clearScreen()+0x4c>
c0010fbc:	31 ff                	xor    edi,edi
c0010fbe:	50                   	push   eax
c0010fbf:	50                   	push   eax
c0010fc0:	56                   	push   esi
c0010fc1:	57                   	push   edi
c0010fc2:	47                   	inc    edi
c0010fc3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc9:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fcf:	6a 20                	push   0x20
c0010fd1:	53                   	push   ebx
c0010fd2:	e8 27 f8 ff ff       	call   c00107fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fd7:	83 c4 20             	add    esp,0x20
c0010fda:	83 ff 50             	cmp    edi,0x50
c0010fdd:	75 df                	jne    c0010fbe <VgaText::clearScreen()+0x28>
c0010fdf:	46                   	inc    esi
c0010fe0:	eb d2                	jmp    c0010fb4 <VgaText::clearScreen()+0x1e>
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	53                   	push   ebx
c0010fe6:	e8 d9 fd ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010feb:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010ff2:	83 c4 10             	add    esp,0x10
c0010ff5:	5b                   	pop    ebx
c0010ff6:	5e                   	pop    esi
c0010ff7:	5f                   	pop    edi
c0010ff8:	c3                   	ret    
c0010ff9:	90                   	nop

c0010ffa <VgaText::putchar(char)>:
c0010ffa:	56                   	push   esi
c0010ffb:	53                   	push   ebx
c0010ffc:	83 ec 14             	sub    esp,0x14
c0010fff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011003:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011007:	3c 5b                	cmp    al,0x5b
c0011009:	75 21                	jne    c001102c <VgaText::putchar(char)+0x32>
c001100b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011012:	74 28                	je     c001103c <VgaText::putchar(char)+0x42>
c0011014:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001101d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011027:	e9 e2 00 00 00       	jmp    c001110e <VgaText::putchar(char)+0x114>
c001102c:	3c 1b                	cmp    al,0x1b
c001102e:	75 0c                	jne    c001103c <VgaText::putchar(char)+0x42>
c0011030:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011037:	e9 d2 00 00 00       	jmp    c001110e <VgaText::putchar(char)+0x114>
c001103c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011042:	84 c9                	test   cl,cl
c0011044:	0f 84 ab 00 00 00    	je     c00110f5 <VgaText::putchar(char)+0xfb>
c001104a:	8d 50 c0             	lea    edx,[eax-0x40]
c001104d:	80 fa 3e             	cmp    dl,0x3e
c0011050:	0f 87 82 00 00 00    	ja     c00110d8 <VgaText::putchar(char)+0xde>
c0011056:	3c 6d                	cmp    al,0x6d
c0011058:	75 4d                	jne    c00110a7 <VgaText::putchar(char)+0xad>
c001105a:	31 f6                	xor    esi,esi
c001105c:	31 d2                	xor    edx,edx
c001105e:	31 c0                	xor    eax,eax
c0011060:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011066:	7e 30                	jle    c0011098 <VgaText::putchar(char)+0x9e>
c0011068:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011070:	80 fa 3b             	cmp    dl,0x3b
c0011073:	75 17                	jne    c001108c <VgaText::putchar(char)+0x92>
c0011075:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011079:	50                   	push   eax
c001107a:	53                   	push   ebx
c001107b:	e8 ee f5 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c0011080:	59                   	pop    ecx
c0011081:	31 d2                	xor    edx,edx
c0011083:	58                   	pop    eax
c0011084:	31 c0                	xor    eax,eax
c0011086:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001108a:	eb 09                	jmp    c0011095 <VgaText::putchar(char)+0x9b>
c001108c:	6b c0 0a             	imul   eax,eax,0xa
c001108f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011093:	88 ca                	mov    dl,cl
c0011095:	46                   	inc    esi
c0011096:	eb c8                	jmp    c0011060 <VgaText::putchar(char)+0x66>
c0011098:	84 d2                	test   dl,dl
c001109a:	74 31                	je     c00110cd <VgaText::putchar(char)+0xd3>
c001109c:	50                   	push   eax
c001109d:	53                   	push   ebx
c001109e:	e8 cb f5 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c00110a3:	58                   	pop    eax
c00110a4:	5a                   	pop    edx
c00110a5:	eb 26                	jmp    c00110cd <VgaText::putchar(char)+0xd3>
c00110a7:	3c 4a                	cmp    al,0x4a
c00110a9:	75 22                	jne    c00110cd <VgaText::putchar(char)+0xd3>
c00110ab:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110b2:	75 19                	jne    c00110cd <VgaText::putchar(char)+0xd3>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	53                   	push   ebx
c00110b8:	e8 d9 fe ff ff       	call   c0010f96 <VgaText::clearScreen()>
c00110bd:	83 c4 0c             	add    esp,0xc
c00110c0:	6a 00                	push   0x0
c00110c2:	6a 00                	push   0x0
c00110c4:	53                   	push   ebx
c00110c5:	e8 ac f7 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c00110ca:	83 c4 10             	add    esp,0x10
c00110cd:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110d6:	eb 36                	jmp    c001110e <VgaText::putchar(char)+0x114>
c00110d8:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110de:	83 fa 0e             	cmp    edx,0xe
c00110e1:	7f 2b                	jg     c001110e <VgaText::putchar(char)+0x114>
c00110e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110e6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ec:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110f3:	eb 19                	jmp    c001110e <VgaText::putchar(char)+0x114>
c00110f5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110fb:	0f be c0             	movsx  eax,al
c00110fe:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011104:	50                   	push   eax
c0011105:	53                   	push   ebx
c0011106:	e8 ab fa ff ff       	call   c0010bb6 <VgaText::putchar(char, VgaColour, VgaColour)>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	83 c4 14             	add    esp,0x14
c0011111:	5b                   	pop    ebx
c0011112:	5e                   	pop    esi
c0011113:	c3                   	ret    

c0011114 <VgaText::puts(char const*)>:
c0011114:	53                   	push   ebx
c0011115:	83 ec 08             	sub    esp,0x8
c0011118:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001111c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001111f:	84 c0                	test   al,al
c0011121:	74 12                	je     c0011135 <VgaText::puts(char const*)+0x21>
c0011123:	43                   	inc    ebx
c0011124:	51                   	push   ecx
c0011125:	51                   	push   ecx
c0011126:	50                   	push   eax
c0011127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001112b:	e8 ca fe ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011130:	83 c4 10             	add    esp,0x10
c0011133:	eb e7                	jmp    c001111c <VgaText::puts(char const*)+0x8>
c0011135:	83 c4 08             	add    esp,0x8
c0011138:	5b                   	pop    ebx
c0011139:	c3                   	ret    

c001113a <VgaText::putx(unsigned int)>:
c001113a:	57                   	push   edi
c001113b:	b9 11 00 00 00       	mov    ecx,0x11
c0011140:	56                   	push   esi
c0011141:	be 0e a4 02 c0       	mov    esi,0xc002a40e
c0011146:	53                   	push   ebx
c0011147:	83 ec 20             	sub    esp,0x20
c001114a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001114e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011152:	fc                   	cld    
c0011153:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011155:	be 08 00 00 00       	mov    esi,0x8
c001115a:	50                   	push   eax
c001115b:	50                   	push   eax
c001115c:	89 d8                	mov    eax,ebx
c001115e:	c1 e3 04             	shl    ebx,0x4
c0011161:	c1 e8 1c             	shr    eax,0x1c
c0011164:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011169:	50                   	push   eax
c001116a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001116e:	e8 87 fe ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	4e                   	dec    esi
c0011177:	75 e1                	jne    c001115a <VgaText::putx(unsigned int)+0x20>
c0011179:	83 c4 20             	add    esp,0x20
c001117c:	5b                   	pop    ebx
c001117d:	5e                   	pop    esi
c001117e:	5f                   	pop    edi
c001117f:	c3                   	ret    

c0011180 <VgaText::VgaText(char const*)>:
c0011180:	57                   	push   edi
c0011181:	56                   	push   esi
c0011182:	53                   	push   ebx
c0011183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011187:	83 ec 08             	sub    esp,0x8
c001118a:	6a 00                	push   0x0
c001118c:	50                   	push   eax
c001118d:	e8 6e 05 00 00       	call   c0011700 <UnixFile::UnixFile(int)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c001119a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119e:	89 10                	mov    DWORD PTR [eax],edx
c00111a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a4:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b2:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c0:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cb:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001120e:	bb 60 e5 02 c0       	mov    ebx,0xc002e560
c0011213:	b8 08 00 00 00       	mov    eax,0x8
c0011218:	fc                   	cld    
c0011219:	89 d7                	mov    edi,edx
c001121b:	89 de                	mov    esi,ebx
c001121d:	89 c1                	mov    ecx,eax
c001121f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011225:	05 1e 10 00 00       	add    eax,0x101e
c001122a:	83 ec 08             	sub    esp,0x8
c001122d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011231:	50                   	push   eax
c0011232:	e8 fd f5 fe ff       	call   c0000834 <strcpy>
c0011237:	83 c4 10             	add    esp,0x10
c001123a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001124c:	83 c0 0c             	add    eax,0xc
c001124f:	83 ec 04             	sub    esp,0x4
c0011252:	68 00 0f 00 00       	push   0xf00
c0011257:	6a 00                	push   0x0
c0011259:	50                   	push   eax
c001125a:	e8 19 f5 fe ff       	call   c0000778 <memset>
c001125f:	83 c4 10             	add    esp,0x10
c0011262:	83 ec 04             	sub    esp,0x4
c0011265:	6a 00                	push   0x0
c0011267:	6a 07                	push   0x7
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	e8 b4 f4 ff ff       	call   c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	83 ec 08             	sub    esp,0x8
c0011278:	6a 02                	push   0x2
c001127a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127e:	e8 49 fa ff ff       	call   c0010ccc <VgaText::setCursorHeight(int)>
c0011283:	83 c4 10             	add    esp,0x10
c0011286:	83 ec 04             	sub    esp,0x4
c0011289:	6a 00                	push   0x0
c001128b:	6a 00                	push   0x0
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	e8 e0 f5 ff ff       	call   c0010876 <VgaText::setCursor(int, int)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	83 ec 08             	sub    esp,0x8
c001129c:	6a 01                	push   0x1
c001129e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a2:	e8 7d f3 ff ff       	call   c0010624 <VgaText::showCursor(bool)>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	83 ec 08             	sub    esp,0x8
c00112ad:	6a 01                	push   0x1
c00112af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b3:	e8 7c f3 ff ff       	call   c0010634 <VgaText::disableBlink(bool)>
c00112b8:	83 c4 10             	add    esp,0x10
c00112bb:	83 ec 0c             	sub    esp,0xc
c00112be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c2:	e8 cf fc ff ff       	call   c0010f96 <VgaText::clearScreen()>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ce:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d9:	05 9e 10 00 00       	add    eax,0x109e
c00112de:	83 ec 04             	sub    esp,0x4
c00112e1:	68 96 00 00 00       	push   0x96
c00112e6:	6a 00                	push   0x0
c00112e8:	50                   	push   eax
c00112e9:	e8 8a f4 fe ff       	call   c0000778 <memset>
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f5:	05 34 11 00 00       	add    eax,0x1134
c00112fa:	83 ec 04             	sub    esp,0x4
c00112fd:	68 2c 01 00 00       	push   0x12c
c0011302:	6a 00                	push   0x0
c0011304:	50                   	push   eax
c0011305:	e8 6e f4 fe ff       	call   c0000778 <memset>
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	90                   	nop
c001130e:	5b                   	pop    ebx
c001130f:	5e                   	pop    esi
c0011310:	5f                   	pop    edi
c0011311:	c3                   	ret    

c0011312 <VgaText::receiveKey(unsigned char)>:
c0011312:	55                   	push   ebp
c0011313:	57                   	push   edi
c0011314:	56                   	push   esi
c0011315:	53                   	push   ebx
c0011316:	83 ec 1c             	sub    esp,0x1c
c0011319:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001131d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011321:	84 db                	test   bl,bl
c0011323:	0f 84 c9 00 00 00    	je     c00113f2 <VgaText::receiveKey(unsigned char)+0xe0>
c0011329:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001132f:	80 fb 08             	cmp    bl,0x8
c0011332:	75 2c                	jne    c0011360 <VgaText::receiveKey(unsigned char)+0x4e>
c0011334:	83 ec 0c             	sub    esp,0xc
c0011337:	57                   	push   edi
c0011338:	e8 57 f4 fe ff       	call   c0000794 <strlen>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	85 c0                	test   eax,eax
c0011342:	74 41                	je     c0011385 <VgaText::receiveKey(unsigned char)+0x73>
c0011344:	50                   	push   eax
c0011345:	50                   	push   eax
c0011346:	6a 08                	push   0x8
c0011348:	56                   	push   esi
c0011349:	e8 ac fc ff ff       	call   c0010ffa <VgaText::putchar(char)>
c001134e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011351:	e8 3e f4 fe ff       	call   c0000794 <strlen>
c0011356:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001135e:	eb 22                	jmp    c0011382 <VgaText::receiveKey(unsigned char)+0x70>
c0011360:	0f be c3             	movsx  eax,bl
c0011363:	52                   	push   edx
c0011364:	52                   	push   edx
c0011365:	50                   	push   eax
c0011366:	56                   	push   esi
c0011367:	e8 8e fc ff ff       	call   c0010ffa <VgaText::putchar(char)>
c001136c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011370:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011375:	59                   	pop    ecx
c0011376:	5d                   	pop    ebp
c0011377:	8d 44 24 16          	lea    eax,[esp+0x16]
c001137b:	50                   	push   eax
c001137c:	57                   	push   edi
c001137d:	e8 f2 f5 fe ff       	call   c0000974 <strcat>
c0011382:	83 c4 10             	add    esp,0x10
c0011385:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001138c:	75 05                	jne    c0011393 <VgaText::receiveKey(unsigned char)+0x81>
c001138e:	80 fb 0a             	cmp    bl,0xa
c0011391:	75 53                	jne    c00113e6 <VgaText::receiveKey(unsigned char)+0xd4>
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001139c:	53                   	push   ebx
c001139d:	e8 f2 f3 fe ff       	call   c0000794 <strlen>
c00113a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a5:	89 c5                	mov    ebp,eax
c00113a7:	e8 e8 f3 fe ff       	call   c0000794 <strlen>
c00113ac:	83 c4 10             	add    esp,0x10
c00113af:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113b3:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b8:	76 10                	jbe    c00113ca <VgaText::receiveKey(unsigned char)+0xb8>
c00113ba:	83 ec 0c             	sub    esp,0xc
c00113bd:	68 1f a4 02 c0       	push   0xc002a41f
c00113c2:	e8 5a 92 00 00       	call   c001a621 <Krnl::panic(char const*)>
c00113c7:	83 c4 10             	add    esp,0x10
c00113ca:	50                   	push   eax
c00113cb:	50                   	push   eax
c00113cc:	57                   	push   edi
c00113cd:	53                   	push   ebx
c00113ce:	e8 a1 f5 fe ff       	call   c0000974 <strcat>
c00113d3:	83 c4 0c             	add    esp,0xc
c00113d6:	68 96 00 00 00       	push   0x96
c00113db:	6a 00                	push   0x0
c00113dd:	57                   	push   edi
c00113de:	e8 95 f3 fe ff       	call   c0000778 <memset>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	83 ec 0c             	sub    esp,0xc
c00113e9:	56                   	push   esi
c00113ea:	e8 d5 f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	83 c4 1c             	add    esp,0x1c
c00113f5:	5b                   	pop    ebx
c00113f6:	5e                   	pop    esi
c00113f7:	5f                   	pop    edi
c00113f8:	5d                   	pop    ebp
c00113f9:	c3                   	ret    

c00113fa <VgaText::write(unsigned long long, void*, int*)>:
c00113fa:	55                   	push   ebp
c00113fb:	57                   	push   edi
c00113fc:	56                   	push   esi
c00113fd:	53                   	push   ebx
c00113fe:	83 ec 0c             	sub    esp,0xc
c0011401:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011405:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011409:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001140d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011414:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011417:	39 eb                	cmp    ebx,ebp
c0011419:	74 13                	je     c001142e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001141b:	43                   	inc    ebx
c001141c:	50                   	push   eax
c001141d:	50                   	push   eax
c001141e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011422:	50                   	push   eax
c0011423:	56                   	push   esi
c0011424:	e8 d1 fb ff ff       	call   c0010ffa <VgaText::putchar(char)>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	eb e9                	jmp    c0011417 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011438:	56                   	push   esi
c0011439:	e8 86 f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c001143e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011442:	89 38                	mov    DWORD PTR [eax],edi
c0011444:	83 c4 1c             	add    esp,0x1c
c0011447:	31 c0                	xor    eax,eax
c0011449:	5b                   	pop    ebx
c001144a:	5e                   	pop    esi
c001144b:	5f                   	pop    edi
c001144c:	5d                   	pop    ebp
c001144d:	c3                   	ret    

c001144e <newTerminal(char*)>:
c001144e:	83 ec 28             	sub    esp,0x28
c0011451:	68 60 12 00 00       	push   0x1260
c0011456:	e8 e8 e3 ff ff       	call   c000f843 <malloc>
c001145b:	5a                   	pop    edx
c001145c:	59                   	pop    ecx
c001145d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011461:	50                   	push   eax
c0011462:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011466:	e8 15 fd ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001146b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001146f:	83 c4 2c             	add    esp,0x2c
c0011472:	c3                   	ret    
c0011473:	90                   	nop

c0011474 <TSS::TSS()>:
c0011474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011478:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001147f:	90                   	nop
c0011480:	c3                   	ret    
c0011481:	90                   	nop

c0011482 <TSS::setESP(unsigned long)>:
c0011482:	55                   	push   ebp
c0011483:	89 e5                	mov    ebp,esp
c0011485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001148e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011491:	90                   	nop
c0011492:	5d                   	pop    ebp
c0011493:	c3                   	ret    

c0011494 <TSS::flush()>:
c0011494:	55                   	push   ebp
c0011495:	89 e5                	mov    ebp,esp
c0011497:	83 ec 10             	sub    esp,0x10
c001149a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149d:	8b 00                	mov    eax,DWORD PTR [eax]
c001149f:	83 c8 03             	or     eax,0x3
c00114a2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114a6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114aa:	66 89 d0             	mov    ax,dx
c00114ad:	0f 00 d8             	ltr    ax
c00114b0:	90                   	nop
c00114b1:	c9                   	leave  
c00114b2:	c3                   	ret    
c00114b3:	90                   	nop

c00114b4 <TSS::setup(unsigned long, unsigned long)>:
c00114b4:	55                   	push   ebp
c00114b5:	89 e5                	mov    ebp,esp
c00114b7:	83 ec 18             	sub    esp,0x18
c00114ba:	83 ec 0c             	sub    esp,0xc
c00114bd:	6a 68                	push   0x68
c00114bf:	e8 7f e3 ff ff       	call   c000f843 <malloc>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	89 c2                	mov    edx,eax
c00114c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d5:	83 ec 04             	sub    esp,0x4
c00114d8:	6a 68                	push   0x68
c00114da:	6a 00                	push   0x0
c00114dc:	50                   	push   eax
c00114dd:	e8 96 f2 fe ff       	call   c0000778 <memset>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011503:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011506:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001155a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011566:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157c:	0f 20 da             	mov    edx,cr3
c001157f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011582:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011585:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001158b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158e:	83 ec 08             	sub    esp,0x8
c0011591:	50                   	push   eax
c0011592:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011595:	50                   	push   eax
c0011596:	e8 83 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c001159b:	83 c4 10             	add    esp,0x10
c001159e:	83 ec 08             	sub    esp,0x8
c00115a1:	6a 68                	push   0x68
c00115a3:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115a6:	50                   	push   eax
c00115a7:	e8 8e da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115ac:	83 c4 10             	add    esp,0x10
c00115af:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115b3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b6:	83 e0 0f             	and    eax,0xf
c00115b9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115bc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115bf:	83 c8 40             	or     eax,0x40
c00115c2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c5:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00115ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115d0:	05 78 01 00 00       	add    eax,0x178
c00115d5:	83 ec 04             	sub    esp,0x4
c00115d8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115db:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115de:	50                   	push   eax
c00115df:	e8 8a da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115e4:	83 c4 10             	add    esp,0x10
c00115e7:	89 c2                	mov    edx,eax
c00115e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ec:	89 10                	mov    DWORD PTR [eax],edx
c00115ee:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00115f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f9:	05 78 01 00 00       	add    eax,0x178
c00115fe:	83 ec 0c             	sub    esp,0xc
c0011601:	50                   	push   eax
c0011602:	e8 ab da ff ff       	call   c000f0b2 <GDT::flush()>
c0011607:	83 c4 10             	add    esp,0x10
c001160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160d:	8b 00                	mov    eax,DWORD PTR [eax]
c001160f:	83 ec 08             	sub    esp,0x8
c0011612:	50                   	push   eax
c0011613:	68 88 a4 02 c0       	push   0xc002a488
c0011618:	e8 57 19 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011623:	8b 00                	mov    eax,DWORD PTR [eax]
c0011625:	c9                   	leave  
c0011626:	c3                   	ret    
c0011627:	90                   	nop

c0011628 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011633:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011638:	75 08                	jne    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001163a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011640:	eb 38                	jmp    c001167a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011642:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011647:	75 17                	jne    c0011660 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011651:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011657:	8b 10                	mov    edx,DWORD PTR [eax]
c0011659:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001165d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011660:	89 c1                	mov    ecx,eax
c0011662:	83 e1 fd             	and    ecx,0xfffffffd
c0011665:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001166b:	74 cd                	je     c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001166d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011672:	83 e0 ef             	and    eax,0xffffffef
c0011675:	83 f8 08             	cmp    eax,0x8
c0011678:	76 c0                	jbe    c001163a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001167a:	31 c0                	xor    eax,eax
c001167c:	c3                   	ret    
c001167d:	90                   	nop

c001167e <ReservedFilename::isAtty()>:
c001167e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011682:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011685:	31 c0                	xor    eax,eax
c0011687:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001168d:	74 09                	je     c0011698 <ReservedFilename::isAtty()+0x1a>
c001168f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011695:	0f 94 c0             	sete   al
c0011698:	c3                   	ret    
c0011699:	90                   	nop

c001169a <ReservedFilename::write(unsigned long long, void*, int*)>:
c001169a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ae:	75 08                	jne    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116b0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116b6:	eb 3d                	jmp    c00116f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116bd:	75 17                	jne    c00116d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00116cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116d6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116db:	75 04                	jne    c00116e1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116dd:	89 0a                	mov    DWORD PTR [edx],ecx
c00116df:	eb 14                	jmp    c00116f5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116e1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116e6:	74 c8                	je     c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ed:	83 e0 ef             	and    eax,0xffffffef
c00116f0:	83 f8 08             	cmp    eax,0x8
c00116f3:	76 bb                	jbe    c00116b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f5:	31 c0                	xor    eax,eax
c00116f7:	c3                   	ret    

c00116f8 <UnixFile::getFileDescriptor()>:
c00116f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ff:	c3                   	ret    

c0011700 <UnixFile::UnixFile(int)>:
c0011700:	53                   	push   ebx
c0011701:	83 ec 28             	sub    esp,0x28
c0011704:	ba 74 a5 02 c0       	mov    edx,0xc002a574
c0011709:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001170d:	89 10                	mov    DWORD PTR [eax],edx
c001170f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011717:	0f 8f 8c 01 00 00    	jg     c00118a9 <UnixFile::UnixFile(int)+0x1a9>
c001171d:	a1 40 d4 02 c0       	mov    eax,ds:0xc002d440
c0011722:	8d 50 01             	lea    edx,[eax+0x1]
c0011725:	89 15 40 d4 02 c0    	mov    DWORD PTR ds:0xc002d440,edx
c001172b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011732:	83 ec 08             	sub    esp,0x8
c0011735:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011739:	68 18 e6 02 c0       	push   0xc002e618
c001173e:	e8 1d 70 01 00       	call   c0028760 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011743:	83 c4 10             	add    esp,0x10
c0011746:	a0 14 e6 02 c0       	mov    al,ds:0xc002e614
c001174b:	83 f0 01             	xor    eax,0x1
c001174e:	84 c0                	test   al,al
c0011750:	0f 84 54 01 00 00    	je     c00118aa <UnixFile::UnixFile(int)+0x1aa>
c0011756:	c6 05 14 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e614,0x1
c001175d:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011765:	83 ec 0c             	sub    esp,0xc
c0011768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001176c:	e8 d2 e0 ff ff       	call   c000f843 <malloc>
c0011771:	83 c4 10             	add    esp,0x10
c0011774:	89 c3                	mov    ebx,eax
c0011776:	83 ec 08             	sub    esp,0x8
c0011779:	68 03 ff ff 0f       	push   0xfffff03
c001177e:	53                   	push   ebx
c001177f:	e8 2c 01 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011784:	83 c4 10             	add    esp,0x10
c0011787:	89 1d 0c e6 02 c0    	mov    DWORD PTR ds:0xc002e60c,ebx
c001178d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011795:	83 ec 0c             	sub    esp,0xc
c0011798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001179c:	e8 a2 e0 ff ff       	call   c000f843 <malloc>
c00117a1:	83 c4 10             	add    esp,0x10
c00117a4:	89 c3                	mov    ebx,eax
c00117a6:	83 ec 08             	sub    esp,0x8
c00117a9:	68 01 ff ff 0f       	push   0xfffff01
c00117ae:	53                   	push   ebx
c00117af:	e8 fc 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	89 1d 10 e6 02 c0    	mov    DWORD PTR ds:0xc002e610,ebx
c00117bd:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117cc:	e8 72 e0 ff ff       	call   c000f843 <malloc>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	89 c3                	mov    ebx,eax
c00117d6:	83 ec 08             	sub    esp,0x8
c00117d9:	68 00 ff ff 0f       	push   0xfffff00
c00117de:	53                   	push   ebx
c00117df:	e8 cc 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c00117ed:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117f5:	83 ec 0c             	sub    esp,0xc
c00117f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117fc:	e8 42 e0 ff ff       	call   c000f843 <malloc>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 c3                	mov    ebx,eax
c0011806:	83 ec 08             	sub    esp,0x8
c0011809:	68 02 ff ff 0f       	push   0xfffff02
c001180e:	53                   	push   ebx
c001180f:	e8 9c 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	89 1d 08 e6 02 c0    	mov    DWORD PTR ds:0xc002e608,ebx
c001181d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011825:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001182a:	7f 7e                	jg     c00118aa <UnixFile::UnixFile(int)+0x1aa>
c001182c:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001183b:	e8 03 e0 ff ff       	call   c000f843 <malloc>
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 c3                	mov    ebx,eax
c0011845:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011849:	05 10 ff ff 0f       	add    eax,0xfffff10
c001184e:	83 ec 08             	sub    esp,0x8
c0011851:	50                   	push   eax
c0011852:	53                   	push   ebx
c0011853:	e8 58 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011858:	83 c4 10             	add    esp,0x10
c001185b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185f:	89 1c 85 e0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a20],ebx
c0011866:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011875:	e8 c9 df ff ff       	call   c000f843 <malloc>
c001187a:	83 c4 10             	add    esp,0x10
c001187d:	89 c3                	mov    ebx,eax
c001187f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011883:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	50                   	push   eax
c001188c:	53                   	push   ebx
c001188d:	e8 1e 00 00 00       	call   c00118b0 <ReservedFilename::ReservedFilename(int)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011899:	89 1c 85 a0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a60],ebx
c00118a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118a4:	e9 7c ff ff ff       	jmp    c0011825 <UnixFile::UnixFile(int)+0x125>
c00118a9:	90                   	nop
c00118aa:	83 c4 28             	add    esp,0x28
c00118ad:	5b                   	pop    ebx
c00118ae:	c3                   	ret    
c00118af:	90                   	nop

c00118b0 <ReservedFilename::ReservedFilename(int)>:
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	83 ec 08             	sub    esp,0x8
c00118ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118be:	50                   	push   eax
c00118bf:	e8 3c fe ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	ba 90 a5 02 c0       	mov    edx,0xc002a590
c00118cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d0:	89 10                	mov    DWORD PTR [eax],edx
c00118d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118dd:	90                   	nop
c00118de:	83 c4 0c             	add    esp,0xc
c00118e1:	c3                   	ret    

c00118e2 <UnixFile::~UnixFile()>:
c00118e2:	83 ec 1c             	sub    esp,0x1c
c00118e5:	ba 74 a5 02 c0       	mov    edx,0xc002a574
c00118ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ee:	89 10                	mov    DWORD PTR [eax],edx
c00118f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118fc:	7f 73                	jg     c0011971 <UnixFile::~UnixFile()+0x8f>
c00118fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011906:	83 ec 0c             	sub    esp,0xc
c0011909:	68 18 e6 02 c0       	push   0xc002e618
c001190e:	e8 21 6f 01 00       	call   c0028834 <LinkedList<UnixFile>::getFirstElement()>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001191a:	83 ec 0c             	sub    esp,0xc
c001191d:	68 18 e6 02 c0       	push   0xc002e618
c0011922:	e8 15 6f 01 00       	call   c002883c <LinkedList<UnixFile>::removeFirst()>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001192e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011932:	74 40                	je     c0011974 <UnixFile::~UnixFile()+0x92>
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001193b:	68 18 e6 02 c0       	push   0xc002e618
c0011940:	e8 1b 6e 01 00       	call   c0028760 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001194c:	8d 50 01             	lea    edx,[eax+0x1]
c001194f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011953:	3d 88 13 00 00       	cmp    eax,0x1388
c0011958:	0f 94 c0             	sete   al
c001195b:	84 c0                	test   al,al
c001195d:	74 a7                	je     c0011906 <UnixFile::~UnixFile()+0x24>
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	68 4c a5 02 c0       	push   0xc002a54c
c0011967:	e8 b5 8c 00 00       	call   c001a621 <Krnl::panic(char const*)>
c001196c:	83 c4 10             	add    esp,0x10
c001196f:	eb 95                	jmp    c0011906 <UnixFile::~UnixFile()+0x24>
c0011971:	90                   	nop
c0011972:	eb 01                	jmp    c0011975 <UnixFile::~UnixFile()+0x93>
c0011974:	90                   	nop
c0011975:	90                   	nop
c0011976:	83 c4 1c             	add    esp,0x1c
c0011979:	c3                   	ret    

c001197a <UnixFile::~UnixFile()>:
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 59 ff ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	83 ec 08             	sub    esp,0x8
c001198f:	6a 0c                	push   0xc
c0011991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011995:	e8 fa 14 00 00       	call   c0012e94 <operator delete(void*, unsigned long)>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    
c00119a1:	90                   	nop

c00119a2 <ReservedFilename::~ReservedFilename()>:
c00119a2:	83 ec 0c             	sub    esp,0xc
c00119a5:	ba 90 a5 02 c0       	mov    edx,0xc002a590
c00119aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ae:	89 10                	mov    DWORD PTR [eax],edx
c00119b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b4:	83 ec 0c             	sub    esp,0xc
c00119b7:	50                   	push   eax
c00119b8:	e8 25 ff ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	90                   	nop
c00119c1:	83 c4 0c             	add    esp,0xc
c00119c4:	c3                   	ret    
c00119c5:	90                   	nop

c00119c6 <ReservedFilename::~ReservedFilename()>:
c00119c6:	83 ec 0c             	sub    esp,0xc
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d0:	e8 cd ff ff ff       	call   c00119a2 <ReservedFilename::~ReservedFilename()>
c00119d5:	83 c4 10             	add    esp,0x10
c00119d8:	83 ec 08             	sub    esp,0x8
c00119db:	6a 0c                	push   0xc
c00119dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e1:	e8 ae 14 00 00       	call   c0012e94 <operator delete(void*, unsigned long)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	83 c4 0c             	add    esp,0xc
c00119ec:	c3                   	ret    

c00119ed <getFromFileDescriptor(int)>:
c00119ed:	53                   	push   ebx
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119f5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119fb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a01:	7f 2c                	jg     c0011a2f <getFromFileDescriptor(int)+0x42>
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	68 18 e6 02 c0       	push   0xc002e618
c0011a0b:	e8 24 6e 01 00       	call   c0028834 <LinkedList<UnixFile>::getFirstElement()>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	85 c0                	test   eax,eax
c0011a15:	75 04                	jne    c0011a1b <getFromFileDescriptor(int)+0x2e>
c0011a17:	31 c0                	xor    eax,eax
c0011a19:	eb 6e                	jmp    c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a1b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a1e:	74 69                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a20:	52                   	push   edx
c0011a21:	52                   	push   edx
c0011a22:	50                   	push   eax
c0011a23:	68 18 e6 02 c0       	push   0xc002e618
c0011a28:	e8 b1 6e 01 00       	call   c00288de <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a2d:	eb e1                	jmp    c0011a10 <getFromFileDescriptor(int)+0x23>
c0011a2f:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c0011a34:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a3a:	74 4d                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a3c:	a1 10 e6 02 c0       	mov    eax,ds:0xc002e610
c0011a41:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a47:	74 40                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a49:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c0011a4e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a54:	74 33                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a56:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0011a5b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a61:	74 26                	je     c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a63:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a69:	83 f8 08             	cmp    eax,0x8
c0011a6c:	77 09                	ja     c0011a77 <getFromFileDescriptor(int)+0x8a>
c0011a6e:	8b 04 85 e0 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1a20]
c0011a75:	eb 12                	jmp    c0011a89 <getFromFileDescriptor(int)+0x9c>
c0011a77:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a7d:	83 fb 08             	cmp    ebx,0x8
c0011a80:	77 95                	ja     c0011a17 <getFromFileDescriptor(int)+0x2a>
c0011a82:	8b 04 9d a0 e5 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1a60]
c0011a89:	83 c4 08             	add    esp,0x8
c0011a8c:	5b                   	pop    ebx
c0011a8d:	c3                   	ret    

c0011a8e <__static_initialization_and_destruction_0(int, int)>:
c0011a8e:	83 ec 0c             	sub    esp,0xc
c0011a91:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a96:	75 34                	jne    c0011acc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a98:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011aa0:	75 2a                	jne    c0011acc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011aa2:	83 ec 0c             	sub    esp,0xc
c0011aa5:	68 18 e6 02 c0       	push   0xc002e618
c0011aaa:	e8 59 6c 01 00       	call   c0028708 <LinkedList<UnixFile>::LinkedList()>
c0011aaf:	83 c4 10             	add    esp,0x10
c0011ab2:	83 ec 04             	sub    esp,0x4
c0011ab5:	68 d0 d3 02 c0       	push   0xc002d3d0
c0011aba:	68 18 e6 02 c0       	push   0xc002e618
c0011abf:	68 06 87 02 c0       	push   0xc0028706
c0011ac4:	e8 45 13 00 00       	call   c0012e0e <__cxa_atexit>
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	90                   	nop
c0011acd:	83 c4 0c             	add    esp,0xc
c0011ad0:	c3                   	ret    

c0011ad1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ad1:	83 ec 0c             	sub    esp,0xc
c0011ad4:	83 ec 08             	sub    esp,0x8
c0011ad7:	68 ff ff 00 00       	push   0xffff
c0011adc:	6a 01                	push   0x1
c0011ade:	e8 ab ff ff ff       	call   c0011a8e <__static_initialization_and_destruction_0(int, int)>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	83 c4 0c             	add    esp,0xc
c0011ae9:	c3                   	ret    

c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011aea:	53                   	push   ebx
c0011aeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011aef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011af3:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011af9:	89 c8                	mov    eax,ecx
c0011afb:	d1 e8                	shr    eax,1
c0011afd:	03 05 48 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d448
c0011b03:	83 e1 01             	and    ecx,0x1
c0011b06:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b08:	75 09                	jne    c0011b13 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b0a:	83 e2 f0             	and    edx,0xfffffff0
c0011b0d:	09 da                	or     edx,ebx
c0011b0f:	88 10                	mov    BYTE PTR [eax],dl
c0011b11:	5b                   	pop    ebx
c0011b12:	c3                   	ret    
c0011b13:	c1 e3 04             	shl    ebx,0x4
c0011b16:	83 e2 0f             	and    edx,0xf
c0011b19:	09 da                	or     edx,ebx
c0011b1b:	88 10                	mov    BYTE PTR [eax],dl
c0011b1d:	5b                   	pop    ebx
c0011b1e:	c3                   	ret    

c0011b1f <Virt::getPageState(unsigned long)>:
c0011b1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b23:	8b 0d 48 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d448
c0011b29:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b2f:	89 d0                	mov    eax,edx
c0011b31:	d1 e8                	shr    eax,1
c0011b33:	83 e2 01             	and    edx,0x1
c0011b36:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b39:	75 04                	jne    c0011b3f <Virt::getPageState(unsigned long)+0x20>
c0011b3b:	83 e0 0f             	and    eax,0xf
c0011b3e:	c3                   	ret    
c0011b3f:	c0 e8 04             	shr    al,0x4
c0011b42:	c3                   	ret    

c0011b43 <Virt::allocateKernelVirtualPages(int)>:
c0011b43:	55                   	push   ebp
c0011b44:	31 ed                	xor    ebp,ebp
c0011b46:	57                   	push   edi
c0011b47:	56                   	push   esi
c0011b48:	53                   	push   ebx
c0011b49:	31 db                	xor    ebx,ebx
c0011b4b:	83 ec 1c             	sub    esp,0x1c
c0011b4e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b52:	8b 3d 44 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d444
c0011b58:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b5d:	57                   	push   edi
c0011b5e:	e8 bc ff ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0011b63:	5a                   	pop    edx
c0011b64:	84 c0                	test   al,al
c0011b66:	75 3a                	jne    c0011ba2 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b68:	85 db                	test   ebx,ebx
c0011b6a:	75 02                	jne    c0011b6e <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b6c:	89 fd                	mov    ebp,edi
c0011b6e:	43                   	inc    ebx
c0011b6f:	39 f3                	cmp    ebx,esi
c0011b71:	74 5a                	je     c0011bcd <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b73:	47                   	inc    edi
c0011b74:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b7a:	76 31                	jbe    c0011bad <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b7c:	c7 05 44 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d444,0xc8000
c0011b86:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b8b:	75 28                	jne    c0011bb5 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b8d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b92:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b97:	57                   	push   edi
c0011b98:	e8 82 ff ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0011b9d:	5a                   	pop    edx
c0011b9e:	84 c0                	test   al,al
c0011ba0:	74 c6                	je     c0011b68 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ba2:	31 db                	xor    ebx,ebx
c0011ba4:	47                   	inc    edi
c0011ba5:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bab:	77 cf                	ja     c0011b7c <Virt::allocateKernelVirtualPages(int)+0x39>
c0011bad:	89 3d 44 d4 02 c0    	mov    DWORD PTR ds:0xc002d444,edi
c0011bb3:	eb a8                	jmp    c0011b5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	68 a4 a5 02 c0       	push   0xc002a5a4
c0011bbd:	e8 5f 8a 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0011bc2:	8b 3d 44 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d444
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	eb 90                	jmp    c0011b5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bcd:	89 2d 44 d4 02 c0    	mov    DWORD PTR ds:0xc002d444,ebp
c0011bd3:	4b                   	dec    ebx
c0011bd4:	74 5f                	je     c0011c35 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bd6:	85 f6                	test   esi,esi
c0011bd8:	74 3d                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bda:	89 e8                	mov    eax,ebp
c0011bdc:	31 db                	xor    ebx,ebx
c0011bde:	8d 7e ff             	lea    edi,[esi-0x1]
c0011be1:	eb 14                	jmp    c0011bf7 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011be3:	6a 01                	push   0x1
c0011be5:	43                   	inc    ebx
c0011be6:	50                   	push   eax
c0011be7:	e8 fe fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bec:	58                   	pop    eax
c0011bed:	39 f3                	cmp    ebx,esi
c0011bef:	5a                   	pop    edx
c0011bf0:	74 25                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bf2:	a1 44 d4 02 c0       	mov    eax,ds:0xc002d444
c0011bf7:	8d 50 01             	lea    edx,[eax+0x1]
c0011bfa:	85 db                	test   ebx,ebx
c0011bfc:	89 15 44 d4 02 c0    	mov    DWORD PTR ds:0xc002d444,edx
c0011c02:	74 20                	je     c0011c24 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c04:	39 df                	cmp    edi,ebx
c0011c06:	75 db                	jne    c0011be3 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c08:	6a 03                	push   0x3
c0011c0a:	43                   	inc    ebx
c0011c0b:	50                   	push   eax
c0011c0c:	e8 d9 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c11:	59                   	pop    ecx
c0011c12:	39 f3                	cmp    ebx,esi
c0011c14:	58                   	pop    eax
c0011c15:	75 db                	jne    c0011bf2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c17:	83 c4 1c             	add    esp,0x1c
c0011c1a:	89 e8                	mov    eax,ebp
c0011c1c:	5b                   	pop    ebx
c0011c1d:	c1 e0 0c             	shl    eax,0xc
c0011c20:	5e                   	pop    esi
c0011c21:	5f                   	pop    edi
c0011c22:	5d                   	pop    ebp
c0011c23:	c3                   	ret    
c0011c24:	6a 02                	push   0x2
c0011c26:	bb 01 00 00 00       	mov    ebx,0x1
c0011c2b:	50                   	push   eax
c0011c2c:	e8 b9 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c31:	58                   	pop    eax
c0011c32:	5a                   	pop    edx
c0011c33:	eb bd                	jmp    c0011bf2 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c35:	6a 04                	push   0x4
c0011c37:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c3a:	55                   	push   ebp
c0011c3b:	a3 44 d4 02 c0       	mov    ds:0xc002d444,eax
c0011c40:	e8 a5 fe ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c45:	59                   	pop    ecx
c0011c46:	89 e8                	mov    eax,ebp
c0011c48:	5b                   	pop    ebx
c0011c49:	c1 e0 0c             	shl    eax,0xc
c0011c4c:	83 c4 1c             	add    esp,0x1c
c0011c4f:	5b                   	pop    ebx
c0011c50:	5e                   	pop    esi
c0011c51:	5f                   	pop    edi
c0011c52:	5d                   	pop    ebp
c0011c53:	c3                   	ret    

c0011c54 <Virt::freeSwapfilePage(unsigned long)>:
c0011c54:	53                   	push   ebx
c0011c55:	8b 15 28 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e628
c0011c5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c5f:	b8 01 00 00 00       	mov    eax,0x1
c0011c64:	89 cb                	mov    ebx,ecx
c0011c66:	d3 e0                	shl    eax,cl
c0011c68:	c1 eb 05             	shr    ebx,0x5
c0011c6b:	f7 d0                	not    eax
c0011c6d:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c70:	5b                   	pop    ebx
c0011c71:	c3                   	ret    

c0011c72 <Virt::swapIDToSector(unsigned long)>:
c0011c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c76:	0f af 05 4c d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d44c
c0011c7d:	03 05 54 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d454
c0011c83:	c3                   	ret    

c0011c84 <Virt::allocateSwapfilePage()>:
c0011c84:	55                   	push   ebp
c0011c85:	31 d2                	xor    edx,edx
c0011c87:	57                   	push   edi
c0011c88:	56                   	push   esi
c0011c89:	53                   	push   ebx
c0011c8a:	83 ec 0c             	sub    esp,0xc
c0011c8d:	8b 0d 4c d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d44c
c0011c93:	a1 50 d4 02 c0       	mov    eax,ds:0xc002d450
c0011c98:	f7 f1                	div    ecx
c0011c9a:	39 0d 50 d4 02 c0    	cmp    DWORD PTR ds:0xc002d450,ecx
c0011ca0:	72 2d                	jb     c0011ccf <Virt::allocateSwapfilePage()+0x4b>
c0011ca2:	8b 35 28 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e628
c0011ca8:	8b 16                	mov    edx,DWORD PTR [esi]
c0011caa:	f6 c2 01             	test   dl,0x1
c0011cad:	74 3c                	je     c0011ceb <Virt::allocateSwapfilePage()+0x67>
c0011caf:	31 c9                	xor    ecx,ecx
c0011cb1:	bf 01 00 00 00       	mov    edi,0x1
c0011cb6:	eb 12                	jmp    c0011cca <Virt::allocateSwapfilePage()+0x46>
c0011cb8:	89 fd                	mov    ebp,edi
c0011cba:	89 ca                	mov    edx,ecx
c0011cbc:	d3 e5                	shl    ebp,cl
c0011cbe:	c1 ea 05             	shr    edx,0x5
c0011cc1:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc6:	85 ea                	test   edx,ebp
c0011cc8:	74 2a                	je     c0011cf4 <Virt::allocateSwapfilePage()+0x70>
c0011cca:	41                   	inc    ecx
c0011ccb:	39 c8                	cmp    eax,ecx
c0011ccd:	77 e9                	ja     c0011cb8 <Virt::allocateSwapfilePage()+0x34>
c0011ccf:	83 ec 0c             	sub    esp,0xc
c0011cd2:	68 51 a7 02 c0       	push   0xc002a751
c0011cd7:	e8 45 89 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0011cdc:	83 c4 10             	add    esp,0x10
c0011cdf:	31 c9                	xor    ecx,ecx
c0011ce1:	83 c4 0c             	add    esp,0xc
c0011ce4:	89 c8                	mov    eax,ecx
c0011ce6:	5b                   	pop    ebx
c0011ce7:	5e                   	pop    esi
c0011ce8:	5f                   	pop    edi
c0011ce9:	5d                   	pop    ebp
c0011cea:	c3                   	ret    
c0011ceb:	89 f3                	mov    ebx,esi
c0011ced:	bd 01 00 00 00       	mov    ebp,0x1
c0011cf2:	31 c9                	xor    ecx,ecx
c0011cf4:	09 ea                	or     edx,ebp
c0011cf6:	89 c8                	mov    eax,ecx
c0011cf8:	89 13                	mov    DWORD PTR [ebx],edx
c0011cfa:	83 c4 0c             	add    esp,0xc
c0011cfd:	5b                   	pop    ebx
c0011cfe:	5e                   	pop    esi
c0011cff:	5f                   	pop    edi
c0011d00:	5d                   	pop    ebp
c0011d01:	c3                   	ret    

c0011d02 <Virt::virtualMemorySetup()>:
c0011d02:	53                   	push   ebx
c0011d03:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d08:	83 ec 08             	sub    esp,0x8
c0011d0b:	6a 0f                	push   0xf
c0011d0d:	53                   	push   ebx
c0011d0e:	43                   	inc    ebx
c0011d0f:	e8 d6 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d14:	59                   	pop    ecx
c0011d15:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d1b:	58                   	pop    eax
c0011d1c:	75 ed                	jne    c0011d0b <Virt::virtualMemorySetup()+0x9>
c0011d1e:	83 ec 08             	sub    esp,0x8
c0011d21:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d26:	68 00 00 00 c8       	push   0xc8000000
c0011d2b:	68 68 a7 02 c0       	push   0xc002a768
c0011d30:	e8 3f 12 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0011d35:	58                   	pop    eax
c0011d36:	5a                   	pop    edx
c0011d37:	68 00 f0 ff ef       	push   0xeffff000
c0011d3c:	68 7c a7 02 c0       	push   0xc002a77c
c0011d41:	e8 2e 12 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0011d46:	83 c4 10             	add    esp,0x10
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	6a 00                	push   0x0
c0011d4e:	53                   	push   ebx
c0011d4f:	43                   	inc    ebx
c0011d50:	e8 95 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d5e:	75 e9                	jne    c0011d49 <Virt::virtualMemorySetup()+0x47>
c0011d60:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d65:	83 ec 08             	sub    esp,0x8
c0011d68:	6a 0f                	push   0xf
c0011d6a:	53                   	push   ebx
c0011d6b:	43                   	inc    ebx
c0011d6c:	e8 79 fd ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d71:	83 c4 10             	add    esp,0x10
c0011d74:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d7a:	75 e9                	jne    c0011d65 <Virt::virtualMemorySetup()+0x63>
c0011d7c:	83 c4 08             	add    esp,0x8
c0011d7f:	5b                   	pop    ebx
c0011d80:	c3                   	ret    

c0011d81 <Virt::swappingSetup()>:
c0011d81:	83 ec 14             	sub    esp,0x14
c0011d84:	31 d2                	xor    edx,edx
c0011d86:	a1 50 d4 02 c0       	mov    eax,ds:0xc002d450
c0011d8b:	f7 35 4c d4 02 c0    	div    DWORD PTR ds:0xc002d44c
c0011d91:	c1 e8 05             	shr    eax,0x5
c0011d94:	50                   	push   eax
c0011d95:	68 90 a7 02 c0       	push   0xc002a790
c0011d9a:	e8 d5 11 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0011d9f:	a1 50 d4 02 c0       	mov    eax,ds:0xc002d450
c0011da4:	31 d2                	xor    edx,edx
c0011da6:	f7 35 4c d4 02 c0    	div    DWORD PTR ds:0xc002d44c
c0011dac:	c1 e8 05             	shr    eax,0x5
c0011daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0011db2:	e8 8c da ff ff       	call   c000f843 <malloc>
c0011db7:	83 c4 0c             	add    esp,0xc
c0011dba:	89 c1                	mov    ecx,eax
c0011dbc:	a3 28 e6 02 c0       	mov    ds:0xc002e628,eax
c0011dc1:	31 d2                	xor    edx,edx
c0011dc3:	a1 50 d4 02 c0       	mov    eax,ds:0xc002d450
c0011dc8:	f7 35 4c d4 02 c0    	div    DWORD PTR ds:0xc002d44c
c0011dce:	c1 e8 05             	shr    eax,0x5
c0011dd1:	50                   	push   eax
c0011dd2:	6a 00                	push   0x0
c0011dd4:	51                   	push   ecx
c0011dd5:	e8 9e e9 fe ff       	call   c0000778 <memset>
c0011dda:	83 c4 1c             	add    esp,0x1c
c0011ddd:	c3                   	ret    

c0011dde <Virt::getAKernelVAS()>:
c0011dde:	a1 2c e6 02 c0       	mov    eax,ds:0xc002e62c
c0011de3:	c3                   	ret    

c0011de4 <Virt::setupPageSwapping(int)>:
c0011de4:	57                   	push   edi
c0011de5:	56                   	push   esi
c0011de6:	53                   	push   ebx
c0011de7:	83 ec 1c             	sub    esp,0x1c
c0011dea:	68 14 01 00 00       	push   0x114
c0011def:	e8 4f da ff ff       	call   c000f843 <malloc>
c0011df4:	83 c4 0c             	add    esp,0xc
c0011df7:	89 c6                	mov    esi,eax
c0011df9:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c0011dff:	68 ab a7 02 c0       	push   0xc002a7ab
c0011e04:	50                   	push   eax
c0011e05:	e8 c2 16 00 00       	call   c00134cc <File::File(char const*, Process*)>
c0011e0a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e0d:	e8 96 18 00 00       	call   c00136a8 <File::unlink()>
c0011e12:	58                   	pop    eax
c0011e13:	5a                   	pop    edx
c0011e14:	6a 12                	push   0x12
c0011e16:	56                   	push   esi
c0011e17:	e8 14 17 00 00       	call   c0013530 <File::open(FileOpenMode)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	0f 85 ca 00 00 00    	jne    c0011ef1 <Virt::setupPageSwapping(int)+0x10d>
c0011e27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e33:	c1 e3 08             	shl    ebx,0x8
c0011e36:	83 ec 0c             	sub    esp,0xc
c0011e39:	68 00 00 01 00       	push   0x10000
c0011e3e:	e8 00 da ff ff       	call   c000f843 <malloc>
c0011e43:	83 c4 0c             	add    esp,0xc
c0011e46:	89 c7                	mov    edi,eax
c0011e48:	68 00 00 01 00       	push   0x10000
c0011e4d:	6a 00                	push   0x0
c0011e4f:	50                   	push   eax
c0011e50:	e8 23 e9 fe ff       	call   c0000778 <memset>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	85 db                	test   ebx,ebx
c0011e5a:	79 03                	jns    c0011e5f <Virt::setupPageSwapping(int)+0x7b>
c0011e5c:	83 c3 0f             	add    ebx,0xf
c0011e5f:	c1 fb 04             	sar    ebx,0x4
c0011e62:	4b                   	dec    ebx
c0011e63:	83 fb ff             	cmp    ebx,0xffffffff
c0011e66:	74 4b                	je     c0011eb3 <Virt::setupPageSwapping(int)+0xcf>
c0011e68:	83 ec 0c             	sub    esp,0xc
c0011e6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e6d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e71:	52                   	push   edx
c0011e72:	57                   	push   edi
c0011e73:	6a 00                	push   0x0
c0011e75:	68 00 00 01 00       	push   0x10000
c0011e7a:	56                   	push   esi
c0011e7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e7e:	83 c4 20             	add    esp,0x20
c0011e81:	85 c0                	test   eax,eax
c0011e83:	75 59                	jne    c0011ede <Virt::setupPageSwapping(int)+0xfa>
c0011e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e89:	3d 00 00 01 00       	cmp    eax,0x10000
c0011e8e:	74 d2                	je     c0011e62 <Virt::setupPageSwapping(int)+0x7e>
c0011e90:	83 ec 08             	sub    esp,0x8
c0011e93:	4b                   	dec    ebx
c0011e94:	50                   	push   eax
c0011e95:	68 fe a7 02 c0       	push   0xc002a7fe
c0011e9a:	e8 d5 10 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0011e9f:	c7 04 24 07 a8 02 c0 	mov    DWORD PTR [esp],0xc002a807
c0011ea6:	e8 76 87 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	83 fb ff             	cmp    ebx,0xffffffff
c0011eb1:	75 b5                	jne    c0011e68 <Virt::setupPageSwapping(int)+0x84>
c0011eb3:	83 ec 0c             	sub    esp,0xc
c0011eb6:	56                   	push   esi
c0011eb7:	e8 d2 16 00 00       	call   c001358e <File::close()>
c0011ebc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ebf:	e8 9f d9 ff ff       	call   c000f863 <rfree>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	85 f6                	test   esi,esi
c0011ec9:	74 0c                	je     c0011ed7 <Virt::setupPageSwapping(int)+0xf3>
c0011ecb:	83 ec 0c             	sub    esp,0xc
c0011ece:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ed0:	56                   	push   esi
c0011ed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ed4:	83 c4 10             	add    esp,0x10
c0011ed7:	83 c4 10             	add    esp,0x10
c0011eda:	5b                   	pop    ebx
c0011edb:	5e                   	pop    esi
c0011edc:	5f                   	pop    edi
c0011edd:	c3                   	ret    
c0011ede:	83 ec 08             	sub    esp,0x8
c0011ee1:	50                   	push   eax
c0011ee2:	68 e6 a7 02 c0       	push   0xc002a7e6
c0011ee7:	e8 88 10 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	eb 94                	jmp    c0011e85 <Virt::setupPageSwapping(int)+0xa1>
c0011ef1:	83 ec 08             	sub    esp,0x8
c0011ef4:	50                   	push   eax
c0011ef5:	68 c2 a7 02 c0       	push   0xc002a7c2
c0011efa:	e8 75 10 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0011eff:	c7 04 24 cb a7 02 c0 	mov    DWORD PTR [esp],0xc002a7cb
c0011f06:	e8 16 87 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	e9 14 ff ff ff       	jmp    c0011e27 <Virt::setupPageSwapping(int)+0x43>
c0011f13:	90                   	nop

c0011f14 <VAS::VAS()>:
c0011f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f23:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f2e:	a3 2c e6 02 c0       	mov    ds:0xc002e62c,eax
c0011f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f37:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f3f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f46:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f4d:	90                   	nop
c0011f4e:	c3                   	ret    
c0011f4f:	90                   	nop

c0011f50 <VAS::VAS(VAS*)>:
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f62:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f69:	83 ec 0c             	sub    esp,0xc
c0011f6c:	68 c4 a5 02 c0       	push   0xc002a5c4
c0011f71:	e8 ab 86 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	90                   	nop
c0011f7a:	83 c4 0c             	add    esp,0xc
c0011f7d:	c3                   	ret    

c0011f7e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f82:	89 c2                	mov    edx,eax
c0011f84:	c1 e8 0a             	shr    eax,0xa
c0011f87:	c1 ea 16             	shr    edx,0x16
c0011f8a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f8f:	19 c9                	sbb    ecx,ecx
c0011f91:	c1 e2 0c             	shl    edx,0xc
c0011f94:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f9a:	25 fc 0f 00 00       	and    eax,0xffc
c0011f9f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fa6:	01 d0                	add    eax,edx
c0011fa8:	c3                   	ret    
c0011fa9:	90                   	nop

c0011faa <VAS::getPageTableEntry(unsigned long)>:
c0011faa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fae:	89 ca                	mov    edx,ecx
c0011fb0:	c1 e9 0a             	shr    ecx,0xa
c0011fb3:	c1 ea 16             	shr    edx,0x16
c0011fb6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011fbc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011fc2:	c1 e0 0c             	shl    eax,0xc
c0011fc5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011fc8:	c3                   	ret    

c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011fc9:	57                   	push   edi
c0011fca:	56                   	push   esi
c0011fcb:	be 01 00 00 00       	mov    esi,0x1
c0011fd0:	53                   	push   ebx
c0011fd1:	83 ec 10             	sub    esp,0x10
c0011fd4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011fd8:	c1 eb 0c             	shr    ebx,0xc
c0011fdb:	eb 3f                	jmp    c001201c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011fdd:	e8 fc fd ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0011fe2:	83 ec 08             	sub    esp,0x8
c0011fe5:	57                   	push   edi
c0011fe6:	50                   	push   eax
c0011fe7:	e8 be ff ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ff5:	f6 c4 04             	test   ah,0x4
c0011ff8:	75 5f                	jne    c0012059 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ffa:	80 fa 04             	cmp    dl,0x4
c0011ffd:	74 78                	je     c0012077 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fff:	80 fa 02             	cmp    dl,0x2
c0012002:	0f 84 88 00 00 00    	je     c0012090 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012008:	80 fa 03             	cmp    dl,0x3
c001200b:	0f 84 ad 00 00 00    	je     c00120be <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0012011:	fe ca                	dec    dl
c0012013:	0f 84 92 00 00 00    	je     c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012019:	43                   	inc    ebx
c001201a:	31 f6                	xor    esi,esi
c001201c:	53                   	push   ebx
c001201d:	e8 fd fa ff ff       	call   c0011b1f <Virt::getPageState(unsigned long)>
c0012022:	5f                   	pop    edi
c0012023:	89 df                	mov    edi,ebx
c0012025:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012029:	c1 e7 0c             	shl    edi,0xc
c001202c:	84 c0                	test   al,al
c001202e:	75 ad                	jne    c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	68 0d a8 02 c0       	push   0xc002a80d
c0012038:	e8 e4 85 00 00       	call   c001a621 <Krnl::panic(char const*)>
c001203d:	e8 9c fd ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0012042:	5a                   	pop    edx
c0012043:	59                   	pop    ecx
c0012044:	57                   	push   edi
c0012045:	50                   	push   eax
c0012046:	e8 5f ff ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001204b:	83 c4 10             	add    esp,0x10
c001204e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012050:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012054:	f6 c4 04             	test   ah,0x4
c0012057:	74 c0                	je     c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012059:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001205d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	50                   	push   eax
c0012066:	e8 f0 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012072:	80 fa 04             	cmp    dl,0x4
c0012075:	75 88                	jne    c0011fff <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012077:	89 f0                	mov    eax,esi
c0012079:	84 c0                	test   al,al
c001207b:	75 47                	jne    c00120c4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001207d:	c7 44 24 20 e8 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a5e8
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	5b                   	pop    ebx
c0012089:	5e                   	pop    esi
c001208a:	5f                   	pop    edi
c001208b:	e9 91 85 00 00       	jmp    c001a621 <Krnl::panic(char const*)>
c0012090:	89 f0                	mov    eax,esi
c0012092:	84 c0                	test   al,al
c0012094:	75 15                	jne    c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	68 29 a8 02 c0       	push   0xc002a829
c001209e:	e8 7e 85 00 00       	call   c001a621 <Krnl::panic(char const*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	e9 6e ff ff ff       	jmp    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120ab:	83 ec 08             	sub    esp,0x8
c00120ae:	6a 00                	push   0x0
c00120b0:	53                   	push   ebx
c00120b1:	e8 34 fa ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	e9 5b ff ff ff       	jmp    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120be:	89 f0                	mov    eax,esi
c00120c0:	84 c0                	test   al,al
c00120c2:	75 15                	jne    c00120d9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00120c4:	83 ec 08             	sub    esp,0x8
c00120c7:	6a 00                	push   0x0
c00120c9:	53                   	push   ebx
c00120ca:	e8 1b fa ff ff       	call   c0011aea <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	5b                   	pop    ebx
c00120d6:	5e                   	pop    esi
c00120d7:	5f                   	pop    edi
c00120d8:	c3                   	ret    
c00120d9:	c7 44 24 20 45 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a845
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	5b                   	pop    ebx
c00120e5:	5e                   	pop    esi
c00120e6:	5f                   	pop    edi
c00120e7:	e9 35 85 00 00       	jmp    c001a621 <Krnl::panic(char const*)>

c00120ec <VAS::freeAllocatedPages(unsigned long)>:
c00120ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120f4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120f8:	74 09                	je     c0012103 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120fe:	e9 c6 fe ff ff       	jmp    c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012103:	c7 44 24 04 0c a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a60c
c001210b:	e9 64 0e 00 00       	jmp    c0012f74 <Dbg::kprintf(char const*, ...)>

c0012110 <VAS::virtualToPhysical(unsigned long)>:
c0012110:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012114:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012118:	e8 8d fe ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001211d:	5a                   	pop    edx
c001211e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012120:	59                   	pop    ecx
c0012121:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012126:	c3                   	ret    
c0012127:	90                   	nop

c0012128 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012128:	55                   	push   ebp
c0012129:	57                   	push   edi
c001212a:	56                   	push   esi
c001212b:	53                   	push   ebx
c001212c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012130:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012134:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012138:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001213c:	85 db                	test   ebx,ebx
c001213e:	7e 22                	jle    c0012162 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012140:	c1 e3 0c             	shl    ebx,0xc
c0012143:	01 f3                	add    ebx,esi
c0012145:	56                   	push   esi
c0012146:	81 c6 00 10 00 00    	add    esi,0x1000
c001214c:	55                   	push   ebp
c001214d:	e8 58 fe ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012152:	5a                   	pop    edx
c0012153:	59                   	pop    ecx
c0012154:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012156:	21 f9                	and    ecx,edi
c0012158:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001215c:	39 f3                	cmp    ebx,esi
c001215e:	89 08                	mov    DWORD PTR [eax],ecx
c0012160:	75 e3                	jne    c0012145 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012162:	5b                   	pop    ebx
c0012163:	5e                   	pop    esi
c0012164:	5f                   	pop    edi
c0012165:	5d                   	pop    ebp
c0012166:	c3                   	ret    
c0012167:	90                   	nop

c0012168 <VAS::setToWriteCombining(unsigned long, int)>:
c0012168:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001216d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012173:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001217a:	75 01                	jne    c001217d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001217c:	c3                   	ret    
c001217d:	68 80 00 00 00       	push   0x80
c0012182:	6a ff                	push   0xffffffff
c0012184:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012188:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001218c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012190:	e8 93 ff ff ff       	call   c0012128 <VAS::reflagRange(unsigned long, int, int, int)>
c0012195:	83 c4 14             	add    esp,0x14
c0012198:	c3                   	ret    
c0012199:	90                   	nop

c001219a <VAS::mapOtherVASIn(bool, VAS*)>:
c001219a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001219f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121a3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121ad:	19 c0                	sbb    eax,eax
c00121af:	83 ca 03             	or     edx,0x3
c00121b2:	83 e0 fc             	and    eax,0xfffffffc
c00121b5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121bc:	0f 20 d8             	mov    eax,cr3
c00121bf:	0f 22 d8             	mov    cr3,eax
c00121c2:	c3                   	ret    
c00121c3:	90                   	nop

c00121c4 <VAS::~VAS()>:
c00121c4:	83 ec 2c             	sub    esp,0x2c
c00121c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121cf:	e8 42 bc 00 00       	call   c001de16 <lockScheduler()>
c00121d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00121db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121de:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121e4:	83 ec 04             	sub    esp,0x4
c00121e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00121eb:	6a 01                	push   0x1
c00121ed:	50                   	push   eax
c00121ee:	e8 a7 ff ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121fe:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012206:	0f 8f d7 00 00 00    	jg     c00122e3 <VAS::~VAS()+0x11f>
c001220c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012210:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012213:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012217:	c1 e2 02             	shl    edx,0x2
c001221a:	01 d0                	add    eax,edx
c001221c:	8b 00                	mov    eax,DWORD PTR [eax]
c001221e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012226:	83 e0 01             	and    eax,0x1
c0012229:	0f 84 ab 00 00 00    	je     c00122da <VAS::~VAS()+0x116>
c001222f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012237:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001223f:	7f 75                	jg     c00122b6 <VAS::~VAS()+0xf2>
c0012241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012245:	c1 e0 0a             	shl    eax,0xa
c0012248:	89 c2                	mov    edx,eax
c001224a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001224e:	01 d0                	add    eax,edx
c0012250:	c1 e0 0c             	shl    eax,0xc
c0012253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012257:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001225c:	8b 00                	mov    eax,DWORD PTR [eax]
c001225e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012261:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012267:	83 ec 04             	sub    esp,0x4
c001226a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001226e:	6a 01                	push   0x1
c0012270:	50                   	push   eax
c0012271:	e8 08 fd ff ff       	call   c0011f7e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012276:	83 c4 10             	add    esp,0x10
c0012279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001227d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012281:	8b 00                	mov    eax,DWORD PTR [eax]
c0012283:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001228b:	25 01 04 00 00       	and    eax,0x401
c0012290:	3d 01 04 00 00       	cmp    eax,0x401
c0012295:	75 19                	jne    c00122b0 <VAS::~VAS()+0xec>
c0012297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001229b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122a0:	83 ec 0c             	sub    esp,0xc
c00122a3:	50                   	push   eax
c00122a4:	e8 b2 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122b0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122b4:	eb 81                	jmp    c0012237 <VAS::~VAS()+0x73>
c00122b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122ba:	25 00 04 00 00       	and    eax,0x400
c00122bf:	74 19                	je     c00122da <VAS::~VAS()+0x116>
c00122c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ca:	83 ec 0c             	sub    esp,0xc
c00122cd:	50                   	push   eax
c00122ce:	e8 88 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122da:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122de:	e9 1b ff ff ff       	jmp    c00121fe <VAS::~VAS()+0x3a>
c00122e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	50                   	push   eax
c00122ee:	e8 d6 fc ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122fd:	83 ec 0c             	sub    esp,0xc
c0012300:	50                   	push   eax
c0012301:	e8 55 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001230d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012311:	c1 e0 02             	shl    eax,0x2
c0012314:	83 ec 08             	sub    esp,0x8
c0012317:	50                   	push   eax
c0012318:	68 30 a6 02 c0       	push   0xc002a630
c001231d:	e8 52 0c 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012322:	83 c4 10             	add    esp,0x10
c0012325:	e8 ee ba 00 00       	call   c001de18 <unlockScheduler()>
c001232a:	90                   	nop
c001232b:	83 c4 2c             	add    esp,0x2c
c001232e:	c3                   	ret    
c001232f:	90                   	nop

c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012330:	55                   	push   ebp
c0012331:	57                   	push   edi
c0012332:	56                   	push   esi
c0012333:	53                   	push   ebx
c0012334:	83 ec 1c             	sub    esp,0x1c
c0012337:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001233b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001233f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012345:	77 08                	ja     c001234f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012347:	0f 20 d8             	mov    eax,cr3
c001234a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001234d:	75 47                	jne    c0012396 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001234f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012353:	09 d8                	or     eax,ebx
c0012355:	a9 ff 0f 00 00       	test   eax,0xfff
c001235a:	75 57                	jne    c00123b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001235c:	89 de                	mov    esi,ebx
c001235e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012361:	c1 ee 16             	shr    esi,0x16
c0012364:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001236b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001236f:	74 54                	je     c00123c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012375:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001237b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001237f:	c1 e6 0c             	shl    esi,0xc
c0012382:	c1 eb 0a             	shr    ebx,0xa
c0012385:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001238b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001238e:	83 c4 1c             	add    esp,0x1c
c0012391:	5b                   	pop    ebx
c0012392:	5e                   	pop    esi
c0012393:	5f                   	pop    edi
c0012394:	5d                   	pop    ebp
c0012395:	c3                   	ret    
c0012396:	83 ec 0c             	sub    esp,0xc
c0012399:	68 50 a6 02 c0       	push   0xc002a650
c001239e:	e8 d1 0b 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123aa:	09 d8                	or     eax,ebx
c00123ac:	a9 ff 0f 00 00       	test   eax,0xfff
c00123b1:	74 a9                	je     c001235c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123b3:	83 ec 0c             	sub    esp,0xc
c00123b6:	68 b8 a6 02 c0       	push   0xc002a6b8
c00123bb:	e8 61 82 00 00       	call   c001a621 <Krnl::panic(char const*)>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	eb 97                	jmp    c001235c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123c9:	e8 17 db ff ff       	call   c000fee5 <Phys::allocatePage()>
c00123ce:	89 c5                	mov    ebp,eax
c00123d0:	e8 09 fa ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c00123d5:	83 ec 0c             	sub    esp,0xc
c00123d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00123dc:	6a 01                	push   0x1
c00123de:	e8 60 f7 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c00123e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123ea:	6a 01                	push   0x1
c00123ec:	50                   	push   eax
c00123ed:	55                   	push   ebp
c00123ee:	81 cd 07 04 00 00    	or     ebp,0x407
c00123f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123f8:	51                   	push   ecx
c00123f9:	e8 26 02 00 00       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123fe:	83 c4 1c             	add    esp,0x1c
c0012401:	68 00 10 00 00       	push   0x1000
c0012406:	6a 00                	push   0x0
c0012408:	50                   	push   eax
c0012409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001240d:	e8 66 e3 fe ff       	call   c0000778 <memset>
c0012412:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012416:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012419:	e8 ab fb ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001241e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012422:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001242b:	e9 41 ff ff ff       	jmp    c0012371 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012430 <VAS::allocatePages(int, int)>:
c0012430:	55                   	push   ebp
c0012431:	57                   	push   edi
c0012432:	56                   	push   esi
c0012433:	53                   	push   ebx
c0012434:	83 ec 1c             	sub    esp,0x1c
c0012437:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001243b:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0012440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012446:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001244c:	83 e0 01             	and    eax,0x1
c001244f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012453:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012457:	0f 85 cc 00 00 00    	jne    c0012529 <VAS::allocatePages(int, int)+0xf9>
c001245d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012464:	85 c0                	test   eax,eax
c0012466:	0f 84 a1 00 00 00    	je     c001250d <VAS::allocatePages(int, int)+0xdd>
c001246c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012470:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012474:	c1 e6 0c             	shl    esi,0xc
c0012477:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001247b:	85 c0                	test   eax,eax
c001247d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012480:	7e 33                	jle    c00124b5 <VAS::allocatePages(int, int)+0x85>
c0012482:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012486:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001248a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012490:	e8 50 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012495:	55                   	push   ebp
c0012496:	53                   	push   ebx
c0012497:	50                   	push   eax
c0012498:	57                   	push   edi
c0012499:	e8 92 fe ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001249e:	83 c4 10             	add    esp,0x10
c00124a1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124a6:	74 03                	je     c00124ab <VAS::allocatePages(int, int)+0x7b>
c00124a8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124b1:	39 de                	cmp    esi,ebx
c00124b3:	75 db                	jne    c0012490 <VAS::allocatePages(int, int)+0x60>
c00124b5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ba:	75 12                	jne    c00124ce <VAS::allocatePages(int, int)+0x9e>
c00124bc:	0f 20 d8             	mov    eax,cr3
c00124bf:	0f 22 d8             	mov    cr3,eax
c00124c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124c6:	83 c4 1c             	add    esp,0x1c
c00124c9:	5b                   	pop    ebx
c00124ca:	5e                   	pop    esi
c00124cb:	5f                   	pop    edi
c00124cc:	5d                   	pop    ebp
c00124cd:	c3                   	ret    
c00124ce:	c1 ee 0a             	shr    esi,0xa
c00124d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124db:	c1 eb 0a             	shr    ebx,0xa
c00124de:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124e4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124ea:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124f0:	39 c3                	cmp    ebx,eax
c00124f2:	77 ce                	ja     c00124c2 <VAS::allocatePages(int, int)+0x92>
c00124f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	39 d8                	cmp    eax,ebx
c00124ff:	73 f3                	jae    c00124f4 <VAS::allocatePages(int, int)+0xc4>
c0012501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012505:	83 c4 1c             	add    esp,0x1c
c0012508:	5b                   	pop    ebx
c0012509:	5e                   	pop    esi
c001250a:	5f                   	pop    edi
c001250b:	5d                   	pop    ebp
c001250c:	c3                   	ret    
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	68 dc a6 02 c0       	push   0xc002a6dc
c0012515:	e8 07 81 00 00       	call   c001a621 <Krnl::panic(char const*)>
c001251a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001251d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	e9 43 ff ff ff       	jmp    c001246c <VAS::allocatePages(int, int)+0x3c>
c0012529:	83 ec 0c             	sub    esp,0xc
c001252c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012530:	e8 0e f6 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0012535:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012541:	0f 87 9b 00 00 00    	ja     c00125e2 <VAS::allocatePages(int, int)+0x1b2>
c0012547:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001254b:	85 d2                	test   edx,edx
c001254d:	7e 3c                	jle    c001258b <VAS::allocatePages(int, int)+0x15b>
c001254f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012553:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012557:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001255b:	c1 e5 0c             	shl    ebp,0xc
c001255e:	81 ce 00 04 00 00    	or     esi,0x400
c0012564:	01 dd                	add    ebp,ebx
c0012566:	e8 7a d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001256b:	56                   	push   esi
c001256c:	53                   	push   ebx
c001256d:	50                   	push   eax
c001256e:	57                   	push   edi
c001256f:	e8 bc fd ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012574:	83 c4 10             	add    esp,0x10
c0012577:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001257c:	74 03                	je     c0012581 <VAS::allocatePages(int, int)+0x151>
c001257e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012581:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012587:	39 dd                	cmp    ebp,ebx
c0012589:	75 db                	jne    c0012566 <VAS::allocatePages(int, int)+0x136>
c001258b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012590:	0f 84 26 ff ff ff    	je     c00124bc <VAS::allocatePages(int, int)+0x8c>
c0012596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001259a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001259e:	89 d3                	mov    ebx,edx
c00125a0:	c1 e0 0c             	shl    eax,0xc
c00125a3:	c1 eb 0a             	shr    ebx,0xa
c00125a6:	01 d0                	add    eax,edx
c00125a8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ae:	c1 e8 0a             	shr    eax,0xa
c00125b1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125bc:	2d 00 00 40 00       	sub    eax,0x400000
c00125c1:	39 c3                	cmp    ebx,eax
c00125c3:	0f 87 f9 fe ff ff    	ja     c00124c2 <VAS::allocatePages(int, int)+0x92>
c00125c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d2:	39 d8                	cmp    eax,ebx
c00125d4:	73 f3                	jae    c00125c9 <VAS::allocatePages(int, int)+0x199>
c00125d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125da:	83 c4 1c             	add    esp,0x1c
c00125dd:	5b                   	pop    ebx
c00125de:	5e                   	pop    esi
c00125df:	5f                   	pop    edi
c00125e0:	5d                   	pop    ebp
c00125e1:	c3                   	ret    
c00125e2:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00125e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125ed:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125f4:	0f 84 4d ff ff ff    	je     c0012547 <VAS::allocatePages(int, int)+0x117>
c00125fa:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012602:	e9 40 ff ff ff       	jmp    c0012547 <VAS::allocatePages(int, int)+0x117>
c0012607:	90                   	nop

c0012608 <VAS::setCPUSpecific(unsigned long)>:
c0012608:	83 ec 0c             	sub    esp,0xc
c001260b:	6a 05                	push   0x5
c001260d:	68 00 00 40 c2       	push   0xc2400000
c0012612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261a:	e8 11 fd ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001261f:	83 c4 1c             	add    esp,0x1c
c0012622:	c3                   	ret    
c0012623:	90                   	nop

c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012624:	55                   	push   ebp
c0012625:	57                   	push   edi
c0012626:	56                   	push   esi
c0012627:	53                   	push   ebx
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0012630:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012634:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001263a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001263e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012644:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012648:	83 e0 01             	and    eax,0x1
c001264b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001264f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012653:	85 c0                	test   eax,eax
c0012655:	7e 39                	jle    c0012690 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012657:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001265b:	89 f3                	mov    ebx,esi
c001265d:	c1 e0 0c             	shl    eax,0xc
c0012660:	01 f0                	add    eax,esi
c0012662:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012666:	55                   	push   ebp
c0012667:	53                   	push   ebx
c0012668:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001266c:	29 f0                	sub    eax,esi
c001266e:	01 d8                	add    eax,ebx
c0012670:	50                   	push   eax
c0012671:	57                   	push   edi
c0012672:	e8 b9 fc ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012677:	83 c4 10             	add    esp,0x10
c001267a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001267f:	74 03                	je     c0012684 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012681:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012684:	81 c3 00 10 00 00    	add    ebx,0x1000
c001268a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001268e:	75 d6                	jne    c0012666 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012690:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012695:	75 10                	jne    c00126a7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012697:	0f 20 d8             	mov    eax,cr3
c001269a:	0f 22 d8             	mov    cr3,eax
c001269d:	83 c4 1c             	add    esp,0x1c
c00126a0:	89 f0                	mov    eax,esi
c00126a2:	5b                   	pop    ebx
c00126a3:	5e                   	pop    esi
c00126a4:	5f                   	pop    edi
c00126a5:	5d                   	pop    ebp
c00126a6:	c3                   	ret    
c00126a7:	89 f3                	mov    ebx,esi
c00126a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126ad:	c1 eb 0a             	shr    ebx,0xa
c00126b0:	c1 e0 0c             	shl    eax,0xc
c00126b3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126b9:	01 f0                	add    eax,esi
c00126bb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126c1:	c1 e8 0a             	shr    eax,0xa
c00126c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126c9:	2d 00 00 40 00       	sub    eax,0x400000
c00126ce:	39 c3                	cmp    ebx,eax
c00126d0:	77 cb                	ja     c001269d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126d2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126d5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126db:	39 d8                	cmp    eax,ebx
c00126dd:	73 f3                	jae    c00126d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126df:	83 c4 1c             	add    esp,0x1c
c00126e2:	89 f0                	mov    eax,esi
c00126e4:	5b                   	pop    ebx
c00126e5:	5e                   	pop    esi
c00126e6:	5f                   	pop    edi
c00126e7:	5d                   	pop    ebp
c00126e8:	c3                   	ret    
c00126e9:	90                   	nop

c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126ea:	55                   	push   ebp
c00126eb:	57                   	push   edi
c00126ec:	56                   	push   esi
c00126ed:	53                   	push   ebx
c00126ee:	83 ec 1c             	sub    esp,0x1c
c00126f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126f9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126fd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012701:	a9 ff 0f 00 00       	test   eax,0xfff
c0012706:	75 4a                	jne    c0012752 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012708:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001270c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001270f:	c1 eb 16             	shr    ebx,0x16
c0012712:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012719:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001271d:	74 4d                	je     c001276c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001271f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012723:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012727:	c1 e8 0a             	shr    eax,0xa
c001272a:	80 fa 01             	cmp    dl,0x1
c001272d:	19 d2                	sbb    edx,edx
c001272f:	c1 e3 0c             	shl    ebx,0xc
c0012732:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012736:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001273c:	25 fc 0f 00 00       	and    eax,0xffc
c0012741:	01 d8                	add    eax,ebx
c0012743:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001274a:	83 c4 1c             	add    esp,0x1c
c001274d:	5b                   	pop    ebx
c001274e:	5e                   	pop    esi
c001274f:	5f                   	pop    edi
c0012750:	5d                   	pop    ebp
c0012751:	c3                   	ret    
c0012752:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012756:	83 ec 0c             	sub    esp,0xc
c0012759:	68 08 a7 02 c0       	push   0xc002a708
c001275e:	e8 be 7e 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001276a:	eb 9c                	jmp    c0012708 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001276c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012770:	e8 70 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012775:	89 c5                	mov    ebp,eax
c0012777:	e8 62 f6 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012783:	6a 01                	push   0x1
c0012785:	e8 b9 f3 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c001278a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012791:	6a 01                	push   0x1
c0012793:	50                   	push   eax
c0012794:	55                   	push   ebp
c0012795:	81 cd 07 04 00 00    	or     ebp,0x407
c001279b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001279f:	51                   	push   ecx
c00127a0:	e8 7f fe ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127a5:	83 c4 1c             	add    esp,0x1c
c00127a8:	68 00 10 00 00       	push   0x1000
c00127ad:	6a 00                	push   0x0
c00127af:	50                   	push   eax
c00127b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127b4:	e8 bf df fe ff       	call   c0000778 <memset>
c00127b9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127bd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127c0:	e8 04 f8 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c00127c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00127c8:	83 c4 10             	add    esp,0x10
c00127cb:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127d2:	e9 48 ff ff ff       	jmp    c001271f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00127d7:	90                   	nop

c00127d8 <VAS::VAS(bool)>:
c00127d8:	53                   	push   ebx
c00127d9:	83 ec 28             	sub    esp,0x28
c00127dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00127fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012802:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012805:	e8 db d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001280a:	89 c2                	mov    edx,eax
c001280c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012810:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012813:	e8 c6 f5 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0012818:	89 c3                	mov    ebx,eax
c001281a:	83 ec 0c             	sub    esp,0xc
c001281d:	6a 01                	push   0x1
c001281f:	e8 1f f3 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0012824:	83 c4 10             	add    esp,0x10
c0012827:	89 c2                	mov    edx,eax
c0012829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012830:	83 ec 0c             	sub    esp,0xc
c0012833:	6a 03                	push   0x3
c0012835:	6a 01                	push   0x1
c0012837:	52                   	push   edx
c0012838:	50                   	push   eax
c0012839:	53                   	push   ebx
c001283a:	e8 e5 fd ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001283f:	83 c4 20             	add    esp,0x20
c0012842:	89 c2                	mov    edx,eax
c0012844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012848:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001284b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012853:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001285b:	7f 1c                	jg     c0012879 <VAS::VAS(bool)+0xa1>
c001285d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012861:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012864:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012868:	c1 e2 02             	shl    edx,0x2
c001286b:	01 d0                	add    eax,edx
c001286d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012873:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012877:	eb da                	jmp    c0012853 <VAS::VAS(bool)+0x7b>
c0012879:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012881:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012889:	7f 7a                	jg     c0012905 <VAS::VAS(bool)+0x12d>
c001288b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001288f:	2d 00 02 00 00       	sub    eax,0x200
c0012894:	c1 e0 0c             	shl    eax,0xc
c0012897:	83 c8 03             	or     eax,0x3
c001289a:	89 c2                	mov    edx,eax
c001289c:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00128a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ad:	83 e0 10             	and    eax,0x10
c00128b0:	84 c0                	test   al,al
c00128b2:	74 07                	je     c00128bb <VAS::VAS(bool)+0xe3>
c00128b4:	b8 00 01 00 00       	mov    eax,0x100
c00128b9:	eb 05                	jmp    c00128c0 <VAS::VAS(bool)+0xe8>
c00128bb:	b8 00 00 00 00       	mov    eax,0x0
c00128c0:	09 d0                	or     eax,edx
c00128c2:	89 c1                	mov    ecx,eax
c00128c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128cf:	c1 e2 02             	shl    edx,0x2
c00128d2:	01 d0                	add    eax,edx
c00128d4:	89 ca                	mov    edx,ecx
c00128d6:	89 10                	mov    DWORD PTR [eax],edx
c00128d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128dc:	2d 40 03 00 00       	sub    eax,0x340
c00128e1:	83 f8 7f             	cmp    eax,0x7f
c00128e4:	77 16                	ja     c00128fc <VAS::VAS(bool)+0x124>
c00128e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128f1:	c1 e2 02             	shl    edx,0x2
c00128f4:	01 d0                	add    eax,edx
c00128f6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012900:	e9 7c ff ff ff       	jmp    c0012881 <VAS::VAS(bool)+0xa9>
c0012905:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001290a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012910:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012916:	83 e0 10             	and    eax,0x10
c0012919:	84 c0                	test   al,al
c001291b:	74 07                	je     c0012924 <VAS::VAS(bool)+0x14c>
c001291d:	b8 03 41 00 00       	mov    eax,0x4103
c0012922:	eb 05                	jmp    c0012929 <VAS::VAS(bool)+0x151>
c0012924:	b8 03 40 00 00       	mov    eax,0x4003
c0012929:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001292d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012930:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012936:	89 02                	mov    DWORD PTR [edx],eax
c0012938:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001293d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012943:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012949:	83 ec 08             	sub    esp,0x8
c001294c:	50                   	push   eax
c001294d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012951:	e8 b2 fc ff ff       	call   c0012608 <VAS::setCPUSpecific(unsigned long)>
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001295d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012960:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0012965:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001296b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012971:	83 e0 10             	and    eax,0x10
c0012974:	84 c0                	test   al,al
c0012976:	74 07                	je     c001297f <VAS::VAS(bool)+0x1a7>
c0012978:	b8 00 01 00 00       	mov    eax,0x100
c001297d:	eb 05                	jmp    c0012984 <VAS::VAS(bool)+0x1ac>
c001297f:	b8 00 00 00 00       	mov    eax,0x0
c0012984:	09 c2                	or     edx,eax
c0012986:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001298a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001298d:	05 fc 0f 00 00       	add    eax,0xffc
c0012992:	83 ca 03             	or     edx,0x3
c0012995:	89 10                	mov    DWORD PTR [eax],edx
c0012997:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001299c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a2:	83 ec 0c             	sub    esp,0xc
c00129a5:	50                   	push   eax
c00129a6:	e8 db 1c 00 00       	call   c0014686 <Device::getName()>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	83 ec 08             	sub    esp,0x8
c00129b1:	68 5f a8 02 c0       	push   0xc002a85f
c00129b6:	50                   	push   eax
c00129b7:	e8 04 df fe ff       	call   c00008c0 <strcmp>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	85 c0                	test   eax,eax
c00129c1:	0f 94 c0             	sete   al
c00129c4:	84 c0                	test   al,al
c00129c6:	74 70                	je     c0012a38 <VAS::VAS(bool)+0x260>
c00129c8:	e8 2c b4 00 00       	call   c001ddf9 <disableIRQs()>
c00129cd:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00129d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129d8:	05 7c 09 00 00       	add    eax,0x97c
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	50                   	push   eax
c00129e1:	e8 d6 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129e6:	83 c4 10             	add    esp,0x10
c00129e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129ee:	89 c3                	mov    ebx,eax
c00129f0:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00129f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129fb:	05 7c 09 00 00       	add    eax,0x97c
c0012a00:	83 ec 0c             	sub    esp,0xc
c0012a03:	50                   	push   eax
c0012a04:	e8 b3 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a09:	83 c4 10             	add    esp,0x10
c0012a0c:	83 ec 08             	sub    esp,0x8
c0012a0f:	50                   	push   eax
c0012a10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a14:	e8 91 f5 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012a19:	83 c4 10             	add    esp,0x10
c0012a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a23:	6a 11                	push   0x11
c0012a25:	53                   	push   ebx
c0012a26:	50                   	push   eax
c0012a27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a2b:	e8 00 f9 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	e8 cf b3 00 00       	call   c001de07 <enableIRQs()>
c0012a38:	90                   	nop
c0012a39:	83 c4 28             	add    esp,0x28
c0012a3c:	5b                   	pop    ebx
c0012a3d:	c3                   	ret    

c0012a3e <VAS::evict(unsigned long)>:
c0012a3e:	55                   	push   ebp
c0012a3f:	57                   	push   edi
c0012a40:	56                   	push   esi
c0012a41:	53                   	push   ebx
c0012a42:	83 ec 0c             	sub    esp,0xc
c0012a45:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a49:	e8 36 f2 ff ff       	call   c0011c84 <Virt::allocateSwapfilePage()>
c0012a4e:	89 c7                	mov    edi,eax
c0012a50:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c0012a55:	85 c0                	test   eax,eax
c0012a57:	7e 3d                	jle    c0012a96 <VAS::evict(unsigned long)+0x58>
c0012a59:	89 ee                	mov    esi,ebp
c0012a5b:	31 db                	xor    ebx,ebx
c0012a5d:	83 ec 0c             	sub    esp,0xc
c0012a60:	57                   	push   edi
c0012a61:	e8 0c f2 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012a66:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a69:	01 d8                	add    eax,ebx
c0012a6b:	6a 01                	push   0x1
c0012a6d:	31 d2                	xor    edx,edx
c0012a6f:	43                   	inc    ebx
c0012a70:	52                   	push   edx
c0012a71:	81 c6 00 02 00 00    	add    esi,0x200
c0012a77:	50                   	push   eax
c0012a78:	0f be 05 58 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d458
c0012a7f:	ff 34 85 bc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1644]
c0012a86:	e8 71 3d 00 00       	call   c00167fc <LogicalDisk::write(unsigned long long, int, void*)>
c0012a8b:	83 c4 20             	add    esp,0x20
c0012a8e:	39 1d 4c d4 02 c0    	cmp    DWORD PTR ds:0xc002d44c,ebx
c0012a94:	7f c7                	jg     c0012a5d <VAS::evict(unsigned long)+0x1f>
c0012a96:	83 ec 08             	sub    esp,0x8
c0012a99:	c1 e7 0b             	shl    edi,0xb
c0012a9c:	55                   	push   ebp
c0012a9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa1:	e8 04 f5 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012aa6:	83 c4 0c             	add    esp,0xc
c0012aa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aab:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ab1:	09 d7                	or     edi,edx
c0012ab3:	89 38                	mov    DWORD PTR [eax],edi
c0012ab5:	a1 24 e6 02 c0       	mov    eax,ds:0xc002e624
c0012aba:	40                   	inc    eax
c0012abb:	a3 24 e6 02 c0       	mov    ds:0xc002e624,eax
c0012ac0:	0f 20 da             	mov    edx,cr3
c0012ac3:	0f 22 da             	mov    cr3,edx
c0012ac6:	50                   	push   eax
c0012ac7:	55                   	push   ebp
c0012ac8:	68 6d a8 02 c0       	push   0xc002a86d
c0012acd:	e8 a2 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012ad2:	83 c4 1c             	add    esp,0x1c
c0012ad5:	5b                   	pop    ebx
c0012ad6:	5e                   	pop    esi
c0012ad7:	5f                   	pop    edi
c0012ad8:	5d                   	pop    ebp
c0012ad9:	c3                   	ret    

c0012ada <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012ada:	55                   	push   ebp
c0012adb:	57                   	push   edi
c0012adc:	56                   	push   esi
c0012add:	53                   	push   ebx
c0012ade:	83 ec 14             	sub    esp,0x14
c0012ae1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae5:	68 82 a8 02 c0       	push   0xc002a882
c0012aea:	e8 85 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012aef:	c7 04 24 99 a8 02 c0 	mov    DWORD PTR [esp],0xc002a899
c0012af6:	e8 79 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012afb:	c7 04 24 9d a8 02 c0 	mov    DWORD PTR [esp],0xc002a89d
c0012b02:	e8 6d 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b07:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012b0b:	c7 04 24 a1 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a1
c0012b12:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012b18:	e8 57 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b1d:	c7 04 24 a5 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a5
c0012b24:	e8 4b 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	85 ff                	test   edi,edi
c0012b2e:	74 4d                	je     c0012b7d <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c0012b30:	83 ec 08             	sub    esp,0x8
c0012b33:	57                   	push   edi
c0012b34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b38:	e8 6d f4 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012b3d:	c7 04 24 ba a8 02 c0 	mov    DWORD PTR [esp],0xc002a8ba
c0012b44:	89 c3                	mov    ebx,eax
c0012b46:	e8 29 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	85 db                	test   ebx,ebx
c0012b50:	74 05                	je     c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0x7d>
c0012b52:	f6 03 01             	test   BYTE PTR [ebx],0x1
c0012b55:	74 40                	je     c0012b97 <VAS::tryLoadBackOffDisk(unsigned long)+0xbd>
c0012b57:	83 ec 0c             	sub    esp,0xc
c0012b5a:	68 ff a8 02 c0       	push   0xc002a8ff
c0012b5f:	e8 10 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b64:	c7 04 24 03 a9 02 c0 	mov    DWORD PTR [esp],0xc002a903
c0012b6b:	e8 04 04 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	31 c0                	xor    eax,eax
c0012b75:	83 c4 0c             	add    esp,0xc
c0012b78:	5b                   	pop    ebx
c0012b79:	5e                   	pop    esi
c0012b7a:	5f                   	pop    edi
c0012b7b:	5d                   	pop    ebp
c0012b7c:	c3                   	ret    
c0012b7d:	83 ec 0c             	sub    esp,0xc
c0012b80:	68 a9 a8 02 c0       	push   0xc002a8a9
c0012b85:	e8 ea 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012b8a:	83 c4 10             	add    esp,0x10
c0012b8d:	31 c0                	xor    eax,eax
c0012b8f:	83 c4 0c             	add    esp,0xc
c0012b92:	5b                   	pop    ebx
c0012b93:	5e                   	pop    esi
c0012b94:	5f                   	pop    edi
c0012b95:	5d                   	pop    ebp
c0012b96:	c3                   	ret    
c0012b97:	83 ec 0c             	sub    esp,0xc
c0012b9a:	68 be a8 02 c0       	push   0xc002a8be
c0012b9f:	e8 d0 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012ba4:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012ba6:	e8 3a d3 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012bab:	c1 ed 0b             	shr    ebp,0xb
c0012bae:	89 c6                	mov    esi,eax
c0012bb0:	c7 04 24 c2 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c2
c0012bb7:	e8 b8 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012bbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bbe:	25 ff 0f 00 00       	and    eax,0xfff
c0012bc3:	09 f0                	or     eax,esi
c0012bc5:	0d 01 08 00 00       	or     eax,0x801
c0012bca:	89 03                	mov    DWORD PTR [ebx],eax
c0012bcc:	c7 04 24 c6 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8c6
c0012bd3:	e8 9c 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012bd8:	0f 20 d8             	mov    eax,cr3
c0012bdb:	0f 22 d8             	mov    cr3,eax
c0012bde:	a1 4c d4 02 c0       	mov    eax,ds:0xc002d44c
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	85 c0                	test   eax,eax
c0012be8:	7e 56                	jle    c0012c40 <VAS::tryLoadBackOffDisk(unsigned long)+0x166>
c0012bea:	89 fe                	mov    esi,edi
c0012bec:	31 db                	xor    ebx,ebx
c0012bee:	83 ec 0c             	sub    esp,0xc
c0012bf1:	55                   	push   ebp
c0012bf2:	e8 7b f0 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012bf7:	83 c4 0c             	add    esp,0xc
c0012bfa:	01 d8                	add    eax,ebx
c0012bfc:	50                   	push   eax
c0012bfd:	56                   	push   esi
c0012bfe:	68 2c a7 02 c0       	push   0xc002a72c
c0012c03:	e8 6c 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012c08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c0b:	e8 62 f0 ff ff       	call   c0011c72 <Virt::swapIDToSector(unsigned long)>
c0012c10:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c13:	01 d8                	add    eax,ebx
c0012c15:	6a 01                	push   0x1
c0012c17:	31 d2                	xor    edx,edx
c0012c19:	43                   	inc    ebx
c0012c1a:	52                   	push   edx
c0012c1b:	81 c6 00 02 00 00    	add    esi,0x200
c0012c21:	50                   	push   eax
c0012c22:	0f be 05 58 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d458
c0012c29:	ff 34 85 bc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1644]
c0012c30:	e8 5b 3b 00 00       	call   c0016790 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c35:	83 c4 20             	add    esp,0x20
c0012c38:	39 1d 4c d4 02 c0    	cmp    DWORD PTR ds:0xc002d44c,ebx
c0012c3e:	7f ae                	jg     c0012bee <VAS::tryLoadBackOffDisk(unsigned long)+0x114>
c0012c40:	83 ec 0c             	sub    esp,0xc
c0012c43:	68 ca a8 02 c0       	push   0xc002a8ca
c0012c48:	e8 27 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012c4d:	83 c4 0c             	add    esp,0xc
c0012c50:	a1 24 e6 02 c0       	mov    eax,ds:0xc002e624
c0012c55:	48                   	dec    eax
c0012c56:	50                   	push   eax
c0012c57:	a3 24 e6 02 c0       	mov    ds:0xc002e624,eax
c0012c5c:	57                   	push   edi
c0012c5d:	68 ce a8 02 c0       	push   0xc002a8ce
c0012c62:	e8 0d 03 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012c67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c6a:	e8 e5 ef ff ff       	call   c0011c54 <Virt::freeSwapfilePage(unsigned long)>
c0012c6f:	c7 04 24 e3 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e3
c0012c76:	e8 f9 02 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012c7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	25 ff 0f 00 00       	and    eax,0xfff
c0012c87:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012c8c:	77 1a                	ja     c0012ca8 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ce>
c0012c8e:	83 ec 0c             	sub    esp,0xc
c0012c91:	68 fb a8 02 c0       	push   0xc002a8fb
c0012c96:	e8 d9 02 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	b0 01                	mov    al,0x1
c0012ca0:	83 c4 0c             	add    esp,0xc
c0012ca3:	5b                   	pop    ebx
c0012ca4:	5e                   	pop    esi
c0012ca5:	5f                   	pop    edi
c0012ca6:	5d                   	pop    ebp
c0012ca7:	c3                   	ret    
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	68 e7 a8 02 c0       	push   0xc002a8e7
c0012cb0:	e8 6c 79 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	eb d4                	jmp    c0012c8e <VAS::tryLoadBackOffDisk(unsigned long)+0x1b4>

c0012cba <VAS::scanForEviction()>:
c0012cba:	56                   	push   esi
c0012cbb:	53                   	push   ebx
c0012cbc:	53                   	push   ebx
c0012cbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cc1:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
c0012cc4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012cca:	75 0e                	jne    c0012cda <VAS::scanForEviction()+0x20>
c0012ccc:	89 da                	mov    edx,ebx
c0012cce:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cd1:	c1 ea 16             	shr    edx,0x16
c0012cd4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012cd8:	74 48                	je     c0012d22 <VAS::scanForEviction()+0x68>
c0012cda:	53                   	push   ebx
c0012cdb:	56                   	push   esi
c0012cdc:	e8 c9 f2 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c0012ce1:	5a                   	pop    edx
c0012ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ce4:	59                   	pop    ecx
c0012ce5:	89 c2                	mov    edx,eax
c0012ce7:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ced:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012cf3:	74 3d                	je     c0012d32 <VAS::scanForEviction()+0x78>
c0012cf5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012cfb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012d01:	76 2a                	jbe    c0012d2d <VAS::scanForEviction()+0x73>
c0012d03:	31 db                	xor    ebx,ebx
c0012d05:	c7 46 10 00 00 00 00 	mov    DWORD PTR [esi+0x10],0x0
c0012d0c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012d12:	75 c6                	jne    c0012cda <VAS::scanForEviction()+0x20>
c0012d14:	89 da                	mov    edx,ebx
c0012d16:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012d19:	c1 ea 16             	shr    edx,0x16
c0012d1c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012d20:	75 b8                	jne    c0012cda <VAS::scanForEviction()+0x20>
c0012d22:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012d28:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0012d2b:	eb 97                	jmp    c0012cc4 <VAS::scanForEviction()+0xa>
c0012d2d:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c0012d30:	eb 92                	jmp    c0012cc4 <VAS::scanForEviction()+0xa>
c0012d32:	a8 01                	test   al,0x1
c0012d34:	74 bf                	je     c0012cf5 <VAS::scanForEviction()+0x3b>
c0012d36:	83 ec 08             	sub    esp,0x8
c0012d39:	53                   	push   ebx
c0012d3a:	56                   	push   esi
c0012d3b:	e8 fe fc ff ff       	call   c0012a3e <VAS::evict(unsigned long)>
c0012d40:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012d43:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
c0012d49:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0012d4c:	83 c4 14             	add    esp,0x14
c0012d4f:	5b                   	pop    ebx
c0012d50:	5e                   	pop    esi
c0012d51:	c3                   	ret    

c0012d52 <mapVASFirstTime>:
c0012d52:	55                   	push   ebp
c0012d53:	57                   	push   edi
c0012d54:	56                   	push   esi
c0012d55:	53                   	push   ebx
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d5e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d61:	4a                   	dec    edx
c0012d62:	0f 84 8e 00 00 00    	je     c0012df6 <mapVASFirstTime+0xa4>
c0012d68:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d6b:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d6e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d73:	c1 e5 15             	shl    ebp,0x15
c0012d76:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d7b:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d81:	29 eb                	sub    ebx,ebp
c0012d83:	29 ee                	sub    esi,ebp
c0012d85:	e8 5b d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	68 03 04 00 00       	push   0x403
c0012d92:	6a 01                	push   0x1
c0012d94:	53                   	push   ebx
c0012d95:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d9b:	50                   	push   eax
c0012d9c:	57                   	push   edi
c0012d9d:	e8 82 f8 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012da2:	83 c4 20             	add    esp,0x20
c0012da5:	39 f3                	cmp    ebx,esi
c0012da7:	75 dc                	jne    c0012d85 <mapVASFirstTime+0x33>
c0012da9:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012dae:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012db3:	29 ee                	sub    esi,ebp
c0012db5:	29 e8                	sub    eax,ebp
c0012db7:	89 c5                	mov    ebp,eax
c0012db9:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012dbd:	19 db                	sbb    ebx,ebx
c0012dbf:	e8 21 d1 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012dc4:	83 e3 04             	and    ebx,0x4
c0012dc7:	83 ec 0c             	sub    esp,0xc
c0012dca:	81 c3 03 04 00 00    	add    ebx,0x403
c0012dd0:	53                   	push   ebx
c0012dd1:	6a 01                	push   0x1
c0012dd3:	56                   	push   esi
c0012dd4:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dda:	50                   	push   eax
c0012ddb:	57                   	push   edi
c0012ddc:	e8 43 f8 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012de1:	83 c4 20             	add    esp,0x20
c0012de4:	39 f5                	cmp    ebp,esi
c0012de6:	75 d1                	jne    c0012db9 <mapVASFirstTime+0x67>
c0012de8:	0f 20 d8             	mov    eax,cr3
c0012deb:	0f 22 d8             	mov    cr3,eax
c0012dee:	83 c4 0c             	add    esp,0xc
c0012df1:	5b                   	pop    ebx
c0012df2:	5e                   	pop    esi
c0012df3:	5f                   	pop    edi
c0012df4:	5d                   	pop    ebp
c0012df5:	c3                   	ret    
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	68 07 a9 02 c0       	push   0xc002a907
c0012dfe:	e8 71 01 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	83 c4 0c             	add    esp,0xc
c0012e09:	5b                   	pop    ebx
c0012e0a:	5e                   	pop    esi
c0012e0b:	5f                   	pop    edi
c0012e0c:	5d                   	pop    ebp
c0012e0d:	c3                   	ret    

c0012e0e <__cxa_atexit>:
c0012e0e:	31 c0                	xor    eax,eax
c0012e10:	c3                   	ret    

c0012e11 <__cxa_finalize>:
c0012e11:	c3                   	ret    

c0012e12 <__stack_chk_fail>:
c0012e12:	55                   	push   ebp
c0012e13:	89 e5                	mov    ebp,esp
c0012e15:	83 ec 14             	sub    esp,0x14
c0012e18:	68 20 a9 02 c0       	push   0xc002a920
c0012e1d:	e8 52 01 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012e22:	58                   	pop    eax
c0012e23:	5a                   	pop    edx
c0012e24:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e27:	68 70 a9 02 c0       	push   0xc002a970
c0012e2c:	e8 43 01 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012e31:	59                   	pop    ecx
c0012e32:	58                   	pop    eax
c0012e33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e36:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e39:	68 70 a9 02 c0       	push   0xc002a970
c0012e3e:	e8 31 01 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012e43:	5a                   	pop    edx
c0012e44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e47:	59                   	pop    ecx
c0012e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e4a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e4d:	68 70 a9 02 c0       	push   0xc002a970
c0012e52:	e8 1d 01 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012e57:	5a                   	pop    edx
c0012e58:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e5b:	59                   	pop    ecx
c0012e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e60:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e63:	68 70 a9 02 c0       	push   0xc002a970
c0012e68:	e8 07 01 00 00       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0012e6d:	c7 04 24 78 a9 02 c0 	mov    DWORD PTR [esp],0xc002a978
c0012e74:	e8 a8 77 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0012e79:	83 c4 10             	add    esp,0x10
c0012e7c:	c9                   	leave  
c0012e7d:	c3                   	ret    

c0012e7e <__cxa_pure_virtual>:
c0012e7e:	83 ec 18             	sub    esp,0x18
c0012e81:	68 90 a9 02 c0       	push   0xc002a990
c0012e86:	e8 96 77 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0012e8b:	83 c4 1c             	add    esp,0x1c
c0012e8e:	c3                   	ret    

c0012e8f <operator new[](unsigned long)>:
c0012e8f:	e9 af c9 ff ff       	jmp    c000f843 <malloc>

c0012e94 <operator delete(void*, unsigned long)>:
c0012e94:	e9 ca c9 ff ff       	jmp    c000f863 <rfree>

c0012e99 <operator delete[](void*)>:
c0012e99:	e9 c5 c9 ff ff       	jmp    c000f863 <rfree>

c0012e9e <operator delete[](void*, unsigned long)>:
c0012e9e:	e9 c0 c9 ff ff       	jmp    c000f863 <rfree>

c0012ea3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ea3:	57                   	push   edi
c0012ea4:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ea9:	56                   	push   esi
c0012eaa:	be a4 a9 02 c0       	mov    esi,0xc002a9a4
c0012eaf:	53                   	push   ebx
c0012eb0:	83 ec 40             	sub    esp,0x40
c0012eb3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012eb7:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ebb:	fc                   	cld    
c0012ebc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ebe:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ec2:	83 f9 3e             	cmp    ecx,0x3e
c0012ec5:	7e 05                	jle    c0012ecc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ec7:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ecc:	89 df                	mov    edi,ebx
c0012ece:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ed2:	eb 02                	jmp    c0012ed6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ed4:	89 c7                	mov    edi,eax
c0012ed6:	31 d2                	xor    edx,edx
c0012ed8:	46                   	inc    esi
c0012ed9:	89 f8                	mov    eax,edi
c0012edb:	f7 f1                	div    ecx
c0012edd:	39 cf                	cmp    edi,ecx
c0012edf:	73 f3                	jae    c0012ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ee1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ee4:	eb 02                	jmp    c0012ee8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ee6:	89 c3                	mov    ebx,eax
c0012ee8:	31 d2                	xor    edx,edx
c0012eea:	4e                   	dec    esi
c0012eeb:	89 d8                	mov    eax,ebx
c0012eed:	f7 f1                	div    ecx
c0012eef:	39 cb                	cmp    ebx,ecx
c0012ef1:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012ef5:	88 16                	mov    BYTE PTR [esi],dl
c0012ef7:	73 ed                	jae    c0012ee6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ef9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012efd:	83 c4 40             	add    esp,0x40
c0012f00:	5b                   	pop    ebx
c0012f01:	5e                   	pop    esi
c0012f02:	5f                   	pop    edi
c0012f03:	c3                   	ret    

c0012f04 <Dbg::logc(char)>:
c0012f04:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f08:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f0d:	ec                   	in     al,dx
c0012f0e:	a8 20                	test   al,0x20
c0012f10:	74 fb                	je     c0012f0d <Dbg::logc(char)+0x9>
c0012f12:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f17:	88 c8                	mov    al,cl
c0012f19:	ee                   	out    dx,al
c0012f1a:	c3                   	ret    

c0012f1b <Dbg::logs(char*)>:
c0012f1b:	53                   	push   ebx
c0012f1c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f20:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f23:	84 c0                	test   al,al
c0012f25:	74 0f                	je     c0012f36 <Dbg::logs(char*)+0x1b>
c0012f27:	50                   	push   eax
c0012f28:	43                   	inc    ebx
c0012f29:	e8 d6 ff ff ff       	call   c0012f04 <Dbg::logc(char)>
c0012f2e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f31:	5a                   	pop    edx
c0012f32:	84 c0                	test   al,al
c0012f34:	75 f1                	jne    c0012f27 <Dbg::logs(char*)+0xc>
c0012f36:	5b                   	pop    ebx
c0012f37:	c3                   	ret    

c0012f38 <Dbg::logWriteInt(unsigned int)>:
c0012f38:	83 ec 10             	sub    esp,0x10
c0012f3b:	6a 0a                	push   0xa
c0012f3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f41:	50                   	push   eax
c0012f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f46:	e8 58 ff ff ff       	call   c0012ea3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f4b:	50                   	push   eax
c0012f4c:	e8 ca ff ff ff       	call   c0012f1b <Dbg::logs(char*)>
c0012f51:	83 c4 20             	add    esp,0x20
c0012f54:	c3                   	ret    

c0012f55 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f55:	83 ec 10             	sub    esp,0x10
c0012f58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f60:	50                   	push   eax
c0012f61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f65:	e8 39 ff ff ff       	call   c0012ea3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f6a:	50                   	push   eax
c0012f6b:	e8 ab ff ff ff       	call   c0012f1b <Dbg::logs(char*)>
c0012f70:	83 c4 20             	add    esp,0x20
c0012f73:	c3                   	ret    

c0012f74 <Dbg::kprintf(char const*, ...)>:
c0012f74:	55                   	push   ebp
c0012f75:	57                   	push   edi
c0012f76:	56                   	push   esi
c0012f77:	53                   	push   ebx
c0012f78:	83 ec 0c             	sub    esp,0xc
c0012f7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f7f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f87:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f8a:	84 c0                	test   al,al
c0012f8c:	74 4a                	je     c0012fd8 <Dbg::kprintf(char const*, ...)+0x64>
c0012f8e:	31 db                	xor    ebx,ebx
c0012f90:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f93:	3c 25                	cmp    al,0x25
c0012f95:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f98:	0f 85 e4 00 00 00    	jne    c0013082 <Dbg::kprintf(char const*, ...)+0x10e>
c0012f9e:	83 c3 02             	add    ebx,0x2
c0012fa1:	8a 07                	mov    al,BYTE PTR [edi]
c0012fa3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012fa6:	83 e8 25             	sub    eax,0x25
c0012fa9:	3c 53                	cmp    al,0x53
c0012fab:	0f 87 ba 00 00 00    	ja     c001306b <Dbg::kprintf(char const*, ...)+0xf7>
c0012fb1:	0f b6 c0             	movzx  eax,al
c0012fb4:	ff 24 85 e4 a9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd561c]
c0012fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fbf:	89 c8                	mov    eax,ecx
c0012fc1:	83 c1 04             	add    ecx,0x4
c0012fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fc8:	ff 30                	push   DWORD PTR [eax]
c0012fca:	e8 4c ff ff ff       	call   c0012f1b <Dbg::logs(char*)>
c0012fcf:	58                   	pop    eax
c0012fd0:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fd4:	84 c0                	test   al,al
c0012fd6:	75 b8                	jne    c0012f90 <Dbg::kprintf(char const*, ...)+0x1c>
c0012fd8:	83 c4 0c             	add    esp,0xc
c0012fdb:	5b                   	pop    ebx
c0012fdc:	5e                   	pop    esi
c0012fdd:	5f                   	pop    edi
c0012fde:	5d                   	pop    ebp
c0012fdf:	c3                   	ret    
c0012fe0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fe4:	89 d0                	mov    eax,edx
c0012fe6:	83 c2 04             	add    edx,0x4
c0012fe9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fed:	ff 30                	push   DWORD PTR [eax]
c0012fef:	e8 44 ff ff ff       	call   c0012f38 <Dbg::logWriteInt(unsigned int)>
c0012ff4:	58                   	pop    eax
c0012ff5:	eb d9                	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ffb:	89 d0                	mov    eax,edx
c0012ffd:	83 c2 04             	add    edx,0x4
c0013000:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013003:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013007:	50                   	push   eax
c0013008:	e8 f7 fe ff ff       	call   c0012f04 <Dbg::logc(char)>
c001300d:	58                   	pop    eax
c001300e:	eb c0                	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c0013010:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013014:	89 c8                	mov    eax,ecx
c0013016:	83 c1 04             	add    ecx,0x4
c0013019:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001301d:	ff 30                	push   DWORD PTR [eax]
c001301f:	e8 14 ff ff ff       	call   c0012f38 <Dbg::logWriteInt(unsigned int)>
c0013024:	5f                   	pop    edi
c0013025:	eb a9                	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c0013027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001302b:	89 c8                	mov    eax,ecx
c001302d:	83 c1 04             	add    ecx,0x4
c0013030:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013034:	6a 10                	push   0x10
c0013036:	ff 30                	push   DWORD PTR [eax]
c0013038:	e8 18 ff ff ff       	call   c0012f55 <Dbg::logWriteIntBase(unsigned int, int)>
c001303d:	59                   	pop    ecx
c001303e:	5f                   	pop    edi
c001303f:	eb 8f                	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c0013041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013045:	89 d0                	mov    eax,edx
c0013047:	83 c2 08             	add    edx,0x8
c001304a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001304e:	6a 10                	push   0x10
c0013050:	ff 30                	push   DWORD PTR [eax]
c0013052:	e8 fe fe ff ff       	call   c0012f55 <Dbg::logWriteIntBase(unsigned int, int)>
c0013057:	58                   	pop    eax
c0013058:	5a                   	pop    edx
c0013059:	e9 72 ff ff ff       	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c001305e:	6a 25                	push   0x25
c0013060:	e8 9f fe ff ff       	call   c0012f04 <Dbg::logc(char)>
c0013065:	58                   	pop    eax
c0013066:	e9 65 ff ff ff       	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c001306b:	6a 25                	push   0x25
c001306d:	e8 92 fe ff ff       	call   c0012f04 <Dbg::logc(char)>
c0013072:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013075:	50                   	push   eax
c0013076:	e8 89 fe ff ff       	call   c0012f04 <Dbg::logc(char)>
c001307b:	5a                   	pop    edx
c001307c:	59                   	pop    ecx
c001307d:	e9 4e ff ff ff       	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>
c0013082:	50                   	push   eax
c0013083:	89 eb                	mov    ebx,ebp
c0013085:	e8 7a fe ff ff       	call   c0012f04 <Dbg::logc(char)>
c001308a:	89 fd                	mov    ebp,edi
c001308c:	58                   	pop    eax
c001308d:	e9 3e ff ff ff       	jmp    c0012fd0 <Dbg::kprintf(char const*, ...)+0x5c>

c0013092 <File::read(unsigned long long, void*, int*)>:
c0013092:	53                   	push   ebx
c0013093:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013097:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001309b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130a2:	3c 19                	cmp    al,0x19
c00130a4:	77 35                	ja     c00130db <File::read(unsigned long long, void*, int*)+0x49>
c00130a6:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c00130ad:	85 c0                	test   eax,eax
c00130af:	74 2a                	je     c00130db <File::read(unsigned long long, void*, int*)+0x49>
c00130b1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130b7:	85 c0                	test   eax,eax
c00130b9:	74 20                	je     c00130db <File::read(unsigned long long, void*, int*)+0x49>
c00130bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130bf:	74 21                	je     c00130e2 <File::read(unsigned long long, void*, int*)+0x50>
c00130c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130c7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130d5:	5b                   	pop    ebx
c00130d6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130d9:	ff e0                	jmp    eax
c00130db:	b8 0b 00 00 00       	mov    eax,0xb
c00130e0:	eb 05                	jmp    c00130e7 <File::read(unsigned long long, void*, int*)+0x55>
c00130e2:	b8 05 00 00 00       	mov    eax,0x5
c00130e7:	5b                   	pop    ebx
c00130e8:	c3                   	ret    
c00130e9:	90                   	nop

c00130ea <File::write(unsigned long long, void*, int*)>:
c00130ea:	53                   	push   ebx
c00130eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130f3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130fa:	3c 19                	cmp    al,0x19
c00130fc:	77 35                	ja     c0013133 <File::write(unsigned long long, void*, int*)+0x49>
c00130fe:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0013105:	85 c0                	test   eax,eax
c0013107:	74 2a                	je     c0013133 <File::write(unsigned long long, void*, int*)+0x49>
c0013109:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001310f:	85 c0                	test   eax,eax
c0013111:	74 20                	je     c0013133 <File::write(unsigned long long, void*, int*)+0x49>
c0013113:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013117:	74 21                	je     c001313a <File::write(unsigned long long, void*, int*)+0x50>
c0013119:	8b 08                	mov    ecx,DWORD PTR [eax]
c001311b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001311f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001312d:	5b                   	pop    ebx
c001312e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013131:	ff e0                	jmp    eax
c0013133:	b8 0b 00 00 00       	mov    eax,0xb
c0013138:	eb 05                	jmp    c001313f <File::write(unsigned long long, void*, int*)+0x55>
c001313a:	b8 05 00 00 00       	mov    eax,0x5
c001313f:	5b                   	pop    ebx
c0013140:	c3                   	ret    
c0013141:	90                   	nop

c0013142 <Directory::read(unsigned long long, void*, int*)>:
c0013142:	53                   	push   ebx
c0013143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013147:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001314b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013152:	3c 19                	cmp    al,0x19
c0013154:	77 35                	ja     c001318b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013156:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c001315d:	85 c0                	test   eax,eax
c001315f:	74 2a                	je     c001318b <Directory::read(unsigned long long, void*, int*)+0x49>
c0013161:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013167:	85 c0                	test   eax,eax
c0013169:	74 20                	je     c001318b <Directory::read(unsigned long long, void*, int*)+0x49>
c001316b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001316f:	74 21                	je     c0013192 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013171:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013173:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013177:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001317d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013181:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013185:	5b                   	pop    ebx
c0013186:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013189:	ff e0                	jmp    eax
c001318b:	b8 0b 00 00 00       	mov    eax,0xb
c0013190:	eb 05                	jmp    c0013197 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013192:	b8 05 00 00 00       	mov    eax,0x5
c0013197:	5b                   	pop    ebx
c0013198:	c3                   	ret    
c0013199:	90                   	nop

c001319a <Directory::write(unsigned long long, void*, int*)>:
c001319a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001319e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131a5:	b8 0b 00 00 00       	mov    eax,0xb
c00131aa:	80 fa 19             	cmp    dl,0x19
c00131ad:	77 18                	ja     c00131c7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131af:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c00131b6:	85 d2                	test   edx,edx
c00131b8:	74 0d                	je     c00131c7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131ba:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131c1:	19 c0                	sbb    eax,eax
c00131c3:	83 e0 0a             	and    eax,0xa
c00131c6:	40                   	inc    eax
c00131c7:	c3                   	ret    

c00131c8 <File::isAtty()>:
c00131c8:	31 c0                	xor    eax,eax
c00131ca:	c3                   	ret    
c00131cb:	90                   	nop

c00131cc <Directory::isAtty()>:
c00131cc:	31 c0                	xor    eax,eax
c00131ce:	c3                   	ret    
c00131cf:	90                   	nop

c00131d0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131d0:	b8 0a 00 00 00       	mov    eax,0xa
c00131d5:	c3                   	ret    

c00131d6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131d6:	b8 0a 00 00 00       	mov    eax,0xa
c00131db:	c3                   	ret    

c00131dc <File::~File()>:
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c00131e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e8:	89 10                	mov    DWORD PTR [eax],edx
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	83 ec 0c             	sub    esp,0xc
c00131f1:	50                   	push   eax
c00131f2:	e8 eb e6 ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c00131f7:	83 c4 10             	add    esp,0x10
c00131fa:	90                   	nop
c00131fb:	83 c4 0c             	add    esp,0xc
c00131fe:	c3                   	ret    
c00131ff:	90                   	nop

c0013200 <File::~File()>:
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	83 ec 0c             	sub    esp,0xc
c0013206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001320a:	e8 cd ff ff ff       	call   c00131dc <File::~File()>
c001320f:	83 c4 10             	add    esp,0x10
c0013212:	83 ec 08             	sub    esp,0x8
c0013215:	68 14 01 00 00       	push   0x114
c001321a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001321e:	e8 71 fc ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	83 c4 0c             	add    esp,0xc
c0013229:	c3                   	ret    

c001322a <Directory::~Directory()>:
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	ba bc ab 02 c0       	mov    edx,0xc002abbc
c0013232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013236:	89 10                	mov    DWORD PTR [eax],edx
c0013238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323c:	83 ec 0c             	sub    esp,0xc
c001323f:	50                   	push   eax
c0013240:	e8 9d e6 ff ff       	call   c00118e2 <UnixFile::~UnixFile()>
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	90                   	nop
c0013249:	83 c4 0c             	add    esp,0xc
c001324c:	c3                   	ret    
c001324d:	90                   	nop

c001324e <Directory::~Directory()>:
c001324e:	83 ec 0c             	sub    esp,0xc
c0013251:	83 ec 0c             	sub    esp,0xc
c0013254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013258:	e8 cd ff ff ff       	call   c001322a <Directory::~Directory()>
c001325d:	83 c4 10             	add    esp,0x10
c0013260:	83 ec 08             	sub    esp,0x8
c0013263:	68 14 01 00 00       	push   0x114
c0013268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001326c:	e8 23 fc ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	83 c4 0c             	add    esp,0xc
c0013277:	c3                   	ret    

c0013278 <Filesystem::Filesystem()>:
c0013278:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c001327d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013281:	89 10                	mov    DWORD PTR [eax],edx
c0013283:	8b 15 30 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e630
c0013289:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013294:	a3 30 e6 02 c0       	mov    ds:0xc002e630,eax
c0013299:	90                   	nop
c001329a:	c3                   	ret    
c001329b:	90                   	nop

c001329c <Filesystem::~Filesystem()>:
c001329c:	ba 3c ab 02 c0       	mov    edx,0xc002ab3c
c00132a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132a5:	89 10                	mov    DWORD PTR [eax],edx
c00132a7:	90                   	nop
c00132a8:	c3                   	ret    
c00132a9:	90                   	nop

c00132aa <Filesystem::~Filesystem()>:
c00132aa:	83 ec 0c             	sub    esp,0xc
c00132ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132b1:	e8 e6 ff ff ff       	call   c001329c <Filesystem::~Filesystem()>
c00132b6:	83 c4 04             	add    esp,0x4
c00132b9:	83 ec 08             	sub    esp,0x8
c00132bc:	6a 08                	push   0x8
c00132be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c2:	e8 cd fb ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	83 c4 0c             	add    esp,0xc
c00132cd:	c3                   	ret    

c00132ce <Fs::getcwd(Process*, char*, int)>:
c00132ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132d2:	31 c0                	xor    eax,eax
c00132d4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132db:	7d 15                	jge    c00132f2 <Fs::getcwd(Process*, char*, int)+0x24>
c00132dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132e1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132e8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132eb:	84 c9                	test   cl,cl
c00132ed:	74 06                	je     c00132f5 <Fs::getcwd(Process*, char*, int)+0x27>
c00132ef:	40                   	inc    eax
c00132f0:	eb e2                	jmp    c00132d4 <Fs::getcwd(Process*, char*, int)+0x6>
c00132f2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132f5:	31 c0                	xor    eax,eax
c00132f7:	c3                   	ret    

c00132f8 <Fs::initVFS()>:
c00132f8:	83 ec 18             	sub    esp,0x18
c00132fb:	6a 08                	push   0x8
c00132fd:	e8 41 c5 ff ff       	call   c000f843 <malloc>
c0013302:	89 04 24             	mov    DWORD PTR [esp],eax
c0013305:	e8 80 dc 00 00       	call   c0020f8a <FAT::FAT()>
c001330a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013311:	e8 2d c5 ff ff       	call   c000f843 <malloc>
c0013316:	89 04 24             	mov    DWORD PTR [esp],eax
c0013319:	e8 c4 ee 00 00       	call   c00221e2 <ISO9660::ISO9660()>
c001331e:	83 c4 1c             	add    esp,0x1c
c0013321:	c3                   	ret    

c0013322 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013322:	55                   	push   ebp
c0013323:	57                   	push   edi
c0013324:	56                   	push   esi
c0013325:	53                   	push   ebx
c0013326:	81 ec 10 04 00 00    	sub    esp,0x410
c001332c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013333:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001333a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013341:	68 00 04 00 00       	push   0x400
c0013346:	6a 00                	push   0x0
c0013348:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001334c:	56                   	push   esi
c001334d:	e8 26 d4 fe ff       	call   c0000778 <memset>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013359:	75 0b                	jne    c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001335b:	50                   	push   eax
c001335c:	50                   	push   eax
c001335d:	57                   	push   edi
c001335e:	56                   	push   esi
c001335f:	e8 d0 d4 fe ff       	call   c0000834 <strcpy>
c0013364:	eb 41                	jmp    c00133a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013366:	8a 07                	mov    al,BYTE PTR [edi]
c0013368:	3c 5c                	cmp    al,0x5c
c001336a:	74 04                	je     c0013370 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001336c:	3c 2f                	cmp    al,0x2f
c001336e:	75 18                	jne    c0013388 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013370:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013373:	3c 60                	cmp    al,0x60
c0013375:	7e 03                	jle    c001337a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013377:	83 e8 20             	sub    eax,0x20
c001337a:	88 04 24             	mov    BYTE PTR [esp],al
c001337d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013384:	50                   	push   eax
c0013385:	50                   	push   eax
c0013386:	eb 18                	jmp    c00133a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013388:	50                   	push   eax
c0013389:	50                   	push   eax
c001338a:	55                   	push   ebp
c001338b:	56                   	push   esi
c001338c:	e8 a3 d4 fe ff       	call   c0000834 <strcpy>
c0013391:	5a                   	pop    edx
c0013392:	59                   	pop    ecx
c0013393:	68 94 c2 02 c0       	push   0xc002c294
c0013398:	56                   	push   esi
c0013399:	e8 d6 d5 fe ff       	call   c0000974 <strcat>
c001339e:	5d                   	pop    ebp
c001339f:	58                   	pop    eax
c00133a0:	57                   	push   edi
c00133a1:	56                   	push   esi
c00133a2:	e8 cd d5 fe ff       	call   c0000974 <strcat>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133ad:	3c 60                	cmp    al,0x60
c00133af:	7e 03                	jle    c00133b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133b1:	83 e8 20             	sub    eax,0x20
c00133b4:	88 04 24             	mov    BYTE PTR [esp],al
c00133b7:	88 03                	mov    BYTE PTR [ebx],al
c00133b9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133c0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133c6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133ca:	bf 03 00 00 00       	mov    edi,0x3
c00133cf:	b8 03 00 00 00       	mov    eax,0x3
c00133d4:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133d7:	84 d2                	test   dl,dl
c00133d9:	0f 84 91 00 00 00    	je     c0013470 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133df:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133e2:	80 fa 5c             	cmp    dl,0x5c
c00133e5:	74 05                	je     c00133ec <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133e7:	80 fa 2f             	cmp    dl,0x2f
c00133ea:	75 12                	jne    c00133fe <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133ec:	89 c5                	mov    ebp,eax
c00133ee:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133f3:	74 09                	je     c00133fe <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133f5:	40                   	inc    eax
c00133f6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133fa:	89 cf                	mov    edi,ecx
c00133fc:	eb d6                	jmp    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133fe:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013403:	75 5b                	jne    c0013460 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013405:	80 fa 2e             	cmp    dl,0x2e
c0013408:	75 56                	jne    c0013460 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001340a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001340e:	74 19                	je     c0013429 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013410:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013415:	74 53                	je     c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013417:	89 f9                	mov    ecx,edi
c0013419:	41                   	inc    ecx
c001341a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001341d:	80 fa 2f             	cmp    dl,0x2f
c0013420:	74 f7                	je     c0013419 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013422:	80 fa 5c             	cmp    dl,0x5c
c0013425:	74 f2                	je     c0013419 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013427:	eb d1                	jmp    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013429:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001342e:	74 3a                	je     c001346a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013430:	83 f8 03             	cmp    eax,0x3
c0013433:	74 c5                	je     c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013435:	41                   	inc    ecx
c0013436:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013439:	80 fa 2f             	cmp    dl,0x2f
c001343c:	74 f7                	je     c0013435 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001343e:	80 fa 5c             	cmp    dl,0x5c
c0013441:	74 f2                	je     c0013435 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013443:	48                   	dec    eax
c0013444:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013448:	75 06                	jne    c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001344a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001344e:	eb f3                	jmp    c0013443 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013450:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013454:	74 07                	je     c001345d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013456:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001345a:	48                   	dec    eax
c001345b:	eb f3                	jmp    c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001345d:	40                   	inc    eax
c001345e:	eb 9a                	jmp    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013460:	80 fa 2f             	cmp    dl,0x2f
c0013463:	74 95                	je     c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013465:	80 fa 5c             	cmp    dl,0x5c
c0013468:	74 90                	je     c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001346a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001346d:	40                   	inc    eax
c001346e:	eb 8a                	jmp    c00133fa <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013470:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	53                   	push   ebx
c0013478:	e8 17 d3 fe ff       	call   c0000794 <strlen>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013485:	75 26                	jne    c00134ad <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013487:	83 ec 0c             	sub    esp,0xc
c001348a:	53                   	push   ebx
c001348b:	e8 04 d3 fe ff       	call   c0000794 <strlen>
c0013490:	83 c4 10             	add    esp,0x10
c0013493:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013498:	74 26                	je     c00134c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001349a:	83 ec 0c             	sub    esp,0xc
c001349d:	53                   	push   ebx
c001349e:	e8 f1 d2 fe ff       	call   c0000794 <strlen>
c00134a3:	83 c4 10             	add    esp,0x10
c00134a6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134ab:	eb c7                	jmp    c0013474 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134ad:	83 ec 0c             	sub    esp,0xc
c00134b0:	53                   	push   ebx
c00134b1:	e8 de d2 fe ff       	call   c0000794 <strlen>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134be:	74 c7                	je     c0013487 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134c0:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134c6:	5b                   	pop    ebx
c00134c7:	5e                   	pop    esi
c00134c8:	5f                   	pop    edi
c00134c9:	5d                   	pop    ebp
c00134ca:	c3                   	ret    
c00134cb:	90                   	nop

c00134cc <File::File(char const*, Process*)>:
c00134cc:	83 ec 0c             	sub    esp,0xc
c00134cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d3:	83 ec 08             	sub    esp,0x8
c00134d6:	6a 00                	push   0x0
c00134d8:	50                   	push   eax
c00134d9:	e8 22 e2 ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	ba a0 ab 02 c0       	mov    edx,0xc002aba0
c00134e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ea:	89 10                	mov    DWORD PTR [eax],edx
c00134ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134f0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134fa:	83 c0 0d             	add    eax,0xd
c00134fd:	83 ec 04             	sub    esp,0x4
c0013500:	52                   	push   edx
c0013501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013505:	50                   	push   eax
c0013506:	e8 17 fe ff ff       	call   c0013322 <Fs::standardiseFiles(char*, char const*, char const*)>
c001350b:	83 c4 10             	add    esp,0x10
c001350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013512:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013515:	8d 50 bf             	lea    edx,[eax-0x41]
c0013518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013526:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001352a:	90                   	nop
c001352b:	83 c4 0c             	add    esp,0xc
c001352e:	c3                   	ret    
c001352f:	90                   	nop

c0013530 <File::open(FileOpenMode)>:
c0013530:	53                   	push   ebx
c0013531:	b8 0b 00 00 00       	mov    eax,0xb
c0013536:	83 ec 08             	sub    esp,0x8
c0013539:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001353d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013544:	80 fa 19             	cmp    dl,0x19
c0013547:	77 40                	ja     c0013589 <File::open(FileOpenMode)+0x59>
c0013549:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0013550:	85 d2                	test   edx,edx
c0013552:	74 35                	je     c0013589 <File::open(FileOpenMode)+0x59>
c0013554:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001355a:	85 d2                	test   edx,edx
c001355c:	74 2b                	je     c0013589 <File::open(FileOpenMode)+0x59>
c001355e:	b8 06 00 00 00       	mov    eax,0x6
c0013563:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013567:	75 20                	jne    c0013589 <File::open(FileOpenMode)+0x59>
c0013569:	8b 02                	mov    eax,DWORD PTR [edx]
c001356b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013575:	51                   	push   ecx
c0013576:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013579:	51                   	push   ecx
c001357a:	52                   	push   edx
c001357b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	85 c0                	test   eax,eax
c0013583:	75 04                	jne    c0013589 <File::open(FileOpenMode)+0x59>
c0013585:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013589:	83 c4 08             	add    esp,0x8
c001358c:	5b                   	pop    ebx
c001358d:	c3                   	ret    

c001358e <File::close()>:
c001358e:	53                   	push   ebx
c001358f:	b8 0b 00 00 00       	mov    eax,0xb
c0013594:	83 ec 08             	sub    esp,0x8
c0013597:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001359b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135a2:	80 fa 19             	cmp    dl,0x19
c00135a5:	77 41                	ja     c00135e8 <File::close()+0x5a>
c00135a7:	8b 1c 95 c0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1540]
c00135ae:	85 db                	test   ebx,ebx
c00135b0:	74 36                	je     c00135e8 <File::close()+0x5a>
c00135b2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135b9:	74 2d                	je     c00135e8 <File::close()+0x5a>
c00135bb:	b8 05 00 00 00       	mov    eax,0x5
c00135c0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135c4:	74 22                	je     c00135e8 <File::close()+0x5a>
c00135c6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135ca:	8b 04 95 c0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1540]
c00135d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135d7:	53                   	push   ebx
c00135d8:	53                   	push   ebx
c00135d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00135db:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135e1:	50                   	push   eax
c00135e2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135e5:	83 c4 10             	add    esp,0x10
c00135e8:	83 c4 08             	add    esp,0x8
c00135eb:	5b                   	pop    ebx
c00135ec:	c3                   	ret    
c00135ed:	90                   	nop

c00135ee <File::seek(unsigned long long)>:
c00135ee:	56                   	push   esi
c00135ef:	53                   	push   ebx
c00135f0:	b8 0b 00 00 00       	mov    eax,0xb
c00135f5:	51                   	push   ecx
c00135f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135fe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013605:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013609:	80 fa 19             	cmp    dl,0x19
c001360c:	77 31                	ja     c001363f <File::seek(unsigned long long)+0x51>
c001360e:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0013615:	85 d2                	test   edx,edx
c0013617:	74 26                	je     c001363f <File::seek(unsigned long long)+0x51>
c0013619:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001361f:	85 d2                	test   edx,edx
c0013621:	74 1c                	je     c001363f <File::seek(unsigned long long)+0x51>
c0013623:	b8 05 00 00 00       	mov    eax,0x5
c0013628:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001362c:	74 11                	je     c001363f <File::seek(unsigned long long)+0x51>
c001362e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013630:	53                   	push   ebx
c0013631:	51                   	push   ecx
c0013632:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013638:	52                   	push   edx
c0013639:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	5a                   	pop    edx
c0013640:	5b                   	pop    ebx
c0013641:	5e                   	pop    esi
c0013642:	c3                   	ret    
c0013643:	90                   	nop

c0013644 <File::tell(unsigned long long*)>:
c0013644:	83 ec 0c             	sub    esp,0xc
c0013647:	b8 0b 00 00 00       	mov    eax,0xb
c001364c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013650:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013657:	80 fa 19             	cmp    dl,0x19
c001365a:	77 34                	ja     c0013690 <File::tell(unsigned long long*)+0x4c>
c001365c:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0013663:	85 d2                	test   edx,edx
c0013665:	74 29                	je     c0013690 <File::tell(unsigned long long*)+0x4c>
c0013667:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001366d:	85 d2                	test   edx,edx
c001366f:	74 1f                	je     c0013690 <File::tell(unsigned long long*)+0x4c>
c0013671:	b8 05 00 00 00       	mov    eax,0x5
c0013676:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001367a:	74 14                	je     c0013690 <File::tell(unsigned long long*)+0x4c>
c001367c:	50                   	push   eax
c001367d:	8b 02                	mov    eax,DWORD PTR [edx]
c001367f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013683:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013689:	52                   	push   edx
c001368a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001368d:	83 c4 10             	add    esp,0x10
c0013690:	83 c4 0c             	add    esp,0xc
c0013693:	c3                   	ret    

c0013694 <File::rewind()>:
c0013694:	83 ec 10             	sub    esp,0x10
c0013697:	6a 00                	push   0x0
c0013699:	6a 00                	push   0x0
c001369b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001369f:	e8 4a ff ff ff       	call   c00135ee <File::seek(unsigned long long)>
c00136a4:	83 c4 1c             	add    esp,0x1c
c00136a7:	c3                   	ret    

c00136a8 <File::unlink()>:
c00136a8:	83 ec 0c             	sub    esp,0xc
c00136ab:	b8 0b 00 00 00       	mov    eax,0xb
c00136b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136bb:	80 f9 19             	cmp    cl,0x19
c00136be:	77 2f                	ja     c00136ef <File::unlink()+0x47>
c00136c0:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c00136c7:	85 c9                	test   ecx,ecx
c00136c9:	74 24                	je     c00136ef <File::unlink()+0x47>
c00136cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136d1:	85 c9                	test   ecx,ecx
c00136d3:	74 1a                	je     c00136ef <File::unlink()+0x47>
c00136d5:	b8 06 00 00 00       	mov    eax,0x6
c00136da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136de:	75 0f                	jne    c00136ef <File::unlink()+0x47>
c00136e0:	83 c2 0d             	add    edx,0xd
c00136e3:	50                   	push   eax
c00136e4:	50                   	push   eax
c00136e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e7:	52                   	push   edx
c00136e8:	51                   	push   ecx
c00136e9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136ec:	83 c4 10             	add    esp,0x10
c00136ef:	83 c4 0c             	add    esp,0xc
c00136f2:	c3                   	ret    
c00136f3:	90                   	nop

c00136f4 <File::rename(char const*)>:
c00136f4:	83 ec 0c             	sub    esp,0xc
c00136f7:	b8 0b 00 00 00       	mov    eax,0xb
c00136fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013700:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013707:	80 f9 19             	cmp    cl,0x19
c001370a:	77 32                	ja     c001373e <File::rename(char const*)+0x4a>
c001370c:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013713:	85 c9                	test   ecx,ecx
c0013715:	74 27                	je     c001373e <File::rename(char const*)+0x4a>
c0013717:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001371d:	85 c9                	test   ecx,ecx
c001371f:	74 1d                	je     c001373e <File::rename(char const*)+0x4a>
c0013721:	b8 06 00 00 00       	mov    eax,0x6
c0013726:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001372a:	75 12                	jne    c001373e <File::rename(char const*)+0x4a>
c001372c:	83 c2 0d             	add    edx,0xd
c001372f:	50                   	push   eax
c0013730:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013732:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013736:	52                   	push   edx
c0013737:	51                   	push   ecx
c0013738:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001373b:	83 c4 10             	add    esp,0x10
c001373e:	83 c4 0c             	add    esp,0xc
c0013741:	c3                   	ret    

c0013742 <File::chfatattr(unsigned char, unsigned char)>:
c0013742:	57                   	push   edi
c0013743:	b8 0b 00 00 00       	mov    eax,0xb
c0013748:	56                   	push   esi
c0013749:	53                   	push   ebx
c001374a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013752:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013759:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001375d:	80 f9 19             	cmp    cl,0x19
c0013760:	77 37                	ja     c0013799 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013762:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013769:	85 c9                	test   ecx,ecx
c001376b:	74 2c                	je     c0013799 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001376d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013773:	85 c9                	test   ecx,ecx
c0013775:	74 22                	je     c0013799 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013777:	b8 06 00 00 00       	mov    eax,0x6
c001377c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013780:	75 17                	jne    c0013799 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013782:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013784:	89 f0                	mov    eax,esi
c0013786:	83 c2 0d             	add    edx,0xd
c0013789:	0f b6 f0             	movzx  esi,al
c001378c:	0f b6 db             	movzx  ebx,bl
c001378f:	56                   	push   esi
c0013790:	53                   	push   ebx
c0013791:	52                   	push   edx
c0013792:	51                   	push   ecx
c0013793:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	5b                   	pop    ebx
c001379a:	5e                   	pop    esi
c001379b:	5f                   	pop    edi
c001379c:	c3                   	ret    
c001379d:	90                   	nop

c001379e <File::exists()>:
c001379e:	83 ec 0c             	sub    esp,0xc
c00137a1:	31 c0                	xor    eax,eax
c00137a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137ae:	80 f9 19             	cmp    cl,0x19
c00137b1:	77 24                	ja     c00137d7 <File::exists()+0x39>
c00137b3:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c00137ba:	85 c9                	test   ecx,ecx
c00137bc:	74 19                	je     c00137d7 <File::exists()+0x39>
c00137be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137c4:	85 c9                	test   ecx,ecx
c00137c6:	74 0f                	je     c00137d7 <File::exists()+0x39>
c00137c8:	83 c2 0d             	add    edx,0xd
c00137cb:	50                   	push   eax
c00137cc:	50                   	push   eax
c00137cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137cf:	52                   	push   edx
c00137d0:	51                   	push   ecx
c00137d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137d4:	83 c4 10             	add    esp,0x10
c00137d7:	83 c4 0c             	add    esp,0xc
c00137da:	c3                   	ret    
c00137db:	90                   	nop

c00137dc <File::stat(unsigned long long*, bool*)>:
c00137dc:	56                   	push   esi
c00137dd:	53                   	push   ebx
c00137de:	50                   	push   eax
c00137df:	b8 0b 00 00 00       	mov    eax,0xb
c00137e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137f7:	80 f9 19             	cmp    cl,0x19
c00137fa:	77 3d                	ja     c0013839 <File::stat(unsigned long long*, bool*)+0x5d>
c00137fc:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013803:	85 c9                	test   ecx,ecx
c0013805:	74 32                	je     c0013839 <File::stat(unsigned long long*, bool*)+0x5d>
c0013807:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001380d:	85 c9                	test   ecx,ecx
c001380f:	74 28                	je     c0013839 <File::stat(unsigned long long*, bool*)+0x5d>
c0013811:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013813:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013817:	74 13                	je     c001382c <File::stat(unsigned long long*, bool*)+0x50>
c0013819:	83 ec 04             	sub    esp,0x4
c001381c:	56                   	push   esi
c001381d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013823:	51                   	push   ecx
c0013824:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013827:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001382a:	eb 0a                	jmp    c0013836 <File::stat(unsigned long long*, bool*)+0x5a>
c001382c:	53                   	push   ebx
c001382d:	83 c2 0d             	add    edx,0xd
c0013830:	56                   	push   esi
c0013831:	52                   	push   edx
c0013832:	51                   	push   ecx
c0013833:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013836:	83 c4 10             	add    esp,0x10
c0013839:	5a                   	pop    edx
c001383a:	5b                   	pop    ebx
c001383b:	5e                   	pop    esi
c001383c:	c3                   	ret    

c001383d <Fs::setcwd(Process*, char*)>:
c001383d:	55                   	push   ebp
c001383e:	57                   	push   edi
c001383f:	56                   	push   esi
c0013840:	53                   	push   ebx
c0013841:	81 ec 20 02 00 00    	sub    esp,0x220
c0013847:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001384e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013854:	57                   	push   edi
c0013855:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001385c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013860:	56                   	push   esi
c0013861:	e8 bc fa ff ff       	call   c0013322 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013866:	89 34 24             	mov    DWORD PTR [esp],esi
c0013869:	e8 26 cf fe ff       	call   c0000794 <strlen>
c001386e:	83 c4 10             	add    esp,0x10
c0013871:	83 f8 02             	cmp    eax,0x2
c0013874:	77 17                	ja     c001388d <Fs::setcwd(Process*, char*)+0x50>
c0013876:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001387b:	83 e8 41             	sub    eax,0x41
c001387e:	83 f8 19             	cmp    eax,0x19
c0013881:	76 24                	jbe    c00138a7 <Fs::setcwd(Process*, char*)+0x6a>
c0013883:	b8 03 00 00 00       	mov    eax,0x3
c0013888:	e9 e0 00 00 00       	jmp    c001396d <Fs::setcwd(Process*, char*)+0x130>
c001388d:	83 ec 0c             	sub    esp,0xc
c0013890:	56                   	push   esi
c0013891:	e8 fe ce fe ff       	call   c0000794 <strlen>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	83 f8 03             	cmp    eax,0x3
c001389c:	75 34                	jne    c00138d2 <Fs::setcwd(Process*, char*)+0x95>
c001389e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138a3:	75 2d                	jne    c00138d2 <Fs::setcwd(Process*, char*)+0x95>
c00138a5:	eb cf                	jmp    c0013876 <Fs::setcwd(Process*, char*)+0x39>
c00138a7:	8b 14 85 c0 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1540]
c00138ae:	b8 05 00 00 00       	mov    eax,0x5
c00138b3:	85 d2                	test   edx,edx
c00138b5:	0f 84 b2 00 00 00    	je     c001396d <Fs::setcwd(Process*, char*)+0x130>
c00138bb:	b8 06 00 00 00       	mov    eax,0x6
c00138c0:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138c7:	0f 85 92 00 00 00    	jne    c001395f <Fs::setcwd(Process*, char*)+0x122>
c00138cd:	e9 9b 00 00 00       	jmp    c001396d <Fs::setcwd(Process*, char*)+0x130>
c00138d2:	83 ec 0c             	sub    esp,0xc
c00138d5:	68 14 01 00 00       	push   0x114
c00138da:	e8 64 bf ff ff       	call   c000f843 <malloc>
c00138df:	83 c4 0c             	add    esp,0xc
c00138e2:	89 c3                	mov    ebx,eax
c00138e4:	55                   	push   ebp
c00138e5:	56                   	push   esi
c00138e6:	50                   	push   eax
c00138e7:	e8 e0 fb ff ff       	call   c00134cc <File::File(char const*, Process*)>
c00138ec:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138f1:	83 c4 0c             	add    esp,0xc
c00138f4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138f8:	50                   	push   eax
c00138f9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138fd:	50                   	push   eax
c00138fe:	53                   	push   ebx
c00138ff:	e8 d8 fe ff ff       	call   c00137dc <File::stat(unsigned long long*, bool*)>
c0013904:	83 c4 10             	add    esp,0x10
c0013907:	83 f8 02             	cmp    eax,0x2
c001390a:	74 04                	je     c0013910 <Fs::setcwd(Process*, char*)+0xd3>
c001390c:	85 c0                	test   eax,eax
c001390e:	74 1c                	je     c001392c <Fs::setcwd(Process*, char*)+0xef>
c0013910:	b8 01 00 00 00       	mov    eax,0x1
c0013915:	85 db                	test   ebx,ebx
c0013917:	74 54                	je     c001396d <Fs::setcwd(Process*, char*)+0x130>
c0013919:	83 ec 0c             	sub    esp,0xc
c001391c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001391e:	53                   	push   ebx
c001391f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013922:	83 c4 10             	add    esp,0x10
c0013925:	b8 01 00 00 00       	mov    eax,0x1
c001392a:	eb 41                	jmp    c001396d <Fs::setcwd(Process*, char*)+0x130>
c001392c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013931:	75 1c                	jne    c001394f <Fs::setcwd(Process*, char*)+0x112>
c0013933:	b8 02 00 00 00       	mov    eax,0x2
c0013938:	85 db                	test   ebx,ebx
c001393a:	74 31                	je     c001396d <Fs::setcwd(Process*, char*)+0x130>
c001393c:	83 ec 0c             	sub    esp,0xc
c001393f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013941:	53                   	push   ebx
c0013942:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	b8 02 00 00 00       	mov    eax,0x2
c001394d:	eb 1e                	jmp    c001396d <Fs::setcwd(Process*, char*)+0x130>
c001394f:	85 db                	test   ebx,ebx
c0013951:	74 0c                	je     c001395f <Fs::setcwd(Process*, char*)+0x122>
c0013953:	83 ec 0c             	sub    esp,0xc
c0013956:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013958:	53                   	push   ebx
c0013959:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	50                   	push   eax
c0013960:	50                   	push   eax
c0013961:	56                   	push   esi
c0013962:	57                   	push   edi
c0013963:	e8 cc ce fe ff       	call   c0000834 <strcpy>
c0013968:	83 c4 10             	add    esp,0x10
c001396b:	31 c0                	xor    eax,eax
c001396d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013973:	5b                   	pop    ebx
c0013974:	5e                   	pop    esi
c0013975:	5f                   	pop    edi
c0013976:	5d                   	pop    ebp
c0013977:	c3                   	ret    

c0013978 <Directory::Directory(char const*, Process*)>:
c0013978:	83 ec 0c             	sub    esp,0xc
c001397b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397f:	83 ec 08             	sub    esp,0x8
c0013982:	6a 00                	push   0x0
c0013984:	50                   	push   eax
c0013985:	e8 76 dd ff ff       	call   c0011700 <UnixFile::UnixFile(int)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	ba bc ab 02 c0       	mov    edx,0xc002abbc
c0013992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013996:	89 10                	mov    DWORD PTR [eax],edx
c0013998:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001399c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a6:	83 c0 0d             	add    eax,0xd
c00139a9:	83 ec 04             	sub    esp,0x4
c00139ac:	52                   	push   edx
c00139ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139b1:	50                   	push   eax
c00139b2:	e8 6b f9 ff ff       	call   c0013322 <Fs::standardiseFiles(char*, char const*, char const*)>
c00139b7:	83 c4 10             	add    esp,0x10
c00139ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139be:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139c1:	8d 50 bf             	lea    edx,[eax-0x41]
c00139c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139d6:	90                   	nop
c00139d7:	83 c4 0c             	add    esp,0xc
c00139da:	c3                   	ret    
c00139db:	90                   	nop

c00139dc <Directory::open()>:
c00139dc:	53                   	push   ebx
c00139dd:	b8 0b 00 00 00       	mov    eax,0xb
c00139e2:	83 ec 08             	sub    esp,0x8
c00139e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139e9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139f0:	80 fa 19             	cmp    dl,0x19
c00139f3:	77 3d                	ja     c0013a32 <Directory::open()+0x56>
c00139f5:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c00139fc:	85 d2                	test   edx,edx
c00139fe:	74 32                	je     c0013a32 <Directory::open()+0x56>
c0013a00:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a06:	85 d2                	test   edx,edx
c0013a08:	74 28                	je     c0013a32 <Directory::open()+0x56>
c0013a0a:	b8 06 00 00 00       	mov    eax,0x6
c0013a0f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a13:	75 1d                	jne    c0013a32 <Directory::open()+0x56>
c0013a15:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a1b:	50                   	push   eax
c0013a1c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a1e:	51                   	push   ecx
c0013a1f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a22:	51                   	push   ecx
c0013a23:	52                   	push   edx
c0013a24:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a27:	83 c4 10             	add    esp,0x10
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	75 04                	jne    c0013a32 <Directory::open()+0x56>
c0013a2e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a32:	83 c4 08             	add    esp,0x8
c0013a35:	5b                   	pop    ebx
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <Directory::close()>:
c0013a38:	53                   	push   ebx
c0013a39:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3e:	83 ec 08             	sub    esp,0x8
c0013a41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a45:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a4c:	80 fa 19             	cmp    dl,0x19
c0013a4f:	77 41                	ja     c0013a92 <Directory::close()+0x5a>
c0013a51:	8b 1c 95 c0 ea 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1540]
c0013a58:	85 db                	test   ebx,ebx
c0013a5a:	74 36                	je     c0013a92 <Directory::close()+0x5a>
c0013a5c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a63:	74 2d                	je     c0013a92 <Directory::close()+0x5a>
c0013a65:	b8 05 00 00 00       	mov    eax,0x5
c0013a6a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a6e:	74 22                	je     c0013a92 <Directory::close()+0x5a>
c0013a70:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a74:	8b 04 95 c0 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1540]
c0013a7b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a81:	53                   	push   ebx
c0013a82:	53                   	push   ebx
c0013a83:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a85:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a8b:	50                   	push   eax
c0013a8c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	83 c4 08             	add    esp,0x8
c0013a95:	5b                   	pop    ebx
c0013a96:	c3                   	ret    
c0013a97:	90                   	nop

c0013a98 <Directory::unlink()>:
c0013a98:	83 ec 0c             	sub    esp,0xc
c0013a9b:	b8 0b 00 00 00       	mov    eax,0xb
c0013aa0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aab:	80 f9 19             	cmp    cl,0x19
c0013aae:	77 2f                	ja     c0013adf <Directory::unlink()+0x47>
c0013ab0:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013ab7:	85 c9                	test   ecx,ecx
c0013ab9:	74 24                	je     c0013adf <Directory::unlink()+0x47>
c0013abb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ac1:	85 c9                	test   ecx,ecx
c0013ac3:	74 1a                	je     c0013adf <Directory::unlink()+0x47>
c0013ac5:	b8 06 00 00 00       	mov    eax,0x6
c0013aca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ace:	75 0f                	jne    c0013adf <Directory::unlink()+0x47>
c0013ad0:	83 c2 0d             	add    edx,0xd
c0013ad3:	50                   	push   eax
c0013ad4:	50                   	push   eax
c0013ad5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad7:	52                   	push   edx
c0013ad8:	51                   	push   ecx
c0013ad9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	83 c4 0c             	add    esp,0xc
c0013ae2:	c3                   	ret    
c0013ae3:	90                   	nop

c0013ae4 <Directory::rename(char const*)>:
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	b8 0b 00 00 00       	mov    eax,0xb
c0013aec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013af7:	80 f9 19             	cmp    cl,0x19
c0013afa:	77 32                	ja     c0013b2e <Directory::rename(char const*)+0x4a>
c0013afc:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013b03:	85 c9                	test   ecx,ecx
c0013b05:	74 27                	je     c0013b2e <Directory::rename(char const*)+0x4a>
c0013b07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b0d:	85 c9                	test   ecx,ecx
c0013b0f:	74 1d                	je     c0013b2e <Directory::rename(char const*)+0x4a>
c0013b11:	b8 06 00 00 00       	mov    eax,0x6
c0013b16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b1a:	75 12                	jne    c0013b2e <Directory::rename(char const*)+0x4a>
c0013b1c:	83 c2 0d             	add    edx,0xd
c0013b1f:	50                   	push   eax
c0013b20:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b26:	52                   	push   edx
c0013b27:	51                   	push   ecx
c0013b28:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	83 c4 0c             	add    esp,0xc
c0013b31:	c3                   	ret    

c0013b32 <Directory::exists()>:
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	31 c0                	xor    eax,eax
c0013b37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b3b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b42:	80 f9 19             	cmp    cl,0x19
c0013b45:	77 24                	ja     c0013b6b <Directory::exists()+0x39>
c0013b47:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013b4e:	85 c9                	test   ecx,ecx
c0013b50:	74 19                	je     c0013b6b <Directory::exists()+0x39>
c0013b52:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b58:	85 c9                	test   ecx,ecx
c0013b5a:	74 0f                	je     c0013b6b <Directory::exists()+0x39>
c0013b5c:	83 c2 0d             	add    edx,0xd
c0013b5f:	50                   	push   eax
c0013b60:	50                   	push   eax
c0013b61:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b63:	52                   	push   edx
c0013b64:	51                   	push   ecx
c0013b65:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	83 c4 0c             	add    esp,0xc
c0013b6e:	c3                   	ret    
c0013b6f:	90                   	nop

c0013b70 <Directory::read(dirent*)>:
c0013b70:	83 ec 1c             	sub    esp,0x1c
c0013b73:	b8 0b 00 00 00       	mov    eax,0xb
c0013b78:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b7c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b83:	80 fa 19             	cmp    dl,0x19
c0013b86:	77 30                	ja     c0013bb8 <Directory::read(dirent*)+0x48>
c0013b88:	8b 14 95 c0 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1540]
c0013b8f:	85 d2                	test   edx,edx
c0013b91:	74 25                	je     c0013bb8 <Directory::read(dirent*)+0x48>
c0013b93:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b9a:	74 1c                	je     c0013bb8 <Directory::read(dirent*)+0x48>
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ba1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ba5:	52                   	push   edx
c0013ba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013baa:	6a 00                	push   0x0
c0013bac:	68 10 01 00 00       	push   0x110
c0013bb1:	51                   	push   ecx
c0013bb2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bb5:	83 c4 20             	add    esp,0x20
c0013bb8:	83 c4 1c             	add    esp,0x1c
c0013bbb:	c3                   	ret    

c0013bbc <Directory::create()>:
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	b8 0b 00 00 00       	mov    eax,0xb
c0013bc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bcf:	80 f9 19             	cmp    cl,0x19
c0013bd2:	77 2f                	ja     c0013c03 <Directory::create()+0x47>
c0013bd4:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0013bdb:	85 c9                	test   ecx,ecx
c0013bdd:	74 24                	je     c0013c03 <Directory::create()+0x47>
c0013bdf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013be5:	85 c9                	test   ecx,ecx
c0013be7:	74 1a                	je     c0013c03 <Directory::create()+0x47>
c0013be9:	b8 06 00 00 00       	mov    eax,0x6
c0013bee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bf2:	75 0f                	jne    c0013c03 <Directory::create()+0x47>
c0013bf4:	83 c2 0d             	add    edx,0xd
c0013bf7:	50                   	push   eax
c0013bf8:	50                   	push   eax
c0013bf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bfb:	52                   	push   edx
c0013bfc:	51                   	push   ecx
c0013bfd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c00:	83 c4 10             	add    esp,0x10
c0013c03:	83 c4 0c             	add    esp,0xc
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c08:	b8 0a 00 00 00       	mov    eax,0xa
c0013c0d:	c3                   	ret    

c0013c0e <Bus::Bus(char const*)>:
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c15:	83 ec 08             	sub    esp,0x8
c0013c18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c1c:	50                   	push   eax
c0013c1d:	e8 68 09 00 00       	call   c001458a <Device::Device(char const*)>
c0013c22:	83 c4 10             	add    esp,0x10
c0013c25:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0013c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2e:	89 10                	mov    DWORD PTR [eax],edx
c0013c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c34:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c3e:	90                   	nop
c0013c3f:	83 c4 0c             	add    esp,0xc
c0013c42:	c3                   	ret    
c0013c43:	90                   	nop

c0013c44 <Bus::~Bus()>:
c0013c44:	83 ec 0c             	sub    esp,0xc
c0013c47:	ba d8 ab 02 c0       	mov    edx,0xc002abd8
c0013c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c50:	89 10                	mov    DWORD PTR [eax],edx
c0013c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	50                   	push   eax
c0013c5a:	e8 0d 06 00 00       	call   c001426c <Device::~Device()>
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	90                   	nop
c0013c63:	83 c4 0c             	add    esp,0xc
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop

c0013c68 <Bus::~Bus()>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	83 ec 0c             	sub    esp,0xc
c0013c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c72:	e8 cd ff ff ff       	call   c0013c44 <Bus::~Bus()>
c0013c77:	83 c4 10             	add    esp,0x10
c0013c7a:	83 ec 08             	sub    esp,0x8
c0013c7d:	68 58 01 00 00       	push   0x158
c0013c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c86:	e8 09 f2 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0013c8b:	83 c4 10             	add    esp,0x10
c0013c8e:	83 c4 0c             	add    esp,0xc
c0013c91:	c3                   	ret    

c0013c92 <Buzzer::Buzzer(char const*)>:
c0013c92:	83 ec 0c             	sub    esp,0xc
c0013c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c99:	83 ec 08             	sub    esp,0x8
c0013c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca0:	50                   	push   eax
c0013ca1:	e8 e4 08 00 00       	call   c001458a <Device::Device(char const*)>
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c0013cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb2:	89 10                	mov    DWORD PTR [eax],edx
c0013cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cd0:	90                   	nop
c0013cd1:	83 c4 0c             	add    esp,0xc
c0013cd4:	c3                   	ret    
c0013cd5:	90                   	nop

c0013cd6 <Buzzer::~Buzzer()>:
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	ba 04 ac 02 c0       	mov    edx,0xc002ac04
c0013cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce2:	89 10                	mov    DWORD PTR [eax],edx
c0013ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce8:	83 ec 0c             	sub    esp,0xc
c0013ceb:	50                   	push   eax
c0013cec:	e8 7b 05 00 00       	call   c001426c <Device::~Device()>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	90                   	nop
c0013cf5:	83 c4 0c             	add    esp,0xc
c0013cf8:	c3                   	ret    
c0013cf9:	90                   	nop

c0013cfa <Buzzer::~Buzzer()>:
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	83 ec 0c             	sub    esp,0xc
c0013d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d04:	e8 cd ff ff ff       	call   c0013cd6 <Buzzer::~Buzzer()>
c0013d09:	83 c4 10             	add    esp,0x10
c0013d0c:	83 ec 08             	sub    esp,0x8
c0013d0f:	68 5c 01 00 00       	push   0x15c
c0013d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d18:	e8 77 f1 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	83 c4 0c             	add    esp,0xc
c0013d23:	c3                   	ret    

c0013d24 <Buzzer::stop()>:
c0013d24:	83 ec 14             	sub    esp,0x14
c0013d27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d2d:	6a 00                	push   0x0
c0013d2f:	50                   	push   eax
c0013d30:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d33:	83 c4 1c             	add    esp,0x1c
c0013d36:	c3                   	ret    

c0013d37 <beepThread(void*)>:
c0013d37:	53                   	push   ebx
c0013d38:	83 ec 08             	sub    esp,0x8
c0013d3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d3f:	e8 d4 a0 00 00       	call   c001de18 <unlockScheduler()>
c0013d44:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d49:	52                   	push   edx
c0013d4a:	52                   	push   edx
c0013d4b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d51:	52                   	push   edx
c0013d52:	50                   	push   eax
c0013d53:	e8 0e a6 00 00       	call   c001e366 <nanoSleep(unsigned long long)>
c0013d58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d5b:	e8 c4 ff ff ff       	call   c0013d24 <Buzzer::stop()>
c0013d60:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d68:	83 c4 18             	add    esp,0x18
c0013d6b:	5b                   	pop    ebx
c0013d6c:	e9 3b a5 00 00       	jmp    c001e2ac <blockTask(TaskState)>
c0013d71:	90                   	nop

c0013d72 <Buzzer::beep(int, int, bool)>:
c0013d72:	57                   	push   edi
c0013d73:	56                   	push   esi
c0013d74:	53                   	push   ebx
c0013d75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d79:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d81:	52                   	push   edx
c0013d82:	52                   	push   edx
c0013d83:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d89:	56                   	push   esi
c0013d8a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	89 f8                	mov    eax,edi
c0013d92:	84 c0                	test   al,al
c0013d94:	74 1f                	je     c0013db5 <Buzzer::beep(int, int, bool)+0x43>
c0013d96:	50                   	push   eax
c0013d97:	50                   	push   eax
c0013d98:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d9e:	99                   	cdq    
c0013d9f:	52                   	push   edx
c0013da0:	50                   	push   eax
c0013da1:	e8 c0 a5 00 00       	call   c001e366 <nanoSleep(unsigned long long)>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013dad:	5b                   	pop    ebx
c0013dae:	5e                   	pop    esi
c0013daf:	5f                   	pop    edi
c0013db0:	e9 6f ff ff ff       	jmp    c0013d24 <Buzzer::stop()>
c0013db5:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013dbb:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0013dc0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dc8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013dcc:	c7 44 24 14 37 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d37
c0013dd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dd8:	5b                   	pop    ebx
c0013dd9:	5e                   	pop    esi
c0013dda:	5f                   	pop    edi
c0013ddb:	e9 68 a1 00 00       	jmp    c001df48 <Process::createThread(void (*)(void*), void*, int)>

c0013de0 <User::loadClockSettings(int)>:
c0013de0:	53                   	push   ebx
c0013de1:	83 ec 14             	sub    esp,0x14
c0013de4:	68 14 01 00 00       	push   0x114
c0013de9:	e8 55 ba ff ff       	call   c000f843 <malloc>
c0013dee:	83 c4 0c             	add    esp,0xc
c0013df1:	89 c3                	mov    ebx,eax
c0013df3:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c0013df9:	68 2c ac 02 c0       	push   0xc002ac2c
c0013dfe:	50                   	push   eax
c0013dff:	e8 c8 f6 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c0013e04:	58                   	pop    eax
c0013e05:	5a                   	pop    edx
c0013e06:	6a 01                	push   0x1
c0013e08:	53                   	push   ebx
c0013e09:	e8 22 f7 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c0013e0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e11:	e8 78 f7 ff ff       	call   c001358e <File::close()>
c0013e16:	83 c4 10             	add    esp,0x10
c0013e19:	85 db                	test   ebx,ebx
c0013e1b:	74 0f                	je     c0013e2c <User::loadClockSettings(int)+0x4c>
c0013e1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e26:	83 c4 08             	add    esp,0x8
c0013e29:	5b                   	pop    ebx
c0013e2a:	ff e0                	jmp    eax
c0013e2c:	83 c4 08             	add    esp,0x8
c0013e2f:	5b                   	pop    ebx
c0013e30:	c3                   	ret    
c0013e31:	90                   	nop

c0013e32 <Clock::Clock(char const*)>:
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e39:	83 ec 08             	sub    esp,0x8
c0013e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e40:	50                   	push   eax
c0013e41:	e8 44 07 00 00       	call   c001458a <Device::Device(char const*)>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c0013e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e52:	89 10                	mov    DWORD PTR [eax],edx
c0013e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e58:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e62:	90                   	nop
c0013e63:	83 c4 0c             	add    esp,0xc
c0013e66:	c3                   	ret    
c0013e67:	90                   	nop

c0013e68 <Clock::~Clock()>:
c0013e68:	83 ec 0c             	sub    esp,0xc
c0013e6b:	ba 54 ac 02 c0       	mov    edx,0xc002ac54
c0013e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e74:	89 10                	mov    DWORD PTR [eax],edx
c0013e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	50                   	push   eax
c0013e7e:	e8 e9 03 00 00       	call   c001426c <Device::~Device()>
c0013e83:	83 c4 10             	add    esp,0x10
c0013e86:	90                   	nop
c0013e87:	83 c4 0c             	add    esp,0xc
c0013e8a:	c3                   	ret    
c0013e8b:	90                   	nop

c0013e8c <Clock::~Clock()>:
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e96:	e8 cd ff ff ff       	call   c0013e68 <Clock::~Clock()>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	83 ec 08             	sub    esp,0x8
c0013ea1:	68 58 01 00 00       	push   0x158
c0013ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eaa:	e8 e5 ef ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	83 c4 0c             	add    esp,0xc
c0013eb5:	c3                   	ret    

c0013eb6 <Clock::timeInSecondsLocal()>:
c0013eb6:	53                   	push   ebx
c0013eb7:	83 ec 14             	sub    esp,0x14
c0013eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ebe:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ec0:	50                   	push   eax
c0013ec1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ec4:	0f b6 0d 38 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e638
c0013ecb:	03 0d 3c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e63c
c0013ed1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ed7:	89 cb                	mov    ebx,ecx
c0013ed9:	c1 fb 1f             	sar    ebx,0x1f
c0013edc:	01 c8                	add    eax,ecx
c0013ede:	11 da                	adc    edx,ebx
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	31 c9                	xor    ecx,ecx
c0013ee5:	80 3d 39 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e639,0x0
c0013eec:	74 05                	je     c0013ef3 <Clock::timeInSecondsLocal()+0x3d>
c0013eee:	b9 08 07 00 00       	mov    ecx,0x708
c0013ef3:	31 db                	xor    ebx,ebx
c0013ef5:	01 c8                	add    eax,ecx
c0013ef7:	11 da                	adc    edx,ebx
c0013ef9:	83 c4 08             	add    esp,0x8
c0013efc:	5b                   	pop    ebx
c0013efd:	c3                   	ret    

c0013efe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013efe:	57                   	push   edi
c0013eff:	56                   	push   esi
c0013f00:	53                   	push   ebx
c0013f01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f0f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f12:	0f b6 05 38 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e638
c0013f19:	03 05 3c e6 02 c0    	add    eax,DWORD PTR ds:0xc002e63c
c0013f1f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f25:	99                   	cdq    
c0013f26:	29 c6                	sub    esi,eax
c0013f28:	19 d7                	sbb    edi,edx
c0013f2a:	89 f0                	mov    eax,esi
c0013f2c:	89 fa                	mov    edx,edi
c0013f2e:	31 f6                	xor    esi,esi
c0013f30:	80 3d 39 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e639,0x0
c0013f37:	74 05                	je     c0013f3e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f39:	be 08 07 00 00       	mov    esi,0x708
c0013f3e:	31 ff                	xor    edi,edi
c0013f40:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f44:	29 f0                	sub    eax,esi
c0013f46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f4a:	19 fa                	sbb    edx,edi
c0013f4c:	89 d8                	mov    eax,ebx
c0013f4e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f52:	5b                   	pop    ebx
c0013f53:	5e                   	pop    esi
c0013f54:	5f                   	pop    edi
c0013f55:	ff e0                	jmp    eax

c0013f57 <datetimeToSeconds(datetime_t)>:
c0013f57:	55                   	push   ebp
c0013f58:	57                   	push   edi
c0013f59:	56                   	push   esi
c0013f5a:	53                   	push   ebx
c0013f5b:	83 ec 14             	sub    esp,0x14
c0013f5e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f62:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f66:	89 d3                	mov    ebx,edx
c0013f68:	0f b6 c6             	movzx  eax,dh
c0013f6b:	c1 eb 10             	shr    ebx,0x10
c0013f6e:	48                   	dec    eax
c0013f6f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f74:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f78:	0f b6 f5             	movzx  esi,ch
c0013f7b:	89 cf                	mov    edi,ecx
c0013f7d:	6b f6 3c             	imul   esi,esi,0x3c
c0013f80:	c1 ef 10             	shr    edi,0x10
c0013f83:	0f b6 c9             	movzx  ecx,cl
c0013f86:	89 f8                	mov    eax,edi
c0013f88:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f8e:	0f b6 f8             	movzx  edi,al
c0013f91:	0f b6 d2             	movzx  edx,dl
c0013f94:	01 fe                	add    esi,edi
c0013f96:	01 f1                	add    ecx,esi
c0013f98:	0f b7 f3             	movzx  esi,bx
c0013f9b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f9f:	c1 f9 1f             	sar    ecx,0x1f
c0013fa2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013fa7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fab:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013fb0:	8b 0c 8d a0 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5360]
c0013fb7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fbb:	76 29                	jbe    c0013fe6 <datetimeToSeconds(datetime_t)+0x8f>
c0013fbd:	f6 c3 03             	test   bl,0x3
c0013fc0:	75 24                	jne    c0013fe6 <datetimeToSeconds(datetime_t)+0x8f>
c0013fc2:	31 d2                	xor    edx,edx
c0013fc4:	bf 64 00 00 00       	mov    edi,0x64
c0013fc9:	89 d8                	mov    eax,ebx
c0013fcb:	66 f7 f7             	div    di
c0013fce:	66 85 d2             	test   dx,dx
c0013fd1:	75 12                	jne    c0013fe5 <datetimeToSeconds(datetime_t)+0x8e>
c0013fd3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fd9:	bf 90 01 00 00       	mov    edi,0x190
c0013fde:	99                   	cdq    
c0013fdf:	f7 ff                	idiv   edi
c0013fe1:	85 d2                	test   edx,edx
c0013fe3:	75 01                	jne    c0013fe6 <datetimeToSeconds(datetime_t)+0x8f>
c0013fe5:	41                   	inc    ecx
c0013fe6:	66 83 fb 46          	cmp    bx,0x46
c0013fea:	76 45                	jbe    c0014031 <datetimeToSeconds(datetime_t)+0xda>
c0013fec:	bb 46 00 00 00       	mov    ebx,0x46
c0013ff1:	bf 64 00 00 00       	mov    edi,0x64
c0013ff6:	bd 90 01 00 00       	mov    ebp,0x190
c0013ffb:	b8 6d 01 00 00       	mov    eax,0x16d
c0014000:	f6 c3 03             	test   bl,0x3
c0014003:	75 23                	jne    c0014028 <datetimeToSeconds(datetime_t)+0xd1>
c0014005:	89 d8                	mov    eax,ebx
c0014007:	99                   	cdq    
c0014008:	f7 ff                	idiv   edi
c001400a:	b8 6e 01 00 00       	mov    eax,0x16e
c001400f:	85 d2                	test   edx,edx
c0014011:	75 15                	jne    c0014028 <datetimeToSeconds(datetime_t)+0xd1>
c0014013:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014019:	99                   	cdq    
c001401a:	f7 fd                	idiv   ebp
c001401c:	83 fa 01             	cmp    edx,0x1
c001401f:	19 c0                	sbb    eax,eax
c0014021:	f7 d0                	not    eax
c0014023:	05 6e 01 00 00       	add    eax,0x16e
c0014028:	01 c1                	add    ecx,eax
c001402a:	43                   	inc    ebx
c001402b:	39 f3                	cmp    ebx,esi
c001402d:	7c cc                	jl     c0013ffb <datetimeToSeconds(datetime_t)+0xa4>
c001402f:	eb 35                	jmp    c0014066 <datetimeToSeconds(datetime_t)+0x10f>
c0014031:	74 33                	je     c0014066 <datetimeToSeconds(datetime_t)+0x10f>
c0014033:	b8 45 00 00 00       	mov    eax,0x45
c0014038:	89 c2                	mov    edx,eax
c001403a:	83 e2 03             	and    edx,0x3
c001403d:	39 f0                	cmp    eax,esi
c001403f:	7e 0f                	jle    c0014050 <datetimeToSeconds(datetime_t)+0xf9>
c0014041:	83 fa 01             	cmp    edx,0x1
c0014044:	19 d2                	sbb    edx,edx
c0014046:	48                   	dec    eax
c0014047:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001404e:	eb e8                	jmp    c0014038 <datetimeToSeconds(datetime_t)+0xe1>
c0014050:	b8 6d 01 00 00       	mov    eax,0x16d
c0014055:	85 d2                	test   edx,edx
c0014057:	75 0b                	jne    c0014064 <datetimeToSeconds(datetime_t)+0x10d>
c0014059:	66 83 fb 01          	cmp    bx,0x1
c001405d:	19 c0                	sbb    eax,eax
c001405f:	05 6e 01 00 00       	add    eax,0x16e
c0014064:	29 c1                	sub    ecx,eax
c0014066:	b8 80 51 01 00       	mov    eax,0x15180
c001406b:	f7 e9                	imul   ecx
c001406d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0014071:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014075:	83 c4 14             	add    esp,0x14
c0014078:	5b                   	pop    ebx
c0014079:	5e                   	pop    esi
c001407a:	5f                   	pop    edi
c001407b:	5d                   	pop    ebp
c001407c:	c3                   	ret    
c001407d:	90                   	nop

c001407e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001407e:	57                   	push   edi
c001407f:	56                   	push   esi
c0014080:	53                   	push   ebx
c0014081:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014085:	8b 06                	mov    eax,DWORD PTR [esi]
c0014087:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001408a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001408e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014092:	e8 c0 fe ff ff       	call   c0013f57 <datetimeToSeconds(datetime_t)>
c0014097:	59                   	pop    ecx
c0014098:	0f b6 0d 38 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e638
c001409f:	5b                   	pop    ebx
c00140a0:	03 0d 3c e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e63c
c00140a6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140ac:	89 cb                	mov    ebx,ecx
c00140ae:	c1 fb 1f             	sar    ebx,0x1f
c00140b1:	29 c8                	sub    eax,ecx
c00140b3:	19 da                	sbb    edx,ebx
c00140b5:	31 c9                	xor    ecx,ecx
c00140b7:	80 3d 39 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e639,0x0
c00140be:	74 05                	je     c00140c5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140c0:	b9 08 07 00 00       	mov    ecx,0x708
c00140c5:	31 db                	xor    ebx,ebx
c00140c7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140cb:	29 c8                	sub    eax,ecx
c00140cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140d1:	19 da                	sbb    edx,ebx
c00140d3:	89 f8                	mov    eax,edi
c00140d5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140d9:	5b                   	pop    ebx
c00140da:	5e                   	pop    esi
c00140db:	5f                   	pop    edi
c00140dc:	ff e0                	jmp    eax

c00140de <secondsToDatetime(unsigned long long)>:
c00140de:	55                   	push   ebp
c00140df:	57                   	push   edi
c00140e0:	56                   	push   esi
c00140e1:	53                   	push   ebx
c00140e2:	83 ec 1c             	sub    esp,0x1c
c00140e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140ed:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140f1:	6a 00                	push   0x0
c00140f3:	68 80 51 01 00       	push   0x15180
c00140f8:	55                   	push   ebp
c00140f9:	57                   	push   edi
c00140fa:	e8 ed 28 01 00       	call   c00269ec <__udivdi3>
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014108:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001410c:	6a 00                	push   0x0
c001410e:	68 80 51 01 00       	push   0x15180
c0014113:	55                   	push   ebp
c0014114:	57                   	push   edi
c0014115:	bf 10 0e 00 00       	mov    edi,0xe10
c001411a:	e8 cd 29 01 00       	call   c0026aec <__umoddi3>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	99                   	cdq    
c0014123:	f7 ff                	idiv   edi
c0014125:	bf 3c 00 00 00       	mov    edi,0x3c
c001412a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001412d:	89 d0                	mov    eax,edx
c001412f:	99                   	cdq    
c0014130:	f7 ff                	idiv   edi
c0014132:	85 db                	test   ebx,ebx
c0014134:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014137:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001413a:	79 11                	jns    c001414d <secondsToDatetime(unsigned long long)+0x6f>
c001413c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014140:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014146:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001414b:	eb 07                	jmp    c0014154 <secondsToDatetime(unsigned long long)+0x76>
c001414d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014152:	89 d8                	mov    eax,ebx
c0014154:	bf b4 05 00 00       	mov    edi,0x5b4
c0014159:	99                   	cdq    
c001415a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001415f:	f7 f9                	idiv   ecx
c0014161:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014166:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001416a:	31 d2                	xor    edx,edx
c001416c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014174:	01 c3                	add    ebx,eax
c0014176:	89 d8                	mov    eax,ebx
c0014178:	f7 f1                	div    ecx
c001417a:	31 d2                	xor    edx,edx
c001417c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001417f:	89 d8                	mov    eax,ebx
c0014181:	f7 f7                	div    edi
c0014183:	31 d2                	xor    edx,edx
c0014185:	29 c1                	sub    ecx,eax
c0014187:	89 d8                	mov    eax,ebx
c0014189:	f7 f5                	div    ebp
c001418b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014190:	29 c1                	sub    ecx,eax
c0014192:	31 d2                	xor    edx,edx
c0014194:	89 c8                	mov    eax,ecx
c0014196:	f7 f5                	div    ebp
c0014198:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001419d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141a1:	31 d2                	xor    edx,edx
c00141a3:	89 c8                	mov    eax,ecx
c00141a5:	f7 f5                	div    ebp
c00141a7:	31 d2                	xor    edx,edx
c00141a9:	01 c3                	add    ebx,eax
c00141ab:	89 c8                	mov    eax,ecx
c00141ad:	f7 f7                	div    edi
c00141af:	bf 99 00 00 00       	mov    edi,0x99
c00141b4:	29 c3                	sub    ebx,eax
c00141b6:	31 d2                	xor    edx,edx
c00141b8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141c0:	29 c3                	sub    ebx,eax
c00141c2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141c5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141c8:	bb 05 00 00 00       	mov    ebx,0x5
c00141cd:	83 c1 02             	add    ecx,0x2
c00141d0:	89 c8                	mov    eax,ecx
c00141d2:	f7 f7                	div    edi
c00141d4:	31 d2                	xor    edx,edx
c00141d6:	89 c7                	mov    edi,eax
c00141d8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141de:	83 c0 02             	add    eax,0x2
c00141e1:	f7 f3                	div    ebx
c00141e3:	89 eb                	mov    ebx,ebp
c00141e5:	29 c3                	sub    ebx,eax
c00141e7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141ed:	88 1e                	mov    BYTE PTR [esi],bl
c00141ef:	19 c0                	sbb    eax,eax
c00141f1:	31 d2                	xor    edx,edx
c00141f3:	83 e0 0c             	and    eax,0xc
c00141f6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141fa:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014202:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014206:	83 f9 01             	cmp    ecx,0x1
c0014209:	0f 96 c2             	setbe  dl
c001420c:	41                   	inc    ecx
c001420d:	01 d0                	add    eax,edx
c001420f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014212:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014216:	83 c4 1c             	add    esp,0x1c
c0014219:	89 f0                	mov    eax,esi
c001421b:	5b                   	pop    ebx
c001421c:	5e                   	pop    esi
c001421d:	5f                   	pop    edi
c001421e:	5d                   	pop    ebp
c001421f:	c2 04 00             	ret    0x4

c0014222 <Clock::timeInDatetimeLocal()>:
c0014222:	53                   	push   ebx
c0014223:	83 ec 14             	sub    esp,0x14
c0014226:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001422a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001422e:	e8 83 fc ff ff       	call   c0013eb6 <Clock::timeInSecondsLocal()>
c0014233:	83 c4 0c             	add    esp,0xc
c0014236:	52                   	push   edx
c0014237:	50                   	push   eax
c0014238:	53                   	push   ebx
c0014239:	e8 a0 fe ff ff       	call   c00140de <secondsToDatetime(unsigned long long)>
c001423e:	89 d8                	mov    eax,ebx
c0014240:	83 c4 14             	add    esp,0x14
c0014243:	5b                   	pop    ebx
c0014244:	c2 04 00             	ret    0x4
c0014247:	90                   	nop

c0014248 <Device::hibernate()>:
c0014248:	c3                   	ret    
c0014249:	90                   	nop

c001424a <Device::wake()>:
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <Device::detect()>:
c001424c:	c3                   	ret    
c001424d:	90                   	nop

c001424e <Device::disableLegacy()>:
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <Device::powerSaving(PowerSavingLevel)>:
c0014250:	c3                   	ret    
c0014251:	90                   	nop

c0014252 <DriverlessDevice::close(int, int, void*)>:
c0014252:	31 c0                	xor    eax,eax
c0014254:	c3                   	ret    
c0014255:	90                   	nop

c0014256 <DriverlessDevice::detect()>:
c0014256:	c3                   	ret    
c0014257:	90                   	nop

c0014258 <DriverlessDevice::open(int, int, void*)>:
c0014258:	83 ec 18             	sub    esp,0x18
c001425b:	68 d0 ac 02 c0       	push   0xc002acd0
c0014260:	e8 bc 63 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0014265:	83 c8 ff             	or     eax,0xffffffff
c0014268:	83 c4 1c             	add    esp,0x1c
c001426b:	c3                   	ret    

c001426c <Device::~Device()>:
c001426c:	ba f8 ac 02 c0       	mov    edx,0xc002acf8
c0014271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014275:	89 10                	mov    DWORD PTR [eax],edx
c0014277:	90                   	nop
c0014278:	c3                   	ret    
c0014279:	90                   	nop

c001427a <Device::~Device()>:
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014281:	e8 e6 ff ff ff       	call   c001426c <Device::~Device()>
c0014286:	83 c4 04             	add    esp,0x4
c0014289:	83 ec 08             	sub    esp,0x8
c001428c:	68 58 01 00 00       	push   0x158
c0014291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014295:	e8 fa eb ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c001429a:	83 c4 10             	add    esp,0x10
c001429d:	83 c4 0c             	add    esp,0xc
c00142a0:	c3                   	ret    
c00142a1:	90                   	nop

c00142a2 <Device::findAndLoadDriver()>:
c00142a2:	c3                   	ret    
c00142a3:	90                   	nop

c00142a4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00142a4:	57                   	push   edi
c00142a5:	b9 09 00 00 00       	mov    ecx,0x9
c00142aa:	56                   	push   esi
c00142ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142af:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142b3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142bd:	81 c7 18 01 00 00    	add    edi,0x118
c00142c3:	fc                   	cld    
c00142c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142c6:	5e                   	pop    esi
c00142c7:	5f                   	pop    edi
c00142c8:	c3                   	ret    
c00142c9:	90                   	nop

c00142ca <Device::preOpenACPI(void*, char*, char*)>:
c00142ca:	56                   	push   esi
c00142cb:	53                   	push   ebx
c00142cc:	83 ec 08             	sub    esp,0x8
c00142cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d7:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e5:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142eb:	6a 1e                	push   0x1e
c00142ed:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142f7:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142fd:	50                   	push   eax
c00142fe:	e8 41 c4 fe ff       	call   c0000744 <memcpy>
c0014303:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014307:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001430b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014313:	83 c4 14             	add    esp,0x14
c0014316:	5b                   	pop    ebx
c0014317:	5e                   	pop    esi
c0014318:	e9 27 c4 fe ff       	jmp    c0000744 <memcpy>
c001431d:	90                   	nop

c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001431e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014322:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014327:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001432e:	75 0b                	jne    c001433b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014330:	8b 00                	mov    eax,DWORD PTR [eax]
c0014332:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014336:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014339:	eb 1e                	jmp    c0014359 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001433b:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0014340:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014346:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001434c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001434e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014356:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014359:	ff e0                	jmp    eax
c001435b:	90                   	nop

c001435c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001435c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014360:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014365:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001436c:	75 0b                	jne    c0014379 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001436e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014370:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014374:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014377:	eb 1e                	jmp    c0014397 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014379:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001437e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014384:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001438a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001438c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014390:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014394:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014397:	ff e0                	jmp    eax
c0014399:	90                   	nop

c001439a <Device::addChild(Device*)>:
c001439a:	53                   	push   ebx
c001439b:	83 ec 08             	sub    esp,0x8
c001439e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143ac:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00143b2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00143b4:	85 d2                	test   edx,edx
c00143b6:	74 04                	je     c00143bc <Device::addChild(Device*)+0x22>
c00143b8:	89 d3                	mov    ebx,edx
c00143ba:	eb f6                	jmp    c00143b2 <Device::addChild(Device*)+0x18>
c00143bc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143bf:	83 ec 0c             	sub    esp,0xc
c00143c2:	6a 08                	push   0x8
c00143c4:	e8 7a b4 ff ff       	call   c000f843 <malloc>
c00143c9:	89 03                	mov    DWORD PTR [ebx],eax
c00143cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143d8:	83 c4 18             	add    esp,0x18
c00143db:	5b                   	pop    ebx
c00143dc:	c3                   	ret    
c00143dd:	90                   	nop

c00143de <Device::removeAllChildren()>:
c00143de:	56                   	push   esi
c00143df:	53                   	push   ebx
c00143e0:	52                   	push   edx
c00143e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143e5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ee:	74 17                	je     c0014407 <Device::removeAllChildren()+0x29>
c00143f0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143f3:	85 c0                	test   eax,eax
c00143f5:	74 0c                	je     c0014403 <Device::removeAllChildren()+0x25>
c00143f7:	83 ec 0c             	sub    esp,0xc
c00143fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00143fc:	50                   	push   eax
c00143fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014400:	83 c4 10             	add    esp,0x10
c0014403:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014405:	eb e4                	jmp    c00143eb <Device::removeAllChildren()+0xd>
c0014407:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001440d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014413:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014419:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014420:	58                   	pop    eax
c0014421:	5b                   	pop    ebx
c0014422:	5e                   	pop    esi
c0014423:	c3                   	ret    

c0014424 <Device::hibernateAll()>:
c0014424:	53                   	push   ebx
c0014425:	83 ec 14             	sub    esp,0x14
c0014428:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001442c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442e:	53                   	push   ebx
c001442f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014432:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014438:	83 c4 10             	add    esp,0x10
c001443b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443e:	74 0f                	je     c001444f <Device::hibernateAll()+0x2b>
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014446:	e8 d9 ff ff ff       	call   c0014424 <Device::hibernateAll()>
c001444b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444d:	eb e9                	jmp    c0014438 <Device::hibernateAll()+0x14>
c001444f:	83 c4 08             	add    esp,0x8
c0014452:	5b                   	pop    ebx
c0014453:	c3                   	ret    

c0014454 <Device::wakeAll()>:
c0014454:	53                   	push   ebx
c0014455:	83 ec 14             	sub    esp,0x14
c0014458:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001445c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001445e:	53                   	push   ebx
c001445f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014462:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001446e:	74 0f                	je     c001447f <Device::wakeAll()+0x2b>
c0014470:	83 ec 0c             	sub    esp,0xc
c0014473:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014476:	e8 d9 ff ff ff       	call   c0014454 <Device::wakeAll()>
c001447b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001447d:	eb e9                	jmp    c0014468 <Device::wakeAll()+0x14>
c001447f:	83 c4 08             	add    esp,0x8
c0014482:	5b                   	pop    ebx
c0014483:	c3                   	ret    

c0014484 <Device::detectAll()>:
c0014484:	53                   	push   ebx
c0014485:	83 ec 14             	sub    esp,0x14
c0014488:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001448c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001448e:	53                   	push   ebx
c001448f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014492:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001449e:	74 0f                	je     c00144af <Device::detectAll()+0x2b>
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a6:	e8 d9 ff ff ff       	call   c0014484 <Device::detectAll()>
c00144ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144ad:	eb e9                	jmp    c0014498 <Device::detectAll()+0x14>
c00144af:	83 c4 08             	add    esp,0x8
c00144b2:	5b                   	pop    ebx
c00144b3:	c3                   	ret    

c00144b4 <Device::disableLegacyAll()>:
c00144b4:	53                   	push   ebx
c00144b5:	83 ec 14             	sub    esp,0x14
c00144b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144be:	53                   	push   ebx
c00144bf:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ce:	74 0f                	je     c00144df <Device::disableLegacyAll()+0x2b>
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d6:	e8 d9 ff ff ff       	call   c00144b4 <Device::disableLegacyAll()>
c00144db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144dd:	eb e9                	jmp    c00144c8 <Device::disableLegacyAll()+0x14>
c00144df:	83 c4 08             	add    esp,0x8
c00144e2:	5b                   	pop    ebx
c00144e3:	c3                   	ret    

c00144e4 <Device::loadDriversForAll()>:
c00144e4:	53                   	push   ebx
c00144e5:	83 ec 08             	sub    esp,0x8
c00144e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ec:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144f2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144f4:	85 db                	test   ebx,ebx
c00144f6:	74 12                	je     c001450a <Device::loadDriversForAll()+0x26>
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144fe:	e8 e1 ff ff ff       	call   c00144e4 <Device::loadDriversForAll()>
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	89 d8                	mov    eax,ebx
c0014508:	eb e8                	jmp    c00144f2 <Device::loadDriversForAll()+0xe>
c001450a:	83 c4 08             	add    esp,0x8
c001450d:	5b                   	pop    ebx
c001450e:	c3                   	ret    
c001450f:	90                   	nop

c0014510 <Device::closeAll()>:
c0014510:	53                   	push   ebx
c0014511:	83 ec 08             	sub    esp,0x8
c0014514:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014518:	8b 03                	mov    eax,DWORD PTR [ebx]
c001451a:	6a 00                	push   0x0
c001451c:	6a 00                	push   0x0
c001451e:	6a 00                	push   0x0
c0014520:	53                   	push   ebx
c0014521:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014524:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014530:	74 0f                	je     c0014541 <Device::closeAll()+0x31>
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014538:	e8 d3 ff ff ff       	call   c0014510 <Device::closeAll()>
c001453d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001453f:	eb e9                	jmp    c001452a <Device::closeAll()+0x1a>
c0014541:	83 c4 08             	add    esp,0x8
c0014544:	5b                   	pop    ebx
c0014545:	c3                   	ret    

c0014546 <Device::powerSavingAll(PowerSavingLevel)>:
c0014546:	56                   	push   esi
c0014547:	53                   	push   ebx
c0014548:	83 ec 0c             	sub    esp,0xc
c001454b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001454f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014553:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014555:	56                   	push   esi
c0014556:	53                   	push   ebx
c0014557:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001455a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014560:	83 c4 10             	add    esp,0x10
c0014563:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014566:	74 0f                	je     c0014577 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014568:	52                   	push   edx
c0014569:	52                   	push   edx
c001456a:	56                   	push   esi
c001456b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001456e:	e8 d3 ff ff ff       	call   c0014546 <Device::powerSavingAll(PowerSavingLevel)>
c0014573:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014575:	eb e9                	jmp    c0014560 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014577:	58                   	pop    eax
c0014578:	5b                   	pop    ebx
c0014579:	5e                   	pop    esi
c001457a:	c3                   	ret    
c001457b:	90                   	nop

c001457c <Device::setName(char const*)>:
c001457c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014584:	e9 ab c2 fe ff       	jmp    c0000834 <strcpy>
c0014589:	90                   	nop

c001458a <Device::Device(char const*)>:
c001458a:	83 ec 1c             	sub    esp,0x1c
c001458d:	ba f8 ac 02 c0       	mov    edx,0xc002acf8
c0014592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014596:	89 10                	mov    DWORD PTR [eax],edx
c0014598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145aa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145d0:	83 ec 08             	sub    esp,0x8
c00145d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145db:	e8 9c ff ff ff       	call   c001457c <Device::setName(char const*)>
c00145e0:	83 c4 10             	add    esp,0x10
c00145e3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145eb:	83 ec 0c             	sub    esp,0xc
c00145ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145f2:	e8 4c b2 ff ff       	call   c000f843 <malloc>
c00145f7:	83 c4 10             	add    esp,0x10
c00145fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014600:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014607:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001460b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014615:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001461b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014625:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001462b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014636:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001463d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014641:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001465a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014668:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014676:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014680:	90                   	nop
c0014681:	83 c4 1c             	add    esp,0x1c
c0014684:	c3                   	ret    
c0014685:	90                   	nop

c0014686 <Device::getName()>:
c0014686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001468a:	05 d0 00 00 00       	add    eax,0xd0
c001468f:	c3                   	ret    

c0014690 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014690:	83 ec 0c             	sub    esp,0xc
c0014693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014697:	83 ec 08             	sub    esp,0x8
c001469a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001469e:	50                   	push   eax
c001469f:	e8 e6 fe ff ff       	call   c001458a <Device::Device(char const*)>
c00146a4:	83 c4 10             	add    esp,0x10
c00146a7:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00146ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b0:	89 10                	mov    DWORD PTR [eax],edx
c00146b2:	90                   	nop
c00146b3:	83 c4 0c             	add    esp,0xc
c00146b6:	c3                   	ret    
c00146b7:	90                   	nop

c00146b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146b8:	57                   	push   edi
c00146b9:	56                   	push   esi
c00146ba:	53                   	push   ebx
c00146bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146c7:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146cd:	75 0c                	jne    c00146db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146cf:	52                   	push   edx
c00146d0:	52                   	push   edx
c00146d1:	53                   	push   ebx
c00146d2:	56                   	push   esi
c00146d3:	e8 52 42 01 00       	call   c002892a <LinkedList<Device>::addElement(Device*)>
c00146d8:	83 c4 10             	add    esp,0x10
c00146db:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146e4:	74 12                	je     c00146f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146e6:	50                   	push   eax
c00146e7:	57                   	push   edi
c00146e8:	56                   	push   esi
c00146e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146ec:	e8 c7 ff ff ff       	call   c00146b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	eb e9                	jmp    c00146e1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146f8:	5b                   	pop    ebx
c00146f9:	5e                   	pop    esi
c00146fa:	5f                   	pop    edi
c00146fb:	c3                   	ret    

c00146fc <getDevicesOfType(DeviceType)>:
c00146fc:	53                   	push   ebx
c00146fd:	83 ec 14             	sub    esp,0x14
c0014700:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014704:	53                   	push   ebx
c0014705:	e8 fc 42 01 00       	call   c0028a06 <LinkedList<Device>::LinkedList()>
c001470a:	83 c4 0c             	add    esp,0xc
c001470d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014711:	53                   	push   ebx
c0014712:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c0014718:	e8 9b ff ff ff       	call   c00146b8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001471d:	89 d8                	mov    eax,ebx
c001471f:	83 c4 18             	add    esp,0x18
c0014722:	5b                   	pop    ebx
c0014723:	c2 04 00             	ret    0x4

c0014726 <HardDiskController::HardDiskController(char const*)>:
c0014726:	83 ec 0c             	sub    esp,0xc
c0014729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472d:	83 ec 08             	sub    esp,0x8
c0014730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014734:	50                   	push   eax
c0014735:	e8 50 fe ff ff       	call   c001458a <Device::Device(char const*)>
c001473a:	83 c4 10             	add    esp,0x10
c001473d:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c0014742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014746:	89 10                	mov    DWORD PTR [eax],edx
c0014748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474c:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014756:	90                   	nop
c0014757:	83 c4 0c             	add    esp,0xc
c001475a:	c3                   	ret    
c001475b:	90                   	nop

c001475c <HardDiskController::~HardDiskController()>:
c001475c:	83 ec 0c             	sub    esp,0xc
c001475f:	ba 50 ad 02 c0       	mov    edx,0xc002ad50
c0014764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014768:	89 10                	mov    DWORD PTR [eax],edx
c001476a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476e:	83 ec 0c             	sub    esp,0xc
c0014771:	50                   	push   eax
c0014772:	e8 f5 fa ff ff       	call   c001426c <Device::~Device()>
c0014777:	83 c4 10             	add    esp,0x10
c001477a:	90                   	nop
c001477b:	83 c4 0c             	add    esp,0xc
c001477e:	c3                   	ret    
c001477f:	90                   	nop

c0014780 <HardDiskController::~HardDiskController()>:
c0014780:	83 ec 0c             	sub    esp,0xc
c0014783:	83 ec 0c             	sub    esp,0xc
c0014786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001478a:	e8 cd ff ff ff       	call   c001475c <HardDiskController::~HardDiskController()>
c001478f:	83 c4 10             	add    esp,0x10
c0014792:	83 ec 08             	sub    esp,0x8
c0014795:	68 58 01 00 00       	push   0x158
c001479a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479e:	e8 f1 e6 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00147a3:	83 c4 10             	add    esp,0x10
c00147a6:	83 c4 0c             	add    esp,0xc
c00147a9:	c3                   	ret    

c00147aa <PhysicalDisk::eject()>:
c00147aa:	83 ec 18             	sub    esp,0x18
c00147ad:	68 74 ad 02 c0       	push   0xc002ad74
c00147b2:	e8 bd e7 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00147b7:	83 c8 ff             	or     eax,0xffffffff
c00147ba:	83 c4 1c             	add    esp,0x1c
c00147bd:	c3                   	ret    

c00147be <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147be:	83 ec 0c             	sub    esp,0xc
c00147c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c5:	83 ec 08             	sub    esp,0x8
c00147c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147cc:	50                   	push   eax
c00147cd:	e8 b8 fd ff ff       	call   c001458a <Device::Device(char const*)>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c00147da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147de:	89 10                	mov    DWORD PTR [eax],edx
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ef:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014808:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001480c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014816:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014820:	90                   	nop
c0014821:	83 c4 0c             	add    esp,0xc
c0014824:	c3                   	ret    
c0014825:	90                   	nop

c0014826 <PhysicalDisk::startCache()>:
c0014826:	56                   	push   esi
c0014827:	53                   	push   ebx
c0014828:	83 ec 10             	sub    esp,0x10
c001482b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001482f:	6a 44                	push   0x44
c0014831:	e8 0d b0 ff ff       	call   c000f843 <malloc>
c0014836:	89 c6                	mov    esi,eax
c0014838:	58                   	pop    eax
c0014839:	5a                   	pop    edx
c001483a:	53                   	push   ebx
c001483b:	56                   	push   esi
c001483c:	e8 35 27 00 00       	call   c0016f76 <VCache::VCache(PhysicalDisk*)>
c0014841:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014847:	83 c4 14             	add    esp,0x14
c001484a:	5b                   	pop    ebx
c001484b:	5e                   	pop    esi
c001484c:	c3                   	ret    
c001484d:	90                   	nop

c001484e <PhysicalDisk::~PhysicalDisk()>:
c001484e:	83 ec 0c             	sub    esp,0xc
c0014851:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	89 10                	mov    DWORD PTR [eax],edx
c001485c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014860:	83 ec 0c             	sub    esp,0xc
c0014863:	50                   	push   eax
c0014864:	e8 03 fa ff ff       	call   c001426c <Device::~Device()>
c0014869:	83 c4 10             	add    esp,0x10
c001486c:	90                   	nop
c001486d:	83 c4 0c             	add    esp,0xc
c0014870:	c3                   	ret    
c0014871:	90                   	nop

c0014872 <PhysicalDisk::~PhysicalDisk()>:
c0014872:	83 ec 0c             	sub    esp,0xc
c0014875:	83 ec 0c             	sub    esp,0xc
c0014878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487c:	e8 cd ff ff ff       	call   c001484e <PhysicalDisk::~PhysicalDisk()>
c0014881:	83 c4 10             	add    esp,0x10
c0014884:	83 ec 08             	sub    esp,0x8
c0014887:	68 6c 01 00 00       	push   0x16c
c001488c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014890:	e8 ff e5 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	83 c4 0c             	add    esp,0xc
c001489b:	c3                   	ret    

c001489c <FPU::FPU(char const*)>:
c001489c:	83 ec 0c             	sub    esp,0xc
c001489f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a3:	83 ec 08             	sub    esp,0x8
c00148a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148aa:	50                   	push   eax
c00148ab:	e8 da fc ff ff       	call   c001458a <Device::Device(char const*)>
c00148b0:	83 c4 10             	add    esp,0x10
c00148b3:	ba e8 ad 02 c0       	mov    edx,0xc002ade8
c00148b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148bc:	89 10                	mov    DWORD PTR [eax],edx
c00148be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148cc:	90                   	nop
c00148cd:	83 c4 0c             	add    esp,0xc
c00148d0:	c3                   	ret    
c00148d1:	90                   	nop

c00148d2 <FPU::~FPU()>:
c00148d2:	83 ec 0c             	sub    esp,0xc
c00148d5:	ba e8 ad 02 c0       	mov    edx,0xc002ade8
c00148da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148de:	89 10                	mov    DWORD PTR [eax],edx
c00148e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e4:	83 ec 0c             	sub    esp,0xc
c00148e7:	50                   	push   eax
c00148e8:	e8 7f f9 ff ff       	call   c001426c <Device::~Device()>
c00148ed:	83 c4 10             	add    esp,0x10
c00148f0:	90                   	nop
c00148f1:	83 c4 0c             	add    esp,0xc
c00148f4:	c3                   	ret    
c00148f5:	90                   	nop

c00148f6 <FPU::~FPU()>:
c00148f6:	83 ec 0c             	sub    esp,0xc
c00148f9:	83 ec 0c             	sub    esp,0xc
c00148fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014900:	e8 cd ff ff ff       	call   c00148d2 <FPU::~FPU()>
c0014905:	83 c4 10             	add    esp,0x10
c0014908:	83 ec 08             	sub    esp,0x8
c001490b:	68 58 01 00 00       	push   0x158
c0014910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014914:	e8 7b e5 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0014919:	83 c4 10             	add    esp,0x10
c001491c:	83 c4 0c             	add    esp,0xc
c001491f:	c3                   	ret    

c0014920 <setupFPU()>:
c0014920:	53                   	push   ebx
c0014921:	83 ec 08             	sub    esp,0x8
c0014924:	8b 15 a8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a8
c001492a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014931:	74 19                	je     c001494c <setupFPU()+0x2c>
c0014933:	83 ec 0c             	sub    esp,0xc
c0014936:	68 58 01 00 00       	push   0x158
c001493b:	e8 03 af ff ff       	call   c000f843 <malloc>
c0014940:	89 c3                	mov    ebx,eax
c0014942:	89 04 24             	mov    DWORD PTR [esp],eax
c0014945:	e8 32 0c 01 00       	call   c002557c <AVX::AVX()>
c001494a:	eb 5b                	jmp    c00149a7 <setupFPU()+0x87>
c001494c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014952:	84 c0                	test   al,al
c0014954:	79 19                	jns    c001496f <setupFPU()+0x4f>
c0014956:	83 ec 0c             	sub    esp,0xc
c0014959:	68 58 01 00 00       	push   0x158
c001495e:	e8 e0 ae ff ff       	call   c000f843 <malloc>
c0014963:	89 c3                	mov    ebx,eax
c0014965:	89 04 24             	mov    DWORD PTR [esp],eax
c0014968:	e8 35 0d 01 00       	call   c00256a2 <SSE::SSE()>
c001496d:	eb 38                	jmp    c00149a7 <setupFPU()+0x87>
c001496f:	a8 20                	test   al,0x20
c0014971:	74 19                	je     c001498c <setupFPU()+0x6c>
c0014973:	83 ec 0c             	sub    esp,0xc
c0014976:	68 58 01 00 00       	push   0x158
c001497b:	e8 c3 ae ff ff       	call   c000f843 <malloc>
c0014980:	89 c3                	mov    ebx,eax
c0014982:	89 04 24             	mov    DWORD PTR [esp],eax
c0014985:	e8 82 0c 01 00       	call   c002560c <MMX::MMX()>
c001498a:	eb 1b                	jmp    c00149a7 <setupFPU()+0x87>
c001498c:	a8 10                	test   al,0x10
c001498e:	74 1c                	je     c00149ac <setupFPU()+0x8c>
c0014990:	83 ec 0c             	sub    esp,0xc
c0014993:	68 58 01 00 00       	push   0x158
c0014998:	e8 a6 ae ff ff       	call   c000f843 <malloc>
c001499d:	89 c3                	mov    ebx,eax
c001499f:	89 04 24             	mov    DWORD PTR [esp],eax
c00149a2:	e8 89 0d 01 00       	call   c0025730 <x87::x87()>
c00149a7:	83 c4 10             	add    esp,0x10
c00149aa:	eb 24                	jmp    c00149d0 <setupFPU()+0xb0>
c00149ac:	83 e0 ef             	and    eax,0xffffffef
c00149af:	83 ec 0c             	sub    esp,0xc
c00149b2:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149b8:	68 d4 ad 02 c0       	push   0xc002add4
c00149bd:	e8 b2 e5 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00149c2:	0f 20 c0             	mov    eax,cr0
c00149c5:	83 c8 04             	or     eax,0x4
c00149c8:	0f 22 c0             	mov    cr0,eax
c00149cb:	31 db                	xor    ebx,ebx
c00149cd:	83 c4 10             	add    esp,0x10
c00149d0:	89 d8                	mov    eax,ebx
c00149d2:	83 c4 08             	add    esp,0x8
c00149d5:	5b                   	pop    ebx
c00149d6:	c3                   	ret    
c00149d7:	90                   	nop

c00149d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149e0:	c1 e0 04             	shl    eax,0x4
c00149e3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149e7:	8d 50 10             	lea    edx,[eax+0x10]
c00149ea:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149f0:	74 08                	je     c00149fa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149f2:	83 c0 04             	add    eax,0x4
c00149f5:	39 d0                	cmp    eax,edx
c00149f7:	75 f1                	jne    c00149ea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149f9:	c3                   	ret    
c00149fa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a04:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a0e:	eb e2                	jmp    c00149f2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a10 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a10:	57                   	push   edi
c0014a11:	31 c0                	xor    eax,eax
c0014a13:	56                   	push   esi
c0014a14:	53                   	push   ebx
c0014a15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a19:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a1d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a21:	89 da                	mov    edx,ebx
c0014a23:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a27:	c1 e2 04             	shl    edx,0x4
c0014a2a:	01 ca                	add    edx,ecx
c0014a2c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a34:	74 16                	je     c0014a4c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a36:	40                   	inc    eax
c0014a37:	83 f8 04             	cmp    eax,0x4
c0014a3a:	75 f0                	jne    c0014a2c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a3c:	c7 44 24 10 18 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae18
c0014a44:	5b                   	pop    ebx
c0014a45:	5e                   	pop    esi
c0014a46:	5f                   	pop    edi
c0014a47:	e9 d5 5b 00 00       	jmp    c001a621 <Krnl::panic(char const*)>
c0014a4c:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a4f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a52:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a58:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a5e:	5b                   	pop    ebx
c0014a5f:	5e                   	pop    esi
c0014a60:	5f                   	pop    edi
c0014a61:	c3                   	ret    

c0014a62 <doubleFault(regs*, void*)>:
c0014a62:	55                   	push   ebp
c0014a63:	89 e5                	mov    ebp,esp
c0014a65:	83 ec 08             	sub    esp,0x8
c0014a68:	83 ec 0c             	sub    esp,0xc
c0014a6b:	68 53 ae 02 c0       	push   0xc002ae53
c0014a70:	e8 ac 5b 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0014a75:	83 c4 10             	add    esp,0x10
c0014a78:	90                   	nop
c0014a79:	c9                   	leave  
c0014a7a:	c3                   	ret    
c0014a7b:	90                   	nop

c0014a7c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a7c:	56                   	push   esi
c0014a7d:	53                   	push   ebx
c0014a7e:	50                   	push   eax
c0014a7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a87:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a8c:	75 35                	jne    c0014ac3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a8e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a91:	31 d2                	xor    edx,edx
c0014a93:	89 c1                	mov    ecx,eax
c0014a95:	c1 e1 04             	shl    ecx,0x4
c0014a98:	01 f1                	add    ecx,esi
c0014a9a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014aa2:	74 3e                	je     c0014ae2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014aa4:	42                   	inc    edx
c0014aa5:	83 fa 04             	cmp    edx,0x4
c0014aa8:	75 f0                	jne    c0014a9a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014aaa:	83 ec 0c             	sub    esp,0xc
c0014aad:	68 98 ae 02 c0       	push   0xc002ae98
c0014ab2:	e8 6a 5b 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0014ab7:	83 c4 10             	add    esp,0x10
c0014aba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014abf:	5a                   	pop    edx
c0014ac0:	5b                   	pop    ebx
c0014ac1:	5e                   	pop    esi
c0014ac2:	c3                   	ret    
c0014ac3:	83 ec 0c             	sub    esp,0xc
c0014ac6:	56                   	push   esi
c0014ac7:	e8 ba fb ff ff       	call   c0014686 <Device::getName()>
c0014acc:	83 c4 10             	add    esp,0x10
c0014acf:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ad2:	75 ba                	jne    c0014a8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ad4:	83 fb 0f             	cmp    ebx,0xf
c0014ad7:	7f 29                	jg     c0014b02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014ad9:	0f b6 9b 00 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2900]
c0014ae0:	eb ac                	jmp    c0014a8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ae2:	8d 04 82             	lea    eax,[edx+eax*4]
c0014ae5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ae9:	8d 04 86             	lea    eax,[esi+eax*4]
c0014aec:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014af2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014af6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014afc:	89 d8                	mov    eax,ebx
c0014afe:	5a                   	pop    edx
c0014aff:	5b                   	pop    ebx
c0014b00:	5e                   	pop    esi
c0014b01:	c3                   	ret    
c0014b02:	83 ec 0c             	sub    esp,0xc
c0014b05:	68 60 ae 02 c0       	push   0xc002ae60
c0014b0a:	e8 12 5b 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0014b0f:	83 c4 10             	add    esp,0x10
c0014b12:	e9 77 ff ff ff       	jmp    c0014a8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b17:	90                   	nop

c0014b18 <InterruptController::clearAllHandlers(int, bool)>:
c0014b18:	56                   	push   esi
c0014b19:	53                   	push   ebx
c0014b1a:	52                   	push   edx
c0014b1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b23:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b28:	75 61                	jne    c0014b8b <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b2a:	8d 46 20             	lea    eax,[esi+0x20]
c0014b2d:	c1 e6 04             	shl    esi,0x4
c0014b30:	c1 e0 04             	shl    eax,0x4
c0014b33:	01 de                	add    esi,ebx
c0014b35:	01 d8                	add    eax,ebx
c0014b37:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b41:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b4b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b55:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b5f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b69:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b73:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b7d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b87:	58                   	pop    eax
c0014b88:	5b                   	pop    ebx
c0014b89:	5e                   	pop    esi
c0014b8a:	c3                   	ret    
c0014b8b:	83 ec 0c             	sub    esp,0xc
c0014b8e:	53                   	push   ebx
c0014b8f:	e8 f2 fa ff ff       	call   c0014686 <Device::getName()>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b9a:	75 8e                	jne    c0014b2a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b9c:	83 fe 0f             	cmp    esi,0xf
c0014b9f:	7f 09                	jg     c0014baa <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014ba1:	0f b6 b6 00 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2900]
c0014ba8:	eb 80                	jmp    c0014b2a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014baa:	83 ec 0c             	sub    esp,0xc
c0014bad:	68 d4 ae 02 c0       	push   0xc002aed4
c0014bb2:	e8 6a 5a 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0014bb7:	83 c4 10             	add    esp,0x10
c0014bba:	e9 6b ff ff ff       	jmp    c0014b2a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bbf:	90                   	nop

c0014bc0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014bc0:	56                   	push   esi
c0014bc1:	53                   	push   ebx
c0014bc2:	52                   	push   edx
c0014bc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bc7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bcb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bd0:	75 3a                	jne    c0014c0c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bd6:	8d 50 20             	lea    edx,[eax+0x20]
c0014bd9:	c1 e2 04             	shl    edx,0x4
c0014bdc:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bdf:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014be3:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014be9:	74 0b                	je     c0014bf6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014beb:	83 c0 04             	add    eax,0x4
c0014bee:	39 d0                	cmp    eax,edx
c0014bf0:	75 f1                	jne    c0014be3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bf2:	58                   	pop    eax
c0014bf3:	5b                   	pop    ebx
c0014bf4:	5e                   	pop    esi
c0014bf5:	c3                   	ret    
c0014bf6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c00:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c0a:	eb df                	jmp    c0014beb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c0c:	83 ec 0c             	sub    esp,0xc
c0014c0f:	56                   	push   esi
c0014c10:	e8 71 fa ff ff       	call   c0014686 <Device::getName()>
c0014c15:	83 c4 10             	add    esp,0x10
c0014c18:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c1b:	75 b5                	jne    c0014bd2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c1d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c22:	7f 11                	jg     c0014c35 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c28:	0f b6 80 00 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2900]
c0014c2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c33:	eb 9d                	jmp    c0014bd2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c35:	83 ec 0c             	sub    esp,0xc
c0014c38:	68 d4 ae 02 c0       	push   0xc002aed4
c0014c3d:	e8 df 59 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0014c42:	83 c4 10             	add    esp,0x10
c0014c45:	eb 8b                	jmp    c0014bd2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c47 <nmiHandler(regs*, void*)>:
c0014c47:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0014c4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c50:	e9 37 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c55 <int_handler>:
c0014c55:	55                   	push   ebp
c0014c56:	57                   	push   edi
c0014c57:	56                   	push   esi
c0014c58:	53                   	push   ebx
c0014c59:	83 ec 0c             	sub    esp,0xc
c0014c5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c60:	80 3d 04 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031004,0x0
c0014c67:	74 0b                	je     c0014c74 <int_handler+0x1f>
c0014c69:	fa                   	cli    
c0014c6a:	f4                   	hlt    
c0014c6b:	80 3d 04 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031004,0x0
c0014c72:	75 f5                	jne    c0014c69 <int_handler+0x14>
c0014c74:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0014c79:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c82:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c88:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c8b:	83 f8 17             	cmp    eax,0x17
c0014c8e:	77 13                	ja     c0014ca3 <int_handler+0x4e>
c0014c90:	83 ec 08             	sub    esp,0x8
c0014c93:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c95:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c98:	0f b6 c0             	movzx  eax,al
c0014c9b:	50                   	push   eax
c0014c9c:	57                   	push   edi
c0014c9d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014ca0:	83 c4 10             	add    esp,0x10
c0014ca3:	83 c3 15             	add    ebx,0x15
c0014ca6:	c1 e3 04             	shl    ebx,0x4
c0014ca9:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014cad:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014cb4:	31 db                	xor    ebx,ebx
c0014cb6:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014cba:	85 c0                	test   eax,eax
c0014cbc:	74 13                	je     c0014cd1 <int_handler+0x7c>
c0014cbe:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014cc1:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014cc5:	74 1c                	je     c0014ce3 <int_handler+0x8e>
c0014cc7:	83 ec 08             	sub    esp,0x8
c0014cca:	52                   	push   edx
c0014ccb:	56                   	push   esi
c0014ccc:	ff d0                	call   eax
c0014cce:	83 c4 10             	add    esp,0x10
c0014cd1:	43                   	inc    ebx
c0014cd2:	83 fb 04             	cmp    ebx,0x4
c0014cd5:	75 df                	jne    c0014cb6 <int_handler+0x61>
c0014cd7:	83 c4 0c             	add    esp,0xc
c0014cda:	31 c0                	xor    eax,eax
c0014cdc:	5b                   	pop    ebx
c0014cdd:	31 d2                	xor    edx,edx
c0014cdf:	5e                   	pop    esi
c0014ce0:	5f                   	pop    edi
c0014ce1:	5d                   	pop    ebp
c0014ce2:	c3                   	ret    
c0014ce3:	83 ec 08             	sub    esp,0x8
c0014ce6:	52                   	push   edx
c0014ce7:	56                   	push   esi
c0014ce8:	ff d0                	call   eax
c0014cea:	83 c4 10             	add    esp,0x10
c0014ced:	83 c4 0c             	add    esp,0xc
c0014cf0:	5b                   	pop    ebx
c0014cf1:	5e                   	pop    esi
c0014cf2:	5f                   	pop    edi
c0014cf3:	5d                   	pop    ebp
c0014cf4:	c3                   	ret    
c0014cf5:	90                   	nop

c0014cf6 <InterruptController::InterruptController(char const*)>:
c0014cf6:	83 ec 1c             	sub    esp,0x1c
c0014cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfd:	83 ec 08             	sub    esp,0x8
c0014d00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d04:	50                   	push   eax
c0014d05:	e8 80 f8 ff ff       	call   c001458a <Device::Device(char const*)>
c0014d0a:	83 c4 10             	add    esp,0x10
c0014d0d:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c0014d12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d16:	89 10                	mov    DWORD PTR [eax],edx
c0014d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d1c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d2e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d36:	7f 5e                	jg     c0014d96 <InterruptController::InterruptController(char const*)+0xa0>
c0014d38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d40:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d45:	7f 49                	jg     c0014d90 <InterruptController::InterruptController(char const*)+0x9a>
c0014d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d4f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d5a:	01 ca                	add    edx,ecx
c0014d5c:	83 c2 54             	add    edx,0x54
c0014d5f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d6f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d7a:	01 ca                	add    edx,ecx
c0014d7c:	81 c2 54 04 00 00    	add    edx,0x454
c0014d82:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d8a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d8e:	eb b0                	jmp    c0014d40 <InterruptController::InterruptController(char const*)+0x4a>
c0014d90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d94:	eb 98                	jmp    c0014d2e <InterruptController::InterruptController(char const*)+0x38>
c0014d96:	90                   	nop
c0014d97:	83 c4 1c             	add    esp,0x1c
c0014d9a:	c3                   	ret    
c0014d9b:	90                   	nop

c0014d9c <InterruptController::~InterruptController()>:
c0014d9c:	83 ec 0c             	sub    esp,0xc
c0014d9f:	ba 8c b1 02 c0       	mov    edx,0xc002b18c
c0014da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da8:	89 10                	mov    DWORD PTR [eax],edx
c0014daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dae:	83 ec 0c             	sub    esp,0xc
c0014db1:	50                   	push   eax
c0014db2:	e8 b5 f4 ff ff       	call   c001426c <Device::~Device()>
c0014db7:	83 c4 10             	add    esp,0x10
c0014dba:	90                   	nop
c0014dbb:	83 c4 0c             	add    esp,0xc
c0014dbe:	c3                   	ret    
c0014dbf:	90                   	nop

c0014dc0 <InterruptController::~InterruptController()>:
c0014dc0:	83 ec 0c             	sub    esp,0xc
c0014dc3:	83 ec 0c             	sub    esp,0xc
c0014dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dca:	e8 cd ff ff ff       	call   c0014d9c <InterruptController::~InterruptController()>
c0014dcf:	83 c4 10             	add    esp,0x10
c0014dd2:	83 ec 08             	sub    esp,0x8
c0014dd5:	68 58 21 00 00       	push   0x2158
c0014dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dde:	e8 b1 e0 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0014de3:	83 c4 10             	add    esp,0x10
c0014de6:	83 c4 0c             	add    esp,0xc
c0014de9:	c3                   	ret    

c0014dea <displayDebugInfo(regs*)>:
c0014dea:	55                   	push   ebp
c0014deb:	57                   	push   edi
c0014dec:	56                   	push   esi
c0014ded:	53                   	push   ebx
c0014dee:	83 ec 24             	sub    esp,0x24
c0014df1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014df5:	0f 20 c2             	mov    edx,cr0
c0014df8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dfc:	0f 20 d7             	mov    edi,cr2
c0014dff:	0f 20 de             	mov    esi,cr3
c0014e02:	0f 20 e5             	mov    ebp,cr4
c0014e05:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e08:	68 0e af 02 c0       	push   0xc002af0e
c0014e0d:	e8 62 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e12:	59                   	pop    ecx
c0014e13:	58                   	pop    eax
c0014e14:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e17:	68 19 af 02 c0       	push   0xc002af19
c0014e1c:	e8 53 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e21:	58                   	pop    eax
c0014e22:	5a                   	pop    edx
c0014e23:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e26:	68 24 af 02 c0       	push   0xc002af24
c0014e2b:	e8 44 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e30:	59                   	pop    ecx
c0014e31:	58                   	pop    eax
c0014e32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e35:	68 2f af 02 c0       	push   0xc002af2f
c0014e3a:	e8 35 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e3f:	58                   	pop    eax
c0014e40:	5a                   	pop    edx
c0014e41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e44:	68 3a af 02 c0       	push   0xc002af3a
c0014e49:	e8 26 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e4e:	59                   	pop    ecx
c0014e4f:	58                   	pop    eax
c0014e50:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e53:	68 45 af 02 c0       	push   0xc002af45
c0014e58:	e8 17 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e5d:	58                   	pop    eax
c0014e5e:	5a                   	pop    edx
c0014e5f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e62:	68 50 af 02 c0       	push   0xc002af50
c0014e67:	e8 08 e1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e6c:	59                   	pop    ecx
c0014e6d:	58                   	pop    eax
c0014e6e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e71:	68 5b af 02 c0       	push   0xc002af5b
c0014e76:	e8 f9 e0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e7b:	58                   	pop    eax
c0014e7c:	5a                   	pop    edx
c0014e7d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e80:	68 66 af 02 c0       	push   0xc002af66
c0014e85:	e8 ea e0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e8a:	59                   	pop    ecx
c0014e8b:	58                   	pop    eax
c0014e8c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e8f:	68 75 af 02 c0       	push   0xc002af75
c0014e94:	e8 db e0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014e99:	58                   	pop    eax
c0014e9a:	5a                   	pop    edx
c0014e9b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e9e:	68 80 af 02 c0       	push   0xc002af80
c0014ea3:	e8 cc e0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014ea8:	59                   	pop    ecx
c0014ea9:	58                   	pop    eax
c0014eaa:	57                   	push   edi
c0014eab:	68 8b af 02 c0       	push   0xc002af8b
c0014eb0:	e8 bf e0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014eb5:	58                   	pop    eax
c0014eb6:	5a                   	pop    edx
c0014eb7:	56                   	push   esi
c0014eb8:	68 96 af 02 c0       	push   0xc002af96
c0014ebd:	e8 b2 e0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0014ec2:	59                   	pop    ecx
c0014ec3:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014ec8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ece:	e8 22 be ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c0014ed3:	58                   	pop    eax
c0014ed4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ed7:	5a                   	pop    edx
c0014ed8:	c1 e0 05             	shl    eax,0x5
c0014edb:	05 60 d4 02 c0       	add    eax,0xc002d460
c0014ee0:	50                   	push   eax
c0014ee1:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014ee6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eec:	e8 23 c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014ef1:	59                   	pop    ecx
c0014ef2:	58                   	pop    eax
c0014ef3:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014ef8:	68 a1 af 02 c0       	push   0xc002afa1
c0014efd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f03:	e8 0c c2 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f08:	58                   	pop    eax
c0014f09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f0e:	5a                   	pop    edx
c0014f0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f12:	83 c0 0c             	add    eax,0xc
c0014f15:	50                   	push   eax
c0014f16:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f21:	e8 ee c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f26:	59                   	pop    ecx
c0014f27:	58                   	pop    eax
c0014f28:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f2d:	68 aa af 02 c0       	push   0xc002afaa
c0014f32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f38:	e8 d7 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f3d:	58                   	pop    eax
c0014f3e:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f43:	5a                   	pop    edx
c0014f44:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4d:	e8 e8 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f52:	59                   	pop    ecx
c0014f53:	58                   	pop    eax
c0014f54:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f59:	68 b2 af 02 c0       	push   0xc002afb2
c0014f5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f64:	e8 ab c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f69:	58                   	pop    eax
c0014f6a:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f6f:	5a                   	pop    edx
c0014f70:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f79:	e8 bc c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014f7e:	59                   	pop    ecx
c0014f7f:	58                   	pop    eax
c0014f80:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f85:	68 ba af 02 c0       	push   0xc002afba
c0014f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f90:	e8 7f c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014f95:	58                   	pop    eax
c0014f96:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014f9b:	5a                   	pop    edx
c0014f9c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa5:	e8 90 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014faa:	59                   	pop    ecx
c0014fab:	58                   	pop    eax
c0014fac:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014fb1:	68 c2 af 02 c0       	push   0xc002afc2
c0014fb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fbc:	e8 53 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014fc1:	58                   	pop    eax
c0014fc2:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014fc7:	5a                   	pop    edx
c0014fc8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd1:	e8 64 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0014fd6:	59                   	pop    ecx
c0014fd7:	58                   	pop    eax
c0014fd8:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014fdd:	68 ca af 02 c0       	push   0xc002afca
c0014fe2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe8:	e8 27 c1 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0014fed:	58                   	pop    eax
c0014fee:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0014ff3:	5a                   	pop    edx
c0014ff4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ff7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffd:	e8 38 c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015002:	59                   	pop    ecx
c0015003:	58                   	pop    eax
c0015004:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015009:	68 d2 af 02 c0       	push   0xc002afd2
c001500e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015014:	e8 fb c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015019:	58                   	pop    eax
c001501a:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001501f:	5a                   	pop    edx
c0015020:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015023:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015029:	e8 0c c1 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001502e:	59                   	pop    ecx
c001502f:	58                   	pop    eax
c0015030:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015035:	68 da af 02 c0       	push   0xc002afda
c001503a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015040:	e8 cf c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015045:	58                   	pop    eax
c0015046:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001504b:	5a                   	pop    edx
c001504c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015050:	52                   	push   edx
c0015051:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015057:	e8 de c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001505c:	59                   	pop    ecx
c001505d:	58                   	pop    eax
c001505e:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015063:	68 e3 af 02 c0       	push   0xc002afe3
c0015068:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506e:	e8 a1 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015073:	58                   	pop    eax
c0015074:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015079:	5a                   	pop    edx
c001507a:	57                   	push   edi
c001507b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015081:	e8 b4 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015086:	59                   	pop    ecx
c0015087:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001508c:	5f                   	pop    edi
c001508d:	68 eb af 02 c0       	push   0xc002afeb
c0015092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015098:	e8 77 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001509d:	58                   	pop    eax
c001509e:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00150a3:	5a                   	pop    edx
c00150a4:	56                   	push   esi
c00150a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ab:	e8 8a c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00150b0:	59                   	pop    ecx
c00150b1:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00150b6:	5e                   	pop    esi
c00150b7:	68 f3 af 02 c0       	push   0xc002aff3
c00150bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c2:	e8 4d c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150c7:	5f                   	pop    edi
c00150c8:	58                   	pop    eax
c00150c9:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00150ce:	55                   	push   ebp
c00150cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d5:	e8 60 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00150da:	58                   	pop    eax
c00150db:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00150e0:	5a                   	pop    edx
c00150e1:	68 fb af 02 c0       	push   0xc002affb
c00150e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ec:	e8 23 c0 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00150f1:	0f 21 c0             	mov    eax,db0
c00150f4:	59                   	pop    ecx
c00150f5:	5e                   	pop    esi
c00150f6:	50                   	push   eax
c00150f7:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00150fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015102:	e8 33 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015107:	5f                   	pop    edi
c0015108:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001510d:	5d                   	pop    ebp
c001510e:	68 04 b0 02 c0       	push   0xc002b004
c0015113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015119:	e8 f6 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001511e:	0f 21 c8             	mov    eax,db1
c0015121:	5a                   	pop    edx
c0015122:	59                   	pop    ecx
c0015123:	50                   	push   eax
c0015124:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015129:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512f:	e8 06 c0 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015134:	5e                   	pop    esi
c0015135:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001513a:	5f                   	pop    edi
c001513b:	68 0c b0 02 c0       	push   0xc002b00c
c0015140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015146:	e8 c9 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001514b:	0f 21 d0             	mov    eax,db2
c001514e:	5d                   	pop    ebp
c001514f:	5a                   	pop    edx
c0015150:	50                   	push   eax
c0015151:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015156:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515c:	e8 d9 bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015161:	59                   	pop    ecx
c0015162:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015167:	5e                   	pop    esi
c0015168:	68 14 b0 02 c0       	push   0xc002b014
c001516d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015173:	e8 9c bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015178:	0f 21 d8             	mov    eax,db3
c001517b:	5f                   	pop    edi
c001517c:	5d                   	pop    ebp
c001517d:	50                   	push   eax
c001517e:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015189:	e8 ac bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001518e:	58                   	pop    eax
c001518f:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015194:	5a                   	pop    edx
c0015195:	68 1c b0 02 c0       	push   0xc002b01c
c001519a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a0:	e8 6f bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00151a5:	0f 21 f0             	mov    eax,db6
c00151a8:	59                   	pop    ecx
c00151a9:	5e                   	pop    esi
c00151aa:	50                   	push   eax
c00151ab:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00151b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b6:	e8 7f bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00151bb:	5f                   	pop    edi
c00151bc:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00151c1:	5d                   	pop    ebp
c00151c2:	68 24 b0 02 c0       	push   0xc002b024
c00151c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cd:	e8 42 bf ff ff       	call   c0011114 <VgaText::puts(char const*)>
c00151d2:	0f 21 f8             	mov    eax,db7
c00151d5:	5a                   	pop    edx
c00151d6:	59                   	pop    ecx
c00151d7:	50                   	push   eax
c00151d8:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00151dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e3:	e8 52 bf ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c00151e8:	5e                   	pop    esi
c00151e9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151ec:	e8 12 85 00 00       	call   c001d703 <Thr::getDriverNameFromAddress(unsigned long)>
c00151f1:	83 c4 10             	add    esp,0x10
c00151f4:	85 c0                	test   eax,eax
c00151f6:	74 7d                	je     c0015275 <displayDebugInfo(regs*)+0x48b>
c00151f8:	89 c6                	mov    esi,eax
c00151fa:	50                   	push   eax
c00151fb:	50                   	push   eax
c00151fc:	56                   	push   esi
c00151fd:	68 2c b0 02 c0       	push   0xc002b02c
c0015202:	e8 6d dd ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0015207:	5a                   	pop    edx
c0015208:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001520d:	59                   	pop    ecx
c001520e:	68 3a b0 02 c0       	push   0xc002b03a
c0015213:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015219:	e8 f6 be ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001521e:	5f                   	pop    edi
c001521f:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015224:	5d                   	pop    ebp
c0015225:	56                   	push   esi
c0015226:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001522c:	e8 e3 be ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015231:	58                   	pop    eax
c0015232:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c0015237:	5a                   	pop    edx
c0015238:	68 46 b0 02 c0       	push   0xc002b046
c001523d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015243:	e8 cc be ff ff       	call   c0011114 <VgaText::puts(char const*)>
c0015248:	59                   	pop    ecx
c0015249:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001524e:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015254:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015257:	e8 de 84 00 00       	call   c001d73a <Thr::getDriverOffsetFromAddress(unsigned long)>
c001525c:	5b                   	pop    ebx
c001525d:	5d                   	pop    ebp
c001525e:	50                   	push   eax
c001525f:	57                   	push   edi
c0015260:	e8 d5 be ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c0015265:	58                   	pop    eax
c0015266:	5a                   	pop    edx
c0015267:	56                   	push   esi
c0015268:	68 52 b0 02 c0       	push   0xc002b052
c001526d:	e8 02 dd ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0015272:	83 c4 10             	add    esp,0x10
c0015275:	fa                   	cli    
c0015276:	f4                   	hlt    
c0015277:	eb fe                	jmp    c0015277 <displayDebugInfo(regs*)+0x48d>

c0015279 <x87EmulHandler(regs*, void*)>:
c0015279:	53                   	push   ebx
c001527a:	83 ec 14             	sub    esp,0x14
c001527d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015281:	53                   	push   ebx
c0015282:	e8 23 a8 00 00       	call   c001faaa <Vm::x87Handler(regs*)>
c0015287:	83 c4 10             	add    esp,0x10
c001528a:	84 c0                	test   al,al
c001528c:	74 05                	je     c0015293 <x87EmulHandler(regs*, void*)+0x1a>
c001528e:	83 c4 08             	add    esp,0x8
c0015291:	5b                   	pop    ebx
c0015292:	c3                   	ret    
c0015293:	83 ec 0c             	sub    esp,0xc
c0015296:	68 62 b0 02 c0       	push   0xc002b062
c001529b:	e8 d4 dc ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00152a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152a3:	e8 42 fb ff ff       	call   c0014dea <displayDebugInfo(regs*)>

c00152a8 <gpFault(regs*, void*)>:
c00152a8:	53                   	push   ebx
c00152a9:	83 ec 14             	sub    esp,0x14
c00152ac:	c7 05 58 e6 02 c0 27 ee 01 c0 	mov    DWORD PTR ds:0xc002e658,0xc001ee27
c00152b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152ba:	53                   	push   ebx
c00152bb:	e8 67 9b 00 00       	call   c001ee27 <Vm::faultHandler(regs*)>
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	84 c0                	test   al,al
c00152c5:	74 05                	je     c00152cc <gpFault(regs*, void*)+0x24>
c00152c7:	83 c4 08             	add    esp,0x8
c00152ca:	5b                   	pop    ebx
c00152cb:	c3                   	ret    
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	68 78 b0 02 c0       	push   0xc002b078
c00152d4:	e8 9b dc ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00152d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152dc:	e8 09 fb ff ff       	call   c0014dea <displayDebugInfo(regs*)>

c00152e1 <pgFault(regs*, void*)>:
c00152e1:	83 ec 18             	sub    esp,0x18
c00152e4:	68 93 b0 02 c0       	push   0xc002b093
c00152e9:	e8 86 dc ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00152ee:	0f 20 d0             	mov    eax,cr2
c00152f1:	5a                   	pop    edx
c00152f2:	59                   	pop    ecx
c00152f3:	50                   	push   eax
c00152f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152fc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015302:	e8 d3 d7 ff ff       	call   c0012ada <VAS::tryLoadBackOffDisk(unsigned long)>
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	84 c0                	test   al,al
c001530c:	74 04                	je     c0015312 <pgFault(regs*, void*)+0x31>
c001530e:	83 c4 0c             	add    esp,0xc
c0015311:	c3                   	ret    
c0015312:	83 ec 0c             	sub    esp,0xc
c0015315:	68 a0 b0 02 c0       	push   0xc002b0a0
c001531a:	e8 55 dc ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001531f:	58                   	pop    eax
c0015320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015324:	e8 c1 fa ff ff       	call   c0014dea <displayDebugInfo(regs*)>

c0015329 <otherISRHandler(regs*, void*)>:
c0015329:	53                   	push   ebx
c001532a:	83 ec 0c             	sub    esp,0xc
c001532d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015331:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015334:	50                   	push   eax
c0015335:	50                   	push   eax
c0015336:	68 be b0 02 c0       	push   0xc002b0be
c001533b:	e8 34 dc ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0015340:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015343:	e8 a2 fa ff ff       	call   c0014dea <displayDebugInfo(regs*)>

c0015348 <opcodeFault(regs*, void*)>:
c0015348:	55                   	push   ebp
c0015349:	89 e5                	mov    ebp,esp
c001534b:	56                   	push   esi
c001534c:	53                   	push   ebx
c001534d:	83 ec 40             	sub    esp,0x40
c0015350:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0015355:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001535b:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015361:	84 c0                	test   al,al
c0015363:	74 24                	je     c0015389 <opcodeFault(regs*, void*)+0x41>
c0015365:	83 ec 0c             	sub    esp,0xc
c0015368:	68 dc b0 02 c0       	push   0xc002b0dc
c001536d:	e8 02 dc ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0015372:	83 c4 10             	add    esp,0x10
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537b:	8d 50 19             	lea    edx,[eax+0x19]
c001537e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015381:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015384:	e9 be 05 00 00       	jmp    c0015947 <opcodeFault(regs*, void*)+0x5ff>
c0015389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001538f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015392:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015396:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a6:	8a 00                	mov    al,BYTE PTR [eax]
c00153a8:	3c f0                	cmp    al,0xf0
c00153aa:	75 17                	jne    c00153c3 <opcodeFault(regs*, void*)+0x7b>
c00153ac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b5:	8d 50 01             	lea    edx,[eax+0x1]
c00153b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153be:	e9 da 00 00 00       	jmp    c001549d <opcodeFault(regs*, void*)+0x155>
c00153c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c6:	8a 00                	mov    al,BYTE PTR [eax]
c00153c8:	3c f2                	cmp    al,0xf2
c00153ca:	74 09                	je     c00153d5 <opcodeFault(regs*, void*)+0x8d>
c00153cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cf:	8a 00                	mov    al,BYTE PTR [eax]
c00153d1:	3c f3                	cmp    al,0xf3
c00153d3:	75 1b                	jne    c00153f0 <opcodeFault(regs*, void*)+0xa8>
c00153d5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153d9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e2:	8d 50 01             	lea    edx,[eax+0x1]
c00153e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153eb:	e9 ad 00 00 00       	jmp    c001549d <opcodeFault(regs*, void*)+0x155>
c00153f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f3:	8a 00                	mov    al,BYTE PTR [eax]
c00153f5:	3c 66                	cmp    al,0x66
c00153f7:	75 1f                	jne    c0015418 <opcodeFault(regs*, void*)+0xd0>
c00153f9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153fd:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015401:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015407:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540a:	8d 50 01             	lea    edx,[eax+0x1]
c001540d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015410:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015413:	e9 85 00 00 00       	jmp    c001549d <opcodeFault(regs*, void*)+0x155>
c0015418:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541b:	8a 00                	mov    al,BYTE PTR [eax]
c001541d:	3c 67                	cmp    al,0x67
c001541f:	75 18                	jne    c0015439 <opcodeFault(regs*, void*)+0xf1>
c0015421:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015425:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542e:	8d 50 01             	lea    edx,[eax+0x1]
c0015431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015434:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015437:	eb 64                	jmp    c001549d <opcodeFault(regs*, void*)+0x155>
c0015439:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543c:	8a 00                	mov    al,BYTE PTR [eax]
c001543e:	3c 2e                	cmp    al,0x2e
c0015440:	74 09                	je     c001544b <opcodeFault(regs*, void*)+0x103>
c0015442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015445:	8a 00                	mov    al,BYTE PTR [eax]
c0015447:	3c 3e                	cmp    al,0x3e
c0015449:	75 18                	jne    c0015463 <opcodeFault(regs*, void*)+0x11b>
c001544b:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015455:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015458:	8d 50 01             	lea    edx,[eax+0x1]
c001545b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015461:	eb 3a                	jmp    c001549d <opcodeFault(regs*, void*)+0x155>
c0015463:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015466:	8a 00                	mov    al,BYTE PTR [eax]
c0015468:	3c 36                	cmp    al,0x36
c001546a:	74 1b                	je     c0015487 <opcodeFault(regs*, void*)+0x13f>
c001546c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546f:	8a 00                	mov    al,BYTE PTR [eax]
c0015471:	3c 26                	cmp    al,0x26
c0015473:	74 12                	je     c0015487 <opcodeFault(regs*, void*)+0x13f>
c0015475:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015478:	8a 00                	mov    al,BYTE PTR [eax]
c001547a:	3c 64                	cmp    al,0x64
c001547c:	74 09                	je     c0015487 <opcodeFault(regs*, void*)+0x13f>
c001547e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015481:	8a 00                	mov    al,BYTE PTR [eax]
c0015483:	3c 65                	cmp    al,0x65
c0015485:	75 16                	jne    c001549d <opcodeFault(regs*, void*)+0x155>
c0015487:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001548b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001548e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015491:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015494:	8d 50 01             	lea    edx,[eax+0x1]
c0015497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001549d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a0:	8a 00                	mov    al,BYTE PTR [eax]
c00154a2:	3c 0f                	cmp    al,0xf
c00154a4:	0f 85 ad 00 00 00    	jne    c0015557 <opcodeFault(regs*, void*)+0x20f>
c00154aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ad:	40                   	inc    eax
c00154ae:	8a 00                	mov    al,BYTE PTR [eax]
c00154b0:	3c c2                	cmp    al,0xc2
c00154b2:	74 0e                	je     c00154c2 <opcodeFault(regs*, void*)+0x17a>
c00154b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b7:	40                   	inc    eax
c00154b8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ba:	3c c3                	cmp    al,0xc3
c00154bc:	0f 85 95 00 00 00    	jne    c0015557 <opcodeFault(regs*, void*)+0x20f>
c00154c2:	83 ec 0c             	sub    esp,0xc
c00154c5:	68 ff b0 02 c0       	push   0xc002b0ff
c00154ca:	e8 a5 da ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00154cf:	83 c4 10             	add    esp,0x10
c00154d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d8:	8d 50 01             	lea    edx,[eax+0x1]
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e7:	8a 00                	mov    al,BYTE PTR [eax]
c00154e9:	8d 50 fe             	lea    edx,[eax-0x2]
c00154ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ef:	88 10                	mov    BYTE PTR [eax],dl
c00154f1:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154f4:	50                   	push   eax
c00154f5:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154f8:	50                   	push   eax
c00154f9:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154fc:	50                   	push   eax
c00154fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015500:	e8 e3 47 00 00       	call   c0019ce8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001550e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015511:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015514:	01 d0                	add    eax,edx
c0015516:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001551f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015522:	48                   	dec    eax
c0015523:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015529:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001552c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001552f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015532:	83 ec 04             	sub    esp,0x4
c0015535:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015538:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001553b:	50                   	push   eax
c001553c:	e8 73 ac fe ff       	call   c00001b4 <voodooXADD>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015547:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001554a:	01 c2                	add    edx,eax
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015552:	e9 f0 03 00 00       	jmp    c0015947 <opcodeFault(regs*, void*)+0x5ff>
c0015557:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555a:	8a 00                	mov    al,BYTE PTR [eax]
c001555c:	3c 0f                	cmp    al,0xf
c001555e:	0f 85 8b 01 00 00    	jne    c00156ef <opcodeFault(regs*, void*)+0x3a7>
c0015564:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015567:	40                   	inc    eax
c0015568:	8a 00                	mov    al,BYTE PTR [eax]
c001556a:	3c c7                	cmp    al,0xc7
c001556c:	0f 86 7d 01 00 00    	jbe    c00156ef <opcodeFault(regs*, void*)+0x3a7>
c0015572:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015575:	40                   	inc    eax
c0015576:	8a 00                	mov    al,BYTE PTR [eax]
c0015578:	3c cf                	cmp    al,0xcf
c001557a:	0f 87 6f 01 00 00    	ja     c00156ef <opcodeFault(regs*, void*)+0x3a7>
c0015580:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015583:	40                   	inc    eax
c0015584:	8a 00                	mov    al,BYTE PTR [eax]
c0015586:	83 c0 38             	add    eax,0x38
c0015589:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001558c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015590:	75 0b                	jne    c001559d <opcodeFault(regs*, void*)+0x255>
c0015592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015595:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015598:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559b:	eb 75                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c001559d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155a1:	75 0b                	jne    c00155ae <opcodeFault(regs*, void*)+0x266>
c00155a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ac:	eb 64                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c00155ae:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155b2:	75 0b                	jne    c00155bf <opcodeFault(regs*, void*)+0x277>
c00155b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155bd:	eb 53                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c00155bf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155c3:	75 0b                	jne    c00155d0 <opcodeFault(regs*, void*)+0x288>
c00155c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ce:	eb 42                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c00155d0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155d4:	75 0b                	jne    c00155e1 <opcodeFault(regs*, void*)+0x299>
c00155d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155df:	eb 31                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c00155e1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155e5:	75 0b                	jne    c00155f2 <opcodeFault(regs*, void*)+0x2aa>
c00155e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f0:	eb 20                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c00155f2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155f6:	75 0b                	jne    c0015603 <opcodeFault(regs*, void*)+0x2bb>
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015601:	eb 0f                	jmp    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c0015603:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015607:	75 09                	jne    c0015612 <opcodeFault(regs*, void*)+0x2ca>
c0015609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001560f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015612:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015616:	74 10                	je     c0015628 <opcodeFault(regs*, void*)+0x2e0>
c0015618:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001561f:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015626:	eb 2d                	jmp    c0015655 <opcodeFault(regs*, void*)+0x30d>
c0015628:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001562b:	c1 e0 18             	shl    eax,0x18
c001562e:	89 c2                	mov    edx,eax
c0015630:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015633:	c1 e0 08             	shl    eax,0x8
c0015636:	25 00 00 ff 00       	and    eax,0xff0000
c001563b:	09 c2                	or     edx,eax
c001563d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015640:	c1 e8 08             	shr    eax,0x8
c0015643:	25 00 ff 00 00       	and    eax,0xff00
c0015648:	09 c2                	or     edx,eax
c001564a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001564d:	c1 e8 18             	shr    eax,0x18
c0015650:	09 d0                	or     eax,edx
c0015652:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015655:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015659:	75 0b                	jne    c0015666 <opcodeFault(regs*, void*)+0x31e>
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015661:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015664:	eb 75                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c0015666:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001566a:	75 0b                	jne    c0015677 <opcodeFault(regs*, void*)+0x32f>
c001566c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015672:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015675:	eb 64                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c0015677:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001567b:	75 0b                	jne    c0015688 <opcodeFault(regs*, void*)+0x340>
c001567d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015680:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015683:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015686:	eb 53                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c0015688:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001568c:	75 0b                	jne    c0015699 <opcodeFault(regs*, void*)+0x351>
c001568e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015691:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015694:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015697:	eb 42                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c0015699:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001569d:	75 0b                	jne    c00156aa <opcodeFault(regs*, void*)+0x362>
c001569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156a8:	eb 31                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c00156aa:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156ae:	75 0b                	jne    c00156bb <opcodeFault(regs*, void*)+0x373>
c00156b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156b9:	eb 20                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c00156bb:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156bf:	75 0b                	jne    c00156cc <opcodeFault(regs*, void*)+0x384>
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156ca:	eb 0f                	jmp    c00156db <opcodeFault(regs*, void*)+0x393>
c00156cc:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156d0:	75 09                	jne    c00156db <opcodeFault(regs*, void*)+0x393>
c00156d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156d8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e1:	8d 50 02             	lea    edx,[eax+0x2]
c00156e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ea:	e9 58 02 00 00       	jmp    c0015947 <opcodeFault(regs*, void*)+0x5ff>
c00156ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f2:	8a 00                	mov    al,BYTE PTR [eax]
c00156f4:	3c 0f                	cmp    al,0xf
c00156f6:	0f 85 76 01 00 00    	jne    c0015872 <opcodeFault(regs*, void*)+0x52a>
c00156fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ff:	40                   	inc    eax
c0015700:	8a 00                	mov    al,BYTE PTR [eax]
c0015702:	3c c7                	cmp    al,0xc7
c0015704:	0f 85 68 01 00 00    	jne    c0015872 <opcodeFault(regs*, void*)+0x52a>
c001570a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015710:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015713:	8d 50 01             	lea    edx,[eax+0x1]
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001571c:	8d 45 ba             	lea    eax,[ebp-0x46]
c001571f:	50                   	push   eax
c0015720:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015723:	50                   	push   eax
c0015724:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015727:	50                   	push   eax
c0015728:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001572b:	e8 b8 45 00 00       	call   c0019ce8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015736:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015739:	83 f0 01             	xor    eax,0x1
c001573c:	84 c0                	test   al,al
c001573e:	0f 84 2e 01 00 00    	je     c0015872 <opcodeFault(regs*, void*)+0x52a>
c0015744:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015747:	3c 01                	cmp    al,0x1
c0015749:	0f 85 23 01 00 00    	jne    c0015872 <opcodeFault(regs*, void*)+0x52a>
c001574f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015752:	83 f0 01             	xor    eax,0x1
c0015755:	84 c0                	test   al,al
c0015757:	0f 84 15 01 00 00    	je     c0015872 <opcodeFault(regs*, void*)+0x52a>
c001575d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015760:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015763:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015766:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001576d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015770:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015773:	89 c2                	mov    edx,eax
c0015775:	b8 00 00 00 00       	mov    eax,0x0
c001577a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001577d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015783:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015786:	ba 00 00 00 00       	mov    edx,0x0
c001578b:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001578e:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015797:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001579a:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157a1:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157a4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157a7:	89 c2                	mov    edx,eax
c00157a9:	b8 00 00 00 00       	mov    eax,0x0
c00157ae:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157b1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157ba:	ba 00 00 00 00       	mov    edx,0x0
c00157bf:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157c2:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157c5:	e8 4c 86 00 00       	call   c001de16 <lockScheduler()>
c00157ca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d2:	89 c1                	mov    ecx,eax
c00157d4:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157d7:	89 cb                	mov    ebx,ecx
c00157d9:	89 d0                	mov    eax,edx
c00157db:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157de:	89 c6                	mov    esi,eax
c00157e0:	89 f0                	mov    eax,esi
c00157e2:	09 d8                	or     eax,ebx
c00157e4:	85 c0                	test   eax,eax
c00157e6:	75 21                	jne    c0015809 <opcodeFault(regs*, void*)+0x4c1>
c00157e8:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157eb:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157ee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157f1:	89 01                	mov    DWORD PTR [ecx],eax
c00157f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157fc:	83 c8 40             	or     eax,0x40
c00157ff:	89 c2                	mov    edx,eax
c0015801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015804:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015807:	eb 3e                	jmp    c0015847 <opcodeFault(regs*, void*)+0x4ff>
c0015809:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001580c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001580f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015811:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015814:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015817:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015820:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015823:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015826:	89 d0                	mov    eax,edx
c0015828:	31 d2                	xor    edx,edx
c001582a:	89 c3                	mov    ebx,eax
c001582c:	89 d6                	mov    esi,edx
c001582e:	89 da                	mov    edx,ebx
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015839:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001583c:	83 e0 bf             	and    eax,0xffffffbf
c001583f:	89 c2                	mov    edx,eax
c0015841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015844:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015847:	e8 cc 85 00 00       	call   c001de18 <unlockScheduler()>
c001584c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015852:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015855:	01 c2                	add    edx,eax
c0015857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001585d:	83 ec 0c             	sub    esp,0xc
c0015860:	68 0e b1 02 c0       	push   0xc002b10e
c0015865:	e8 0a d7 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001586a:	83 c4 10             	add    esp,0x10
c001586d:	e9 d5 00 00 00       	jmp    c0015947 <opcodeFault(regs*, void*)+0x5ff>
c0015872:	83 ec 0c             	sub    esp,0xc
c0015875:	68 21 b1 02 c0       	push   0xc002b121
c001587a:	e8 f5 d6 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001587f:	83 c4 10             	add    esp,0x10
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001588e:	c1 e0 04             	shl    eax,0x4
c0015891:	01 d0                	add    eax,edx
c0015893:	83 c0 03             	add    eax,0x3
c0015896:	8a 00                	mov    al,BYTE PTR [eax]
c0015898:	0f b6 d8             	movzx  ebx,al
c001589b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a7:	c1 e0 04             	shl    eax,0x4
c00158aa:	01 d0                	add    eax,edx
c00158ac:	83 c0 02             	add    eax,0x2
c00158af:	8a 00                	mov    al,BYTE PTR [eax]
c00158b1:	0f b6 c8             	movzx  ecx,al
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158c0:	c1 e0 04             	shl    eax,0x4
c00158c3:	01 d0                	add    eax,edx
c00158c5:	40                   	inc    eax
c00158c6:	8a 00                	mov    al,BYTE PTR [eax]
c00158c8:	0f b6 d0             	movzx  edx,al
c00158cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ce:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158d7:	c1 e0 04             	shl    eax,0x4
c00158da:	01 f0                	add    eax,esi
c00158dc:	8a 00                	mov    al,BYTE PTR [eax]
c00158de:	0f b6 c0             	movzx  eax,al
c00158e1:	83 ec 0c             	sub    esp,0xc
c00158e4:	53                   	push   ebx
c00158e5:	51                   	push   ecx
c00158e6:	52                   	push   edx
c00158e7:	50                   	push   eax
c00158e8:	68 34 b1 02 c0       	push   0xc002b134
c00158ed:	e8 82 d6 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00158f2:	83 c4 20             	add    esp,0x20
c00158f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fb:	83 c0 03             	add    eax,0x3
c00158fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015900:	0f b6 d8             	movzx  ebx,al
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015909:	83 c0 02             	add    eax,0x2
c001590c:	8a 00                	mov    al,BYTE PTR [eax]
c001590e:	0f b6 c8             	movzx  ecx,al
c0015911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015914:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015917:	40                   	inc    eax
c0015918:	8a 00                	mov    al,BYTE PTR [eax]
c001591a:	0f b6 d0             	movzx  edx,al
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015923:	8a 00                	mov    al,BYTE PTR [eax]
c0015925:	0f b6 c0             	movzx  eax,al
c0015928:	83 ec 0c             	sub    esp,0xc
c001592b:	53                   	push   ebx
c001592c:	51                   	push   ecx
c001592d:	52                   	push   edx
c001592e:	50                   	push   eax
c001592f:	68 5c b1 02 c0       	push   0xc002b15c
c0015934:	e8 3b d6 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0015939:	83 c4 20             	add    esp,0x20
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015942:	e8 a3 f4 ff ff       	call   c0014dea <displayDebugInfo(regs*)>
c0015947:	8d 65 f8             	lea    esp,[ebp-0x8]
c001594a:	5b                   	pop    ebx
c001594b:	5e                   	pop    esi
c001594c:	5d                   	pop    ebp
c001594d:	c3                   	ret    

c001594e <displayProgramFault(char const*)>:
c001594e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015953:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015956:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001595c:	85 c0                	test   eax,eax
c001595e:	74 15                	je     c0015975 <displayProgramFault(char const*)+0x27>
c0015960:	83 ec 0c             	sub    esp,0xc
c0015963:	6a 04                	push   0x4
c0015965:	6a 0f                	push   0xf
c0015967:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001596b:	50                   	push   eax
c001596c:	e8 65 b4 ff ff       	call   c0010dd6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015971:	83 c4 1c             	add    esp,0x1c
c0015974:	c3                   	ret    
c0015975:	c3                   	ret    

c0015976 <setupInterruptController()>:
c0015976:	55                   	push   ebp
c0015977:	89 e5                	mov    ebp,esp
c0015979:	53                   	push   ebx
c001597a:	83 ec 24             	sub    esp,0x24
c001597d:	b8 00 00 00 00       	mov    eax,0x0
c0015982:	85 c0                	test   eax,eax
c0015984:	0f 95 c0             	setne  al
c0015987:	84 c0                	test   al,al
c0015989:	74 5b                	je     c00159e6 <setupInterruptController()+0x70>
c001598b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015992:	83 ec 0c             	sub    esp,0xc
c0015995:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015998:	e8 a6 9e ff ff       	call   c000f843 <malloc>
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	89 c3                	mov    ebx,eax
c00159a2:	83 ec 0c             	sub    esp,0xc
c00159a5:	53                   	push   ebx
c00159a6:	e8 c3 ff 00 00       	call   c002596e <APIC::APIC()>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159b1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b9:	83 c0 08             	add    eax,0x8
c00159bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159be:	6a 00                	push   0x0
c00159c0:	6a 00                	push   0x0
c00159c2:	6a 00                	push   0x0
c00159c4:	52                   	push   edx
c00159c5:	ff d0                	call   eax
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00159cf:	83 ec 08             	sub    esp,0x8
c00159d2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159d5:	50                   	push   eax
c00159d6:	e8 bf e9 ff ff       	call   c001439a <Device::addChild(Device*)>
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159e1:	e9 52 03 00 00       	jmp    c0015d38 <setupInterruptController()+0x3c2>
c00159e6:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00159eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159f1:	83 e0 01             	and    eax,0x1
c00159f4:	84 c0                	test   al,al
c00159f6:	0f 95 c0             	setne  al
c00159f9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159fc:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a09:	e8 35 9e ff ff       	call   c000f843 <malloc>
c0015a0e:	83 c4 10             	add    esp,0x10
c0015a11:	89 c3                	mov    ebx,eax
c0015a13:	83 ec 0c             	sub    esp,0xc
c0015a16:	53                   	push   ebx
c0015a17:	e8 aa 04 01 00       	call   c0025ec6 <PIC::PIC()>
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2a:	83 c0 08             	add    eax,0x8
c0015a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2f:	6a 00                	push   0x0
c0015a31:	6a 00                	push   0x0
c0015a33:	6a 00                	push   0x0
c0015a35:	52                   	push   edx
c0015a36:	ff d0                	call   eax
c0015a38:	83 c4 10             	add    esp,0x10
c0015a3b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a3f:	74 73                	je     c0015ab4 <setupInterruptController()+0x13e>
c0015a41:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a49:	83 c0 0c             	add    eax,0xc
c0015a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4e:	6a 00                	push   0x0
c0015a50:	6a 00                	push   0x0
c0015a52:	6a 00                	push   0x0
c0015a54:	52                   	push   edx
c0015a55:	ff d0                	call   eax
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a5e:	74 15                	je     c0015a75 <setupInterruptController()+0xff>
c0015a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a65:	83 c0 04             	add    eax,0x4
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	83 ec 0c             	sub    esp,0xc
c0015a6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a70:	ff d0                	call   eax
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a7c:	83 ec 0c             	sub    esp,0xc
c0015a7f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a82:	e8 bc 9d ff ff       	call   c000f843 <malloc>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	89 c3                	mov    ebx,eax
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	53                   	push   ebx
c0015a90:	e8 d9 fe 00 00       	call   c002596e <APIC::APIC()>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a9b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa3:	83 c0 08             	add    eax,0x8
c0015aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa8:	6a 00                	push   0x0
c0015aaa:	6a 00                	push   0x0
c0015aac:	6a 00                	push   0x0
c0015aae:	52                   	push   edx
c0015aaf:	ff d0                	call   eax
c0015ab1:	83 c4 10             	add    esp,0x10
c0015ab4:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0015ab9:	83 ec 08             	sub    esp,0x8
c0015abc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abf:	50                   	push   eax
c0015ac0:	e8 d5 e8 ff ff       	call   c001439a <Device::addChild(Device*)>
c0015ac5:	83 c4 10             	add    esp,0x10
c0015ac8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acd:	83 c0 24             	add    eax,0x24
c0015ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad2:	6a 00                	push   0x0
c0015ad4:	68 29 53 01 c0       	push   0xc0015329
c0015ad9:	6a 00                	push   0x0
c0015adb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ade:	ff d0                	call   eax
c0015ae0:	83 c4 10             	add    esp,0x10
c0015ae3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae8:	83 c0 24             	add    eax,0x24
c0015aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aed:	6a 00                	push   0x0
c0015aef:	68 29 53 01 c0       	push   0xc0015329
c0015af4:	6a 01                	push   0x1
c0015af6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af9:	ff d0                	call   eax
c0015afb:	83 c4 10             	add    esp,0x10
c0015afe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b03:	83 c0 24             	add    eax,0x24
c0015b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b08:	6a 00                	push   0x0
c0015b0a:	68 47 4c 01 c0       	push   0xc0014c47
c0015b0f:	6a 02                	push   0x2
c0015b11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b14:	ff d0                	call   eax
c0015b16:	83 c4 10             	add    esp,0x10
c0015b19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1e:	83 c0 24             	add    eax,0x24
c0015b21:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b23:	6a 00                	push   0x0
c0015b25:	68 29 53 01 c0       	push   0xc0015329
c0015b2a:	6a 03                	push   0x3
c0015b2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2f:	ff d0                	call   eax
c0015b31:	83 c4 10             	add    esp,0x10
c0015b34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b37:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b39:	83 c0 24             	add    eax,0x24
c0015b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3e:	6a 00                	push   0x0
c0015b40:	68 29 53 01 c0       	push   0xc0015329
c0015b45:	6a 04                	push   0x4
c0015b47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4a:	ff d0                	call   eax
c0015b4c:	83 c4 10             	add    esp,0x10
c0015b4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b54:	83 c0 24             	add    eax,0x24
c0015b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b59:	6a 00                	push   0x0
c0015b5b:	68 29 53 01 c0       	push   0xc0015329
c0015b60:	6a 05                	push   0x5
c0015b62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b65:	ff d0                	call   eax
c0015b67:	83 c4 10             	add    esp,0x10
c0015b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6f:	83 c0 24             	add    eax,0x24
c0015b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b74:	6a 00                	push   0x0
c0015b76:	68 48 53 01 c0       	push   0xc0015348
c0015b7b:	6a 06                	push   0x6
c0015b7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b80:	ff d0                	call   eax
c0015b82:	83 c4 10             	add    esp,0x10
c0015b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8a:	83 c0 24             	add    eax,0x24
c0015b8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8f:	6a 00                	push   0x0
c0015b91:	68 79 52 01 c0       	push   0xc0015279
c0015b96:	6a 07                	push   0x7
c0015b98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9b:	ff d0                	call   eax
c0015b9d:	83 c4 10             	add    esp,0x10
c0015ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba5:	83 c0 24             	add    eax,0x24
c0015ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baa:	6a 00                	push   0x0
c0015bac:	68 62 4a 01 c0       	push   0xc0014a62
c0015bb1:	6a 08                	push   0x8
c0015bb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb6:	ff d0                	call   eax
c0015bb8:	83 c4 10             	add    esp,0x10
c0015bbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc0:	83 c0 24             	add    eax,0x24
c0015bc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc5:	6a 00                	push   0x0
c0015bc7:	68 29 53 01 c0       	push   0xc0015329
c0015bcc:	6a 09                	push   0x9
c0015bce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd1:	ff d0                	call   eax
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdb:	83 c0 24             	add    eax,0x24
c0015bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be0:	6a 00                	push   0x0
c0015be2:	68 29 53 01 c0       	push   0xc0015329
c0015be7:	6a 0a                	push   0xa
c0015be9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bec:	ff d0                	call   eax
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf6:	83 c0 24             	add    eax,0x24
c0015bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfb:	6a 00                	push   0x0
c0015bfd:	68 29 53 01 c0       	push   0xc0015329
c0015c02:	6a 0b                	push   0xb
c0015c04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c07:	ff d0                	call   eax
c0015c09:	83 c4 10             	add    esp,0x10
c0015c0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c11:	83 c0 24             	add    eax,0x24
c0015c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c16:	6a 00                	push   0x0
c0015c18:	68 29 53 01 c0       	push   0xc0015329
c0015c1d:	6a 0c                	push   0xc
c0015c1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c22:	ff d0                	call   eax
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2c:	83 c0 24             	add    eax,0x24
c0015c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c31:	6a 00                	push   0x0
c0015c33:	68 a8 52 01 c0       	push   0xc00152a8
c0015c38:	6a 0d                	push   0xd
c0015c3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3d:	ff d0                	call   eax
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c47:	83 c0 24             	add    eax,0x24
c0015c4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4c:	6a 00                	push   0x0
c0015c4e:	68 e1 52 01 c0       	push   0xc00152e1
c0015c53:	6a 0e                	push   0xe
c0015c55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c58:	ff d0                	call   eax
c0015c5a:	83 c4 10             	add    esp,0x10
c0015c5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c62:	83 c0 24             	add    eax,0x24
c0015c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c67:	6a 00                	push   0x0
c0015c69:	68 29 53 01 c0       	push   0xc0015329
c0015c6e:	6a 0f                	push   0xf
c0015c70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c73:	ff d0                	call   eax
c0015c75:	83 c4 10             	add    esp,0x10
c0015c78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7d:	83 c0 24             	add    eax,0x24
c0015c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c82:	6a 00                	push   0x0
c0015c84:	68 29 53 01 c0       	push   0xc0015329
c0015c89:	6a 10                	push   0x10
c0015c8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8e:	ff d0                	call   eax
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c98:	83 c0 24             	add    eax,0x24
c0015c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9d:	6a 00                	push   0x0
c0015c9f:	68 29 53 01 c0       	push   0xc0015329
c0015ca4:	6a 11                	push   0x11
c0015ca6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ca9:	ff d0                	call   eax
c0015cab:	83 c4 10             	add    esp,0x10
c0015cae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb3:	83 c0 24             	add    eax,0x24
c0015cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb8:	6a 00                	push   0x0
c0015cba:	68 29 53 01 c0       	push   0xc0015329
c0015cbf:	6a 12                	push   0x12
c0015cc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc4:	ff d0                	call   eax
c0015cc6:	83 c4 10             	add    esp,0x10
c0015cc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ccc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cce:	83 c0 24             	add    eax,0x24
c0015cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd3:	6a 00                	push   0x0
c0015cd5:	68 29 53 01 c0       	push   0xc0015329
c0015cda:	6a 13                	push   0x13
c0015cdc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cdf:	ff d0                	call   eax
c0015ce1:	83 c4 10             	add    esp,0x10
c0015ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce9:	83 c0 24             	add    eax,0x24
c0015cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cee:	6a 00                	push   0x0
c0015cf0:	68 29 53 01 c0       	push   0xc0015329
c0015cf5:	6a 14                	push   0x14
c0015cf7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cfa:	ff d0                	call   eax
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d04:	83 c0 24             	add    eax,0x24
c0015d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d09:	6a 00                	push   0x0
c0015d0b:	68 29 53 01 c0       	push   0xc0015329
c0015d10:	6a 1e                	push   0x1e
c0015d12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d15:	ff d0                	call   eax
c0015d17:	83 c4 10             	add    esp,0x10
c0015d1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d1f:	83 c0 24             	add    eax,0x24
c0015d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d24:	6a 00                	push   0x0
c0015d26:	68 ab c7 01 c0       	push   0xc001c7ab
c0015d2b:	6a 60                	push   0x60
c0015d2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d30:	ff d0                	call   eax
c0015d32:	83 c4 10             	add    esp,0x10
c0015d35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d3b:	c9                   	leave  
c0015d3c:	c3                   	ret    
c0015d3d:	90                   	nop

c0015d3e <InterruptController::convertLegacyIRQNumber(int)>:
c0015d3e:	55                   	push   ebp
c0015d3f:	89 e5                	mov    ebp,esp
c0015d41:	83 ec 08             	sub    esp,0x8
c0015d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d47:	83 ec 0c             	sub    esp,0xc
c0015d4a:	50                   	push   eax
c0015d4b:	e8 36 e9 ff ff       	call   c0014686 <Device::getName()>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	8a 00                	mov    al,BYTE PTR [eax]
c0015d55:	3c 41                	cmp    al,0x41
c0015d57:	0f 94 c0             	sete   al
c0015d5a:	84 c0                	test   al,al
c0015d5c:	74 28                	je     c0015d86 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d5e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d62:	7f 12                	jg     c0015d76 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d67:	05 00 d7 02 c0       	add    eax,0xc002d700
c0015d6c:	8a 00                	mov    al,BYTE PTR [eax]
c0015d6e:	0f b6 c0             	movzx  eax,al
c0015d71:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d74:	eb 10                	jmp    c0015d86 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d76:	83 ec 0c             	sub    esp,0xc
c0015d79:	68 60 ae 02 c0       	push   0xc002ae60
c0015d7e:	e8 9e 48 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d89:	c9                   	leave  
c0015d8a:	c3                   	ret    
c0015d8b:	90                   	nop

c0015d8c <startGUI(void*)>:
c0015d8c:	55                   	push   ebp
c0015d8d:	89 e5                	mov    ebp,esp
c0015d8f:	53                   	push   ebx
c0015d90:	83 ec 04             	sub    esp,0x4
c0015d93:	e8 80 80 00 00       	call   c001de18 <unlockScheduler()>
c0015d98:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0015d9e:	83 ec 08             	sub    esp,0x8
c0015da1:	6a 01                	push   0x1
c0015da3:	68 cc b1 02 c0       	push   0xc002b1cc
c0015da8:	e8 a7 79 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	83 ec 08             	sub    esp,0x8
c0015db3:	53                   	push   ebx
c0015db4:	50                   	push   eax
c0015db5:	e8 e9 7b 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	6a 01                	push   0x1
c0015dc8:	68 e6 b1 02 c0       	push   0xc002b1e6
c0015dcd:	e8 82 79 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	83 ec 08             	sub    esp,0x8
c0015dd8:	53                   	push   ebx
c0015dd9:	50                   	push   eax
c0015dda:	e8 c4 7b 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c0015ddf:	83 c4 10             	add    esp,0x10
c0015de2:	90                   	nop
c0015de3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015de6:	c9                   	leave  
c0015de7:	c3                   	ret    

c0015de8 <startGUIVESA(void*)>:
c0015de8:	55                   	push   ebp
c0015de9:	89 e5                	mov    ebp,esp
c0015deb:	53                   	push   ebx
c0015dec:	83 ec 04             	sub    esp,0x4
c0015def:	e8 24 80 00 00       	call   c001de18 <unlockScheduler()>
c0015df4:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0015dfa:	83 ec 08             	sub    esp,0x8
c0015dfd:	6a 01                	push   0x1
c0015dff:	68 00 b2 02 c0       	push   0xc002b200
c0015e04:	e8 4b 79 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	83 ec 08             	sub    esp,0x8
c0015e0f:	53                   	push   ebx
c0015e10:	50                   	push   eax
c0015e11:	e8 8d 7b 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c0015e16:	83 c4 10             	add    esp,0x10
c0015e19:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c0015e1f:	83 ec 08             	sub    esp,0x8
c0015e22:	6a 01                	push   0x1
c0015e24:	68 e6 b1 02 c0       	push   0xc002b1e6
c0015e29:	e8 26 79 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c0015e2e:	83 c4 10             	add    esp,0x10
c0015e31:	83 ec 08             	sub    esp,0x8
c0015e34:	53                   	push   ebx
c0015e35:	50                   	push   eax
c0015e36:	e8 68 7b 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c0015e3b:	83 c4 10             	add    esp,0x10
c0015e3e:	90                   	nop
c0015e3f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e42:	c9                   	leave  
c0015e43:	c3                   	ret    

c0015e44 <sendKeyToTerminal(unsigned char)>:
c0015e44:	55                   	push   ebp
c0015e45:	89 e5                	mov    ebp,esp
c0015e47:	83 ec 28             	sub    esp,0x28
c0015e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e50:	a1 84 e5 02 c0       	mov    eax,ds:0xc002e584
c0015e55:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e59:	83 ec 08             	sub    esp,0x8
c0015e5c:	52                   	push   edx
c0015e5d:	50                   	push   eax
c0015e5e:	e8 af b4 ff ff       	call   c0011312 <VgaText::receiveKey(unsigned char)>
c0015e63:	83 c4 10             	add    esp,0x10
c0015e66:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e6a:	75 41                	jne    c0015ead <sendKeyToTerminal(unsigned char)+0x69>
c0015e6c:	e8 cc 7f 00 00       	call   c001de3d <lockStuff()>
c0015e71:	a1 60 e6 02 c0       	mov    eax,ds:0xc002e660
c0015e76:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e79:	c7 05 60 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e660,0x0
c0015e83:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e87:	74 1f                	je     c0015ea8 <sendKeyToTerminal(unsigned char)+0x64>
c0015e89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e8c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e95:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e9e:	e8 8b 85 00 00       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c0015ea3:	83 c4 10             	add    esp,0x10
c0015ea6:	eb db                	jmp    c0015e83 <sendKeyToTerminal(unsigned char)+0x3f>
c0015ea8:	e8 2a 83 00 00       	call   c001e1d7 <unlockStuff()>
c0015ead:	90                   	nop
c0015eae:	c9                   	leave  
c0015eaf:	c3                   	ret    

c0015eb0 <sendKeyboardToken(KeyboardToken)>:
c0015eb0:	55                   	push   ebp
c0015eb1:	89 e5                	mov    ebp,esp
c0015eb3:	83 ec 18             	sub    esp,0x18
c0015eb6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015eb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebc:	0f b7 c0             	movzx  eax,ax
c0015ebf:	83 f2 01             	xor    edx,0x1
c0015ec2:	88 90 80 e6 02 c0    	mov    BYTE PTR [eax-0x3ffd1980],dl
c0015ec8:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0015ecd:	85 c0                	test   eax,eax
c0015ecf:	74 24                	je     c0015ef5 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ed1:	8b 0d 68 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e668
c0015ed7:	83 ec 04             	sub    esp,0x4
c0015eda:	68 80 e6 02 c0       	push   0xc002e680
c0015edf:	83 ec 08             	sub    esp,0x8
c0015ee2:	89 e2                	mov    edx,esp
c0015ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee7:	89 02                	mov    DWORD PTR [edx],eax
c0015ee9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eec:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ef0:	ff d1                	call   ecx
c0015ef2:	83 c4 10             	add    esp,0x10
c0015ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef8:	66 3d 03 02          	cmp    ax,0x203
c0015efc:	75 07                	jne    c0015f05 <sendKeyboardToken(KeyboardToken)+0x55>
c0015efe:	a0 80 e7 02 c0       	mov    al,ds:0xc002e780
c0015f03:	84 c0                	test   al,al
c0015f05:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f09:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f0c:	a0 88 ea 02 c0       	mov    al,ds:0xc002ea88
c0015f11:	38 c2                	cmp    dl,al
c0015f13:	74 1c                	je     c0015f31 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f15:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f18:	a2 88 ea 02 c0       	mov    ds:0xc002ea88,al
c0015f1d:	a0 88 ea 02 c0       	mov    al,ds:0xc002ea88
c0015f22:	0f b6 c0             	movzx  eax,al
c0015f25:	83 ec 0c             	sub    esp,0xc
c0015f28:	50                   	push   eax
c0015f29:	e8 44 a6 ff ff       	call   c0010572 <setTerminalScrollLock(bool)>
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f34:	84 c0                	test   al,al
c0015f36:	0f 84 ae 00 00 00    	je     c0015fea <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3f:	66 3d 10 03          	cmp    ax,0x310
c0015f43:	75 06                	jne    c0015f4b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f45:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4e:	66 3d 11 03          	cmp    ax,0x311
c0015f52:	75 06                	jne    c0015f5a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f54:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5d:	66 3d 12 03          	cmp    ax,0x312
c0015f61:	75 06                	jne    c0015f69 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f63:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6c:	66 3d 13 03          	cmp    ax,0x313
c0015f70:	75 06                	jne    c0015f78 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f72:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7b:	66 3d 14 03          	cmp    ax,0x314
c0015f7f:	75 06                	jne    c0015f87 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f81:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8a:	66 3d 15 03          	cmp    ax,0x315
c0015f8e:	75 06                	jne    c0015f96 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f90:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f99:	66 3d 16 03          	cmp    ax,0x316
c0015f9d:	75 06                	jne    c0015fa5 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f9f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa8:	66 3d 17 03          	cmp    ax,0x317
c0015fac:	75 06                	jne    c0015fb4 <sendKeyboardToken(KeyboardToken)+0x104>
c0015fae:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb7:	66 3d 18 03          	cmp    ax,0x318
c0015fbb:	75 06                	jne    c0015fc3 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fbd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc6:	66 3d 19 03          	cmp    ax,0x319
c0015fca:	75 06                	jne    c0015fd2 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fcc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd5:	66 3d 1a 03          	cmp    ax,0x31a
c0015fd9:	0f 85 c9 00 00 00    	jne    c00160a8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fdf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fe5:	e9 be 00 00 00       	jmp    c00160a8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fed:	66 3d 10 03          	cmp    ax,0x310
c0015ff1:	75 0a                	jne    c0015ffd <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ff3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015ff9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016000:	66 3d 11 03          	cmp    ax,0x311
c0016004:	75 0a                	jne    c0016010 <sendKeyboardToken(KeyboardToken)+0x160>
c0016006:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001600c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016013:	66 3d 12 03          	cmp    ax,0x312
c0016017:	75 0a                	jne    c0016023 <sendKeyboardToken(KeyboardToken)+0x173>
c0016019:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001601f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016026:	66 3d 13 03          	cmp    ax,0x313
c001602a:	75 0a                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x186>
c001602c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 14 03          	cmp    ax,0x314
c001603d:	75 0a                	jne    c0016049 <sendKeyboardToken(KeyboardToken)+0x199>
c001603f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016045:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604c:	66 3d 15 03          	cmp    ax,0x315
c0016050:	75 0a                	jne    c001605c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016052:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016058:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605f:	66 3d 16 03          	cmp    ax,0x316
c0016063:	75 0a                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016065:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001606b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 17 03          	cmp    ax,0x317
c0016076:	75 0a                	jne    c0016082 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016078:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001607e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016085:	66 3d 18 03          	cmp    ax,0x318
c0016089:	75 0a                	jne    c0016095 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001608b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016091:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	66 3d 19 03          	cmp    ax,0x319
c001609c:	75 0a                	jne    c00160a8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001609e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ab:	66 3d 00 02          	cmp    ax,0x200
c00160af:	75 2c                	jne    c00160dd <sendKeyboardToken(KeyboardToken)+0x22d>
c00160b1:	a0 80 ea 02 c0       	mov    al,ds:0xc002ea80
c00160b6:	83 f0 01             	xor    eax,0x1
c00160b9:	84 c0                	test   al,al
c00160bb:	74 20                	je     c00160dd <sendKeyboardToken(KeyboardToken)+0x22d>
c00160bd:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00160c2:	6a 01                	push   0x1
c00160c4:	6a 00                	push   0x0
c00160c6:	68 8c 5d 01 c0       	push   0xc0015d8c
c00160cb:	50                   	push   eax
c00160cc:	e8 77 7e 00 00       	call   c001df48 <Process::createThread(void (*)(void*), void*, int)>
c00160d1:	83 c4 10             	add    esp,0x10
c00160d4:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c00160db:	eb 33                	jmp    c0016110 <sendKeyboardToken(KeyboardToken)+0x260>
c00160dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e0:	66 3d 01 02          	cmp    ax,0x201
c00160e4:	75 2a                	jne    c0016110 <sendKeyboardToken(KeyboardToken)+0x260>
c00160e6:	a0 80 ea 02 c0       	mov    al,ds:0xc002ea80
c00160eb:	83 f0 01             	xor    eax,0x1
c00160ee:	84 c0                	test   al,al
c00160f0:	74 1e                	je     c0016110 <sendKeyboardToken(KeyboardToken)+0x260>
c00160f2:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00160f7:	6a 01                	push   0x1
c00160f9:	6a 00                	push   0x0
c00160fb:	68 e8 5d 01 c0       	push   0xc0015de8
c0016100:	50                   	push   eax
c0016101:	e8 42 7e 00 00       	call   c001df48 <Process::createThread(void (*)(void*), void*, int)>
c0016106:	83 c4 10             	add    esp,0x10
c0016109:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0016110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016113:	66 3d 1d 03          	cmp    ax,0x31d
c0016117:	75 06                	jne    c001611f <sendKeyboardToken(KeyboardToken)+0x26f>
c0016119:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001611f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016122:	66 3d 1c 03          	cmp    ax,0x31c
c0016126:	75 06                	jne    c001612e <sendKeyboardToken(KeyboardToken)+0x27e>
c0016128:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001612e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016131:	66 3d 1b 03          	cmp    ax,0x31b
c0016135:	75 06                	jne    c001613d <sendKeyboardToken(KeyboardToken)+0x28d>
c0016137:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001613d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016140:	66 3d 1e 03          	cmp    ax,0x31e
c0016144:	75 06                	jne    c001614c <sendKeyboardToken(KeyboardToken)+0x29c>
c0016146:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001614c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614f:	66 3d 1f 03          	cmp    ax,0x31f
c0016153:	75 06                	jne    c001615b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016155:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001615b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615e:	66 3d 1a 03          	cmp    ax,0x31a
c0016162:	75 06                	jne    c001616a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016164:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001616a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001616e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016171:	83 f0 01             	xor    eax,0x1
c0016174:	84 c0                	test   al,al
c0016176:	74 77                	je     c00161ef <sendKeyboardToken(KeyboardToken)+0x33f>
c0016178:	a0 81 e7 02 c0       	mov    al,ds:0xc002e781
c001617d:	84 c0                	test   al,al
c001617f:	74 41                	je     c00161c2 <sendKeyboardToken(KeyboardToken)+0x312>
c0016181:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016185:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016189:	74 2b                	je     c00161b6 <sendKeyboardToken(KeyboardToken)+0x306>
c001618b:	8b 15 84 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea84
c0016191:	89 d0                	mov    eax,edx
c0016193:	c1 e0 02             	shl    eax,0x2
c0016196:	01 d0                	add    eax,edx
c0016198:	01 c0                	add    eax,eax
c001619a:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c001619f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a2:	0f b7 c0             	movzx  eax,ax
c00161a5:	8d 50 d0             	lea    edx,[eax-0x30]
c00161a8:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c00161ad:	01 d0                	add    eax,edx
c00161af:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c00161b4:	eb 6d                	jmp    c0016223 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b6:	c7 05 84 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea84,0x0
c00161c0:	eb 61                	jmp    c0016223 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c2:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c00161c7:	85 c0                	test   eax,eax
c00161c9:	74 18                	je     c00161e3 <sendKeyboardToken(KeyboardToken)+0x333>
c00161cb:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c00161d0:	0f b6 c0             	movzx  eax,al
c00161d3:	83 ec 0c             	sub    esp,0xc
c00161d6:	50                   	push   eax
c00161d7:	e8 68 fc ff ff       	call   c0015e44 <sendKeyToTerminal(unsigned char)>
c00161dc:	83 c4 10             	add    esp,0x10
c00161df:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161e3:	c7 05 84 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea84,0x0
c00161ed:	eb 34                	jmp    c0016223 <sendKeyboardToken(KeyboardToken)+0x373>
c00161ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f2:	66 3d 01 01          	cmp    ax,0x101
c00161f6:	75 2b                	jne    c0016223 <sendKeyboardToken(KeyboardToken)+0x373>
c00161f8:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c00161fd:	85 c0                	test   eax,eax
c00161ff:	74 18                	je     c0016219 <sendKeyboardToken(KeyboardToken)+0x369>
c0016201:	a1 84 ea 02 c0       	mov    eax,ds:0xc002ea84
c0016206:	0f b6 c0             	movzx  eax,al
c0016209:	83 ec 0c             	sub    esp,0xc
c001620c:	50                   	push   eax
c001620d:	e8 32 fc ff ff       	call   c0015e44 <sendKeyToTerminal(unsigned char)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016219:	c7 05 84 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea84,0x0
c0016223:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016226:	83 f0 01             	xor    eax,0x1
c0016229:	84 c0                	test   al,al
c001622b:	74 4c                	je     c0016279 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001622d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016230:	83 f0 01             	xor    eax,0x1
c0016233:	84 c0                	test   al,al
c0016235:	74 42                	je     c0016279 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016237:	a0 80 e7 02 c0       	mov    al,ds:0xc002e780
c001623c:	83 f0 01             	xor    eax,0x1
c001623f:	84 c0                	test   al,al
c0016241:	74 36                	je     c0016279 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016246:	66 83 f8 1f          	cmp    ax,0x1f
c001624a:	76 09                	jbe    c0016255 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001624c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624f:	66 83 f8 7e          	cmp    ax,0x7e
c0016253:	76 12                	jbe    c0016267 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016258:	66 83 f8 0a          	cmp    ax,0xa
c001625c:	74 09                	je     c0016267 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001625e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016261:	66 83 f8 08          	cmp    ax,0x8
c0016265:	75 12                	jne    c0016279 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626a:	0f b6 c0             	movzx  eax,al
c001626d:	83 ec 0c             	sub    esp,0xc
c0016270:	50                   	push   eax
c0016271:	e8 ce fb ff ff       	call   c0015e44 <sendKeyToTerminal(unsigned char)>
c0016276:	83 c4 10             	add    esp,0x10
c0016279:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001627c:	83 f0 01             	xor    eax,0x1
c001627f:	84 c0                	test   al,al
c0016281:	74 4f                	je     c00162d2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016283:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016286:	83 f0 01             	xor    eax,0x1
c0016289:	84 c0                	test   al,al
c001628b:	74 45                	je     c00162d2 <sendKeyboardToken(KeyboardToken)+0x422>
c001628d:	a0 80 e7 02 c0       	mov    al,ds:0xc002e780
c0016292:	84 c0                	test   al,al
c0016294:	74 3c                	je     c00162d2 <sendKeyboardToken(KeyboardToken)+0x422>
c0016296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016299:	66 83 f8 3f          	cmp    ax,0x3f
c001629d:	76 33                	jbe    c00162d2 <sendKeyboardToken(KeyboardToken)+0x422>
c001629f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a2:	66 83 f8 7f          	cmp    ax,0x7f
c00162a6:	77 2a                	ja     c00162d2 <sendKeyboardToken(KeyboardToken)+0x422>
c00162a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ab:	88 c2                	mov    dl,al
c00162ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b0:	66 83 f8 5f          	cmp    ax,0x5f
c00162b4:	76 04                	jbe    c00162ba <sendKeyboardToken(KeyboardToken)+0x40a>
c00162b6:	b0 20                	mov    al,0x20
c00162b8:	eb 02                	jmp    c00162bc <sendKeyboardToken(KeyboardToken)+0x40c>
c00162ba:	b0 00                	mov    al,0x0
c00162bc:	29 c2                	sub    edx,eax
c00162be:	88 d0                	mov    al,dl
c00162c0:	83 e8 40             	sub    eax,0x40
c00162c3:	0f b6 c0             	movzx  eax,al
c00162c6:	83 ec 0c             	sub    esp,0xc
c00162c9:	50                   	push   eax
c00162ca:	e8 75 fb ff ff       	call   c0015e44 <sendKeyToTerminal(unsigned char)>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d5:	66 3d 00 03          	cmp    ax,0x300
c00162d9:	75 0f                	jne    c00162ea <sendKeyboardToken(KeyboardToken)+0x43a>
c00162db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162de:	83 f0 01             	xor    eax,0x1
c00162e1:	84 c0                	test   al,al
c00162e3:	74 05                	je     c00162ea <sendKeyboardToken(KeyboardToken)+0x43a>
c00162e5:	e8 bd aa ff ff       	call   c0010da7 <doTerminalCycle()>
c00162ea:	90                   	nop
c00162eb:	c9                   	leave  
c00162ec:	c3                   	ret    

c00162ed <clearInternalKeybuffer(VgaText*)>:
c00162ed:	55                   	push   ebp
c00162ee:	89 e5                	mov    ebp,esp
c00162f0:	83 ec 08             	sub    esp,0x8
c00162f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f6:	05 34 11 00 00       	add    eax,0x1134
c00162fb:	83 ec 0c             	sub    esp,0xc
c00162fe:	50                   	push   eax
c00162ff:	e8 90 a4 fe ff       	call   c0000794 <strlen>
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001630a:	81 c2 34 11 00 00    	add    edx,0x1134
c0016310:	83 ec 04             	sub    esp,0x4
c0016313:	50                   	push   eax
c0016314:	6a 00                	push   0x0
c0016316:	52                   	push   edx
c0016317:	e8 5c a4 fe ff       	call   c0000778 <memset>
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	90                   	nop
c0016320:	c9                   	leave  
c0016321:	c3                   	ret    

c0016322 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016322:	55                   	push   ebp
c0016323:	89 e5                	mov    ebp,esp
c0016325:	83 ec 18             	sub    esp,0x18
c0016328:	fb                   	sti    
c0016329:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016330:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016334:	0f 84 8a 00 00 00    	je     c00163c4 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001633a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016343:	84 c0                	test   al,al
c0016345:	75 11                	jne    c0016358 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016347:	e8 ca 7a 00 00       	call   c001de16 <lockScheduler()>
c001634c:	e8 01 7e 00 00       	call   c001e152 <schedule()>
c0016351:	e8 c2 7a 00 00       	call   c001de18 <unlockScheduler()>
c0016356:	eb e2                	jmp    c001633a <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001635b:	8d 50 01             	lea    edx,[eax+0x1]
c001635e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016361:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016364:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001636a:	88 10                	mov    BYTE PTR [eax],dl
c001636c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001636f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016375:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001637b:	05 34 11 00 00       	add    eax,0x1134
c0016380:	83 ec 0c             	sub    esp,0xc
c0016383:	50                   	push   eax
c0016384:	e8 0b a4 fe ff       	call   c0000794 <strlen>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001638f:	81 c2 34 11 00 00    	add    edx,0x1134
c0016395:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016398:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001639b:	81 c2 34 11 00 00    	add    edx,0x1134
c00163a1:	83 ec 04             	sub    esp,0x4
c00163a4:	50                   	push   eax
c00163a5:	51                   	push   ecx
c00163a6:	52                   	push   edx
c00163a7:	e8 d0 a2 fe ff       	call   c000067c <memmove>
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163b5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163b9:	0f 85 71 ff ff ff    	jne    c0016330 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163c2:	eb 03                	jmp    c00163c7 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163c7:	c9                   	leave  
c00163c8:	c3                   	ret    
c00163c9:	90                   	nop

c00163ca <Keyboard::Keyboard(char const*)>:
c00163ca:	83 ec 0c             	sub    esp,0xc
c00163cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d1:	83 ec 08             	sub    esp,0x8
c00163d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d8:	50                   	push   eax
c00163d9:	e8 ac e1 ff ff       	call   c001458a <Device::Device(char const*)>
c00163de:	83 c4 10             	add    esp,0x10
c00163e1:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c00163e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ea:	89 10                	mov    DWORD PTR [eax],edx
c00163ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163fa:	c6 05 64 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e664,0x1
c0016401:	90                   	nop
c0016402:	83 c4 0c             	add    esp,0xc
c0016405:	c3                   	ret    

c0016406 <Keyboard::~Keyboard()>:
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	ba 24 b2 02 c0       	mov    edx,0xc002b224
c001640e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016412:	89 10                	mov    DWORD PTR [eax],edx
c0016414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016418:	83 ec 0c             	sub    esp,0xc
c001641b:	50                   	push   eax
c001641c:	e8 4b de ff ff       	call   c001426c <Device::~Device()>
c0016421:	83 c4 10             	add    esp,0x10
c0016424:	90                   	nop
c0016425:	83 c4 0c             	add    esp,0xc
c0016428:	c3                   	ret    
c0016429:	90                   	nop

c001642a <Keyboard::~Keyboard()>:
c001642a:	83 ec 0c             	sub    esp,0xc
c001642d:	83 ec 0c             	sub    esp,0xc
c0016430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016434:	e8 cd ff ff ff       	call   c0016406 <Keyboard::~Keyboard()>
c0016439:	83 c4 10             	add    esp,0x10
c001643c:	83 ec 08             	sub    esp,0x8
c001643f:	68 5c 01 00 00       	push   0x15c
c0016444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016448:	e8 47 ca ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	83 c4 0c             	add    esp,0xc
c0016453:	c3                   	ret    

c0016454 <LogicalDisk::close(int, int, void*)>:
c0016454:	83 c8 ff             	or     eax,0xffffffff
c0016457:	c3                   	ret    

c0016458 <LogicalDisk::~LogicalDisk()>:
c0016458:	83 ec 0c             	sub    esp,0xc
c001645b:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0016460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016464:	89 10                	mov    DWORD PTR [eax],edx
c0016466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	50                   	push   eax
c001646e:	e8 f9 dd ff ff       	call   c001426c <Device::~Device()>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	90                   	nop
c0016477:	83 c4 0c             	add    esp,0xc
c001647a:	c3                   	ret    
c001647b:	90                   	nop

c001647c <LogicalDisk::~LogicalDisk()>:
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	83 ec 0c             	sub    esp,0xc
c0016482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016486:	e8 cd ff ff ff       	call   c0016458 <LogicalDisk::~LogicalDisk()>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	83 ec 08             	sub    esp,0x8
c0016491:	68 74 01 00 00       	push   0x174
c0016496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649a:	e8 f5 c9 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	83 c4 0c             	add    esp,0xc
c00164a5:	c3                   	ret    

c00164a6 <LogicalDisk::open(int, int, void*)>:
c00164a6:	83 ec 18             	sub    esp,0x18
c00164a9:	68 50 b2 02 c0       	push   0xc002b250
c00164ae:	e8 6e 41 00 00       	call   c001a621 <Krnl::panic(char const*)>
c00164b3:	83 c8 ff             	or     eax,0xffffffff
c00164b6:	83 c4 1c             	add    esp,0x1c
c00164b9:	c3                   	ret    

c00164ba <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164ba:	53                   	push   ebx
c00164bb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164c7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164cd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164d3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164d9:	77 10                	ja     c00164eb <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164db:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164e1:	89 d3                	mov    ebx,edx
c00164e3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164e9:	72 05                	jb     c00164f0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164eb:	83 c8 ff             	or     eax,0xffffffff
c00164ee:	89 c2                	mov    edx,eax
c00164f0:	5b                   	pop    ebx
c00164f1:	c3                   	ret    

c00164f2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164f2:	56                   	push   esi
c00164f3:	83 c8 ff             	or     eax,0xffffffff
c00164f6:	53                   	push   ebx
c00164f7:	89 c2                	mov    edx,eax
c00164f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164fd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016501:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016505:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001650b:	77 27                	ja     c0016534 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001650d:	89 d8                	mov    eax,ebx
c001650f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016515:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001651b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016520:	89 c2                	mov    edx,eax
c0016522:	73 10                	jae    c0016534 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016524:	89 c8                	mov    eax,ecx
c0016526:	89 da                	mov    edx,ebx
c0016528:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001652e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016534:	5b                   	pop    ebx
c0016535:	5e                   	pop    esi
c0016536:	c3                   	ret    
c0016537:	90                   	nop

c0016538 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016538:	83 ec 1c             	sub    esp,0x1c
c001653b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001653f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016543:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016547:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001654b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001654f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016552:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016556:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001655a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655e:	83 ec 08             	sub    esp,0x8
c0016561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016565:	50                   	push   eax
c0016566:	e8 1f e0 ff ff       	call   c001458a <Device::Device(char const*)>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	ba d4 b2 02 c0       	mov    edx,0xc002b2d4
c0016573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016577:	89 10                	mov    DWORD PTR [eax],edx
c0016579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016588:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001658f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016593:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001659d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165a9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165af:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165c0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165c6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165d4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165de:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165e8:	90                   	nop
c00165e9:	83 c4 1c             	add    esp,0x1c
c00165ec:	c3                   	ret    
c00165ed:	90                   	nop

c00165ee <LogicalDisk::assignDriveLetter()>:
c00165ee:	55                   	push   ebp
c00165ef:	57                   	push   edi
c00165f0:	56                   	push   esi
c00165f1:	53                   	push   ebx
c00165f2:	83 ec 14             	sub    esp,0x14
c00165f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165f9:	8b 3d a0 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaa0
c00165ff:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016605:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016609:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001660f:	8b 3d a4 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002eaa4
c0016615:	3c 01                	cmp    al,0x1
c0016617:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001661b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001661f:	19 c0                	sbb    eax,eax
c0016621:	83 e0 02             	and    eax,0x2
c0016624:	83 c0 41             	add    eax,0x41
c0016627:	0f be e8             	movsx  ebp,al
c001662a:	3c 43                	cmp    al,0x43
c001662c:	75 10                	jne    c001663e <LogicalDisk::assignDriveLetter()+0x50>
c001662e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016635:	75 5d                	jne    c0016694 <LogicalDisk::assignDriveLetter()+0xa6>
c0016637:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001663c:	75 56                	jne    c0016694 <LogicalDisk::assignDriveLetter()+0xa6>
c001663e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016641:	ba 01 00 00 00       	mov    edx,0x1
c0016646:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001664a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001664e:	d3 e2                	shl    edx,cl
c0016650:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016654:	89 d7                	mov    edi,edx
c0016656:	89 d6                	mov    esi,edx
c0016658:	c1 ff 1f             	sar    edi,0x1f
c001665b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001665f:	21 f9                	and    ecx,edi
c0016661:	09 d1                	or     ecx,edx
c0016663:	75 2f                	jne    c0016694 <LogicalDisk::assignDriveLetter()+0xa6>
c0016665:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016669:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001666d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016673:	09 f2                	or     edx,esi
c0016675:	89 15 a0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa0,edx
c001667b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001667f:	09 fa                	or     edx,edi
c0016681:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016685:	89 15 a4 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa4,edx
c001668b:	89 1c bd c0 ea 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1540],ebx
c0016692:	eb 08                	jmp    c001669c <LogicalDisk::assignDriveLetter()+0xae>
c0016694:	45                   	inc    ebp
c0016695:	40                   	inc    eax
c0016696:	3c 5b                	cmp    al,0x5b
c0016698:	75 90                	jne    c001662a <LogicalDisk::assignDriveLetter()+0x3c>
c001669a:	31 c0                	xor    eax,eax
c001669c:	83 c4 14             	add    esp,0x14
c001669f:	5b                   	pop    ebx
c00166a0:	5e                   	pop    esi
c00166a1:	5f                   	pop    edi
c00166a2:	5d                   	pop    ebp
c00166a3:	c3                   	ret    

c00166a4 <LogicalDisk::mount()>:
c00166a4:	56                   	push   esi
c00166a5:	53                   	push   ebx
c00166a6:	51                   	push   ecx
c00166a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166ab:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c00166b1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166bb:	85 db                	test   ebx,ebx
c00166bd:	74 50                	je     c001670f <LogicalDisk::mount()+0x6b>
c00166bf:	e8 3d 77 00 00       	call   c001de01 <getIRQNestingLevel()>
c00166c4:	52                   	push   edx
c00166c5:	52                   	push   edx
c00166c6:	50                   	push   eax
c00166c7:	68 74 b2 02 c0       	push   0xc002b274
c00166cc:	e8 a3 c8 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00166d1:	83 c4 0c             	add    esp,0xc
c00166d4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166dd:	83 e8 41             	sub    eax,0x41
c00166e0:	50                   	push   eax
c00166e1:	56                   	push   esi
c00166e2:	53                   	push   ebx
c00166e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166e6:	83 c4 10             	add    esp,0x10
c00166e9:	84 c0                	test   al,al
c00166eb:	74 08                	je     c00166f5 <LogicalDisk::mount()+0x51>
c00166ed:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166f3:	eb 1c                	jmp    c0016711 <LogicalDisk::mount()+0x6d>
c00166f5:	e8 07 77 00 00       	call   c001de01 <getIRQNestingLevel()>
c00166fa:	51                   	push   ecx
c00166fb:	51                   	push   ecx
c00166fc:	50                   	push   eax
c00166fd:	68 8f b2 02 c0       	push   0xc002b28f
c0016702:	e8 6d c8 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0016707:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001670a:	83 c4 10             	add    esp,0x10
c001670d:	eb ac                	jmp    c00166bb <LogicalDisk::mount()+0x17>
c001670f:	31 c0                	xor    eax,eax
c0016711:	5a                   	pop    edx
c0016712:	5b                   	pop    ebx
c0016713:	5e                   	pop    esi
c0016714:	c3                   	ret    
c0016715:	90                   	nop

c0016716 <LogicalDisk::unmount()>:
c0016716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001671a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016724:	c3                   	ret    
c0016725:	90                   	nop

c0016726 <LogicalDisk::eject()>:
c0016726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001672a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016730:	8b 10                	mov    edx,DWORD PTR [eax]
c0016732:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016736:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016739:	90                   	nop

c001673a <LogicalDisk::unassignDriveLetter()>:
c001673a:	57                   	push   edi
c001673b:	56                   	push   esi
c001673c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016740:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016747:	84 c9                	test   cl,cl
c0016749:	75 0f                	jne    c001675a <LogicalDisk::unassignDriveLetter()+0x20>
c001674b:	c7 44 24 0c aa b2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b2aa
c0016753:	5e                   	pop    esi
c0016754:	5f                   	pop    edi
c0016755:	e9 c7 3e 00 00       	jmp    c001a621 <Krnl::panic(char const*)>
c001675a:	83 e9 41             	sub    ecx,0x41
c001675d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016764:	b8 01 00 00 00       	mov    eax,0x1
c0016769:	c7 04 8d c0 ea 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1540],0x0
c0016774:	d3 e0                	shl    eax,cl
c0016776:	89 c7                	mov    edi,eax
c0016778:	f7 d0                	not    eax
c001677a:	c1 ff 1f             	sar    edi,0x1f
c001677d:	21 05 a0 ea 02 c0    	and    DWORD PTR ds:0xc002eaa0,eax
c0016783:	89 fe                	mov    esi,edi
c0016785:	f7 d6                	not    esi
c0016787:	21 35 a4 ea 02 c0    	and    DWORD PTR ds:0xc002eaa4,esi
c001678d:	5e                   	pop    esi
c001678e:	5f                   	pop    edi
c001678f:	c3                   	ret    

c0016790 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016790:	57                   	push   edi
c0016791:	56                   	push   esi
c0016792:	53                   	push   ebx
c0016793:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016797:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001679b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001679f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167a9:	77 41                	ja     c00167ec <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167ab:	99                   	cdq    
c00167ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167b2:	01 c8                	add    eax,ecx
c00167b4:	11 da                	adc    edx,ebx
c00167b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167bc:	19 d7                	sbb    edi,edx
c00167be:	72 33                	jb     c00167f3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167e4:	5b                   	pop    ebx
c00167e5:	5e                   	pop    esi
c00167e6:	5f                   	pop    edi
c00167e7:	e9 b0 0a 00 00       	jmp    c001729c <VCache::read(unsigned long long, int, void*)>
c00167ec:	b8 05 00 00 00       	mov    eax,0x5
c00167f1:	eb 05                	jmp    c00167f8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167f3:	b8 07 00 00 00       	mov    eax,0x7
c00167f8:	5b                   	pop    ebx
c00167f9:	5e                   	pop    esi
c00167fa:	5f                   	pop    edi
c00167fb:	c3                   	ret    

c00167fc <LogicalDisk::write(unsigned long long, int, void*)>:
c00167fc:	57                   	push   edi
c00167fd:	56                   	push   esi
c00167fe:	53                   	push   ebx
c00167ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016807:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001680b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001680f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016815:	77 41                	ja     c0016858 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016817:	99                   	cdq    
c0016818:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001681e:	01 c8                	add    eax,ecx
c0016820:	11 da                	adc    edx,ebx
c0016822:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016828:	19 d7                	sbb    edi,edx
c001682a:	72 33                	jb     c001685f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001682c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016832:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016838:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001683c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016840:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016846:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001684c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016850:	5b                   	pop    ebx
c0016851:	5e                   	pop    esi
c0016852:	5f                   	pop    edi
c0016853:	e9 4e 09 00 00       	jmp    c00171a6 <VCache::write(unsigned long long, int, void*)>
c0016858:	b8 05 00 00 00       	mov    eax,0x5
c001685d:	eb 05                	jmp    c0016864 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001685f:	b8 07 00 00 00       	mov    eax,0x7
c0016864:	5b                   	pop    ebx
c0016865:	5e                   	pop    esi
c0016866:	5f                   	pop    edi
c0016867:	c3                   	ret    

c0016868 <Mouse::Mouse(char const*)>:
c0016868:	83 ec 0c             	sub    esp,0xc
c001686b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686f:	83 ec 08             	sub    esp,0x8
c0016872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016876:	50                   	push   eax
c0016877:	e8 0e dd ff ff       	call   c001458a <Device::Device(char const*)>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	ba 00 b3 02 c0       	mov    edx,0xc002b300
c0016884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016888:	89 10                	mov    DWORD PTR [eax],edx
c001688a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016898:	90                   	nop
c0016899:	83 c4 0c             	add    esp,0xc
c001689c:	c3                   	ret    
c001689d:	90                   	nop

c001689e <Mouse::~Mouse()>:
c001689e:	83 ec 0c             	sub    esp,0xc
c00168a1:	ba 00 b3 02 c0       	mov    edx,0xc002b300
c00168a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168aa:	89 10                	mov    DWORD PTR [eax],edx
c00168ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b0:	83 ec 0c             	sub    esp,0xc
c00168b3:	50                   	push   eax
c00168b4:	e8 b3 d9 ff ff       	call   c001426c <Device::~Device()>
c00168b9:	83 c4 10             	add    esp,0x10
c00168bc:	90                   	nop
c00168bd:	83 c4 0c             	add    esp,0xc
c00168c0:	c3                   	ret    
c00168c1:	90                   	nop

c00168c2 <Mouse::~Mouse()>:
c00168c2:	83 ec 0c             	sub    esp,0xc
c00168c5:	83 ec 0c             	sub    esp,0xc
c00168c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168cc:	e8 cd ff ff ff       	call   c001689e <Mouse::~Mouse()>
c00168d1:	83 c4 10             	add    esp,0x10
c00168d4:	83 ec 08             	sub    esp,0x8
c00168d7:	68 58 01 00 00       	push   0x158
c00168dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e0:	e8 af c5 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	83 c4 0c             	add    esp,0xc
c00168eb:	c3                   	ret    

c00168ec <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168ec:	55                   	push   ebp
c00168ed:	57                   	push   edi
c00168ee:	56                   	push   esi
c00168ef:	53                   	push   ebx
c00168f0:	81 ec 28 01 00 00    	sub    esp,0x128
c00168f6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168fd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016904:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001690b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016912:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016916:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001691a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016921:	e8 60 dd ff ff       	call   c0014686 <Device::getName()>
c0016926:	5a                   	pop    edx
c0016927:	59                   	pop    ecx
c0016928:	50                   	push   eax
c0016929:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001692d:	55                   	push   ebp
c001692e:	e8 01 9f fe ff       	call   c0000834 <strcpy>
c0016933:	5b                   	pop    ebx
c0016934:	58                   	pop    eax
c0016935:	68 24 b3 02 c0       	push   0xc002b324
c001693a:	55                   	push   ebp
c001693b:	e8 34 a0 fe ff       	call   c0000974 <strcat>
c0016940:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016947:	e8 f7 8e ff ff       	call   c000f843 <malloc>
c001694c:	83 c4 0c             	add    esp,0xc
c001694f:	89 c3                	mov    ebx,eax
c0016951:	57                   	push   edi
c0016952:	56                   	push   esi
c0016953:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001695b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016962:	55                   	push   ebp
c0016963:	50                   	push   eax
c0016964:	e8 cf fb ff ff       	call   c0016538 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016969:	83 c4 14             	add    esp,0x14
c001696c:	53                   	push   ebx
c001696d:	e8 7c fc ff ff       	call   c00165ee <LogicalDisk::assignDriveLetter()>
c0016972:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016975:	89 c6                	mov    esi,eax
c0016977:	e8 28 fd ff ff       	call   c00166a4 <LogicalDisk::mount()>
c001697c:	58                   	pop    eax
c001697d:	5a                   	pop    edx
c001697e:	53                   	push   ebx
c001697f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016986:	e8 0f da ff ff       	call   c001439a <Device::addChild(Device*)>
c001698b:	59                   	pop    ecx
c001698c:	89 f0                	mov    eax,esi
c001698e:	5b                   	pop    ebx
c001698f:	0f be f0             	movsx  esi,al
c0016992:	56                   	push   esi
c0016993:	68 2f b3 02 c0       	push   0xc002b32f
c0016998:	e8 d7 c5 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001699d:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169a3:	5b                   	pop    ebx
c00169a4:	5e                   	pop    esi
c00169a5:	5f                   	pop    edi
c00169a6:	5d                   	pop    ebp
c00169a7:	c3                   	ret    

c00169a8 <createPartitionsForDisk(PhysicalDisk*)>:
c00169a8:	55                   	push   ebp
c00169a9:	57                   	push   edi
c00169aa:	56                   	push   esi
c00169ab:	53                   	push   ebx
c00169ac:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169b2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169bf:	3d 00 02 00 00       	cmp    eax,0x200
c00169c4:	74 27                	je     c00169ed <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169c6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169cc:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169d2:	83 ec 10             	sub    esp,0x10
c00169d5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169d9:	99                   	cdq    
c00169da:	c1 e6 0a             	shl    esi,0xa
c00169dd:	52                   	push   edx
c00169de:	89 fd                	mov    ebp,edi
c00169e0:	50                   	push   eax
c00169e1:	55                   	push   ebp
c00169e2:	56                   	push   esi
c00169e3:	e8 04 00 01 00       	call   c00269ec <__udivdi3>
c00169e8:	e9 b1 00 00 00       	jmp    c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169ed:	83 ec 0c             	sub    esp,0xc
c00169f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169f2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169f6:	56                   	push   esi
c00169f7:	6a 01                	push   0x1
c00169f9:	6a 00                	push   0x0
c00169fb:	6a 00                	push   0x0
c00169fd:	53                   	push   ebx
c00169fe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a01:	83 c4 20             	add    esp,0x20
c0016a04:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a0c:	75 0a                	jne    c0016a18 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a0e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a16:	74 2c                	je     c0016a44 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a18:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a1e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a24:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a2a:	83 ec 10             	sub    esp,0x10
c0016a2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a31:	89 f7                	mov    edi,esi
c0016a33:	c1 e0 0a             	shl    eax,0xa
c0016a36:	c1 ff 1f             	sar    edi,0x1f
c0016a39:	57                   	push   edi
c0016a3a:	56                   	push   esi
c0016a3b:	52                   	push   edx
c0016a3c:	50                   	push   eax
c0016a3d:	e8 aa ff 00 00       	call   c00269ec <__udivdi3>
c0016a42:	eb 5a                	jmp    c0016a9e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a44:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a4b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a52:	83 e1 7f             	and    ecx,0x7f
c0016a55:	83 e0 7f             	and    eax,0x7f
c0016a58:	01 c1                	add    ecx,eax
c0016a5a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a61:	83 e0 7f             	and    eax,0x7f
c0016a64:	01 c1                	add    ecx,eax
c0016a66:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a6d:	83 e0 7f             	and    eax,0x7f
c0016a70:	00 c1                	add    cl,al
c0016a72:	74 41                	je     c0016ab5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a74:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a7a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a80:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a86:	83 ec 10             	sub    esp,0x10
c0016a89:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a8d:	89 f7                	mov    edi,esi
c0016a8f:	c1 e0 0a             	shl    eax,0xa
c0016a92:	c1 ff 1f             	sar    edi,0x1f
c0016a95:	57                   	push   edi
c0016a96:	56                   	push   esi
c0016a97:	52                   	push   edx
c0016a98:	50                   	push   eax
c0016a99:	e8 4e ff 00 00       	call   c00269ec <__udivdi3>
c0016a9e:	83 c4 14             	add    esp,0x14
c0016aa1:	52                   	push   edx
c0016aa2:	50                   	push   eax
c0016aa3:	6a 00                	push   0x0
c0016aa5:	6a 00                	push   0x0
c0016aa7:	53                   	push   ebx
c0016aa8:	e8 3f fe ff ff       	call   c00168ec <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016aad:	83 c4 20             	add    esp,0x20
c0016ab0:	e9 79 01 00 00       	jmp    c0016c2e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016ab5:	89 f0                	mov    eax,esi
c0016ab7:	31 f6                	xor    esi,esi
c0016ab9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016ac0:	75 02                	jne    c0016ac4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016ac2:	89 f1                	mov    ecx,esi
c0016ac4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016acb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ad2:	c1 e2 08             	shl    edx,0x8
c0016ad5:	c1 e7 10             	shl    edi,0x10
c0016ad8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ae0:	09 fa                	or     edx,edi
c0016ae2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016aea:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016af1:	83 c0 10             	add    eax,0x10
c0016af4:	09 fa                	or     edx,edi
c0016af6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016afd:	c1 e7 18             	shl    edi,0x18
c0016b00:	09 fa                	or     edx,edi
c0016b02:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b09:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b0d:	c1 e7 10             	shl    edi,0x10
c0016b10:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b17:	c1 e2 08             	shl    edx,0x8
c0016b1a:	09 fa                	or     edx,edi
c0016b1c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b23:	09 fa                	or     edx,edi
c0016b25:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b2c:	c1 e7 18             	shl    edi,0x18
c0016b2f:	09 fa                	or     edx,edi
c0016b31:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b35:	46                   	inc    esi
c0016b36:	83 fe 04             	cmp    esi,0x4
c0016b39:	0f 85 7a ff ff ff    	jne    c0016ab9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b43:	83 f0 01             	xor    eax,0x1
c0016b46:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b4a:	75 57                	jne    c0016ba3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b50:	83 f0 01             	xor    eax,0x1
c0016b53:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b57:	75 4a                	jne    c0016ba3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b59:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b65:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b6d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b73:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b79:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b7f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b83:	89 f7                	mov    edi,esi
c0016b85:	c1 e0 0a             	shl    eax,0xa
c0016b88:	c1 ff 1f             	sar    edi,0x1f
c0016b8b:	57                   	push   edi
c0016b8c:	56                   	push   esi
c0016b8d:	52                   	push   edx
c0016b8e:	50                   	push   eax
c0016b8f:	e8 58 fe 00 00       	call   c00269ec <__udivdi3>
c0016b94:	83 c4 10             	add    esp,0x10
c0016b97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b9b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016b9f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016ba3:	84 c9                	test   cl,cl
c0016ba5:	74 53                	je     c0016bfa <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016ba7:	0f b6 c9             	movzx  ecx,cl
c0016baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bb2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bb6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bc2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bc6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bda:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016bde:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016be2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016be6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bee:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bf2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bf6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bfa:	31 ed                	xor    ebp,ebp
c0016bfc:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c00:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c04:	89 f8                	mov    eax,edi
c0016c06:	09 f0                	or     eax,esi
c0016c08:	74 1e                	je     c0016c28 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c0a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c0e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c12:	89 d1                	mov    ecx,edx
c0016c14:	09 c1                	or     ecx,eax
c0016c16:	74 10                	je     c0016c28 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	57                   	push   edi
c0016c1c:	56                   	push   esi
c0016c1d:	52                   	push   edx
c0016c1e:	50                   	push   eax
c0016c1f:	53                   	push   ebx
c0016c20:	e8 c7 fc ff ff       	call   c00168ec <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c25:	83 c4 20             	add    esp,0x20
c0016c28:	45                   	inc    ebp
c0016c29:	83 fd 04             	cmp    ebp,0x4
c0016c2c:	75 ce                	jne    c0016bfc <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c2e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c34:	5b                   	pop    ebx
c0016c35:	5e                   	pop    esi
c0016c36:	5f                   	pop    edi
c0016c37:	5d                   	pop    ebp
c0016c38:	c3                   	ret    
c0016c39:	90                   	nop

c0016c3a <Serial::Serial(char const*)>:
c0016c3a:	83 ec 0c             	sub    esp,0xc
c0016c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c41:	83 ec 08             	sub    esp,0x8
c0016c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c48:	50                   	push   eax
c0016c49:	e8 3c d9 ff ff       	call   c001458a <Device::Device(char const*)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	ba 5c b3 02 c0       	mov    edx,0xc002b35c
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	89 10                	mov    DWORD PTR [eax],edx
c0016c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c60:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c6a:	90                   	nop
c0016c6b:	83 c4 0c             	add    esp,0xc
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Serial::~Serial()>:
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	ba 5c b3 02 c0       	mov    edx,0xc002b35c
c0016c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7c:	89 10                	mov    DWORD PTR [eax],edx
c0016c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c82:	83 ec 0c             	sub    esp,0xc
c0016c85:	50                   	push   eax
c0016c86:	e8 e1 d5 ff ff       	call   c001426c <Device::~Device()>
c0016c8b:	83 c4 10             	add    esp,0x10
c0016c8e:	90                   	nop
c0016c8f:	83 c4 0c             	add    esp,0xc
c0016c92:	c3                   	ret    
c0016c93:	90                   	nop

c0016c94 <Serial::~Serial()>:
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	83 ec 0c             	sub    esp,0xc
c0016c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9e:	e8 cd ff ff ff       	call   c0016c70 <Serial::~Serial()>
c0016ca3:	83 c4 10             	add    esp,0x10
c0016ca6:	83 ec 08             	sub    esp,0x8
c0016ca9:	68 58 01 00 00       	push   0x158
c0016cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb2:	e8 dd c1 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0016cb7:	83 c4 10             	add    esp,0x10
c0016cba:	83 c4 0c             	add    esp,0xc
c0016cbd:	c3                   	ret    

c0016cbe <Timer::Timer(char const*)>:
c0016cbe:	83 ec 0c             	sub    esp,0xc
c0016cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc5:	83 ec 08             	sub    esp,0x8
c0016cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ccc:	50                   	push   eax
c0016ccd:	e8 b8 d8 ff ff       	call   c001458a <Device::Device(char const*)>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	ba a0 b3 02 c0       	mov    edx,0xc002b3a0
c0016cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cde:	89 10                	mov    DWORD PTR [eax],edx
c0016ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cee:	90                   	nop
c0016cef:	83 c4 0c             	add    esp,0xc
c0016cf2:	c3                   	ret    
c0016cf3:	90                   	nop

c0016cf4 <Timer::~Timer()>:
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	ba a0 b3 02 c0       	mov    edx,0xc002b3a0
c0016cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d00:	89 10                	mov    DWORD PTR [eax],edx
c0016d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d06:	83 ec 0c             	sub    esp,0xc
c0016d09:	50                   	push   eax
c0016d0a:	e8 5d d5 ff ff       	call   c001426c <Device::~Device()>
c0016d0f:	83 c4 10             	add    esp,0x10
c0016d12:	90                   	nop
c0016d13:	83 c4 0c             	add    esp,0xc
c0016d16:	c3                   	ret    
c0016d17:	90                   	nop

c0016d18 <Timer::~Timer()>:
c0016d18:	83 ec 0c             	sub    esp,0xc
c0016d1b:	83 ec 0c             	sub    esp,0xc
c0016d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d22:	e8 cd ff ff ff       	call   c0016cf4 <Timer::~Timer()>
c0016d27:	83 c4 10             	add    esp,0x10
c0016d2a:	83 ec 08             	sub    esp,0x8
c0016d2d:	68 5c 01 00 00       	push   0x15c
c0016d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d36:	e8 59 c1 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	83 c4 0c             	add    esp,0xc
c0016d41:	c3                   	ret    

c0016d42 <Timer::read()>:
c0016d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d4c:	c3                   	ret    

c0016d4d <timerHandler(unsigned long long)>:
c0016d4d:	55                   	push   ebp
c0016d4e:	57                   	push   edi
c0016d4f:	56                   	push   esi
c0016d50:	53                   	push   ebx
c0016d51:	83 ec 0c             	sub    esp,0xc
c0016d54:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d58:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d5c:	01 35 30 eb 02 c0    	add    DWORD PTR ds:0xc002eb30,esi
c0016d62:	11 3d 34 eb 02 c0    	adc    DWORD PTR ds:0xc002eb34,edi
c0016d68:	80 3d ad e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4ad,0x0
c0016d6f:	0f 84 07 01 00 00    	je     c0016e7c <timerHandler(unsigned long long)+0x12f>
c0016d75:	e8 c3 70 00 00       	call   c001de3d <lockStuff()>
c0016d7a:	83 ec 0c             	sub    esp,0xc
c0016d7d:	68 fc 19 03 c0       	push   0xc00319fc
c0016d82:	e8 d7 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d87:	c7 04 24 fc 19 03 c0 	mov    DWORD PTR [esp],0xc00319fc
c0016d8e:	89 c3                	mov    ebx,eax
c0016d90:	e8 d1 1c 01 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d95:	83 c4 10             	add    esp,0x10
c0016d98:	84 c0                	test   al,al
c0016d9a:	74 60                	je     c0016dfc <timerHandler(unsigned long long)+0xaf>
c0016d9c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016da2:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016da5:	85 c0                	test   eax,eax
c0016da7:	0f 85 91 00 00 00    	jne    c0016e3e <timerHandler(unsigned long long)+0xf1>
c0016dad:	e9 be 00 00 00       	jmp    c0016e70 <timerHandler(unsigned long long)+0x123>
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	55                   	push   ebp
c0016db6:	e8 73 76 00 00       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	39 eb                	cmp    ebx,ebp
c0016dc0:	75 12                	jne    c0016dd4 <timerHandler(unsigned long long)+0x87>
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 fc 19 03 c0       	push   0xc00319fc
c0016dca:	e8 8f 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dcf:	89 c3                	mov    ebx,eax
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	83 ec 0c             	sub    esp,0xc
c0016dd7:	68 fc 19 03 c0       	push   0xc00319fc
c0016ddc:	e8 85 1c 01 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de1:	83 c4 10             	add    esp,0x10
c0016de4:	84 c0                	test   al,al
c0016de6:	75 b4                	jne    c0016d9c <timerHandler(unsigned long long)+0x4f>
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	68 fc 19 03 c0       	push   0xc00319fc
c0016df0:	e8 69 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df5:	83 c4 10             	add    esp,0x10
c0016df8:	39 d8                	cmp    eax,ebx
c0016dfa:	74 a0                	je     c0016d9c <timerHandler(unsigned long long)+0x4f>
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	68 fc 19 03 c0       	push   0xc00319fc
c0016e04:	e8 55 1c 01 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e09:	c7 04 24 fc 19 03 c0 	mov    DWORD PTR [esp],0xc00319fc
c0016e10:	89 c5                	mov    ebp,eax
c0016e12:	e8 6b 1c 01 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e17:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e1a:	83 c4 10             	add    esp,0x10
c0016e1d:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e20:	39 15 30 eb 02 c0    	cmp    DWORD PTR ds:0xc002eb30,edx
c0016e26:	a1 34 eb 02 c0       	mov    eax,ds:0xc002eb34
c0016e2b:	19 c8                	sbb    eax,ecx
c0016e2d:	73 83                	jae    c0016db2 <timerHandler(unsigned long long)+0x65>
c0016e2f:	50                   	push   eax
c0016e30:	50                   	push   eax
c0016e31:	55                   	push   ebp
c0016e32:	68 fc 19 03 c0       	push   0xc00319fc
c0016e37:	e8 f4 1c 01 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e3c:	eb 93                	jmp    c0016dd1 <timerHandler(unsigned long long)+0x84>
c0016e3e:	80 3d ac e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e4ac,0x0
c0016e45:	74 29                	je     c0016e70 <timerHandler(unsigned long long)+0x123>
c0016e47:	39 c6                	cmp    esi,eax
c0016e49:	bb 00 00 00 00       	mov    ebx,0x0
c0016e4e:	19 df                	sbb    edi,ebx
c0016e50:	72 19                	jb     c0016e6b <timerHandler(unsigned long long)+0x11e>
c0016e52:	e8 bf 6f 00 00       	call   c001de16 <lockScheduler()>
c0016e57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e5f:	e8 ee 72 00 00       	call   c001e152 <schedule()>
c0016e64:	e8 af 6f 00 00       	call   c001de18 <unlockScheduler()>
c0016e69:	eb 05                	jmp    c0016e70 <timerHandler(unsigned long long)+0x123>
c0016e6b:	29 f0                	sub    eax,esi
c0016e6d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e70:	83 c4 0c             	add    esp,0xc
c0016e73:	5b                   	pop    ebx
c0016e74:	5e                   	pop    esi
c0016e75:	5f                   	pop    edi
c0016e76:	5d                   	pop    ebp
c0016e77:	e9 5b 73 00 00       	jmp    c001e1d7 <unlockStuff()>
c0016e7c:	83 c4 0c             	add    esp,0xc
c0016e7f:	5b                   	pop    ebx
c0016e80:	5e                   	pop    esi
c0016e81:	5f                   	pop    edi
c0016e82:	5d                   	pop    ebp
c0016e83:	c3                   	ret    

c0016e84 <setupTimer(int)>:
c0016e84:	57                   	push   edi
c0016e85:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0016e8a:	56                   	push   esi
c0016e8b:	53                   	push   ebx
c0016e8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e96:	83 ec 0c             	sub    esp,0xc
c0016e99:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016e9f:	e8 e2 d7 ff ff       	call   c0014686 <Device::getName()>
c0016ea4:	83 c4 10             	add    esp,0x10
c0016ea7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016eaa:	0f 85 8d 00 00 00    	jne    c0016f3d <setupTimer(int)+0xb9>
c0016eb0:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0016eb5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ebc:	74 7f                	je     c0016f3d <setupTimer(int)+0xb9>
c0016ebe:	83 ec 0c             	sub    esp,0xc
c0016ec1:	68 5c 01 00 00       	push   0x15c
c0016ec6:	e8 78 89 ff ff       	call   c000f843 <malloc>
c0016ecb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ece:	89 c3                	mov    ebx,eax
c0016ed0:	e8 fb f6 00 00       	call   c00265d0 <PIT::PIT()>
c0016ed5:	59                   	pop    ecx
c0016ed6:	5f                   	pop    edi
c0016ed7:	53                   	push   ebx
c0016ed8:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c0016ede:	e8 b7 d4 ff ff       	call   c001439a <Device::addChild(Device*)>
c0016ee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ee5:	6a 00                	push   0x0
c0016ee7:	6a 00                	push   0x0
c0016ee9:	56                   	push   esi
c0016eea:	53                   	push   ebx
c0016eeb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016eee:	83 c4 14             	add    esp,0x14
c0016ef1:	68 60 01 00 00       	push   0x160
c0016ef6:	e8 48 89 ff ff       	call   c000f843 <malloc>
c0016efb:	89 04 24             	mov    DWORD PTR [esp],eax
c0016efe:	89 c7                	mov    edi,eax
c0016f00:	e8 7b f5 00 00       	call   c0026480 <APICTimer::APICTimer()>
c0016f05:	6a 00                	push   0x0
c0016f07:	6a 00                	push   0x0
c0016f09:	56                   	push   esi
c0016f0a:	57                   	push   edi
c0016f0b:	e8 72 f4 00 00       	call   c0026382 <APICTimer::open(int, int, void*)>
c0016f10:	83 c4 20             	add    esp,0x20
c0016f13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f15:	6a 00                	push   0x0
c0016f17:	6a 00                	push   0x0
c0016f19:	6a 00                	push   0x0
c0016f1b:	53                   	push   ebx
c0016f1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f1f:	58                   	pop    eax
c0016f20:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0016f25:	5a                   	pop    edx
c0016f26:	57                   	push   edi
c0016f27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f2d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f33:	e8 62 d4 ff ff       	call   c001439a <Device::addChild(Device*)>
c0016f38:	83 c4 10             	add    esp,0x10
c0016f3b:	eb 33                	jmp    c0016f70 <setupTimer(int)+0xec>
c0016f3d:	83 ec 0c             	sub    esp,0xc
c0016f40:	68 5c 01 00 00       	push   0x15c
c0016f45:	e8 f9 88 ff ff       	call   c000f843 <malloc>
c0016f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f4d:	89 c3                	mov    ebx,eax
c0016f4f:	e8 7c f6 00 00       	call   c00265d0 <PIT::PIT()>
c0016f54:	58                   	pop    eax
c0016f55:	5a                   	pop    edx
c0016f56:	53                   	push   ebx
c0016f57:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c0016f5d:	e8 38 d4 ff ff       	call   c001439a <Device::addChild(Device*)>
c0016f62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f64:	6a 00                	push   0x0
c0016f66:	6a 00                	push   0x0
c0016f68:	56                   	push   esi
c0016f69:	53                   	push   ebx
c0016f6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f6d:	83 c4 20             	add    esp,0x20
c0016f70:	89 d8                	mov    eax,ebx
c0016f72:	5b                   	pop    ebx
c0016f73:	5e                   	pop    esi
c0016f74:	5f                   	pop    edi
c0016f75:	c3                   	ret    

c0016f76 <VCache::VCache(PhysicalDisk*)>:
c0016f76:	53                   	push   ebx
c0016f77:	83 ec 18             	sub    esp,0x18
c0016f7a:	ba d0 b3 02 c0       	mov    edx,0xc002b3d0
c0016f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f83:	89 10                	mov    DWORD PTR [eax],edx
c0016f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f89:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f94:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fa6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016fad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fb8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fce:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fdd:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017000:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017007:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001700f:	83 ec 0c             	sub    esp,0xc
c0017012:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017016:	e8 28 88 ff ff       	call   c000f843 <malloc>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	89 c3                	mov    ebx,eax
c0017020:	83 ec 0c             	sub    esp,0xc
c0017023:	53                   	push   ebx
c0017024:	e8 0d 6f 00 00       	call   c001df36 <Mutex::Mutex()>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017030:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017037:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001703b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001703e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017042:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0017049:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001704d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017057:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001705a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001705e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017064:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001706a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001706e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017071:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017078:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001707c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017080:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017086:	05 00 01 00 00       	add    eax,0x100
c001708b:	c1 e0 04             	shl    eax,0x4
c001708e:	83 ec 0c             	sub    esp,0xc
c0017091:	50                   	push   eax
c0017092:	e8 ac 87 ff ff       	call   c000f843 <malloc>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	89 c2                	mov    edx,eax
c001709c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a7:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170c0:	c1 e0 07             	shl    eax,0x7
c00170c3:	83 ec 0c             	sub    esp,0xc
c00170c6:	50                   	push   eax
c00170c7:	e8 77 87 ff ff       	call   c000f843 <malloc>
c00170cc:	83 c4 10             	add    esp,0x10
c00170cf:	89 c2                	mov    edx,eax
c00170d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d5:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170d8:	90                   	nop
c00170d9:	83 c4 18             	add    esp,0x18
c00170dc:	5b                   	pop    ebx
c00170dd:	c3                   	ret    

c00170de <VCache::invalidateReadBuffer()>:
c00170de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e2:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170e8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170ec:	c3                   	ret    
c00170ed:	90                   	nop

c00170ee <VCache::writeWriteBuffer()>:
c00170ee:	53                   	push   ebx
c00170ef:	83 ec 14             	sub    esp,0x14
c00170f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00170fb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017101:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017104:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017107:	50                   	push   eax
c0017108:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001710b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017112:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017119:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001711d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017124:	83 c4 28             	add    esp,0x28
c0017127:	5b                   	pop    ebx
c0017128:	c3                   	ret    
c0017129:	90                   	nop

c001712a <VCache::~VCache()>:
c001712a:	83 ec 0c             	sub    esp,0xc
c001712d:	ba d0 b3 02 c0       	mov    edx,0xc002b3d0
c0017132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017136:	89 10                	mov    DWORD PTR [eax],edx
c0017138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001713f:	84 c0                	test   al,al
c0017141:	74 0f                	je     c0017152 <VCache::~VCache()+0x28>
c0017143:	83 ec 0c             	sub    esp,0xc
c0017146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001714a:	e8 9f ff ff ff       	call   c00170ee <VCache::writeWriteBuffer()>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017156:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017159:	83 ec 0c             	sub    esp,0xc
c001715c:	50                   	push   eax
c001715d:	e8 f1 86 ff ff       	call   c000f853 <free>
c0017162:	83 c4 10             	add    esp,0x10
c0017165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017169:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	50                   	push   eax
c0017170:	e8 de 86 ff ff       	call   c000f853 <free>
c0017175:	83 c4 10             	add    esp,0x10
c0017178:	90                   	nop
c0017179:	83 c4 0c             	add    esp,0xc
c001717c:	c3                   	ret    
c001717d:	90                   	nop

c001717e <VCache::~VCache()>:
c001717e:	83 ec 0c             	sub    esp,0xc
c0017181:	83 ec 0c             	sub    esp,0xc
c0017184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017188:	e8 9d ff ff ff       	call   c001712a <VCache::~VCache()>
c001718d:	83 c4 10             	add    esp,0x10
c0017190:	83 ec 08             	sub    esp,0x8
c0017193:	6a 44                	push   0x44
c0017195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017199:	e8 f6 bc ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c001719e:	83 c4 10             	add    esp,0x10
c00171a1:	83 c4 0c             	add    esp,0xc
c00171a4:	c3                   	ret    
c00171a5:	90                   	nop

c00171a6 <VCache::write(unsigned long long, int, void*)>:
c00171a6:	55                   	push   ebp
c00171a7:	57                   	push   edi
c00171a8:	56                   	push   esi
c00171a9:	53                   	push   ebx
c00171aa:	83 ec 28             	sub    esp,0x28
c00171ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171b9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171c0:	e8 d3 71 00 00       	call   c001e398 <Semaphore::acquire()>
c00171c5:	83 c4 10             	add    esp,0x10
c00171c8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171cc:	74 0c                	je     c00171da <VCache::write(unsigned long long, int, void*)+0x34>
c00171ce:	83 ec 0c             	sub    esp,0xc
c00171d1:	53                   	push   ebx
c00171d2:	e8 07 ff ff ff       	call   c00170de <VCache::invalidateReadBuffer()>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171de:	74 66                	je     c0017246 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171e3:	99                   	cdq    
c00171e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171e8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171eb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171ee:	89 c1                	mov    ecx,eax
c00171f0:	89 d0                	mov    eax,edx
c00171f2:	31 f1                	xor    ecx,esi
c00171f4:	31 f8                	xor    eax,edi
c00171f6:	89 ca                	mov    edx,ecx
c00171f8:	09 c2                	or     edx,eax
c00171fa:	75 3e                	jne    c001723a <VCache::write(unsigned long long, int, void*)+0x94>
c00171fc:	83 fd 01             	cmp    ebp,0x1
c00171ff:	75 39                	jne    c001723a <VCache::write(unsigned long long, int, void*)+0x94>
c0017201:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017204:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001720a:	51                   	push   ecx
c001720b:	50                   	push   eax
c001720c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017210:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017214:	0f af c8             	imul   ecx,eax
c0017217:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001721a:	51                   	push   ecx
c001721b:	e8 24 95 fe ff       	call   c0000744 <memcpy>
c0017220:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	40                   	inc    eax
c0017227:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001722a:	83 c0 80             	add    eax,0xffffff80
c001722d:	75 57                	jne    c0017286 <VCache::write(unsigned long long, int, void*)+0xe0>
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	53                   	push   ebx
c0017233:	e8 b6 fe ff ff       	call   c00170ee <VCache::writeWriteBuffer()>
c0017238:	eb 34                	jmp    c001726e <VCache::write(unsigned long long, int, void*)+0xc8>
c001723a:	83 ec 0c             	sub    esp,0xc
c001723d:	53                   	push   ebx
c001723e:	e8 ab fe ff ff       	call   c00170ee <VCache::writeWriteBuffer()>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017249:	83 fd 7f             	cmp    ebp,0x7f
c001724c:	7f 25                	jg     c0017273 <VCache::write(unsigned long long, int, void*)+0xcd>
c001724e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017251:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017254:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017257:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001725b:	52                   	push   edx
c001725c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017262:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017266:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017269:	e8 d6 94 fe ff       	call   c0000744 <memcpy>
c001726e:	83 c4 10             	add    esp,0x10
c0017271:	eb 13                	jmp    c0017286 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017273:	83 ec 0c             	sub    esp,0xc
c0017276:	8b 10                	mov    edx,DWORD PTR [eax]
c0017278:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001727c:	55                   	push   ebp
c001727d:	57                   	push   edi
c001727e:	56                   	push   esi
c001727f:	50                   	push   eax
c0017280:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017283:	83 c4 20             	add    esp,0x20
c0017286:	83 ec 0c             	sub    esp,0xc
c0017289:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001728c:	e8 b5 76 00 00       	call   c001e946 <Semaphore::release()>
c0017291:	83 c4 2c             	add    esp,0x2c
c0017294:	31 c0                	xor    eax,eax
c0017296:	5b                   	pop    ebx
c0017297:	5e                   	pop    esi
c0017298:	5f                   	pop    edi
c0017299:	5d                   	pop    ebp
c001729a:	c3                   	ret    
c001729b:	90                   	nop

c001729c <VCache::read(unsigned long long, int, void*)>:
c001729c:	55                   	push   ebp
c001729d:	57                   	push   edi
c001729e:	56                   	push   esi
c001729f:	53                   	push   ebx
c00172a0:	83 ec 28             	sub    esp,0x28
c00172a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172ab:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172b7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172bb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172c2:	e8 d1 70 00 00       	call   c001e398 <Semaphore::acquire()>
c00172c7:	83 c4 10             	add    esp,0x10
c00172ca:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172ce:	74 0c                	je     c00172dc <VCache::read(unsigned long long, int, void*)+0x40>
c00172d0:	83 ec 0c             	sub    esp,0xc
c00172d3:	53                   	push   ebx
c00172d4:	e8 15 fe ff ff       	call   c00170ee <VCache::writeWriteBuffer()>
c00172d9:	83 c4 10             	add    esp,0x10
c00172dc:	83 fe 01             	cmp    esi,0x1
c00172df:	0f 85 80 00 00 00    	jne    c0017365 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172e8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172ef:	75 74                	jne    c0017365 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172f1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172f4:	89 d1                	mov    ecx,edx
c00172f6:	f7 d9                	neg    ecx
c00172f8:	89 cf                	mov    edi,ecx
c00172fa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172fe:	c1 ff 1f             	sar    edi,0x1f
c0017301:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017304:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017308:	89 ce                	mov    esi,ecx
c001730a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001730e:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017312:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017316:	89 cf                	mov    edi,ecx
c0017318:	74 0a                	je     c0017324 <VCache::read(unsigned long long, int, void*)+0x88>
c001731a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001731d:	75 05                	jne    c0017324 <VCache::read(unsigned long long, int, void*)+0x88>
c001731f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017322:	74 1c                	je     c0017340 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017324:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017328:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001732b:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001732e:	83 ec 0c             	sub    esp,0xc
c0017331:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017333:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017336:	52                   	push   edx
c0017337:	57                   	push   edi
c0017338:	56                   	push   esi
c0017339:	50                   	push   eax
c001733a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001733d:	83 c4 20             	add    esp,0x20
c0017340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017343:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017349:	50                   	push   eax
c001734a:	52                   	push   edx
c001734b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001734e:	48                   	dec    eax
c001734f:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017353:	0f af c2             	imul   eax,edx
c0017356:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017359:	50                   	push   eax
c001735a:	55                   	push   ebp
c001735b:	e8 e4 93 fe ff       	call   c0000744 <memcpy>
c0017360:	83 c4 10             	add    esp,0x10
c0017363:	eb 21                	jmp    c0017386 <VCache::read(unsigned long long, int, void*)+0xea>
c0017365:	83 ec 0c             	sub    esp,0xc
c0017368:	53                   	push   ebx
c0017369:	e8 70 fd ff ff       	call   c00170de <VCache::invalidateReadBuffer()>
c001736e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017371:	8b 10                	mov    edx,DWORD PTR [eax]
c0017373:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017376:	56                   	push   esi
c0017377:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001737b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001737f:	50                   	push   eax
c0017380:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017383:	83 c4 20             	add    esp,0x20
c0017386:	83 ec 0c             	sub    esp,0xc
c0017389:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001738c:	e8 b5 75 00 00       	call   c001e946 <Semaphore::release()>
c0017391:	83 c4 2c             	add    esp,0x2c
c0017394:	31 c0                	xor    eax,eax
c0017396:	5b                   	pop    ebx
c0017397:	5e                   	pop    esi
c0017398:	5f                   	pop    edi
c0017399:	5d                   	pop    ebp
c001739a:	c3                   	ret    
c001739b:	90                   	nop

c001739c <Video::putrect(int, int, int, int, unsigned int)>:
c001739c:	55                   	push   ebp
c001739d:	57                   	push   edi
c001739e:	56                   	push   esi
c001739f:	53                   	push   ebx
c00173a0:	83 ec 1c             	sub    esp,0x1c
c00173a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173af:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173bb:	01 df                	add    edi,ebx
c00173bd:	39 fb                	cmp    ebx,edi
c00173bf:	7d 1f                	jge    c00173e0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173c1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173c5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173c9:	7d 12                	jge    c00173dd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173cb:	8b 16                	mov    edx,DWORD PTR [esi]
c00173cd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173d1:	53                   	push   ebx
c00173d2:	55                   	push   ebp
c00173d3:	45                   	inc    ebp
c00173d4:	56                   	push   esi
c00173d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	eb e8                	jmp    c00173c5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173dd:	43                   	inc    ebx
c00173de:	eb dd                	jmp    c00173bd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173e0:	83 c4 1c             	add    esp,0x1c
c00173e3:	5b                   	pop    ebx
c00173e4:	5e                   	pop    esi
c00173e5:	5f                   	pop    edi
c00173e6:	5d                   	pop    ebp
c00173e7:	c3                   	ret    

c00173e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173e8:	55                   	push   ebp
c00173e9:	57                   	push   edi
c00173ea:	31 ff                	xor    edi,edi
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173f9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017400:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017405:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017409:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001740d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017411:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017414:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017418:	01 f9                	add    ecx,edi
c001741a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001741e:	7d 2f                	jge    c001744f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017420:	31 f6                	xor    esi,esi
c0017422:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017426:	01 f2                	add    edx,esi
c0017428:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001742c:	7d 1a                	jge    c0017448 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001742e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017431:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017434:	46                   	inc    esi
c0017435:	51                   	push   ecx
c0017436:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001743a:	52                   	push   edx
c001743b:	55                   	push   ebp
c001743c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001743f:	83 c4 10             	add    esp,0x10
c0017442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017446:	eb da                	jmp    c0017422 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017448:	47                   	inc    edi
c0017449:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001744d:	eb c5                	jmp    c0017414 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001744f:	83 c4 1c             	add    esp,0x1c
c0017452:	5b                   	pop    ebx
c0017453:	5e                   	pop    esi
c0017454:	5f                   	pop    edi
c0017455:	5d                   	pop    ebp
c0017456:	c3                   	ret    
c0017457:	90                   	nop

c0017458 <Video::blit(unsigned int*, int, int, int, int)>:
c0017458:	55                   	push   ebp
c0017459:	57                   	push   edi
c001745a:	56                   	push   esi
c001745b:	53                   	push   ebx
c001745c:	83 ec 1c             	sub    esp,0x1c
c001745f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017463:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017467:	85 c0                	test   eax,eax
c0017469:	79 02                	jns    c001746d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001746b:	31 c0                	xor    eax,eax
c001746d:	c1 e0 02             	shl    eax,0x2
c0017470:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017478:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001747c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017480:	39 d8                	cmp    eax,ebx
c0017482:	7e 49                	jle    c00174cd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017484:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001748a:	7c 41                	jl     c00174cd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001748c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017490:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017494:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017498:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001749c:	39 f9                	cmp    ecx,edi
c001749e:	7e 22                	jle    c00174c2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174a0:	83 c5 04             	add    ebp,0x4
c00174a3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174a9:	7c 14                	jl     c00174bf <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174ab:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174ad:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174b8:	56                   	push   esi
c00174b9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174bc:	83 c4 10             	add    esp,0x10
c00174bf:	47                   	inc    edi
c00174c0:	eb d2                	jmp    c0017494 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174c6:	43                   	inc    ebx
c00174c7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174cb:	eb ab                	jmp    c0017478 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174cd:	83 c4 1c             	add    esp,0x1c
c00174d0:	5b                   	pop    ebx
c00174d1:	5e                   	pop    esi
c00174d2:	5f                   	pop    edi
c00174d3:	5d                   	pop    ebp
c00174d4:	c3                   	ret    
c00174d5:	90                   	nop

c00174d6 <Video::clearScreen(unsigned int)>:
c00174d6:	57                   	push   edi
c00174d7:	56                   	push   esi
c00174d8:	53                   	push   ebx
c00174d9:	31 db                	xor    ebx,ebx
c00174db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174df:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174e5:	7e 1f                	jle    c0017506 <Video::clearScreen(unsigned int)+0x30>
c00174e7:	31 ff                	xor    edi,edi
c00174e9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174ef:	7e 12                	jle    c0017503 <Video::clearScreen(unsigned int)+0x2d>
c00174f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00174f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174f7:	53                   	push   ebx
c00174f8:	57                   	push   edi
c00174f9:	47                   	inc    edi
c00174fa:	56                   	push   esi
c00174fb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174fe:	83 c4 10             	add    esp,0x10
c0017501:	eb e6                	jmp    c00174e9 <Video::clearScreen(unsigned int)+0x13>
c0017503:	43                   	inc    ebx
c0017504:	eb d9                	jmp    c00174df <Video::clearScreen(unsigned int)+0x9>
c0017506:	5b                   	pop    ebx
c0017507:	5e                   	pop    esi
c0017508:	5f                   	pop    edi
c0017509:	c3                   	ret    

c001750a <Video::putpixel(int, int, unsigned int)>:
c001750a:	c7 44 24 04 d8 b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b3d8
c0017512:	e9 0a 31 00 00       	jmp    c001a621 <Krnl::panic(char const*)>
c0017517:	90                   	nop

c0017518 <Video::Video(char const*)>:
c0017518:	83 ec 0c             	sub    esp,0xc
c001751b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751f:	83 ec 08             	sub    esp,0x8
c0017522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017526:	50                   	push   eax
c0017527:	e8 5e d0 ff ff       	call   c001458a <Device::Device(char const*)>
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0017534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017538:	89 10                	mov    DWORD PTR [eax],edx
c001753a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017548:	90                   	nop
c0017549:	83 c4 0c             	add    esp,0xc
c001754c:	c3                   	ret    
c001754d:	90                   	nop

c001754e <Video::~Video()>:
c001754e:	83 ec 0c             	sub    esp,0xc
c0017551:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0017556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001755a:	89 10                	mov    DWORD PTR [eax],edx
c001755c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	50                   	push   eax
c0017564:	e8 03 cd ff ff       	call   c001426c <Device::~Device()>
c0017569:	83 c4 10             	add    esp,0x10
c001756c:	90                   	nop
c001756d:	83 c4 0c             	add    esp,0xc
c0017570:	c3                   	ret    
c0017571:	90                   	nop

c0017572 <Video::~Video()>:
c0017572:	83 ec 0c             	sub    esp,0xc
c0017575:	83 ec 0c             	sub    esp,0xc
c0017578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001757c:	e8 cd ff ff ff       	call   c001754e <Video::~Video()>
c0017581:	83 c4 10             	add    esp,0x10
c0017584:	83 ec 08             	sub    esp,0x8
c0017587:	68 64 01 00 00       	push   0x164
c001758c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017590:	e8 ff b8 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0017595:	83 c4 10             	add    esp,0x10
c0017598:	83 c4 0c             	add    esp,0xc
c001759b:	c3                   	ret    

c001759c <Video::isMonochrome()>:
c001759c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175a6:	c3                   	ret    
c00175a7:	90                   	nop

c00175a8 <Video::getWidth()>:
c00175a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175b2:	c3                   	ret    
c00175b3:	90                   	nop

c00175b4 <Video::getHeight()>:
c00175b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175be:	c3                   	ret    
c00175bf:	90                   	nop

c00175c0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00175c0:	55                   	push   ebp
c00175c1:	57                   	push   edi
c00175c2:	56                   	push   esi
c00175c3:	53                   	push   ebx
c00175c4:	83 ec 2c             	sub    esp,0x2c
c00175c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175cf:	83 f8 01             	cmp    eax,0x1
c00175d2:	19 c9                	sbb    ecx,ecx
c00175d4:	31 db                	xor    ebx,ebx
c00175d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175da:	89 cd                	mov    ebp,ecx
c00175dc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175e4:	f7 d5                	not    ebp
c00175e6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175f0:	01 d8                	add    eax,ebx
c00175f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175f6:	56                   	push   esi
c00175f7:	e8 b8 ff ff ff       	call   c00175b4 <Video::getHeight()>
c00175fc:	59                   	pop    ecx
c00175fd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017601:	7e 70                	jle    c0017673 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017603:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017607:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001760b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001760e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017612:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017616:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001761d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017621:	89 f8                	mov    eax,edi
c0017623:	83 c0 20             	add    eax,0x20
c0017626:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001762a:	56                   	push   esi
c001762b:	e8 78 ff ff ff       	call   c00175a8 <Video::getWidth()>
c0017630:	5a                   	pop    edx
c0017631:	39 c7                	cmp    edi,eax
c0017633:	7d 34                	jge    c0017669 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017635:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001763a:	74 05                	je     c0017641 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001763c:	8b 06                	mov    eax,DWORD PTR [esi]
c001763e:	55                   	push   ebp
c001763f:	eb 0d                	jmp    c001764e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017641:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017646:	74 12                	je     c001765a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017648:	8b 06                	mov    eax,DWORD PTR [esi]
c001764a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001764e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017652:	57                   	push   edi
c0017653:	56                   	push   esi
c0017654:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017657:	83 c4 10             	add    esp,0x10
c001765a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001765e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017662:	47                   	inc    edi
c0017663:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017667:	75 c1                	jne    c001762a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017669:	43                   	inc    ebx
c001766a:	83 fb 20             	cmp    ebx,0x20
c001766d:	0f 85 79 ff ff ff    	jne    c00175ec <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017673:	83 c4 2c             	add    esp,0x2c
c0017676:	5b                   	pop    ebx
c0017677:	5e                   	pop    esi
c0017678:	5f                   	pop    edi
c0017679:	5d                   	pop    ebp
c001767a:	c3                   	ret    
c001767b:	90                   	nop

c001767c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001767c:	55                   	push   ebp
c001767d:	57                   	push   edi
c001767e:	56                   	push   esi
c001767f:	53                   	push   ebx
c0017680:	83 ec 28             	sub    esp,0x28
c0017683:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017687:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001768b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001768f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017693:	c1 e7 08             	shl    edi,0x8
c0017696:	01 c7                	add    edi,eax
c0017698:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001769c:	c1 e0 08             	shl    eax,0x8
c001769f:	01 d0                	add    eax,edx
c00176a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176a9:	0f af c7             	imul   eax,edi
c00176ac:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176b3:	50                   	push   eax
c00176b4:	e8 8a 81 ff ff       	call   c000f843 <malloc>
c00176b9:	83 c4 10             	add    esp,0x10
c00176bc:	89 c5                	mov    ebp,eax
c00176be:	85 c0                	test   eax,eax
c00176c0:	75 15                	jne    c00176d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176c2:	83 ec 0c             	sub    esp,0xc
c00176c5:	68 f9 b3 02 c0       	push   0xc002b3f9
c00176ca:	e8 a5 b8 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	e9 1c 01 00 00       	jmp    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176d7:	be 12 00 00 00       	mov    esi,0x12
c00176dc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176e0:	74 11                	je     c00176f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176e2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176e6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176ea:	c1 fe 03             	sar    esi,0x3
c00176ed:	0f af f0             	imul   esi,eax
c00176f0:	83 c6 12             	add    esi,0x12
c00176f3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176f7:	74 04                	je     c00176fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176f9:	85 ff                	test   edi,edi
c00176fb:	75 12                	jne    c001770f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176fd:	83 ec 0c             	sub    esp,0xc
c0017700:	68 10 b4 02 c0       	push   0xc002b410
c0017705:	e8 6a b8 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001770a:	e9 ce 00 00 00       	jmp    c00177dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001770f:	52                   	push   edx
c0017710:	52                   	push   edx
c0017711:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017715:	50                   	push   eax
c0017716:	68 25 b4 02 c0       	push   0xc002b425
c001771b:	e8 54 b8 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0017720:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017724:	83 c4 10             	add    esp,0x10
c0017727:	80 fa 02             	cmp    dl,0x2
c001772a:	0f 85 98 00 00 00    	jne    c00177c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017730:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017735:	75 10                	jne    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017737:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001773b:	75 0a                	jne    c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001773d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017740:	83 e8 18             	sub    eax,0x18
c0017743:	a8 f7                	test   al,0xf7
c0017745:	74 0a                	je     c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017747:	83 ec 0c             	sub    esp,0xc
c001774a:	68 32 b4 02 c0       	push   0xc002b432
c001774f:	eb 7f                	jmp    c00177d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017751:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017759:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017761:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017765:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001776d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017771:	75 0c                	jne    c001777f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017773:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017778:	c1 e0 18             	shl    eax,0x18
c001777b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001777f:	41                   	inc    ecx
c0017780:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017785:	c1 e2 10             	shl    edx,0x10
c0017788:	89 d0                	mov    eax,edx
c001778a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001778f:	c1 e2 08             	shl    edx,0x8
c0017792:	09 c2                	or     edx,eax
c0017794:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017798:	09 c2                	or     edx,eax
c001779a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001779e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177a2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177a6:	c1 f8 03             	sar    eax,0x3
c00177a9:	01 c6                	add    esi,eax
c00177ab:	89 c8                	mov    eax,ecx
c00177ad:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177b1:	39 c7                	cmp    edi,eax
c00177b3:	7f b0                	jg     c0017765 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177b5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177bd:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177c0:	7e 22                	jle    c00177e4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177c2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177c6:	eb 99                	jmp    c0017761 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177c8:	50                   	push   eax
c00177c9:	50                   	push   eax
c00177ca:	52                   	push   edx
c00177cb:	68 40 b4 02 c0       	push   0xc002b440
c00177d0:	e8 9f b7 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00177d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177d8:	e8 76 80 ff ff       	call   c000f853 <free>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	31 ed                	xor    ebp,ebp
c00177e2:	eb 0f                	jmp    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177e8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177eb:	89 38                	mov    DWORD PTR [eax],edi
c00177ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177f1:	89 08                	mov    DWORD PTR [eax],ecx
c00177f3:	83 c4 1c             	add    esp,0x1c
c00177f6:	89 e8                	mov    eax,ebp
c00177f8:	5b                   	pop    ebx
c00177f9:	5e                   	pop    esi
c00177fa:	5f                   	pop    edi
c00177fb:	5d                   	pop    ebp
c00177fc:	c3                   	ret    
c00177fd:	90                   	nop

c00177fe <Video::putTGA(int, int, unsigned char*, int)>:
c00177fe:	55                   	push   ebp
c00177ff:	57                   	push   edi
c0017800:	56                   	push   esi
c0017801:	53                   	push   ebx
c0017802:	83 ec 28             	sub    esp,0x28
c0017805:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017809:	8d 44 24 18          	lea    eax,[esp+0x18]
c001780d:	50                   	push   eax
c001780e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017812:	50                   	push   eax
c0017813:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017817:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001781b:	56                   	push   esi
c001781c:	e8 5b fe ff ff       	call   c001767c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017821:	83 c4 20             	add    esp,0x20
c0017824:	85 c0                	test   eax,eax
c0017826:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001782a:	74 35                	je     c0017861 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001782c:	89 c7                	mov    edi,eax
c001782e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017832:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017836:	39 d8                	cmp    eax,ebx
c0017838:	7e 27                	jle    c0017861 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001783a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001783e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017842:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017846:	39 e8                	cmp    eax,ebp
c0017848:	7e 14                	jle    c001785e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001784a:	8b 06                	mov    eax,DWORD PTR [esi]
c001784c:	83 c7 04             	add    edi,0x4
c001784f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017852:	53                   	push   ebx
c0017853:	55                   	push   ebp
c0017854:	45                   	inc    ebp
c0017855:	56                   	push   esi
c0017856:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	eb e0                	jmp    c001783e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001785e:	43                   	inc    ebx
c001785f:	eb cd                	jmp    c001782e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017861:	83 c4 1c             	add    esp,0x1c
c0017864:	5b                   	pop    ebx
c0017865:	5e                   	pop    esi
c0017866:	5f                   	pop    edi
c0017867:	5d                   	pop    ebp
c0017868:	c3                   	ret    
c0017869:	90                   	nop

c001786a <ACPI::close(int, int, void*)>:
c001786a:	83 ec 1c             	sub    esp,0x1c
c001786d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017875:	74 0a                	je     c0017881 <ACPI::close(int, int, void*)+0x17>
c0017877:	b8 00 00 00 00       	mov    eax,0x0
c001787c:	e9 9a 00 00 00       	jmp    c001791b <ACPI::close(int, int, void*)+0xb1>
c0017881:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017886:	75 37                	jne    c00178bf <ACPI::close(int, int, void*)+0x55>
c0017888:	83 ec 0c             	sub    esp,0xc
c001788b:	68 9c b4 02 c0       	push   0xc002b49c
c0017890:	e8 df b6 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c001789d:	85 c0                	test   eax,eax
c001789f:	74 07                	je     c00178a8 <ACPI::close(int, int, void*)+0x3e>
c00178a1:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c00178a6:	ff d0                	call   eax
c00178a8:	83 ec 0c             	sub    esp,0xc
c00178ab:	68 c0 b5 02 c0       	push   0xc002b5c0
c00178b0:	e8 6c 2d 00 00       	call   c001a621 <Krnl::panic(char const*)>
c00178b5:	83 c4 10             	add    esp,0x10
c00178b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178bd:	eb 5c                	jmp    c001791b <ACPI::close(int, int, void*)+0xb1>
c00178bf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178c4:	75 50                	jne    c0017916 <ACPI::close(int, int, void*)+0xac>
c00178c6:	a1 64 0b 03 c0       	mov    eax,ds:0xc0030b64
c00178cb:	85 c0                	test   eax,eax
c00178cd:	74 07                	je     c00178d6 <ACPI::close(int, int, void*)+0x6c>
c00178cf:	a1 64 0b 03 c0       	mov    eax,ds:0xc0030b64
c00178d4:	ff d0                	call   eax
c00178d6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178db:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178e0:	83 e0 02             	and    eax,0x2
c00178e3:	74 1c                	je     c0017901 <ACPI::close(int, int, void*)+0x97>
c00178e5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f0:	89 c2                	mov    edx,eax
c00178f2:	ec                   	in     al,dx
c00178f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178f7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00178ff:	eb da                	jmp    c00178db <ACPI::close(int, int, void*)+0x71>
c0017901:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017908:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001790d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017911:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017915:	ee                   	out    dx,al
c0017916:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001791b:	83 c4 1c             	add    esp,0x1c
c001791e:	c3                   	ret    

c001791f <findRSDP()>:
c001791f:	83 ec 1c             	sub    esp,0x1c
c0017922:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017927:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001792d:	83 e0 04             	and    eax,0x4
c0017930:	84 c0                	test   al,al
c0017932:	75 07                	jne    c001793b <findRSDP()+0x1c>
c0017934:	b8 00 00 00 00       	mov    eax,0x0
c0017939:	eb 6a                	jmp    c00179a5 <findRSDP()+0x86>
c001793b:	a1 f4 e4 02 c0       	mov    eax,ds:0xc002e4f4
c0017940:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017945:	7f 1b                	jg     c0017962 <findRSDP()+0x43>
c0017947:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001794c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017952:	83 e2 fb             	and    edx,0xfffffffb
c0017955:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001795b:	b8 00 00 00 00       	mov    eax,0x0
c0017960:	eb 43                	jmp    c00179a5 <findRSDP()+0x86>
c0017962:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001796a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017972:	77 2c                	ja     c00179a0 <findRSDP()+0x81>
c0017974:	83 ec 04             	sub    esp,0x4
c0017977:	6a 08                	push   0x8
c0017979:	68 a9 b4 02 c0       	push   0xc002b4a9
c001797e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017982:	e8 b9 8c fe ff       	call   c0000640 <memcmp>
c0017987:	83 c4 10             	add    esp,0x10
c001798a:	85 c0                	test   eax,eax
c001798c:	0f 94 c0             	sete   al
c001798f:	84 c0                	test   al,al
c0017991:	74 06                	je     c0017999 <findRSDP()+0x7a>
c0017993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017997:	eb 0c                	jmp    c00179a5 <findRSDP()+0x86>
c0017999:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001799e:	eb ca                	jmp    c001796a <findRSDP()+0x4b>
c00179a0:	b8 00 00 00 00       	mov    eax,0x0
c00179a5:	83 c4 1c             	add    esp,0x1c
c00179a8:	c3                   	ret    

c00179a9 <loadACPITables(unsigned char*)>:
c00179a9:	56                   	push   esi
c00179aa:	53                   	push   ebx
c00179ab:	83 ec 44             	sub    esp,0x44
c00179ae:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00179b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179b9:	83 e0 04             	and    eax,0x4
c00179bc:	84 c0                	test   al,al
c00179be:	0f 84 05 02 00 00    	je     c0017bc9 <loadACPITables(unsigned char*)+0x220>
c00179c4:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c00179c9:	84 c0                	test   al,al
c00179cb:	74 75                	je     c0017a42 <loadACPITables(unsigned char*)+0x99>
c00179cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179dc:	83 e8 24             	sub    eax,0x24
c00179df:	c1 e8 03             	shr    eax,0x3
c00179e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179e6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179f6:	0f 8d b2 00 00 00    	jge    c0017aae <loadACPITables(unsigned char*)+0x105>
c00179fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a00:	83 c0 24             	add    eax,0x24
c0017a03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a13:	c1 e0 03             	shl    eax,0x3
c0017a16:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a1e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a21:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a23:	89 c1                	mov    ecx,eax
c0017a25:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c0017a2a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2d:	89 15 6c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b6c,edx
c0017a33:	89 ca                	mov    edx,ecx
c0017a35:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c0017a3c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a40:	eb ac                	jmp    c00179ee <loadACPITables(unsigned char*)+0x45>
c0017a42:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a51:	83 e8 24             	sub    eax,0x24
c0017a54:	c1 e8 02             	shr    eax,0x2
c0017a57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a5b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a67:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a6b:	7d 41                	jge    c0017aae <loadACPITables(unsigned char*)+0x105>
c0017a6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a71:	83 c0 24             	add    eax,0x24
c0017a74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a84:	c1 e0 02             	shl    eax,0x2
c0017a87:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a91:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c0017a96:	8d 50 01             	lea    edx,[eax+0x1]
c0017a99:	89 15 6c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b6c,edx
c0017a9f:	89 ca                	mov    edx,ecx
c0017aa1:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c0017aa8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017aac:	eb b5                	jmp    c0017a63 <loadACPITables(unsigned char*)+0xba>
c0017aae:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017ab6:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c0017abb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017abf:	0f 8d 05 01 00 00    	jge    c0017bca <loadACPITables(unsigned char*)+0x221>
c0017ac5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ac9:	8b 04 c5 84 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf47c]
c0017ad0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ad8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae0:	25 ff 0f 00 00       	and    eax,0xfff
c0017ae5:	89 c6                	mov    esi,eax
c0017ae7:	e8 f2 a2 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017aec:	89 c3                	mov    ebx,eax
c0017aee:	83 ec 0c             	sub    esp,0xc
c0017af1:	6a 01                	push   0x1
c0017af3:	e8 4b a0 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017aff:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b05:	83 ec 0c             	sub    esp,0xc
c0017b08:	6a 01                	push   0x1
c0017b0a:	6a 01                	push   0x1
c0017b0c:	50                   	push   eax
c0017b0d:	52                   	push   edx
c0017b0e:	53                   	push   ebx
c0017b0f:	e8 10 ab ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b14:	83 c4 20             	add    esp,0x20
c0017b17:	09 f0                	or     eax,esi
c0017b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b21:	c1 e0 03             	shl    eax,0x3
c0017b24:	05 80 0b 03 c0       	add    eax,0xc0030b80
c0017b29:	83 ec 04             	sub    esp,0x4
c0017b2c:	6a 04                	push   0x4
c0017b2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b32:	50                   	push   eax
c0017b33:	e8 0c 8c fe ff       	call   c0000744 <memcpy>
c0017b38:	83 c4 10             	add    esp,0x10
c0017b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b4a:	05 00 10 00 00       	add    eax,0x1000
c0017b4f:	c1 e8 0c             	shr    eax,0xc
c0017b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b61:	25 ff 0f 00 00       	and    eax,0xfff
c0017b66:	89 c6                	mov    esi,eax
c0017b68:	e8 71 a2 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017b6d:	89 c3                	mov    ebx,eax
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b76:	e8 c8 9f ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b82:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b88:	83 ec 0c             	sub    esp,0xc
c0017b8b:	6a 01                	push   0x1
c0017b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b91:	50                   	push   eax
c0017b92:	52                   	push   edx
c0017b93:	53                   	push   ebx
c0017b94:	e8 8b aa ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b99:	83 c4 20             	add    esp,0x20
c0017b9c:	09 f0                	or     eax,esi
c0017b9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ba2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017ba5:	83 ec 0c             	sub    esp,0xc
c0017ba8:	50                   	push   eax
c0017ba9:	e8 1b a4 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017bae:	83 c4 10             	add    esp,0x10
c0017bb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bb9:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c0017bc0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bc4:	e9 ed fe ff ff       	jmp    c0017ab6 <loadACPITables(unsigned char*)+0x10d>
c0017bc9:	90                   	nop
c0017bca:	83 c4 44             	add    esp,0x44
c0017bcd:	5b                   	pop    ebx
c0017bce:	5e                   	pop    esi
c0017bcf:	c3                   	ret    

c0017bd0 <findRSDT(unsigned char*)>:
c0017bd0:	56                   	push   esi
c0017bd1:	53                   	push   ebx
c0017bd2:	83 ec 44             	sub    esp,0x44
c0017bd5:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017bda:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017be0:	83 e0 04             	and    eax,0x4
c0017be3:	84 c0                	test   al,al
c0017be5:	75 0a                	jne    c0017bf1 <findRSDT(unsigned char*)+0x21>
c0017be7:	b8 00 00 00 00       	mov    eax,0x0
c0017bec:	e9 f7 00 00 00       	jmp    c0017ce8 <findRSDT(unsigned char*)+0x118>
c0017bf1:	83 ec 04             	sub    esp,0x4
c0017bf4:	6a 24                	push   0x24
c0017bf6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bfa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bfe:	50                   	push   eax
c0017bff:	e8 40 8b fe ff       	call   c0000744 <memcpy>
c0017c04:	83 c4 10             	add    esp,0x10
c0017c07:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c0b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c0f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c1f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c27:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c2f:	25 ff 0f 00 00       	and    eax,0xfff
c0017c34:	89 c6                	mov    esi,eax
c0017c36:	e8 a3 a1 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017c3b:	89 c3                	mov    ebx,eax
c0017c3d:	83 ec 0c             	sub    esp,0xc
c0017c40:	6a 02                	push   0x2
c0017c42:	e8 fc 9e ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017c47:	83 c4 10             	add    esp,0x10
c0017c4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c4e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c54:	83 ec 0c             	sub    esp,0xc
c0017c57:	6a 01                	push   0x1
c0017c59:	6a 02                	push   0x2
c0017c5b:	50                   	push   eax
c0017c5c:	52                   	push   edx
c0017c5d:	53                   	push   ebx
c0017c5e:	e8 c1 a9 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c63:	83 c4 20             	add    esp,0x20
c0017c66:	09 f0                	or     eax,esi
c0017c68:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c70:	25 ff 0f 00 00       	and    eax,0xfff
c0017c75:	89 c6                	mov    esi,eax
c0017c77:	e8 62 a1 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c0017c7c:	89 c3                	mov    ebx,eax
c0017c7e:	83 ec 0c             	sub    esp,0xc
c0017c81:	6a 02                	push   0x2
c0017c83:	e8 bb 9e ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0017c88:	83 c4 10             	add    esp,0x10
c0017c8b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c8f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c95:	83 ec 0c             	sub    esp,0xc
c0017c98:	6a 01                	push   0x1
c0017c9a:	6a 02                	push   0x2
c0017c9c:	50                   	push   eax
c0017c9d:	52                   	push   edx
c0017c9e:	53                   	push   ebx
c0017c9f:	e8 80 a9 ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ca4:	83 c4 20             	add    esp,0x20
c0017ca7:	09 f0                	or     eax,esi
c0017ca9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cad:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017cb2:	75 11                	jne    c0017cc5 <findRSDT(unsigned char*)+0xf5>
c0017cb4:	c6 05 80 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d80,0x0
c0017cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cbf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cc3:	eb 1f                	jmp    c0017ce4 <findRSDT(unsigned char*)+0x114>
c0017cc5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017cca:	75 11                	jne    c0017cdd <findRSDT(unsigned char*)+0x10d>
c0017ccc:	c6 05 80 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d80,0x1
c0017cd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cdb:	eb 07                	jmp    c0017ce4 <findRSDT(unsigned char*)+0x114>
c0017cdd:	b8 00 00 00 00       	mov    eax,0x0
c0017ce2:	eb 04                	jmp    c0017ce8 <findRSDT(unsigned char*)+0x118>
c0017ce4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ce8:	83 c4 44             	add    esp,0x44
c0017ceb:	5b                   	pop    ebx
c0017cec:	5e                   	pop    esi
c0017ced:	c3                   	ret    

c0017cee <findDataTable(unsigned char*, char*)>:
c0017cee:	83 ec 1c             	sub    esp,0x1c
c0017cf1:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017cf6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cfc:	83 e0 04             	and    eax,0x4
c0017cff:	84 c0                	test   al,al
c0017d01:	75 07                	jne    c0017d0a <findDataTable(unsigned char*, char*)+0x1c>
c0017d03:	b8 00 00 00 00       	mov    eax,0x0
c0017d08:	eb 7c                	jmp    c0017d86 <findDataTable(unsigned char*, char*)+0x98>
c0017d0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d12:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c0017d17:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d1b:	7d 3a                	jge    c0017d57 <findDataTable(unsigned char*, char*)+0x69>
c0017d1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d21:	c1 e0 03             	shl    eax,0x3
c0017d24:	05 80 0b 03 c0       	add    eax,0xc0030b80
c0017d29:	83 ec 04             	sub    esp,0x4
c0017d2c:	6a 04                	push   0x4
c0017d2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d32:	50                   	push   eax
c0017d33:	e8 08 89 fe ff       	call   c0000640 <memcmp>
c0017d38:	83 c4 10             	add    esp,0x10
c0017d3b:	85 c0                	test   eax,eax
c0017d3d:	0f 94 c0             	sete   al
c0017d40:	84 c0                	test   al,al
c0017d42:	74 0d                	je     c0017d51 <findDataTable(unsigned char*, char*)+0x63>
c0017d44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d48:	8b 04 c5 84 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf47c]
c0017d4f:	eb 35                	jmp    c0017d86 <findDataTable(unsigned char*, char*)+0x98>
c0017d51:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d55:	eb bb                	jmp    c0017d12 <findDataTable(unsigned char*, char*)+0x24>
c0017d57:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c0017d5c:	84 c0                	test   al,al
c0017d5e:	74 07                	je     c0017d67 <findDataTable(unsigned char*, char*)+0x79>
c0017d60:	b8 58 00 00 00       	mov    eax,0x58
c0017d65:	eb 05                	jmp    c0017d6c <findDataTable(unsigned char*, char*)+0x7e>
c0017d67:	b8 52 00 00 00       	mov    eax,0x52
c0017d6c:	83 ec 04             	sub    esp,0x4
c0017d6f:	50                   	push   eax
c0017d70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d74:	68 e4 b5 02 c0       	push   0xc002b5e4
c0017d79:	e8 f6 b1 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0017d7e:	83 c4 10             	add    esp,0x10
c0017d81:	b8 00 00 00 00       	mov    eax,0x0
c0017d86:	83 c4 1c             	add    esp,0x1c
c0017d89:	c3                   	ret    

c0017d8a <scanMADT()>:
c0017d8a:	53                   	push   ebx
c0017d8b:	83 ec 38             	sub    esp,0x38
c0017d8e:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017d93:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d99:	83 e0 04             	and    eax,0x4
c0017d9c:	84 c0                	test   al,al
c0017d9e:	0f 84 63 04 00 00    	je     c0018207 <scanMADT()+0x47d>
c0017da4:	e8 76 fb ff ff       	call   c001791f <findRSDP()>
c0017da9:	a3 8c 0d 03 c0       	mov    ds:0xc0030d8c,eax
c0017dae:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c0017db3:	85 c0                	test   eax,eax
c0017db5:	75 19                	jne    c0017dd0 <scanMADT()+0x46>
c0017db7:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017dbc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dc2:	83 e2 fb             	and    edx,0xfffffffb
c0017dc5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dcb:	e9 3b 04 00 00       	jmp    c001820b <scanMADT()+0x481>
c0017dd0:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c0017dd5:	83 ec 0c             	sub    esp,0xc
c0017dd8:	50                   	push   eax
c0017dd9:	e8 f2 fd ff ff       	call   c0017bd0 <findRSDT(unsigned char*)>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	a3 88 0d 03 c0       	mov    ds:0xc0030d88,eax
c0017de6:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c0017deb:	85 c0                	test   eax,eax
c0017ded:	75 19                	jne    c0017e08 <scanMADT()+0x7e>
c0017def:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017df4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dfa:	83 e2 fb             	and    edx,0xfffffffb
c0017dfd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e03:	e9 03 04 00 00       	jmp    c001820b <scanMADT()+0x481>
c0017e08:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c0017e0d:	83 ec 0c             	sub    esp,0xc
c0017e10:	50                   	push   eax
c0017e11:	e8 93 fb ff ff       	call   c00179a9 <loadACPITables(unsigned char*)>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c0017e1e:	83 ec 08             	sub    esp,0x8
c0017e21:	68 b2 b4 02 c0       	push   0xc002b4b2
c0017e26:	50                   	push   eax
c0017e27:	e8 c2 fe ff ff       	call   c0017cee <findDataTable(unsigned char*, char*)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e33:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e38:	75 19                	jne    c0017e53 <scanMADT()+0xc9>
c0017e3a:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0017e3f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e45:	83 e2 fe             	and    edx,0xfffffffe
c0017e48:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e4e:	e9 b8 03 00 00       	jmp    c001820b <scanMADT()+0x481>
c0017e53:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e62:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e66:	0f 87 9f 03 00 00    	ja     c001820b <scanMADT()+0x481>
c0017e6c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e74:	0f 87 91 03 00 00    	ja     c001820b <scanMADT()+0x481>
c0017e7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e86:	8d 50 01             	lea    edx,[eax+0x1]
c0017e89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e91:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e95:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9d:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eac:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017eb0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017eb5:	0f 86 4f 03 00 00    	jbe    c001820a <scanMADT()+0x480>
c0017ebb:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ec0:	75 57                	jne    c0017f19 <scanMADT()+0x18f>
c0017ec2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ec9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ecd:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c0017ed3:	0f b6 d2             	movzx  edx,dl
c0017ed6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017eda:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ede:	88 82 c0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf040],al
c0017ee4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee8:	8d 50 01             	lea    edx,[eax+0x1]
c0017eeb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017eef:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c0017ef5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ef8:	88 0d 80 0f 03 c0    	mov    BYTE PTR ds:0xc0030f80,cl
c0017efe:	0f b6 d2             	movzx  edx,dl
c0017f01:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f05:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f09:	88 82 a0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf060],al
c0017f0f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f14:	e9 da 02 00 00       	jmp    c00181f3 <scanMADT()+0x469>
c0017f19:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f1e:	0f 85 14 01 00 00    	jne    c0018038 <scanMADT()+0x2ae>
c0017f24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f28:	8d 50 01             	lea    edx,[eax+0x1]
c0017f2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f2f:	8a 15 40 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e40
c0017f35:	0f b6 d2             	movzx  edx,dl
c0017f38:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f3c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f40:	88 82 60 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1a0],al
c0017f46:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f52:	01 d0                	add    eax,edx
c0017f54:	83 c0 2c             	add    eax,0x2c
c0017f57:	8a 00                	mov    al,BYTE PTR [eax]
c0017f59:	0f b6 d0             	movzx  edx,al
c0017f5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f60:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f67:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f6b:	0f b6 c0             	movzx  eax,al
c0017f6e:	c1 e0 08             	shl    eax,0x8
c0017f71:	89 d1                	mov    ecx,edx
c0017f73:	09 c1                	or     ecx,eax
c0017f75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f79:	8d 50 02             	lea    edx,[eax+0x2]
c0017f7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f80:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f84:	0f b6 c0             	movzx  eax,al
c0017f87:	c1 e0 10             	shl    eax,0x10
c0017f8a:	09 c1                	or     ecx,eax
c0017f8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f90:	8d 50 03             	lea    edx,[eax+0x3]
c0017f93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f97:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f9b:	0f b6 c0             	movzx  eax,al
c0017f9e:	c1 e0 18             	shl    eax,0x18
c0017fa1:	09 c1                	or     ecx,eax
c0017fa3:	89 ca                	mov    edx,ecx
c0017fa5:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c0017faa:	0f b6 c0             	movzx  eax,al
c0017fad:	89 14 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],edx
c0017fb4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc1:	01 d0                	add    eax,edx
c0017fc3:	83 c0 2c             	add    eax,0x2c
c0017fc6:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc8:	0f b6 d0             	movzx  edx,al
c0017fcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fda:	0f b6 c0             	movzx  eax,al
c0017fdd:	c1 e0 08             	shl    eax,0x8
c0017fe0:	89 d1                	mov    ecx,edx
c0017fe2:	09 c1                	or     ecx,eax
c0017fe4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fe8:	8d 50 02             	lea    edx,[eax+0x2]
c0017feb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff3:	0f b6 c0             	movzx  eax,al
c0017ff6:	c1 e0 10             	shl    eax,0x10
c0017ff9:	09 c1                	or     ecx,eax
c0017ffb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fff:	8d 50 03             	lea    edx,[eax+0x3]
c0018002:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018006:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800a:	0f b6 c0             	movzx  eax,al
c001800d:	c1 e0 18             	shl    eax,0x18
c0018010:	09 c1                	or     ecx,eax
c0018012:	89 ca                	mov    edx,ecx
c0018014:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c0018019:	0f b6 c0             	movzx  eax,al
c001801c:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c0018023:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018028:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c001802d:	40                   	inc    eax
c001802e:	a2 40 0e 03 c0       	mov    ds:0xc0030e40,al
c0018033:	e9 bb 01 00 00       	jmp    c00181f3 <scanMADT()+0x469>
c0018038:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001803d:	0f 85 e9 00 00 00    	jne    c001812c <scanMADT()+0x3a2>
c0018043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018047:	8d 50 01             	lea    edx,[eax+0x1]
c001804a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001804e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018052:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018056:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001805a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001805e:	8d 50 01             	lea    edx,[eax+0x1]
c0018061:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018065:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018069:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001806d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018071:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018075:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018079:	01 d0                	add    eax,edx
c001807b:	83 c0 2c             	add    eax,0x2c
c001807e:	8a 00                	mov    al,BYTE PTR [eax]
c0018080:	0f b6 d0             	movzx  edx,al
c0018083:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018087:	8d 48 01             	lea    ecx,[eax+0x1]
c001808a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001808e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018092:	0f b6 c0             	movzx  eax,al
c0018095:	c1 e0 08             	shl    eax,0x8
c0018098:	89 d1                	mov    ecx,edx
c001809a:	09 c1                	or     ecx,eax
c001809c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a0:	8d 50 02             	lea    edx,[eax+0x2]
c00180a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ab:	0f b6 c0             	movzx  eax,al
c00180ae:	c1 e0 10             	shl    eax,0x10
c00180b1:	09 c1                	or     ecx,eax
c00180b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b7:	8d 50 03             	lea    edx,[eax+0x3]
c00180ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c2:	0f b6 c0             	movzx  eax,al
c00180c5:	c1 e0 18             	shl    eax,0x18
c00180c8:	09 c8                	or     eax,ecx
c00180ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180ce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180db:	01 d0                	add    eax,edx
c00180dd:	83 c0 2c             	add    eax,0x2c
c00180e0:	8a 00                	mov    al,BYTE PTR [eax]
c00180e2:	0f b6 c0             	movzx  eax,al
c00180e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180e9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180f4:	0f b6 d2             	movzx  edx,dl
c00180f7:	c1 e2 08             	shl    edx,0x8
c00180fa:	09 d0                	or     eax,edx
c00180fc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018101:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018106:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001810b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001810f:	88 90 00 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2900],dl
c0018115:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001811a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001811f:	66 89 84 12 20 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf1e0],ax
c0018127:	e9 c7 00 00 00       	jmp    c00181f3 <scanMADT()+0x469>
c001812c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018131:	0f 85 b0 00 00 00    	jne    c00181e7 <scanMADT()+0x45d>
c0018137:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813b:	8d 50 01             	lea    edx,[eax+0x1]
c001813e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018142:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018146:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001814a:	0f b6 c0             	movzx  eax,al
c001814d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018151:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018155:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018159:	01 d0                	add    eax,edx
c001815b:	83 c0 2c             	add    eax,0x2c
c001815e:	8a 00                	mov    al,BYTE PTR [eax]
c0018160:	0f b6 d0             	movzx  edx,al
c0018163:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018167:	8d 48 01             	lea    ecx,[eax+0x1]
c001816a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018172:	0f b6 c0             	movzx  eax,al
c0018175:	c1 e0 08             	shl    eax,0x8
c0018178:	09 d0                	or     eax,edx
c001817a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001817e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018183:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018187:	8d 50 01             	lea    edx,[eax+0x1]
c001818a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001818e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018192:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018196:	0f b6 c0             	movzx  eax,al
c0018199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001819d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a1:	c1 e0 08             	shl    eax,0x8
c00181a4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181a8:	89 c1                	mov    ecx,eax
c00181aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181ae:	c1 e0 18             	shl    eax,0x18
c00181b1:	89 c3                	mov    ebx,eax
c00181b3:	a1 90 0d 03 c0       	mov    eax,ds:0xc0030d90
c00181b8:	8d 50 01             	lea    edx,[eax+0x1]
c00181bb:	89 15 90 0d 03 c0    	mov    DWORD PTR ds:0xc0030d90,edx
c00181c1:	09 d9                	or     ecx,ebx
c00181c3:	89 ca                	mov    edx,ecx
c00181c5:	89 14 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],edx
c00181cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181d8:	68 14 b6 02 c0       	push   0xc002b614
c00181dd:	e8 92 ad ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	eb 0c                	jmp    c00181f3 <scanMADT()+0x469>
c00181e7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181ec:	75 05                	jne    c00181f3 <scanMADT()+0x469>
c00181ee:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181f3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181fc:	01 d0                	add    eax,edx
c00181fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018202:	e9 54 fc ff ff       	jmp    c0017e5b <scanMADT()+0xd1>
c0018207:	90                   	nop
c0018208:	eb 01                	jmp    c001820b <scanMADT()+0x481>
c001820a:	90                   	nop
c001820b:	83 c4 38             	add    esp,0x38
c001820e:	5b                   	pop    ebx
c001820f:	c3                   	ret    

c0018210 <ACPI::ACPI()>:
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018217:	83 ec 08             	sub    esp,0x8
c001821a:	68 b7 b4 02 c0       	push   0xc002b4b7
c001821f:	50                   	push   eax
c0018220:	e8 65 c3 ff ff       	call   c001458a <Device::Device(char const*)>
c0018225:	83 c4 10             	add    esp,0x10
c0018228:	ba 88 b6 02 c0       	mov    edx,0xc002b688
c001822d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018231:	89 10                	mov    DWORD PTR [eax],edx
c0018233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018237:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001823e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018242:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001824c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018250:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001825a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001825e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018269:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018270:	e8 15 fb ff ff       	call   c0017d8a <scanMADT()>
c0018275:	90                   	nop
c0018276:	83 c4 0c             	add    esp,0xc
c0018279:	c3                   	ret    

c001827a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001827a:	83 ec 2c             	sub    esp,0x2c
c001827d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018281:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018285:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018289:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001828d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018292:	88 d0                	mov    al,dl
c0018294:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018298:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001829d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182a9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182af:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182b3:	0f 8d 97 00 00 00    	jge    c0018350 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c1:	83 c2 2a             	add    edx,0x2a
c00182c4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182c8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182cd:	75 78                	jne    c0018347 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182d7:	83 c2 2a             	add    edx,0x2a
c00182da:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182de:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182e2:	75 63                	jne    c0018347 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182e4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182e9:	74 3a                	je     c0018325 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f3:	83 c2 2a             	add    edx,0x2a
c00182f6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018301:	39 c2                	cmp    edx,eax
c0018303:	74 10                	je     c0018315 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018305:	83 ec 0c             	sub    esp,0xc
c0018308:	68 50 b6 02 c0       	push   0xc002b650
c001830d:	e8 0f 23 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0018312:	83 c4 10             	add    esp,0x10
c0018315:	83 ec 0c             	sub    esp,0xc
c0018318:	68 bc b4 02 c0       	push   0xc002b4bc
c001831d:	e8 ff 22 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0018322:	83 c4 10             	add    esp,0x10
c0018325:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018329:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001832d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018331:	83 c2 2a             	add    edx,0x2a
c0018334:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018338:	8b 02                	mov    eax,DWORD PTR [edx]
c001833a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001833d:	89 01                	mov    DWORD PTR [ecx],eax
c001833f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018342:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018347:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001834b:	e9 55 ff ff ff       	jmp    c00182a5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018350:	90                   	nop
c0018351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018355:	83 c4 2c             	add    esp,0x2c
c0018358:	c2 04 00             	ret    0x4
c001835b:	90                   	nop

c001835c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001835c:	83 ec 1c             	sub    esp,0x1c
c001835f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018363:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018367:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001836b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018370:	88 c8                	mov    al,cl
c0018372:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018376:	88 d0                	mov    al,dl
c0018378:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001837c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018380:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001838d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018391:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018399:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001839f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183a3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183aa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183b9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183bd:	8d 48 01             	lea    ecx,[eax+0x1]
c00183c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c4:	83 c2 2a             	add    edx,0x2a
c00183c7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183cf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183e0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183e8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183ee:	8d 50 01             	lea    edx,[eax+0x1]
c00183f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018405:	3d 00 02 00 00       	cmp    eax,0x200
c001840a:	75 10                	jne    c001841c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001840c:	83 ec 0c             	sub    esp,0xc
c001840f:	68 cb b4 02 c0       	push   0xc002b4cb
c0018414:	e8 08 22 00 00       	call   c001a621 <Krnl::panic(char const*)>
c0018419:	83 c4 10             	add    esp,0x10
c001841c:	90                   	nop
c001841d:	83 c4 1c             	add    esp,0x1c
c0018420:	c3                   	ret    
c0018421:	90                   	nop

c0018422 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018422:	b8 00 00 00 00       	mov    eax,0x0
c0018427:	c3                   	ret    

c0018428 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018428:	83 ec 1c             	sub    esp,0x1c
c001842b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001842f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018432:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018436:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001843b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018440:	83 ec 08             	sub    esp,0x8
c0018443:	52                   	push   edx
c0018444:	50                   	push   eax
c0018445:	e8 0e 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001844a:	83 c4 10             	add    esp,0x10
c001844d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018451:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0018456:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001845b:	83 ec 04             	sub    esp,0x4
c001845e:	6a 01                	push   0x1
c0018460:	52                   	push   edx
c0018461:	50                   	push   eax
c0018462:	e8 07 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	90                   	nop
c001846b:	83 c4 1c             	add    esp,0x1c
c001846e:	c3                   	ret    
c001846f:	90                   	nop

c0018470 <ACPI::open(int, int, void*)>:
c0018470:	53                   	push   ebx
c0018471:	83 ec 28             	sub    esp,0x28
c0018474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018478:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001847f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018483:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001848a:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001848f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018495:	83 e0 04             	and    eax,0x4
c0018498:	84 c0                	test   al,al
c001849a:	74 47                	je     c00184e3 <ACPI::open(int, int, void*)+0x73>
c001849c:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c00184a1:	83 ec 08             	sub    esp,0x8
c00184a4:	68 e8 b4 02 c0       	push   0xc002b4e8
c00184a9:	50                   	push   eax
c00184aa:	e8 3f f8 ff ff       	call   c0017cee <findDataTable(unsigned char*, char*)>
c00184af:	83 c4 10             	add    esp,0x10
c00184b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184bb:	74 26                	je     c00184e3 <ACPI::open(int, int, void*)+0x73>
c00184bd:	83 ec 0c             	sub    esp,0xc
c00184c0:	68 ed b4 02 c0       	push   0xc002b4ed
c00184c5:	e8 aa aa ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00184ca:	83 c4 10             	add    esp,0x10
c00184cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184dc:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184e3:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184ef:	8a 00                	mov    al,BYTE PTR [eax]
c00184f1:	3c 01                	cmp    al,0x1
c00184f3:	75 28                	jne    c001851d <ACPI::open(int, int, void*)+0xad>
c00184f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018504:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001850b:	83 ec 0c             	sub    esp,0xc
c001850e:	68 fe b4 02 c0       	push   0xc002b4fe
c0018513:	e8 5c aa ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018518:	83 c4 10             	add    esp,0x10
c001851b:	eb 25                	jmp    c0018542 <ACPI::open(int, int, void*)+0xd2>
c001851d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018521:	8a 00                	mov    al,BYTE PTR [eax]
c0018523:	3c 02                	cmp    al,0x2
c0018525:	75 1b                	jne    c0018542 <ACPI::open(int, int, void*)+0xd2>
c0018527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018532:	83 ec 0c             	sub    esp,0xc
c0018535:	68 06 b5 02 c0       	push   0xc002b506
c001853a:	e8 35 aa ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018546:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001854c:	83 f0 01             	xor    eax,0x1
c001854f:	84 c0                	test   al,al
c0018551:	74 6a                	je     c00185bd <ACPI::open(int, int, void*)+0x14d>
c0018553:	83 ec 0c             	sub    esp,0xc
c0018556:	68 0e b5 02 c0       	push   0xc002b50e
c001855b:	e8 14 aa ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	e8 e8 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018568:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001856c:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018571:	75 28                	jne    c001859b <ACPI::open(int, int, void*)+0x12b>
c0018573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018577:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001857e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018582:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018589:	83 ec 0c             	sub    esp,0xc
c001858c:	68 1c b5 02 c0       	push   0xc002b51c
c0018591:	e8 de a9 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018596:	83 c4 10             	add    esp,0x10
c0018599:	eb 22                	jmp    c00185bd <ACPI::open(int, int, void*)+0x14d>
c001859b:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185a0:	75 1b                	jne    c00185bd <ACPI::open(int, int, void*)+0x14d>
c00185a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a6:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ad:	83 ec 0c             	sub    esp,0xc
c00185b0:	68 26 b5 02 c0       	push   0xc002b526
c00185b5:	e8 ba a9 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00185ba:	83 c4 10             	add    esp,0x10
c00185bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c1:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c7:	84 c0                	test   al,al
c00185c9:	74 13                	je     c00185de <ACPI::open(int, int, void*)+0x16e>
c00185cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185cf:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185d5:	83 f0 01             	xor    eax,0x1
c00185d8:	0f b6 c0             	movzx  eax,al
c00185db:	40                   	inc    eax
c00185dc:	eb 05                	jmp    c00185e3 <ACPI::open(int, int, void*)+0x173>
c00185de:	b8 00 00 00 00       	mov    eax,0x0
c00185e3:	83 ec 08             	sub    esp,0x8
c00185e6:	50                   	push   eax
c00185e7:	68 30 b5 02 c0       	push   0xc002b530
c00185ec:	e8 83 a9 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185fe:	84 c0                	test   al,al
c0018600:	74 67                	je     c0018669 <ACPI::open(int, int, void*)+0x1f9>
c0018602:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001860a:	83 ec 0c             	sub    esp,0xc
c001860d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018611:	e8 2d 72 ff ff       	call   c000f843 <malloc>
c0018616:	83 c4 10             	add    esp,0x10
c0018619:	89 c3                	mov    ebx,eax
c001861b:	83 ec 0c             	sub    esp,0xc
c001861e:	53                   	push   ebx
c001861f:	e8 f6 a2 00 00       	call   c002291a <PCI::PCI()>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001862b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001862f:	83 ec 08             	sub    esp,0x8
c0018632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018636:	50                   	push   eax
c0018637:	e8 5e bd ff ff       	call   c001439a <Device::addChild(Device*)>
c001863c:	83 c4 10             	add    esp,0x10
c001863f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018643:	8b 00                	mov    eax,DWORD PTR [eax]
c0018645:	83 c0 08             	add    eax,0x8
c0018648:	8b 00                	mov    eax,DWORD PTR [eax]
c001864a:	6a 00                	push   0x0
c001864c:	6a 00                	push   0x0
c001864e:	6a 00                	push   0x0
c0018650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018654:	ff d0                	call   eax
c0018656:	83 c4 10             	add    esp,0x10
c0018659:	83 ec 0c             	sub    esp,0xc
c001865c:	68 39 b5 02 c0       	push   0xc002b539
c0018661:	e8 0e a9 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	83 ec 0c             	sub    esp,0xc
c001866c:	68 44 b5 02 c0       	push   0xc002b544
c0018671:	e8 81 46 00 00       	call   c001ccf7 <Thr::loadKernelSymbolTable(char const*)>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c001867f:	83 ec 08             	sub    esp,0x8
c0018682:	6a 01                	push   0x1
c0018684:	68 62 b5 02 c0       	push   0xc002b562
c0018689:	e8 c6 50 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	83 ec 08             	sub    esp,0x8
c0018694:	53                   	push   ebx
c0018695:	50                   	push   eax
c0018696:	e8 08 53 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c001869b:	83 c4 10             	add    esp,0x10
c001869e:	8b 1d a8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4a8
c00186a4:	83 ec 08             	sub    esp,0x8
c00186a7:	6a 01                	push   0x1
c00186a9:	68 7f b5 02 c0       	push   0xc002b57f
c00186ae:	e8 a1 50 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c00186b3:	83 c4 10             	add    esp,0x10
c00186b6:	83 ec 08             	sub    esp,0x8
c00186b9:	53                   	push   ebx
c00186ba:	50                   	push   eax
c00186bb:	e8 e3 52 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00186c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186ce:	83 e0 04             	and    eax,0x4
c00186d1:	84 c0                	test   al,al
c00186d3:	0f 84 d2 00 00 00    	je     c00187ab <ACPI::open(int, int, void*)+0x33b>
c00186d9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186e0:	83 ec 0c             	sub    esp,0xc
c00186e3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186e7:	e8 57 71 ff ff       	call   c000f843 <malloc>
c00186ec:	83 c4 10             	add    esp,0x10
c00186ef:	89 c3                	mov    ebx,eax
c00186f1:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c00186f6:	83 ec 04             	sub    esp,0x4
c00186f9:	50                   	push   eax
c00186fa:	68 9c b5 02 c0       	push   0xc002b59c
c00186ff:	53                   	push   ebx
c0018700:	e8 c7 ad ff ff       	call   c00134cc <File::File(char const*, Process*)>
c0018705:	83 c4 10             	add    esp,0x10
c0018708:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001870c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018711:	74 17                	je     c001872a <ACPI::open(int, int, void*)+0x2ba>
c0018713:	83 ec 0c             	sub    esp,0xc
c0018716:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001871a:	e8 7f b0 ff ff       	call   c001379e <File::exists()>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	84 c0                	test   al,al
c0018724:	74 04                	je     c001872a <ACPI::open(int, int, void*)+0x2ba>
c0018726:	b0 01                	mov    al,0x1
c0018728:	eb 02                	jmp    c001872c <ACPI::open(int, int, void*)+0x2bc>
c001872a:	b0 00                	mov    al,0x0
c001872c:	84 c0                	test   al,al
c001872e:	74 22                	je     c0018752 <ACPI::open(int, int, void*)+0x2e2>
c0018730:	83 ec 08             	sub    esp,0x8
c0018733:	6a 01                	push   0x1
c0018735:	68 9c b5 02 c0       	push   0xc002b59c
c001873a:	e8 15 50 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c001873f:	83 c4 10             	add    esp,0x10
c0018742:	83 ec 08             	sub    esp,0x8
c0018745:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018749:	50                   	push   eax
c001874a:	e8 54 52 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018757:	74 1e                	je     c0018777 <ACPI::open(int, int, void*)+0x307>
c0018759:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001875e:	74 17                	je     c0018777 <ACPI::open(int, int, void*)+0x307>
c0018760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018764:	8b 00                	mov    eax,DWORD PTR [eax]
c0018766:	83 c0 08             	add    eax,0x8
c0018769:	8b 00                	mov    eax,DWORD PTR [eax]
c001876b:	83 ec 0c             	sub    esp,0xc
c001876e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018772:	ff d0                	call   eax
c0018774:	83 c4 10             	add    esp,0x10
c0018777:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c001877c:	83 ec 08             	sub    esp,0x8
c001877f:	68 b9 b5 02 c0       	push   0xc002b5b9
c0018784:	50                   	push   eax
c0018785:	e8 64 f5 ff ff       	call   c0017cee <findDataTable(unsigned char*, char*)>
c001878a:	83 c4 10             	add    esp,0x10
c001878d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018791:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018796:	74 13                	je     c00187ab <ACPI::open(int, int, void*)+0x33b>
c0018798:	83 ec 08             	sub    esp,0x8
c001879b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001879f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187a3:	e8 80 fc ff ff       	call   c0018428 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	b8 00 00 00 00       	mov    eax,0x0
c00187b0:	83 c4 28             	add    esp,0x28
c00187b3:	5b                   	pop    ebx
c00187b4:	c3                   	ret    
c00187b5:	90                   	nop

c00187b6 <ACPI::sleep()>:
c00187b6:	83 ec 0c             	sub    esp,0xc
c00187b9:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c00187be:	85 c0                	test   eax,eax
c00187c0:	74 07                	je     c00187c9 <ACPI::sleep()+0x13>
c00187c2:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c00187c7:	ff d0                	call   eax
c00187c9:	90                   	nop
c00187ca:	83 c4 0c             	add    esp,0xc
c00187cd:	c3                   	ret    

c00187ce <CPU::close(int, int, void*)>:
c00187ce:	31 c0                	xor    eax,eax
c00187d0:	c3                   	ret    
c00187d1:	90                   	nop

c00187d2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187d2:	55                   	push   ebp
c00187d3:	57                   	push   edi
c00187d4:	56                   	push   esi
c00187d5:	53                   	push   ebx
c00187d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187de:	89 ce                	mov    esi,ecx
c00187e0:	89 d5                	mov    ebp,edx
c00187e2:	80 f9 04             	cmp    cl,0x4
c00187e5:	75 28                	jne    c001880f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187e7:	8d 42 f9             	lea    eax,[edx-0x7]
c00187ea:	3c 03                	cmp    al,0x3
c00187ec:	0f 86 63 01 00 00    	jbe    c0018955 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187f2:	80 fa 03             	cmp    dl,0x3
c00187f5:	0f 84 5a 01 00 00    	je     c0018955 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187fb:	8d 7a f2             	lea    edi,[edx-0xe]
c00187fe:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018803:	89 fb                	mov    ebx,edi
c0018805:	80 fb 01             	cmp    bl,0x1
c0018808:	77 4e                	ja     c0018858 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001880a:	e9 52 01 00 00       	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001880f:	80 f9 05             	cmp    cl,0x5
c0018812:	75 4d                	jne    c0018861 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018814:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018819:	80 fa 03             	cmp    dl,0x3
c001881c:	0f 86 3f 01 00 00    	jbe    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018822:	8d 7a fa             	lea    edi,[edx-0x6]
c0018825:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c001882a:	89 fb                	mov    ebx,edi
c001882c:	80 fb 01             	cmp    bl,0x1
c001882f:	0f 86 2c 01 00 00    	jbe    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018835:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c001883a:	80 fa 08             	cmp    dl,0x8
c001883d:	0f 84 1e 01 00 00    	je     c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018843:	89 d7                	mov    edi,edx
c0018845:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c001884a:	83 e7 fb             	and    edi,0xfffffffb
c001884d:	89 fb                	mov    ebx,edi
c001884f:	80 fb 09             	cmp    bl,0x9
c0018852:	0f 84 09 01 00 00    	je     c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018858:	31 c0                	xor    eax,eax
c001885a:	89 eb                	mov    ebx,ebp
c001885c:	0f b6 fb             	movzx  edi,bl
c001885f:	eb 30                	jmp    c0018891 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018861:	31 c0                	xor    eax,eax
c0018863:	80 f9 06             	cmp    cl,0x6
c0018866:	75 f2                	jne    c001885a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018868:	80 fa 0a             	cmp    dl,0xa
c001886b:	77 ed                	ja     c001885a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001886d:	bf de 05 00 00       	mov    edi,0x5de
c0018872:	0f a3 d7             	bt     edi,edx
c0018875:	73 e3                	jae    c001885a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018877:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c001887c:	e9 e0 00 00 00       	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018881:	39 c7                	cmp    edi,eax
c0018883:	0f 84 d3 00 00 00    	je     c001895c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018889:	40                   	inc    eax
c001888a:	3d d0 00 00 00       	cmp    eax,0xd0
c001888f:	74 09                	je     c001889a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018891:	89 f3                	mov    ebx,esi
c0018893:	80 fb 0f             	cmp    bl,0xf
c0018896:	75 f1                	jne    c0018889 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018898:	eb e7                	jmp    c0018881 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001889a:	80 f9 10             	cmp    cl,0x10
c001889d:	75 14                	jne    c00188b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001889f:	8d 42 fc             	lea    eax,[edx-0x4]
c00188a2:	83 e0 fb             	and    eax,0xfffffffb
c00188a5:	3c 02                	cmp    al,0x2
c00188a7:	76 34                	jbe    c00188dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188a9:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c00188ae:	80 fa 02             	cmp    dl,0x2
c00188b1:	eb 24                	jmp    c00188d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188b3:	80 f9 11             	cmp    cl,0x11
c00188b6:	75 13                	jne    c00188cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188b8:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c00188bd:	80 fa 03             	cmp    dl,0x3
c00188c0:	0f 85 9b 00 00 00    	jne    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c6:	e9 91 00 00 00       	jmp    c001895c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188cb:	80 f9 12             	cmp    cl,0x12
c00188ce:	75 14                	jne    c00188e4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188d0:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c00188d5:	fe ca                	dec    dl
c00188d7:	0f 85 84 00 00 00    	jne    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188dd:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00188e2:	eb 7d                	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e4:	80 f9 14             	cmp    cl,0x14
c00188e7:	75 12                	jne    c00188fb <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188e9:	4a                   	dec    edx
c00188ea:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c00188ef:	80 fa 01             	cmp    dl,0x1
c00188f2:	77 6d                	ja     c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f4:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c00188f9:	eb 66                	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fb:	80 f9 15             	cmp    cl,0x15
c00188fe:	75 31                	jne    c0018931 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018900:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018905:	80 fa 01             	cmp    dl,0x1
c0018908:	74 57                	je     c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890a:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c001890f:	80 fa 13             	cmp    dl,0x13
c0018912:	76 0c                	jbe    c0018920 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018914:	80 fa 30             	cmp    dl,0x30
c0018917:	75 48                	jne    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018919:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c001891e:	eb 41                	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018920:	b9 04 00 09 00       	mov    ecx,0x90004
c0018925:	0f a3 d1             	bt     ecx,edx
c0018928:	73 37                	jae    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892a:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c001892f:	eb 30                	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018931:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c0018936:	80 f9 16             	cmp    cl,0x16
c0018939:	75 26                	jne    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893b:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018940:	84 d2                	test   dl,dl
c0018942:	74 1d                	je     c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018944:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c0018949:	80 fa 30             	cmp    dl,0x30
c001894c:	75 13                	jne    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001894e:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018953:	eb 0c                	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018955:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001895a:	eb 05                	jmp    c0018961 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895c:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018961:	5b                   	pop    ebx
c0018962:	5e                   	pop    esi
c0018963:	5f                   	pop    edi
c0018964:	5d                   	pop    ebp
c0018965:	c3                   	ret    

c0018966 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018966:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001896a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001896e:	80 f9 04             	cmp    cl,0x4
c0018971:	75 6b                	jne    c00189de <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018973:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c0018978:	80 fa 01             	cmp    dl,0x1
c001897b:	0f 86 92 02 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018981:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018986:	80 fa 02             	cmp    dl,0x2
c0018989:	0f 84 84 02 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001898f:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018994:	80 fa 03             	cmp    dl,0x3
c0018997:	0f 84 76 02 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899d:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c00189a2:	80 fa 04             	cmp    dl,0x4
c00189a5:	0f 84 68 02 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ab:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c00189b0:	80 fa 05             	cmp    dl,0x5
c00189b3:	0f 84 5a 02 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b9:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c00189be:	80 fa 07             	cmp    dl,0x7
c00189c1:	0f 84 4c 02 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c7:	83 ea 08             	sub    edx,0x8
c00189ca:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c00189cf:	80 fa 01             	cmp    dl,0x1
c00189d2:	0f 87 3b 02 00 00    	ja     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d8:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c00189dd:	c3                   	ret    
c00189de:	80 f9 05             	cmp    cl,0x5
c00189e1:	75 45                	jne    c0018a28 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189e3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189e6:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00189eb:	80 f9 02             	cmp    cl,0x2
c00189ee:	0f 86 1f 02 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f4:	80 fa 04             	cmp    dl,0x4
c00189f7:	0f 84 f3 01 00 00    	je     c0018bf0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189fd:	80 fa 07             	cmp    dl,0x7
c0018a00:	0f 84 0d 02 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a06:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018a0b:	80 fa 08             	cmp    dl,0x8
c0018a0e:	0f 84 ff 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a14:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c0018a19:	80 fa 09             	cmp    dl,0x9
c0018a1c:	0f 85 f1 01 00 00    	jne    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a22:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a27:	c3                   	ret    
c0018a28:	80 f9 06             	cmp    cl,0x6
c0018a2b:	0f 85 85 01 00 00    	jne    c0018bb6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a31:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a36:	80 fa 01             	cmp    dl,0x1
c0018a39:	0f 84 d4 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a42:	3c 01                	cmp    al,0x1
c0018a44:	0f 86 ac 01 00 00    	jbe    c0018bf6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a4a:	80 fa 03             	cmp    dl,0x3
c0018a4d:	0f 84 a3 01 00 00    	je     c0018bf6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a53:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a56:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a5b:	80 f9 01             	cmp    cl,0x1
c0018a5e:	0f 86 af 01 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a64:	80 fa 09             	cmp    dl,0x9
c0018a67:	0f 84 8f 01 00 00    	je     c0018bfc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a6d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a70:	80 f9 01             	cmp    cl,0x1
c0018a73:	0f 86 9a 01 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a79:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a7e:	80 fa 0d             	cmp    dl,0xd
c0018a81:	0f 84 8c 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a87:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a8c:	80 fa 0e             	cmp    dl,0xe
c0018a8f:	0f 84 7e 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a95:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a9a:	80 fa 0f             	cmp    dl,0xf
c0018a9d:	0f 84 70 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa3:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018aa8:	80 fa 15             	cmp    dl,0x15
c0018aab:	0f 84 62 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab1:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018ab4:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018ab9:	80 f9 01             	cmp    cl,0x1
c0018abc:	0f 86 51 01 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac2:	80 fa 1a             	cmp    dl,0x1a
c0018ac5:	0f 84 37 01 00 00    	je     c0018c02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018acb:	80 fa 1c             	cmp    dl,0x1c
c0018ace:	0f 84 34 01 00 00    	je     c0018c08 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018ad4:	80 fa 1d             	cmp    dl,0x1d
c0018ad7:	0f 84 36 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018add:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018ae2:	80 fa 25             	cmp    dl,0x25
c0018ae5:	0f 84 28 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aeb:	8d 4a da             	lea    ecx,[edx-0x26]
c0018aee:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018af3:	80 f9 01             	cmp    cl,0x1
c0018af6:	0f 86 17 01 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afc:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b01:	80 fa 2a             	cmp    dl,0x2a
c0018b04:	0f 84 09 01 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0a:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b0f:	80 fa 2c             	cmp    dl,0x2c
c0018b12:	0f 84 fb 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b18:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b1d:	80 fa 2d             	cmp    dl,0x2d
c0018b20:	0f 84 ed 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b26:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018b2b:	80 fa 2e             	cmp    dl,0x2e
c0018b2e:	0f 84 df 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b34:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b39:	80 fa 2f             	cmp    dl,0x2f
c0018b3c:	0f 84 d1 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b42:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b45:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018b4a:	80 f9 01             	cmp    cl,0x1
c0018b4d:	0f 86 c0 00 00 00    	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b53:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018b58:	80 fa 37             	cmp    dl,0x37
c0018b5b:	0f 84 b2 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b61:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b66:	80 fa 3a             	cmp    dl,0x3a
c0018b69:	0f 84 a4 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6f:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b74:	80 fa 3c             	cmp    dl,0x3c
c0018b77:	0f 84 96 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7d:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b82:	80 fa 3d             	cmp    dl,0x3d
c0018b85:	0f 84 88 00 00 00    	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8b:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b90:	80 fa 3e             	cmp    dl,0x3e
c0018b93:	74 7e                	je     c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b95:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b98:	3c 01                	cmp    al,0x1
c0018b9a:	76 72                	jbe    c0018c0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b9c:	80 fa 3f             	cmp    dl,0x3f
c0018b9f:	74 6d                	je     c0018c0e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018ba1:	80 fa 4a             	cmp    dl,0x4a
c0018ba4:	74 0a                	je     c0018bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018ba6:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c0018bab:	80 fa 4d             	cmp    dl,0x4d
c0018bae:	75 63                	jne    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb0:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018bb5:	c3                   	ret    
c0018bb6:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c0018bbb:	80 f9 0b             	cmp    cl,0xb
c0018bbe:	75 0a                	jne    c0018bca <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018bc0:	fe ca                	dec    dl
c0018bc2:	75 4f                	jne    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc4:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018bc9:	c3                   	ret    
c0018bca:	80 f9 0f             	cmp    cl,0xf
c0018bcd:	75 44                	jne    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcf:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bd4:	80 fa 02             	cmp    dl,0x2
c0018bd7:	76 3a                	jbe    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd9:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bdc:	3c 01                	cmp    al,0x1
c0018bde:	76 0a                	jbe    c0018bea <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018be0:	b8 9e b9 02 c0       	mov    eax,0xc002b99e
c0018be5:	80 fa 06             	cmp    dl,0x6
c0018be8:	75 29                	jne    c0018c13 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bea:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018bef:	c3                   	ret    
c0018bf0:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018bf5:	c3                   	ret    
c0018bf6:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018bfb:	c3                   	ret    
c0018bfc:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018c01:	c3                   	ret    
c0018c02:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018c07:	c3                   	ret    
c0018c08:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018c0d:	c3                   	ret    
c0018c0e:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018c13:	c3                   	ret    

c0018c14 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c14:	60                   	pusha  
c0018c15:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c21:	9c                   	pushf  
c0018c22:	fa                   	cli    
c0018c23:	0f 09                	wbinvd 
c0018c25:	0f 30                	wrmsr  
c0018c27:	9d                   	popf   
c0018c28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c2c:	89 02                	mov    DWORD PTR [edx],eax
c0018c2e:	61                   	popa   
c0018c2f:	c3                   	ret    

c0018c30 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c30:	60                   	pusha  
c0018c31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c35:	9c                   	pushf  
c0018c36:	fa                   	cli    
c0018c37:	0f 09                	wbinvd 
c0018c39:	31 c0                	xor    eax,eax
c0018c3b:	31 d2                	xor    edx,edx
c0018c3d:	0f 32                	rdmsr  
c0018c3f:	9d                   	popf   
c0018c40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c44:	89 02                	mov    DWORD PTR [edx],eax
c0018c46:	61                   	popa   
c0018c47:	c3                   	ret    

c0018c48 <CPU::AMD_K6_writeback(int, int, int)>:
c0018c48:	56                   	push   esi
c0018c49:	53                   	push   ebx
c0018c4a:	83 ec 10             	sub    esp,0x10
c0018c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c51:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c56:	75 5d                	jne    c0018cb5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c58:	83 f8 08             	cmp    eax,0x8
c0018c5b:	75 09                	jne    c0018c66 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c5d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c62:	7e 13                	jle    c0018c77 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c64:	eb 30                	jmp    c0018c96 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c66:	83 f8 06             	cmp    eax,0x6
c0018c69:	7c 4a                	jl     c0018cb5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c6b:	83 f8 07             	cmp    eax,0x7
c0018c6e:	7e 07                	jle    c0018c77 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c70:	83 f8 09             	cmp    eax,0x9
c0018c73:	74 21                	je     c0018c96 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c75:	eb 3e                	jmp    c0018cb5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c77:	89 e6                	mov    esi,esp
c0018c79:	8b 1d e8 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e4e8
c0018c7f:	56                   	push   esi
c0018c80:	c1 eb 15             	shr    ebx,0x15
c0018c83:	68 82 00 00 c0       	push   0xc0000082
c0018c88:	83 e3 7e             	and    ebx,0x7e
c0018c8b:	e8 a0 ff ff ff       	call   c0018c30 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c90:	56                   	push   esi
c0018c91:	6a 00                	push   0x0
c0018c93:	53                   	push   ebx
c0018c94:	eb 12                	jmp    c0018ca8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c96:	89 e3                	mov    ebx,esp
c0018c98:	53                   	push   ebx
c0018c99:	68 82 00 00 c0       	push   0xc0000082
c0018c9e:	e8 8d ff ff ff       	call   c0018c30 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ca3:	53                   	push   ebx
c0018ca4:	6a 00                	push   0x0
c0018ca6:	6a 00                	push   0x0
c0018ca8:	68 82 00 00 c0       	push   0xc0000082
c0018cad:	e8 62 ff ff ff       	call   c0018c14 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cb2:	83 c4 18             	add    esp,0x18
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	5b                   	pop    ebx
c0018cb9:	5e                   	pop    esi
c0018cba:	c3                   	ret    
c0018cbb:	90                   	nop

c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018cbc:	55                   	push   ebp
c0018cbd:	57                   	push   edi
c0018cbe:	56                   	push   esi
c0018cbf:	53                   	push   ebx
c0018cc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cc8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ccc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cd0:	39 05 c0 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9c0,eax
c0018cd6:	75 23                	jne    c0018cfb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cd8:	a1 ec 0f 03 c0       	mov    eax,ds:0xc0030fec
c0018cdd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ce1:	89 06                	mov    DWORD PTR [esi],eax
c0018ce3:	a1 e8 0f 03 c0       	mov    eax,ds:0xc0030fe8
c0018ce8:	89 07                	mov    DWORD PTR [edi],eax
c0018cea:	a1 e4 0f 03 c0       	mov    eax,ds:0xc0030fe4
c0018cef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cf2:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c0018cf7:	89 02                	mov    DWORD PTR [edx],eax
c0018cf9:	eb 3f                	jmp    c0018d3a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cfb:	31 c9                	xor    ecx,ecx
c0018cfd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d01:	0f a2                	cpuid  
c0018d03:	89 06                	mov    DWORD PTR [esi],eax
c0018d05:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d0b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d0e:	89 10                	mov    DWORD PTR [eax],edx
c0018d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d14:	a3 c0 d9 02 c0       	mov    ds:0xc002d9c0,eax
c0018d19:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d1b:	a3 ec 0f 03 c0       	mov    ds:0xc0030fec,eax
c0018d20:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d22:	a3 e8 0f 03 c0       	mov    ds:0xc0030fe8,eax
c0018d27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d2a:	a3 e4 0f 03 c0       	mov    ds:0xc0030fe4,eax
c0018d2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d33:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d35:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c0018d3a:	5b                   	pop    ebx
c0018d3b:	5e                   	pop    esi
c0018d3c:	5f                   	pop    edi
c0018d3d:	5d                   	pop    ebp
c0018d3e:	c3                   	ret    
c0018d3f:	90                   	nop

c0018d40 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d40:	83 ec 10             	sub    esp,0x10
c0018d43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d47:	50                   	push   eax
c0018d48:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4c:	50                   	push   eax
c0018d4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d51:	50                   	push   eax
c0018d52:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d56:	50                   	push   eax
c0018d57:	6a 01                	push   0x1
c0018d59:	e8 5e ff ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d62:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d66:	0f 95 c0             	setne  al
c0018d69:	83 c4 24             	add    esp,0x24
c0018d6c:	c3                   	ret    
c0018d6d:	90                   	nop

c0018d6e <CPU::cpuidCheckECX(unsigned int)>:
c0018d6e:	83 ec 10             	sub    esp,0x10
c0018d71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d75:	50                   	push   eax
c0018d76:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7a:	50                   	push   eax
c0018d7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7f:	50                   	push   eax
c0018d80:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d84:	50                   	push   eax
c0018d85:	6a 01                	push   0x1
c0018d87:	e8 30 ff ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d90:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d94:	0f 95 c0             	setne  al
c0018d97:	83 c4 24             	add    esp,0x24
c0018d9a:	c3                   	ret    
c0018d9b:	90                   	nop

c0018d9c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d9c:	83 ec 10             	sub    esp,0x10
c0018d9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da3:	50                   	push   eax
c0018da4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da8:	50                   	push   eax
c0018da9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dad:	50                   	push   eax
c0018dae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db2:	50                   	push   eax
c0018db3:	6a 07                	push   0x7
c0018db5:	e8 02 ff ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dbe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018dc2:	0f 95 c0             	setne  al
c0018dc5:	83 c4 24             	add    esp,0x24
c0018dc8:	c3                   	ret    
c0018dc9:	90                   	nop

c0018dca <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018dca:	83 ec 10             	sub    esp,0x10
c0018dcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd1:	50                   	push   eax
c0018dd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd6:	50                   	push   eax
c0018dd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ddb:	50                   	push   eax
c0018ddc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de0:	50                   	push   eax
c0018de1:	6a 07                	push   0x7
c0018de3:	e8 d4 fe ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018de8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018df0:	0f 95 c0             	setne  al
c0018df3:	83 c4 24             	add    esp,0x24
c0018df6:	c3                   	ret    
c0018df7:	90                   	nop

c0018df8 <CPU::CPU()>:
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dff:	83 ec 08             	sub    esp,0x8
c0018e02:	68 9e b9 02 c0       	push   0xc002b99e
c0018e07:	50                   	push   eax
c0018e08:	e8 7d b7 ff ff       	call   c001458a <Device::Device(char const*)>
c0018e0d:	83 c4 10             	add    esp,0x10
c0018e10:	ba 78 ba 02 c0       	mov    edx,0xc002ba78
c0018e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e19:	89 10                	mov    DWORD PTR [eax],edx
c0018e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2d:	05 78 01 00 00       	add    eax,0x178
c0018e32:	83 ec 0c             	sub    esp,0xc
c0018e35:	50                   	push   eax
c0018e36:	e8 1d 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e3b:	83 c4 10             	add    esp,0x10
c0018e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e42:	05 7c 09 00 00       	add    eax,0x97c
c0018e47:	83 ec 0c             	sub    esp,0xc
c0018e4a:	50                   	push   eax
c0018e4b:	e8 6a 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e50:	83 c4 10             	add    esp,0x10
c0018e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e57:	05 7c 11 00 00       	add    eax,0x117c
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	50                   	push   eax
c0018e60:	e8 0f 86 ff ff       	call   c0011474 <TSS::TSS()>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e77:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e81:	90                   	nop
c0018e82:	83 c4 0c             	add    esp,0xc
c0018e85:	c3                   	ret    

c0018e86 <CPU::displayFeatures()>:
c0018e86:	53                   	push   ebx
c0018e87:	83 ec 10             	sub    esp,0x10
c0018e8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e8e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e94:	68 ac b6 02 c0       	push   0xc002b6ac
c0018e99:	e8 d6 a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018e9e:	59                   	pop    ecx
c0018e9f:	58                   	pop    eax
c0018ea0:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018ea6:	50                   	push   eax
c0018ea7:	68 bd b6 02 c0       	push   0xc002b6bd
c0018eac:	e8 c3 a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018eb1:	58                   	pop    eax
c0018eb2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eb8:	5a                   	pop    edx
c0018eb9:	c1 e8 0e             	shr    eax,0xe
c0018ebc:	0f b6 c0             	movzx  eax,al
c0018ebf:	50                   	push   eax
c0018ec0:	68 ce b6 02 c0       	push   0xc002b6ce
c0018ec5:	e8 aa a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018eca:	59                   	pop    ecx
c0018ecb:	58                   	pop    eax
c0018ecc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ed2:	66 c1 e8 06          	shr    ax,0x6
c0018ed6:	0f b6 c0             	movzx  eax,al
c0018ed9:	50                   	push   eax
c0018eda:	68 df b6 02 c0       	push   0xc002b6df
c0018edf:	e8 90 a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018ee4:	c7 04 24 8c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb8c
c0018eeb:	e8 84 a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018ef0:	83 c4 10             	add    esp,0x10
c0018ef3:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018ef8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018eff:	74 05                	je     c0018f06 <CPU::displayFeatures()+0x80>
c0018f01:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f06:	52                   	push   edx
c0018f07:	52                   	push   edx
c0018f08:	50                   	push   eax
c0018f09:	68 f0 b6 02 c0       	push   0xc002b6f0
c0018f0e:	e8 61 a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f1b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f22:	78 05                	js     c0018f29 <CPU::displayFeatures()+0xa3>
c0018f24:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f29:	51                   	push   ecx
c0018f2a:	51                   	push   ecx
c0018f2b:	50                   	push   eax
c0018f2c:	68 07 b7 02 c0       	push   0xc002b707
c0018f31:	e8 3e a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018f36:	83 c4 10             	add    esp,0x10
c0018f39:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f3e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f45:	75 05                	jne    c0018f4c <CPU::displayFeatures()+0xc6>
c0018f47:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f4c:	52                   	push   edx
c0018f4d:	52                   	push   edx
c0018f4e:	50                   	push   eax
c0018f4f:	68 1e b7 02 c0       	push   0xc002b71e
c0018f54:	e8 1b a0 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018f59:	83 c4 10             	add    esp,0x10
c0018f5c:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f61:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f68:	75 05                	jne    c0018f6f <CPU::displayFeatures()+0xe9>
c0018f6a:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f6f:	51                   	push   ecx
c0018f70:	51                   	push   ecx
c0018f71:	50                   	push   eax
c0018f72:	68 35 b7 02 c0       	push   0xc002b735
c0018f77:	e8 f8 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018f7c:	83 c4 10             	add    esp,0x10
c0018f7f:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018f84:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f8b:	75 05                	jne    c0018f92 <CPU::displayFeatures()+0x10c>
c0018f8d:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018f92:	52                   	push   edx
c0018f93:	52                   	push   edx
c0018f94:	50                   	push   eax
c0018f95:	68 4c b7 02 c0       	push   0xc002b74c
c0018f9a:	e8 d5 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018f9f:	83 c4 10             	add    esp,0x10
c0018fa2:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fa7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fae:	75 05                	jne    c0018fb5 <CPU::displayFeatures()+0x12f>
c0018fb0:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fb5:	51                   	push   ecx
c0018fb6:	51                   	push   ecx
c0018fb7:	50                   	push   eax
c0018fb8:	68 63 b7 02 c0       	push   0xc002b763
c0018fbd:	e8 b2 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fca:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fd1:	75 05                	jne    c0018fd8 <CPU::displayFeatures()+0x152>
c0018fd3:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018fd8:	52                   	push   edx
c0018fd9:	52                   	push   edx
c0018fda:	50                   	push   eax
c0018fdb:	68 7a b7 02 c0       	push   0xc002b77a
c0018fe0:	e8 8f 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0018fe5:	83 c4 10             	add    esp,0x10
c0018fe8:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0018fed:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018ff4:	75 05                	jne    c0018ffb <CPU::displayFeatures()+0x175>
c0018ff6:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0018ffb:	51                   	push   ecx
c0018ffc:	51                   	push   ecx
c0018ffd:	50                   	push   eax
c0018ffe:	68 91 b7 02 c0       	push   0xc002b791
c0019003:	e8 6c 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0019008:	83 c4 10             	add    esp,0x10
c001900b:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019010:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019017:	75 05                	jne    c001901e <CPU::displayFeatures()+0x198>
c0019019:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c001901e:	52                   	push   edx
c001901f:	52                   	push   edx
c0019020:	50                   	push   eax
c0019021:	68 a8 b7 02 c0       	push   0xc002b7a8
c0019026:	e8 49 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019033:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001903a:	75 05                	jne    c0019041 <CPU::displayFeatures()+0x1bb>
c001903c:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019041:	51                   	push   ecx
c0019042:	51                   	push   ecx
c0019043:	50                   	push   eax
c0019044:	68 bf b7 02 c0       	push   0xc002b7bf
c0019049:	e8 26 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001904e:	83 c4 10             	add    esp,0x10
c0019051:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019056:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001905d:	75 05                	jne    c0019064 <CPU::displayFeatures()+0x1de>
c001905f:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019064:	52                   	push   edx
c0019065:	52                   	push   edx
c0019066:	50                   	push   eax
c0019067:	68 d6 b7 02 c0       	push   0xc002b7d6
c001906c:	e8 03 9f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c0019079:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019080:	75 05                	jne    c0019087 <CPU::displayFeatures()+0x201>
c0019082:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c0019087:	51                   	push   ecx
c0019088:	51                   	push   ecx
c0019089:	50                   	push   eax
c001908a:	68 ed b7 02 c0       	push   0xc002b7ed
c001908f:	e8 e0 9e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c001909c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190a3:	75 05                	jne    c00190aa <CPU::displayFeatures()+0x224>
c00190a5:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190aa:	52                   	push   edx
c00190ab:	52                   	push   edx
c00190ac:	50                   	push   eax
c00190ad:	68 04 b8 02 c0       	push   0xc002b804
c00190b2:	e8 bd 9e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190bf:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190c6:	78 05                	js     c00190cd <CPU::displayFeatures()+0x247>
c00190c8:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190cd:	51                   	push   ecx
c00190ce:	51                   	push   ecx
c00190cf:	50                   	push   eax
c00190d0:	68 1b b8 02 c0       	push   0xc002b81b
c00190d5:	e8 9a 9e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00190da:	83 c4 10             	add    esp,0x10
c00190dd:	b8 52 a0 02 c0       	mov    eax,0xc002a052
c00190e2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190e9:	75 05                	jne    c00190f0 <CPU::displayFeatures()+0x26a>
c00190eb:	b8 56 a0 02 c0       	mov    eax,0xc002a056
c00190f0:	52                   	push   edx
c00190f1:	52                   	push   edx
c00190f2:	50                   	push   eax
c00190f3:	68 32 b8 02 c0       	push   0xc002b832
c00190f8:	e8 77 9e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00190fd:	83 c4 18             	add    esp,0x18
c0019100:	5b                   	pop    ebx
c0019101:	c3                   	ret    

c0019102 <CPU::detectFeatures()>:
c0019102:	55                   	push   ebp
c0019103:	57                   	push   edi
c0019104:	56                   	push   esi
c0019105:	53                   	push   ebx
c0019106:	83 ec 50             	sub    esp,0x50
c0019109:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001910d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019117:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001911e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019124:	6a 0d                	push   0xd
c0019126:	6a 00                	push   0x0
c0019128:	57                   	push   edi
c0019129:	e8 4a 76 fe ff       	call   c0000778 <memset>
c001912e:	83 c4 10             	add    esp,0x10
c0019131:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0019136:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001913d:	0f 84 20 09 00 00    	je     c0019a63 <CPU::detectFeatures()+0x961>
c0019143:	83 ec 0c             	sub    esp,0xc
c0019146:	6a 10                	push   0x10
c0019148:	e8 f3 fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c001914d:	83 e0 01             	and    eax,0x1
c0019150:	8d 14 00             	lea    edx,[eax+eax*1]
c0019153:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019159:	83 e0 fd             	and    eax,0xfffffffd
c001915c:	09 d0                	or     eax,edx
c001915e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019164:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001916b:	e8 d0 fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c0019170:	83 e0 01             	and    eax,0x1
c0019173:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001917a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019180:	83 e0 fb             	and    eax,0xfffffffb
c0019183:	09 d0                	or     eax,edx
c0019185:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019192:	e8 a9 fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c0019197:	83 e0 01             	and    eax,0x1
c001919a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191a1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a7:	83 e0 f7             	and    eax,0xfffffff7
c00191aa:	09 d0                	or     eax,edx
c00191ac:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191b9:	e8 82 fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c00191be:	83 e0 01             	and    eax,0x1
c00191c1:	c1 e0 04             	shl    eax,0x4
c00191c4:	88 c2                	mov    dl,al
c00191c6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191cc:	83 e0 ef             	and    eax,0xffffffef
c00191cf:	09 d0                	or     eax,edx
c00191d1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191de:	e8 5d fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c00191e3:	83 e0 01             	and    eax,0x1
c00191e6:	c1 e0 05             	shl    eax,0x5
c00191e9:	88 c2                	mov    dl,al
c00191eb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f1:	83 e0 df             	and    eax,0xffffffdf
c00191f4:	09 d0                	or     eax,edx
c00191f6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191fc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019203:	e8 38 fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c0019208:	83 e0 01             	and    eax,0x1
c001920b:	8d 14 00             	lea    edx,[eax+eax*1]
c001920e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019214:	83 e0 fd             	and    eax,0xfffffffd
c0019217:	09 d0                	or     eax,edx
c0019219:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001921f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019226:	e8 15 fb ff ff       	call   c0018d40 <CPU::cpuidCheckEDX(unsigned int)>
c001922b:	83 e0 01             	and    eax,0x1
c001922e:	c1 e0 06             	shl    eax,0x6
c0019231:	88 c2                	mov    dl,al
c0019233:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019239:	83 e0 bf             	and    eax,0xffffffbf
c001923c:	09 d0                	or     eax,edx
c001923e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019244:	58                   	pop    eax
c0019245:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019249:	56                   	push   esi
c001924a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001924e:	55                   	push   ebp
c001924f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019253:	50                   	push   eax
c0019254:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019258:	52                   	push   edx
c0019259:	6a 00                	push   0x0
c001925b:	e8 5c fa ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019260:	83 c4 1c             	add    esp,0x1c
c0019263:	6a 04                	push   0x4
c0019265:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019269:	50                   	push   eax
c001926a:	57                   	push   edi
c001926b:	e8 d4 74 fe ff       	call   c0000744 <memcpy>
c0019270:	83 c4 0c             	add    esp,0xc
c0019273:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019279:	6a 04                	push   0x4
c001927b:	56                   	push   esi
c001927c:	50                   	push   eax
c001927d:	e8 c2 74 fe ff       	call   c0000744 <memcpy>
c0019282:	83 c4 0c             	add    esp,0xc
c0019285:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001928b:	6a 04                	push   0x4
c001928d:	55                   	push   ebp
c001928e:	50                   	push   eax
c001928f:	e8 b0 74 fe ff       	call   c0000744 <memcpy>
c0019294:	58                   	pop    eax
c0019295:	5a                   	pop    edx
c0019296:	68 49 b8 02 c0       	push   0xc002b849
c001929b:	57                   	push   edi
c001929c:	e8 1f 76 fe ff       	call   c00008c0 <strcmp>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	85 c0                	test   eax,eax
c00192a6:	75 0f                	jne    c00192b7 <CPU::detectFeatures()+0x1b5>
c00192a8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192b2:	e9 22 02 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c00192b7:	50                   	push   eax
c00192b8:	50                   	push   eax
c00192b9:	68 56 b8 02 c0       	push   0xc002b856
c00192be:	57                   	push   edi
c00192bf:	e8 fc 75 fe ff       	call   c00008c0 <strcmp>
c00192c4:	83 c4 10             	add    esp,0x10
c00192c7:	85 c0                	test   eax,eax
c00192c9:	74 dd                	je     c00192a8 <CPU::detectFeatures()+0x1a6>
c00192cb:	51                   	push   ecx
c00192cc:	51                   	push   ecx
c00192cd:	68 63 b8 02 c0       	push   0xc002b863
c00192d2:	57                   	push   edi
c00192d3:	e8 e8 75 fe ff       	call   c00008c0 <strcmp>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	85 c0                	test   eax,eax
c00192dd:	74 2a                	je     c0019309 <CPU::detectFeatures()+0x207>
c00192df:	52                   	push   edx
c00192e0:	52                   	push   edx
c00192e1:	68 70 b8 02 c0       	push   0xc002b870
c00192e6:	57                   	push   edi
c00192e7:	e8 d4 75 fe ff       	call   c00008c0 <strcmp>
c00192ec:	83 c4 10             	add    esp,0x10
c00192ef:	85 c0                	test   eax,eax
c00192f1:	74 16                	je     c0019309 <CPU::detectFeatures()+0x207>
c00192f3:	50                   	push   eax
c00192f4:	50                   	push   eax
c00192f5:	68 7d b8 02 c0       	push   0xc002b87d
c00192fa:	57                   	push   edi
c00192fb:	e8 c0 75 fe ff       	call   c00008c0 <strcmp>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	85 c0                	test   eax,eax
c0019305:	74 48                	je     c001934f <CPU::detectFeatures()+0x24d>
c0019307:	eb 0f                	jmp    c0019318 <CPU::detectFeatures()+0x216>
c0019309:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019313:	e9 c1 01 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c0019318:	50                   	push   eax
c0019319:	50                   	push   eax
c001931a:	68 8a b8 02 c0       	push   0xc002b88a
c001931f:	57                   	push   edi
c0019320:	e8 9b 75 fe ff       	call   c00008c0 <strcmp>
c0019325:	83 c4 10             	add    esp,0x10
c0019328:	85 c0                	test   eax,eax
c001932a:	74 23                	je     c001934f <CPU::detectFeatures()+0x24d>
c001932c:	50                   	push   eax
c001932d:	50                   	push   eax
c001932e:	68 97 b8 02 c0       	push   0xc002b897
c0019333:	57                   	push   edi
c0019334:	e8 87 75 fe ff       	call   c00008c0 <strcmp>
c0019339:	83 c4 10             	add    esp,0x10
c001933c:	85 c0                	test   eax,eax
c001933e:	75 1e                	jne    c001935e <CPU::detectFeatures()+0x25c>
c0019340:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001934a:	e9 8a 01 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c001934f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019359:	e9 7b 01 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c001935e:	50                   	push   eax
c001935f:	50                   	push   eax
c0019360:	68 a4 b8 02 c0       	push   0xc002b8a4
c0019365:	57                   	push   edi
c0019366:	e8 55 75 fe ff       	call   c00008c0 <strcmp>
c001936b:	83 c4 10             	add    esp,0x10
c001936e:	85 c0                	test   eax,eax
c0019370:	75 0f                	jne    c0019381 <CPU::detectFeatures()+0x27f>
c0019372:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001937c:	e9 58 01 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c0019381:	50                   	push   eax
c0019382:	50                   	push   eax
c0019383:	68 63 b8 02 c0       	push   0xc002b863
c0019388:	57                   	push   edi
c0019389:	e8 32 75 fe ff       	call   c00008c0 <strcmp>
c001938e:	83 c4 10             	add    esp,0x10
c0019391:	85 c0                	test   eax,eax
c0019393:	75 0f                	jne    c00193a4 <CPU::detectFeatures()+0x2a2>
c0019395:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001939f:	e9 35 01 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c00193a4:	50                   	push   eax
c00193a5:	50                   	push   eax
c00193a6:	68 b1 b8 02 c0       	push   0xc002b8b1
c00193ab:	57                   	push   edi
c00193ac:	e8 0f 75 fe ff       	call   c00008c0 <strcmp>
c00193b1:	83 c4 10             	add    esp,0x10
c00193b4:	85 c0                	test   eax,eax
c00193b6:	75 0f                	jne    c00193c7 <CPU::detectFeatures()+0x2c5>
c00193b8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193c2:	e9 12 01 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c00193c7:	51                   	push   ecx
c00193c8:	51                   	push   ecx
c00193c9:	68 be b8 02 c0       	push   0xc002b8be
c00193ce:	57                   	push   edi
c00193cf:	e8 ec 74 fe ff       	call   c00008c0 <strcmp>
c00193d4:	83 c4 10             	add    esp,0x10
c00193d7:	85 c0                	test   eax,eax
c00193d9:	75 0f                	jne    c00193ea <CPU::detectFeatures()+0x2e8>
c00193db:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193e5:	e9 ef 00 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c00193ea:	52                   	push   edx
c00193eb:	52                   	push   edx
c00193ec:	68 cb b8 02 c0       	push   0xc002b8cb
c00193f1:	57                   	push   edi
c00193f2:	e8 c9 74 fe ff       	call   c00008c0 <strcmp>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	85 c0                	test   eax,eax
c00193fc:	75 0f                	jne    c001940d <CPU::detectFeatures()+0x30b>
c00193fe:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019408:	e9 cc 00 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c001940d:	50                   	push   eax
c001940e:	50                   	push   eax
c001940f:	68 d8 b8 02 c0       	push   0xc002b8d8
c0019414:	57                   	push   edi
c0019415:	e8 a6 74 fe ff       	call   c00008c0 <strcmp>
c001941a:	83 c4 10             	add    esp,0x10
c001941d:	85 c0                	test   eax,eax
c001941f:	75 0f                	jne    c0019430 <CPU::detectFeatures()+0x32e>
c0019421:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001942b:	e9 a9 00 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c0019430:	50                   	push   eax
c0019431:	50                   	push   eax
c0019432:	68 e5 b8 02 c0       	push   0xc002b8e5
c0019437:	57                   	push   edi
c0019438:	e8 83 74 fe ff       	call   c00008c0 <strcmp>
c001943d:	83 c4 10             	add    esp,0x10
c0019440:	85 c0                	test   eax,eax
c0019442:	75 0f                	jne    c0019453 <CPU::detectFeatures()+0x351>
c0019444:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001944e:	e9 86 00 00 00       	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c0019453:	50                   	push   eax
c0019454:	50                   	push   eax
c0019455:	68 f2 b8 02 c0       	push   0xc002b8f2
c001945a:	57                   	push   edi
c001945b:	e8 60 74 fe ff       	call   c00008c0 <strcmp>
c0019460:	83 c4 10             	add    esp,0x10
c0019463:	85 c0                	test   eax,eax
c0019465:	75 0c                	jne    c0019473 <CPU::detectFeatures()+0x371>
c0019467:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019471:	eb 66                	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c0019473:	50                   	push   eax
c0019474:	50                   	push   eax
c0019475:	68 ff b8 02 c0       	push   0xc002b8ff
c001947a:	57                   	push   edi
c001947b:	e8 40 74 fe ff       	call   c00008c0 <strcmp>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	85 c0                	test   eax,eax
c0019485:	75 0c                	jne    c0019493 <CPU::detectFeatures()+0x391>
c0019487:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019491:	eb 46                	jmp    c00194d9 <CPU::detectFeatures()+0x3d7>
c0019493:	50                   	push   eax
c0019494:	50                   	push   eax
c0019495:	68 0c b9 02 c0       	push   0xc002b90c
c001949a:	57                   	push   edi
c001949b:	e8 20 74 fe ff       	call   c00008c0 <strcmp>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	85 c0                	test   eax,eax
c00194a5:	74 e0                	je     c0019487 <CPU::detectFeatures()+0x385>
c00194a7:	50                   	push   eax
c00194a8:	50                   	push   eax
c00194a9:	68 19 b9 02 c0       	push   0xc002b919
c00194ae:	57                   	push   edi
c00194af:	e8 0c 74 fe ff       	call   c00008c0 <strcmp>
c00194b4:	83 c4 10             	add    esp,0x10
c00194b7:	85 c0                	test   eax,eax
c00194b9:	74 cc                	je     c0019487 <CPU::detectFeatures()+0x385>
c00194bb:	51                   	push   ecx
c00194bc:	51                   	push   ecx
c00194bd:	68 26 b9 02 c0       	push   0xc002b926
c00194c2:	57                   	push   edi
c00194c3:	e8 f8 73 fe ff       	call   c00008c0 <strcmp>
c00194c8:	83 c4 10             	add    esp,0x10
c00194cb:	85 c0                	test   eax,eax
c00194cd:	74 b8                	je     c0019487 <CPU::detectFeatures()+0x385>
c00194cf:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194d9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194de:	0f 86 be 00 00 00    	jbe    c00195a2 <CPU::detectFeatures()+0x4a0>
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	68 80 00 00 00       	push   0x80
c00194ec:	e8 ab f8 ff ff       	call   c0018d9c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194f1:	83 e0 01             	and    eax,0x1
c00194f4:	c1 e0 06             	shl    eax,0x6
c00194f7:	88 c2                	mov    dl,al
c00194f9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194ff:	83 e0 bf             	and    eax,0xffffffbf
c0019502:	09 d0                	or     eax,edx
c0019504:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001950a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019511:	e8 86 f8 ff ff       	call   c0018d9c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019516:	83 e0 01             	and    eax,0x1
c0019519:	c1 e0 04             	shl    eax,0x4
c001951c:	88 c2                	mov    dl,al
c001951e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019524:	83 e0 ef             	and    eax,0xffffffef
c0019527:	09 d0                	or     eax,edx
c0019529:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001952f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019536:	e8 61 f8 ff ff       	call   c0018d9c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001953b:	c1 e0 07             	shl    eax,0x7
c001953e:	88 c2                	mov    dl,al
c0019540:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019546:	83 e0 7f             	and    eax,0x7f
c0019549:	09 d0                	or     eax,edx
c001954b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019551:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019558:	e8 6d f8 ff ff       	call   c0018dca <CPU::cpuidCheckExtendedECX(unsigned int)>
c001955d:	83 e0 01             	and    eax,0x1
c0019560:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019567:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001956d:	83 e0 f7             	and    eax,0xfffffff7
c0019570:	09 d0                	or     eax,edx
c0019572:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019578:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001957f:	e8 46 f8 ff ff       	call   c0018dca <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	83 e0 01             	and    eax,0x1
c001958a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019591:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019597:	83 e0 fb             	and    eax,0xfffffffb
c001959a:	09 d0                	or     eax,edx
c001959c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195a2:	83 ec 0c             	sub    esp,0xc
c00195a5:	56                   	push   esi
c00195a6:	55                   	push   ebp
c00195a7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195ab:	57                   	push   edi
c00195ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195b0:	50                   	push   eax
c00195b1:	6a 01                	push   0x1
c00195b3:	e8 04 f7 ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195b8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195bc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195c2:	88 ca                	mov    dl,cl
c00195c4:	83 e0 f0             	and    eax,0xfffffff0
c00195c7:	83 e2 0f             	and    edx,0xf
c00195ca:	09 d0                	or     eax,edx
c00195cc:	88 ca                	mov    dl,cl
c00195ce:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195d4:	c0 ea 04             	shr    dl,0x4
c00195d7:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195db:	0f b6 c2             	movzx  eax,dl
c00195de:	83 c4 20             	add    esp,0x20
c00195e1:	c1 e0 06             	shl    eax,0x6
c00195e4:	89 c5                	mov    ebp,eax
c00195e6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ec:	66 25 3f c0          	and    ax,0xc03f
c00195f0:	09 e8                	or     eax,ebp
c00195f2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195f9:	89 c8                	mov    eax,ecx
c00195fb:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019601:	c1 e8 08             	shr    eax,0x8
c0019604:	83 e2 3f             	and    edx,0x3f
c0019607:	83 e0 0f             	and    eax,0xf
c001960a:	89 c5                	mov    ebp,eax
c001960c:	c1 e5 06             	shl    ebp,0x6
c001960f:	09 d5                	or     ebp,edx
c0019611:	89 ea                	mov    edx,ebp
c0019613:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019619:	88 c2                	mov    dl,al
c001961b:	c0 ea 02             	shr    dl,0x2
c001961e:	89 d5                	mov    ebp,edx
c0019620:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019626:	83 e2 c0             	and    edx,0xffffffc0
c0019629:	09 d5                	or     ebp,edx
c001962b:	89 ea                	mov    edx,ebp
c001962d:	89 cd                	mov    ebp,ecx
c001962f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019635:	c1 ed 0c             	shr    ebp,0xc
c0019638:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001963e:	83 e5 03             	and    ebp,0x3
c0019641:	83 e2 cf             	and    edx,0xffffffcf
c0019644:	c1 e5 04             	shl    ebp,0x4
c0019647:	09 d5                	or     ebp,edx
c0019649:	3c 06                	cmp    al,0x6
c001964b:	89 ea                	mov    edx,ebp
c001964d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019653:	74 04                	je     c0019659 <CPU::detectFeatures()+0x557>
c0019655:	3c 0f                	cmp    al,0xf
c0019657:	75 5c                	jne    c00196b5 <CPU::detectFeatures()+0x5b3>
c0019659:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001965d:	89 cd                	mov    ebp,ecx
c001965f:	c1 ed 10             	shr    ebp,0x10
c0019662:	c1 e5 04             	shl    ebp,0x4
c0019665:	09 ea                	or     edx,ebp
c0019667:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001966d:	0f b6 d2             	movzx  edx,dl
c0019670:	66 81 e5 3f c0       	and    bp,0xc03f
c0019675:	c1 e2 06             	shl    edx,0x6
c0019678:	09 ea                	or     edx,ebp
c001967a:	3c 0f                	cmp    al,0xf
c001967c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019683:	75 30                	jne    c00196b5 <CPU::detectFeatures()+0x5b3>
c0019685:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001968b:	c1 e9 14             	shr    ecx,0x14
c001968e:	83 e0 3f             	and    eax,0x3f
c0019691:	83 c1 0f             	add    ecx,0xf
c0019694:	88 ca                	mov    dl,cl
c0019696:	c0 e9 02             	shr    cl,0x2
c0019699:	c1 e2 06             	shl    edx,0x6
c001969c:	09 d0                	or     eax,edx
c001969e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196a4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196aa:	83 e0 c0             	and    eax,0xffffffc0
c00196ad:	09 c1                	or     ecx,eax
c00196af:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196b5:	83 ec 0c             	sub    esp,0xc
c00196b8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196bf:	56                   	push   esi
c00196c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196c4:	50                   	push   eax
c00196c5:	57                   	push   edi
c00196c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196ca:	55                   	push   ebp
c00196cb:	68 00 00 00 80       	push   0x80000000
c00196d0:	e8 e7 f5 ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196d5:	83 c4 20             	add    esp,0x20
c00196d8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196e4:	76 1e                	jbe    c0019704 <CPU::detectFeatures()+0x602>
c00196e6:	83 ec 0c             	sub    esp,0xc
c00196e9:	56                   	push   esi
c00196ea:	50                   	push   eax
c00196eb:	57                   	push   edi
c00196ec:	55                   	push   ebp
c00196ed:	68 01 00 00 80       	push   0x80000001
c00196f2:	e8 c5 f5 ff ff       	call   c0018cbc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196f7:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019701:	83 c4 20             	add    esp,0x20
c0019704:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001970a:	83 f8 01             	cmp    eax,0x1
c001970d:	75 6f                	jne    c001977e <CPU::detectFeatures()+0x67c>
c001970f:	51                   	push   ecx
c0019710:	51                   	push   ecx
c0019711:	68 32 b9 02 c0       	push   0xc002b932
c0019716:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001971a:	56                   	push   esi
c001971b:	e8 14 71 fe ff       	call   c0000834 <strcpy>
c0019720:	5f                   	pop    edi
c0019721:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019727:	5d                   	pop    ebp
c0019728:	66 c1 e8 06          	shr    ax,0x6
c001972c:	0f b6 c0             	movzx  eax,al
c001972f:	50                   	push   eax
c0019730:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019736:	c1 e8 0e             	shr    eax,0xe
c0019739:	0f b6 c0             	movzx  eax,al
c001973c:	50                   	push   eax
c001973d:	e8 24 f2 ff ff       	call   c0018966 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019742:	5a                   	pop    edx
c0019743:	59                   	pop    ecx
c0019744:	50                   	push   eax
c0019745:	56                   	push   esi
c0019746:	e8 29 72 fe ff       	call   c0000974 <strcat>
c001974b:	5f                   	pop    edi
c001974c:	5d                   	pop    ebp
c001974d:	56                   	push   esi
c001974e:	53                   	push   ebx
c001974f:	e8 28 ae ff ff       	call   c001457c <Device::setName(char const*)>
c0019754:	58                   	pop    eax
c0019755:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001975b:	5a                   	pop    edx
c001975c:	68 39 b9 02 c0       	push   0xc002b939
c0019761:	50                   	push   eax
c0019762:	e8 59 71 fe ff       	call   c00008c0 <strcmp>
c0019767:	83 c4 10             	add    esp,0x10
c001976a:	85 c0                	test   eax,eax
c001976c:	0f 85 71 03 00 00    	jne    c0019ae3 <CPU::detectFeatures()+0x9e1>
c0019772:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019779:	e9 65 03 00 00       	jmp    c0019ae3 <CPU::detectFeatures()+0x9e1>
c001977e:	83 f8 02             	cmp    eax,0x2
c0019781:	0f 85 b5 00 00 00    	jne    c001983c <CPU::detectFeatures()+0x73a>
c0019787:	57                   	push   edi
c0019788:	57                   	push   edi
c0019789:	68 4b b9 02 c0       	push   0xc002b94b
c001978e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019792:	56                   	push   esi
c0019793:	e8 9c 70 fe ff       	call   c0000834 <strcpy>
c0019798:	5d                   	pop    ebp
c0019799:	58                   	pop    eax
c001979a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a0:	66 c1 e8 06          	shr    ax,0x6
c00197a4:	0f b6 c0             	movzx  eax,al
c00197a7:	50                   	push   eax
c00197a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197ae:	c1 e8 0e             	shr    eax,0xe
c00197b1:	0f b6 c0             	movzx  eax,al
c00197b4:	50                   	push   eax
c00197b5:	e8 18 f0 ff ff       	call   c00187d2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197ba:	5a                   	pop    edx
c00197bb:	59                   	pop    ecx
c00197bc:	50                   	push   eax
c00197bd:	56                   	push   esi
c00197be:	e8 b1 71 fe ff       	call   c0000974 <strcat>
c00197c3:	5f                   	pop    edi
c00197c4:	5d                   	pop    ebp
c00197c5:	56                   	push   esi
c00197c6:	53                   	push   ebx
c00197c7:	e8 b0 ad ff ff       	call   c001457c <Device::setName(char const*)>
c00197cc:	58                   	pop    eax
c00197cd:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197d3:	5a                   	pop    edx
c00197d4:	68 50 b9 02 c0       	push   0xc002b950
c00197d9:	50                   	push   eax
c00197da:	e8 e1 70 fe ff       	call   c00008c0 <strcmp>
c00197df:	83 c4 10             	add    esp,0x10
c00197e2:	85 c0                	test   eax,eax
c00197e4:	75 20                	jne    c0019806 <CPU::detectFeatures()+0x704>
c00197e6:	8b 15 a8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a8
c00197ec:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197f2:	a8 01                	test   al,0x1
c00197f4:	74 10                	je     c0019806 <CPU::detectFeatures()+0x704>
c00197f6:	83 e0 fe             	and    eax,0xfffffffe
c00197f9:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00197ff:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019806:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001980c:	c1 e8 0e             	shr    eax,0xe
c001980f:	3c 05                	cmp    al,0x5
c0019811:	0f 85 cc 02 00 00    	jne    c0019ae3 <CPU::detectFeatures()+0x9e1>
c0019817:	56                   	push   esi
c0019818:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001981e:	83 e0 0f             	and    eax,0xf
c0019821:	50                   	push   eax
c0019822:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019828:	66 c1 e8 06          	shr    ax,0x6
c001982c:	0f b6 c0             	movzx  eax,al
c001982f:	50                   	push   eax
c0019830:	6a 05                	push   0x5
c0019832:	e8 11 f4 ff ff       	call   c0018c48 <CPU::AMD_K6_writeback(int, int, int)>
c0019837:	e9 1f 02 00 00       	jmp    c0019a5b <CPU::detectFeatures()+0x959>
c001983c:	8d 50 fd             	lea    edx,[eax-0x3]
c001983f:	83 fa 01             	cmp    edx,0x1
c0019842:	76 09                	jbe    c001984d <CPU::detectFeatures()+0x74b>
c0019844:	83 f8 06             	cmp    eax,0x6
c0019847:	0f 85 91 01 00 00    	jne    c00199de <CPU::detectFeatures()+0x8dc>
c001984d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019853:	c1 ea 0e             	shr    edx,0xe
c0019856:	80 fa 05             	cmp    dl,0x5
c0019859:	75 7b                	jne    c00198d6 <CPU::detectFeatures()+0x7d4>
c001985b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019861:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019866:	66 81 fa 00 01       	cmp    dx,0x100
c001986b:	75 0c                	jne    c0019879 <CPU::detectFeatures()+0x777>
c001986d:	51                   	push   ecx
c001986e:	51                   	push   ecx
c001986f:	68 57 b9 02 c0       	push   0xc002b957
c0019874:	e9 dc 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019879:	66 81 fa 00 02       	cmp    dx,0x200
c001987e:	75 0c                	jne    c001988c <CPU::detectFeatures()+0x78a>
c0019880:	52                   	push   edx
c0019881:	52                   	push   edx
c0019882:	68 6a b9 02 c0       	push   0xc002b96a
c0019887:	e9 c9 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c001988c:	66 81 fa 40 02       	cmp    dx,0x240
c0019891:	75 0c                	jne    c001989f <CPU::detectFeatures()+0x79d>
c0019893:	50                   	push   eax
c0019894:	50                   	push   eax
c0019895:	68 7c b9 02 c0       	push   0xc002b97c
c001989a:	e9 b6 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c001989f:	83 f8 06             	cmp    eax,0x6
c00198a2:	75 0c                	jne    c00198b0 <CPU::detectFeatures()+0x7ae>
c00198a4:	50                   	push   eax
c00198a5:	50                   	push   eax
c00198a6:	68 8e b9 02 c0       	push   0xc002b98e
c00198ab:	e9 a5 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00198b0:	83 f8 04             	cmp    eax,0x4
c00198b3:	75 0c                	jne    c00198c1 <CPU::detectFeatures()+0x7bf>
c00198b5:	50                   	push   eax
c00198b6:	50                   	push   eax
c00198b7:	68 9a b9 02 c0       	push   0xc002b99a
c00198bc:	e9 94 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00198c1:	83 f8 03             	cmp    eax,0x3
c00198c4:	0f 85 19 02 00 00    	jne    c0019ae3 <CPU::detectFeatures()+0x9e1>
c00198ca:	50                   	push   eax
c00198cb:	50                   	push   eax
c00198cc:	68 a2 b9 02 c0       	push   0xc002b9a2
c00198d1:	e9 7f 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00198d6:	80 fa 06             	cmp    dl,0x6
c00198d9:	0f 85 db 00 00 00    	jne    c00199ba <CPU::detectFeatures()+0x8b8>
c00198df:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198e5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198ea:	66 81 fa 80 01       	cmp    dx,0x180
c00198ef:	75 0c                	jne    c00198fd <CPU::detectFeatures()+0x7fb>
c00198f1:	50                   	push   eax
c00198f2:	50                   	push   eax
c00198f3:	68 ad b9 02 c0       	push   0xc002b9ad
c00198f8:	e9 58 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00198fd:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019903:	66 f7 c1 80 ff       	test   cx,0xff80
c0019908:	75 0c                	jne    c0019916 <CPU::detectFeatures()+0x814>
c001990a:	50                   	push   eax
c001990b:	50                   	push   eax
c001990c:	68 bd b9 02 c0       	push   0xc002b9bd
c0019911:	e9 3f 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019916:	66 81 fa 40 02       	cmp    dx,0x240
c001991b:	75 0c                	jne    c0019929 <CPU::detectFeatures()+0x827>
c001991d:	55                   	push   ebp
c001991e:	55                   	push   ebp
c001991f:	68 c4 b9 02 c0       	push   0xc002b9c4
c0019924:	e9 2c 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019929:	66 81 fa 80 02       	cmp    dx,0x280
c001992e:	75 0c                	jne    c001993c <CPU::detectFeatures()+0x83a>
c0019930:	57                   	push   edi
c0019931:	57                   	push   edi
c0019932:	68 cd b9 02 c0       	push   0xc002b9cd
c0019937:	e9 19 01 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c001993c:	66 81 fa 40 03       	cmp    dx,0x340
c0019941:	74 ed                	je     c0019930 <CPU::detectFeatures()+0x82e>
c0019943:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019948:	75 0c                	jne    c0019956 <CPU::detectFeatures()+0x854>
c001994a:	56                   	push   esi
c001994b:	56                   	push   esi
c001994c:	68 d4 b9 02 c0       	push   0xc002b9d4
c0019951:	e9 ff 00 00 00       	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019956:	83 f8 06             	cmp    eax,0x6
c0019959:	0f 84 45 ff ff ff    	je     c00198a4 <CPU::detectFeatures()+0x7a2>
c001995f:	83 f8 04             	cmp    eax,0x4
c0019962:	0f 84 4d ff ff ff    	je     c00198b5 <CPU::detectFeatures()+0x7b3>
c0019968:	83 f8 03             	cmp    eax,0x3
c001996b:	0f 85 72 01 00 00    	jne    c0019ae3 <CPU::detectFeatures()+0x9e1>
c0019971:	51                   	push   ecx
c0019972:	51                   	push   ecx
c0019973:	68 dd b9 02 c0       	push   0xc002b9dd
c0019978:	53                   	push   ebx
c0019979:	e8 fe ab ff ff       	call   c001457c <Device::setName(char const*)>
c001997e:	b1 c1                	mov    cl,0xc1
c0019980:	88 c8                	mov    al,cl
c0019982:	e6 22                	out    0x22,al
c0019984:	e4 23                	in     al,0x23
c0019986:	88 c2                	mov    dl,al
c0019988:	88 c8                	mov    al,cl
c001998a:	e6 22                	out    0x22,al
c001998c:	88 d0                	mov    al,dl
c001998e:	83 c8 10             	or     eax,0x10
c0019991:	e6 23                	out    0x23,al
c0019993:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001999a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001999d:	89 d0                	mov    eax,edx
c001999f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199a5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199a9:	40                   	inc    eax
c00199aa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199b5:	e9 a1 00 00 00       	jmp    c0019a5b <CPU::detectFeatures()+0x959>
c00199ba:	83 f8 06             	cmp    eax,0x6
c00199bd:	0f 84 e1 fe ff ff    	je     c00198a4 <CPU::detectFeatures()+0x7a2>
c00199c3:	83 f8 04             	cmp    eax,0x4
c00199c6:	0f 84 e9 fe ff ff    	je     c00198b5 <CPU::detectFeatures()+0x7b3>
c00199cc:	83 f8 03             	cmp    eax,0x3
c00199cf:	0f 85 0e 01 00 00    	jne    c0019ae3 <CPU::detectFeatures()+0x9e1>
c00199d5:	52                   	push   edx
c00199d6:	52                   	push   edx
c00199d7:	68 e8 b9 02 c0       	push   0xc002b9e8
c00199dc:	eb 77                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00199de:	83 f8 07             	cmp    eax,0x7
c00199e1:	75 09                	jne    c00199ec <CPU::detectFeatures()+0x8ea>
c00199e3:	50                   	push   eax
c00199e4:	50                   	push   eax
c00199e5:	68 f2 b9 02 c0       	push   0xc002b9f2
c00199ea:	eb 69                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00199ec:	83 f8 0a             	cmp    eax,0xa
c00199ef:	75 09                	jne    c00199fa <CPU::detectFeatures()+0x8f8>
c00199f1:	50                   	push   eax
c00199f2:	50                   	push   eax
c00199f3:	68 fd b9 02 c0       	push   0xc002b9fd
c00199f8:	eb 5b                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c00199fa:	83 f8 0b             	cmp    eax,0xb
c00199fd:	75 09                	jne    c0019a08 <CPU::detectFeatures()+0x906>
c00199ff:	50                   	push   eax
c0019a00:	50                   	push   eax
c0019a01:	68 05 ba 02 c0       	push   0xc002ba05
c0019a06:	eb 4d                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019a08:	83 f8 08             	cmp    eax,0x8
c0019a0b:	75 09                	jne    c0019a16 <CPU::detectFeatures()+0x914>
c0019a0d:	50                   	push   eax
c0019a0e:	50                   	push   eax
c0019a0f:	68 0e ba 02 c0       	push   0xc002ba0e
c0019a14:	eb 3f                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019a16:	83 f8 09             	cmp    eax,0x9
c0019a19:	75 09                	jne    c0019a24 <CPU::detectFeatures()+0x922>
c0019a1b:	50                   	push   eax
c0019a1c:	50                   	push   eax
c0019a1d:	68 16 ba 02 c0       	push   0xc002ba16
c0019a22:	eb 31                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019a24:	83 f8 05             	cmp    eax,0x5
c0019a27:	75 09                	jne    c0019a32 <CPU::detectFeatures()+0x930>
c0019a29:	50                   	push   eax
c0019a2a:	50                   	push   eax
c0019a2b:	68 1e ba 02 c0       	push   0xc002ba1e
c0019a30:	eb 23                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019a32:	83 f8 0c             	cmp    eax,0xc
c0019a35:	75 09                	jne    c0019a40 <CPU::detectFeatures()+0x93e>
c0019a37:	55                   	push   ebp
c0019a38:	55                   	push   ebp
c0019a39:	68 2c ba 02 c0       	push   0xc002ba2c
c0019a3e:	eb 15                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019a40:	83 f8 0d             	cmp    eax,0xd
c0019a43:	75 09                	jne    c0019a4e <CPU::detectFeatures()+0x94c>
c0019a45:	57                   	push   edi
c0019a46:	57                   	push   edi
c0019a47:	68 37 ba 02 c0       	push   0xc002ba37
c0019a4c:	eb 07                	jmp    c0019a55 <CPU::detectFeatures()+0x953>
c0019a4e:	56                   	push   esi
c0019a4f:	56                   	push   esi
c0019a50:	68 4b ba 02 c0       	push   0xc002ba4b
c0019a55:	53                   	push   ebx
c0019a56:	e8 21 ab ff ff       	call   c001457c <Device::setName(char const*)>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	e9 80 00 00 00       	jmp    c0019ae3 <CPU::detectFeatures()+0x9e1>
c0019a63:	51                   	push   ecx
c0019a64:	51                   	push   ecx
c0019a65:	68 97 b8 02 c0       	push   0xc002b897
c0019a6a:	57                   	push   edi
c0019a6b:	e8 c4 6d fe ff       	call   c0000834 <strcpy>
c0019a70:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a7a:	e8 2f 68 fe ff       	call   c00002ae <is486>
c0019a7f:	83 c4 10             	add    esp,0x10
c0019a82:	85 c0                	test   eax,eax
c0019a84:	74 2b                	je     c0019ab1 <CPU::detectFeatures()+0x9af>
c0019a86:	52                   	push   edx
c0019a87:	52                   	push   edx
c0019a88:	68 57 ba 02 c0       	push   0xc002ba57
c0019a8d:	53                   	push   ebx
c0019a8e:	e8 e9 aa ff ff       	call   c001457c <Device::setName(char const*)>
c0019a93:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a9a:	0f 20 c0             	mov    eax,cr0
c0019a9d:	83 e0 14             	and    eax,0x14
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	83 f8 04             	cmp    eax,0x4
c0019aa6:	75 1f                	jne    c0019ac7 <CPU::detectFeatures()+0x9c5>
c0019aa8:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019aaf:	eb 32                	jmp    c0019ae3 <CPU::detectFeatures()+0x9e1>
c0019ab1:	50                   	push   eax
c0019ab2:	50                   	push   eax
c0019ab3:	68 62 ba 02 c0       	push   0xc002ba62
c0019ab8:	53                   	push   ebx
c0019ab9:	e8 be aa ff ff       	call   c001457c <Device::setName(char const*)>
c0019abe:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ac5:	eb d3                	jmp    c0019a9a <CPU::detectFeatures()+0x998>
c0019ac7:	e8 bd 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019acc:	83 e0 01             	and    eax,0x1
c0019acf:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ad2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ad8:	83 e0 fd             	and    eax,0xfffffffd
c0019adb:	09 d0                	or     eax,edx
c0019add:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ae3:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019aea:	83 c4 4c             	add    esp,0x4c
c0019aed:	5b                   	pop    ebx
c0019aee:	5e                   	pop    esi
c0019aef:	5f                   	pop    edi
c0019af0:	5d                   	pop    ebp
c0019af1:	c3                   	ret    

c0019af2 <CPU::setupSMEP()>:
c0019af2:	0f 20 e0             	mov    eax,cr4
c0019af5:	0d 00 00 10 00       	or     eax,0x100000
c0019afa:	0f 22 e0             	mov    cr4,eax
c0019afd:	c3                   	ret    

c0019afe <CPU::setupUMIP()>:
c0019afe:	0f 20 e0             	mov    eax,cr4
c0019b01:	80 cc 08             	or     ah,0x8
c0019b04:	0f 22 e0             	mov    cr4,eax
c0019b07:	c3                   	ret    

c0019b08 <CPU::setupTSC()>:
c0019b08:	0f 20 e0             	mov    eax,cr4
c0019b0b:	83 c8 04             	or     eax,0x4
c0019b0e:	0f 22 e0             	mov    cr4,eax
c0019b11:	c3                   	ret    

c0019b12 <CPU::setupLargePages()>:
c0019b12:	0f 20 e0             	mov    eax,cr4
c0019b15:	83 c8 10             	or     eax,0x10
c0019b18:	0f 22 e0             	mov    cr4,eax
c0019b1b:	c3                   	ret    

c0019b1c <CPU::setupPAT()>:
c0019b1c:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0019b21:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b28:	74 2c                	je     c0019b56 <CPU::setupPAT()+0x3a>
c0019b2a:	53                   	push   ebx
c0019b2b:	83 ec 10             	sub    esp,0x10
c0019b2e:	68 77 02 00 00       	push   0x277
c0019b33:	50                   	push   eax
c0019b34:	e8 af 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b39:	83 e2 f8             	and    edx,0xfffffff8
c0019b3c:	83 ca 01             	or     edx,0x1
c0019b3f:	52                   	push   edx
c0019b40:	50                   	push   eax
c0019b41:	68 77 02 00 00       	push   0x277
c0019b46:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c0019b4c:	e8 c3 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b51:	83 c4 28             	add    esp,0x28
c0019b54:	5b                   	pop    ebx
c0019b55:	c3                   	ret    
c0019b56:	c3                   	ret    
c0019b57:	90                   	nop

c0019b58 <CPU::setupMTRR()>:
c0019b58:	c3                   	ret    
c0019b59:	90                   	nop

c0019b5a <CPU::setupGlobalPages()>:
c0019b5a:	0f 20 e0             	mov    eax,cr4
c0019b5d:	0c 80                	or     al,0x80
c0019b5f:	0f 22 e0             	mov    cr4,eax
c0019b62:	c3                   	ret    
c0019b63:	90                   	nop

c0019b64 <CPU::allowUsermodeDataAccess()>:
c0019b64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b68:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b6f:	74 03                	je     c0019b74 <CPU::allowUsermodeDataAccess()+0x10>
c0019b71:	0f 01 cb             	stac   
c0019b74:	c3                   	ret    
c0019b75:	90                   	nop

c0019b76 <CPU::prohibitUsermodeDataAccess()>:
c0019b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b7a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b81:	74 03                	je     c0019b86 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b83:	0f 01 ca             	clac   
c0019b86:	c3                   	ret    
c0019b87:	90                   	nop

c0019b88 <CPU::setupSMAP()>:
c0019b88:	0f 20 e0             	mov    eax,cr4
c0019b8b:	0d 00 00 20 00       	or     eax,0x200000
c0019b90:	0f 22 e0             	mov    cr4,eax
c0019b93:	eb e1                	jmp    c0019b76 <CPU::prohibitUsermodeDataAccess()>
c0019b95:	90                   	nop

c0019b96 <CPU::setupFeatures()>:
c0019b96:	83 ec 0c             	sub    esp,0xc
c0019b99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b9d:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019ba4:	74 07                	je     c0019bad <CPU::setupFeatures()+0x17>
c0019ba6:	52                   	push   edx
c0019ba7:	e8 46 ff ff ff       	call   c0019af2 <CPU::setupSMEP()>
c0019bac:	58                   	pop    eax
c0019bad:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bb4:	74 07                	je     c0019bbd <CPU::setupFeatures()+0x27>
c0019bb6:	52                   	push   edx
c0019bb7:	e8 cc ff ff ff       	call   c0019b88 <CPU::setupSMAP()>
c0019bbc:	58                   	pop    eax
c0019bbd:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bc4:	74 07                	je     c0019bcd <CPU::setupFeatures()+0x37>
c0019bc6:	52                   	push   edx
c0019bc7:	e8 32 ff ff ff       	call   c0019afe <CPU::setupUMIP()>
c0019bcc:	58                   	pop    eax
c0019bcd:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bd4:	74 07                	je     c0019bdd <CPU::setupFeatures()+0x47>
c0019bd6:	52                   	push   edx
c0019bd7:	e8 2c ff ff ff       	call   c0019b08 <CPU::setupTSC()>
c0019bdc:	58                   	pop    eax
c0019bdd:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019be4:	74 07                	je     c0019bed <CPU::setupFeatures()+0x57>
c0019be6:	52                   	push   edx
c0019be7:	e8 26 ff ff ff       	call   c0019b12 <CPU::setupLargePages()>
c0019bec:	59                   	pop    ecx
c0019bed:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bf4:	74 07                	je     c0019bfd <CPU::setupFeatures()+0x67>
c0019bf6:	52                   	push   edx
c0019bf7:	e8 5e ff ff ff       	call   c0019b5a <CPU::setupGlobalPages()>
c0019bfc:	58                   	pop    eax
c0019bfd:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c04:	74 0c                	je     c0019c12 <CPU::setupFeatures()+0x7c>
c0019c06:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c0a:	83 c4 0c             	add    esp,0xc
c0019c0d:	e9 0a ff ff ff       	jmp    c0019b1c <CPU::setupPAT()>
c0019c12:	83 c4 0c             	add    esp,0xc
c0019c15:	c3                   	ret    

c0019c16 <CPU::open(int, int, void*)>:
c0019c16:	57                   	push   edi
c0019c17:	56                   	push   esi
c0019c18:	53                   	push   ebx
c0019c19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c1d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c21:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c27:	83 ec 0c             	sub    esp,0xc
c0019c2a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c30:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c36:	50                   	push   eax
c0019c37:	e8 98 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c3c:	83 c4 0c             	add    esp,0xc
c0019c3f:	6a 00                	push   0x0
c0019c41:	68 ef be ad de       	push   0xdeadbeef
c0019c46:	57                   	push   edi
c0019c47:	e8 68 78 ff ff       	call   c00114b4 <TSS::setup(unsigned long, unsigned long)>
c0019c4c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c4f:	e8 40 78 ff ff       	call   c0011494 <TSS::flush()>
c0019c54:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c5d:	e8 ce 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c62:	b8 00 04 00 00       	mov    eax,0x400
c0019c67:	0f 23 f8             	mov    db7,eax
c0019c6a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c74:	e8 6c 62 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019c79:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c7f:	89 30                	mov    DWORD PTR [eax],esi
c0019c81:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c87:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c8a:	58                   	pop    eax
c0019c8b:	5a                   	pop    edx
c0019c8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c96:	e8 6d 89 ff ff       	call   c0012608 <VAS::setCPUSpecific(unsigned long)>
c0019c9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c9e:	e8 5f f4 ff ff       	call   c0019102 <CPU::detectFeatures()>
c0019ca3:	e8 ce bc ff ff       	call   c0015976 <setupInterruptController()>
c0019ca8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cae:	a1 c0 e4 02 c0       	mov    eax,ds:0xc002e4c0
c0019cb3:	83 e0 10             	and    eax,0x10
c0019cb6:	83 f8 01             	cmp    eax,0x1
c0019cb9:	19 c0                	sbb    eax,eax
c0019cbb:	83 e0 46             	and    eax,0x46
c0019cbe:	83 c0 1e             	add    eax,0x1e
c0019cc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cc4:	e8 bb d1 ff ff       	call   c0016e84 <setupTimer(int)>
c0019cc9:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cd2:	e8 bf fe ff ff       	call   c0019b96 <CPU::setupFeatures()>
c0019cd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cda:	e8 a7 f1 ff ff       	call   c0018e86 <CPU::displayFeatures()>
c0019cdf:	83 c4 10             	add    esp,0x10
c0019ce2:	31 c0                	xor    eax,eax
c0019ce4:	5b                   	pop    ebx
c0019ce5:	5e                   	pop    esi
c0019ce6:	5f                   	pop    edi
c0019ce7:	c3                   	ret    

c0019ce8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ce8:	57                   	push   edi
c0019ce9:	56                   	push   esi
c0019cea:	53                   	push   ebx
c0019ceb:	51                   	push   ecx
c0019cec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cf0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cf3:	0f 02 c0             	lar    eax,ax
c0019cf6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cf9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cfd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d00:	88 ca                	mov    dl,cl
c0019d02:	c0 ea 06             	shr    dl,0x6
c0019d05:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d09:	89 ca                	mov    edx,ecx
c0019d0b:	66 c1 ea 03          	shr    dx,0x3
c0019d0f:	83 e2 07             	and    edx,0x7
c0019d12:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d17:	88 17                	mov    BYTE PTR [edi],dl
c0019d19:	0f 84 a6 01 00 00    	je     c0019ec5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d1f:	83 e1 07             	and    ecx,0x7
c0019d22:	80 f9 04             	cmp    cl,0x4
c0019d25:	0f 84 98 00 00 00    	je     c0019dc3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d2b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d30:	0f 95 c0             	setne  al
c0019d33:	80 f9 05             	cmp    cl,0x5
c0019d36:	0f 95 c2             	setne  dl
c0019d39:	08 c2                	or     dl,al
c0019d3b:	74 79                	je     c0019db6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d3d:	84 c9                	test   cl,cl
c0019d3f:	75 05                	jne    c0019d46 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d41:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d44:	eb 3c                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d46:	80 f9 01             	cmp    cl,0x1
c0019d49:	75 05                	jne    c0019d50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d4b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d4e:	eb 32                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d50:	80 f9 02             	cmp    cl,0x2
c0019d53:	75 05                	jne    c0019d5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d55:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d58:	eb 28                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d5a:	31 c0                	xor    eax,eax
c0019d5c:	80 f9 03             	cmp    cl,0x3
c0019d5f:	75 05                	jne    c0019d66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d61:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d64:	eb 1c                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d66:	80 f9 05             	cmp    cl,0x5
c0019d69:	75 05                	jne    c0019d70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d6b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d6e:	eb 12                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d70:	80 f9 06             	cmp    cl,0x6
c0019d73:	75 05                	jne    c0019d7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d78:	eb 08                	jmp    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d7a:	80 f9 07             	cmp    cl,0x7
c0019d7d:	75 03                	jne    c0019d82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d7f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d82:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d87:	75 10                	jne    c0019d99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d89:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d8d:	b9 03 00 00 00       	mov    ecx,0x3
c0019d92:	01 d0                	add    eax,edx
c0019d94:	e9 37 01 00 00       	jmp    c0019ed0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d99:	b9 02 00 00 00       	mov    ecx,0x2
c0019d9e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019da3:	0f 85 27 01 00 00    	jne    c0019ed0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019da9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dac:	b9 06 00 00 00       	mov    ecx,0x6
c0019db1:	e9 1a 01 00 00       	jmp    c0019ed0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019db6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019db9:	b9 06 00 00 00       	mov    ecx,0x6
c0019dbe:	e9 0f 01 00 00       	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dc3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dc6:	88 ca                	mov    dl,cl
c0019dc8:	c0 ea 06             	shr    dl,0x6
c0019dcb:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019dcf:	89 ca                	mov    edx,ecx
c0019dd1:	66 c1 ea 03          	shr    dx,0x3
c0019dd5:	83 e2 07             	and    edx,0x7
c0019dd8:	80 e1 07             	and    cl,0x7
c0019ddb:	75 05                	jne    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ddd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019de0:	eb 4c                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de2:	80 f9 01             	cmp    cl,0x1
c0019de5:	75 05                	jne    c0019dec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019de7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dea:	eb 42                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dec:	80 f9 02             	cmp    cl,0x2
c0019def:	75 05                	jne    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019df1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019df4:	eb 38                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df6:	80 f9 03             	cmp    cl,0x3
c0019df9:	75 05                	jne    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dfb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019dfe:	eb 2e                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e00:	80 f9 04             	cmp    cl,0x4
c0019e03:	75 12                	jne    c0019e17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e05:	f6 c4 60             	test   ah,0x60
c0019e08:	75 08                	jne    c0019e12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e0a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e0d:	8d 78 14             	lea    edi,[eax+0x14]
c0019e10:	eb 1c                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e12:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e15:	eb 17                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e17:	80 f9 05             	cmp    cl,0x5
c0019e1a:	75 05                	jne    c0019e21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e1c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e1f:	eb 0d                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e21:	80 f9 06             	cmp    cl,0x6
c0019e24:	75 05                	jne    c0019e2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e26:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e29:	eb 03                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e2b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e2e:	84 d2                	test   dl,dl
c0019e30:	75 05                	jne    c0019e37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e32:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e35:	eb 3c                	jmp    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e37:	80 fa 01             	cmp    dl,0x1
c0019e3a:	75 05                	jne    c0019e41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e3c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e3f:	eb 32                	jmp    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e41:	80 fa 02             	cmp    dl,0x2
c0019e44:	75 05                	jne    c0019e4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e46:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e49:	eb 28                	jmp    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4b:	80 fa 03             	cmp    dl,0x3
c0019e4e:	75 05                	jne    c0019e55 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e50:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e53:	eb 1e                	jmp    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e55:	31 c0                	xor    eax,eax
c0019e57:	80 fa 04             	cmp    dl,0x4
c0019e5a:	74 17                	je     c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5c:	80 fa 05             	cmp    dl,0x5
c0019e5f:	75 05                	jne    c0019e66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e61:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e64:	eb 0d                	jmp    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e66:	80 fa 06             	cmp    dl,0x6
c0019e69:	75 05                	jne    c0019e70 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e6b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e6e:	eb 03                	jmp    c0019e73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e70:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e73:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e78:	0f 94 c2             	sete   dl
c0019e7b:	80 f9 05             	cmp    cl,0x5
c0019e7e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e82:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e87:	d3 e0                	shl    eax,cl
c0019e89:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e8d:	74 0a                	je     c0019e99 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e8f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e92:	b9 07 00 00 00       	mov    ecx,0x7
c0019e97:	eb 37                	jmp    c0019ed0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e99:	01 f8                	add    eax,edi
c0019e9b:	b9 03 00 00 00       	mov    ecx,0x3
c0019ea0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ea5:	74 2b                	je     c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019eac:	75 0d                	jne    c0019ebb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019eae:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019eb2:	01 c8                	add    eax,ecx
c0019eb4:	b9 04 00 00 00       	mov    ecx,0x4
c0019eb9:	eb 17                	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ebb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ebe:	b9 07 00 00 00       	mov    ecx,0x7
c0019ec3:	eb 0d                	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ec5:	b9 02 00 00 00       	mov    ecx,0x2
c0019eca:	b2 01                	mov    dl,0x1
c0019ecc:	31 c0                	xor    eax,eax
c0019ece:	eb 02                	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ed0:	31 d2                	xor    edx,edx
c0019ed2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ed6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019ed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019edc:	88 11                	mov    BYTE PTR [ecx],dl
c0019ede:	5a                   	pop    edx
c0019edf:	5b                   	pop    ebx
c0019ee0:	5e                   	pop    esi
c0019ee1:	5f                   	pop    edi
c0019ee2:	c3                   	ret    

c0019ee3 <Krnl::smpEntry()>:
c0019ee3:	eb fe                	jmp    c0019ee3 <Krnl::smpEntry()>

c0019ee5 <Krnl::startCPU(int)>:
c0019ee5:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0019eea:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ef1:	0f 84 36 01 00 00    	je     c001a02d <Krnl::startCPU(int)+0x148>
c0019ef7:	53                   	push   ebx
c0019ef8:	83 ec 08             	sub    esp,0x8
c0019efb:	e8 16 3f 00 00       	call   c001de16 <lockScheduler()>
c0019f00:	52                   	push   edx
c0019f01:	52                   	push   edx
c0019f02:	6a 1b                	push   0x1b
c0019f04:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c0019f0a:	e8 d9 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f0f:	59                   	pop    ecx
c0019f10:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f15:	89 c3                	mov    ebx,eax
c0019f17:	58                   	pop    eax
c0019f18:	53                   	push   ebx
c0019f19:	68 9c ba 02 c0       	push   0xc002ba9c
c0019f1e:	e8 51 90 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0019f23:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f31:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f3b:	c1 e0 18             	shl    eax,0x18
c0019f3e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f44:	83 c4 10             	add    esp,0x10
c0019f47:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f4d:	09 c2                	or     edx,eax
c0019f4f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f55:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f5b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f61:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f67:	80 cd c5             	or     ch,0xc5
c0019f6a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f70:	f3 90                	pause  
c0019f72:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f74:	0f ba e1 0c          	bt     ecx,0xc
c0019f78:	72 f6                	jb     c0019f70 <Krnl::startCPU(int)+0x8b>
c0019f7a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f80:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f86:	09 c1                	or     ecx,eax
c0019f88:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f8e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f94:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f9a:	80 cd 85             	or     ch,0x85
c0019f9d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fa3:	f3 90                	pause  
c0019fa5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fa7:	0f ba e1 0c          	bt     ecx,0xc
c0019fab:	72 f6                	jb     c0019fa3 <Krnl::startCPU(int)+0xbe>
c0019fad:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fbd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fc3:	09 c1                	or     ecx,eax
c0019fc5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fcb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fd1:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fd7:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fdd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fe3:	f3 90                	pause  
c0019fe5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fe7:	0f ba e1 0c          	bt     ecx,0xc
c0019feb:	72 f6                	jb     c0019fe3 <Krnl::startCPU(int)+0xfe>
c0019fed:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ff7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ffd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a003:	09 c8                	or     eax,ecx
c001a005:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a00b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a011:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a016:	0d 02 06 00 00       	or     eax,0x602
c001a01b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a021:	f3 90                	pause  
c001a023:	8b 02                	mov    eax,DWORD PTR [edx]
c001a025:	0f ba e0 0c          	bt     eax,0xc
c001a029:	72 f6                	jb     c001a021 <Krnl::startCPU(int)+0x13c>
c001a02b:	eb fe                	jmp    c001a02b <Krnl::startCPU(int)+0x146>
c001a02d:	c3                   	ret    

c001a02e <Krnl::startCPUs()>:
c001a02e:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001a033:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a039:	88 c2                	mov    dl,al
c001a03b:	83 e2 0a             	and    edx,0xa
c001a03e:	80 fa 0a             	cmp    dl,0xa
c001a041:	75 09                	jne    c001a04c <Krnl::startCPUs()+0x1e>
c001a043:	a8 01                	test   al,0x1
c001a045:	74 05                	je     c001a04c <Krnl::startCPUs()+0x1e>
c001a047:	e9 4f 61 fe ff       	jmp    c000019b <prepareTramp>
c001a04c:	c3                   	ret    
c001a04d:	90                   	nop

c001a04e <EnvVarContainer::getEnv(char const*)>:
c001a04e:	57                   	push   edi
c001a04f:	56                   	push   esi
c001a050:	53                   	push   ebx
c001a051:	31 db                	xor    ebx,ebx
c001a053:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a057:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a059:	7e 2b                	jle    c001a086 <EnvVarContainer::getEnv(char const*)+0x38>
c001a05b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a062:	50                   	push   eax
c001a063:	50                   	push   eax
c001a064:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a067:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a06a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a06e:	e8 4d 68 fe ff       	call   c00008c0 <strcmp>
c001a073:	83 c4 10             	add    esp,0x10
c001a076:	85 c0                	test   eax,eax
c001a078:	75 09                	jne    c001a083 <EnvVarContainer::getEnv(char const*)+0x35>
c001a07a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a07d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a081:	eb 05                	jmp    c001a088 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a083:	43                   	inc    ebx
c001a084:	eb d1                	jmp    c001a057 <EnvVarContainer::getEnv(char const*)+0x9>
c001a086:	31 c0                	xor    eax,eax
c001a088:	5b                   	pop    ebx
c001a089:	5e                   	pop    esi
c001a08a:	5f                   	pop    edi
c001a08b:	c3                   	ret    

c001a08c <EnvVarContainer::setEnv(char const*, char const*)>:
c001a08c:	57                   	push   edi
c001a08d:	56                   	push   esi
c001a08e:	53                   	push   ebx
c001a08f:	83 ec 1c             	sub    esp,0x1c
c001a092:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a096:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a09a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a09e:	57                   	push   edi
c001a09f:	e8 f0 66 fe ff       	call   c0000794 <strlen>
c001a0a4:	40                   	inc    eax
c001a0a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0a8:	e8 96 57 ff ff       	call   c000f843 <malloc>
c001a0ad:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0b4:	e8 db 66 fe ff       	call   c0000794 <strlen>
c001a0b9:	40                   	inc    eax
c001a0ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0bd:	e8 81 57 ff ff       	call   c000f843 <malloc>
c001a0c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0c9:	e8 c6 66 fe ff       	call   c0000794 <strlen>
c001a0ce:	83 c4 0c             	add    esp,0xc
c001a0d1:	40                   	inc    eax
c001a0d2:	50                   	push   eax
c001a0d3:	6a 00                	push   0x0
c001a0d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0d9:	e8 9a 66 fe ff       	call   c0000778 <memset>
c001a0de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0e1:	e8 ae 66 fe ff       	call   c0000794 <strlen>
c001a0e6:	83 c4 0c             	add    esp,0xc
c001a0e9:	40                   	inc    eax
c001a0ea:	50                   	push   eax
c001a0eb:	57                   	push   edi
c001a0ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0f0:	e8 4f 66 fe ff       	call   c0000744 <memcpy>
c001a0f5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0f8:	e8 97 66 fe ff       	call   c0000794 <strlen>
c001a0fd:	83 c4 0c             	add    esp,0xc
c001a100:	40                   	inc    eax
c001a101:	50                   	push   eax
c001a102:	6a 00                	push   0x0
c001a104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a108:	e8 6b 66 fe ff       	call   c0000778 <memset>
c001a10d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a110:	e8 7f 66 fe ff       	call   c0000794 <strlen>
c001a115:	83 c4 0c             	add    esp,0xc
c001a118:	40                   	inc    eax
c001a119:	50                   	push   eax
c001a11a:	56                   	push   esi
c001a11b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a11f:	e8 20 66 fe ff       	call   c0000744 <memcpy>
c001a124:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a126:	40                   	inc    eax
c001a127:	89 03                	mov    DWORD PTR [ebx],eax
c001a129:	c1 e0 03             	shl    eax,0x3
c001a12c:	5a                   	pop    edx
c001a12d:	59                   	pop    ecx
c001a12e:	50                   	push   eax
c001a12f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a132:	e8 f8 56 ff ff       	call   c000f82f <realloc>
c001a137:	83 c4 0c             	add    esp,0xc
c001a13a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a13d:	6a 08                	push   0x8
c001a13f:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a143:	52                   	push   edx
c001a144:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a146:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a14a:	50                   	push   eax
c001a14b:	e8 f4 65 fe ff       	call   c0000744 <memcpy>
c001a150:	83 c4 20             	add    esp,0x20
c001a153:	5b                   	pop    ebx
c001a154:	5e                   	pop    esi
c001a155:	5f                   	pop    edi
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <EnvVarContainer::deleteEnv(char const*)>:
c001a158:	c3                   	ret    
c001a159:	90                   	nop

c001a15a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a15a:	55                   	push   ebp
c001a15b:	57                   	push   edi
c001a15c:	56                   	push   esi
c001a15d:	53                   	push   ebx
c001a15e:	81 ec 38 01 00 00    	sub    esp,0x138
c001a164:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a16b:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a172:	68 14 01 00 00       	push   0x114
c001a177:	e8 c7 56 ff ff       	call   c000f843 <malloc>
c001a17c:	83 c4 0c             	add    esp,0xc
c001a17f:	89 c7                	mov    edi,eax
c001a181:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a184:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a18b:	50                   	push   eax
c001a18c:	e8 3b 93 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001a191:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a194:	e8 05 96 ff ff       	call   c001379e <File::exists()>
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	84 c0                	test   al,al
c001a19e:	75 31                	jne    c001a1d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1a0:	51                   	push   ecx
c001a1a1:	51                   	push   ecx
c001a1a2:	6a 12                	push   0x12
c001a1a4:	57                   	push   edi
c001a1a5:	e8 86 93 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001a1aa:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1ac:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1af:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1b2:	e8 dd 65 fe ff       	call   c0000794 <strlen>
c001a1b7:	5a                   	pop    edx
c001a1b8:	31 d2                	xor    edx,edx
c001a1ba:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1be:	51                   	push   ecx
c001a1bf:	55                   	push   ebp
c001a1c0:	52                   	push   edx
c001a1c1:	50                   	push   eax
c001a1c2:	57                   	push   edi
c001a1c3:	ff d3                	call   ebx
c001a1c5:	83 c4 14             	add    esp,0x14
c001a1c8:	57                   	push   edi
c001a1c9:	e8 c0 93 ff ff       	call   c001358e <File::close()>
c001a1ce:	83 c4 10             	add    esp,0x10
c001a1d1:	31 db                	xor    ebx,ebx
c001a1d3:	50                   	push   eax
c001a1d4:	31 ed                	xor    ebp,ebp
c001a1d6:	68 00 01 00 00       	push   0x100
c001a1db:	6a 00                	push   0x0
c001a1dd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1e1:	50                   	push   eax
c001a1e2:	e8 91 65 fe ff       	call   c0000778 <memset>
c001a1e7:	58                   	pop    eax
c001a1e8:	5a                   	pop    edx
c001a1e9:	6a 01                	push   0x1
c001a1eb:	57                   	push   edi
c001a1ec:	e8 3f 93 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001a1f1:	83 c4 10             	add    esp,0x10
c001a1f4:	83 ec 0c             	sub    esp,0xc
c001a1f7:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1f9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1fd:	51                   	push   ecx
c001a1fe:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a202:	52                   	push   edx
c001a203:	6a 00                	push   0x0
c001a205:	6a 01                	push   0x1
c001a207:	57                   	push   edi
c001a208:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a20b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a20f:	83 c4 20             	add    esp,0x20
c001a212:	3c 0d                	cmp    al,0xd
c001a214:	0f 84 12 01 00 00    	je     c001a32c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a21a:	85 db                	test   ebx,ebx
c001a21c:	0f 84 fd 00 00 00    	je     c001a31f <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a222:	3c 0a                	cmp    al,0xa
c001a224:	74 13                	je     c001a239 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a226:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a22b:	74 0c                	je     c001a239 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a22d:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a233:	0f 8e e6 00 00 00    	jle    c001a31f <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a239:	83 ec 0c             	sub    esp,0xc
c001a23c:	8d 53 01             	lea    edx,[ebx+0x1]
c001a23f:	29 dd                	sub    ebp,ebx
c001a241:	52                   	push   edx
c001a242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a246:	e8 f8 55 ff ff       	call   c000f843 <malloc>
c001a24b:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a24e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a252:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a255:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a259:	e8 e5 55 ff ff       	call   c000f843 <malloc>
c001a25e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a262:	83 c4 0c             	add    esp,0xc
c001a265:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a269:	52                   	push   edx
c001a26a:	6a 00                	push   0x0
c001a26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a270:	e8 03 65 fe ff       	call   c0000778 <memset>
c001a275:	83 c4 0c             	add    esp,0xc
c001a278:	53                   	push   ebx
c001a279:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a27d:	55                   	push   ebp
c001a27e:	01 eb                	add    ebx,ebp
c001a280:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a284:	e8 bb 64 fe ff       	call   c0000744 <memcpy>
c001a289:	83 c4 0c             	add    esp,0xc
c001a28c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a290:	51                   	push   ecx
c001a291:	6a 00                	push   0x0
c001a293:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a297:	e8 dc 64 fe ff       	call   c0000778 <memset>
c001a29c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a29f:	e8 f0 64 fe ff       	call   c0000794 <strlen>
c001a2a4:	83 c4 0c             	add    esp,0xc
c001a2a7:	50                   	push   eax
c001a2a8:	53                   	push   ebx
c001a2a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2ad:	e8 92 64 fe ff       	call   c0000744 <memcpy>
c001a2b2:	5b                   	pop    ebx
c001a2b3:	58                   	pop    eax
c001a2b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2b8:	68 ad ba 02 c0       	push   0xc002baad
c001a2bd:	e8 b2 8c ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a2c2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2c4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2c7:	40                   	inc    eax
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	89 06                	mov    DWORD PTR [esi],eax
c001a2cd:	85 d2                	test   edx,edx
c001a2cf:	75 0c                	jne    c001a2dd <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	6a 08                	push   0x8
c001a2d6:	e8 68 55 ff ff       	call   c000f843 <malloc>
c001a2db:	eb 0c                	jmp    c001a2e9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2dd:	c1 e0 03             	shl    eax,0x3
c001a2e0:	51                   	push   ecx
c001a2e1:	51                   	push   ecx
c001a2e2:	50                   	push   eax
c001a2e3:	52                   	push   edx
c001a2e4:	e8 46 55 ff ff       	call   c000f82f <realloc>
c001a2e9:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2ec:	83 c4 10             	add    esp,0x10
c001a2ef:	31 db                	xor    ebx,ebx
c001a2f1:	52                   	push   edx
c001a2f2:	6a 08                	push   0x8
c001a2f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2f8:	50                   	push   eax
c001a2f9:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2fb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2fe:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a302:	50                   	push   eax
c001a303:	e8 3c 64 fe ff       	call   c0000744 <memcpy>
c001a308:	83 c4 0c             	add    esp,0xc
c001a30b:	68 00 01 00 00       	push   0x100
c001a310:	6a 00                	push   0x0
c001a312:	55                   	push   ebp
c001a313:	31 ed                	xor    ebp,ebp
c001a315:	e8 5e 64 fe ff       	call   c0000778 <memset>
c001a31a:	83 c4 10             	add    esp,0x10
c001a31d:	eb 0d                	jmp    c001a32c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a31f:	3c 3d                	cmp    al,0x3d
c001a321:	74 07                	je     c001a32a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a323:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a327:	45                   	inc    ebp
c001a328:	eb 02                	jmp    c001a32c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a32a:	89 eb                	mov    ebx,ebp
c001a32c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a331:	0f 85 bd fe ff ff    	jne    c001a1f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a337:	50                   	push   eax
c001a338:	50                   	push   eax
c001a339:	ff 36                	push   DWORD PTR [esi]
c001a33b:	68 bb ba 02 c0       	push   0xc002babb
c001a340:	e8 2f 8c ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a345:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a34b:	5b                   	pop    ebx
c001a34c:	5e                   	pop    esi
c001a34d:	5f                   	pop    edi
c001a34e:	5d                   	pop    ebp
c001a34f:	c3                   	ret    

c001a350 <EnvVarContainer::__loadSystem()>:
c001a350:	83 ec 10             	sub    esp,0x10
c001a353:	68 e0 d9 02 c0       	push   0xc002d9e0
c001a358:	68 e6 ba 02 c0       	push   0xc002bae6
c001a35d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a361:	e8 f4 fd ff ff       	call   c001a15a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a366:	83 c4 1c             	add    esp,0x1c
c001a369:	c3                   	ret    

c001a36a <EnvVarContainer::__loadUser()>:
c001a36a:	c3                   	ret    
c001a36b:	90                   	nop

c001a36c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a370:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a37a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a37e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a385:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a38c:	90                   	nop
c001a38d:	c3                   	ret    

c001a38e <EnvVarContainer::~EnvVarContainer()>:
c001a38e:	83 ec 0c             	sub    esp,0xc
c001a391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a395:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a398:	85 c0                	test   eax,eax
c001a39a:	74 1d                	je     c001a3b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3a2:	85 c0                	test   eax,eax
c001a3a4:	74 13                	je     c001a3b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3ad:	83 ec 0c             	sub    esp,0xc
c001a3b0:	50                   	push   eax
c001a3b1:	e8 9d 54 ff ff       	call   c000f853 <free>
c001a3b6:	83 c4 10             	add    esp,0x10
c001a3b9:	90                   	nop
c001a3ba:	83 c4 0c             	add    esp,0xc
c001a3bd:	c3                   	ret    

c001a3be <Krnl::getEnv(Process*, char const*)>:
c001a3be:	53                   	push   ebx
c001a3bf:	83 ec 08             	sub    esp,0x8
c001a3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3ca:	39 05 14 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a14,eax
c001a3d0:	74 04                	je     c001a3d6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3d2:	85 c0                	test   eax,eax
c001a3d4:	75 0b                	jne    c001a3e1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3d6:	a1 f4 0f 03 c0       	mov    eax,ds:0xc0030ff4
c001a3db:	85 c0                	test   eax,eax
c001a3dd:	75 19                	jne    c001a3f8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3df:	eb 27                	jmp    c001a408 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3e1:	52                   	push   edx
c001a3e2:	52                   	push   edx
c001a3e3:	53                   	push   ebx
c001a3e4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3ea:	e8 5f fc ff ff       	call   c001a04e <EnvVarContainer::getEnv(char const*)>
c001a3ef:	83 c4 10             	add    esp,0x10
c001a3f2:	85 c0                	test   eax,eax
c001a3f4:	75 28                	jne    c001a41e <Krnl::getEnv(Process*, char const*)+0x60>
c001a3f6:	eb de                	jmp    c001a3d6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3f8:	52                   	push   edx
c001a3f9:	52                   	push   edx
c001a3fa:	53                   	push   ebx
c001a3fb:	50                   	push   eax
c001a3fc:	e8 4d fc ff ff       	call   c001a04e <EnvVarContainer::getEnv(char const*)>
c001a401:	83 c4 10             	add    esp,0x10
c001a404:	85 c0                	test   eax,eax
c001a406:	75 16                	jne    c001a41e <Krnl::getEnv(Process*, char const*)+0x60>
c001a408:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a40c:	a1 f8 0f 03 c0       	mov    eax,ds:0xc0030ff8
c001a411:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a415:	83 c4 08             	add    esp,0x8
c001a418:	5b                   	pop    ebx
c001a419:	e9 30 fc ff ff       	jmp    c001a04e <EnvVarContainer::getEnv(char const*)>
c001a41e:	83 c4 08             	add    esp,0x8
c001a421:	5b                   	pop    ebx
c001a422:	c3                   	ret    

c001a423 <Krnl::setEnvSystem(char const*, char const*)>:
c001a423:	83 ec 10             	sub    esp,0x10
c001a426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42e:	ff 35 f8 0f 03 c0    	push   DWORD PTR ds:0xc0030ff8
c001a434:	e8 53 fc ff ff       	call   c001a08c <EnvVarContainer::setEnv(char const*, char const*)>
c001a439:	83 c4 1c             	add    esp,0x1c
c001a43c:	c3                   	ret    

c001a43d <Krnl::setEnvUser(char const*, char const*)>:
c001a43d:	a1 f4 0f 03 c0       	mov    eax,ds:0xc0030ff4
c001a442:	85 c0                	test   eax,eax
c001a444:	74 15                	je     c001a45b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a446:	83 ec 10             	sub    esp,0x10
c001a449:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a44d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a451:	50                   	push   eax
c001a452:	e8 35 fc ff ff       	call   c001a08c <EnvVarContainer::setEnv(char const*, char const*)>
c001a457:	83 c4 1c             	add    esp,0x1c
c001a45a:	c3                   	ret    
c001a45b:	c3                   	ret    

c001a45c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a460:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a466:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a46a:	e9 1d fc ff ff       	jmp    c001a08c <EnvVarContainer::setEnv(char const*, char const*)>

c001a46f <Krnl::deleteEnvSystem(char const*)>:
c001a46f:	c3                   	ret    

c001a470 <Krnl::deleteEnvUser(char const*)>:
c001a470:	c3                   	ret    

c001a471 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a471:	c3                   	ret    

c001a472 <Krnl::newProcessEnv(Process*)>:
c001a472:	83 ec 28             	sub    esp,0x28
c001a475:	6a 0c                	push   0xc
c001a477:	e8 c7 53 ff ff       	call   c000f843 <malloc>
c001a47c:	5a                   	pop    edx
c001a47d:	59                   	pop    ecx
c001a47e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a482:	50                   	push   eax
c001a483:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a487:	e8 e0 fe ff ff       	call   c001a36c <EnvVarContainer::EnvVarContainer(Process*)>
c001a48c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a490:	83 c4 2c             	add    esp,0x2c
c001a493:	c3                   	ret    

c001a494 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a494:	56                   	push   esi
c001a495:	53                   	push   ebx
c001a496:	83 ec 10             	sub    esp,0x10
c001a499:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a49d:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4a3:	6a 0c                	push   0xc
c001a4a5:	e8 99 53 ff ff       	call   c000f843 <malloc>
c001a4aa:	89 c3                	mov    ebx,eax
c001a4ac:	58                   	pop    eax
c001a4ad:	5a                   	pop    edx
c001a4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4b2:	53                   	push   ebx
c001a4b3:	e8 b4 fe ff ff       	call   c001a36c <EnvVarContainer::EnvVarContainer(Process*)>
c001a4b8:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4ba:	89 03                	mov    DWORD PTR [ebx],eax
c001a4bc:	c1 e0 03             	shl    eax,0x3
c001a4bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4c2:	e8 7c 53 ff ff       	call   c000f843 <malloc>
c001a4c7:	83 c4 0c             	add    esp,0xc
c001a4ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4cd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4cf:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4d6:	52                   	push   edx
c001a4d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4da:	50                   	push   eax
c001a4db:	e8 64 62 fe ff       	call   c0000744 <memcpy>
c001a4e0:	89 d8                	mov    eax,ebx
c001a4e2:	83 c4 14             	add    esp,0x14
c001a4e5:	5b                   	pop    ebx
c001a4e6:	5e                   	pop    esi
c001a4e7:	c3                   	ret    

c001a4e8 <Krnl::loadSystemEnv()>:
c001a4e8:	53                   	push   ebx
c001a4e9:	83 ec 14             	sub    esp,0x14
c001a4ec:	6a 0c                	push   0xc
c001a4ee:	e8 50 53 ff ff       	call   c000f843 <malloc>
c001a4f3:	89 c3                	mov    ebx,eax
c001a4f5:	58                   	pop    eax
c001a4f6:	5a                   	pop    edx
c001a4f7:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c001a4fd:	53                   	push   ebx
c001a4fe:	e8 69 fe ff ff       	call   c001a36c <EnvVarContainer::EnvVarContainer(Process*)>
c001a503:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a506:	89 1d f8 0f 03 c0    	mov    DWORD PTR ds:0xc0030ff8,ebx
c001a50c:	e8 3f fe ff ff       	call   c001a350 <EnvVarContainer::__loadSystem()>
c001a511:	83 c4 18             	add    esp,0x18
c001a514:	5b                   	pop    ebx
c001a515:	c3                   	ret    

c001a516 <Krnl::loadUserEnv()>:
c001a516:	53                   	push   ebx
c001a517:	83 ec 14             	sub    esp,0x14
c001a51a:	6a 0c                	push   0xc
c001a51c:	e8 22 53 ff ff       	call   c000f843 <malloc>
c001a521:	89 c3                	mov    ebx,eax
c001a523:	58                   	pop    eax
c001a524:	5a                   	pop    edx
c001a525:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c001a52b:	53                   	push   ebx
c001a52c:	e8 3b fe ff ff       	call   c001a36c <EnvVarContainer::EnvVarContainer(Process*)>
c001a531:	89 1d f4 0f 03 c0    	mov    DWORD PTR ds:0xc0030ff4,ebx
c001a537:	83 c4 18             	add    esp,0x18
c001a53a:	5b                   	pop    ebx
c001a53b:	c3                   	ret    

c001a53c <Krnl::flushEnv()>:
c001a53c:	c3                   	ret    

c001a53d <Krnl::getProcessTotalEnvCount(Process*)>:
c001a53d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a541:	8b 15 f4 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030ff4
c001a547:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a54d:	a1 f8 0f 03 c0       	mov    eax,ds:0xc0030ff8
c001a552:	8b 00                	mov    eax,DWORD PTR [eax]
c001a554:	03 01                	add    eax,DWORD PTR [ecx]
c001a556:	85 d2                	test   edx,edx
c001a558:	74 02                	je     c001a55c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a55a:	03 02                	add    eax,DWORD PTR [edx]
c001a55c:	c3                   	ret    

c001a55d <Krnl::getProcessEnvPair(Process*, int)>:
c001a55d:	57                   	push   edi
c001a55e:	8b 0d f4 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ff4
c001a564:	56                   	push   esi
c001a565:	85 c9                	test   ecx,ecx
c001a567:	53                   	push   ebx
c001a568:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a56c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a570:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a576:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a57a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a57c:	75 47                	jne    c001a5c5 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a57e:	39 c3                	cmp    ebx,eax
c001a580:	7c 47                	jl     c001a5c9 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a582:	8b 15 f8 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030ff8
c001a588:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a58a:	01 c1                	add    ecx,eax
c001a58c:	39 d9                	cmp    ecx,ebx
c001a58e:	7e 6c                	jle    c001a5fc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a590:	51                   	push   ecx
c001a591:	89 d9                	mov    ecx,ebx
c001a593:	29 c1                	sub    ecx,eax
c001a595:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a598:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a59c:	53                   	push   ebx
c001a59d:	68 08 bb 02 c0       	push   0xc002bb08
c001a5a2:	e8 cd 89 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a5a7:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5ad:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5af:	a1 f8 0f 03 c0       	mov    eax,ds:0xc0030ff8
c001a5b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5b7:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5bb:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5be:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5c1:	89 06                	mov    DWORD PTR [esi],eax
c001a5c3:	eb 51                	jmp    c001a616 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5c5:	39 c3                	cmp    ebx,eax
c001a5c7:	7d 05                	jge    c001a5ce <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5c9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5cc:	eb 20                	jmp    c001a5ee <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5ce:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5d0:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5d3:	39 da                	cmp    edx,ebx
c001a5d5:	7e 04                	jle    c001a5db <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5d7:	29 c3                	sub    ebx,eax
c001a5d9:	eb 10                	jmp    c001a5eb <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5db:	8b 0d f8 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ff8
c001a5e1:	03 11                	add    edx,DWORD PTR [ecx]
c001a5e3:	39 da                	cmp    edx,ebx
c001a5e5:	7e 15                	jle    c001a5fc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5e7:	29 c3                	sub    ebx,eax
c001a5e9:	29 fb                	sub    ebx,edi
c001a5eb:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5ee:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5f2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5f5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5f8:	89 06                	mov    DWORD PTR [esi],eax
c001a5fa:	eb 1d                	jmp    c001a619 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	68 1c bb 02 c0       	push   0xc002bb1c
c001a604:	e8 18 00 00 00       	call   c001a621 <Krnl::panic(char const*)>
c001a609:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a60f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a616:	83 c4 10             	add    esp,0x10
c001a619:	89 f0                	mov    eax,esi
c001a61b:	5b                   	pop    ebx
c001a61c:	5e                   	pop    esi
c001a61d:	5f                   	pop    edi
c001a61e:	c2 04 00             	ret    0x4

c001a621 <Krnl::panic(char const*)>:
c001a621:	55                   	push   ebp
c001a622:	89 e5                	mov    ebp,esp
c001a624:	53                   	push   ebx
c001a625:	83 ec 0c             	sub    esp,0xc
c001a628:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a62b:	fa                   	cli    
c001a62c:	c6 05 04 10 03 c0 01 	mov    BYTE PTR ds:0xc0031004,0x1
c001a633:	53                   	push   ebx
c001a634:	c6 05 e4 d3 02 c0 00 	mov    BYTE PTR ds:0xc002d3e4,0x0
c001a63b:	68 36 bb 02 c0       	push   0xc002bb36
c001a640:	e8 2f 89 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a645:	58                   	pop    eax
c001a646:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a64b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a651:	e8 9f 66 ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c001a656:	83 c4 0c             	add    esp,0xc
c001a659:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a65e:	6a 01                	push   0x1
c001a660:	6a 0f                	push   0xf
c001a662:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a668:	e8 b9 60 ff ff       	call   c0010726 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a66d:	58                   	pop    eax
c001a66e:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a673:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a679:	e8 18 69 ff ff       	call   c0010f96 <VgaText::clearScreen()>
c001a67e:	58                   	pop    eax
c001a67f:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a684:	5a                   	pop    edx
c001a685:	68 4f bb 02 c0       	push   0xc002bb4f
c001a68a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a690:	e8 7f 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a695:	59                   	pop    ecx
c001a696:	58                   	pop    eax
c001a697:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a69c:	68 f4 bb 02 c0       	push   0xc002bbf4
c001a6a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a7:	e8 68 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6ac:	58                   	pop    eax
c001a6ad:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a6b2:	5a                   	pop    edx
c001a6b3:	68 6b bb 02 c0       	push   0xc002bb6b
c001a6b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6be:	e8 51 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6c3:	59                   	pop    ecx
c001a6c4:	58                   	pop    eax
c001a6c5:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a6ca:	53                   	push   ebx
c001a6cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d1:	e8 3e 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6d6:	58                   	pop    eax
c001a6d7:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a6dc:	5a                   	pop    edx
c001a6dd:	68 8b bb 02 c0       	push   0xc002bb8b
c001a6e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e8:	e8 27 6a ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a6ed:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001a6f2:	83 c4 10             	add    esp,0x10
c001a6f5:	85 c0                	test   eax,eax
c001a6f7:	74 02                	je     c001a6fb <Krnl::panic(char const*)+0xda>
c001a6f9:	ff d0                	call   eax
c001a6fb:	83 ec 0c             	sub    esp,0xc
c001a6fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a701:	e8 fd 2f 00 00       	call   c001d703 <Thr::getDriverNameFromAddress(unsigned long)>
c001a706:	83 c4 10             	add    esp,0x10
c001a709:	89 c3                	mov    ebx,eax
c001a70b:	85 c0                	test   eax,eax
c001a70d:	0f 84 50 02 00 00    	je     c001a963 <Krnl::panic(char const*)+0x342>
c001a713:	83 ec 08             	sub    esp,0x8
c001a716:	8b 15 14 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a14
c001a71c:	68 30 bc 02 c0       	push   0xc002bc30
c001a721:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a727:	e8 e8 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a72c:	58                   	pop    eax
c001a72d:	5a                   	pop    edx
c001a72e:	8b 15 14 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a14
c001a734:	68 6b bb 02 c0       	push   0xc002bb6b
c001a739:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a73f:	e8 d0 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a744:	59                   	pop    ecx
c001a745:	58                   	pop    eax
c001a746:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a74b:	53                   	push   ebx
c001a74c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a752:	e8 bd 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	83 ec 08             	sub    esp,0x8
c001a75d:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a762:	68 8a bb 02 c0       	push   0xc002bb8a
c001a767:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76d:	e8 a2 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a772:	58                   	pop    eax
c001a773:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a778:	5a                   	pop    edx
c001a779:	68 88 bc 02 c0       	push   0xc002bc88
c001a77e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a784:	e8 8b 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a789:	59                   	pop    ecx
c001a78a:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a78f:	5b                   	pop    ebx
c001a790:	68 c8 bc 02 c0       	push   0xc002bcc8
c001a795:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a79b:	e8 74 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a7a0:	58                   	pop    eax
c001a7a1:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a7a6:	5a                   	pop    edx
c001a7a7:	68 76 bb 02 c0       	push   0xc002bb76
c001a7ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b2:	e8 5d 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a7b7:	59                   	pop    ecx
c001a7b8:	5b                   	pop    ebx
c001a7b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7bc:	68 8e bb 02 c0       	push   0xc002bb8e
c001a7c1:	e8 ae 87 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a7c6:	58                   	pop    eax
c001a7c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7ca:	5a                   	pop    edx
c001a7cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7ce:	68 97 bb 02 c0       	push   0xc002bb97
c001a7d3:	e8 9c 87 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a7d8:	59                   	pop    ecx
c001a7d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7dc:	5b                   	pop    ebx
c001a7dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7df:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7e2:	68 a0 bb 02 c0       	push   0xc002bba0
c001a7e7:	e8 88 87 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001a7ec:	58                   	pop    eax
c001a7ed:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a7f2:	5a                   	pop    edx
c001a7f3:	68 0c bd 02 c0       	push   0xc002bd0c
c001a7f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fe:	e8 11 69 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a803:	59                   	pop    ecx
c001a804:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a809:	5b                   	pop    ebx
c001a80a:	68 a9 bb 02 c0       	push   0xc002bba9
c001a80f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a815:	e8 fa 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a81a:	0f 20 c0             	mov    eax,cr0
c001a81d:	5a                   	pop    edx
c001a81e:	59                   	pop    ecx
c001a81f:	50                   	push   eax
c001a820:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82b:	e8 0a 69 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a830:	5b                   	pop    ebx
c001a831:	58                   	pop    eax
c001a832:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a837:	68 b3 bb 02 c0       	push   0xc002bbb3
c001a83c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a842:	e8 cd 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a847:	0f 20 d0             	mov    eax,cr2
c001a84a:	5a                   	pop    edx
c001a84b:	59                   	pop    ecx
c001a84c:	50                   	push   eax
c001a84d:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a852:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a858:	e8 dd 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a85d:	5b                   	pop    ebx
c001a85e:	58                   	pop    eax
c001a85f:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a864:	68 bd bb 02 c0       	push   0xc002bbbd
c001a869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86f:	e8 a0 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a874:	0f 20 d8             	mov    eax,cr3
c001a877:	5a                   	pop    edx
c001a878:	59                   	pop    ecx
c001a879:	50                   	push   eax
c001a87a:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a87f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a885:	e8 b0 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a88a:	5b                   	pop    ebx
c001a88b:	58                   	pop    eax
c001a88c:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a891:	68 d0 bb 02 c0       	push   0xc002bbd0
c001a896:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89c:	e8 73 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8a1:	0f 20 e0             	mov    eax,cr4
c001a8a4:	5a                   	pop    edx
c001a8a5:	59                   	pop    ecx
c001a8a6:	50                   	push   eax
c001a8a7:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a8ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b2:	e8 83 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a8b7:	5b                   	pop    ebx
c001a8b8:	58                   	pop    eax
c001a8b9:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a8be:	68 da bb 02 c0       	push   0xc002bbda
c001a8c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c9:	e8 46 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8ce:	5a                   	pop    edx
c001a8cf:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a8d4:	59                   	pop    ecx
c001a8d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8db:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8de:	50                   	push   eax
c001a8df:	e8 56 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a8e4:	5b                   	pop    ebx
c001a8e5:	58                   	pop    eax
c001a8e6:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a8eb:	68 f1 bb 02 c0       	push   0xc002bbf1
c001a8f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f6:	e8 19 68 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a8fb:	5a                   	pop    edx
c001a8fc:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a901:	59                   	pop    ecx
c001a902:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a908:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a90b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a90e:	50                   	push   eax
c001a90f:	e8 26 68 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a914:	5b                   	pop    ebx
c001a915:	58                   	pop    eax
c001a916:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a91b:	68 f1 bb 02 c0       	push   0xc002bbf1
c001a920:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a926:	e8 e9 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a92b:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a930:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a933:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a939:	8b 12                	mov    edx,DWORD PTR [edx]
c001a93b:	59                   	pop    ecx
c001a93c:	5b                   	pop    ebx
c001a93d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a940:	50                   	push   eax
c001a941:	e8 f4 67 ff ff       	call   c001113a <VgaText::putx(unsigned int)>
c001a946:	83 c4 10             	add    esp,0x10
c001a949:	b2 fe                	mov    dl,0xfe
c001a94b:	e4 60                	in     al,0x60
c001a94d:	3c 1c                	cmp    al,0x1c
c001a94f:	74 04                	je     c001a955 <Krnl::panic(char const*)+0x334>
c001a951:	3c 5a                	cmp    al,0x5a
c001a953:	75 f6                	jne    c001a94b <Krnl::panic(char const*)+0x32a>
c001a955:	e4 64                	in     al,0x64
c001a957:	a8 02                	test   al,0x2
c001a959:	75 fa                	jne    c001a955 <Krnl::panic(char const*)+0x334>
c001a95b:	88 d0                	mov    al,dl
c001a95d:	e6 64                	out    0x64,al
c001a95f:	fa                   	cli    
c001a960:	f4                   	hlt    
c001a961:	eb e8                	jmp    c001a94b <Krnl::panic(char const*)+0x32a>
c001a963:	50                   	push   eax
c001a964:	50                   	push   eax
c001a965:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a96a:	68 5c bc 02 c0       	push   0xc002bc5c
c001a96f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a975:	e8 9a 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a97a:	58                   	pop    eax
c001a97b:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a980:	5a                   	pop    edx
c001a981:	68 6b bb 02 c0       	push   0xc002bb6b
c001a986:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98c:	e8 83 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a991:	59                   	pop    ecx
c001a992:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a997:	5b                   	pop    ebx
c001a998:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a99b:	83 c0 0c             	add    eax,0xc
c001a99e:	50                   	push   eax
c001a99f:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001a9a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9aa:	e8 65 67 ff ff       	call   c0011114 <VgaText::puts(char const*)>
c001a9af:	83 c4 10             	add    esp,0x10
c001a9b2:	e9 a3 fd ff ff       	jmp    c001a75a <Krnl::panic(char const*)+0x139>

c001a9b7 <Net::switchEndian16(unsigned short)>:
c001a9b7:	83 ec 04             	sub    esp,0x4
c001a9ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9be:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9c2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9c6:	c1 f8 08             	sar    eax,0x8
c001a9c9:	89 c2                	mov    edx,eax
c001a9cb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9cf:	c1 e0 08             	shl    eax,0x8
c001a9d2:	09 d0                	or     eax,edx
c001a9d4:	83 c4 04             	add    esp,0x4
c001a9d7:	c3                   	ret    

c001a9d8 <Net::switchEndian32(unsigned int)>:
c001a9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9dc:	c1 e8 18             	shr    eax,0x18
c001a9df:	89 c2                	mov    edx,eax
c001a9e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e5:	c1 e0 08             	shl    eax,0x8
c001a9e8:	25 00 00 ff 00       	and    eax,0xff0000
c001a9ed:	09 c2                	or     edx,eax
c001a9ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f3:	c1 e8 08             	shr    eax,0x8
c001a9f6:	25 00 ff 00 00       	and    eax,0xff00
c001a9fb:	09 c2                	or     edx,eax
c001a9fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa01:	c1 e0 18             	shl    eax,0x18
c001aa04:	09 d0                	or     eax,edx
c001aa06:	c3                   	ret    

c001aa07 <Net::crc32Calc(unsigned char*, int)>:
c001aa07:	83 ec 10             	sub    esp,0x10
c001aa0a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa0f:	75 07                	jne    c001aa18 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa11:	b8 00 00 00 00       	mov    eax,0x0
c001aa16:	eb 7c                	jmp    c001aa94 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa18:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa1d:	7f 07                	jg     c001aa26 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa1f:	b8 00 00 00 00       	mov    eax,0x0
c001aa24:	eb 6e                	jmp    c001aa94 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa26:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa3a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa3e:	7d 4e                	jge    c001aa8e <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa48:	01 d0                	add    eax,edx
c001aa4a:	8a 00                	mov    al,BYTE PTR [eax]
c001aa4c:	0f b6 c0             	movzx  eax,al
c001aa4f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa53:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa5b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa60:	7f 26                	jg     c001aa88 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa66:	83 e0 01             	and    eax,0x1
c001aa69:	74 0d                	je     c001aa78 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6f:	d1 e8                	shr    eax,1
c001aa71:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa76:	eb 06                	jmp    c001aa7e <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7c:	d1 e8                	shr    eax,1
c001aa7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa82:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa86:	eb d3                	jmp    c001aa5b <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa88:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa8c:	eb a8                	jmp    c001aa36 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa92:	f7 d0                	not    eax
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	c3                   	ret    

c001aa98 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa98:	83 ec 1c             	sub    esp,0x1c
c001aa9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaa3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaab:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aab0:	7f 14                	jg     c001aac6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aab2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab6:	8d 50 01             	lea    edx,[eax+0x1]
c001aab9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aabd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aac0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aac4:	eb e5                	jmp    c001aaab <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aac6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaca:	8d 50 01             	lea    edx,[eax+0x1]
c001aacd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aad1:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aad4:	83 ec 04             	sub    esp,0x4
c001aad7:	6a 06                	push   0x6
c001aad9:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aadd:	50                   	push   eax
c001aade:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aae2:	e8 5d 5c fe ff       	call   c0000744 <memcpy>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaef:	83 ec 04             	sub    esp,0x4
c001aaf2:	6a 06                	push   0x6
c001aaf4:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aaf8:	50                   	push   eax
c001aaf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aafd:	e8 42 5c fe ff       	call   c0000744 <memcpy>
c001ab02:	83 c4 10             	add    esp,0x10
c001ab05:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab0e:	0f b7 c0             	movzx  eax,ax
c001ab11:	c1 f8 08             	sar    eax,0x8
c001ab14:	89 c1                	mov    ecx,eax
c001ab16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab21:	88 ca                	mov    dl,cl
c001ab23:	88 10                	mov    BYTE PTR [eax],dl
c001ab25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2d:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab30:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab34:	88 10                	mov    BYTE PTR [eax],dl
c001ab36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab3e:	83 ec 04             	sub    esp,0x4
c001ab41:	52                   	push   edx
c001ab42:	50                   	push   eax
c001ab43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab47:	e8 f8 5b fe ff       	call   c0000744 <memcpy>
c001ab4c:	83 c4 10             	add    esp,0x10
c001ab4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab53:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5b:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab5f:	83 ec 08             	sub    esp,0x8
c001ab62:	50                   	push   eax
c001ab63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab67:	e8 9b fe ff ff       	call   c001aa07 <Net::crc32Calc(unsigned char*, int)>
c001ab6c:	83 c4 10             	add    esp,0x10
c001ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab77:	c1 e8 18             	shr    eax,0x18
c001ab7a:	89 c1                	mov    ecx,eax
c001ab7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab80:	8d 50 01             	lea    edx,[eax+0x1]
c001ab83:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab87:	88 ca                	mov    dl,cl
c001ab89:	88 10                	mov    BYTE PTR [eax],dl
c001ab8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab8f:	c1 e8 10             	shr    eax,0x10
c001ab92:	89 c1                	mov    ecx,eax
c001ab94:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab98:	8d 50 01             	lea    edx,[eax+0x1]
c001ab9b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab9f:	88 ca                	mov    dl,cl
c001aba1:	88 10                	mov    BYTE PTR [eax],dl
c001aba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba7:	c1 e8 08             	shr    eax,0x8
c001abaa:	89 c1                	mov    ecx,eax
c001abac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abb0:	8d 50 01             	lea    edx,[eax+0x1]
c001abb3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abb7:	88 ca                	mov    dl,cl
c001abb9:	88 10                	mov    BYTE PTR [eax],dl
c001abbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abbf:	8d 50 01             	lea    edx,[eax+0x1]
c001abc2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abca:	88 10                	mov    BYTE PTR [eax],dl
c001abcc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abd0:	83 c4 1c             	add    esp,0x1c
c001abd3:	c3                   	ret    

c001abd4 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abd4:	83 ec 2c             	sub    esp,0x2c
c001abd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abdf:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abe4:	83 ec 04             	sub    esp,0x4
c001abe7:	6a 06                	push   0x6
c001abe9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abf1:	83 c0 0e             	add    eax,0xe
c001abf4:	50                   	push   eax
c001abf5:	e8 4a 5b fe ff       	call   c0000744 <memcpy>
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac02:	83 ec 04             	sub    esp,0x4
c001ac05:	6a 06                	push   0x6
c001ac07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac0f:	83 c0 08             	add    eax,0x8
c001ac12:	50                   	push   eax
c001ac13:	e8 2c 5b fe ff       	call   c0000744 <memcpy>
c001ac18:	83 c4 10             	add    esp,0x10
c001ac1b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac24:	8d 50 01             	lea    edx,[eax+0x1]
c001ac27:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac2b:	8a 00                	mov    al,BYTE PTR [eax]
c001ac2d:	0f b6 c0             	movzx  eax,al
c001ac30:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac39:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac40:	8a 00                	mov    al,BYTE PTR [eax]
c001ac42:	0f b6 c0             	movzx  eax,al
c001ac45:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac4a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac4f:	c1 e0 08             	shl    eax,0x8
c001ac52:	89 c2                	mov    edx,eax
c001ac54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac58:	09 d0                	or     eax,edx
c001ac5a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac5e:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac62:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac67:	75 3a                	jne    c001aca3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac6d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac70:	66 3d dc 05          	cmp    ax,0x5dc
c001ac74:	77 10                	ja     c001ac86 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac7a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac7d:	0f b7 c0             	movzx  eax,ax
c001ac80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac84:	eb 1d                	jmp    c001aca3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac86:	83 ec 0c             	sub    esp,0xc
c001ac89:	68 34 bd 02 c0       	push   0xc002bd34
c001ac8e:	e8 e1 82 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac9a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ac9e:	e9 c0 00 00 00       	jmp    c001ad63 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aca3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aca7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acab:	8b 00                	mov    eax,DWORD PTR [eax]
c001acad:	83 ec 04             	sub    esp,0x4
c001acb0:	52                   	push   edx
c001acb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acb5:	50                   	push   eax
c001acb6:	e8 89 5a fe ff       	call   c0000744 <memcpy>
c001acbb:	83 c4 10             	add    esp,0x10
c001acbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acc2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acca:	8d 50 01             	lea    edx,[eax+0x1]
c001accd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd1:	8a 00                	mov    al,BYTE PTR [eax]
c001acd3:	0f b6 c0             	movzx  eax,al
c001acd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acde:	8d 50 01             	lea    edx,[eax+0x1]
c001ace1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ace5:	8a 00                	mov    al,BYTE PTR [eax]
c001ace7:	0f b6 c0             	movzx  eax,al
c001acea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf2:	8d 50 01             	lea    edx,[eax+0x1]
c001acf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acf9:	8a 00                	mov    al,BYTE PTR [eax]
c001acfb:	0f b6 c0             	movzx  eax,al
c001acfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad06:	8d 50 01             	lea    edx,[eax+0x1]
c001ad09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad0d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad0f:	0f b6 c0             	movzx  eax,al
c001ad12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad1a:	c1 e0 18             	shl    eax,0x18
c001ad1d:	89 c2                	mov    edx,eax
c001ad1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad23:	c1 e0 10             	shl    eax,0x10
c001ad26:	09 c2                	or     edx,eax
c001ad28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad2c:	c1 e0 08             	shl    eax,0x8
c001ad2f:	09 d0                	or     eax,edx
c001ad31:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad3d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad41:	83 e8 04             	sub    eax,0x4
c001ad44:	83 ec 08             	sub    esp,0x8
c001ad47:	50                   	push   eax
c001ad48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad4c:	e8 b6 fc ff ff       	call   c001aa07 <Net::crc32Calc(unsigned char*, int)>
c001ad51:	83 c4 10             	add    esp,0x10
c001ad54:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad58:	0f 94 c2             	sete   dl
c001ad5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad5f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad62:	90                   	nop
c001ad63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad67:	83 c4 2c             	add    esp,0x2c
c001ad6a:	c2 04 00             	ret    0x4

c001ad6d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad6d:	55                   	push   ebp
c001ad6e:	57                   	push   edi
c001ad6f:	56                   	push   esi
c001ad70:	53                   	push   ebx
c001ad71:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad77:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad7e:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad80:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad83:	80 fb 40             	cmp    bl,0x40
c001ad86:	75 1b                	jne    c001ada3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad88:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad8a:	84 d2                	test   dl,dl
c001ad8c:	0f 84 f1 00 00 00    	je     c001ae83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad92:	8d 46 01             	lea    eax,[esi+0x1]
c001ad95:	80 fa 3a             	cmp    dl,0x3a
c001ad98:	74 04                	je     c001ad9e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad9a:	89 c6                	mov    esi,eax
c001ad9c:	eb ea                	jmp    c001ad88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad9e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ada1:	89 c6                	mov    esi,eax
c001ada3:	50                   	push   eax
c001ada4:	6a 40                	push   0x40
c001ada6:	6a 00                	push   0x0
c001ada8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adac:	50                   	push   eax
c001adad:	e8 c6 59 fe ff       	call   c0000778 <memset>
c001adb2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001adb9:	31 c0                	xor    eax,eax
c001adbb:	83 c4 10             	add    esp,0x10
c001adbe:	8a 0f                	mov    cl,BYTE PTR [edi]
c001adc0:	84 c9                	test   cl,cl
c001adc2:	0f 84 bb 00 00 00    	je     c001ae83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc8:	3d c7 00 00 00       	cmp    eax,0xc7
c001adcd:	0f 8f b0 00 00 00    	jg     c001ae83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001add3:	80 f9 0a             	cmp    cl,0xa
c001add6:	0f 85 98 00 00 00    	jne    c001ae74 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001addc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ade1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ade5:	a8 df                	test   al,0xdf
c001ade7:	0f 94 c1             	sete   cl
c001adea:	3c 23                	cmp    al,0x23
c001adec:	0f 94 c2             	sete   dl
c001adef:	08 d1                	or     cl,dl
c001adf1:	75 4a                	jne    c001ae3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf3:	8d 50 f7             	lea    edx,[eax-0x9]
c001adf6:	80 fa 01             	cmp    dl,0x1
c001adf9:	76 42                	jbe    c001ae3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adfb:	3c 5b                	cmp    al,0x5b
c001adfd:	75 42                	jne    c001ae41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adff:	80 fb 40             	cmp    bl,0x40
c001ae02:	75 39                	jne    c001ae3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae04:	83 ec 0c             	sub    esp,0xc
c001ae07:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae0b:	52                   	push   edx
c001ae0c:	e8 83 59 fe ff       	call   c0000794 <strlen>
c001ae11:	83 c4 10             	add    esp,0x10
c001ae14:	83 f8 3f             	cmp    eax,0x3f
c001ae17:	77 6a                	ja     c001ae83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae19:	50                   	push   eax
c001ae1a:	50                   	push   eax
c001ae1b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae1f:	52                   	push   edx
c001ae20:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae24:	52                   	push   edx
c001ae25:	e8 0a 5a fe ff       	call   c0000834 <strcpy>
c001ae2a:	58                   	pop    eax
c001ae2b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae2f:	52                   	push   edx
c001ae30:	e8 5f 59 fe ff       	call   c0000794 <strlen>
c001ae35:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae3a:	83 c4 10             	add    esp,0x10
c001ae3d:	31 d2                	xor    edx,edx
c001ae3f:	eb 3a                	jmp    c001ae7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae41:	80 fb 40             	cmp    bl,0x40
c001ae44:	74 06                	je     c001ae4c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae46:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae4a:	eb 20                	jmp    c001ae6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae4c:	50                   	push   eax
c001ae4d:	50                   	push   eax
c001ae4e:	55                   	push   ebp
c001ae4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae53:	50                   	push   eax
c001ae54:	e8 67 5a fe ff       	call   c00008c0 <strcmp>
c001ae59:	83 c4 10             	add    esp,0x10
c001ae5c:	85 c0                	test   eax,eax
c001ae5e:	75 dd                	jne    c001ae3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae60:	eb e4                	jmp    c001ae46 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae62:	8d 50 01             	lea    edx,[eax+0x1]
c001ae65:	80 f9 3d             	cmp    cl,0x3d
c001ae68:	74 1d                	je     c001ae87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae6a:	89 d0                	mov    eax,edx
c001ae6c:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae6e:	84 c9                	test   cl,cl
c001ae70:	75 f0                	jne    c001ae62 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae72:	eb 0f                	jmp    c001ae83 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae74:	8d 50 01             	lea    edx,[eax+0x1]
c001ae77:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae7b:	47                   	inc    edi
c001ae7c:	89 d0                	mov    eax,edx
c001ae7e:	e9 3b ff ff ff       	jmp    c001adbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae83:	31 c0                	xor    eax,eax
c001ae85:	eb 33                	jmp    c001aeba <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae8e:	50                   	push   eax
c001ae8f:	50                   	push   eax
c001ae90:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae94:	50                   	push   eax
c001ae95:	56                   	push   esi
c001ae96:	e8 25 5a fe ff       	call   c00008c0 <strcmp>
c001ae9b:	83 c4 10             	add    esp,0x10
c001ae9e:	85 c0                	test   eax,eax
c001aea0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aea4:	75 97                	jne    c001ae3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aea6:	51                   	push   ecx
c001aea7:	51                   	push   ecx
c001aea8:	52                   	push   edx
c001aea9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aeb0:	e8 7f 59 fe ff       	call   c0000834 <strcpy>
c001aeb5:	83 c4 10             	add    esp,0x10
c001aeb8:	b0 01                	mov    al,0x1
c001aeba:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aec0:	5b                   	pop    ebx
c001aec1:	5e                   	pop    esi
c001aec2:	5f                   	pop    edi
c001aec3:	5d                   	pop    ebp
c001aec4:	c3                   	ret    

c001aec5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aec5:	57                   	push   edi
c001aec6:	56                   	push   esi
c001aec7:	53                   	push   ebx
c001aec8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aece:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aed5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aedc:	53                   	push   ebx
c001aedd:	e8 b2 58 fe ff       	call   c0000794 <strlen>
c001aee2:	89 34 24             	mov    DWORD PTR [esp],esi
c001aee5:	89 c7                	mov    edi,eax
c001aee7:	e8 a8 58 fe ff       	call   c0000794 <strlen>
c001aeec:	83 c4 10             	add    esp,0x10
c001aeef:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aef3:	3d ff 00 00 00       	cmp    eax,0xff
c001aef8:	0f 87 d3 00 00 00    	ja     c001afd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aefe:	57                   	push   edi
c001aeff:	57                   	push   edi
c001af00:	56                   	push   esi
c001af01:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af05:	56                   	push   esi
c001af06:	e8 29 59 fe ff       	call   c0000834 <strcpy>
c001af0b:	58                   	pop    eax
c001af0c:	5a                   	pop    edx
c001af0d:	68 94 c2 02 c0       	push   0xc002c294
c001af12:	56                   	push   esi
c001af13:	e8 5c 5a fe ff       	call   c0000974 <strcat>
c001af18:	59                   	pop    ecx
c001af19:	5f                   	pop    edi
c001af1a:	53                   	push   ebx
c001af1b:	56                   	push   esi
c001af1c:	e8 53 5a fe ff       	call   c0000974 <strcat>
c001af21:	58                   	pop    eax
c001af22:	5a                   	pop    edx
c001af23:	68 80 bd 02 c0       	push   0xc002bd80
c001af28:	56                   	push   esi
c001af29:	e8 46 5a fe ff       	call   c0000974 <strcat>
c001af2e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af35:	e8 09 49 ff ff       	call   c000f843 <malloc>
c001af3a:	83 c4 0c             	add    esp,0xc
c001af3d:	89 c3                	mov    ebx,eax
c001af3f:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c001af45:	56                   	push   esi
c001af46:	50                   	push   eax
c001af47:	e8 80 85 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001af4c:	83 c4 10             	add    esp,0x10
c001af4f:	85 db                	test   ebx,ebx
c001af51:	74 7e                	je     c001afd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af53:	51                   	push   ecx
c001af54:	51                   	push   ecx
c001af55:	6a 01                	push   0x1
c001af57:	53                   	push   ebx
c001af58:	e8 d3 85 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001af5d:	83 c4 10             	add    esp,0x10
c001af60:	85 c0                	test   eax,eax
c001af62:	74 08                	je     c001af6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af64:	83 ec 0c             	sub    esp,0xc
c001af67:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af69:	53                   	push   ebx
c001af6a:	eb 5f                	jmp    c001afcb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af6c:	52                   	push   edx
c001af6d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af71:	50                   	push   eax
c001af72:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af76:	50                   	push   eax
c001af77:	53                   	push   ebx
c001af78:	e8 5f 88 ff ff       	call   c00137dc <File::stat(unsigned long long*, bool*)>
c001af7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af81:	83 c4 10             	add    esp,0x10
c001af84:	89 c1                	mov    ecx,eax
c001af86:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af8a:	74 31                	je     c001afbd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af8c:	83 ec 0c             	sub    esp,0xc
c001af8f:	50                   	push   eax
c001af90:	e8 ae 48 ff ff       	call   c000f843 <malloc>
c001af95:	89 c6                	mov    esi,eax
c001af97:	58                   	pop    eax
c001af98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af9a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af9e:	52                   	push   edx
c001af9f:	56                   	push   esi
c001afa0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afa4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afa8:	53                   	push   ebx
c001afa9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afac:	83 c4 20             	add    esp,0x20
c001afaf:	85 c0                	test   eax,eax
c001afb1:	75 0a                	jne    c001afbd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afb7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afbb:	74 18                	je     c001afd5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afbd:	83 ec 0c             	sub    esp,0xc
c001afc0:	53                   	push   ebx
c001afc1:	e8 c8 85 ff ff       	call   c001358e <File::close()>
c001afc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afce:	83 c4 10             	add    esp,0x10
c001afd1:	31 c0                	xor    eax,eax
c001afd3:	eb 3b                	jmp    c001b010 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afd5:	83 ec 0c             	sub    esp,0xc
c001afd8:	53                   	push   ebx
c001afd9:	e8 b0 85 ff ff       	call   c001358e <File::close()>
c001afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afe3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afe6:	83 c4 0c             	add    esp,0xc
c001afe9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aff0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aff7:	56                   	push   esi
c001aff8:	e8 70 fd ff ff       	call   c001ad6d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001affd:	89 34 24             	mov    DWORD PTR [esp],esi
c001b000:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b004:	e8 4a 48 ff ff       	call   c000f853 <free>
c001b009:	83 c4 10             	add    esp,0x10
c001b00c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b010:	81 c4 20 01 00 00    	add    esp,0x120
c001b016:	5b                   	pop    ebx
c001b017:	5e                   	pop    esi
c001b018:	5f                   	pop    edi
c001b019:	c3                   	ret    

c001b01a <Reg::getLine(char*, char*, char*)>:
c001b01a:	57                   	push   edi
c001b01b:	56                   	push   esi
c001b01c:	53                   	push   ebx
c001b01d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b021:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b025:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b029:	57                   	push   edi
c001b02a:	56                   	push   esi
c001b02b:	53                   	push   ebx
c001b02c:	68 85 bd 02 c0       	push   0xc002bd85
c001b031:	e8 8f fe ff ff       	call   c001aec5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b036:	83 c4 10             	add    esp,0x10
c001b039:	84 c0                	test   al,al
c001b03b:	75 10                	jne    c001b04d <Reg::getLine(char*, char*, char*)+0x33>
c001b03d:	57                   	push   edi
c001b03e:	56                   	push   esi
c001b03f:	53                   	push   ebx
c001b040:	68 aa bd 02 c0       	push   0xc002bdaa
c001b045:	e8 7b fe ff ff       	call   c001aec5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b04a:	83 c4 10             	add    esp,0x10
c001b04d:	5b                   	pop    ebx
c001b04e:	5e                   	pop    esi
c001b04f:	5f                   	pop    edi
c001b050:	c3                   	ret    

c001b051 <Reg::readInt(char*, char*, int*)>:
c001b051:	55                   	push   ebp
c001b052:	57                   	push   edi
c001b053:	56                   	push   esi
c001b054:	53                   	push   ebx
c001b055:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b05b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b05f:	57                   	push   edi
c001b060:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b067:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b06e:	e8 a7 ff ff ff       	call   c001b01a <Reg::getLine(char*, char*, char*)>
c001b073:	83 c4 10             	add    esp,0x10
c001b076:	84 c0                	test   al,al
c001b078:	0f 84 b3 00 00 00    	je     c001b131 <Reg::readInt(char*, char*, int*)+0xe0>
c001b07e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b082:	80 fa 2b             	cmp    dl,0x2b
c001b085:	74 0c                	je     c001b093 <Reg::readInt(char*, char*, int*)+0x42>
c001b087:	80 fa 2d             	cmp    dl,0x2d
c001b08a:	75 0e                	jne    c001b09a <Reg::readInt(char*, char*, int*)+0x49>
c001b08c:	ba 01 00 00 00       	mov    edx,0x1
c001b091:	eb 0b                	jmp    c001b09e <Reg::readInt(char*, char*, int*)+0x4d>
c001b093:	ba 01 00 00 00       	mov    edx,0x1
c001b098:	eb 02                	jmp    c001b09c <Reg::readInt(char*, char*, int*)+0x4b>
c001b09a:	31 d2                	xor    edx,edx
c001b09c:	31 c0                	xor    eax,eax
c001b09e:	be 0a 00 00 00       	mov    esi,0xa
c001b0a3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0a8:	75 20                	jne    c001b0ca <Reg::readInt(char*, char*, int*)+0x79>
c001b0aa:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0ae:	80 f9 78             	cmp    cl,0x78
c001b0b1:	75 0a                	jne    c001b0bd <Reg::readInt(char*, char*, int*)+0x6c>
c001b0b3:	83 c2 02             	add    edx,0x2
c001b0b6:	be 10 00 00 00       	mov    esi,0x10
c001b0bb:	eb 0d                	jmp    c001b0ca <Reg::readInt(char*, char*, int*)+0x79>
c001b0bd:	80 f9 62             	cmp    cl,0x62
c001b0c0:	75 08                	jne    c001b0ca <Reg::readInt(char*, char*, int*)+0x79>
c001b0c2:	83 c2 02             	add    edx,0x2
c001b0c5:	be 02 00 00 00       	mov    esi,0x2
c001b0ca:	01 d7                	add    edi,edx
c001b0cc:	31 d2                	xor    edx,edx
c001b0ce:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0d0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0d4:	80 fb 0d             	cmp    bl,0xd
c001b0d7:	0f 94 c3             	sete   bl
c001b0da:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0df:	0f 94 c1             	sete   cl
c001b0e2:	08 cb                	or     bl,cl
c001b0e4:	75 3a                	jne    c001b120 <Reg::readInt(char*, char*, int*)+0xcf>
c001b0e6:	0f af d6             	imul   edx,esi
c001b0e9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0ee:	83 fe 10             	cmp    esi,0x10
c001b0f1:	75 26                	jne    c001b119 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0f3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0f7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0fa:	89 e9                	mov    ecx,ebp
c001b0fc:	80 f9 05             	cmp    cl,0x5
c001b0ff:	77 06                	ja     c001b107 <Reg::readInt(char*, char*, int*)+0xb6>
c001b101:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b105:	eb 16                	jmp    c001b11d <Reg::readInt(char*, char*, int*)+0xcc>
c001b107:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b10b:	83 e9 61             	sub    ecx,0x61
c001b10e:	80 f9 05             	cmp    cl,0x5
c001b111:	77 06                	ja     c001b119 <Reg::readInt(char*, char*, int*)+0xc8>
c001b113:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b117:	eb 04                	jmp    c001b11d <Reg::readInt(char*, char*, int*)+0xcc>
c001b119:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b11d:	47                   	inc    edi
c001b11e:	eb ae                	jmp    c001b0ce <Reg::readInt(char*, char*, int*)+0x7d>
c001b120:	84 c0                	test   al,al
c001b122:	74 02                	je     c001b126 <Reg::readInt(char*, char*, int*)+0xd5>
c001b124:	f7 da                	neg    edx
c001b126:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b12d:	89 10                	mov    DWORD PTR [eax],edx
c001b12f:	88 d8                	mov    al,bl
c001b131:	81 c4 ec 00 00 00    	add    esp,0xec
c001b137:	5b                   	pop    ebx
c001b138:	5e                   	pop    esi
c001b139:	5f                   	pop    edi
c001b13a:	5d                   	pop    ebp
c001b13b:	c3                   	ret    

c001b13c <Reg::readString(char*, char*, char*, int)>:
c001b13c:	57                   	push   edi
c001b13d:	56                   	push   esi
c001b13e:	53                   	push   ebx
c001b13f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b145:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b14c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b150:	57                   	push   edi
c001b151:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b158:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b15f:	e8 b6 fe ff ff       	call   c001b01a <Reg::getLine(char*, char*, char*)>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	89 c6                	mov    esi,eax
c001b169:	84 c0                	test   al,al
c001b16b:	74 44                	je     c001b1b1 <Reg::readString(char*, char*, char*, int)+0x75>
c001b16d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b174:	31 c0                	xor    eax,eax
c001b176:	4a                   	dec    edx
c001b177:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b17a:	84 c9                	test   cl,cl
c001b17c:	74 0f                	je     c001b18d <Reg::readString(char*, char*, char*, int)+0x51>
c001b17e:	39 c2                	cmp    edx,eax
c001b180:	7e 0b                	jle    c001b18d <Reg::readString(char*, char*, char*, int)+0x51>
c001b182:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b185:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b18a:	40                   	inc    eax
c001b18b:	eb ea                	jmp    c001b177 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b18d:	83 ec 0c             	sub    esp,0xc
c001b190:	53                   	push   ebx
c001b191:	e8 fe 55 fe ff       	call   c0000794 <strlen>
c001b196:	83 c4 10             	add    esp,0x10
c001b199:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b19e:	75 11                	jne    c001b1b1 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1a0:	83 ec 0c             	sub    esp,0xc
c001b1a3:	53                   	push   ebx
c001b1a4:	e8 eb 55 fe ff       	call   c0000794 <strlen>
c001b1a9:	83 c4 10             	add    esp,0x10
c001b1ac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1b1:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1b7:	89 f0                	mov    eax,esi
c001b1b9:	5b                   	pop    ebx
c001b1ba:	5e                   	pop    esi
c001b1bb:	5f                   	pop    edi
c001b1bc:	c3                   	ret    

c001b1bd <Reg::readBool(char*, char*, bool*)>:
c001b1bd:	83 ec 20             	sub    esp,0x20
c001b1c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1c4:	50                   	push   eax
c001b1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cd:	e8 7f fe ff ff       	call   c001b051 <Reg::readInt(char*, char*, int*)>
c001b1d2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1db:	0f 95 02             	setne  BYTE PTR [edx]
c001b1de:	83 c4 2c             	add    esp,0x2c
c001b1e1:	c3                   	ret    

c001b1e2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1e2:	53                   	push   ebx
c001b1e3:	83 ec 1c             	sub    esp,0x1c
c001b1e6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1ea:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1ee:	50                   	push   eax
c001b1ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f7:	e8 c1 ff ff ff       	call   c001b1bd <Reg::readBool(char*, char*, bool*)>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	84 c0                	test   al,al
c001b201:	74 04                	je     c001b207 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b203:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b207:	88 d8                	mov    al,bl
c001b209:	83 c4 18             	add    esp,0x18
c001b20c:	5b                   	pop    ebx
c001b20d:	c3                   	ret    

c001b20e <Reg::readIntWithDefault(char*, char*, int)>:
c001b20e:	53                   	push   ebx
c001b20f:	83 ec 1c             	sub    esp,0x1c
c001b212:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b216:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b21a:	50                   	push   eax
c001b21b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b21f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b223:	e8 29 fe ff ff       	call   c001b051 <Reg::readInt(char*, char*, int*)>
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	84 c0                	test   al,al
c001b22d:	74 04                	je     c001b233 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b22f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b233:	89 d8                	mov    eax,ebx
c001b235:	83 c4 18             	add    esp,0x18
c001b238:	5b                   	pop    ebx
c001b239:	c3                   	ret    

c001b23a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b23a:	57                   	push   edi
c001b23b:	56                   	push   esi
c001b23c:	53                   	push   ebx
c001b23d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b241:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b245:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b249:	56                   	push   esi
c001b24a:	53                   	push   ebx
c001b24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b253:	e8 e4 fe ff ff       	call   c001b13c <Reg::readString(char*, char*, char*, int)>
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	84 c0                	test   al,al
c001b25d:	75 1b                	jne    c001b27a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b25f:	50                   	push   eax
c001b260:	56                   	push   esi
c001b261:	4e                   	dec    esi
c001b262:	6a 00                	push   0x0
c001b264:	53                   	push   ebx
c001b265:	e8 0e 55 fe ff       	call   c0000778 <memset>
c001b26a:	83 c4 0c             	add    esp,0xc
c001b26d:	56                   	push   esi
c001b26e:	57                   	push   edi
c001b26f:	53                   	push   ebx
c001b270:	89 fb                	mov    ebx,edi
c001b272:	e8 cd 54 fe ff       	call   c0000744 <memcpy>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	89 d8                	mov    eax,ebx
c001b27c:	5b                   	pop    ebx
c001b27d:	5e                   	pop    esi
c001b27e:	5f                   	pop    edi
c001b27f:	c3                   	ret    

c001b280 <Sys::eject(regs*)>:
c001b280:	83 ec 0c             	sub    esp,0xc
c001b283:	83 ca ff             	or     edx,0xffffffff
c001b286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b28d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b292:	83 e9 41             	sub    ecx,0x41
c001b295:	83 f9 19             	cmp    ecx,0x19
c001b298:	77 18                	ja     c001b2b2 <Sys::eject(regs*)+0x32>
c001b29a:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c001b2a1:	85 c9                	test   ecx,ecx
c001b2a3:	74 0d                	je     c001b2b2 <Sys::eject(regs*)+0x32>
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	51                   	push   ecx
c001b2a9:	e8 78 b4 ff ff       	call   c0016726 <LogicalDisk::eject()>
c001b2ae:	83 c4 10             	add    esp,0x10
c001b2b1:	99                   	cdq    
c001b2b2:	83 c4 0c             	add    esp,0xc
c001b2b5:	c3                   	ret    

c001b2b6 <Sys::exit(regs*)>:
c001b2b6:	83 ec 18             	sub    esp,0x18
c001b2b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2bd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2c0:	e8 94 35 00 00       	call   c001e859 <terminateTask(int)>
c001b2c5:	83 c8 ff             	or     eax,0xffffffff
c001b2c8:	83 c4 1c             	add    esp,0x1c
c001b2cb:	89 c2                	mov    edx,eax
c001b2cd:	c3                   	ret    

c001b2ce <Sys::getCwd(regs*)>:
c001b2ce:	83 ec 10             	sub    esp,0x10
c001b2d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2d5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2e3:	e8 e6 7f ff ff       	call   c00132ce <Fs::getcwd(Process*, char*, int)>
c001b2e8:	83 c4 1c             	add    esp,0x1c
c001b2eb:	99                   	cdq    
c001b2ec:	c3                   	ret    

c001b2ed <Sys::getPID(regs*)>:
c001b2ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2f7:	99                   	cdq    
c001b2f8:	c3                   	ret    

c001b2f9 <Sys::getRAMData(regs*)>:
c001b2f9:	8b 0d f4 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e4f4
c001b2ff:	6b 05 f0 e4 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e4f0,0x64
c001b306:	99                   	cdq    
c001b307:	f7 f9                	idiv   ecx
c001b309:	c1 e0 18             	shl    eax,0x18
c001b30c:	09 c8                	or     eax,ecx
c001b30e:	99                   	cdq    
c001b30f:	c3                   	ret    

c001b310 <Sys::loadDLL(regs*)>:
c001b310:	56                   	push   esi
c001b311:	53                   	push   ebx
c001b312:	31 d2                	xor    edx,edx
c001b314:	51                   	push   ecx
c001b315:	b8 01 00 00 00       	mov    eax,0x1
c001b31a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b31e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b322:	0f 84 8c 00 00 00    	je     c001b3b4 <Sys::loadDLL(regs*)+0xa4>
c001b328:	83 ec 0c             	sub    esp,0xc
c001b32b:	68 14 01 00 00       	push   0x114
c001b330:	e8 0e 45 ff ff       	call   c000f843 <malloc>
c001b335:	83 c4 0c             	add    esp,0xc
c001b338:	89 c3                	mov    ebx,eax
c001b33a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b33f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b342:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b345:	53                   	push   ebx
c001b346:	e8 81 81 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001b34b:	83 c4 10             	add    esp,0x10
c001b34e:	31 d2                	xor    edx,edx
c001b350:	b8 02 00 00 00       	mov    eax,0x2
c001b355:	85 db                	test   ebx,ebx
c001b357:	74 5b                	je     c001b3b4 <Sys::loadDLL(regs*)+0xa4>
c001b359:	83 ec 0c             	sub    esp,0xc
c001b35c:	53                   	push   ebx
c001b35d:	e8 3c 84 ff ff       	call   c001379e <File::exists()>
c001b362:	83 c4 10             	add    esp,0x10
c001b365:	84 c0                	test   al,al
c001b367:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b369:	75 11                	jne    c001b37c <Sys::loadDLL(regs*)+0x6c>
c001b36b:	83 ec 0c             	sub    esp,0xc
c001b36e:	53                   	push   ebx
c001b36f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	b8 03 00 00 00       	mov    eax,0x3
c001b37a:	eb 36                	jmp    c001b3b2 <Sys::loadDLL(regs*)+0xa2>
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	53                   	push   ebx
c001b380:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b383:	58                   	pop    eax
c001b384:	5a                   	pop    edx
c001b385:	6a 00                	push   0x0
c001b387:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b38a:	e8 c5 23 00 00       	call   c001d754 <Thr::loadDLL(char const*, bool)>
c001b38f:	83 c4 10             	add    esp,0x10
c001b392:	89 c1                	mov    ecx,eax
c001b394:	31 d2                	xor    edx,edx
c001b396:	b8 04 00 00 00       	mov    eax,0x4
c001b39b:	85 c9                	test   ecx,ecx
c001b39d:	74 15                	je     c001b3b4 <Sys::loadDLL(regs*)+0xa4>
c001b39f:	53                   	push   ebx
c001b3a0:	53                   	push   ebx
c001b3a1:	ff 35 a8 e4 02 c0    	push   DWORD PTR ds:0xc002e4a8
c001b3a7:	51                   	push   ecx
c001b3a8:	e8 f6 25 00 00       	call   c001d9a3 <Thr::executeDLL(unsigned long, void*)>
c001b3ad:	83 c4 10             	add    esp,0x10
c001b3b0:	31 c0                	xor    eax,eax
c001b3b2:	31 d2                	xor    edx,edx
c001b3b4:	59                   	pop    ecx
c001b3b5:	5b                   	pop    ebx
c001b3b6:	5e                   	pop    esi
c001b3b7:	c3                   	ret    

c001b3b8 <Sys::read(regs*)>:
c001b3b8:	57                   	push   edi
c001b3b9:	56                   	push   esi
c001b3ba:	53                   	push   ebx
c001b3bb:	83 ec 10             	sub    esp,0x10
c001b3be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3c5:	83 f8 02             	cmp    eax,0x2
c001b3c8:	77 10                	ja     c001b3da <Sys::read(regs*)+0x22>
c001b3ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3d2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3d8:	eb 0e                	jmp    c001b3e8 <Sys::read(regs*)+0x30>
c001b3da:	83 ec 0c             	sub    esp,0xc
c001b3dd:	50                   	push   eax
c001b3de:	e8 0a 66 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	89 c1                	mov    ecx,eax
c001b3e8:	83 c8 ff             	or     eax,0xffffffff
c001b3eb:	85 c9                	test   ecx,ecx
c001b3ed:	89 c2                	mov    edx,eax
c001b3ef:	74 28                	je     c001b419 <Sys::read(regs*)+0x61>
c001b3f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3f9:	31 ff                	xor    edi,edi
c001b3fb:	83 ec 0c             	sub    esp,0xc
c001b3fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b400:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b404:	52                   	push   edx
c001b405:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b408:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b40b:	57                   	push   edi
c001b40c:	56                   	push   esi
c001b40d:	51                   	push   ecx
c001b40e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b411:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b415:	83 c4 20             	add    esp,0x20
c001b418:	99                   	cdq    
c001b419:	83 c4 10             	add    esp,0x10
c001b41c:	5b                   	pop    ebx
c001b41d:	5e                   	pop    esi
c001b41e:	5f                   	pop    edi
c001b41f:	c3                   	ret    

c001b420 <Sys::sbrk(regs*)>:
c001b420:	56                   	push   esi
c001b421:	53                   	push   ebx
c001b422:	50                   	push   eax
c001b423:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b428:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b42c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b42f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b432:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b438:	85 db                	test   ebx,ebx
c001b43a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b43d:	74 02                	je     c001b441 <Sys::sbrk(regs*)+0x21>
c001b43f:	79 06                	jns    c001b447 <Sys::sbrk(regs*)+0x27>
c001b441:	89 f0                	mov    eax,esi
c001b443:	31 d2                	xor    edx,edx
c001b445:	eb 2a                	jmp    c001b471 <Sys::sbrk(regs*)+0x51>
c001b447:	83 c8 ff             	or     eax,0xffffffff
c001b44a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b450:	89 c2                	mov    edx,eax
c001b452:	77 1d                	ja     c001b471 <Sys::sbrk(regs*)+0x51>
c001b454:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b45a:	50                   	push   eax
c001b45b:	c1 ea 0c             	shr    edx,0xc
c001b45e:	68 07 0c 00 00       	push   0xc07
c001b463:	52                   	push   edx
c001b464:	51                   	push   ecx
c001b465:	e8 c6 6f ff ff       	call   c0012430 <VAS::allocatePages(int, int)>
c001b46a:	89 f0                	mov    eax,esi
c001b46c:	31 d2                	xor    edx,edx
c001b46e:	83 c4 10             	add    esp,0x10
c001b471:	59                   	pop    ecx
c001b472:	5b                   	pop    ebx
c001b473:	5e                   	pop    esi
c001b474:	c3                   	ret    

c001b475 <Sys::setCwd(regs*)>:
c001b475:	83 ec 14             	sub    esp,0x14
c001b478:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b47c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b47f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b484:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b487:	e8 b1 83 ff ff       	call   c001383d <Fs::setcwd(Process*, char*)>
c001b48c:	83 c4 1c             	add    esp,0x1c
c001b48f:	99                   	cdq    
c001b490:	c3                   	ret    

c001b491 <Sys::setTime(regs*)>:
c001b491:	55                   	push   ebp
c001b492:	31 d2                	xor    edx,edx
c001b494:	57                   	push   edi
c001b495:	bf 18 00 00 00       	mov    edi,0x18
c001b49a:	56                   	push   esi
c001b49b:	53                   	push   ebx
c001b49c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4a1:	83 ec 30             	sub    esp,0x30
c001b4a4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4a8:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4ab:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4ae:	f7 f3                	div    ebx
c001b4b0:	89 d6                	mov    esi,edx
c001b4b2:	31 d2                	xor    edx,edx
c001b4b4:	f7 f3                	div    ebx
c001b4b6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4bd:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4c2:	31 d2                	xor    edx,edx
c001b4c4:	f7 f3                	div    ebx
c001b4c6:	31 d2                	xor    edx,edx
c001b4c8:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4cd:	f7 f7                	div    edi
c001b4cf:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4d2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b4d6:	0f b7 cd             	movzx  ecx,bp
c001b4d9:	56                   	push   esi
c001b4da:	89 c7                	mov    edi,eax
c001b4dc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b4e0:	c1 e6 10             	shl    esi,0x10
c001b4e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4e7:	83 e7 1f             	and    edi,0x1f
c001b4ea:	51                   	push   ecx
c001b4eb:	47                   	inc    edi
c001b4ec:	c1 e8 05             	shr    eax,0x5
c001b4ef:	31 d2                	xor    edx,edx
c001b4f1:	f7 f3                	div    ebx
c001b4f3:	31 db                	xor    ebx,ebx
c001b4f5:	52                   	push   edx
c001b4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b4fa:	57                   	push   edi
c001b4fb:	68 c5 bd 02 c0       	push   0xc002bdc5
c001b500:	e8 6f 7a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001b505:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b509:	89 f8                	mov    eax,edi
c001b50b:	31 c9                	xor    ecx,ecx
c001b50d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b511:	88 c1                	mov    cl,al
c001b513:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b519:	88 d5                	mov    ch,dl
c001b51b:	c1 e0 10             	shl    eax,0x10
c001b51e:	0f b7 d1             	movzx  edx,cx
c001b521:	09 c2                	or     edx,eax
c001b523:	89 d8                	mov    eax,ebx
c001b525:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b52a:	09 f0                	or     eax,esi
c001b52c:	89 c3                	mov    ebx,eax
c001b52e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b532:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b536:	83 c4 18             	add    esp,0x18
c001b539:	53                   	push   ebx
c001b53a:	52                   	push   edx
c001b53b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b53f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b543:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b547:	e8 0b 8a ff ff       	call   c0013f57 <datetimeToSeconds(datetime_t)>
c001b54c:	83 c4 0c             	add    esp,0xc
c001b54f:	52                   	push   edx
c001b550:	50                   	push   eax
c001b551:	56                   	push   esi
c001b552:	e8 87 8b ff ff       	call   c00140de <secondsToDatetime(unsigned long long)>
c001b557:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b55b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b55f:	51                   	push   ecx
c001b560:	89 d6                	mov    esi,edx
c001b562:	51                   	push   ecx
c001b563:	c1 ee 10             	shr    esi,0x10
c001b566:	89 f3                	mov    ebx,esi
c001b568:	0f b6 f3             	movzx  esi,bl
c001b56b:	56                   	push   esi
c001b56c:	0f b6 f6             	movzx  esi,dh
c001b56f:	0f b6 d2             	movzx  edx,dl
c001b572:	56                   	push   esi
c001b573:	52                   	push   edx
c001b574:	89 c2                	mov    edx,eax
c001b576:	c1 ea 10             	shr    edx,0x10
c001b579:	52                   	push   edx
c001b57a:	0f b6 d4             	movzx  edx,ah
c001b57d:	0f b6 c0             	movzx  eax,al
c001b580:	52                   	push   edx
c001b581:	50                   	push   eax
c001b582:	68 e1 bd 02 c0       	push   0xc002bde1
c001b587:	e8 e8 79 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001b58c:	83 c4 2c             	add    esp,0x2c
c001b58f:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001b594:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b598:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b59c:	53                   	push   ebx
c001b59d:	51                   	push   ecx
c001b59e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5a4:	e8 d5 8a ff ff       	call   c001407e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5a9:	83 f0 01             	xor    eax,0x1
c001b5ac:	31 d2                	xor    edx,edx
c001b5ae:	0f b6 c0             	movzx  eax,al
c001b5b1:	83 c4 3c             	add    esp,0x3c
c001b5b4:	5b                   	pop    ebx
c001b5b5:	5e                   	pop    esi
c001b5b6:	5f                   	pop    edi
c001b5b7:	5d                   	pop    ebp
c001b5b8:	c3                   	ret    

c001b5b9 <Sys::timezone(regs*)>:
c001b5b9:	53                   	push   ebx
c001b5ba:	83 ec 08             	sub    esp,0x8
c001b5bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5c1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5c5:	75 17                	jne    c001b5de <Sys::timezone(regs*)+0x25>
c001b5c7:	83 ec 0c             	sub    esp,0xc
c001b5ca:	68 fd bd 02 c0       	push   0xc002bdfd
c001b5cf:	e8 a0 79 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001b5d4:	83 c8 ff             	or     eax,0xffffffff
c001b5d7:	83 c4 10             	add    esp,0x10
c001b5da:	89 c2                	mov    edx,eax
c001b5dc:	eb 20                	jmp    c001b5fe <Sys::timezone(regs*)+0x45>
c001b5de:	83 ec 0c             	sub    esp,0xc
c001b5e1:	68 35 be 02 c0       	push   0xc002be35
c001b5e6:	e8 89 79 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001b5eb:	58                   	pop    eax
c001b5ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b5ef:	e8 ec 87 ff ff       	call   c0013de0 <User::loadClockSettings(int)>
c001b5f4:	83 c4 10             	add    esp,0x10
c001b5f7:	b8 01 00 00 00       	mov    eax,0x1
c001b5fc:	31 d2                	xor    edx,edx
c001b5fe:	83 c4 08             	add    esp,0x8
c001b601:	5b                   	pop    ebx
c001b602:	c3                   	ret    

c001b603 <Sys::write(regs*)>:
c001b603:	57                   	push   edi
c001b604:	56                   	push   esi
c001b605:	53                   	push   ebx
c001b606:	83 ec 10             	sub    esp,0x10
c001b609:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b60d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b610:	83 f8 02             	cmp    eax,0x2
c001b613:	77 10                	ja     c001b625 <Sys::write(regs*)+0x22>
c001b615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b61a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b61d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b623:	eb 0e                	jmp    c001b633 <Sys::write(regs*)+0x30>
c001b625:	83 ec 0c             	sub    esp,0xc
c001b628:	50                   	push   eax
c001b629:	e8 bf 63 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b62e:	83 c4 10             	add    esp,0x10
c001b631:	89 c1                	mov    ecx,eax
c001b633:	83 c8 ff             	or     eax,0xffffffff
c001b636:	85 c9                	test   ecx,ecx
c001b638:	89 c2                	mov    edx,eax
c001b63a:	74 28                	je     c001b664 <Sys::write(regs*)+0x61>
c001b63c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b644:	31 ff                	xor    edi,edi
c001b646:	83 ec 0c             	sub    esp,0xc
c001b649:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b64b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b64f:	52                   	push   edx
c001b650:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b653:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b656:	57                   	push   edi
c001b657:	56                   	push   esi
c001b658:	51                   	push   ecx
c001b659:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b65c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b660:	83 c4 20             	add    esp,0x20
c001b663:	99                   	cdq    
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	5b                   	pop    ebx
c001b668:	5e                   	pop    esi
c001b669:	5f                   	pop    edi
c001b66a:	c3                   	ret    

c001b66b <Sys::wsbe(regs*)>:
c001b66b:	57                   	push   edi
c001b66c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b671:	56                   	push   esi
c001b672:	be 74 be 02 c0       	mov    esi,0xc002be74
c001b677:	53                   	push   ebx
c001b678:	83 ec 30             	sub    esp,0x30
c001b67b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b67f:	fc                   	cld    
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b685:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b691:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b697:	8b 06                	mov    eax,DWORD PTR [esi]
c001b699:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b69c:	57                   	push   edi
c001b69d:	e8 f2 50 fe ff       	call   c0000794 <strlen>
c001b6a2:	5a                   	pop    edx
c001b6a3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6a7:	52                   	push   edx
c001b6a8:	31 d2                	xor    edx,edx
c001b6aa:	57                   	push   edi
c001b6ab:	52                   	push   edx
c001b6ac:	50                   	push   eax
c001b6ad:	56                   	push   esi
c001b6ae:	ff d3                	call   ebx
c001b6b0:	83 c4 14             	add    esp,0x14
c001b6b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6ba:	e8 9a 31 00 00       	call   c001e859 <terminateTask(int)>
c001b6bf:	83 c4 40             	add    esp,0x40
c001b6c2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6c7:	5b                   	pop    ebx
c001b6c8:	31 d2                	xor    edx,edx
c001b6ca:	5e                   	pop    esi
c001b6cb:	5f                   	pop    edi
c001b6cc:	c3                   	ret    

c001b6cd <Sys::yield(regs*)>:
c001b6cd:	57                   	push   edi
c001b6ce:	56                   	push   esi
c001b6cf:	53                   	push   ebx
c001b6d0:	e8 41 27 00 00       	call   c001de16 <lockScheduler()>
c001b6d5:	e8 78 2a 00 00       	call   c001e152 <schedule()>
c001b6da:	e8 39 27 00 00       	call   c001de18 <unlockScheduler()>
c001b6df:	8b 35 30 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002eb30
c001b6e5:	8b 3d 34 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb34
c001b6eb:	89 f0                	mov    eax,esi
c001b6ed:	89 fb                	mov    ebx,edi
c001b6ef:	89 f1                	mov    ecx,esi
c001b6f1:	c1 e0 07             	shl    eax,0x7
c001b6f4:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b6f8:	25 80 30 0f 00       	and    eax,0xf3080
c001b6fd:	c1 eb 17             	shr    ebx,0x17
c001b700:	31 c8                	xor    eax,ecx
c001b702:	89 da                	mov    edx,ebx
c001b704:	5b                   	pop    ebx
c001b705:	5e                   	pop    esi
c001b706:	5f                   	pop    edi
c001b707:	c3                   	ret    

c001b708 <sysCallSeekDir(regs*)>:
c001b708:	31 c0                	xor    eax,eax
c001b70a:	31 d2                	xor    edx,edx
c001b70c:	c3                   	ret    

c001b70d <sysCallTellDir(regs*)>:
c001b70d:	31 c0                	xor    eax,eax
c001b70f:	31 d2                	xor    edx,edx
c001b711:	c3                   	ret    

c001b712 <sysCallVerify(regs*)>:
c001b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b716:	31 d2                	xor    edx,edx
c001b718:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b71b:	c3                   	ret    

c001b71c <sysFormatDisk(regs*)>:
c001b71c:	56                   	push   esi
c001b71d:	53                   	push   ebx
c001b71e:	53                   	push   ebx
c001b71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b723:	8b 1d 30 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e630
c001b729:	eb 25                	jmp    c001b750 <sysFormatDisk(regs*)+0x34>
c001b72b:	83 ec 0c             	sub    esp,0xc
c001b72e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b731:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b733:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b736:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b739:	50                   	push   eax
c001b73a:	ff 34 85 c0 ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd1540]
c001b741:	53                   	push   ebx
c001b742:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b745:	83 c4 20             	add    esp,0x20
c001b748:	83 f8 08             	cmp    eax,0x8
c001b74b:	75 12                	jne    c001b75f <sysFormatDisk(regs*)+0x43>
c001b74d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b750:	85 db                	test   ebx,ebx
c001b752:	75 d7                	jne    c001b72b <sysFormatDisk(regs*)+0xf>
c001b754:	59                   	pop    ecx
c001b755:	b8 03 00 00 00       	mov    eax,0x3
c001b75a:	31 d2                	xor    edx,edx
c001b75c:	5b                   	pop    ebx
c001b75d:	5e                   	pop    esi
c001b75e:	c3                   	ret    
c001b75f:	85 c0                	test   eax,eax
c001b761:	74 1b                	je     c001b77e <sysFormatDisk(regs*)+0x62>
c001b763:	83 f8 09             	cmp    eax,0x9
c001b766:	74 0b                	je     c001b773 <sysFormatDisk(regs*)+0x57>
c001b768:	59                   	pop    ecx
c001b769:	b8 02 00 00 00       	mov    eax,0x2
c001b76e:	31 d2                	xor    edx,edx
c001b770:	5b                   	pop    ebx
c001b771:	5e                   	pop    esi
c001b772:	c3                   	ret    
c001b773:	59                   	pop    ecx
c001b774:	b8 01 00 00 00       	mov    eax,0x1
c001b779:	31 d2                	xor    edx,edx
c001b77b:	5b                   	pop    ebx
c001b77c:	5e                   	pop    esi
c001b77d:	c3                   	ret    
c001b77e:	59                   	pop    ecx
c001b77f:	31 c0                	xor    eax,eax
c001b781:	31 d2                	xor    edx,edx
c001b783:	5b                   	pop    ebx
c001b784:	5e                   	pop    esi
c001b785:	c3                   	ret    

c001b786 <sysSetDiskVolumeLabel(regs*)>:
c001b786:	56                   	push   esi
c001b787:	53                   	push   ebx
c001b788:	53                   	push   ebx
c001b789:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b78d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b790:	83 f8 19             	cmp    eax,0x19
c001b793:	77 29                	ja     c001b7be <sysSetDiskVolumeLabel(regs*)+0x38>
c001b795:	8b 0c 85 c0 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1540]
c001b79c:	85 c9                	test   ecx,ecx
c001b79e:	74 1e                	je     c001b7be <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7a3:	85 d2                	test   edx,edx
c001b7a5:	74 17                	je     c001b7be <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7a7:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7ad:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7af:	52                   	push   edx
c001b7b0:	50                   	push   eax
c001b7b1:	51                   	push   ecx
c001b7b2:	53                   	push   ebx
c001b7b3:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7b6:	83 c4 10             	add    esp,0x10
c001b7b9:	99                   	cdq    
c001b7ba:	59                   	pop    ecx
c001b7bb:	5b                   	pop    ebx
c001b7bc:	5e                   	pop    esi
c001b7bd:	c3                   	ret    
c001b7be:	59                   	pop    ecx
c001b7bf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c9:	5b                   	pop    ebx
c001b7ca:	5e                   	pop    esi
c001b7cb:	c3                   	ret    

c001b7cc <sysGetDiskVolumeLabel(regs*)>:
c001b7cc:	57                   	push   edi
c001b7cd:	56                   	push   esi
c001b7ce:	53                   	push   ebx
c001b7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b7d6:	83 fa 19             	cmp    edx,0x19
c001b7d9:	77 34                	ja     c001b80f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7db:	8b 0c 95 c0 ea 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1540]
c001b7e2:	85 c9                	test   ecx,ecx
c001b7e4:	74 29                	je     c001b80f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7e6:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b7e9:	85 db                	test   ebx,ebx
c001b7eb:	74 22                	je     c001b80f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7ed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b7f0:	85 c0                	test   eax,eax
c001b7f2:	74 1b                	je     c001b80f <sysGetDiskVolumeLabel(regs*)+0x43>
c001b7f4:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b7fa:	83 ec 0c             	sub    esp,0xc
c001b7fd:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b7ff:	50                   	push   eax
c001b800:	53                   	push   ebx
c001b801:	52                   	push   edx
c001b802:	51                   	push   ecx
c001b803:	56                   	push   esi
c001b804:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b807:	83 c4 20             	add    esp,0x20
c001b80a:	99                   	cdq    
c001b80b:	5b                   	pop    ebx
c001b80c:	5e                   	pop    esi
c001b80d:	5f                   	pop    edi
c001b80e:	c3                   	ret    
c001b80f:	5b                   	pop    ebx
c001b810:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b815:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b81a:	5e                   	pop    esi
c001b81b:	5f                   	pop    edi
c001b81c:	c3                   	ret    

c001b81d <sysShutdown(regs*)>:
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b824:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b827:	85 c0                	test   eax,eax
c001b829:	74 18                	je     c001b843 <sysShutdown(regs*)+0x26>
c001b82b:	83 f8 01             	cmp    eax,0x1
c001b82e:	74 38                	je     c001b868 <sysShutdown(regs*)+0x4b>
c001b830:	83 f8 02             	cmp    eax,0x2
c001b833:	74 24                	je     c001b859 <sysShutdown(regs*)+0x3c>
c001b835:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b83a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b83f:	83 c4 0c             	add    esp,0xc
c001b842:	c3                   	ret    
c001b843:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001b848:	8b 10                	mov    edx,DWORD PTR [eax]
c001b84a:	6a 00                	push   0x0
c001b84c:	6a 00                	push   0x0
c001b84e:	6a 00                	push   0x0
c001b850:	50                   	push   eax
c001b851:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b854:	83 c4 10             	add    esp,0x10
c001b857:	eb dc                	jmp    c001b835 <sysShutdown(regs*)+0x18>
c001b859:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001b85e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b860:	6a 00                	push   0x0
c001b862:	6a 00                	push   0x0
c001b864:	6a 01                	push   0x1
c001b866:	eb e8                	jmp    c001b850 <sysShutdown(regs*)+0x33>
c001b868:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c001b86d:	85 c0                	test   eax,eax
c001b86f:	74 02                	je     c001b873 <sysShutdown(regs*)+0x56>
c001b871:	ff d0                	call   eax
c001b873:	31 c0                	xor    eax,eax
c001b875:	31 d2                	xor    edx,edx
c001b877:	83 c4 0c             	add    esp,0xc
c001b87a:	c3                   	ret    

c001b87b <sysCallRealpath(regs*)>:
c001b87b:	83 ec 0c             	sub    esp,0xc
c001b87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b882:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b885:	85 d2                	test   edx,edx
c001b887:	74 07                	je     c001b890 <sysCallRealpath(regs*)+0x15>
c001b889:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b88c:	85 c0                	test   eax,eax
c001b88e:	75 0b                	jne    c001b89b <sysCallRealpath(regs*)+0x20>
c001b890:	b8 01 00 00 00       	mov    eax,0x1
c001b895:	31 d2                	xor    edx,edx
c001b897:	83 c4 0c             	add    esp,0xc
c001b89a:	c3                   	ret    
c001b89b:	51                   	push   ecx
c001b89c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8a2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8a5:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8ab:	51                   	push   ecx
c001b8ac:	52                   	push   edx
c001b8ad:	50                   	push   eax
c001b8ae:	e8 6f 7a ff ff       	call   c0013322 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8b3:	83 c4 10             	add    esp,0x10
c001b8b6:	31 c0                	xor    eax,eax
c001b8b8:	31 d2                	xor    edx,edx
c001b8ba:	83 c4 0c             	add    esp,0xc
c001b8bd:	c3                   	ret    

c001b8be <sysCallGetArgc(regs*)>:
c001b8be:	83 ec 14             	sub    esp,0x14
c001b8c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8c9:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b8cf:	68 a0 be 02 c0       	push   0xc002bea0
c001b8d4:	e8 9b 76 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001b8d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e1:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b8e7:	83 c4 1c             	add    esp,0x1c
c001b8ea:	99                   	cdq    
c001b8eb:	c3                   	ret    

c001b8ec <sysCallReadDir(regs*)>:
c001b8ec:	53                   	push   ebx
c001b8ed:	83 ec 18             	sub    esp,0x18
c001b8f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8f7:	83 f8 02             	cmp    eax,0x2
c001b8fa:	76 53                	jbe    c001b94f <sysCallReadDir(regs*)+0x63>
c001b8fc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8ff:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b905:	77 4f                	ja     c001b956 <sysCallReadDir(regs*)+0x6a>
c001b907:	83 ec 0c             	sub    esp,0xc
c001b90a:	50                   	push   eax
c001b90b:	e8 dd 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b910:	83 c4 10             	add    esp,0x10
c001b913:	85 c0                	test   eax,eax
c001b915:	74 50                	je     c001b967 <sysCallReadDir(regs*)+0x7b>
c001b917:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b91f:	83 ec 0c             	sub    esp,0xc
c001b922:	8b 10                	mov    edx,DWORD PTR [eax]
c001b924:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b928:	51                   	push   ecx
c001b929:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b92c:	6a 00                	push   0x0
c001b92e:	68 10 01 00 00       	push   0x110
c001b933:	50                   	push   eax
c001b934:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b937:	83 c4 20             	add    esp,0x20
c001b93a:	85 c0                	test   eax,eax
c001b93c:	74 38                	je     c001b976 <sysCallReadDir(regs*)+0x8a>
c001b93e:	83 f8 07             	cmp    eax,0x7
c001b941:	74 0c                	je     c001b94f <sysCallReadDir(regs*)+0x63>
c001b943:	b8 02 00 00 00       	mov    eax,0x2
c001b948:	31 d2                	xor    edx,edx
c001b94a:	83 c4 18             	add    esp,0x18
c001b94d:	5b                   	pop    ebx
c001b94e:	c3                   	ret    
c001b94f:	b8 01 00 00 00       	mov    eax,0x1
c001b954:	eb f2                	jmp    c001b948 <sysCallReadDir(regs*)+0x5c>
c001b956:	83 ec 08             	sub    esp,0x8
c001b959:	52                   	push   edx
c001b95a:	68 b8 bf 02 c0       	push   0xc002bfb8
c001b95f:	e8 10 76 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001b964:	83 c4 10             	add    esp,0x10
c001b967:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b96c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b971:	83 c4 18             	add    esp,0x18
c001b974:	5b                   	pop    ebx
c001b975:	c3                   	ret    
c001b976:	31 c0                	xor    eax,eax
c001b978:	eb ce                	jmp    c001b948 <sysCallReadDir(regs*)+0x5c>

c001b97a <sysCallIsATTY(regs*)>:
c001b97a:	83 ec 0c             	sub    esp,0xc
c001b97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b981:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b984:	83 f8 02             	cmp    eax,0x2
c001b987:	76 07                	jbe    c001b990 <sysCallIsATTY(regs*)+0x16>
c001b989:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b98e:	75 26                	jne    c001b9b6 <sysCallIsATTY(regs*)+0x3c>
c001b990:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b995:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b998:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b99e:	85 c0                	test   eax,eax
c001b9a0:	74 24                	je     c001b9c6 <sysCallIsATTY(regs*)+0x4c>
c001b9a2:	83 ec 0c             	sub    esp,0xc
c001b9a5:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9a7:	50                   	push   eax
c001b9a8:	ff 12                	call   DWORD PTR [edx]
c001b9aa:	31 d2                	xor    edx,edx
c001b9ac:	0f b6 c0             	movzx  eax,al
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	83 c4 0c             	add    esp,0xc
c001b9b5:	c3                   	ret    
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	50                   	push   eax
c001b9ba:	e8 2e 60 ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	85 c0                	test   eax,eax
c001b9c4:	75 dc                	jne    c001b9a2 <sysCallIsATTY(regs*)+0x28>
c001b9c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9d0:	83 c4 0c             	add    esp,0xc
c001b9d3:	c3                   	ret    

c001b9d4 <sysCallSeek(regs*)>:
c001b9d4:	53                   	push   ebx
c001b9d5:	83 ec 08             	sub    esp,0x8
c001b9d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9df:	83 f8 02             	cmp    eax,0x2
c001b9e2:	76 4a                	jbe    c001ba2e <sysCallSeek(regs*)+0x5a>
c001b9e4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9e9:	77 32                	ja     c001ba1d <sysCallSeek(regs*)+0x49>
c001b9eb:	83 ec 0c             	sub    esp,0xc
c001b9ee:	50                   	push   eax
c001b9ef:	e8 f9 5f ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001b9f4:	83 c4 0c             	add    esp,0xc
c001b9f7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9fa:	31 db                	xor    ebx,ebx
c001b9fc:	53                   	push   ebx
c001b9fd:	51                   	push   ecx
c001b9fe:	50                   	push   eax
c001b9ff:	e8 ea 7b ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001ba04:	83 c4 10             	add    esp,0x10
c001ba07:	85 c0                	test   eax,eax
c001ba09:	0f 95 c0             	setne  al
c001ba0c:	31 d2                	xor    edx,edx
c001ba0e:	0f b6 c0             	movzx  eax,al
c001ba11:	f7 d8                	neg    eax
c001ba13:	83 d2 00             	adc    edx,0x0
c001ba16:	83 c4 08             	add    esp,0x8
c001ba19:	f7 da                	neg    edx
c001ba1b:	5b                   	pop    ebx
c001ba1c:	c3                   	ret    
c001ba1d:	83 ec 08             	sub    esp,0x8
c001ba20:	50                   	push   eax
c001ba21:	68 ab be 02 c0       	push   0xc002beab
c001ba26:	e8 49 75 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ba2b:	83 c4 10             	add    esp,0x10
c001ba2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba33:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba38:	83 c4 08             	add    esp,0x8
c001ba3b:	5b                   	pop    ebx
c001ba3c:	c3                   	ret    

c001ba3d <sysCallTell(regs*)>:
c001ba3d:	53                   	push   ebx
c001ba3e:	83 ec 08             	sub    esp,0x8
c001ba41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba45:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba48:	83 f8 02             	cmp    eax,0x2
c001ba4b:	76 5e                	jbe    c001baab <sysCallTell(regs*)+0x6e>
c001ba4d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba52:	77 2d                	ja     c001ba81 <sysCallTell(regs*)+0x44>
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	50                   	push   eax
c001ba58:	e8 90 5f ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001ba5d:	5a                   	pop    edx
c001ba5e:	59                   	pop    ecx
c001ba5f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba62:	50                   	push   eax
c001ba63:	e8 dc 7b ff ff       	call   c0013644 <File::tell(unsigned long long*)>
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	85 c0                	test   eax,eax
c001ba6d:	0f 95 c0             	setne  al
c001ba70:	31 d2                	xor    edx,edx
c001ba72:	0f b6 c0             	movzx  eax,al
c001ba75:	f7 d8                	neg    eax
c001ba77:	83 d2 00             	adc    edx,0x0
c001ba7a:	83 c4 08             	add    esp,0x8
c001ba7d:	f7 da                	neg    edx
c001ba7f:	5b                   	pop    ebx
c001ba80:	c3                   	ret    
c001ba81:	83 ec 08             	sub    esp,0x8
c001ba84:	50                   	push   eax
c001ba85:	68 c5 be 02 c0       	push   0xc002bec5
c001ba8a:	e8 e5 74 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ba8f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba92:	83 c4 10             	add    esp,0x10
c001ba95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baa2:	31 d2                	xor    edx,edx
c001baa4:	31 c0                	xor    eax,eax
c001baa6:	83 c4 08             	add    esp,0x8
c001baa9:	5b                   	pop    ebx
c001baaa:	c3                   	ret    
c001baab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bab0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab5:	83 c4 08             	add    esp,0x8
c001bab8:	5b                   	pop    ebx
c001bab9:	c3                   	ret    

c001baba <sysCallSize(regs*)>:
c001baba:	53                   	push   ebx
c001babb:	83 ec 18             	sub    esp,0x18
c001babe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bac2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bac5:	83 f8 02             	cmp    eax,0x2
c001bac8:	76 64                	jbe    c001bb2e <sysCallSize(regs*)+0x74>
c001baca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bacf:	77 33                	ja     c001bb04 <sysCallSize(regs*)+0x4a>
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	50                   	push   eax
c001bad5:	e8 13 5f ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bada:	83 c4 0c             	add    esp,0xc
c001badd:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bae1:	52                   	push   edx
c001bae2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bae5:	50                   	push   eax
c001bae6:	e8 f1 7c ff ff       	call   c00137dc <File::stat(unsigned long long*, bool*)>
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	85 c0                	test   eax,eax
c001baf0:	0f 95 c0             	setne  al
c001baf3:	31 d2                	xor    edx,edx
c001baf5:	0f b6 c0             	movzx  eax,al
c001baf8:	f7 d8                	neg    eax
c001bafa:	83 d2 00             	adc    edx,0x0
c001bafd:	83 c4 18             	add    esp,0x18
c001bb00:	f7 da                	neg    edx
c001bb02:	5b                   	pop    ebx
c001bb03:	c3                   	ret    
c001bb04:	83 ec 08             	sub    esp,0x8
c001bb07:	50                   	push   eax
c001bb08:	68 df be 02 c0       	push   0xc002bedf
c001bb0d:	e8 62 74 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001bb12:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb15:	83 c4 10             	add    esp,0x10
c001bb18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb25:	31 d2                	xor    edx,edx
c001bb27:	31 c0                	xor    eax,eax
c001bb29:	83 c4 18             	add    esp,0x18
c001bb2c:	5b                   	pop    ebx
c001bb2d:	c3                   	ret    
c001bb2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb33:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb38:	83 c4 18             	add    esp,0x18
c001bb3b:	5b                   	pop    ebx
c001bb3c:	c3                   	ret    

c001bb3d <sysCallSizeFromFilename(regs*)>:
c001bb3d:	57                   	push   edi
c001bb3e:	56                   	push   esi
c001bb3f:	53                   	push   ebx
c001bb40:	83 ec 20             	sub    esp,0x20
c001bb43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb47:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb4a:	83 fb 02             	cmp    ebx,0x2
c001bb4d:	0f 86 99 00 00 00    	jbe    c001bbec <sysCallSizeFromFilename(regs*)+0xaf>
c001bb53:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb59:	77 65                	ja     c001bbc0 <sysCallSizeFromFilename(regs*)+0x83>
c001bb5b:	83 ec 0c             	sub    esp,0xc
c001bb5e:	68 14 01 00 00       	push   0x114
c001bb63:	e8 db 3c ff ff       	call   c000f843 <malloc>
c001bb68:	83 c4 0c             	add    esp,0xc
c001bb6b:	89 c6                	mov    esi,eax
c001bb6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb72:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb75:	53                   	push   ebx
c001bb76:	56                   	push   esi
c001bb77:	e8 50 79 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001bb7c:	83 c4 0c             	add    esp,0xc
c001bb7f:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bb83:	50                   	push   eax
c001bb84:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bb87:	56                   	push   esi
c001bb88:	e8 4f 7c ff ff       	call   c00137dc <File::stat(unsigned long long*, bool*)>
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	85 f6                	test   esi,esi
c001bb92:	74 14                	je     c001bba8 <sysCallSizeFromFilename(regs*)+0x6b>
c001bb94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb98:	8b 16                	mov    edx,DWORD PTR [esi]
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	56                   	push   esi
c001bb9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bba1:	83 c4 10             	add    esp,0x10
c001bba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bba8:	85 c0                	test   eax,eax
c001bbaa:	0f 95 c0             	setne  al
c001bbad:	31 d2                	xor    edx,edx
c001bbaf:	0f b6 c0             	movzx  eax,al
c001bbb2:	f7 d8                	neg    eax
c001bbb4:	83 d2 00             	adc    edx,0x0
c001bbb7:	83 c4 20             	add    esp,0x20
c001bbba:	f7 da                	neg    edx
c001bbbc:	5b                   	pop    ebx
c001bbbd:	5e                   	pop    esi
c001bbbe:	5f                   	pop    edi
c001bbbf:	c3                   	ret    
c001bbc0:	83 ec 08             	sub    esp,0x8
c001bbc3:	53                   	push   ebx
c001bbc4:	68 df be 02 c0       	push   0xc002bedf
c001bbc9:	e8 a6 73 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001bbce:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bbd1:	83 c4 10             	add    esp,0x10
c001bbd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbe1:	31 d2                	xor    edx,edx
c001bbe3:	83 c4 20             	add    esp,0x20
c001bbe6:	31 c0                	xor    eax,eax
c001bbe8:	5b                   	pop    ebx
c001bbe9:	5e                   	pop    esi
c001bbea:	5f                   	pop    edi
c001bbeb:	c3                   	ret    
c001bbec:	83 c4 20             	add    esp,0x20
c001bbef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbf4:	5b                   	pop    ebx
c001bbf5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbfa:	5e                   	pop    esi
c001bbfb:	5f                   	pop    edi
c001bbfc:	c3                   	ret    

c001bbfd <sysCallClose(regs*)>:
c001bbfd:	53                   	push   ebx
c001bbfe:	83 ec 08             	sub    esp,0x8
c001bc01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc05:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc08:	83 f8 02             	cmp    eax,0x2
c001bc0b:	76 50                	jbe    c001bc5d <sysCallClose(regs*)+0x60>
c001bc0d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc12:	74 58                	je     c001bc6c <sysCallClose(regs*)+0x6f>
c001bc14:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc19:	74 60                	je     c001bc7b <sysCallClose(regs*)+0x7e>
c001bc1b:	77 2f                	ja     c001bc4c <sysCallClose(regs*)+0x4f>
c001bc1d:	83 ec 0c             	sub    esp,0xc
c001bc20:	50                   	push   eax
c001bc21:	e8 c7 5d ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bc26:	89 c3                	mov    ebx,eax
c001bc28:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc2b:	e8 5e 79 ff ff       	call   c001358e <File::close()>
c001bc30:	83 c4 10             	add    esp,0x10
c001bc33:	85 db                	test   ebx,ebx
c001bc35:	74 0c                	je     c001bc43 <sysCallClose(regs*)+0x46>
c001bc37:	83 ec 0c             	sub    esp,0xc
c001bc3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc3c:	53                   	push   ebx
c001bc3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc40:	83 c4 10             	add    esp,0x10
c001bc43:	31 c0                	xor    eax,eax
c001bc45:	31 d2                	xor    edx,edx
c001bc47:	83 c4 08             	add    esp,0x8
c001bc4a:	5b                   	pop    ebx
c001bc4b:	c3                   	ret    
c001bc4c:	83 ec 08             	sub    esp,0x8
c001bc4f:	50                   	push   eax
c001bc50:	68 dc bf 02 c0       	push   0xc002bfdc
c001bc55:	e8 1a 73 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc62:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc67:	83 c4 08             	add    esp,0x8
c001bc6a:	5b                   	pop    ebx
c001bc6b:	c3                   	ret    
c001bc6c:	83 ec 0c             	sub    esp,0xc
c001bc6f:	68 fa be 02 c0       	push   0xc002befa
c001bc74:	e8 fb 72 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001bc79:	eb c5                	jmp    c001bc40 <sysCallClose(regs*)+0x43>
c001bc7b:	83 ec 0c             	sub    esp,0xc
c001bc7e:	68 08 bf 02 c0       	push   0xc002bf08
c001bc83:	eb ef                	jmp    c001bc74 <sysCallClose(regs*)+0x77>

c001bc85 <sysCallOpenDir(regs*)>:
c001bc85:	56                   	push   esi
c001bc86:	53                   	push   ebx
c001bc87:	53                   	push   ebx
c001bc88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc8c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bc8f:	85 f6                	test   esi,esi
c001bc91:	74 59                	je     c001bcec <sysCallOpenDir(regs*)+0x67>
c001bc93:	83 ec 0c             	sub    esp,0xc
c001bc96:	68 14 01 00 00       	push   0x114
c001bc9b:	e8 a3 3b ff ff       	call   c000f843 <malloc>
c001bca0:	83 c4 0c             	add    esp,0xc
c001bca3:	89 c6                	mov    esi,eax
c001bca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcaa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcb0:	56                   	push   esi
c001bcb1:	e8 c2 7c ff ff       	call   c0013978 <Directory::Directory(char const*, Process*)>
c001bcb6:	83 c4 10             	add    esp,0x10
c001bcb9:	85 f6                	test   esi,esi
c001bcbb:	74 2f                	je     c001bcec <sysCallOpenDir(regs*)+0x67>
c001bcbd:	83 ec 0c             	sub    esp,0xc
c001bcc0:	56                   	push   esi
c001bcc1:	e8 16 7d ff ff       	call   c00139dc <Directory::open()>
c001bcc6:	83 c4 10             	add    esp,0x10
c001bcc9:	85 c0                	test   eax,eax
c001bccb:	75 1f                	jne    c001bcec <sysCallOpenDir(regs*)+0x67>
c001bccd:	83 ec 0c             	sub    esp,0xc
c001bcd0:	56                   	push   esi
c001bcd1:	e8 22 5a ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001bcd6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bcd9:	83 c4 10             	add    esp,0x10
c001bcdc:	89 02                	mov    DWORD PTR [edx],eax
c001bcde:	c1 f8 1f             	sar    eax,0x1f
c001bce1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bce4:	31 c0                	xor    eax,eax
c001bce6:	59                   	pop    ecx
c001bce7:	31 d2                	xor    edx,edx
c001bce9:	5b                   	pop    ebx
c001bcea:	5e                   	pop    esi
c001bceb:	c3                   	ret    
c001bcec:	59                   	pop    ecx
c001bced:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcf2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcf7:	5b                   	pop    ebx
c001bcf8:	5e                   	pop    esi
c001bcf9:	c3                   	ret    

c001bcfa <sysCallCloseDir(regs*)>:
c001bcfa:	53                   	push   ebx
c001bcfb:	83 ec 08             	sub    esp,0x8
c001bcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd05:	83 f8 02             	cmp    eax,0x2
c001bd08:	76 47                	jbe    c001bd51 <sysCallCloseDir(regs*)+0x57>
c001bd0a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd0f:	77 2f                	ja     c001bd40 <sysCallCloseDir(regs*)+0x46>
c001bd11:	83 ec 0c             	sub    esp,0xc
c001bd14:	50                   	push   eax
c001bd15:	e8 d3 5c ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bd1a:	89 c3                	mov    ebx,eax
c001bd1c:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd1f:	e8 14 7d ff ff       	call   c0013a38 <Directory::close()>
c001bd24:	83 c4 10             	add    esp,0x10
c001bd27:	85 db                	test   ebx,ebx
c001bd29:	74 0c                	je     c001bd37 <sysCallCloseDir(regs*)+0x3d>
c001bd2b:	83 ec 0c             	sub    esp,0xc
c001bd2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd30:	53                   	push   ebx
c001bd31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	31 c0                	xor    eax,eax
c001bd39:	31 d2                	xor    edx,edx
c001bd3b:	83 c4 08             	add    esp,0x8
c001bd3e:	5b                   	pop    ebx
c001bd3f:	c3                   	ret    
c001bd40:	83 ec 08             	sub    esp,0x8
c001bd43:	50                   	push   eax
c001bd44:	68 04 c0 02 c0       	push   0xc002c004
c001bd49:	e8 26 72 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001bd4e:	83 c4 10             	add    esp,0x10
c001bd51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd56:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd5b:	83 c4 08             	add    esp,0x8
c001bd5e:	5b                   	pop    ebx
c001bd5f:	c3                   	ret    

c001bd60 <sysCallMakeDir(regs*)>:
c001bd60:	56                   	push   esi
c001bd61:	53                   	push   ebx
c001bd62:	83 ec 10             	sub    esp,0x10
c001bd65:	68 14 01 00 00       	push   0x114
c001bd6a:	e8 d4 3a ff ff       	call   c000f843 <malloc>
c001bd6f:	83 c4 0c             	add    esp,0xc
c001bd72:	89 c3                	mov    ebx,eax
c001bd74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd79:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd80:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd83:	53                   	push   ebx
c001bd84:	e8 ef 7b ff ff       	call   c0013978 <Directory::Directory(char const*, Process*)>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	85 db                	test   ebx,ebx
c001bd8e:	74 32                	je     c001bdc2 <sysCallMakeDir(regs*)+0x62>
c001bd90:	83 ec 0c             	sub    esp,0xc
c001bd93:	53                   	push   ebx
c001bd94:	e8 23 7e ff ff       	call   c0013bbc <Directory::create()>
c001bd99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd9c:	89 c6                	mov    esi,eax
c001bd9e:	e8 95 7c ff ff       	call   c0013a38 <Directory::close()>
c001bda3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bda5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bda8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdab:	83 c4 10             	add    esp,0x10
c001bdae:	31 c0                	xor    eax,eax
c001bdb0:	59                   	pop    ecx
c001bdb1:	85 f6                	test   esi,esi
c001bdb3:	5b                   	pop    ebx
c001bdb4:	0f 95 c0             	setne  al
c001bdb7:	5e                   	pop    esi
c001bdb8:	31 d2                	xor    edx,edx
c001bdba:	f7 d8                	neg    eax
c001bdbc:	83 d2 00             	adc    edx,0x0
c001bdbf:	f7 da                	neg    edx
c001bdc1:	c3                   	ret    
c001bdc2:	59                   	pop    ecx
c001bdc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdc8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdcd:	5b                   	pop    ebx
c001bdce:	5e                   	pop    esi
c001bdcf:	c3                   	ret    

c001bdd0 <sysCallWait(regs*)>:
c001bdd0:	83 ec 10             	sub    esp,0x10
c001bdd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bdd7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bdda:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bddd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bde0:	e8 e8 24 00 00       	call   c001e2cd <waitTask(int, int*, int)>
c001bde5:	83 c4 1c             	add    esp,0x1c
c001bde8:	99                   	cdq    
c001bde9:	c3                   	ret    

c001bdea <sysCallNotImpl(regs*)>:
c001bdea:	83 ec 18             	sub    esp,0x18
c001bded:	68 16 bf 02 c0       	push   0xc002bf16
c001bdf2:	e8 2a e8 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001bdf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdfc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be01:	83 c4 1c             	add    esp,0x1c
c001be04:	c3                   	ret    

c001be05 <sysPanic(regs*)>:
c001be05:	83 ec 18             	sub    esp,0x18
c001be08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be0c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be0f:	e8 0d e8 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001be14:	c7 04 24 30 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf30
c001be1b:	e8 01 e8 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001be20:	b8 01 00 00 00       	mov    eax,0x1
c001be25:	31 d2                	xor    edx,edx
c001be27:	83 c4 1c             	add    esp,0x1c
c001be2a:	c3                   	ret    

c001be2b <sysCallRmdir(regs*)>:
c001be2b:	56                   	push   esi
c001be2c:	53                   	push   ebx
c001be2d:	83 ec 20             	sub    esp,0x20
c001be30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be34:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be37:	68 14 01 00 00       	push   0x114
c001be3c:	e8 02 3a ff ff       	call   c000f843 <malloc>
c001be41:	83 c4 0c             	add    esp,0xc
c001be44:	89 c3                	mov    ebx,eax
c001be46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be4e:	56                   	push   esi
c001be4f:	53                   	push   ebx
c001be50:	e8 77 76 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001be55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be58:	e8 4b 78 ff ff       	call   c00136a8 <File::unlink()>
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	85 db                	test   ebx,ebx
c001be62:	74 14                	je     c001be78 <sysCallRmdir(regs*)+0x4d>
c001be64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be68:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be6a:	83 ec 0c             	sub    esp,0xc
c001be6d:	53                   	push   ebx
c001be6e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be71:	83 c4 10             	add    esp,0x10
c001be74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be78:	85 c0                	test   eax,eax
c001be7a:	0f 95 c0             	setne  al
c001be7d:	31 d2                	xor    edx,edx
c001be7f:	0f b6 c0             	movzx  eax,al
c001be82:	f7 d8                	neg    eax
c001be84:	83 d2 00             	adc    edx,0x0
c001be87:	83 c4 14             	add    esp,0x14
c001be8a:	f7 da                	neg    edx
c001be8c:	5b                   	pop    ebx
c001be8d:	5e                   	pop    esi
c001be8e:	c3                   	ret    

c001be8f <sysCallUnlink(regs*)>:
c001be8f:	56                   	push   esi
c001be90:	53                   	push   ebx
c001be91:	83 ec 20             	sub    esp,0x20
c001be94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be98:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be9b:	68 14 01 00 00       	push   0x114
c001bea0:	e8 9e 39 ff ff       	call   c000f843 <malloc>
c001bea5:	83 c4 0c             	add    esp,0xc
c001bea8:	89 c3                	mov    ebx,eax
c001beaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beaf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beb2:	56                   	push   esi
c001beb3:	53                   	push   ebx
c001beb4:	e8 13 76 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001beb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bebc:	e8 e7 77 ff ff       	call   c00136a8 <File::unlink()>
c001bec1:	83 c4 10             	add    esp,0x10
c001bec4:	85 db                	test   ebx,ebx
c001bec6:	74 14                	je     c001bedc <sysCallUnlink(regs*)+0x4d>
c001bec8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001becc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bece:	83 ec 0c             	sub    esp,0xc
c001bed1:	53                   	push   ebx
c001bed2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bed5:	83 c4 10             	add    esp,0x10
c001bed8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bedc:	85 c0                	test   eax,eax
c001bede:	0f 95 c0             	setne  al
c001bee1:	31 d2                	xor    edx,edx
c001bee3:	0f b6 c0             	movzx  eax,al
c001bee6:	f7 d8                	neg    eax
c001bee8:	83 d2 00             	adc    edx,0x0
c001beeb:	83 c4 14             	add    esp,0x14
c001beee:	f7 da                	neg    edx
c001bef0:	5b                   	pop    ebx
c001bef1:	5e                   	pop    esi
c001bef2:	c3                   	ret    

c001bef3 <sysCallGetArgv(regs*)>:
c001bef3:	83 ec 0c             	sub    esp,0xc
c001bef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001befa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001befd:	85 c0                	test   eax,eax
c001beff:	78 2b                	js     c001bf2c <sysCallGetArgv(regs*)+0x39>
c001bf01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf07:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf0a:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf10:	7d 1a                	jge    c001bf2c <sysCallGetArgv(regs*)+0x39>
c001bf12:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf19:	85 c0                	test   eax,eax
c001bf1b:	74 17                	je     c001bf34 <sysCallGetArgv(regs*)+0x41>
c001bf1d:	83 ec 08             	sub    esp,0x8
c001bf20:	50                   	push   eax
c001bf21:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf24:	e8 0b 49 fe ff       	call   c0000834 <strcpy>
c001bf29:	83 c4 10             	add    esp,0x10
c001bf2c:	31 c0                	xor    eax,eax
c001bf2e:	31 d2                	xor    edx,edx
c001bf30:	83 c4 0c             	add    esp,0xc
c001bf33:	c3                   	ret    
c001bf34:	b8 01 00 00 00       	mov    eax,0x1
c001bf39:	31 d2                	xor    edx,edx
c001bf3b:	83 c4 0c             	add    esp,0xc
c001bf3e:	c3                   	ret    

c001bf3f <sysCallTTYName(regs*)>:
c001bf3f:	56                   	push   esi
c001bf40:	53                   	push   ebx
c001bf41:	53                   	push   ebx
c001bf42:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf46:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf49:	85 c0                	test   eax,eax
c001bf4b:	74 5f                	je     c001bfac <sysCallTTYName(regs*)+0x6d>
c001bf4d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf50:	83 f8 02             	cmp    eax,0x2
c001bf53:	77 3e                	ja     c001bf93 <sysCallTTYName(regs*)+0x54>
c001bf55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf5d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf63:	85 db                	test   ebx,ebx
c001bf65:	74 45                	je     c001bfac <sysCallTTYName(regs*)+0x6d>
c001bf67:	83 ec 0c             	sub    esp,0xc
c001bf6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf6c:	53                   	push   ebx
c001bf6d:	ff 10                	call   DWORD PTR [eax]
c001bf6f:	83 c4 10             	add    esp,0x10
c001bf72:	84 c0                	test   al,al
c001bf74:	74 41                	je     c001bfb7 <sysCallTTYName(regs*)+0x78>
c001bf76:	83 ec 08             	sub    esp,0x8
c001bf79:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bf7f:	53                   	push   ebx
c001bf80:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bf83:	e8 ac 48 fe ff       	call   c0000834 <strcpy>
c001bf88:	83 c4 10             	add    esp,0x10
c001bf8b:	31 c0                	xor    eax,eax
c001bf8d:	59                   	pop    ecx
c001bf8e:	31 d2                	xor    edx,edx
c001bf90:	5b                   	pop    ebx
c001bf91:	5e                   	pop    esi
c001bf92:	c3                   	ret    
c001bf93:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf98:	74 bb                	je     c001bf55 <sysCallTTYName(regs*)+0x16>
c001bf9a:	83 ec 0c             	sub    esp,0xc
c001bf9d:	50                   	push   eax
c001bf9e:	e8 4a 5a ff ff       	call   c00119ed <getFromFileDescriptor(int)>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	89 c3                	mov    ebx,eax
c001bfa8:	85 db                	test   ebx,ebx
c001bfaa:	75 bb                	jne    c001bf67 <sysCallTTYName(regs*)+0x28>
c001bfac:	59                   	pop    ecx
c001bfad:	b8 01 00 00 00       	mov    eax,0x1
c001bfb2:	31 d2                	xor    edx,edx
c001bfb4:	5b                   	pop    ebx
c001bfb5:	5e                   	pop    esi
c001bfb6:	c3                   	ret    
c001bfb7:	59                   	pop    ecx
c001bfb8:	b8 02 00 00 00       	mov    eax,0x2
c001bfbd:	31 d2                	xor    edx,edx
c001bfbf:	5b                   	pop    ebx
c001bfc0:	5e                   	pop    esi
c001bfc1:	c3                   	ret    

c001bfc2 <sysCallUSleep(regs*)>:
c001bfc2:	83 ec 14             	sub    esp,0x14
c001bfc5:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bfca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bfce:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bfd5:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bfd8:	01 ca                	add    edx,ecx
c001bfda:	52                   	push   edx
c001bfdb:	50                   	push   eax
c001bfdc:	e8 85 23 00 00       	call   c001e366 <nanoSleep(unsigned long long)>
c001bfe1:	31 c0                	xor    eax,eax
c001bfe3:	31 d2                	xor    edx,edx
c001bfe5:	83 c4 1c             	add    esp,0x1c
c001bfe8:	c3                   	ret    

c001bfe9 <sysCallSpawn(regs*)>:
c001bfe9:	56                   	push   esi
c001bfea:	53                   	push   ebx
c001bfeb:	53                   	push   ebx
c001bfec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bff0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bff3:	85 f6                	test   esi,esi
c001bff5:	75 08                	jne    c001bfff <sysCallSpawn(regs*)+0x16>
c001bff7:	59                   	pop    ecx
c001bff8:	31 c0                	xor    eax,eax
c001bffa:	31 d2                	xor    edx,edx
c001bffc:	5b                   	pop    ebx
c001bffd:	5e                   	pop    esi
c001bffe:	c3                   	ret    
c001bfff:	83 ec 0c             	sub    esp,0xc
c001c002:	68 3f 07 00 00       	push   0x73f
c001c007:	e8 37 38 ff ff       	call   c000f843 <malloc>
c001c00c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c00f:	89 c6                	mov    esi,eax
c001c011:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c016:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c019:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c01c:	56                   	push   esi
c001c01d:	e8 44 1a 00 00       	call   c001da66 <Process::Process(char const*, Process*, char**)>
c001c022:	83 c4 20             	add    esp,0x20
c001c025:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c02c:	75 c9                	jne    c001bff7 <sysCallSpawn(regs*)+0xe>
c001c02e:	83 ec 0c             	sub    esp,0xc
c001c031:	56                   	push   esi
c001c032:	e8 f5 1f 00 00       	call   c001e02c <Process::createUserThread()>
c001c037:	8b 06                	mov    eax,DWORD PTR [esi]
c001c039:	83 c4 10             	add    esp,0x10
c001c03c:	99                   	cdq    
c001c03d:	59                   	pop    ecx
c001c03e:	5b                   	pop    ebx
c001c03f:	5e                   	pop    esi
c001c040:	c3                   	ret    

c001c041 <sysCallGetEnv(regs*)>:
c001c041:	55                   	push   ebp
c001c042:	57                   	push   edi
c001c043:	56                   	push   esi
c001c044:	53                   	push   ebx
c001c045:	83 ec 28             	sub    esp,0x28
c001c048:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c04c:	68 3f bf 02 c0       	push   0xc002bf3f
c001c051:	e8 1e 6f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c056:	5f                   	pop    edi
c001c057:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c05a:	5d                   	pop    ebp
c001c05b:	53                   	push   ebx
c001c05c:	68 85 c2 02 c0       	push   0xc002c285
c001c061:	e8 0e 6f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c066:	58                   	pop    eax
c001c067:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c06a:	5a                   	pop    edx
c001c06b:	57                   	push   edi
c001c06c:	68 48 bf 02 c0       	push   0xc002bf48
c001c071:	e8 fe 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c076:	59                   	pop    ecx
c001c077:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c07c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c07f:	e8 b9 e4 ff ff       	call   c001a53d <Krnl::getProcessTotalEnvCount(Process*)>
c001c084:	5a                   	pop    edx
c001c085:	89 c5                	mov    ebp,eax
c001c087:	59                   	pop    ecx
c001c088:	50                   	push   eax
c001c089:	68 52 bf 02 c0       	push   0xc002bf52
c001c08e:	e8 e1 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	39 ef                	cmp    edi,ebp
c001c098:	7c 15                	jl     c001c0af <sysCallGetEnv(regs*)+0x6e>
c001c09a:	85 db                	test   ebx,ebx
c001c09c:	75 0c                	jne    c001c0aa <sysCallGetEnv(regs*)+0x69>
c001c09e:	83 c4 1c             	add    esp,0x1c
c001c0a1:	31 c0                	xor    eax,eax
c001c0a3:	5b                   	pop    ebx
c001c0a4:	31 d2                	xor    edx,edx
c001c0a6:	5e                   	pop    esi
c001c0a7:	5f                   	pop    edi
c001c0a8:	5d                   	pop    ebp
c001c0a9:	c3                   	ret    
c001c0aa:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0ad:	eb ef                	jmp    c001c09e <sysCallGetEnv(regs*)+0x5d>
c001c0af:	83 ec 0c             	sub    esp,0xc
c001c0b2:	68 5e bf 02 c0       	push   0xc002bf5e
c001c0b7:	e8 b8 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c0bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0c0:	83 c4 0c             	add    esp,0xc
c001c0c3:	57                   	push   edi
c001c0c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c0ca:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c0cd:	50                   	push   eax
c001c0ce:	e8 8a e4 ff ff       	call   c001a55d <Krnl::getProcessEnvPair(Process*, int)>
c001c0d3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0db:	68 04 c3 02 c0       	push   0xc002c304
c001c0e0:	e8 8f 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c0e5:	83 c4 10             	add    esp,0x10
c001c0e8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c0eb:	85 f6                	test   esi,esi
c001c0ed:	75 47                	jne    c001c136 <sysCallGetEnv(regs*)+0xf5>
c001c0ef:	83 ec 0c             	sub    esp,0xc
c001c0f2:	55                   	push   ebp
c001c0f3:	e8 9c 46 fe ff       	call   c0000794 <strlen>
c001c0f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c0fb:	89 c3                	mov    ebx,eax
c001c0fd:	e8 92 46 fe ff       	call   c0000794 <strlen>
c001c102:	5a                   	pop    edx
c001c103:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c107:	59                   	pop    ecx
c001c108:	50                   	push   eax
c001c109:	68 61 bf 02 c0       	push   0xc002bf61
c001c10e:	e8 61 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c113:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c116:	e8 79 46 fe ff       	call   c0000794 <strlen>
c001c11b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c11e:	89 c3                	mov    ebx,eax
c001c120:	e8 6f 46 fe ff       	call   c0000794 <strlen>
c001c125:	83 c4 10             	add    esp,0x10
c001c128:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c12c:	83 c4 1c             	add    esp,0x1c
c001c12f:	31 d2                	xor    edx,edx
c001c131:	5b                   	pop    ebx
c001c132:	5e                   	pop    esi
c001c133:	5f                   	pop    edi
c001c134:	5d                   	pop    ebp
c001c135:	c3                   	ret    
c001c136:	83 ec 0c             	sub    esp,0xc
c001c139:	68 1e c3 02 c0       	push   0xc002c31e
c001c13e:	e8 31 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c143:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c146:	58                   	pop    eax
c001c147:	5a                   	pop    edx
c001c148:	55                   	push   ebp
c001c149:	53                   	push   ebx
c001c14a:	e8 e5 46 fe ff       	call   c0000834 <strcpy>
c001c14f:	59                   	pop    ecx
c001c150:	5e                   	pop    esi
c001c151:	68 6b bf 02 c0       	push   0xc002bf6b
c001c156:	53                   	push   ebx
c001c157:	e8 18 48 fe ff       	call   c0000974 <strcat>
c001c15c:	5d                   	pop    ebp
c001c15d:	58                   	pop    eax
c001c15e:	57                   	push   edi
c001c15f:	53                   	push   ebx
c001c160:	e8 0f 48 fe ff       	call   c0000974 <strcat>
c001c165:	c7 04 24 38 c3 02 c0 	mov    DWORD PTR [esp],0xc002c338
c001c16c:	e8 03 6e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c171:	83 c4 10             	add    esp,0x10
c001c174:	e9 25 ff ff ff       	jmp    c001c09e <sysCallGetEnv(regs*)+0x5d>

c001c179 <sysAppSettings(regs*)>:
c001c179:	53                   	push   ebx
c001c17a:	83 ec 08             	sub    esp,0x8
c001c17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c181:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c184:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c18a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c18f:	66 3d c0 09          	cmp    ax,0x9c0
c001c193:	75 2f                	jne    c001c1c4 <sysAppSettings(regs*)+0x4b>
c001c195:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c19b:	83 e0 1f             	and    eax,0x1f
c001c19e:	3c 01                	cmp    al,0x1
c001c1a0:	74 2e                	je     c001c1d0 <sysAppSettings(regs*)+0x57>
c001c1a2:	3c 07                	cmp    al,0x7
c001c1a4:	0f 84 bd 00 00 00    	je     c001c267 <sysAppSettings(regs*)+0xee>
c001c1aa:	84 c0                	test   al,al
c001c1ac:	0f 84 dc 00 00 00    	je     c001c28e <sysAppSettings(regs*)+0x115>
c001c1b2:	3c 08                	cmp    al,0x8
c001c1b4:	74 6d                	je     c001c223 <sysAppSettings(regs*)+0xaa>
c001c1b6:	0f b6 c0             	movzx  eax,al
c001c1b9:	83 c4 08             	add    esp,0x8
c001c1bc:	05 e8 03 00 00       	add    eax,0x3e8
c001c1c1:	5b                   	pop    ebx
c001c1c2:	99                   	cdq    
c001c1c3:	c3                   	ret    
c001c1c4:	b8 01 00 00 00       	mov    eax,0x1
c001c1c9:	31 d2                	xor    edx,edx
c001c1cb:	83 c4 08             	add    esp,0x8
c001c1ce:	5b                   	pop    ebx
c001c1cf:	c3                   	ret    
c001c1d0:	51                   	push   ecx
c001c1d1:	68 00 01 00 00       	push   0x100
c001c1d6:	6a 00                	push   0x0
c001c1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e0:	83 c0 0c             	add    eax,0xc
c001c1e3:	50                   	push   eax
c001c1e4:	e8 8f 45 fe ff       	call   c0000778 <memset>
c001c1e9:	83 c4 0c             	add    esp,0xc
c001c1ec:	68 ff 00 00 00       	push   0xff
c001c1f1:	53                   	push   ebx
c001c1f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1fa:	83 c0 0c             	add    eax,0xc
c001c1fd:	50                   	push   eax
c001c1fe:	e8 41 45 fe ff       	call   c0000744 <memcpy>
c001c203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c208:	5b                   	pop    ebx
c001c209:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c20c:	5a                   	pop    edx
c001c20d:	8d 50 0c             	lea    edx,[eax+0xc]
c001c210:	52                   	push   edx
c001c211:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c217:	e8 4c 49 ff ff       	call   c0010b68 <VgaText::setTitle(char*)>
c001c21c:	83 c4 10             	add    esp,0x10
c001c21f:	31 c0                	xor    eax,eax
c001c221:	eb a6                	jmp    c001c1c9 <sysAppSettings(regs*)+0x50>
c001c223:	83 ec 08             	sub    esp,0x8
c001c226:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c22c:	83 e0 0f             	and    eax,0xf
c001c22f:	50                   	push   eax
c001c230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c238:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c23e:	e8 15 49 ff ff       	call   c0010b58 <VgaText::setTitleColour(VgaColour)>
c001c243:	58                   	pop    eax
c001c244:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c24a:	5a                   	pop    edx
c001c24b:	c1 e8 04             	shr    eax,0x4
c001c24e:	83 e0 0f             	and    eax,0xf
c001c251:	50                   	push   eax
c001c252:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c257:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c25a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c260:	e8 e3 48 ff ff       	call   c0010b48 <VgaText::setTitleTextColour(VgaColour)>
c001c265:	eb b5                	jmp    c001c21c <sysAppSettings(regs*)+0xa3>
c001c267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c26c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c275:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c27b:	c0 e8 06             	shr    al,0x6
c001c27e:	83 e0 01             	and    eax,0x1
c001c281:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c287:	31 c0                	xor    eax,eax
c001c289:	e9 3b ff ff ff       	jmp    c001c1c9 <sysAppSettings(regs*)+0x50>
c001c28e:	b8 02 00 00 00       	mov    eax,0x2
c001c293:	e9 31 ff ff ff       	jmp    c001c1c9 <sysAppSettings(regs*)+0x50>

c001c298 <sysSetFatAttrib(regs*)>:
c001c298:	57                   	push   edi
c001c299:	56                   	push   esi
c001c29a:	53                   	push   ebx
c001c29b:	83 ec 1c             	sub    esp,0x1c
c001c29e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2a2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2a5:	68 14 01 00 00       	push   0x114
c001c2aa:	e8 94 35 ff ff       	call   c000f843 <malloc>
c001c2af:	83 c4 0c             	add    esp,0xc
c001c2b2:	89 c3                	mov    ebx,eax
c001c2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2bc:	57                   	push   edi
c001c2bd:	53                   	push   ebx
c001c2be:	e8 09 72 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001c2c3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c2c6:	83 c4 0c             	add    esp,0xc
c001c2c9:	0f b6 d4             	movzx  edx,ah
c001c2cc:	0f b6 c0             	movzx  eax,al
c001c2cf:	52                   	push   edx
c001c2d0:	50                   	push   eax
c001c2d1:	53                   	push   ebx
c001c2d2:	e8 6b 74 ff ff       	call   c0013742 <File::chfatattr(unsigned char, unsigned char)>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	85 db                	test   ebx,ebx
c001c2dc:	74 14                	je     c001c2f2 <sysSetFatAttrib(regs*)+0x5a>
c001c2de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c2e4:	83 ec 0c             	sub    esp,0xc
c001c2e7:	53                   	push   ebx
c001c2e8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2f2:	85 c0                	test   eax,eax
c001c2f4:	0f 95 c0             	setne  al
c001c2f7:	31 d2                	xor    edx,edx
c001c2f9:	0f b6 c0             	movzx  eax,al
c001c2fc:	f7 d8                	neg    eax
c001c2fe:	83 d2 00             	adc    edx,0x0
c001c301:	83 c4 10             	add    esp,0x10
c001c304:	f7 da                	neg    edx
c001c306:	5b                   	pop    ebx
c001c307:	5e                   	pop    esi
c001c308:	5f                   	pop    edi
c001c309:	c3                   	ret    

c001c30a <sysPipe(regs*)>:
c001c30a:	57                   	push   edi
c001c30b:	56                   	push   esi
c001c30c:	53                   	push   ebx
c001c30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c311:	83 ec 0c             	sub    esp,0xc
c001c314:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c317:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c31a:	6a 20                	push   0x20
c001c31c:	e8 22 35 ff ff       	call   c000f843 <malloc>
c001c321:	89 c3                	mov    ebx,eax
c001c323:	58                   	pop    eax
c001c324:	5a                   	pop    edx
c001c325:	68 00 50 00 00       	push   0x5000
c001c32a:	53                   	push   ebx
c001c32b:	e8 68 41 ff ff       	call   c0010498 <Pipe::Pipe(int)>
c001c330:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c333:	e8 c0 53 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c338:	89 07                	mov    DWORD PTR [edi],eax
c001c33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c33d:	e8 b6 53 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c342:	83 c4 10             	add    esp,0x10
c001c345:	89 06                	mov    DWORD PTR [esi],eax
c001c347:	31 d2                	xor    edx,edx
c001c349:	5b                   	pop    ebx
c001c34a:	31 c0                	xor    eax,eax
c001c34c:	5e                   	pop    esi
c001c34d:	5f                   	pop    edi
c001c34e:	c3                   	ret    

c001c34f <sysGetUnixTime(regs*)>:
c001c34f:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001c354:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c35a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c35e:	e9 53 7b ff ff       	jmp    c0013eb6 <Clock::timeInSecondsLocal()>

c001c363 <string_ends_with(char const*, char const*)>:
c001c363:	57                   	push   edi
c001c364:	56                   	push   esi
c001c365:	53                   	push   ebx
c001c366:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c36a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c36e:	83 ec 0c             	sub    esp,0xc
c001c371:	53                   	push   ebx
c001c372:	e8 1d 44 fe ff       	call   c0000794 <strlen>
c001c377:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c37a:	89 c6                	mov    esi,eax
c001c37c:	e8 13 44 fe ff       	call   c0000794 <strlen>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	39 c6                	cmp    esi,eax
c001c386:	7d 06                	jge    c001c38e <string_ends_with(char const*, char const*)+0x2b>
c001c388:	5b                   	pop    ebx
c001c389:	31 c0                	xor    eax,eax
c001c38b:	5e                   	pop    esi
c001c38c:	5f                   	pop    edi
c001c38d:	c3                   	ret    
c001c38e:	83 ec 08             	sub    esp,0x8
c001c391:	29 c6                	sub    esi,eax
c001c393:	57                   	push   edi
c001c394:	01 f3                	add    ebx,esi
c001c396:	53                   	push   ebx
c001c397:	e8 24 45 fe ff       	call   c00008c0 <strcmp>
c001c39c:	83 c4 10             	add    esp,0x10
c001c39f:	85 c0                	test   eax,eax
c001c3a1:	5b                   	pop    ebx
c001c3a2:	0f 94 c0             	sete   al
c001c3a5:	5e                   	pop    esi
c001c3a6:	0f b6 c0             	movzx  eax,al
c001c3a9:	5f                   	pop    edi
c001c3aa:	c3                   	ret    

c001c3ab <sysCallOpen(regs*)>:
c001c3ab:	56                   	push   esi
c001c3ac:	53                   	push   ebx
c001c3ad:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3b3:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c3ba:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c3bd:	85 c9                	test   ecx,ecx
c001c3bf:	0f 84 b3 00 00 00    	je     c001c478 <sysCallOpen(regs*)+0xcd>
c001c3c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c3c8:	85 c0                	test   eax,eax
c001c3ca:	0f 84 a8 00 00 00    	je     c001c478 <sysCallOpen(regs*)+0xcd>
c001c3d0:	52                   	push   edx
c001c3d1:	68 6d bf 02 c0       	push   0xc002bf6d
c001c3d6:	50                   	push   eax
c001c3d7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c3db:	56                   	push   esi
c001c3dc:	e8 41 6f ff ff       	call   c0013322 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c3e1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c3e4:	e8 ab 43 fe ff       	call   c0000794 <strlen>
c001c3e9:	83 c4 10             	add    esp,0x10
c001c3ec:	48                   	dec    eax
c001c3ed:	74 1d                	je     c001c40c <sysCallOpen(regs*)+0x61>
c001c3ef:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c3f2:	eb 0f                	jmp    c001c403 <sysCallOpen(regs*)+0x58>
c001c3f4:	80 fa 3a             	cmp    dl,0x3a
c001c3f7:	74 0f                	je     c001c408 <sysCallOpen(regs*)+0x5d>
c001c3f9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c3fd:	48                   	dec    eax
c001c3fe:	74 0c                	je     c001c40c <sysCallOpen(regs*)+0x61>
c001c400:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c403:	80 fa 2e             	cmp    dl,0x2e
c001c406:	75 ec                	jne    c001c3f4 <sysCallOpen(regs*)+0x49>
c001c408:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c40c:	83 ec 08             	sub    esp,0x8
c001c40f:	68 71 bf 02 c0       	push   0xc002bf71
c001c414:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c417:	e8 47 ff ff ff       	call   c001c363 <string_ends_with(char const*, char const*)>
c001c41c:	83 c4 10             	add    esp,0x10
c001c41f:	85 c0                	test   eax,eax
c001c421:	75 17                	jne    c001c43a <sysCallOpen(regs*)+0x8f>
c001c423:	83 ec 08             	sub    esp,0x8
c001c426:	68 92 bf 02 c0       	push   0xc002bf92
c001c42b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c42e:	e8 30 ff ff ff       	call   c001c363 <string_ends_with(char const*, char const*)>
c001c433:	83 c4 10             	add    esp,0x10
c001c436:	85 c0                	test   eax,eax
c001c438:	74 51                	je     c001c48b <sysCallOpen(regs*)+0xe0>
c001c43a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c43d:	83 ec 08             	sub    esp,0x8
c001c440:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c446:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c44d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c450:	ff 30                	push   DWORD PTR [eax]
c001c452:	68 76 bf 02 c0       	push   0xc002bf76
c001c457:	e8 18 6b ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c45c:	c7 04 24 85 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf85
c001c463:	e8 0c 6b ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c468:	83 c4 10             	add    esp,0x10
c001c46b:	81 c4 04 01 00 00    	add    esp,0x104
c001c471:	31 c0                	xor    eax,eax
c001c473:	31 d2                	xor    edx,edx
c001c475:	5b                   	pop    ebx
c001c476:	5e                   	pop    esi
c001c477:	c3                   	ret    
c001c478:	81 c4 04 01 00 00    	add    esp,0x104
c001c47e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c483:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c488:	5b                   	pop    ebx
c001c489:	5e                   	pop    esi
c001c48a:	c3                   	ret    
c001c48b:	83 ec 08             	sub    esp,0x8
c001c48e:	68 72 bf 02 c0       	push   0xc002bf72
c001c493:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c496:	e8 25 44 fe ff       	call   c00008c0 <strcmp>
c001c49b:	83 c4 10             	add    esp,0x10
c001c49e:	85 c0                	test   eax,eax
c001c4a0:	74 98                	je     c001c43a <sysCallOpen(regs*)+0x8f>
c001c4a2:	83 ec 08             	sub    esp,0x8
c001c4a5:	68 71 bf 02 c0       	push   0xc002bf71
c001c4aa:	56                   	push   esi
c001c4ab:	e8 b3 fe ff ff       	call   c001c363 <string_ends_with(char const*, char const*)>
c001c4b0:	83 c4 10             	add    esp,0x10
c001c4b3:	85 c0                	test   eax,eax
c001c4b5:	75 83                	jne    c001c43a <sysCallOpen(regs*)+0x8f>
c001c4b7:	83 ec 08             	sub    esp,0x8
c001c4ba:	68 97 bf 02 c0       	push   0xc002bf97
c001c4bf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c2:	e8 9c fe ff ff       	call   c001c363 <string_ends_with(char const*, char const*)>
c001c4c7:	83 c4 10             	add    esp,0x10
c001c4ca:	85 c0                	test   eax,eax
c001c4cc:	0f 85 d9 00 00 00    	jne    c001c5ab <sysCallOpen(regs*)+0x200>
c001c4d2:	83 ec 08             	sub    esp,0x8
c001c4d5:	68 9c bf 02 c0       	push   0xc002bf9c
c001c4da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4dd:	e8 81 fe ff ff       	call   c001c363 <string_ends_with(char const*, char const*)>
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	85 c0                	test   eax,eax
c001c4e7:	0f 85 be 00 00 00    	jne    c001c5ab <sysCallOpen(regs*)+0x200>
c001c4ed:	83 ec 08             	sub    esp,0x8
c001c4f0:	68 98 bf 02 c0       	push   0xc002bf98
c001c4f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4f8:	e8 c3 43 fe ff       	call   c00008c0 <strcmp>
c001c4fd:	83 c4 10             	add    esp,0x10
c001c500:	85 c0                	test   eax,eax
c001c502:	0f 84 a3 00 00 00    	je     c001c5ab <sysCallOpen(regs*)+0x200>
c001c508:	83 ec 08             	sub    esp,0x8
c001c50b:	68 97 bf 02 c0       	push   0xc002bf97
c001c510:	56                   	push   esi
c001c511:	e8 4d fe ff ff       	call   c001c363 <string_ends_with(char const*, char const*)>
c001c516:	83 c4 10             	add    esp,0x10
c001c519:	85 c0                	test   eax,eax
c001c51b:	0f 85 8a 00 00 00    	jne    c001c5ab <sysCallOpen(regs*)+0x200>
c001c521:	83 ec 0c             	sub    esp,0xc
c001c524:	68 14 01 00 00       	push   0x114
c001c529:	e8 15 33 ff ff       	call   c000f843 <malloc>
c001c52e:	83 c4 0c             	add    esp,0xc
c001c531:	89 c6                	mov    esi,eax
c001c533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c538:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c53b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c53e:	56                   	push   esi
c001c53f:	e8 88 6f ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001c544:	83 c4 10             	add    esp,0x10
c001c547:	85 f6                	test   esi,esi
c001c549:	0f 84 29 ff ff ff    	je     c001c478 <sysCallOpen(regs*)+0xcd>
c001c54f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c552:	0f b6 c2             	movzx  eax,dl
c001c555:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c558:	89 d0                	mov    eax,edx
c001c55a:	83 e0 01             	and    eax,0x1
c001c55d:	f6 c2 02             	test   dl,0x2
c001c560:	74 03                	je     c001c565 <sysCallOpen(regs*)+0x1ba>
c001c562:	83 c8 02             	or     eax,0x2
c001c565:	f6 c2 04             	test   dl,0x4
c001c568:	74 03                	je     c001c56d <sysCallOpen(regs*)+0x1c2>
c001c56a:	83 c8 04             	or     eax,0x4
c001c56d:	f6 c2 08             	test   dl,0x8
c001c570:	74 03                	je     c001c575 <sysCallOpen(regs*)+0x1ca>
c001c572:	83 c8 0a             	or     eax,0xa
c001c575:	83 e2 10             	and    edx,0x10
c001c578:	74 03                	je     c001c57d <sysCallOpen(regs*)+0x1d2>
c001c57a:	83 c8 12             	or     eax,0x12
c001c57d:	83 ec 08             	sub    esp,0x8
c001c580:	50                   	push   eax
c001c581:	56                   	push   esi
c001c582:	e8 a9 6f ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001c587:	83 c4 10             	add    esp,0x10
c001c58a:	85 c0                	test   eax,eax
c001c58c:	0f 85 e6 fe ff ff    	jne    c001c478 <sysCallOpen(regs*)+0xcd>
c001c592:	83 ec 0c             	sub    esp,0xc
c001c595:	56                   	push   esi
c001c596:	e8 5d 51 ff ff       	call   c00116f8 <UnixFile::getFileDescriptor()>
c001c59b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c59e:	89 02                	mov    DWORD PTR [edx],eax
c001c5a0:	c1 f8 1f             	sar    eax,0x1f
c001c5a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5a6:	e9 bd fe ff ff       	jmp    c001c468 <sysCallOpen(regs*)+0xbd>
c001c5ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5ae:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5bb:	e9 ab fe ff ff       	jmp    c001c46b <sysCallOpen(regs*)+0xc0>

c001c5c0 <Sys::loadSyscalls()>:
c001c5c0:	c7 05 20 10 03 c0 cd b6 01 c0 	mov    DWORD PTR ds:0xc0031020,0xc001b6cd
c001c5ca:	c7 05 24 10 03 c0 b6 b2 01 c0 	mov    DWORD PTR ds:0xc0031024,0xc001b2b6
c001c5d4:	c7 05 28 10 03 c0 20 b4 01 c0 	mov    DWORD PTR ds:0xc0031028,0xc001b420
c001c5de:	c7 05 2c 10 03 c0 03 b6 01 c0 	mov    DWORD PTR ds:0xc003102c,0xc001b603
c001c5e8:	c7 05 30 10 03 c0 b8 b3 01 c0 	mov    DWORD PTR ds:0xc0031030,0xc001b3b8
c001c5f2:	c7 05 34 10 03 c0 ed b2 01 c0 	mov    DWORD PTR ds:0xc0031034,0xc001b2ed
c001c5fc:	c7 05 38 10 03 c0 ce b2 01 c0 	mov    DWORD PTR ds:0xc0031038,0xc001b2ce
c001c606:	c7 05 3c 10 03 c0 75 b4 01 c0 	mov    DWORD PTR ds:0xc003103c,0xc001b475
c001c610:	c7 05 44 10 03 c0 fd bb 01 c0 	mov    DWORD PTR ds:0xc0031044,0xc001bbfd
c001c61a:	c7 05 40 10 03 c0 ab c3 01 c0 	mov    DWORD PTR ds:0xc0031040,0xc001c3ab
c001c624:	c7 05 48 10 03 c0 85 bc 01 c0 	mov    DWORD PTR ds:0xc0031048,0xc001bc85
c001c62e:	c7 05 4c 10 03 c0 ec b8 01 c0 	mov    DWORD PTR ds:0xc003104c,0xc001b8ec
c001c638:	c7 05 50 10 03 c0 08 b7 01 c0 	mov    DWORD PTR ds:0xc0031050,0xc001b708
c001c642:	c7 05 54 10 03 c0 0d b7 01 c0 	mov    DWORD PTR ds:0xc0031054,0xc001b70d
c001c64c:	c7 05 58 10 03 c0 60 bd 01 c0 	mov    DWORD PTR ds:0xc0031058,0xc001bd60
c001c656:	c7 05 5c 10 03 c0 fa bc 01 c0 	mov    DWORD PTR ds:0xc003105c,0xc001bcfa
c001c660:	c7 05 60 10 03 c0 d4 b9 01 c0 	mov    DWORD PTR ds:0xc0031060,0xc001b9d4
c001c66a:	c7 05 64 10 03 c0 3d ba 01 c0 	mov    DWORD PTR ds:0xc0031064,0xc001ba3d
c001c674:	c7 05 68 10 03 c0 ba ba 01 c0 	mov    DWORD PTR ds:0xc0031068,0xc001baba
c001c67e:	c7 05 6c 10 03 c0 12 b7 01 c0 	mov    DWORD PTR ds:0xc003106c,0xc001b712
c001c688:	c7 05 70 10 03 c0 d0 bd 01 c0 	mov    DWORD PTR ds:0xc0031070,0xc001bdd0
c001c692:	c7 05 74 10 03 c0 ea bd 01 c0 	mov    DWORD PTR ds:0xc0031074,0xc001bdea
c001c69c:	c7 05 78 10 03 c0 ea bd 01 c0 	mov    DWORD PTR ds:0xc0031078,0xc001bdea
c001c6a6:	c7 05 7c 10 03 c0 2b be 01 c0 	mov    DWORD PTR ds:0xc003107c,0xc001be2b
c001c6b0:	c7 05 80 10 03 c0 8f be 01 c0 	mov    DWORD PTR ds:0xc0031080,0xc001be8f
c001c6ba:	c7 05 84 10 03 c0 be b8 01 c0 	mov    DWORD PTR ds:0xc0031084,0xc001b8be
c001c6c4:	c7 05 88 10 03 c0 f3 be 01 c0 	mov    DWORD PTR ds:0xc0031088,0xc001bef3
c001c6ce:	c7 05 8c 10 03 c0 7b b8 01 c0 	mov    DWORD PTR ds:0xc003108c,0xc001b87b
c001c6d8:	c7 05 90 10 03 c0 3f bf 01 c0 	mov    DWORD PTR ds:0xc0031090,0xc001bf3f
c001c6e2:	c7 05 94 10 03 c0 7a b9 01 c0 	mov    DWORD PTR ds:0xc0031094,0xc001b97a
c001c6ec:	c7 05 98 10 03 c0 c2 bf 01 c0 	mov    DWORD PTR ds:0xc0031098,0xc001bfc2
c001c6f6:	c7 05 9c 10 03 c0 3d bb 01 c0 	mov    DWORD PTR ds:0xc003109c,0xc001bb3d
c001c700:	c7 05 a0 10 03 c0 e9 bf 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001bfe9
c001c70a:	c7 05 a4 10 03 c0 41 c0 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001c041
c001c714:	c7 05 a8 10 03 c0 79 c1 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001c179
c001c71e:	c7 05 ac 10 03 c0 1c b7 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b71c
c001c728:	c7 05 b0 10 03 c0 86 b7 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001b786
c001c732:	c7 05 b4 10 03 c0 cc b7 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001b7cc
c001c73c:	c7 05 b8 10 03 c0 98 c2 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001c298
c001c746:	c7 05 bc 10 03 c0 05 be 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001be05
c001c750:	c7 05 c0 10 03 c0 1d b8 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001b81d
c001c75a:	c7 05 c4 10 03 c0 0a c3 01 c0 	mov    DWORD PTR ds:0xc00310c4,0xc001c30a
c001c764:	c7 05 c8 10 03 c0 4f c3 01 c0 	mov    DWORD PTR ds:0xc00310c8,0xc001c34f
c001c76e:	c7 05 cc 10 03 c0 10 b3 01 c0 	mov    DWORD PTR ds:0xc00310cc,0xc001b310
c001c778:	c7 05 d0 10 03 c0 91 b4 01 c0 	mov    DWORD PTR ds:0xc00310d0,0xc001b491
c001c782:	c7 05 d4 10 03 c0 b9 b5 01 c0 	mov    DWORD PTR ds:0xc00310d4,0xc001b5b9
c001c78c:	c7 05 d8 10 03 c0 80 b2 01 c0 	mov    DWORD PTR ds:0xc00310d8,0xc001b280
c001c796:	c7 05 dc 10 03 c0 6b b6 01 c0 	mov    DWORD PTR ds:0xc00310dc,0xc001b66b
c001c7a0:	c7 05 e0 10 03 c0 f9 b2 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001b2f9
c001c7aa:	c3                   	ret    

c001c7ab <Sys::systemCall(regs*, void*)>:
c001c7ab:	53                   	push   ebx
c001c7ac:	83 ec 08             	sub    esp,0x8
c001c7af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c7b6:	83 f8 7f             	cmp    eax,0x7f
c001c7b9:	77 16                	ja     c001c7d1 <Sys::systemCall(regs*, void*)+0x26>
c001c7bb:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c001c7c2:	85 d2                	test   edx,edx
c001c7c4:	74 0b                	je     c001c7d1 <Sys::systemCall(regs*, void*)+0x26>
c001c7c6:	83 ec 0c             	sub    esp,0xc
c001c7c9:	53                   	push   ebx
c001c7ca:	ff d2                	call   edx
c001c7cc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c7cf:	eb 0d                	jmp    c001c7de <Sys::systemCall(regs*, void*)+0x33>
c001c7d1:	52                   	push   edx
c001c7d2:	52                   	push   edx
c001c7d3:	50                   	push   eax
c001c7d4:	68 a1 bf 02 c0       	push   0xc002bfa1
c001c7d9:	e8 96 67 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c7e6:	31 d2                	xor    edx,edx
c001c7e8:	83 c4 08             	add    esp,0x8
c001c7eb:	5b                   	pop    ebx
c001c7ec:	c3                   	ret    

c001c7ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c7ed:	55                   	push   ebp
c001c7ee:	57                   	push   edi
c001c7ef:	56                   	push   esi
c001c7f0:	53                   	push   ebx
c001c7f1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c7f7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7fe:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c805:	85 c0                	test   eax,eax
c001c807:	0f 95 c1             	setne  cl
c001c80a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c812:	0f 94 c2             	sete   dl
c001c815:	84 d1                	test   cl,dl
c001c817:	74 23                	je     c001c83c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c819:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c81f:	74 1b                	je     c001c83c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c821:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c827:	89 da                	mov    edx,ebx
c001c829:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c82f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c835:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c83c:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c843:	05 ff 0f 00 00       	add    eax,0xfff
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c84f:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c855:	c1 e8 0c             	shr    eax,0xc
c001c858:	89 ef                	mov    edi,ebp
c001c85a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c85e:	c1 ef 0c             	shr    edi,0xc
c001c861:	6a 01                	push   0x1
c001c863:	e8 db 52 ff ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c001c868:	89 c6                	mov    esi,eax
c001c86a:	58                   	pop    eax
c001c86b:	5a                   	pop    edx
c001c86c:	57                   	push   edi
c001c86d:	68 27 c0 02 c0       	push   0xc002c027
c001c872:	e8 fd 66 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c877:	59                   	pop    ecx
c001c878:	58                   	pop    eax
c001c879:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c87d:	68 39 c0 02 c0       	push   0xc002c039
c001c882:	e8 ed 66 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c890:	0f 86 24 01 00 00    	jbe    c001c9ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c896:	c1 e7 0c             	shl    edi,0xc
c001c899:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c89c:	89 df                	mov    edi,ebx
c001c89e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8a2:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8a9:	01 dd                	add    ebp,ebx
c001c8ab:	29 fd                	sub    ebp,edi
c001c8ad:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8b1:	0f 84 01 01 00 00    	je     c001c9b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8b7:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c8bd:	76 05                	jbe    c001c8c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c8bf:	bd 00 10 00 00       	mov    ebp,0x1000
c001c8c4:	83 ec 0c             	sub    esp,0xc
c001c8c7:	31 d2                	xor    edx,edx
c001c8c9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c8d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c8d6:	50                   	push   eax
c001c8d7:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c8db:	50                   	push   eax
c001c8dc:	52                   	push   edx
c001c8dd:	55                   	push   ebp
c001c8de:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c8e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8e8:	83 c4 20             	add    esp,0x20
c001c8eb:	85 c0                	test   eax,eax
c001c8ed:	74 0a                	je     c001c8f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c8ef:	53                   	push   ebx
c001c8f0:	53                   	push   ebx
c001c8f1:	50                   	push   eax
c001c8f2:	68 4b c0 02 c0       	push   0xc002c04b
c001c8f7:	eb 0f                	jmp    c001c908 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c8f9:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c8fd:	74 20                	je     c001c91f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c8ff:	51                   	push   ecx
c001c900:	51                   	push   ecx
c001c901:	6a 00                	push   0x0
c001c903:	68 76 c0 02 c0       	push   0xc002c076
c001c908:	e8 67 66 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001c90d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c910:	e8 b4 56 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c915:	83 c4 10             	add    esp,0x10
c001c918:	31 c0                	xor    eax,eax
c001c91a:	e9 55 01 00 00       	jmp    c001ca74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c91f:	e8 f2 14 00 00       	call   c001de16 <lockScheduler()>
c001c924:	e8 bc 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c929:	6a 07                	push   0x7
c001c92b:	89 c5                	mov    ebp,eax
c001c92d:	56                   	push   esi
c001c92e:	50                   	push   eax
c001c92f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c934:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c937:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c93d:	e8 ee 59 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c942:	83 c4 0c             	add    esp,0xc
c001c945:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c94c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c952:	6a 00                	push   0x0
c001c954:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c959:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c95c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c962:	e8 33 58 ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c001c967:	58                   	pop    eax
c001c968:	5a                   	pop    edx
c001c969:	68 07 0c 00 00       	push   0xc07
c001c96e:	57                   	push   edi
c001c96f:	81 c7 00 10 00 00    	add    edi,0x1000
c001c975:	55                   	push   ebp
c001c976:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c97d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c983:	6a 00                	push   0x0
c001c985:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c98a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c98d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c993:	e8 52 5d ff ff       	call   c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c998:	83 c4 1c             	add    esp,0x1c
c001c99b:	68 00 10 00 00       	push   0x1000
c001c9a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9a4:	50                   	push   eax
c001c9a5:	56                   	push   esi
c001c9a6:	e8 99 3d fe ff       	call   c0000744 <memcpy>
c001c9ab:	e8 68 14 00 00       	call   c001de18 <unlockScheduler()>
c001c9b0:	83 c4 10             	add    esp,0x10
c001c9b3:	e9 ea fe ff ff       	jmp    c001c8a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c9b8:	89 fb                	mov    ebx,edi
c001c9ba:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c9c2:	0f 86 9e 00 00 00    	jbe    c001ca66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c9c8:	e8 49 14 00 00       	call   c001de16 <lockScheduler()>
c001c9cd:	51                   	push   ecx
c001c9ce:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9d5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9db:	6a 00                	push   0x0
c001c9dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9eb:	e8 aa 57 ff ff       	call   c001219a <VAS::mapOtherVASIn(bool, VAS*)>
c001c9f0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c9f4:	c1 e7 0c             	shl    edi,0xc
c001c9f7:	01 df                	add    edi,ebx
c001c9f9:	83 c4 10             	add    esp,0x10
c001c9fc:	39 fb                	cmp    ebx,edi
c001c9fe:	74 61                	je     c001ca61 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca00:	e8 e0 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001ca05:	6a 07                	push   0x7
c001ca07:	89 c5                	mov    ebp,eax
c001ca09:	56                   	push   esi
c001ca0a:	50                   	push   eax
c001ca0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca13:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca19:	e8 12 59 ff ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca1e:	58                   	pop    eax
c001ca1f:	5a                   	pop    edx
c001ca20:	68 07 0c 00 00       	push   0xc07
c001ca25:	53                   	push   ebx
c001ca26:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca2c:	55                   	push   ebp
c001ca2d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca34:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca3a:	6a 00                	push   0x0
c001ca3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca44:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca4a:	e8 9b 5c ff ff       	call   c00126ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca4f:	83 c4 1c             	add    esp,0x1c
c001ca52:	68 00 10 00 00       	push   0x1000
c001ca57:	6a 00                	push   0x0
c001ca59:	56                   	push   esi
c001ca5a:	e8 19 3d fe ff       	call   c0000778 <memset>
c001ca5f:	eb 98                	jmp    c001c9f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001ca61:	e8 b2 13 00 00       	call   c001de18 <unlockScheduler()>
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	56                   	push   esi
c001ca6a:	e8 5a 55 ff ff       	call   c0011fc9 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	b0 01                	mov    al,0x1
c001ca74:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca7a:	5b                   	pop    ebx
c001ca7b:	5e                   	pop    esi
c001ca7c:	5f                   	pop    edi
c001ca7d:	5d                   	pop    ebp
c001ca7e:	c3                   	ret    

c001ca7f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca7f:	55                   	push   ebp
c001ca80:	57                   	push   edi
c001ca81:	56                   	push   esi
c001ca82:	53                   	push   ebx
c001ca83:	83 ec 48             	sub    esp,0x48
c001ca86:	68 14 01 00 00       	push   0x114
c001ca8b:	e8 b3 2d ff ff       	call   c000f843 <malloc>
c001ca90:	83 c4 0c             	add    esp,0xc
c001ca93:	89 c6                	mov    esi,eax
c001ca95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca99:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca9d:	50                   	push   eax
c001ca9e:	e8 29 6a ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001caa3:	58                   	pop    eax
c001caa4:	5a                   	pop    edx
c001caa5:	6a 01                	push   0x1
c001caa7:	56                   	push   esi
c001caa8:	e8 83 6a ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001caad:	83 c4 10             	add    esp,0x10
c001cab0:	85 c0                	test   eax,eax
c001cab2:	0f 85 47 01 00 00    	jne    c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cab8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cac0:	83 ec 0c             	sub    esp,0xc
c001cac3:	6a 34                	push   0x34
c001cac5:	e8 79 2d ff ff       	call   c000f843 <malloc>
c001caca:	89 c3                	mov    ebx,eax
c001cacc:	58                   	pop    eax
c001cacd:	8b 06                	mov    eax,DWORD PTR [esi]
c001cacf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cad3:	57                   	push   edi
c001cad4:	53                   	push   ebx
c001cad5:	6a 00                	push   0x0
c001cad7:	6a 34                	push   0x34
c001cad9:	56                   	push   esi
c001cada:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cadd:	83 c4 20             	add    esp,0x20
c001cae0:	85 c0                	test   eax,eax
c001cae2:	0f 85 17 01 00 00    	jne    c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cae8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001caee:	0f 85 0b 01 00 00    	jne    c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001caf7:	85 c0                	test   eax,eax
c001caf9:	0f 84 00 01 00 00    	je     c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caff:	31 d2                	xor    edx,edx
c001cb01:	55                   	push   ebp
c001cb02:	52                   	push   edx
c001cb03:	50                   	push   eax
c001cb04:	56                   	push   esi
c001cb05:	e8 e4 6a ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001cb0a:	83 c4 10             	add    esp,0x10
c001cb0d:	85 c0                	test   eax,eax
c001cb0f:	0f 85 ea 00 00 00    	jne    c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb15:	83 ec 0c             	sub    esp,0xc
c001cb18:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb1b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb1f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb23:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb27:	0f af c2             	imul   eax,edx
c001cb2a:	50                   	push   eax
c001cb2b:	e8 13 2d ff ff       	call   c000f843 <malloc>
c001cb30:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb36:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb3d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb41:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb45:	0f af c2             	imul   eax,edx
c001cb48:	99                   	cdq    
c001cb49:	52                   	push   edx
c001cb4a:	50                   	push   eax
c001cb4b:	56                   	push   esi
c001cb4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb4f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb52:	83 c4 20             	add    esp,0x20
c001cb55:	85 c0                	test   eax,eax
c001cb57:	0f 84 a2 00 00 00    	je     c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb5d:	31 d2                	xor    edx,edx
c001cb5f:	51                   	push   ecx
c001cb60:	52                   	push   edx
c001cb61:	50                   	push   eax
c001cb62:	56                   	push   esi
c001cb63:	e8 86 6a ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	85 c0                	test   eax,eax
c001cb6d:	0f 85 8c 00 00 00    	jne    c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb73:	83 ec 0c             	sub    esp,0xc
c001cb76:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb7a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb7e:	31 ed                	xor    ebp,ebp
c001cb80:	0f af c2             	imul   eax,edx
c001cb83:	50                   	push   eax
c001cb84:	e8 ba 2c ff ff       	call   c000f843 <malloc>
c001cb89:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb8f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb96:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb9a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb9e:	0f af c2             	imul   eax,edx
c001cba1:	99                   	cdq    
c001cba2:	52                   	push   edx
c001cba3:	50                   	push   eax
c001cba4:	56                   	push   esi
c001cba5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cba8:	83 c4 20             	add    esp,0x20
c001cbab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbb3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cbb7:	0f 86 80 00 00 00    	jbe    c001cc3d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cbbd:	0f b7 fd             	movzx  edi,bp
c001cbc0:	c1 e7 05             	shl    edi,0x5
c001cbc3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cbc7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cbca:	75 6b                	jne    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbcc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cbcf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbd3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cbd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbda:	52                   	push   edx
c001cbdb:	31 d2                	xor    edx,edx
c001cbdd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cbe0:	52                   	push   edx
c001cbe1:	50                   	push   eax
c001cbe2:	56                   	push   esi
c001cbe3:	e8 06 6a ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	85 c0                	test   eax,eax
c001cbed:	74 17                	je     c001cc06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cbef:	83 ec 0c             	sub    esp,0xc
c001cbf2:	68 a2 c0 02 c0       	push   0xc002c0a2
c001cbf7:	e8 78 63 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001cbfc:	83 c4 10             	add    esp,0x10
c001cbff:	31 c0                	xor    eax,eax
c001cc01:	e9 87 00 00 00       	jmp    c001cc8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc0c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc0f:	50                   	push   eax
c001cc10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc18:	56                   	push   esi
c001cc19:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc1d:	e8 cb fb ff ff       	call   c001c7ed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc26:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc2a:	83 c4 20             	add    esp,0x20
c001cc2d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc31:	73 04                	jae    c001cc37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc37:	45                   	inc    ebp
c001cc38:	e9 76 ff ff ff       	jmp    c001cbb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc3d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc49:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc4f:	83 ec 0c             	sub    esp,0xc
c001cc52:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cc58:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cc5d:	05 00 10 00 00       	add    eax,0x1000
c001cc62:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc69:	e8 e5 2b ff ff       	call   c000f853 <free>
c001cc6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc71:	e8 dd 2b ff ff       	call   c000f853 <free>
c001cc76:	58                   	pop    eax
c001cc77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc7b:	e8 d3 2b ff ff       	call   c000f853 <free>
c001cc80:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc83:	e8 06 69 ff ff       	call   c001358e <File::close()>
c001cc88:	83 c4 10             	add    esp,0x10
c001cc8b:	b0 01                	mov    al,0x1
c001cc8d:	83 c4 3c             	add    esp,0x3c
c001cc90:	5b                   	pop    ebx
c001cc91:	5e                   	pop    esi
c001cc92:	5f                   	pop    edi
c001cc93:	5d                   	pop    ebp
c001cc94:	c3                   	ret    

c001cc95 <Thr::runtimeReferenceHelper()>:
c001cc95:	83 ec 18             	sub    esp,0x18
c001cc98:	68 aa c0 02 c0       	push   0xc002c0aa
c001cc9d:	e8 d2 62 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001cca2:	fa                   	cli    
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	eb fe                	jmp    c001cca6 <Thr::runtimeReferenceHelper()+0x11>

c001cca8 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cca8:	57                   	push   edi
c001cca9:	56                   	push   esi
c001ccaa:	53                   	push   ebx
c001ccab:	31 db                	xor    ebx,ebx
c001ccad:	39 1d c0 19 03 c0    	cmp    DWORD PTR ds:0xc00319c0,ebx
c001ccb3:	7e 3c                	jle    c001ccf1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001ccb5:	8b 34 9d 40 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce6c0]
c001ccbc:	31 ff                	xor    edi,edi
c001ccbe:	39 3c 9d 40 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce7c0],edi
c001ccc5:	7e 27                	jle    c001ccee <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001ccc7:	50                   	push   eax
c001ccc8:	50                   	push   eax
c001ccc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cccd:	8b 06                	mov    eax,DWORD PTR [esi]
c001cccf:	03 04 9d c0 18 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce740]
c001ccd6:	50                   	push   eax
c001ccd7:	e8 e4 3b fe ff       	call   c00008c0 <strcmp>
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	85 c0                	test   eax,eax
c001cce1:	75 05                	jne    c001cce8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cce3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cce6:	eb 0b                	jmp    c001ccf3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cce8:	83 c6 10             	add    esi,0x10
c001cceb:	47                   	inc    edi
c001ccec:	eb d0                	jmp    c001ccbe <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001ccee:	43                   	inc    ebx
c001ccef:	eb bc                	jmp    c001ccad <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001ccf1:	31 c0                	xor    eax,eax
c001ccf3:	5b                   	pop    ebx
c001ccf4:	5e                   	pop    esi
c001ccf5:	5f                   	pop    edi
c001ccf6:	c3                   	ret    

c001ccf7 <Thr::loadKernelSymbolTable(char const*)>:
c001ccf7:	55                   	push   ebp
c001ccf8:	57                   	push   edi
c001ccf9:	56                   	push   esi
c001ccfa:	53                   	push   ebx
c001ccfb:	83 ec 68             	sub    esp,0x68
c001ccfe:	8b 35 14 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031a14
c001cd04:	68 14 01 00 00       	push   0x114
c001cd09:	e8 35 2b ff ff       	call   c000f843 <malloc>
c001cd0e:	83 c4 0c             	add    esp,0xc
c001cd11:	89 c3                	mov    ebx,eax
c001cd13:	56                   	push   esi
c001cd14:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd18:	50                   	push   eax
c001cd19:	e8 ae 67 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001cd1e:	5e                   	pop    esi
c001cd1f:	5f                   	pop    edi
c001cd20:	6a 01                	push   0x1
c001cd22:	53                   	push   ebx
c001cd23:	e8 08 68 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001cd28:	83 c4 10             	add    esp,0x10
c001cd2b:	85 c0                	test   eax,eax
c001cd2d:	74 0a                	je     c001cd39 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd2f:	83 ec 0c             	sub    esp,0xc
c001cd32:	68 cc c0 02 c0       	push   0xc002c0cc
c001cd37:	eb 34                	jmp    c001cd6d <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd39:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd41:	83 ec 0c             	sub    esp,0xc
c001cd44:	6a 34                	push   0x34
c001cd46:	e8 f8 2a ff ff       	call   c000f843 <malloc>
c001cd4b:	59                   	pop    ecx
c001cd4c:	89 c7                	mov    edi,eax
c001cd4e:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd52:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd54:	56                   	push   esi
c001cd55:	57                   	push   edi
c001cd56:	6a 00                	push   0x0
c001cd58:	6a 34                	push   0x34
c001cd5a:	53                   	push   ebx
c001cd5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd5e:	83 c4 20             	add    esp,0x20
c001cd61:	85 c0                	test   eax,eax
c001cd63:	74 17                	je     c001cd7c <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cd65:	83 ec 0c             	sub    esp,0xc
c001cd68:	68 e3 c0 02 c0       	push   0xc002c0e3
c001cd6d:	e8 af d8 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001cd72:	83 c4 10             	add    esp,0x10
c001cd75:	31 c0                	xor    eax,eax
c001cd77:	e9 31 02 00 00       	jmp    c001cfad <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd7c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd82:	75 e1                	jne    c001cd65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd84:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd87:	85 c0                	test   eax,eax
c001cd89:	74 da                	je     c001cd65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd8b:	52                   	push   edx
c001cd8c:	31 d2                	xor    edx,edx
c001cd8e:	52                   	push   edx
c001cd8f:	50                   	push   eax
c001cd90:	53                   	push   ebx
c001cd91:	e8 58 68 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	85 c0                	test   eax,eax
c001cd9b:	75 c8                	jne    c001cd65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd9d:	83 ec 0c             	sub    esp,0xc
c001cda0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cda4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cda8:	31 ed                	xor    ebp,ebp
c001cdaa:	0f af c2             	imul   eax,edx
c001cdad:	50                   	push   eax
c001cdae:	e8 90 2a ff ff       	call   c000f843 <malloc>
c001cdb3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cdb9:	89 34 24             	mov    DWORD PTR [esp],esi
c001cdbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cdc0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdc4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdc8:	0f af c2             	imul   eax,edx
c001cdcb:	99                   	cdq    
c001cdcc:	52                   	push   edx
c001cdcd:	50                   	push   eax
c001cdce:	53                   	push   ebx
c001cdcf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdd2:	83 c4 20             	add    esp,0x20
c001cdd5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cddd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cde5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cded:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdf5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cdf9:	0f 86 aa 00 00 00    	jbe    c001cea9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cdff:	0f b7 f5             	movzx  esi,bp
c001ce02:	6b f6 28             	imul   esi,esi,0x28
c001ce05:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce09:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce10:	50                   	push   eax
c001ce11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce15:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce19:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce1b:	6b c0 28             	imul   eax,eax,0x28
c001ce1e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce22:	89 d0                	mov    eax,edx
c001ce24:	31 d2                	xor    edx,edx
c001ce26:	52                   	push   edx
c001ce27:	50                   	push   eax
c001ce28:	53                   	push   ebx
c001ce29:	e8 c0 67 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001ce2e:	83 c4 0c             	add    esp,0xc
c001ce31:	6a 20                	push   0x20
c001ce33:	6a 00                	push   0x0
c001ce35:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce39:	52                   	push   edx
c001ce3a:	e8 39 39 fe ff       	call   c0000778 <memset>
c001ce3f:	58                   	pop    eax
c001ce40:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce42:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce46:	51                   	push   ecx
c001ce47:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce4b:	52                   	push   edx
c001ce4c:	6a 00                	push   0x0
c001ce4e:	6a 1f                	push   0x1f
c001ce50:	53                   	push   ebx
c001ce51:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce54:	83 c4 18             	add    esp,0x18
c001ce57:	68 fa c0 02 c0       	push   0xc002c0fa
c001ce5c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce60:	52                   	push   edx
c001ce61:	e8 5a 3a fe ff       	call   c00008c0 <strcmp>
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	85 c0                	test   eax,eax
c001ce6b:	75 0f                	jne    c001ce7c <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce6d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce7c:	50                   	push   eax
c001ce7d:	50                   	push   eax
c001ce7e:	68 02 c1 02 c0       	push   0xc002c102
c001ce83:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce87:	50                   	push   eax
c001ce88:	e8 33 3a fe ff       	call   c00008c0 <strcmp>
c001ce8d:	83 c4 10             	add    esp,0x10
c001ce90:	85 c0                	test   eax,eax
c001ce92:	75 0f                	jne    c001cea3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce94:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cea3:	45                   	inc    ebp
c001cea4:	e9 4c ff ff ff       	jmp    c001cdf5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cea9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ceae:	75 10                	jne    c001cec0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ceb0:	83 ec 0c             	sub    esp,0xc
c001ceb3:	68 0a c1 02 c0       	push   0xc002c10a
c001ceb8:	e8 64 d7 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001cebd:	83 c4 10             	add    esp,0x10
c001cec0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cec5:	75 10                	jne    c001ced7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	68 0a c1 02 c0       	push   0xc002c10a
c001cecf:	e8 4d d7 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001ced4:	83 c4 10             	add    esp,0x10
c001ced7:	31 d2                	xor    edx,edx
c001ced9:	50                   	push   eax
c001ceda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cede:	52                   	push   edx
c001cedf:	50                   	push   eax
c001cee0:	53                   	push   ebx
c001cee1:	e8 08 67 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001cee6:	5a                   	pop    edx
c001cee7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ceeb:	e8 53 29 ff ff       	call   c000f843 <malloc>
c001cef0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cef4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cef8:	31 c9                	xor    ecx,ecx
c001cefa:	5e                   	pop    esi
c001cefb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cefd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf01:	55                   	push   ebp
c001cf02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf06:	51                   	push   ecx
c001cf07:	52                   	push   edx
c001cf08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf0c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf10:	53                   	push   ebx
c001cf11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf14:	83 c4 14             	add    esp,0x14
c001cf17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf1b:	e8 23 29 ff ff       	call   c000f843 <malloc>
c001cf20:	89 c6                	mov    esi,eax
c001cf22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf27:	56                   	push   esi
c001cf28:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf30:	51                   	push   ecx
c001cf31:	52                   	push   edx
c001cf32:	53                   	push   ebx
c001cf33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf3a:	8b 15 c0 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319c0
c001cf40:	83 c4 1c             	add    esp,0x1c
c001cf43:	c1 e8 04             	shr    eax,0x4
c001cf46:	89 04 95 40 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce7c0],eax
c001cf4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf51:	31 d2                	xor    edx,edx
c001cf53:	52                   	push   edx
c001cf54:	50                   	push   eax
c001cf55:	53                   	push   ebx
c001cf56:	e8 93 66 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001cf5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cf5d:	31 d2                	xor    edx,edx
c001cf5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf62:	56                   	push   esi
c001cf63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf67:	52                   	push   edx
c001cf68:	50                   	push   eax
c001cf69:	53                   	push   ebx
c001cf6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf6d:	83 c4 14             	add    esp,0x14
c001cf70:	53                   	push   ebx
c001cf71:	e8 18 66 ff ff       	call   c001358e <File::close()>
c001cf76:	5d                   	pop    ebp
c001cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf7b:	e8 d3 28 ff ff       	call   c000f853 <free>
c001cf80:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf83:	e8 cb 28 ff ff       	call   c000f853 <free>
c001cf88:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c001cf8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf91:	8d 50 01             	lea    edx,[eax+0x1]
c001cf94:	89 0c 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],ecx
c001cf9b:	89 34 85 c0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce740],esi
c001cfa2:	89 15 c0 19 03 c0    	mov    DWORD PTR ds:0xc00319c0,edx
c001cfa8:	83 c4 10             	add    esp,0x10
c001cfab:	b0 01                	mov    al,0x1
c001cfad:	83 c4 5c             	add    esp,0x5c
c001cfb0:	5b                   	pop    ebx
c001cfb1:	5e                   	pop    esi
c001cfb2:	5f                   	pop    edi
c001cfb3:	5d                   	pop    ebp
c001cfb4:	c3                   	ret    

c001cfb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cfb5:	55                   	push   ebp
c001cfb6:	57                   	push   edi
c001cfb7:	56                   	push   esi
c001cfb8:	53                   	push   ebx
c001cfb9:	81 ec 68 03 00 00    	sub    esp,0x368
c001cfbf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cfc6:	8b 1d 14 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a14
c001cfcc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cfd0:	68 14 01 00 00       	push   0x114
c001cfd5:	e8 69 28 ff ff       	call   c000f843 <malloc>
c001cfda:	83 c4 0c             	add    esp,0xc
c001cfdd:	89 c5                	mov    ebp,eax
c001cfdf:	53                   	push   ebx
c001cfe0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cfe7:	50                   	push   eax
c001cfe8:	e8 df 64 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001cfed:	5e                   	pop    esi
c001cfee:	5f                   	pop    edi
c001cfef:	6a 01                	push   0x1
c001cff1:	55                   	push   ebp
c001cff2:	e8 39 65 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	85 c0                	test   eax,eax
c001cffc:	0f 85 8d 06 00 00    	jne    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d002:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	6a 34                	push   0x34
c001d00f:	e8 2f 28 ff ff       	call   c000f843 <malloc>
c001d014:	5b                   	pop    ebx
c001d015:	89 c7                	mov    edi,eax
c001d017:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d01b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d01e:	53                   	push   ebx
c001d01f:	57                   	push   edi
c001d020:	6a 00                	push   0x0
c001d022:	6a 34                	push   0x34
c001d024:	55                   	push   ebp
c001d025:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d028:	83 c4 20             	add    esp,0x20
c001d02b:	85 c0                	test   eax,eax
c001d02d:	0f 85 5c 06 00 00    	jne    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d033:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d039:	0f 85 50 06 00 00    	jne    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d03f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d042:	85 c0                	test   eax,eax
c001d044:	0f 84 45 06 00 00    	je     c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d04a:	31 d2                	xor    edx,edx
c001d04c:	51                   	push   ecx
c001d04d:	52                   	push   edx
c001d04e:	50                   	push   eax
c001d04f:	55                   	push   ebp
c001d050:	e8 99 65 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	85 c0                	test   eax,eax
c001d05a:	0f 85 2f 06 00 00    	jne    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d060:	83 ec 0c             	sub    esp,0xc
c001d063:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d066:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d06a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d06e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d072:	0f af c2             	imul   eax,edx
c001d075:	50                   	push   eax
c001d076:	e8 c8 27 ff ff       	call   c000f843 <malloc>
c001d07b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d07e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d082:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d085:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d089:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d08d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d091:	0f af c2             	imul   eax,edx
c001d094:	99                   	cdq    
c001d095:	52                   	push   edx
c001d096:	50                   	push   eax
c001d097:	55                   	push   ebp
c001d098:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d09b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d09e:	83 c4 20             	add    esp,0x20
c001d0a1:	85 c0                	test   eax,eax
c001d0a3:	0f 84 e6 05 00 00    	je     c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0a9:	52                   	push   edx
c001d0aa:	31 d2                	xor    edx,edx
c001d0ac:	52                   	push   edx
c001d0ad:	50                   	push   eax
c001d0ae:	55                   	push   ebp
c001d0af:	e8 3a 65 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d0b4:	83 c4 10             	add    esp,0x10
c001d0b7:	85 c0                	test   eax,eax
c001d0b9:	0f 85 d0 05 00 00    	jne    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0c6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0ca:	31 f6                	xor    esi,esi
c001d0cc:	0f af c2             	imul   eax,edx
c001d0cf:	50                   	push   eax
c001d0d0:	e8 6e 27 ff ff       	call   c000f843 <malloc>
c001d0d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d0e3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d0e7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d0eb:	0f af c2             	imul   eax,edx
c001d0ee:	99                   	cdq    
c001d0ef:	52                   	push   edx
c001d0f0:	50                   	push   eax
c001d0f1:	55                   	push   ebp
c001d0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0f5:	83 c4 20             	add    esp,0x20
c001d0f8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d0fc:	0f 86 8a 00 00 00    	jbe    c001d18c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d102:	0f b7 de             	movzx  ebx,si
c001d105:	c1 e3 05             	shl    ebx,0x5
c001d108:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d10c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d10f:	75 75                	jne    c001d186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d111:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d114:	31 d2                	xor    edx,edx
c001d116:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d11a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d11d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d121:	50                   	push   eax
c001d122:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d125:	52                   	push   edx
c001d126:	50                   	push   eax
c001d127:	55                   	push   ebp
c001d128:	e8 c1 64 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	85 c0                	test   eax,eax
c001d132:	0f 85 57 05 00 00    	jne    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d138:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d13f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d142:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d146:	31 d2                	xor    edx,edx
c001d148:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d14c:	83 ec 0c             	sub    esp,0xc
c001d14f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d153:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d15a:	50                   	push   eax
c001d15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d15f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d163:	52                   	push   edx
c001d164:	50                   	push   eax
c001d165:	55                   	push   ebp
c001d166:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d169:	83 c4 1c             	add    esp,0x1c
c001d16c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d16f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d172:	50                   	push   eax
c001d173:	6a 00                	push   0x0
c001d175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d179:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d17d:	50                   	push   eax
c001d17e:	e8 f5 35 fe ff       	call   c0000778 <memset>
c001d183:	83 c4 10             	add    esp,0x10
c001d186:	46                   	inc    esi
c001d187:	e9 6c ff ff ff       	jmp    c001d0f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d18c:	53                   	push   ebx
c001d18d:	31 db                	xor    ebx,ebx
c001d18f:	68 00 01 00 00       	push   0x100
c001d194:	6a 00                	push   0x0
c001d196:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d19a:	50                   	push   eax
c001d19b:	e8 d8 35 fe ff       	call   c0000778 <memset>
c001d1a0:	83 c4 0c             	add    esp,0xc
c001d1a3:	68 00 01 00 00       	push   0x100
c001d1a8:	6a 00                	push   0x0
c001d1aa:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1b1:	50                   	push   eax
c001d1b2:	e8 c1 35 fe ff       	call   c0000778 <memset>
c001d1b7:	83 c4 10             	add    esp,0x10
c001d1ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d1c2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d1ca:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d1d2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d1e2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d1e6:	0f 86 30 01 00 00    	jbe    c001d31c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d1ec:	0f b7 f3             	movzx  esi,bx
c001d1ef:	6b f6 28             	imul   esi,esi,0x28
c001d1f2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d1f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d1f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1fd:	52                   	push   edx
c001d1fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d202:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d206:	8b 06                	mov    eax,DWORD PTR [esi]
c001d208:	6b d2 28             	imul   edx,edx,0x28
c001d20b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d20f:	31 d2                	xor    edx,edx
c001d211:	52                   	push   edx
c001d212:	50                   	push   eax
c001d213:	55                   	push   ebp
c001d214:	e8 d5 63 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d219:	83 c4 0c             	add    esp,0xc
c001d21c:	6a 20                	push   0x20
c001d21e:	6a 00                	push   0x0
c001d220:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d227:	51                   	push   ecx
c001d228:	e8 4b 35 fe ff       	call   c0000778 <memset>
c001d22d:	59                   	pop    ecx
c001d22e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d231:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d235:	52                   	push   edx
c001d236:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d23d:	51                   	push   ecx
c001d23e:	6a 00                	push   0x0
c001d240:	6a 1f                	push   0x1f
c001d242:	55                   	push   ebp
c001d243:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d246:	83 c4 1c             	add    esp,0x1c
c001d249:	6a 09                	push   0x9
c001d24b:	68 24 c1 02 c0       	push   0xc002c124
c001d250:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d257:	51                   	push   ecx
c001d258:	e8 e3 33 fe ff       	call   c0000640 <memcmp>
c001d25d:	83 c4 10             	add    esp,0x10
c001d260:	85 c0                	test   eax,eax
c001d262:	75 21                	jne    c001d285 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d268:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d26c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d270:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d274:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d277:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d27e:	89 d0                	mov    eax,edx
c001d280:	40                   	inc    eax
c001d281:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d285:	50                   	push   eax
c001d286:	6a 09                	push   0x9
c001d288:	68 2e c1 02 c0       	push   0xc002c12e
c001d28d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d294:	50                   	push   eax
c001d295:	e8 a6 33 fe ff       	call   c0000640 <memcmp>
c001d29a:	83 c4 10             	add    esp,0x10
c001d29d:	85 c0                	test   eax,eax
c001d29f:	75 21                	jne    c001d2c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2a9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2b4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2bb:	89 d0                	mov    eax,edx
c001d2bd:	40                   	inc    eax
c001d2be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2c2:	50                   	push   eax
c001d2c3:	50                   	push   eax
c001d2c4:	68 fa c0 02 c0       	push   0xc002c0fa
c001d2c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2d0:	50                   	push   eax
c001d2d1:	e8 ea 35 fe ff       	call   c00008c0 <strcmp>
c001d2d6:	83 c4 10             	add    esp,0x10
c001d2d9:	85 c0                	test   eax,eax
c001d2db:	75 0f                	jne    c001d2ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d2dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d2ec:	50                   	push   eax
c001d2ed:	50                   	push   eax
c001d2ee:	68 02 c1 02 c0       	push   0xc002c102
c001d2f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2fa:	50                   	push   eax
c001d2fb:	e8 c0 35 fe ff       	call   c00008c0 <strcmp>
c001d300:	83 c4 10             	add    esp,0x10
c001d303:	85 c0                	test   eax,eax
c001d305:	75 0f                	jne    c001d316 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d307:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d30a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d30e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d312:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d316:	43                   	inc    ebx
c001d317:	e9 c6 fe ff ff       	jmp    c001d1e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d31c:	31 d2                	xor    edx,edx
c001d31e:	50                   	push   eax
c001d31f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d323:	52                   	push   edx
c001d324:	50                   	push   eax
c001d325:	55                   	push   ebp
c001d326:	e8 c3 62 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d32b:	58                   	pop    eax
c001d32c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d330:	e8 0e 25 ff ff       	call   c000f843 <malloc>
c001d335:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d338:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d33c:	31 d2                	xor    edx,edx
c001d33e:	58                   	pop    eax
c001d33f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d343:	53                   	push   ebx
c001d344:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d348:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d34c:	52                   	push   edx
c001d34d:	50                   	push   eax
c001d34e:	55                   	push   ebp
c001d34f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d352:	83 c4 14             	add    esp,0x14
c001d355:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d359:	e8 e5 24 ff ff       	call   c000f843 <malloc>
c001d35e:	31 d2                	xor    edx,edx
c001d360:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d364:	83 c4 0c             	add    esp,0xc
c001d367:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d36b:	52                   	push   edx
c001d36c:	50                   	push   eax
c001d36d:	55                   	push   ebp
c001d36e:	e8 7b 62 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d373:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d376:	31 d2                	xor    edx,edx
c001d378:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d37b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d37f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d383:	52                   	push   edx
c001d384:	50                   	push   eax
c001d385:	55                   	push   ebp
c001d386:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d389:	83 c4 20             	add    esp,0x20
c001d38c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d394:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d398:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d39c:	0f 84 f1 02 00 00    	je     c001d693 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3a2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3a9:	31 d2                	xor    edx,edx
c001d3ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3af:	c1 e8 03             	shr    eax,0x3
c001d3b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d3b6:	51                   	push   ecx
c001d3b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3bb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d3bf:	52                   	push   edx
c001d3c0:	50                   	push   eax
c001d3c1:	55                   	push   ebp
c001d3c2:	e8 27 62 ff ff       	call   c00135ee <File::seek(unsigned long long)>
c001d3c7:	5b                   	pop    ebx
c001d3c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3cc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d3d3:	e8 6b 24 ff ff       	call   c000f843 <malloc>
c001d3d8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3df:	31 d2                	xor    edx,edx
c001d3e1:	5e                   	pop    esi
c001d3e2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d3e6:	50                   	push   eax
c001d3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3ef:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d3f6:	52                   	push   edx
c001d3f7:	50                   	push   eax
c001d3f8:	55                   	push   ebp
c001d3f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3fc:	83 c4 20             	add    esp,0x20
c001d3ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d407:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d40b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d40f:	0f 8d 62 02 00 00    	jge    c001d677 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d415:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d41d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d422:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d425:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d42d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d431:	89 d8                	mov    eax,ebx
c001d433:	c1 e8 08             	shr    eax,0x8
c001d436:	89 c6                	mov    esi,eax
c001d438:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d43c:	c1 e6 04             	shl    esi,0x4
c001d43f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d443:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d446:	85 d2                	test   edx,edx
c001d448:	0f 85 bf 00 00 00    	jne    c001d50d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d44e:	83 ec 0c             	sub    esp,0xc
c001d451:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d455:	03 06                	add    eax,DWORD PTR [esi]
c001d457:	50                   	push   eax
c001d458:	e8 4b f8 ff ff       	call   c001cca8 <Thr::getAddressOfKernelSymbol(char const*)>
c001d45d:	83 c4 10             	add    esp,0x10
c001d460:	89 c2                	mov    edx,eax
c001d462:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d467:	85 c0                	test   eax,eax
c001d469:	0f 85 9e 00 00 00    	jne    c001d50d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d46f:	83 ec 0c             	sub    esp,0xc
c001d472:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d476:	03 06                	add    eax,DWORD PTR [esi]
c001d478:	50                   	push   eax
c001d479:	e8 77 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	89 c2                	mov    edx,eax
c001d483:	85 c0                	test   eax,eax
c001d485:	0f 85 82 00 00 00    	jne    c001d50d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d48b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d48f:	50                   	push   eax
c001d490:	50                   	push   eax
c001d491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d495:	03 06                	add    eax,DWORD PTR [esi]
c001d497:	50                   	push   eax
c001d498:	68 38 c1 02 c0       	push   0xc002c138
c001d49d:	e8 d2 5a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001d4a2:	58                   	pop    eax
c001d4a3:	5a                   	pop    edx
c001d4a4:	68 52 c1 02 c0       	push   0xc002c152
c001d4a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4b0:	50                   	push   eax
c001d4b1:	e8 7e 33 fe ff       	call   c0000834 <strcpy>
c001d4b6:	59                   	pop    ecx
c001d4b7:	58                   	pop    eax
c001d4b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bc:	03 06                	add    eax,DWORD PTR [esi]
c001d4be:	50                   	push   eax
c001d4bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4c6:	50                   	push   eax
c001d4c7:	e8 a8 34 fe ff       	call   c0000974 <strcat>
c001d4cc:	58                   	pop    eax
c001d4cd:	5a                   	pop    edx
c001d4ce:	68 e8 c1 02 c0       	push   0xc002c1e8
c001d4d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4da:	50                   	push   eax
c001d4db:	e8 94 34 fe ff       	call   c0000974 <strcat>
c001d4e0:	83 c4 10             	add    esp,0x10
c001d4e3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4e8:	0f 84 43 01 00 00    	je     c001d631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d4ee:	83 ec 0c             	sub    esp,0xc
c001d4f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4f8:	50                   	push   eax
c001d4f9:	e8 23 d1 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d4fe:	83 c4 10             	add    esp,0x10
c001d501:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d505:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d509:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d50d:	80 fb 01             	cmp    bl,0x1
c001d510:	75 7d                	jne    c001d58f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d512:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d519:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d51d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d521:	01 ce                	add    esi,ecx
c001d523:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d529:	0f 94 c0             	sete   al
c001d52c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d532:	0f 94 c3             	sete   bl
c001d535:	09 c3                	or     ebx,eax
c001d537:	8b 06                	mov    eax,DWORD PTR [esi]
c001d539:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d53e:	74 36                	je     c001d576 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d540:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d543:	84 db                	test   bl,bl
c001d545:	75 0a                	jne    c001d551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d547:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d54b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d54f:	76 37                	jbe    c001d588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d551:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d555:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d55a:	0f 84 d1 00 00 00    	je     c001d631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d560:	83 ec 0c             	sub    esp,0xc
c001d563:	68 69 c1 02 c0       	push   0xc002c169
c001d568:	e8 b4 d0 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d56d:	83 c4 10             	add    esp,0x10
c001d570:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d574:	eb 12                	jmp    c001d588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d576:	01 c1                	add    ecx,eax
c001d578:	84 db                	test   bl,bl
c001d57a:	75 0c                	jne    c001d588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d57c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d580:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d584:	77 02                	ja     c001d588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d586:	01 d1                	add    ecx,edx
c001d588:	89 0e                	mov    DWORD PTR [esi],ecx
c001d58a:	e9 df 00 00 00       	jmp    c001d66e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d58f:	80 fb 02             	cmp    bl,0x2
c001d592:	75 71                	jne    c001d605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d594:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d59b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d59f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5a3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5a9:	74 15                	je     c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5ab:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5b1:	74 0d                	je     c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5b7:	83 e8 04             	sub    eax,0x4
c001d5ba:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5be:	76 1f                	jbe    c001d5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d5c0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d5c4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5c9:	74 66                	je     c001d631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5cb:	83 ec 0c             	sub    esp,0xc
c001d5ce:	68 85 c1 02 c0       	push   0xc002c185
c001d5d3:	e8 49 d0 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d5d8:	83 c4 10             	add    esp,0x10
c001d5db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d5df:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5e1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5e6:	74 13                	je     c001d5fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d5e8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d5ec:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5f3:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5f7:	01 c8                	add    eax,ecx
c001d5f9:	eb 04                	jmp    c001d5ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d5fb:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5ff:	01 c2                	add    edx,eax
c001d601:	89 16                	mov    DWORD PTR [esi],edx
c001d603:	eb 69                	jmp    c001d66e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d605:	0f b6 db             	movzx  ebx,bl
c001d608:	50                   	push   eax
c001d609:	50                   	push   eax
c001d60a:	53                   	push   ebx
c001d60b:	68 a1 c1 02 c0       	push   0xc002c1a1
c001d610:	e8 5f 59 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001d615:	83 c4 10             	add    esp,0x10
c001d618:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d61d:	74 12                	je     c001d631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d61f:	83 ec 0c             	sub    esp,0xc
c001d622:	68 ac c1 02 c0       	push   0xc002c1ac
c001d627:	e8 f5 cf ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d62c:	83 c4 10             	add    esp,0x10
c001d62f:	eb 3d                	jmp    c001d66e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d631:	83 ec 0c             	sub    esp,0xc
c001d634:	55                   	push   ebp
c001d635:	e8 54 5f ff ff       	call   c001358e <File::close()>
c001d63a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d63d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d643:	59                   	pop    ecx
c001d644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d648:	e8 06 22 ff ff       	call   c000f853 <free>
c001d64d:	5b                   	pop    ebx
c001d64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d652:	e8 fc 21 ff ff       	call   c000f853 <free>
c001d657:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d65a:	e8 f4 21 ff ff       	call   c000f853 <free>
c001d65f:	5e                   	pop    esi
c001d660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d664:	e8 ea 21 ff ff       	call   c000f853 <free>
c001d669:	83 c4 10             	add    esp,0x10
c001d66c:	eb 21                	jmp    c001d68f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d66e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d672:	e9 90 fd ff ff       	jmp    c001d407 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d67e:	e8 d0 21 ff ff       	call   c000f853 <free>
c001d683:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d687:	83 c4 10             	add    esp,0x10
c001d68a:	e9 05 fd ff ff       	jmp    c001d394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d68f:	31 c0                	xor    eax,eax
c001d691:	eb 33                	jmp    c001d6c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d693:	83 ec 0c             	sub    esp,0xc
c001d696:	55                   	push   ebp
c001d697:	e8 f2 5e ff ff       	call   c001358e <File::close()>
c001d69c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d69f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6a5:	58                   	pop    eax
c001d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6aa:	e8 a4 21 ff ff       	call   c000f853 <free>
c001d6af:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6b2:	e8 9c 21 ff ff       	call   c000f853 <free>
c001d6b7:	5a                   	pop    edx
c001d6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6bc:	e8 92 21 ff ff       	call   c000f853 <free>
c001d6c1:	83 c4 10             	add    esp,0x10
c001d6c4:	b0 01                	mov    al,0x1
c001d6c6:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d6cc:	5b                   	pop    ebx
c001d6cd:	5e                   	pop    esi
c001d6ce:	5f                   	pop    edi
c001d6cf:	5d                   	pop    ebp
c001d6d0:	c3                   	ret    

c001d6d1 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d6d1:	56                   	push   esi
c001d6d2:	31 d2                	xor    edx,edx
c001d6d4:	53                   	push   ebx
c001d6d5:	8b 1d 20 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031220
c001d6db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6df:	39 d3                	cmp    ebx,edx
c001d6e1:	7e 1b                	jle    c001d6fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d6e3:	8b 04 95 40 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcebc0]
c001d6ea:	39 c8                	cmp    eax,ecx
c001d6ec:	77 0d                	ja     c001d6fb <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d6ee:	8b 34 95 40 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcedc0]
c001d6f5:	01 c6                	add    esi,eax
c001d6f7:	39 ce                	cmp    esi,ecx
c001d6f9:	77 05                	ja     c001d700 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6fb:	42                   	inc    edx
c001d6fc:	eb e1                	jmp    c001d6df <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6fe:	31 c0                	xor    eax,eax
c001d700:	5b                   	pop    ebx
c001d701:	5e                   	pop    esi
c001d702:	c3                   	ret    

c001d703 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d703:	53                   	push   ebx
c001d704:	31 c0                	xor    eax,eax
c001d706:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d70a:	8b 1d 20 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031220
c001d710:	39 c3                	cmp    ebx,eax
c001d712:	7e 22                	jle    c001d736 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d714:	8b 14 85 40 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcebc0]
c001d71b:	39 ca                	cmp    edx,ecx
c001d71d:	77 14                	ja     c001d733 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d71f:	03 14 85 40 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcedc0]
c001d726:	39 ca                	cmp    edx,ecx
c001d728:	76 09                	jbe    c001d733 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d72a:	8b 04 85 40 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9c0]
c001d731:	eb 05                	jmp    c001d738 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d733:	40                   	inc    eax
c001d734:	eb da                	jmp    c001d710 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d736:	31 c0                	xor    eax,eax
c001d738:	5b                   	pop    ebx
c001d739:	c3                   	ret    

c001d73a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d73a:	53                   	push   ebx
c001d73b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d73f:	53                   	push   ebx
c001d740:	e8 8c ff ff ff       	call   c001d6d1 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d745:	5a                   	pop    edx
c001d746:	31 d2                	xor    edx,edx
c001d748:	85 c0                	test   eax,eax
c001d74a:	74 04                	je     c001d750 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d74c:	89 da                	mov    edx,ebx
c001d74e:	29 c2                	sub    edx,eax
c001d750:	89 d0                	mov    eax,edx
c001d752:	5b                   	pop    ebx
c001d753:	c3                   	ret    

c001d754 <Thr::loadDLL(char const*, bool)>:
c001d754:	55                   	push   ebp
c001d755:	57                   	push   edi
c001d756:	56                   	push   esi
c001d757:	53                   	push   ebx
c001d758:	81 ec 34 01 00 00    	sub    esp,0x134
c001d75e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d765:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d76c:	56                   	push   esi
c001d76d:	68 c4 c1 02 c0       	push   0xc002c1c4
c001d772:	e8 fd 57 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001d777:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d77e:	e8 c0 20 ff ff       	call   c000f843 <malloc>
c001d783:	83 c4 0c             	add    esp,0xc
c001d786:	89 c3                	mov    ebx,eax
c001d788:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c001d78e:	56                   	push   esi
c001d78f:	50                   	push   eax
c001d790:	e8 37 5d ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001d795:	83 c4 10             	add    esp,0x10
c001d798:	85 db                	test   ebx,ebx
c001d79a:	75 3c                	jne    c001d7d8 <Thr::loadDLL(char const*, bool)+0x84>
c001d79c:	89 e8                	mov    eax,ebp
c001d79e:	84 c0                	test   al,al
c001d7a0:	0f 84 f0 01 00 00    	je     c001d996 <Thr::loadDLL(char const*, bool)+0x242>
c001d7a6:	50                   	push   eax
c001d7a7:	50                   	push   eax
c001d7a8:	68 d5 c1 02 c0       	push   0xc002c1d5
c001d7ad:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7b1:	57                   	push   edi
c001d7b2:	e8 7d 30 fe ff       	call   c0000834 <strcpy>
c001d7b7:	58                   	pop    eax
c001d7b8:	5a                   	pop    edx
c001d7b9:	56                   	push   esi
c001d7ba:	57                   	push   edi
c001d7bb:	e8 b4 31 fe ff       	call   c0000974 <strcat>
c001d7c0:	59                   	pop    ecx
c001d7c1:	58                   	pop    eax
c001d7c2:	68 e8 c1 02 c0       	push   0xc002c1e8
c001d7c7:	57                   	push   edi
c001d7c8:	e8 a7 31 fe ff       	call   c0000974 <strcat>
c001d7cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7d0:	e8 4c ce ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d7d5:	83 c4 10             	add    esp,0x10
c001d7d8:	50                   	push   eax
c001d7d9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d7dd:	50                   	push   eax
c001d7de:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d7e2:	50                   	push   eax
c001d7e3:	53                   	push   ebx
c001d7e4:	e8 f3 5f ff ff       	call   c00137dc <File::stat(unsigned long long*, bool*)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	85 db                	test   ebx,ebx
c001d7ee:	74 0c                	je     c001d7fc <Thr::loadDLL(char const*, bool)+0xa8>
c001d7f0:	83 ec 0c             	sub    esp,0xc
c001d7f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7f5:	53                   	push   ebx
c001d7f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7f9:	83 c4 10             	add    esp,0x10
c001d7fc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d801:	75 0a                	jne    c001d80d <Thr::loadDLL(char const*, bool)+0xb9>
c001d803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d807:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d80b:	75 3c                	jne    c001d849 <Thr::loadDLL(char const*, bool)+0xf5>
c001d80d:	89 e8                	mov    eax,ebp
c001d80f:	84 c0                	test   al,al
c001d811:	0f 84 67 01 00 00    	je     c001d97e <Thr::loadDLL(char const*, bool)+0x22a>
c001d817:	50                   	push   eax
c001d818:	50                   	push   eax
c001d819:	68 d5 c1 02 c0       	push   0xc002c1d5
c001d81e:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d822:	53                   	push   ebx
c001d823:	e8 0c 30 fe ff       	call   c0000834 <strcpy>
c001d828:	58                   	pop    eax
c001d829:	5a                   	pop    edx
c001d82a:	56                   	push   esi
c001d82b:	53                   	push   ebx
c001d82c:	e8 43 31 fe ff       	call   c0000974 <strcat>
c001d831:	59                   	pop    ecx
c001d832:	5f                   	pop    edi
c001d833:	68 e8 c1 02 c0       	push   0xc002c1e8
c001d838:	53                   	push   ebx
c001d839:	e8 36 31 fe ff       	call   c0000974 <strcat>
c001d83e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d841:	e8 db cd ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	e8 90 45 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d84e:	51                   	push   ecx
c001d84f:	68 03 08 00 00       	push   0x803
c001d854:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d858:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d85c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d862:	83 d3 00             	adc    ebx,0x0
c001d865:	89 ca                	mov    edx,ecx
c001d867:	89 d1                	mov    ecx,edx
c001d869:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d86d:	51                   	push   ecx
c001d86e:	50                   	push   eax
c001d86f:	e8 bc 4b ff ff       	call   c0012430 <VAS::allocatePages(int, int)>
c001d874:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d878:	89 c3                	mov    ebx,eax
c001d87a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d87e:	05 ff 0f 00 00       	add    eax,0xfff
c001d883:	83 d2 00             	adc    edx,0x0
c001d886:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d88a:	c1 ea 0c             	shr    edx,0xc
c001d88d:	52                   	push   edx
c001d88e:	50                   	push   eax
c001d88f:	53                   	push   ebx
c001d890:	68 ea c1 02 c0       	push   0xc002c1ea
c001d895:	e8 da 56 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001d89a:	83 c4 14             	add    esp,0x14
c001d89d:	56                   	push   esi
c001d89e:	e8 f1 2e fe ff       	call   c0000794 <strlen>
c001d8a3:	8b 3d 20 12 03 c0    	mov    edi,DWORD PTR ds:0xc0031220
c001d8a9:	40                   	inc    eax
c001d8aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ad:	e8 91 1f ff ff       	call   c000f843 <malloc>
c001d8b2:	89 04 bd 40 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce9c0],eax
c001d8b9:	5f                   	pop    edi
c001d8ba:	58                   	pop    eax
c001d8bb:	a1 20 12 03 c0       	mov    eax,ds:0xc0031220
c001d8c0:	56                   	push   esi
c001d8c1:	ff 34 85 40 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce9c0]
c001d8c8:	e8 67 2f fe ff       	call   c0000834 <strcpy>
c001d8cd:	a1 20 12 03 c0       	mov    eax,ds:0xc0031220
c001d8d2:	8d 50 01             	lea    edx,[eax+0x1]
c001d8d5:	89 1c 85 40 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebc0],ebx
c001d8dc:	89 15 20 12 03 c0    	mov    DWORD PTR ds:0xc0031220,edx
c001d8e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8e6:	83 c4 0c             	add    esp,0xc
c001d8e9:	89 14 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],edx
c001d8f0:	6a 01                	push   0x1
c001d8f2:	53                   	push   ebx
c001d8f3:	56                   	push   esi
c001d8f4:	e8 bc f6 ff ff       	call   c001cfb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d8f9:	83 c4 10             	add    esp,0x10
c001d8fc:	89 c7                	mov    edi,eax
c001d8fe:	84 c0                	test   al,al
c001d900:	0f 85 8c 00 00 00    	jne    c001d992 <Thr::loadDLL(char const*, bool)+0x23e>
c001d906:	89 e8                	mov    eax,ebp
c001d908:	84 c0                	test   al,al
c001d90a:	74 76                	je     c001d982 <Thr::loadDLL(char const*, bool)+0x22e>
c001d90c:	83 ec 0c             	sub    esp,0xc
c001d90f:	68 0e c2 02 c0       	push   0xc002c20e
c001d914:	e8 08 cd ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d919:	83 c4 10             	add    esp,0x10
c001d91c:	eb 64                	jmp    c001d982 <Thr::loadDLL(char const*, bool)+0x22e>
c001d91e:	e8 bb 44 ff ff       	call   c0011dde <Virt::getAKernelVAS()>
c001d923:	89 f5                	mov    ebp,esi
c001d925:	c1 e5 0c             	shl    ebp,0xc
c001d928:	52                   	push   edx
c001d929:	01 dd                	add    ebp,ebx
c001d92b:	52                   	push   edx
c001d92c:	55                   	push   ebp
c001d92d:	50                   	push   eax
c001d92e:	e8 77 46 ff ff       	call   c0011faa <VAS::getPageTableEntry(unsigned long)>
c001d933:	83 c4 10             	add    esp,0x10
c001d936:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d939:	75 0c                	jne    c001d947 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d93b:	83 ec 0c             	sub    esp,0xc
c001d93e:	55                   	push   ebp
c001d93f:	e8 17 25 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d944:	83 c4 10             	add    esp,0x10
c001d947:	46                   	inc    esi
c001d948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d94c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d950:	05 ff 0f 00 00       	add    eax,0xfff
c001d955:	83 d2 00             	adc    edx,0x0
c001d958:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d95c:	c1 ea 0c             	shr    edx,0xc
c001d95f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d963:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d967:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d96b:	ba 00 00 00 00       	mov    edx,0x0
c001d970:	89 d0                	mov    eax,edx
c001d972:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d976:	72 a6                	jb     c001d91e <Thr::loadDLL(char const*, bool)+0x1ca>
c001d978:	89 f8                	mov    eax,edi
c001d97a:	84 c0                	test   al,al
c001d97c:	75 18                	jne    c001d996 <Thr::loadDLL(char const*, bool)+0x242>
c001d97e:	31 db                	xor    ebx,ebx
c001d980:	eb 14                	jmp    c001d996 <Thr::loadDLL(char const*, bool)+0x242>
c001d982:	83 ec 0c             	sub    esp,0xc
c001d985:	68 2d c2 02 c0       	push   0xc002c22d
c001d98a:	e8 92 cc ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d98f:	83 c4 10             	add    esp,0x10
c001d992:	31 f6                	xor    esi,esi
c001d994:	eb b2                	jmp    c001d948 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d996:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d99c:	89 d8                	mov    eax,ebx
c001d99e:	5b                   	pop    ebx
c001d99f:	5e                   	pop    esi
c001d9a0:	5f                   	pop    edi
c001d9a1:	5d                   	pop    ebp
c001d9a2:	c3                   	ret    

c001d9a3 <Thr::executeDLL(unsigned long, void*)>:
c001d9a3:	56                   	push   esi
c001d9a4:	53                   	push   ebx
c001d9a5:	52                   	push   edx
c001d9a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9ae:	85 db                	test   ebx,ebx
c001d9b0:	75 10                	jne    c001d9c2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9b2:	83 ec 0c             	sub    esp,0xc
c001d9b5:	68 49 c2 02 c0       	push   0xc002c249
c001d9ba:	e8 62 cc ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001d9bf:	83 c4 10             	add    esp,0x10
c001d9c2:	50                   	push   eax
c001d9c3:	50                   	push   eax
c001d9c4:	53                   	push   ebx
c001d9c5:	68 73 c2 02 c0       	push   0xc002c273
c001d9ca:	e8 a5 55 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001d9cf:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9d3:	89 d8                	mov    eax,ebx
c001d9d5:	83 c4 14             	add    esp,0x14
c001d9d8:	5b                   	pop    ebx
c001d9d9:	5e                   	pop    esi
c001d9da:	ff e0                	jmp    eax

c001d9dc <changeTSS>:
c001d9dc:	83 ec 14             	sub    esp,0x14
c001d9df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9e4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d9e7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d9ec:	c1 e2 15             	shl    edx,0x15
c001d9ef:	29 d0                	sub    eax,edx
c001d9f1:	50                   	push   eax
c001d9f2:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001d9f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9fd:	05 7c 11 00 00       	add    eax,0x117c
c001da02:	50                   	push   eax
c001da03:	e8 7a 3a ff ff       	call   c0011482 <TSS::setESP(unsigned long)>
c001da08:	83 c4 1c             	add    esp,0x1c
c001da0b:	c3                   	ret    

c001da0c <Process::addArgs(char**)>:
c001da0c:	57                   	push   edi
c001da0d:	56                   	push   esi
c001da0e:	53                   	push   ebx
c001da0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da13:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da17:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da21:	85 ff                	test   edi,edi
c001da23:	74 3d                	je     c001da62 <Process::addArgs(char**)+0x56>
c001da25:	8b 07                	mov    eax,DWORD PTR [edi]
c001da27:	85 c0                	test   eax,eax
c001da29:	74 37                	je     c001da62 <Process::addArgs(char**)+0x56>
c001da2b:	31 db                	xor    ebx,ebx
c001da2d:	83 ec 0c             	sub    esp,0xc
c001da30:	50                   	push   eax
c001da31:	e8 5e 2d fe ff       	call   c0000794 <strlen>
c001da36:	40                   	inc    eax
c001da37:	89 04 24             	mov    DWORD PTR [esp],eax
c001da3a:	e8 04 1e ff ff       	call   c000f843 <malloc>
c001da3f:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da46:	5a                   	pop    edx
c001da47:	59                   	pop    ecx
c001da48:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da4b:	43                   	inc    ebx
c001da4c:	50                   	push   eax
c001da4d:	e8 e2 2d fe ff       	call   c0000834 <strcpy>
c001da52:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da58:	83 c4 10             	add    esp,0x10
c001da5b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da5e:	85 c0                	test   eax,eax
c001da60:	75 cb                	jne    c001da2d <Process::addArgs(char**)+0x21>
c001da62:	5b                   	pop    ebx
c001da63:	5e                   	pop    esi
c001da64:	5f                   	pop    edi
c001da65:	c3                   	ret    

c001da66 <Process::Process(char const*, Process*, char**)>:
c001da66:	56                   	push   esi
c001da67:	53                   	push   ebx
c001da68:	83 ec 14             	sub    esp,0x14
c001da6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da6f:	05 0c 02 00 00       	add    eax,0x20c
c001da74:	bb 07 00 00 00       	mov    ebx,0x7
c001da79:	89 c6                	mov    esi,eax
c001da7b:	85 db                	test   ebx,ebx
c001da7d:	78 12                	js     c001da91 <Process::Process(char const*, Process*, char**)+0x2b>
c001da7f:	83 ec 0c             	sub    esp,0xc
c001da82:	56                   	push   esi
c001da83:	e8 1a b2 00 00       	call   c0028ca2 <ThreadControlBlock::ThreadControlBlock()>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	83 c6 63             	add    esi,0x63
c001da8e:	4b                   	dec    ebx
c001da8f:	eb ea                	jmp    c001da7b <Process::Process(char const*, Process*, char**)+0x15>
c001da91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da95:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da9c:	83 ec 0c             	sub    esp,0xc
c001da9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daa3:	e8 ca c9 ff ff       	call   c001a472 <Krnl::newProcessEnv(Process*)>
c001daa8:	83 c4 10             	add    esp,0x10
c001daab:	89 c2                	mov    edx,eax
c001daad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dab1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dabb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dac4:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001dac9:	8d 50 01             	lea    edx,[eax+0x1]
c001dacc:	89 15 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,edx
c001dad2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dad6:	89 02                	mov    DWORD PTR [edx],eax
c001dad8:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dae0:	83 ec 0c             	sub    esp,0xc
c001dae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dae7:	e8 57 1d ff ff       	call   c000f843 <malloc>
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	89 c3                	mov    ebx,eax
c001daf1:	83 ec 08             	sub    esp,0x8
c001daf4:	6a 00                	push   0x0
c001daf6:	53                   	push   ebx
c001daf7:	e8 dc 4c ff ff       	call   c00127d8 <VAS::VAS(bool)>
c001dafc:	83 c4 10             	add    esp,0x10
c001daff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db03:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db1f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db29:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db2f:	85 c0                	test   eax,eax
c001db31:	74 42                	je     c001db75 <Process::Process(char const*, Process*, char**)+0x10f>
c001db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db3d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db47:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db51:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db57:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db61:	05 0c 01 00 00       	add    eax,0x10c
c001db66:	83 ec 08             	sub    esp,0x8
c001db69:	52                   	push   edx
c001db6a:	50                   	push   eax
c001db6b:	e8 c4 2c fe ff       	call   c0000834 <strcpy>
c001db70:	83 c4 10             	add    esp,0x10
c001db73:	eb 63                	jmp    c001dbd8 <Process::Process(char const*, Process*, char**)+0x172>
c001db75:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001db7d:	83 ec 0c             	sub    esp,0xc
c001db80:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db84:	e8 ba 1c ff ff       	call   c000f843 <malloc>
c001db89:	83 c4 10             	add    esp,0x10
c001db8c:	89 c3                	mov    ebx,eax
c001db8e:	83 ec 08             	sub    esp,0x8
c001db91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db95:	53                   	push   ebx
c001db96:	e8 e5 35 ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001db9b:	83 c4 10             	add    esp,0x10
c001db9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbb2:	83 ec 0c             	sub    esp,0xc
c001dbb5:	50                   	push   eax
c001dbb6:	e8 b8 29 ff ff       	call   c0010573 <addToTerminalCycle(VgaText*)>
c001dbbb:	83 c4 10             	add    esp,0x10
c001dbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc2:	05 0c 01 00 00       	add    eax,0x10c
c001dbc7:	83 ec 08             	sub    esp,0x8
c001dbca:	68 92 c2 02 c0       	push   0xc002c292
c001dbcf:	50                   	push   eax
c001dbd0:	e8 5f 2c fe ff       	call   c0000834 <strcpy>
c001dbd5:	83 c4 10             	add    esp,0x10
c001dbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdc:	83 c0 0c             	add    eax,0xc
c001dbdf:	83 ec 08             	sub    esp,0x8
c001dbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe6:	50                   	push   eax
c001dbe7:	e8 48 2c fe ff       	call   c0000834 <strcpy>
c001dbec:	83 c4 10             	add    esp,0x10
c001dbef:	83 ec 08             	sub    esp,0x8
c001dbf2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbfa:	e8 0d fe ff ff       	call   c001da0c <Process::addArgs(char**)>
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	83 ec 08             	sub    esp,0x8
c001dc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc0d:	e8 6d ee ff ff       	call   c001ca7f <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc12:	83 c4 10             	add    esp,0x10
c001dc15:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc1d:	83 f0 01             	xor    eax,0x1
c001dc20:	88 c2                	mov    dl,al
c001dc22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc26:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc2c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc31:	83 ec 08             	sub    esp,0x8
c001dc34:	50                   	push   eax
c001dc35:	68 90 c3 02 c0       	push   0xc002c390
c001dc3a:	e8 35 53 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	90                   	nop
c001dc43:	83 c4 14             	add    esp,0x14
c001dc46:	5b                   	pop    ebx
c001dc47:	5e                   	pop    esi
c001dc48:	c3                   	ret    
c001dc49:	90                   	nop

c001dc4a <Process::Process(bool, char const*, Process*, char**)>:
c001dc4a:	56                   	push   esi
c001dc4b:	53                   	push   ebx
c001dc4c:	83 ec 24             	sub    esp,0x24
c001dc4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5b:	05 0c 02 00 00       	add    eax,0x20c
c001dc60:	bb 07 00 00 00       	mov    ebx,0x7
c001dc65:	89 c6                	mov    esi,eax
c001dc67:	85 db                	test   ebx,ebx
c001dc69:	78 12                	js     c001dc7d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc6b:	83 ec 0c             	sub    esp,0xc
c001dc6e:	56                   	push   esi
c001dc6f:	e8 2e b0 00 00       	call   c0028ca2 <ThreadControlBlock::ThreadControlBlock()>
c001dc74:	83 c4 10             	add    esp,0x10
c001dc77:	83 c6 63             	add    esi,0x63
c001dc7a:	4b                   	dec    ebx
c001dc7b:	eb ea                	jmp    c001dc67 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc81:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc8f:	e8 de c7 ff ff       	call   c001a472 <Krnl::newProcessEnv(Process*)>
c001dc94:	83 c4 10             	add    esp,0x10
c001dc97:	89 c2                	mov    edx,eax
c001dc99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc9d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dcb0:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001dcb5:	8d 50 01             	lea    edx,[eax+0x1]
c001dcb8:	89 15 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,edx
c001dcbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcc2:	89 02                	mov    DWORD PTR [edx],eax
c001dcc4:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dccc:	83 ec 0c             	sub    esp,0xc
c001dccf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcd3:	e8 6b 1b ff ff       	call   c000f843 <malloc>
c001dcd8:	83 c4 10             	add    esp,0x10
c001dcdb:	89 c3                	mov    ebx,eax
c001dcdd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dce2:	83 ec 08             	sub    esp,0x8
c001dce5:	50                   	push   eax
c001dce6:	53                   	push   ebx
c001dce7:	e8 ec 4a ff ff       	call   c00127d8 <VAS::VAS(bool)>
c001dcec:	83 c4 10             	add    esp,0x10
c001dcef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf3:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd0f:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd19:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd1f:	85 c0                	test   eax,eax
c001dd21:	74 42                	je     c001dd65 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd27:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd2d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd37:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd47:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd51:	05 0c 01 00 00       	add    eax,0x10c
c001dd56:	83 ec 08             	sub    esp,0x8
c001dd59:	52                   	push   edx
c001dd5a:	50                   	push   eax
c001dd5b:	e8 d4 2a fe ff       	call   c0000834 <strcpy>
c001dd60:	83 c4 10             	add    esp,0x10
c001dd63:	eb 63                	jmp    c001ddc8 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd65:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd6d:	83 ec 0c             	sub    esp,0xc
c001dd70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd74:	e8 ca 1a ff ff       	call   c000f843 <malloc>
c001dd79:	83 c4 10             	add    esp,0x10
c001dd7c:	89 c3                	mov    ebx,eax
c001dd7e:	83 ec 08             	sub    esp,0x8
c001dd81:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd85:	53                   	push   ebx
c001dd86:	e8 f5 33 ff ff       	call   c0011180 <VgaText::VgaText(char const*)>
c001dd8b:	83 c4 10             	add    esp,0x10
c001dd8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd92:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dda2:	83 ec 0c             	sub    esp,0xc
c001dda5:	50                   	push   eax
c001dda6:	e8 c8 27 ff ff       	call   c0010573 <addToTerminalCycle(VgaText*)>
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb2:	05 0c 01 00 00       	add    eax,0x10c
c001ddb7:	83 ec 08             	sub    esp,0x8
c001ddba:	68 92 c2 02 c0       	push   0xc002c292
c001ddbf:	50                   	push   eax
c001ddc0:	e8 6f 2a fe ff       	call   c0000834 <strcpy>
c001ddc5:	83 c4 10             	add    esp,0x10
c001ddc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcc:	83 c0 0c             	add    eax,0xc
c001ddcf:	83 ec 08             	sub    esp,0x8
c001ddd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddd6:	50                   	push   eax
c001ddd7:	e8 58 2a fe ff       	call   c0000834 <strcpy>
c001dddc:	83 c4 10             	add    esp,0x10
c001dddf:	83 ec 08             	sub    esp,0x8
c001dde2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dde6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddea:	e8 1d fc ff ff       	call   c001da0c <Process::addArgs(char**)>
c001ddef:	83 c4 10             	add    esp,0x10
c001ddf2:	90                   	nop
c001ddf3:	83 c4 24             	add    esp,0x24
c001ddf6:	5b                   	pop    ebx
c001ddf7:	5e                   	pop    esi
c001ddf8:	c3                   	ret    

c001ddf9 <disableIRQs()>:
c001ddf9:	fa                   	cli    
c001ddfa:	ff 05 ec 19 03 c0    	inc    DWORD PTR ds:0xc00319ec
c001de00:	c3                   	ret    

c001de01 <getIRQNestingLevel()>:
c001de01:	a1 ec 19 03 c0       	mov    eax,ds:0xc00319ec
c001de06:	c3                   	ret    

c001de07 <enableIRQs()>:
c001de07:	a1 ec 19 03 c0       	mov    eax,ds:0xc00319ec
c001de0c:	48                   	dec    eax
c001de0d:	a3 ec 19 03 c0       	mov    ds:0xc00319ec,eax
c001de12:	75 01                	jne    c001de15 <enableIRQs()+0xe>
c001de14:	fb                   	sti    
c001de15:	c3                   	ret    

c001de16 <lockScheduler()>:
c001de16:	eb e1                	jmp    c001ddf9 <disableIRQs()>

c001de18 <unlockScheduler()>:
c001de18:	eb ed                	jmp    c001de07 <enableIRQs()>

c001de1a <userModeEntryPoint(void*)>:
c001de1a:	83 ec 0c             	sub    esp,0xc
c001de1d:	e8 f6 ff ff ff       	call   c001de18 <unlockScheduler()>
c001de22:	fb                   	sti    
c001de23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de2b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de35:	83 c4 0c             	add    esp,0xc
c001de38:	e9 ed 24 fe ff       	jmp    c000032a <goToUsermode>

c001de3d <lockStuff()>:
c001de3d:	e8 b7 ff ff ff       	call   c001ddf9 <disableIRQs()>
c001de42:	ff 05 e8 19 03 c0    	inc    DWORD PTR ds:0xc00319e8
c001de48:	c3                   	ret    

c001de49 <taskStartupFunction>:
c001de49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de4e:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de51:	c3                   	ret    

c001de52 <updateTimeUsed()>:
c001de52:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c001de57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de5d:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de64:	74 50                	je     c001deb6 <updateTimeUsed()+0x64>
c001de66:	57                   	push   edi
c001de67:	56                   	push   esi
c001de68:	53                   	push   ebx
c001de69:	0f 31                	rdtsc  
c001de6b:	89 c1                	mov    ecx,eax
c001de6d:	a3 28 1a 03 c0       	mov    ds:0xc0031a28,eax
c001de72:	2b 0d 18 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031a18
c001de78:	89 d3                	mov    ebx,edx
c001de7a:	89 0d 20 1a 03 c0    	mov    DWORD PTR ds:0xc0031a20,ecx
c001de80:	1b 1d 1c 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031a1c
c001de86:	a3 18 1a 03 c0       	mov    ds:0xc0031a18,eax
c001de8b:	89 1d 24 1a 03 c0    	mov    DWORD PTR ds:0xc0031a24,ebx
c001de91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de96:	89 15 2c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a2c,edx
c001de9c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001de9f:	89 15 1c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a1c,edx
c001dea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dea8:	01 f1                	add    ecx,esi
c001deaa:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dead:	11 fb                	adc    ebx,edi
c001deaf:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001deb2:	5b                   	pop    ebx
c001deb3:	5e                   	pop    esi
c001deb4:	5f                   	pop    edi
c001deb5:	c3                   	ret    
c001deb6:	c3                   	ret    

c001deb7 <switchToThread(ThreadControlBlock*)>:
c001deb7:	53                   	push   ebx
c001deb8:	83 ec 08             	sub    esp,0x8
c001debb:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c001dec0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dec4:	85 c0                	test   eax,eax
c001dec6:	75 30                	jne    c001def8 <switchToThread(ThreadControlBlock*)+0x41>
c001dec8:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001decb:	3c ff                	cmp    al,0xff
c001decd:	74 25                	je     c001def4 <switchToThread(ThreadControlBlock*)+0x3d>
c001decf:	0f b6 d0             	movzx  edx,al
c001ded2:	b8 84 03 00 00       	mov    eax,0x384
c001ded7:	29 d0                	sub    eax,edx
c001ded9:	c1 e0 10             	shl    eax,0x10
c001dedc:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dedf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dee2:	e8 6b ff ff ff       	call   c001de52 <updateTimeUsed()>
c001dee7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001deeb:	83 c4 08             	add    esp,0x8
c001deee:	5b                   	pop    ebx
c001deef:	e9 6e 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001def4:	31 c0                	xor    eax,eax
c001def6:	eb e7                	jmp    c001dedf <switchToThread(ThreadControlBlock*)+0x28>
c001def8:	c7 05 e4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319e4,0x1
c001df02:	83 c4 08             	add    esp,0x8
c001df05:	5b                   	pop    ebx
c001df06:	c3                   	ret    
c001df07:	90                   	nop

c001df08 <Semaphore::Semaphore(int)>:
c001df08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df10:	89 10                	mov    DWORD PTR [eax],edx
c001df12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df16:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df33:	90                   	nop
c001df34:	c3                   	ret    
c001df35:	90                   	nop

c001df36 <Mutex::Mutex()>:
c001df36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df3a:	6a 01                	push   0x1
c001df3c:	50                   	push   eax
c001df3d:	e8 c6 ff ff ff       	call   c001df08 <Semaphore::Semaphore(int)>
c001df42:	83 c4 08             	add    esp,0x8
c001df45:	90                   	nop
c001df46:	c3                   	ret    
c001df47:	90                   	nop

c001df48 <Process::createThread(void (*)(void*), void*, int)>:
c001df48:	55                   	push   ebp
c001df49:	31 c9                	xor    ecx,ecx
c001df4b:	57                   	push   edi
c001df4c:	56                   	push   esi
c001df4d:	53                   	push   ebx
c001df4e:	83 ec 1c             	sub    esp,0x1c
c001df51:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df55:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df5c:	89 f2                	mov    edx,esi
c001df5e:	0f b7 c2             	movzx  eax,dx
c001df61:	83 e2 01             	and    edx,0x1
c001df64:	74 14                	je     c001df7a <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df66:	d1 f8                	sar    eax,1
c001df68:	41                   	inc    ecx
c001df69:	89 c2                	mov    edx,eax
c001df6b:	83 f9 10             	cmp    ecx,0x10
c001df6e:	75 ee                	jne    c001df5e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df70:	83 c4 1c             	add    esp,0x1c
c001df73:	31 c0                	xor    eax,eax
c001df75:	5b                   	pop    ebx
c001df76:	5e                   	pop    esi
c001df77:	5f                   	pop    edi
c001df78:	5d                   	pop    ebp
c001df79:	c3                   	ret    
c001df7a:	83 ec 08             	sub    esp,0x8
c001df7d:	b8 01 00 00 00       	mov    eax,0x1
c001df82:	d3 e0                	shl    eax,cl
c001df84:	09 c6                	or     esi,eax
c001df86:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df8c:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001df93:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001df96:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001df99:	01 ce                	add    esi,ecx
c001df9b:	89 f0                	mov    eax,esi
c001df9d:	c1 e0 05             	shl    eax,0x5
c001dfa0:	01 c6                	add    esi,eax
c001dfa2:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfa5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfab:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfb1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfb5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfbb:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dfc1:	89 ca                	mov    edx,ecx
c001dfc3:	f7 da                	neg    edx
c001dfc5:	c1 e2 15             	shl    edx,0x15
c001dfc8:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dfce:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dfd4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfd8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dfe2:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dfe8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dfec:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dff2:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dffc:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e006:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e00d:	50                   	push   eax
c001e00e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e012:	68 08 1a 03 c0       	push   0xc0031a08
c001e017:	e8 14 ab 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e01c:	83 c4 10             	add    esp,0x10
c001e01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e023:	83 c4 1c             	add    esp,0x1c
c001e026:	5b                   	pop    ebx
c001e027:	5e                   	pop    esi
c001e028:	5f                   	pop    edi
c001e029:	5d                   	pop    ebp
c001e02a:	c3                   	ret    
c001e02b:	90                   	nop

c001e02c <Process::createUserThread()>:
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	68 80 00 00 00       	push   0x80
c001e034:	6a 00                	push   0x0
c001e036:	68 1a de 01 c0       	push   0xc001de1a
c001e03b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e03f:	e8 04 ff ff ff       	call   c001df48 <Process::createThread(void (*)(void*), void*, int)>
c001e044:	83 c4 1c             	add    esp,0x1c
c001e047:	c3                   	ret    

c001e048 <setupMultitasking(void (*)())>:
c001e048:	56                   	push   esi
c001e049:	53                   	push   ebx
c001e04a:	53                   	push   ebx
c001e04b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e04f:	eb 10                	jmp    c001e061 <setupMultitasking(void (*)())+0x19>
c001e051:	83 ec 0c             	sub    esp,0xc
c001e054:	68 08 1a 03 c0       	push   0xc0031a08
c001e059:	e8 24 aa 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e05e:	83 c4 10             	add    esp,0x10
c001e061:	83 ec 0c             	sub    esp,0xc
c001e064:	68 08 1a 03 c0       	push   0xc0031a08
c001e069:	e8 f8 a9 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	84 c0                	test   al,al
c001e073:	74 dc                	je     c001e051 <setupMultitasking(void (*)())+0x9>
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	68 3f 07 00 00       	push   0x73f
c001e07d:	e8 c1 17 ff ff       	call   c000f843 <malloc>
c001e082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e089:	89 c3                	mov    ebx,eax
c001e08b:	6a 00                	push   0x0
c001e08d:	68 96 c2 02 c0       	push   0xc002c296
c001e092:	6a 01                	push   0x1
c001e094:	50                   	push   eax
c001e095:	e8 b0 fb ff ff       	call   c001dc4a <Process::Process(bool, char const*, Process*, char**)>
c001e09a:	83 c4 18             	add    esp,0x18
c001e09d:	89 1d 14 1a 03 c0    	mov    DWORD PTR ds:0xc0031a14,ebx
c001e0a3:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0a9:	68 b8 c3 02 c0       	push   0xc002c3b8
c001e0ae:	e8 c1 4e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e0b3:	58                   	pop    eax
c001e0b4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0ba:	e8 36 2c ff ff       	call   c0010cf5 <setActiveTerminal(VgaText*)>
c001e0bf:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0c7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e0d0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e0da:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e0e0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e0e6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e0f0:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e0fa:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e104:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e10a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e110:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e11a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e120:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e12a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e130:	5a                   	pop    edx
c001e131:	59                   	pop    ecx
c001e132:	68 92 c2 02 c0       	push   0xc002c292
c001e137:	50                   	push   eax
c001e138:	e8 f7 26 fe ff       	call   c0000834 <strcpy>
c001e13d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e144:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e148:	83 c4 14             	add    esp,0x14
c001e14b:	5b                   	pop    ebx
c001e14c:	5e                   	pop    esi
c001e14d:	e9 02 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e152 <schedule()>:
c001e152:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c001e157:	85 c0                	test   eax,eax
c001e159:	74 0b                	je     c001e166 <schedule()+0x14>
c001e15b:	c7 05 e4 19 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00319e4,0x1
c001e165:	c3                   	ret    
c001e166:	53                   	push   ebx
c001e167:	83 ec 14             	sub    esp,0x14
c001e16a:	68 08 1a 03 c0       	push   0xc0031a08
c001e16f:	e8 f2 a8 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e174:	83 c4 10             	add    esp,0x10
c001e177:	84 c0                	test   al,al
c001e179:	75 38                	jne    c001e1b3 <schedule()+0x61>
c001e17b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e180:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e183:	4a                   	dec    edx
c001e184:	74 32                	je     c001e1b8 <schedule()+0x66>
c001e186:	83 ec 0c             	sub    esp,0xc
c001e189:	68 08 1a 03 c0       	push   0xc0031a08
c001e18e:	e8 cb a8 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e193:	c7 04 24 08 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a08
c001e19a:	89 c3                	mov    ebx,eax
c001e19c:	e8 e1 a8 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1a1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1ab:	e8 07 fd ff ff       	call   c001deb7 <switchToThread(ThreadControlBlock*)>
c001e1b0:	83 c4 10             	add    esp,0x10
c001e1b3:	83 c4 08             	add    esp,0x8
c001e1b6:	5b                   	pop    ebx
c001e1b7:	c3                   	ret    
c001e1b8:	83 ec 08             	sub    esp,0x8
c001e1bb:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1c2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1c8:	68 08 1a 03 c0       	push   0xc0031a08
c001e1cd:	e8 5e a9 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1d2:	83 c4 10             	add    esp,0x10
c001e1d5:	eb af                	jmp    c001e186 <schedule()+0x34>

c001e1d7 <unlockStuff()>:
c001e1d7:	a1 e8 19 03 c0       	mov    eax,ds:0xc00319e8
c001e1dc:	48                   	dec    eax
c001e1dd:	a3 e8 19 03 c0       	mov    ds:0xc00319e8,eax
c001e1e2:	75 09                	jne    c001e1ed <unlockStuff()+0x16>
c001e1e4:	a1 e4 19 03 c0       	mov    eax,ds:0xc00319e4
c001e1e9:	85 c0                	test   eax,eax
c001e1eb:	75 05                	jne    c001e1f2 <unlockStuff()+0x1b>
c001e1ed:	e9 15 fc ff ff       	jmp    c001de07 <enableIRQs()>
c001e1f2:	83 ec 0c             	sub    esp,0xc
c001e1f5:	c7 05 e4 19 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00319e4,0x0
c001e1ff:	e8 4e ff ff ff       	call   c001e152 <schedule()>
c001e204:	83 c4 0c             	add    esp,0xc
c001e207:	e9 fb fb ff ff       	jmp    c001de07 <enableIRQs()>

c001e20c <Semaphore::tryAcquire()>:
c001e20c:	83 ec 0c             	sub    esp,0xc
c001e20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e213:	e8 25 fc ff ff       	call   c001de3d <lockStuff()>
c001e218:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e21b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e21d:	7c 0b                	jl     c001e22a <Semaphore::tryAcquire()+0x1e>
c001e21f:	e8 b3 ff ff ff       	call   c001e1d7 <unlockStuff()>
c001e224:	31 c0                	xor    eax,eax
c001e226:	83 c4 0c             	add    esp,0xc
c001e229:	c3                   	ret    
c001e22a:	42                   	inc    edx
c001e22b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e22e:	e8 a4 ff ff ff       	call   c001e1d7 <unlockStuff()>
c001e233:	b0 01                	mov    al,0x1
c001e235:	83 c4 0c             	add    esp,0xc
c001e238:	c3                   	ret    
c001e239:	90                   	nop

c001e23a <Semaphore::assertLocked(char const*)>:
c001e23a:	83 ec 0c             	sub    esp,0xc
c001e23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e241:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e245:	e8 f3 fb ff ff       	call   c001de3d <lockStuff()>
c001e24a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e24c:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e24f:	7c 05                	jl     c001e256 <Semaphore::assertLocked(char const*)+0x1c>
c001e251:	83 c4 0c             	add    esp,0xc
c001e254:	eb 81                	jmp    c001e1d7 <unlockStuff()>
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	52                   	push   edx
c001e25a:	e8 c2 c3 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001e25f:	83 c4 10             	add    esp,0x10
c001e262:	83 c4 0c             	add    esp,0xc
c001e265:	e9 6d ff ff ff       	jmp    c001e1d7 <unlockStuff()>

c001e26a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e26a:	83 ec 0c             	sub    esp,0xc
c001e26d:	e8 8f fb ff ff       	call   c001de01 <getIRQNestingLevel()>
c001e272:	83 ec 08             	sub    esp,0x8
c001e275:	50                   	push   eax
c001e276:	68 ec c3 02 c0       	push   0xc002c3ec
c001e27b:	e8 f4 4c ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e280:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e289:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e28c:	e8 c1 fe ff ff       	call   c001e152 <schedule()>
c001e291:	e8 82 fb ff ff       	call   c001de18 <unlockScheduler()>
c001e296:	e8 66 fb ff ff       	call   c001de01 <getIRQNestingLevel()>
c001e29b:	5a                   	pop    edx
c001e29c:	59                   	pop    ecx
c001e29d:	50                   	push   eax
c001e29e:	68 20 c4 02 c0       	push   0xc002c420
c001e2a3:	e8 cc 4c ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e2a8:	83 c4 1c             	add    esp,0x1c
c001e2ab:	c3                   	ret    

c001e2ac <blockTask(TaskState)>:
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2b3:	e8 5e fb ff ff       	call   c001de16 <lockScheduler()>
c001e2b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2bd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2c0:	e8 8d fe ff ff       	call   c001e152 <schedule()>
c001e2c5:	83 c4 0c             	add    esp,0xc
c001e2c8:	e9 4b fb ff ff       	jmp    c001de18 <unlockScheduler()>

c001e2cd <waitTask(int, int*, int)>:
c001e2cd:	83 ec 18             	sub    esp,0x18
c001e2d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2d9:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2e5:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2e8:	6a 07                	push   0x7
c001e2ea:	e8 bd ff ff ff       	call   c001e2ac <blockTask(TaskState)>
c001e2ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2fa:	85 d2                	test   edx,edx
c001e2fc:	74 0a                	je     c001e308 <waitTask(int, int*, int)+0x3b>
c001e2fe:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e301:	89 02                	mov    DWORD PTR [edx],eax
c001e303:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e308:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e30b:	83 c4 0c             	add    esp,0xc
c001e30e:	c3                   	ret    

c001e30f <nanoSleepUntil(unsigned long long)>:
c001e30f:	83 ec 0c             	sub    esp,0xc
c001e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e316:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e31a:	3b 05 30 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002eb30
c001e320:	89 d1                	mov    ecx,edx
c001e322:	1b 0d 34 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002eb34
c001e328:	73 04                	jae    c001e32e <nanoSleepUntil(unsigned long long)+0x1f>
c001e32a:	83 c4 0c             	add    esp,0xc
c001e32d:	c3                   	ret    
c001e32e:	e8 0a fb ff ff       	call   c001de3d <lockStuff()>
c001e333:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e339:	83 ec 08             	sub    esp,0x8
c001e33c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e33f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e342:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e348:	68 fc 19 03 c0       	push   0xc00319fc
c001e34d:	e8 de a7 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e352:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e359:	e8 4e ff ff ff       	call   c001e2ac <blockTask(TaskState)>
c001e35e:	83 c4 1c             	add    esp,0x1c
c001e361:	e9 71 fe ff ff       	jmp    c001e1d7 <unlockStuff()>

c001e366 <nanoSleep(unsigned long long)>:
c001e366:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c001e36b:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c001e371:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e375:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e379:	eb 94                	jmp    c001e30f <nanoSleepUntil(unsigned long long)>

c001e37b <sleep(unsigned long long)>:
c001e37b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e383:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e388:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e38c:	01 ca                	add    edx,ecx
c001e38e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e392:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e396:	eb ce                	jmp    c001e366 <nanoSleep(unsigned long long)>

c001e398 <Semaphore::acquire()>:
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39f:	e8 99 fa ff ff       	call   c001de3d <lockStuff()>
c001e3a4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3a7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3a9:	7d 0c                	jge    c001e3b7 <Semaphore::acquire()+0x1f>
c001e3ab:	42                   	inc    edx
c001e3ac:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3af:	83 c4 0c             	add    esp,0xc
c001e3b2:	e9 20 fe ff ff       	jmp    c001e1d7 <unlockStuff()>
c001e3b7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3bd:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3c7:	85 d2                	test   edx,edx
c001e3c9:	74 2a                	je     c001e3f5 <Semaphore::acquire()+0x5d>
c001e3cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e3ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3d4:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e3d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3dd:	83 ec 0c             	sub    esp,0xc
c001e3e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e3e3:	6a 05                	push   0x5
c001e3e5:	e8 c2 fe ff ff       	call   c001e2ac <blockTask(TaskState)>
c001e3ea:	83 c4 10             	add    esp,0x10
c001e3ed:	83 c4 0c             	add    esp,0xc
c001e3f0:	e9 e2 fd ff ff       	jmp    c001e1d7 <unlockStuff()>
c001e3f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3fe:	eb d7                	jmp    c001e3d7 <Semaphore::acquire()+0x3f>

c001e400 <taskReturned>:
c001e400:	83 ec 18             	sub    esp,0x18
c001e403:	68 54 c4 02 c0       	push   0xc002c454
c001e408:	e8 14 c2 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001e40d:	83 c4 10             	add    esp,0x10
c001e410:	83 ec 0c             	sub    esp,0xc
c001e413:	6a 02                	push   0x2
c001e415:	e8 92 fe ff ff       	call   c001e2ac <blockTask(TaskState)>
c001e41a:	e8 f7 f9 ff ff       	call   c001de16 <lockScheduler()>
c001e41f:	e8 2e fd ff ff       	call   c001e152 <schedule()>
c001e424:	e8 ef f9 ff ff       	call   c001de18 <unlockScheduler()>
c001e429:	83 c4 10             	add    esp,0x10
c001e42c:	eb e2                	jmp    c001e410 <taskReturned+0x10>

c001e42e <unblockTask(ThreadControlBlock*)>:
c001e42e:	53                   	push   ebx
c001e42f:	83 ec 08             	sub    esp,0x8
c001e432:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e436:	e8 db f9 ff ff       	call   c001de16 <lockScheduler()>
c001e43b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e43e:	85 c0                	test   eax,eax
c001e440:	74 5c                	je     c001e49e <unblockTask(ThreadControlBlock*)+0x70>
c001e442:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e445:	48                   	dec    eax
c001e446:	74 31                	je     c001e479 <unblockTask(ThreadControlBlock*)+0x4b>
c001e448:	83 ec 0c             	sub    esp,0xc
c001e44b:	68 08 1a 03 c0       	push   0xc0031a08
c001e450:	e8 09 a6 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e455:	83 c4 10             	add    esp,0x10
c001e458:	85 c0                	test   eax,eax
c001e45a:	75 17                	jne    c001e473 <unblockTask(ThreadControlBlock*)+0x45>
c001e45c:	eb 65                	jmp    c001e4c3 <unblockTask(ThreadControlBlock*)+0x95>
c001e45e:	83 ec 08             	sub    esp,0x8
c001e461:	50                   	push   eax
c001e462:	68 08 1a 03 c0       	push   0xc0031a08
c001e467:	e8 cc a8 00 00       	call   c0028d38 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e46c:	83 c4 10             	add    esp,0x10
c001e46f:	85 c0                	test   eax,eax
c001e471:	74 50                	je     c001e4c3 <unblockTask(ThreadControlBlock*)+0x95>
c001e473:	39 c3                	cmp    ebx,eax
c001e475:	75 e7                	jne    c001e45e <unblockTask(ThreadControlBlock*)+0x30>
c001e477:	eb 1c                	jmp    c001e495 <unblockTask(ThreadControlBlock*)+0x67>
c001e479:	83 ec 0c             	sub    esp,0xc
c001e47c:	68 44 c5 02 c0       	push   0xc002c544
c001e481:	e8 ee 4a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e486:	c7 04 24 d0 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d0
c001e48d:	e8 e2 4a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e492:	83 c4 10             	add    esp,0x10
c001e495:	83 c4 08             	add    esp,0x8
c001e498:	5b                   	pop    ebx
c001e499:	e9 7a f9 ff ff       	jmp    c001de18 <unlockScheduler()>
c001e49e:	83 ec 0c             	sub    esp,0xc
c001e4a1:	68 88 c4 02 c0       	push   0xc002c488
c001e4a6:	e8 c9 4a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e4ab:	c7 04 24 d0 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d0
c001e4b2:	e8 bd 4a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	83 c4 08             	add    esp,0x8
c001e4bd:	5b                   	pop    ebx
c001e4be:	e9 55 f9 ff ff       	jmp    c001de18 <unlockScheduler()>
c001e4c3:	83 ec 08             	sub    esp,0x8
c001e4c6:	53                   	push   ebx
c001e4c7:	68 08 1a 03 c0       	push   0xc0031a08
c001e4cc:	e8 5f a6 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4d1:	83 c4 10             	add    esp,0x10
c001e4d4:	83 c4 08             	add    esp,0x8
c001e4d7:	5b                   	pop    ebx
c001e4d8:	e9 3b f9 ff ff       	jmp    c001de18 <unlockScheduler()>

c001e4dd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e4dd:	55                   	push   ebp
c001e4de:	57                   	push   edi
c001e4df:	56                   	push   esi
c001e4e0:	53                   	push   ebx
c001e4e1:	83 ec 1c             	sub    esp,0x1c
c001e4e4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e4e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4eb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e4f1:	85 ff                	test   edi,edi
c001e4f3:	7e 20                	jle    c001e515 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e4f5:	31 f6                	xor    esi,esi
c001e4f7:	83 ec 0c             	sub    esp,0xc
c001e4fa:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e501:	46                   	inc    esi
c001e502:	e8 4c 13 ff ff       	call   c000f853 <free>
c001e507:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e50a:	83 c4 10             	add    esp,0x10
c001e50d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e513:	7f e2                	jg     c001e4f7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e515:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e51f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e524:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e527:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e52a:	d3 c0                	rol    eax,cl
c001e52c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e533:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e536:	89 f7                	mov    edi,esi
c001e538:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e540:	0f 85 74 01 00 00    	jne    c001e6ba <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e546:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e54c:	85 ed                	test   ebp,ebp
c001e54e:	74 1b                	je     c001e56b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	55                   	push   ebp
c001e554:	e8 35 be ff ff       	call   c001a38e <EnvVarContainer::~EnvVarContainer()>
c001e559:	59                   	pop    ecx
c001e55a:	5e                   	pop    esi
c001e55b:	6a 0c                	push   0xc
c001e55d:	55                   	push   ebp
c001e55e:	e8 31 49 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c001e563:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e566:	83 c4 10             	add    esp,0x10
c001e569:	89 f7                	mov    edi,esi
c001e56b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e571:	85 c0                	test   eax,eax
c001e573:	0f 84 aa 00 00 00    	je     c001e623 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e579:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e57c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e580:	31 c9                	xor    ecx,ecx
c001e582:	eb 10                	jmp    c001e594 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e584:	41                   	inc    ecx
c001e585:	83 f9 10             	cmp    ecx,0x10
c001e588:	0f 84 95 00 00 00    	je     c001e623 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e58e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e594:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e59b:	d3 fa                	sar    edx,cl
c001e59d:	83 e2 01             	and    edx,0x1
c001e5a0:	74 e2                	je     c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5a2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5a5:	01 ca                	add    edx,ecx
c001e5a7:	89 d5                	mov    ebp,edx
c001e5a9:	c1 e5 05             	shl    ebp,0x5
c001e5ac:	01 ea                	add    edx,ebp
c001e5ae:	01 d0                	add    eax,edx
c001e5b0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5b6:	83 fd 07             	cmp    ebp,0x7
c001e5b9:	75 c9                	jne    c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5bb:	05 40 02 00 00       	add    eax,0x240
c001e5c0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5c3:	83 fd ff             	cmp    ebp,0xffffffff
c001e5c6:	0f 8c 08 01 00 00    	jl     c001e6d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5cc:	0f 84 b9 01 00 00    	je     c001e78b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e5d2:	85 ed                	test   ebp,ebp
c001e5d4:	0f 84 a0 01 00 00    	je     c001e77a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e5da:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e5dc:	75 a6                	jne    c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5de:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5e8:	01 d0                	add    eax,edx
c001e5ea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e5ee:	83 ec 0c             	sub    esp,0xc
c001e5f1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e5f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5fa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e600:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e607:	50                   	push   eax
c001e608:	e8 21 fe ff ff       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e613:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e617:	89 f7                	mov    edi,esi
c001e619:	41                   	inc    ecx
c001e61a:	83 f9 10             	cmp    ecx,0x10
c001e61d:	0f 85 6b ff ff ff    	jne    c001e58e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e623:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e629:	85 c0                	test   eax,eax
c001e62b:	74 5d                	je     c001e68a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e62d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e633:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e639:	74 4f                	je     c001e68a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	68 08 1a 03 c0       	push   0xc0031a08
c001e643:	e8 16 a4 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e648:	c7 04 24 08 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a08
c001e64f:	89 c7                	mov    edi,eax
c001e651:	e8 10 a4 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e656:	83 c4 10             	add    esp,0x10
c001e659:	84 c0                	test   al,al
c001e65b:	0f 84 e4 00 00 00    	je     c001e745 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e661:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e664:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e66a:	85 d2                	test   edx,edx
c001e66c:	74 0f                	je     c001e67d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e66e:	83 ec 0c             	sub    esp,0xc
c001e671:	8b 02                	mov    eax,DWORD PTR [edx]
c001e673:	52                   	push   edx
c001e674:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e677:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e67a:	83 c4 10             	add    esp,0x10
c001e67d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e687:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e68a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e690:	85 db                	test   ebx,ebx
c001e692:	74 16                	je     c001e6aa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e694:	83 ec 0c             	sub    esp,0xc
c001e697:	53                   	push   ebx
c001e698:	e8 27 3b ff ff       	call   c00121c4 <VAS::~VAS()>
c001e69d:	58                   	pop    eax
c001e69e:	5a                   	pop    edx
c001e69f:	6a 14                	push   0x14
c001e6a1:	53                   	push   ebx
c001e6a2:	e8 ed 47 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	83 ec 0c             	sub    esp,0xc
c001e6ad:	68 9d c2 02 c0       	push   0xc002c29d
c001e6b2:	e8 bd 48 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	83 ec 08             	sub    esp,0x8
c001e6bd:	68 3f 07 00 00       	push   0x73f
c001e6c2:	68 ab c2 02 c0       	push   0xc002c2ab
c001e6c7:	e8 a8 48 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e6cc:	83 c4 2c             	add    esp,0x2c
c001e6cf:	5b                   	pop    ebx
c001e6d0:	5e                   	pop    esi
c001e6d1:	5f                   	pop    edi
c001e6d2:	5d                   	pop    ebp
c001e6d3:	c3                   	ret    
c001e6d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6d8:	83 ec 0c             	sub    esp,0xc
c001e6db:	68 88 c5 02 c0       	push   0xc002c588
c001e6e0:	e8 3c bf ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001e6e5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6e8:	83 c4 10             	add    esp,0x10
c001e6eb:	89 f7                	mov    edi,esi
c001e6ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6f1:	e9 8e fe ff ff       	jmp    c001e584 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e6fc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e702:	75 1c                	jne    c001e720 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e704:	83 ec 0c             	sub    esp,0xc
c001e707:	68 f0 c5 02 c0       	push   0xc002c5f0
c001e70c:	e8 63 48 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e711:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e718:	e8 8f fb ff ff       	call   c001e2ac <blockTask(TaskState)>
c001e71d:	83 c4 10             	add    esp,0x10
c001e720:	83 ec 08             	sub    esp,0x8
c001e723:	56                   	push   esi
c001e724:	68 08 1a 03 c0       	push   0xc0031a08
c001e729:	e8 02 a4 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e72e:	c7 04 24 08 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a08
c001e735:	e8 24 a3 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e73a:	83 c4 10             	add    esp,0x10
c001e73d:	39 f8                	cmp    eax,edi
c001e73f:	0f 84 1c ff ff ff    	je     c001e661 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e745:	83 ec 0c             	sub    esp,0xc
c001e748:	68 08 1a 03 c0       	push   0xc0031a08
c001e74d:	e8 0c a3 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e752:	c7 04 24 08 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a08
c001e759:	89 c6                	mov    esi,eax
c001e75b:	e8 22 a3 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e760:	83 c4 10             	add    esp,0x10
c001e763:	39 f3                	cmp    ebx,esi
c001e765:	74 b9                	je     c001e720 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e767:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e76a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e76d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e773:	75 ab                	jne    c001e720 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e775:	e9 7c ff ff ff       	jmp    c001e6f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e77a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	68 bc c5 02 c0       	push   0xc002c5bc
c001e786:	e9 55 ff ff ff       	jmp    c001e6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e78b:	8b 36                	mov    esi,DWORD PTR [esi]
c001e78d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e791:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e794:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e797:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e79d:	01 d7                	add    edi,edx
c001e79f:	89 f8                	mov    eax,edi
c001e7a1:	e9 44 fe ff ff       	jmp    c001e5ea <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7a6 <cleanerTaskFunction(void*)>:
c001e7a6:	53                   	push   ebx
c001e7a7:	83 ec 08             	sub    esp,0x8
c001e7aa:	e8 69 f6 ff ff       	call   c001de18 <unlockScheduler()>
c001e7af:	e8 62 f6 ff ff       	call   c001de16 <lockScheduler()>
c001e7b4:	80 3d cc 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319cc,0x0
c001e7bb:	0f 85 8e 00 00 00    	jne    c001e84f <cleanerTaskFunction(void*)+0xa9>
c001e7c1:	83 ec 0c             	sub    esp,0xc
c001e7c4:	6a 02                	push   0x2
c001e7c6:	e8 9f fa ff ff       	call   c001e26a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7cb:	83 c4 10             	add    esp,0x10
c001e7ce:	c6 05 cc 19 03 c0 00 	mov    BYTE PTR ds:0xc00319cc,0x0
c001e7d5:	e8 63 f6 ff ff       	call   c001de3d <lockStuff()>
c001e7da:	e8 37 f6 ff ff       	call   c001de16 <lockScheduler()>
c001e7df:	83 ec 0c             	sub    esp,0xc
c001e7e2:	68 f0 19 03 c0       	push   0xc00319f0
c001e7e7:	e8 7a a2 00 00       	call   c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7ec:	83 c4 10             	add    esp,0x10
c001e7ef:	84 c0                	test   al,al
c001e7f1:	75 40                	jne    c001e833 <cleanerTaskFunction(void*)+0x8d>
c001e7f3:	83 ec 0c             	sub    esp,0xc
c001e7f6:	68 f0 19 03 c0       	push   0xc00319f0
c001e7fb:	e8 5e a2 00 00       	call   c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e800:	c7 04 24 f0 19 03 c0 	mov    DWORD PTR [esp],0xc00319f0
c001e807:	89 c3                	mov    ebx,eax
c001e809:	e8 74 a2 00 00       	call   c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e80e:	c7 04 24 c1 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2c1
c001e815:	e8 5a 47 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e81a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e81d:	e8 bb fc ff ff       	call   c001e4dd <cleanupTerminatedTask(ThreadControlBlock*)>
c001e822:	c7 04 24 da c2 02 c0 	mov    DWORD PTR [esp],0xc002c2da
c001e829:	e8 46 47 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e82e:	83 c4 10             	add    esp,0x10
c001e831:	eb ac                	jmp    c001e7df <cleanerTaskFunction(void*)+0x39>
c001e833:	e8 e0 f5 ff ff       	call   c001de18 <unlockScheduler()>
c001e838:	e8 9a f9 ff ff       	call   c001e1d7 <unlockStuff()>
c001e83d:	e8 d4 f5 ff ff       	call   c001de16 <lockScheduler()>
c001e842:	80 3d cc 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319cc,0x0
c001e849:	0f 84 72 ff ff ff    	je     c001e7c1 <cleanerTaskFunction(void*)+0x1b>
c001e84f:	e8 c4 f5 ff ff       	call   c001de18 <unlockScheduler()>
c001e854:	e9 75 ff ff ff       	jmp    c001e7ce <cleanerTaskFunction(void*)+0x28>

c001e859 <terminateTask(int)>:
c001e859:	83 ec 14             	sub    esp,0x14
c001e85c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e861:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e864:	83 c0 0c             	add    eax,0xc
c001e867:	50                   	push   eax
c001e868:	68 18 c6 02 c0       	push   0xc002c618
c001e86d:	e8 02 47 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e872:	e8 c6 f5 ff ff       	call   c001de3d <lockStuff()>
c001e877:	e8 9a f5 ff ff       	call   c001de16 <lockScheduler()>
c001e87c:	c7 04 24 ed c2 02 c0 	mov    DWORD PTR [esp],0xc002c2ed
c001e883:	e8 ec 46 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e888:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e88c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e891:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e899:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e89c:	5a                   	pop    edx
c001e89d:	59                   	pop    ecx
c001e89e:	50                   	push   eax
c001e89f:	68 f0 19 03 c0       	push   0xc00319f0
c001e8a4:	e8 87 a2 00 00       	call   c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ae:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8b5:	c7 04 24 07 c3 02 c0 	mov    DWORD PTR [esp],0xc002c307
c001e8bc:	e8 b3 46 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e8c1:	83 c4 10             	add    esp,0x10
c001e8c4:	a1 c8 19 03 c0       	mov    eax,ds:0xc00319c8
c001e8c9:	85 c0                	test   eax,eax
c001e8cb:	74 5a                	je     c001e927 <terminateTask(int)+0xce>
c001e8cd:	83 ec 0c             	sub    esp,0xc
c001e8d0:	68 21 c3 02 c0       	push   0xc002c321
c001e8d5:	e8 9a 46 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e8da:	58                   	pop    eax
c001e8db:	c6 05 cc 19 03 c0 01 	mov    BYTE PTR ds:0xc00319cc,0x1
c001e8e2:	ff 35 c8 19 03 c0    	push   DWORD PTR ds:0xc00319c8
c001e8e8:	e8 41 fb ff ff       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c001e8ed:	c7 04 24 3b c3 02 c0 	mov    DWORD PTR [esp],0xc002c33b
c001e8f4:	e8 7b 46 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e8f9:	83 c4 10             	add    esp,0x10
c001e8fc:	e8 17 f5 ff ff       	call   c001de18 <unlockScheduler()>
c001e901:	e8 d1 f8 ff ff       	call   c001e1d7 <unlockStuff()>
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	68 73 c3 02 c0       	push   0xc002c373
c001e90e:	e8 61 46 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e913:	83 c4 10             	add    esp,0x10
c001e916:	e8 fb f4 ff ff       	call   c001de16 <lockScheduler()>
c001e91b:	e8 32 f8 ff ff       	call   c001e152 <schedule()>
c001e920:	e8 f3 f4 ff ff       	call   c001de18 <unlockScheduler()>
c001e925:	eb ef                	jmp    c001e916 <terminateTask(int)+0xbd>
c001e927:	83 ec 0c             	sub    esp,0xc
c001e92a:	68 55 c3 02 c0       	push   0xc002c355
c001e92f:	e8 40 46 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	eb c3                	jmp    c001e8fc <terminateTask(int)+0xa3>

c001e939 <Thr::terminateFromIRQ(int)>:
c001e939:	83 ec 18             	sub    esp,0x18
c001e93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e940:	e8 14 ff ff ff       	call   c001e859 <terminateTask(int)>
c001e945:	90                   	nop

c001e946 <Semaphore::release()>:
c001e946:	83 ec 0c             	sub    esp,0xc
c001e949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94d:	e8 eb f4 ff ff       	call   c001de3d <lockStuff()>
c001e952:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e955:	85 d2                	test   edx,edx
c001e957:	74 1a                	je     c001e973 <Semaphore::release()+0x2d>
c001e959:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e962:	52                   	push   edx
c001e963:	e8 c6 fa ff ff       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	83 c4 0c             	add    esp,0xc
c001e96e:	e9 64 f8 ff ff       	jmp    c001e1d7 <unlockStuff()>
c001e973:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e976:	83 c4 0c             	add    esp,0xc
c001e979:	e9 59 f8 ff ff       	jmp    c001e1d7 <unlockStuff()>

c001e97e <__static_initialization_and_destruction_0(int, int)>:
c001e97e:	83 ec 0c             	sub    esp,0xc
c001e981:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e986:	0f 85 88 00 00 00    	jne    c001ea14 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e98c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e994:	75 7e                	jne    c001ea14 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e996:	83 ec 0c             	sub    esp,0xc
c001e999:	68 08 1a 03 c0       	push   0xc0031a08
c001e99e:	e8 3d a3 00 00       	call   c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	83 ec 04             	sub    esp,0x4
c001e9a9:	68 d0 d3 02 c0       	push   0xc002d3d0
c001e9ae:	68 08 1a 03 c0       	push   0xc0031a08
c001e9b3:	68 a0 8c 02 c0       	push   0xc0028ca0
c001e9b8:	e8 51 44 ff ff       	call   c0012e0e <__cxa_atexit>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	83 ec 0c             	sub    esp,0xc
c001e9c3:	68 fc 19 03 c0       	push   0xc00319fc
c001e9c8:	e8 13 a3 00 00       	call   c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	83 ec 04             	sub    esp,0x4
c001e9d3:	68 d0 d3 02 c0       	push   0xc002d3d0
c001e9d8:	68 fc 19 03 c0       	push   0xc00319fc
c001e9dd:	68 a0 8c 02 c0       	push   0xc0028ca0
c001e9e2:	e8 27 44 ff ff       	call   c0012e0e <__cxa_atexit>
c001e9e7:	83 c4 10             	add    esp,0x10
c001e9ea:	83 ec 0c             	sub    esp,0xc
c001e9ed:	68 f0 19 03 c0       	push   0xc00319f0
c001e9f2:	e8 e9 a2 00 00       	call   c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	83 ec 04             	sub    esp,0x4
c001e9fd:	68 d0 d3 02 c0       	push   0xc002d3d0
c001ea02:	68 f0 19 03 c0       	push   0xc00319f0
c001ea07:	68 a0 8c 02 c0       	push   0xc0028ca0
c001ea0c:	e8 fd 43 ff ff       	call   c0012e0e <__cxa_atexit>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	90                   	nop
c001ea15:	83 c4 0c             	add    esp,0xc
c001ea18:	c3                   	ret    

c001ea19 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea19:	83 ec 0c             	sub    esp,0xc
c001ea1c:	83 ec 08             	sub    esp,0x8
c001ea1f:	68 ff ff 00 00       	push   0xffff
c001ea24:	6a 01                	push   0x1
c001ea26:	e8 53 ff ff ff       	call   c001e97e <__static_initialization_and_destruction_0(int, int)>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	83 c4 0c             	add    esp,0xc
c001ea31:	c3                   	ret    

c001ea32 <Vm::inbv(unsigned short)>:
c001ea32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea36:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea3b:	75 06                	jne    c001ea43 <Vm::inbv(unsigned short)+0x11>
c001ea3d:	a0 4c 1a 03 c0       	mov    al,ds:0xc0031a4c
c001ea42:	c3                   	ret    
c001ea43:	ec                   	in     al,dx
c001ea44:	c3                   	ret    

c001ea45 <Vm::outbv(unsigned short, unsigned char)>:
c001ea45:	53                   	push   ebx
c001ea46:	83 ec 08             	sub    esp,0x8
c001ea49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea51:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea56:	75 38                	jne    c001ea90 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea58:	0f b6 c3             	movzx  eax,bl
c001ea5b:	51                   	push   ecx
c001ea5c:	51                   	push   ecx
c001ea5d:	50                   	push   eax
c001ea5e:	68 37 c6 02 c0       	push   0xc002c637
c001ea63:	e8 0c 45 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ea68:	8b 15 4c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a4c
c001ea6e:	83 c4 10             	add    esp,0x10
c001ea71:	8d 42 01             	lea    eax,[edx+0x1]
c001ea74:	88 9a 60 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce5a0],bl
c001ea7a:	a3 4c 1a 03 c0       	mov    ds:0xc0031a4c,eax
c001ea7f:	83 f8 20             	cmp    eax,0x20
c001ea82:	75 0f                	jne    c001ea93 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea84:	c7 05 4c 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031a4c,0x1f
c001ea8e:	eb 03                	jmp    c001ea93 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ea90:	88 d8                	mov    al,bl
c001ea92:	ee                   	out    dx,al
c001ea93:	83 c4 08             	add    esp,0x8
c001ea96:	5b                   	pop    ebx
c001ea97:	c3                   	ret    

c001ea98 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ea98:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea9d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eaa2:	c1 e0 04             	shl    eax,0x4
c001eaa5:	01 d0                	add    eax,edx
c001eaa7:	c3                   	ret    

c001eaa8 <Vm::getSegment(unsigned int)>:
c001eaa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaac:	c1 e8 10             	shr    eax,0x10
c001eaaf:	c3                   	ret    

c001eab0 <Vm::getOffset(unsigned int)>:
c001eab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab4:	c3                   	ret    

c001eab5 <Vm::mainloop2()>:
c001eab5:	83 ec 0c             	sub    esp,0xc
c001eab8:	e8 59 f3 ff ff       	call   c001de16 <lockScheduler()>
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	c6 05 45 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a45,0x1
c001eac7:	6a 02                	push   0x2
c001eac9:	e8 9c f7 ff ff       	call   c001e26a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ead3:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ead7:	52                   	push   edx
c001ead8:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eadc:	52                   	push   edx
c001eadd:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eae1:	52                   	push   edx
c001eae2:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eae6:	50                   	push   eax
c001eae7:	e8 0e 18 fe ff       	call   c00002fa <goToVM86>
c001eaec:	83 c4 2c             	add    esp,0x2c
c001eaef:	c3                   	ret    

c001eaf0 <Vm::mainVm8086Loop(void*)>:
c001eaf0:	83 ec 0c             	sub    esp,0xc
c001eaf3:	e8 20 f3 ff ff       	call   c001de18 <unlockScheduler()>
c001eaf8:	83 c4 0c             	add    esp,0xc
c001eafb:	eb b8                	jmp    c001eab5 <Vm::mainloop2()>

c001eafd <Vm::mainloop3(unsigned long)>:
c001eafd:	53                   	push   ebx
c001eafe:	83 ec 08             	sub    esp,0x8
c001eb01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb05:	e8 0c f3 ff ff       	call   c001de16 <lockScheduler()>
c001eb0a:	83 ec 0c             	sub    esp,0xc
c001eb0d:	89 1d 40 1a 03 c0    	mov    DWORD PTR ds:0xc0031a40,ebx
c001eb13:	6a 02                	push   0x2
c001eb15:	c6 05 44 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a44,0x1
c001eb1c:	e8 49 f7 ff ff       	call   c001e26a <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb21:	83 c4 18             	add    esp,0x18
c001eb24:	5b                   	pop    ebx
c001eb25:	eb 8e                	jmp    c001eab5 <Vm::mainloop2()>

c001eb27 <Vm::initialise8086()>:
c001eb27:	83 ec 0c             	sub    esp,0xc
c001eb2a:	68 80 00 00 00       	push   0x80
c001eb2f:	6a 00                	push   0x0
c001eb31:	68 f0 ea 01 c0       	push   0xc001eaf0
c001eb36:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c001eb3c:	e8 07 f4 ff ff       	call   c001df48 <Process::createThread(void (*)(void*), void*, int)>
c001eb41:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb48:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c001eb4d:	68 00 01 00 00       	push   0x100
c001eb52:	a1 14 1a 03 c0       	mov    eax,ds:0xc0031a14
c001eb57:	6a 00                	push   0x0
c001eb59:	6a 00                	push   0x0
c001eb5b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb61:	e8 be 3a ff ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb66:	83 c4 2c             	add    esp,0x2c
c001eb69:	c3                   	ret    

c001eb6a <Vm::finish8086()>:
c001eb6a:	53                   	push   ebx
c001eb6b:	83 ec 08             	sub    esp,0x8
c001eb6e:	e8 a3 f2 ff ff       	call   c001de16 <lockScheduler()>
c001eb73:	80 3d 44 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a44,0x0
c001eb7a:	75 0c                	jne    c001eb88 <Vm::finish8086()+0x1e>
c001eb7c:	e8 d1 f5 ff ff       	call   c001e152 <schedule()>
c001eb81:	e8 92 f2 ff ff       	call   c001de18 <unlockScheduler()>
c001eb86:	eb e6                	jmp    c001eb6e <Vm::finish8086()+0x4>
c001eb88:	83 ec 0c             	sub    esp,0xc
c001eb8b:	8b 1d 40 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a40
c001eb91:	ff 35 48 1a 03 c0    	push   DWORD PTR ds:0xc0031a48
c001eb97:	c6 05 44 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a44,0x0
c001eb9e:	e8 8b f8 ff ff       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c001eba3:	e8 70 f2 ff ff       	call   c001de18 <unlockScheduler()>
c001eba8:	89 d8                	mov    eax,ebx
c001ebaa:	83 c4 18             	add    esp,0x18
c001ebad:	5b                   	pop    ebx
c001ebae:	c3                   	ret    

c001ebaf <Vm::getOutput8086(unsigned char*)>:
c001ebaf:	83 ec 10             	sub    esp,0x10
c001ebb2:	ff 35 4c 1a 03 c0    	push   DWORD PTR ds:0xc0031a4c
c001ebb8:	68 60 1a 03 c0       	push   0xc0031a60
c001ebbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebc1:	e8 7e 1b fe ff       	call   c0000744 <memcpy>
c001ebc6:	a1 4c 1a 03 c0       	mov    eax,ds:0xc0031a4c
c001ebcb:	c7 05 4c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a4c,0x0
c001ebd5:	83 c4 1c             	add    esp,0x1c
c001ebd8:	c3                   	ret    

c001ebd9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ebd9:	55                   	push   ebp
c001ebda:	57                   	push   edi
c001ebdb:	56                   	push   esi
c001ebdc:	53                   	push   ebx
c001ebdd:	83 ec 2c             	sub    esp,0x2c
c001ebe0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ebe4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ebe8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ebec:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebf0:	e8 21 f2 ff ff       	call   c001de16 <lockScheduler()>
c001ebf5:	a0 45 1a 03 c0       	mov    al,ds:0xc0031a45
c001ebfa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebfe:	84 c0                	test   al,al
c001ec00:	75 0c                	jne    c001ec0e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec02:	e8 4b f5 ff ff       	call   c001e152 <schedule()>
c001ec07:	e8 0c f2 ff ff       	call   c001de18 <unlockScheduler()>
c001ec0c:	eb e2                	jmp    c001ebf0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec0e:	a1 48 1a 03 c0       	mov    eax,ds:0xc0031a48
c001ec13:	c7 05 4c 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a4c,0x0
c001ec1d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec21:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec25:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec29:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec2d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec31:	50                   	push   eax
c001ec32:	6a 20                	push   0x20
c001ec34:	6a 00                	push   0x0
c001ec36:	68 60 1a 03 c0       	push   0xc0031a60
c001ec3b:	e8 38 1b fe ff       	call   c0000778 <memset>
c001ec40:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec47:	e8 f7 0b ff ff       	call   c000f843 <malloc>
c001ec4c:	83 c4 0c             	add    esp,0xc
c001ec4f:	89 c7                	mov    edi,eax
c001ec51:	ff 35 14 1a 03 c0    	push   DWORD PTR ds:0xc0031a14
c001ec57:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec5b:	50                   	push   eax
c001ec5c:	e8 6b 48 ff ff       	call   c00134cc <File::File(char const*, Process*)>
c001ec61:	83 c4 10             	add    esp,0x10
c001ec64:	85 ff                	test   edi,edi
c001ec66:	75 0a                	jne    c001ec72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	68 53 c6 02 c0       	push   0xc002c653
c001ec70:	eb 27                	jmp    c001ec99 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ec72:	50                   	push   eax
c001ec73:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ec77:	50                   	push   eax
c001ec78:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec7c:	50                   	push   eax
c001ec7d:	57                   	push   edi
c001ec7e:	e8 59 4b ff ff       	call   c00137dc <File::stat(unsigned long long*, bool*)>
c001ec83:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ec88:	83 c4 10             	add    esp,0x10
c001ec8b:	89 e8                	mov    eax,ebp
c001ec8d:	84 c0                	test   al,al
c001ec8f:	74 19                	je     c001ecaa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ec91:	83 ec 0c             	sub    esp,0xc
c001ec94:	68 67 c6 02 c0       	push   0xc002c667
c001ec99:	e8 83 b9 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001ec9e:	31 ed                	xor    ebp,ebp
c001eca0:	e8 73 f1 ff ff       	call   c001de18 <unlockScheduler()>
c001eca5:	83 c4 10             	add    esp,0x10
c001eca8:	eb 75                	jmp    c001ed1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecaa:	50                   	push   eax
c001ecab:	50                   	push   eax
c001ecac:	6a 01                	push   0x1
c001ecae:	57                   	push   edi
c001ecaf:	e8 7c 48 ff ff       	call   c0013530 <File::open(FileOpenMode)>
c001ecb4:	83 c4 10             	add    esp,0x10
c001ecb7:	85 c0                	test   eax,eax
c001ecb9:	74 17                	je     c001ecd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	68 80 c6 02 c0       	push   0xc002c680
c001ecc3:	e8 59 b9 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001ecc8:	e8 4b f1 ff ff       	call   c001de18 <unlockScheduler()>
c001eccd:	83 c4 10             	add    esp,0x10
c001ecd0:	eb 4d                	jmp    c001ed1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecd2:	0f b7 f6             	movzx  esi,si
c001ecd5:	50                   	push   eax
c001ecd6:	0f b7 db             	movzx  ebx,bx
c001ecd9:	50                   	push   eax
c001ecda:	56                   	push   esi
c001ecdb:	53                   	push   ebx
c001ecdc:	e8 b7 fd ff ff       	call   c001ea98 <Vm::realToLinear(unsigned short, unsigned short)>
c001ece1:	5a                   	pop    edx
c001ece2:	8b 17                	mov    edx,DWORD PTR [edi]
c001ece4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ece8:	51                   	push   ecx
c001ece9:	50                   	push   eax
c001ecea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ecf2:	57                   	push   edi
c001ecf3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ecf6:	83 c4 14             	add    esp,0x14
c001ecf9:	57                   	push   edi
c001ecfa:	e8 8f 48 ff ff       	call   c001358e <File::close()>
c001ecff:	c6 05 45 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a45,0x0
c001ed06:	e8 0d f1 ff ff       	call   c001de18 <unlockScheduler()>
c001ed0b:	59                   	pop    ecx
c001ed0c:	ff 35 48 1a 03 c0    	push   DWORD PTR ds:0xc0031a48
c001ed12:	e8 17 f7 ff ff       	call   c001e42e <unblockTask(ThreadControlBlock*)>
c001ed17:	83 c4 10             	add    esp,0x10
c001ed1a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed1f:	83 c4 2c             	add    esp,0x2c
c001ed22:	89 e8                	mov    eax,ebp
c001ed24:	5b                   	pop    ebx
c001ed25:	5e                   	pop    esi
c001ed26:	5f                   	pop    edi
c001ed27:	5d                   	pop    ebp
c001ed28:	c3                   	ret    

c001ed29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed29:	57                   	push   edi
c001ed2a:	56                   	push   esi
c001ed2b:	53                   	push   ebx
c001ed2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed38:	83 e8 06             	sub    eax,0x6
c001ed3b:	0f b7 c0             	movzx  eax,ax
c001ed3e:	50                   	push   eax
c001ed3f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed44:	50                   	push   eax
c001ed45:	e8 4e fd ff ff       	call   c001ea98 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed4a:	5a                   	pop    edx
c001ed4b:	5e                   	pop    esi
c001ed4c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed4f:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed52:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed58:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed5b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed5e:	83 c2 02             	add    edx,0x2
c001ed61:	66 89 10             	mov    WORD PTR [eax],dx
c001ed64:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed67:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed6b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ed6e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ed72:	89 d6                	mov    esi,edx
c001ed74:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ed7a:	66 81 e6 ff fd       	and    si,0xfdff
c001ed7f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ed83:	74 07                	je     c001ed8c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ed85:	89 d6                	mov    esi,edx
c001ed87:	66 81 ce 00 02       	or     si,0x200
c001ed8c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ed90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed95:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ed99:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001eda1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001eda4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edac:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001edaf:	5b                   	pop    ebx
c001edb0:	5e                   	pop    esi
c001edb1:	5f                   	pop    edi
c001edb2:	c3                   	ret    

c001edb3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001edb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edbd:	c1 e0 04             	shl    eax,0x4
c001edc0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edc3:	c3                   	ret    

c001edc4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edc4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edc9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edce:	c1 e0 04             	shl    eax,0x4
c001edd1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001edd5:	c3                   	ret    

c001edd6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001edd6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eddb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ede0:	c1 e0 04             	shl    eax,0x4
c001ede3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ede6:	c3                   	ret    

c001ede7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ede7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edf1:	c1 e0 04             	shl    eax,0x4
c001edf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001edf8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001edfb:	c3                   	ret    

c001edfc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001edfc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee01:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee06:	c1 e0 04             	shl    eax,0x4
c001ee09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee0d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee11:	c3                   	ret    

c001ee12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee1c:	c1 e0 04             	shl    eax,0x4
c001ee1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee23:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee26:	c3                   	ret    

c001ee27 <Vm::faultHandler(regs*)>:
c001ee27:	55                   	push   ebp
c001ee28:	57                   	push   edi
c001ee29:	56                   	push   esi
c001ee2a:	53                   	push   ebx
c001ee2b:	83 ec 1c             	sub    esp,0x1c
c001ee2e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee32:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee35:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee38:	0f b7 c1             	movzx  eax,cx
c001ee3b:	50                   	push   eax
c001ee3c:	0f b7 c3             	movzx  eax,bx
c001ee3f:	c1 e3 04             	shl    ebx,0x4
c001ee42:	50                   	push   eax
c001ee43:	e8 50 fc ff ff       	call   c001ea98 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee48:	5a                   	pop    edx
c001ee49:	89 c5                	mov    ebp,eax
c001ee4b:	5e                   	pop    esi
c001ee4c:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee50:	50                   	push   eax
c001ee51:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee55:	50                   	push   eax
c001ee56:	e8 3d fc ff ff       	call   c001ea98 <Vm::realToLinear(unsigned short, unsigned short)>
c001ee5b:	01 cb                	add    ebx,ecx
c001ee5d:	89 c6                	mov    esi,eax
c001ee5f:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee63:	50                   	push   eax
c001ee64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee68:	50                   	push   eax
c001ee69:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee6d:	50                   	push   eax
c001ee6e:	55                   	push   ebp
c001ee6f:	53                   	push   ebx
c001ee70:	b3 06                	mov    bl,0x6
c001ee72:	68 99 c6 02 c0       	push   0xc002c699
c001ee77:	e8 f8 40 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ee7c:	83 c4 20             	add    esp,0x20
c001ee7f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ee84:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ee89:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee8d:	3c 9d                	cmp    al,0x9d
c001ee8f:	0f 84 d7 02 00 00    	je     c001f16c <Vm::faultHandler(regs*)+0x345>
c001ee95:	0f 87 a3 00 00 00    	ja     c001ef3e <Vm::faultHandler(regs*)+0x117>
c001ee9b:	3c 66                	cmp    al,0x66
c001ee9d:	0f 84 15 02 00 00    	je     c001f0b8 <Vm::faultHandler(regs*)+0x291>
c001eea3:	77 5f                	ja     c001ef04 <Vm::faultHandler(regs*)+0xdd>
c001eea5:	3c 36                	cmp    al,0x36
c001eea7:	0f 84 f1 01 00 00    	je     c001f09e <Vm::faultHandler(regs*)+0x277>
c001eead:	77 28                	ja     c001eed7 <Vm::faultHandler(regs*)+0xb0>
c001eeaf:	3c 26                	cmp    al,0x26
c001eeb1:	0f 84 99 01 00 00    	je     c001f050 <Vm::faultHandler(regs*)+0x229>
c001eeb7:	3c 2e                	cmp    al,0x2e
c001eeb9:	0f 85 3b 07 00 00    	jne    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001eebf:	83 ec 0c             	sub    esp,0xc
c001eec2:	31 db                	xor    ebx,ebx
c001eec4:	68 ae c6 02 c0       	push   0xc002c6ae
c001eec9:	e8 a6 40 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001eece:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eed1:	83 c4 10             	add    esp,0x10
c001eed4:	45                   	inc    ebp
c001eed5:	eb b2                	jmp    c001ee89 <Vm::faultHandler(regs*)+0x62>
c001eed7:	3c 64                	cmp    al,0x64
c001eed9:	0f 84 8b 01 00 00    	je     c001f06a <Vm::faultHandler(regs*)+0x243>
c001eedf:	0f 87 9f 01 00 00    	ja     c001f084 <Vm::faultHandler(regs*)+0x25d>
c001eee5:	3c 3e                	cmp    al,0x3e
c001eee7:	0f 85 0d 07 00 00    	jne    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001eeed:	83 ec 0c             	sub    esp,0xc
c001eef0:	b3 01                	mov    bl,0x1
c001eef2:	68 b2 c6 02 c0       	push   0xc002c6b2
c001eef7:	e8 78 40 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001eefc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	eb d0                	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001ef04:	3c 6d                	cmp    al,0x6d
c001ef06:	0f 84 af 03 00 00    	je     c001f2bb <Vm::faultHandler(regs*)+0x494>
c001ef0c:	77 15                	ja     c001ef23 <Vm::faultHandler(regs*)+0xfc>
c001ef0e:	3c 67                	cmp    al,0x67
c001ef10:	0f 84 bf 01 00 00    	je     c001f0d5 <Vm::faultHandler(regs*)+0x2ae>
c001ef16:	3c 6c                	cmp    al,0x6c
c001ef18:	0f 84 3f 03 00 00    	je     c001f25d <Vm::faultHandler(regs*)+0x436>
c001ef1e:	e9 d7 06 00 00       	jmp    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001ef23:	3c 6f                	cmp    al,0x6f
c001ef25:	0f 84 a4 04 00 00    	je     c001f3cf <Vm::faultHandler(regs*)+0x5a8>
c001ef2b:	0f 82 11 04 00 00    	jb     c001f342 <Vm::faultHandler(regs*)+0x51b>
c001ef31:	3c 9c                	cmp    al,0x9c
c001ef33:	0f 84 ba 01 00 00    	je     c001f0f3 <Vm::faultHandler(regs*)+0x2cc>
c001ef39:	e9 bc 06 00 00       	jmp    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001ef3e:	3c ec                	cmp    al,0xec
c001ef40:	0f 84 24 06 00 00    	je     c001f56a <Vm::faultHandler(regs*)+0x743>
c001ef46:	0f 87 93 00 00 00    	ja     c001efdf <Vm::faultHandler(regs*)+0x1b8>
c001ef4c:	3c e4                	cmp    al,0xe4
c001ef4e:	0f 84 5c 05 00 00    	je     c001f4b0 <Vm::faultHandler(regs*)+0x689>
c001ef54:	77 6a                	ja     c001efc0 <Vm::faultHandler(regs*)+0x199>
c001ef56:	3c cd                	cmp    al,0xcd
c001ef58:	0f 84 7e 02 00 00    	je     c001f1dc <Vm::faultHandler(regs*)+0x3b5>
c001ef5e:	3c cf                	cmp    al,0xcf
c001ef60:	0f 85 94 06 00 00    	jne    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001ef66:	83 ec 0c             	sub    esp,0xc
c001ef69:	68 f6 c6 02 c0       	push   0xc002c6f6
c001ef6e:	e8 01 40 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ef73:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001ef76:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001ef79:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ef7d:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ef80:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ef84:	0d 00 02 02 00       	or     eax,0x20200
c001ef89:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ef8c:	56                   	push   esi
c001ef8d:	53                   	push   ebx
c001ef8e:	52                   	push   edx
c001ef8f:	68 fc c6 02 c0       	push   0xc002c6fc
c001ef94:	e8 db 3f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001ef99:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001ef9d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efa3:	66 c1 e8 09          	shr    ax,0x9
c001efa7:	83 e0 01             	and    eax,0x1
c001efaa:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efad:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efb0:	83 c0 06             	add    eax,0x6
c001efb3:	25 ff ff 00 00       	and    eax,0xffff
c001efb8:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efbb:	e9 95 02 00 00       	jmp    c001f255 <Vm::faultHandler(regs*)+0x42e>
c001efc0:	3c e6                	cmp    al,0xe6
c001efc2:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001efc6:	0f 84 4e 05 00 00    	je     c001f51a <Vm::faultHandler(regs*)+0x6f3>
c001efcc:	0f 82 0a 05 00 00    	jb     c001f4dc <Vm::faultHandler(regs*)+0x6b5>
c001efd2:	3c e7                	cmp    al,0xe7
c001efd4:	0f 84 69 05 00 00    	je     c001f543 <Vm::faultHandler(regs*)+0x71c>
c001efda:	e9 1b 06 00 00       	jmp    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001efdf:	3c ef                	cmp    al,0xef
c001efe1:	0f 84 e6 05 00 00    	je     c001f5cd <Vm::faultHandler(regs*)+0x7a6>
c001efe7:	77 37                	ja     c001f020 <Vm::faultHandler(regs*)+0x1f9>
c001efe9:	3c ed                	cmp    al,0xed
c001efeb:	0f 84 a3 05 00 00    	je     c001f594 <Vm::faultHandler(regs*)+0x76d>
c001eff1:	3c ee                	cmp    al,0xee
c001eff3:	0f 85 01 06 00 00    	jne    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001eff9:	52                   	push   edx
c001effa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001effd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f000:	68 97 c7 02 c0       	push   0xc002c797
c001f005:	e8 6a 3f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f00a:	59                   	pop    ecx
c001f00b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f00f:	5b                   	pop    ebx
c001f010:	50                   	push   eax
c001f011:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f015:	50                   	push   eax
c001f016:	e8 2a fa ff ff       	call   c001ea45 <Vm::outbv(unsigned short, unsigned char)>
c001f01b:	e9 a5 05 00 00       	jmp    c001f5c5 <Vm::faultHandler(regs*)+0x79e>
c001f020:	3c fa                	cmp    al,0xfa
c001f022:	0f 84 f7 01 00 00    	je     c001f21f <Vm::faultHandler(regs*)+0x3f8>
c001f028:	3c fb                	cmp    al,0xfb
c001f02a:	0f 84 0a 02 00 00    	je     c001f23a <Vm::faultHandler(regs*)+0x413>
c001f030:	3c f3                	cmp    al,0xf3
c001f032:	0f 85 c2 05 00 00    	jne    c001f5fa <Vm::faultHandler(regs*)+0x7d3>
c001f038:	83 ec 0c             	sub    esp,0xc
c001f03b:	68 cf c6 02 c0       	push   0xc002c6cf
c001f040:	e8 2f 3f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f045:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f048:	83 c4 10             	add    esp,0x10
c001f04b:	e9 84 fe ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	b3 02                	mov    bl,0x2
c001f055:	68 aa c6 02 c0       	push   0xc002c6aa
c001f05a:	e8 15 3f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f05f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f062:	83 c4 10             	add    esp,0x10
c001f065:	e9 6a fe ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	b3 03                	mov    bl,0x3
c001f06f:	68 b6 c6 02 c0       	push   0xc002c6b6
c001f074:	e8 fb 3e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f079:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f07c:	83 c4 10             	add    esp,0x10
c001f07f:	e9 50 fe ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	b3 04                	mov    bl,0x4
c001f089:	68 ba c6 02 c0       	push   0xc002c6ba
c001f08e:	e8 e1 3e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f093:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f096:	83 c4 10             	add    esp,0x10
c001f099:	e9 36 fe ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f09e:	83 ec 0c             	sub    esp,0xc
c001f0a1:	b3 05                	mov    bl,0x5
c001f0a3:	68 be c6 02 c0       	push   0xc002c6be
c001f0a8:	e8 c7 3e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f0ad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0b0:	83 c4 10             	add    esp,0x10
c001f0b3:	e9 1c fe ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f0b8:	83 ec 0c             	sub    esp,0xc
c001f0bb:	68 c2 c6 02 c0       	push   0xc002c6c2
c001f0c0:	e8 af 3e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f0c5:	83 c4 10             	add    esp,0x10
c001f0c8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0cb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0d0:	e9 ff fd ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f0d5:	50                   	push   eax
c001f0d6:	50                   	push   eax
c001f0d7:	6a 01                	push   0x1
c001f0d9:	68 c7 c6 02 c0       	push   0xc002c6c7
c001f0de:	e8 91 3e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f0ee:	e9 e1 fd ff ff       	jmp    c001eed4 <Vm::faultHandler(regs*)+0xad>
c001f0f3:	83 ec 0c             	sub    esp,0xc
c001f0f6:	68 d5 c6 02 c0       	push   0xc002c6d5
c001f0fb:	e8 74 3e ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f100:	83 c4 10             	add    esp,0x10
c001f103:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f106:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f10b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f10e:	74 2f                	je     c001f13f <Vm::faultHandler(regs*)+0x318>
c001f110:	83 ea 04             	sub    edx,0x4
c001f113:	25 ff 0d 00 00       	and    eax,0xdff
c001f118:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f11e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f121:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f124:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f12a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f12e:	0f 84 bf 04 00 00    	je     c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f134:	80 cc 02             	or     ah,0x2
c001f137:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f13a:	e9 b4 04 00 00       	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f13f:	83 ea 02             	sub    edx,0x2
c001f142:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f148:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f14b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f14f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f155:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f159:	74 05                	je     c001f160 <Vm::faultHandler(regs*)+0x339>
c001f15b:	80 cc 02             	or     ah,0x2
c001f15e:	eb 03                	jmp    c001f163 <Vm::faultHandler(regs*)+0x33c>
c001f160:	80 e4 fd             	and    ah,0xfd
c001f163:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f167:	e9 87 04 00 00       	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	68 dc c6 02 c0       	push   0xc002c6dc
c001f174:	e8 fb 3d ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f179:	83 c4 10             	add    esp,0x10
c001f17c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f181:	74 28                	je     c001f1ab <Vm::faultHandler(regs*)+0x384>
c001f183:	8b 06                	mov    eax,DWORD PTR [esi]
c001f185:	25 ff 0d 00 00       	and    eax,0xdff
c001f18a:	0d 00 02 02 00       	or     eax,0x20200
c001f18f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f192:	8b 06                	mov    eax,DWORD PTR [esi]
c001f194:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f19a:	c1 e8 09             	shr    eax,0x9
c001f19d:	83 e0 01             	and    eax,0x1
c001f1a0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1a3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1a6:	83 c0 04             	add    eax,0x4
c001f1a9:	eb 24                	jmp    c001f1cf <Vm::faultHandler(regs*)+0x3a8>
c001f1ab:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1ae:	0d 00 02 02 00       	or     eax,0x20200
c001f1b3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1b6:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1bf:	66 c1 e8 09          	shr    ax,0x9
c001f1c3:	83 e0 01             	and    eax,0x1
c001f1c6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1c9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1cc:	83 c0 02             	add    eax,0x2
c001f1cf:	25 ff ff 00 00       	and    eax,0xffff
c001f1d4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f1d7:	e9 17 04 00 00       	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f1dc:	53                   	push   ebx
c001f1dd:	53                   	push   ebx
c001f1de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1e2:	50                   	push   eax
c001f1e3:	68 e2 c6 02 c0       	push   0xc002c6e2
c001f1e8:	e8 87 3d ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f1ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1f1:	83 c4 10             	add    esp,0x10
c001f1f4:	3c ee                	cmp    al,0xee
c001f1f6:	75 10                	jne    c001f208 <Vm::faultHandler(regs*)+0x3e1>
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1fe:	e8 fa f8 ff ff       	call   c001eafd <Vm::mainloop3(unsigned long)>
c001f203:	e9 c0 03 00 00       	jmp    c001f5c8 <Vm::faultHandler(regs*)+0x7a1>
c001f208:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	53                   	push   ebx
c001f210:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f214:	53                   	push   ebx
c001f215:	55                   	push   ebp
c001f216:	50                   	push   eax
c001f217:	57                   	push   edi
c001f218:	e8 0c fb ff ff       	call   c001ed29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f21d:	eb 36                	jmp    c001f255 <Vm::faultHandler(regs*)+0x42e>
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	68 ec c6 02 c0       	push   0xc002c6ec
c001f227:	e8 48 3d ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f22c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f231:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f235:	e9 8b 03 00 00       	jmp    c001f5c5 <Vm::faultHandler(regs*)+0x79e>
c001f23a:	83 ec 0c             	sub    esp,0xc
c001f23d:	68 f1 c6 02 c0       	push   0xc002c6f1
c001f242:	e8 2d 3d ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f247:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f24c:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f250:	e9 70 03 00 00       	jmp    c001f5c5 <Vm::faultHandler(regs*)+0x79e>
c001f255:	83 c4 20             	add    esp,0x20
c001f258:	e9 99 03 00 00       	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x7cf>
c001f25d:	83 ec 0c             	sub    esp,0xc
c001f260:	68 2f c7 02 c0       	push   0xc002c72f
c001f265:	e8 0a 3d ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f26a:	83 c4 10             	add    esp,0x10
c001f26d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f270:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f275:	74 0d                	je     c001f284 <Vm::faultHandler(regs*)+0x45d>
c001f277:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f27e:	0f 87 9e 01 00 00    	ja     c001f422 <Vm::faultHandler(regs*)+0x5fb>
c001f284:	83 ec 0c             	sub    esp,0xc
c001f287:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f28b:	0f b7 db             	movzx  ebx,bx
c001f28e:	50                   	push   eax
c001f28f:	e8 9e f7 ff ff       	call   c001ea32 <Vm::inbv(unsigned short)>
c001f294:	83 c4 0c             	add    esp,0xc
c001f297:	0f b6 c0             	movzx  eax,al
c001f29a:	50                   	push   eax
c001f29b:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f29f:	50                   	push   eax
c001f2a0:	53                   	push   ebx
c001f2a1:	e8 41 fb ff ff       	call   c001ede7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2a6:	83 c4 10             	add    esp,0x10
c001f2a9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2ac:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2b0:	74 03                	je     c001f2b5 <Vm::faultHandler(regs*)+0x48e>
c001f2b2:	48                   	dec    eax
c001f2b3:	eb 01                	jmp    c001f2b6 <Vm::faultHandler(regs*)+0x48f>
c001f2b5:	40                   	inc    eax
c001f2b6:	0f b7 c0             	movzx  eax,ax
c001f2b9:	eb 7f                	jmp    c001f33a <Vm::faultHandler(regs*)+0x513>
c001f2bb:	83 ec 0c             	sub    esp,0xc
c001f2be:	68 61 c7 02 c0       	push   0xc002c761
c001f2c3:	e8 ac 3c ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f2c8:	83 c4 10             	add    esp,0x10
c001f2cb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2d3:	74 0d                	je     c001f2e2 <Vm::faultHandler(regs*)+0x4bb>
c001f2d5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2dc:	0f 87 40 01 00 00    	ja     c001f422 <Vm::faultHandler(regs*)+0x5fb>
c001f2e2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f2e5:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f2e9:	0f b7 db             	movzx  ebx,bx
c001f2ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2f1:	74 20                	je     c001f313 <Vm::faultHandler(regs*)+0x4ec>
c001f2f3:	ed                   	in     eax,dx
c001f2f4:	51                   	push   ecx
c001f2f5:	50                   	push   eax
c001f2f6:	56                   	push   esi
c001f2f7:	53                   	push   ebx
c001f2f8:	e8 15 fb ff ff       	call   c001ee12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f2fd:	83 c4 10             	add    esp,0x10
c001f300:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f303:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f307:	74 05                	je     c001f30e <Vm::faultHandler(regs*)+0x4e7>
c001f309:	83 e8 04             	sub    eax,0x4
c001f30c:	eb 27                	jmp    c001f335 <Vm::faultHandler(regs*)+0x50e>
c001f30e:	83 c0 04             	add    eax,0x4
c001f311:	eb 22                	jmp    c001f335 <Vm::faultHandler(regs*)+0x50e>
c001f313:	66 ed                	in     ax,dx
c001f315:	0f b7 c0             	movzx  eax,ax
c001f318:	52                   	push   edx
c001f319:	50                   	push   eax
c001f31a:	56                   	push   esi
c001f31b:	53                   	push   ebx
c001f31c:	e8 db fa ff ff       	call   c001edfc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f321:	83 c4 10             	add    esp,0x10
c001f324:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f327:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f32b:	74 05                	je     c001f332 <Vm::faultHandler(regs*)+0x50b>
c001f32d:	83 e8 02             	sub    eax,0x2
c001f330:	eb 03                	jmp    c001f335 <Vm::faultHandler(regs*)+0x50e>
c001f332:	83 c0 02             	add    eax,0x2
c001f335:	25 ff ff 00 00       	and    eax,0xffff
c001f33a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f33d:	e9 b1 02 00 00       	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f342:	83 ec 0c             	sub    esp,0xc
c001f345:	4b                   	dec    ebx
c001f346:	68 67 c7 02 c0       	push   0xc002c767
c001f34b:	e8 24 3c ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f350:	83 c4 10             	add    esp,0x10
c001f353:	80 fb 05             	cmp    bl,0x5
c001f356:	77 0a                	ja     c001f362 <Vm::faultHandler(regs*)+0x53b>
c001f358:	0f b6 db             	movzx  ebx,bl
c001f35b:	ff 24 9d d8 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3828]
c001f362:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f366:	eb 1b                	jmp    c001f383 <Vm::faultHandler(regs*)+0x55c>
c001f368:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f36c:	eb 15                	jmp    c001f383 <Vm::faultHandler(regs*)+0x55c>
c001f36e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f372:	eb 0f                	jmp    c001f383 <Vm::faultHandler(regs*)+0x55c>
c001f374:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f378:	eb 09                	jmp    c001f383 <Vm::faultHandler(regs*)+0x55c>
c001f37a:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f37d:	eb 04                	jmp    c001f383 <Vm::faultHandler(regs*)+0x55c>
c001f37f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f383:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f388:	74 0d                	je     c001f397 <Vm::faultHandler(regs*)+0x570>
c001f38a:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f391:	0f 87 8b 00 00 00    	ja     c001f422 <Vm::faultHandler(regs*)+0x5fb>
c001f397:	53                   	push   ebx
c001f398:	53                   	push   ebx
c001f399:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f39d:	52                   	push   edx
c001f39e:	50                   	push   eax
c001f39f:	e8 0f fa ff ff       	call   c001edb3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3a4:	5e                   	pop    esi
c001f3a5:	0f b6 c0             	movzx  eax,al
c001f3a8:	5d                   	pop    ebp
c001f3a9:	50                   	push   eax
c001f3aa:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3ae:	50                   	push   eax
c001f3af:	e8 91 f6 ff ff       	call   c001ea45 <Vm::outbv(unsigned short, unsigned char)>
c001f3b4:	83 c4 10             	add    esp,0x10
c001f3b7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3ba:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3be:	74 03                	je     c001f3c3 <Vm::faultHandler(regs*)+0x59c>
c001f3c0:	48                   	dec    eax
c001f3c1:	eb 01                	jmp    c001f3c4 <Vm::faultHandler(regs*)+0x59d>
c001f3c3:	40                   	inc    eax
c001f3c4:	0f b7 c0             	movzx  eax,ax
c001f3c7:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3ca:	e9 24 02 00 00       	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f3cf:	83 ec 0c             	sub    esp,0xc
c001f3d2:	4b                   	dec    ebx
c001f3d3:	68 67 c7 02 c0       	push   0xc002c767
c001f3d8:	e8 97 3b ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	80 fb 05             	cmp    bl,0x5
c001f3e3:	77 0a                	ja     c001f3ef <Vm::faultHandler(regs*)+0x5c8>
c001f3e5:	0f b6 db             	movzx  ebx,bl
c001f3e8:	ff 24 9d f0 c7 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3810]
c001f3ef:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3f3:	eb 1b                	jmp    c001f410 <Vm::faultHandler(regs*)+0x5e9>
c001f3f5:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3f9:	eb 15                	jmp    c001f410 <Vm::faultHandler(regs*)+0x5e9>
c001f3fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3ff:	eb 0f                	jmp    c001f410 <Vm::faultHandler(regs*)+0x5e9>
c001f401:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f405:	eb 09                	jmp    c001f410 <Vm::faultHandler(regs*)+0x5e9>
c001f407:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f40a:	eb 04                	jmp    c001f410 <Vm::faultHandler(regs*)+0x5e9>
c001f40c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f410:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f413:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f418:	74 39                	je     c001f453 <Vm::faultHandler(regs*)+0x62c>
c001f41a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f420:	76 31                	jbe    c001f453 <Vm::faultHandler(regs*)+0x62c>
c001f422:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f426:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f42a:	51                   	push   ecx
c001f42b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f42f:	51                   	push   ecx
c001f430:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f434:	51                   	push   ecx
c001f435:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f439:	51                   	push   ecx
c001f43a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f43e:	52                   	push   edx
c001f43f:	50                   	push   eax
c001f440:	50                   	push   eax
c001f441:	68 34 c7 02 c0       	push   0xc002c734
c001f446:	e8 29 3b ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f44b:	83 c4 20             	add    esp,0x20
c001f44e:	e9 fb 01 00 00       	jmp    c001f64e <Vm::faultHandler(regs*)+0x827>
c001f453:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f456:	0f b7 d3             	movzx  edx,bx
c001f459:	81 e6 00 04 00 00    	and    esi,0x400
c001f45f:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f462:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f467:	74 1d                	je     c001f486 <Vm::faultHandler(regs*)+0x65f>
c001f469:	51                   	push   ecx
c001f46a:	51                   	push   ecx
c001f46b:	52                   	push   edx
c001f46c:	50                   	push   eax
c001f46d:	e8 64 f9 ff ff       	call   c001edd6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f472:	83 c4 10             	add    esp,0x10
c001f475:	89 ea                	mov    edx,ebp
c001f477:	ef                   	out    dx,eax
c001f478:	85 f6                	test   esi,esi
c001f47a:	74 05                	je     c001f481 <Vm::faultHandler(regs*)+0x65a>
c001f47c:	83 eb 04             	sub    ebx,0x4
c001f47f:	eb 21                	jmp    c001f4a2 <Vm::faultHandler(regs*)+0x67b>
c001f481:	83 c3 04             	add    ebx,0x4
c001f484:	eb 1c                	jmp    c001f4a2 <Vm::faultHandler(regs*)+0x67b>
c001f486:	51                   	push   ecx
c001f487:	51                   	push   ecx
c001f488:	52                   	push   edx
c001f489:	50                   	push   eax
c001f48a:	e8 35 f9 ff ff       	call   c001edc4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f48f:	83 c4 10             	add    esp,0x10
c001f492:	89 ea                	mov    edx,ebp
c001f494:	66 ef                	out    dx,ax
c001f496:	85 f6                	test   esi,esi
c001f498:	74 05                	je     c001f49f <Vm::faultHandler(regs*)+0x678>
c001f49a:	83 eb 02             	sub    ebx,0x2
c001f49d:	eb 03                	jmp    c001f4a2 <Vm::faultHandler(regs*)+0x67b>
c001f49f:	83 c3 02             	add    ebx,0x2
c001f4a2:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4a8:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4ab:	e9 43 01 00 00       	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f4b0:	53                   	push   ebx
c001f4b1:	53                   	push   ebx
c001f4b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4b6:	50                   	push   eax
c001f4b7:	68 6d c7 02 c0       	push   0xc002c76d
c001f4bc:	e8 b3 3a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f4c1:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4cf:	e8 5e f5 ff ff       	call   c001ea32 <Vm::inbv(unsigned short)>
c001f4d4:	0f b6 c0             	movzx  eax,al
c001f4d7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f4da:	eb 5e                	jmp    c001f53a <Vm::faultHandler(regs*)+0x713>
c001f4dc:	51                   	push   ecx
c001f4dd:	51                   	push   ecx
c001f4de:	53                   	push   ebx
c001f4df:	68 73 c7 02 c0       	push   0xc002c773
c001f4e4:	e8 8b 3a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f4e9:	83 c4 10             	add    esp,0x10
c001f4ec:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4f1:	74 07                	je     c001f4fa <Vm::faultHandler(regs*)+0x6d3>
c001f4f3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4f7:	ed                   	in     eax,dx
c001f4f8:	eb 14                	jmp    c001f50e <Vm::faultHandler(regs*)+0x6e7>
c001f4fa:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f4fd:	66 31 db             	xor    bx,bx
c001f500:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f503:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f507:	66 ed                	in     ax,dx
c001f509:	0f b7 c0             	movzx  eax,ax
c001f50c:	09 d8                	or     eax,ebx
c001f50e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f511:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f515:	e9 dc 00 00 00       	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x7cf>
c001f51a:	50                   	push   eax
c001f51b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f51e:	53                   	push   ebx
c001f51f:	68 79 c7 02 c0       	push   0xc002c779
c001f524:	e8 4b 3a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f529:	58                   	pop    eax
c001f52a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f52e:	5a                   	pop    edx
c001f52f:	50                   	push   eax
c001f530:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f534:	50                   	push   eax
c001f535:	e8 0b f5 ff ff       	call   c001ea45 <Vm::outbv(unsigned short, unsigned char)>
c001f53a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f53e:	e9 85 00 00 00       	jmp    c001f5c8 <Vm::faultHandler(regs*)+0x7a1>
c001f543:	50                   	push   eax
c001f544:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f547:	53                   	push   ebx
c001f548:	68 82 c7 02 c0       	push   0xc002c782
c001f54d:	e8 22 3a ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f552:	83 c4 10             	add    esp,0x10
c001f555:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f559:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f55e:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f561:	74 03                	je     c001f566 <Vm::faultHandler(regs*)+0x73f>
c001f563:	ef                   	out    dx,eax
c001f564:	eb ab                	jmp    c001f511 <Vm::faultHandler(regs*)+0x6ea>
c001f566:	66 ef                	out    dx,ax
c001f568:	eb a7                	jmp    c001f511 <Vm::faultHandler(regs*)+0x6ea>
c001f56a:	55                   	push   ebp
c001f56b:	55                   	push   ebp
c001f56c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f56f:	68 8b c7 02 c0       	push   0xc002c78b
c001f574:	e8 fb 39 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f579:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f580:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f584:	89 04 24             	mov    DWORD PTR [esp],eax
c001f587:	e8 a6 f4 ff ff       	call   c001ea32 <Vm::inbv(unsigned short)>
c001f58c:	0f b6 c0             	movzx  eax,al
c001f58f:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f592:	eb 31                	jmp    c001f5c5 <Vm::faultHandler(regs*)+0x79e>
c001f594:	56                   	push   esi
c001f595:	56                   	push   esi
c001f596:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f599:	68 91 c7 02 c0       	push   0xc002c791
c001f59e:	e8 d1 39 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f5a3:	83 c4 10             	add    esp,0x10
c001f5a6:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5a9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5ae:	74 03                	je     c001f5b3 <Vm::faultHandler(regs*)+0x78c>
c001f5b0:	ed                   	in     eax,dx
c001f5b1:	eb 0d                	jmp    c001f5c0 <Vm::faultHandler(regs*)+0x799>
c001f5b3:	66 ed                	in     ax,dx
c001f5b5:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5b8:	0f b7 c0             	movzx  eax,ax
c001f5bb:	66 31 d2             	xor    dx,dx
c001f5be:	09 d0                	or     eax,edx
c001f5c0:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5c3:	eb 2e                	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f5c5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5c8:	83 c4 10             	add    esp,0x10
c001f5cb:	eb 29                	jmp    c001f5f6 <Vm::faultHandler(regs*)+0x7cf>
c001f5cd:	50                   	push   eax
c001f5ce:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5d1:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5d4:	68 a0 c7 02 c0       	push   0xc002c7a0
c001f5d9:	e8 96 39 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f5de:	83 c4 10             	add    esp,0x10
c001f5e1:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5e4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5e9:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5ec:	74 03                	je     c001f5f1 <Vm::faultHandler(regs*)+0x7ca>
c001f5ee:	ef                   	out    dx,eax
c001f5ef:	eb 02                	jmp    c001f5f3 <Vm::faultHandler(regs*)+0x7cc>
c001f5f1:	66 ef                	out    dx,ax
c001f5f3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5f6:	b0 01                	mov    al,0x1
c001f5f8:	eb 56                	jmp    c001f650 <Vm::faultHandler(regs*)+0x829>
c001f5fa:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f5fe:	51                   	push   ecx
c001f5ff:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f603:	51                   	push   ecx
c001f604:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f608:	51                   	push   ecx
c001f609:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f60d:	51                   	push   ecx
c001f60e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f612:	52                   	push   edx
c001f613:	50                   	push   eax
c001f614:	50                   	push   eax
c001f615:	68 a9 c7 02 c0       	push   0xc002c7a9
c001f61a:	e8 55 39 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c001f61f:	83 c4 20             	add    esp,0x20
c001f622:	83 ec 0c             	sub    esp,0xc
c001f625:	6a 60                	push   0x60
c001f627:	e8 06 f4 ff ff       	call   c001ea32 <Vm::inbv(unsigned short)>
c001f62c:	83 c4 10             	add    esp,0x10
c001f62f:	3c 1c                	cmp    al,0x1c
c001f631:	74 04                	je     c001f637 <Vm::faultHandler(regs*)+0x810>
c001f633:	3c 5a                	cmp    al,0x5a
c001f635:	75 eb                	jne    c001f622 <Vm::faultHandler(regs*)+0x7fb>
c001f637:	3c 1c                	cmp    al,0x1c
c001f639:	74 04                	je     c001f63f <Vm::faultHandler(regs*)+0x818>
c001f63b:	3c 5a                	cmp    al,0x5a
c001f63d:	75 0f                	jne    c001f64e <Vm::faultHandler(regs*)+0x827>
c001f63f:	83 ec 0c             	sub    esp,0xc
c001f642:	6a 60                	push   0x60
c001f644:	e8 e9 f3 ff ff       	call   c001ea32 <Vm::inbv(unsigned short)>
c001f649:	83 c4 10             	add    esp,0x10
c001f64c:	eb e9                	jmp    c001f637 <Vm::faultHandler(regs*)+0x810>
c001f64e:	31 c0                	xor    eax,eax
c001f650:	83 c4 1c             	add    esp,0x1c
c001f653:	5b                   	pop    ebx
c001f654:	5e                   	pop    esi
c001f655:	5f                   	pop    edi
c001f656:	5d                   	pop    ebp
c001f657:	c3                   	ret    

c001f658 <Vm::fpuInternalTo32(unsigned long long)>:
c001f658:	57                   	push   edi
c001f659:	56                   	push   esi
c001f65a:	53                   	push   ebx
c001f65b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f663:	89 d6                	mov    esi,edx
c001f665:	89 d7                	mov    edi,edx
c001f667:	89 c1                	mov    ecx,eax
c001f669:	c1 ef 14             	shr    edi,0x14
c001f66c:	89 d3                	mov    ebx,edx
c001f66e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f674:	31 d2                	xor    edx,edx
c001f676:	89 f8                	mov    eax,edi
c001f678:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f67e:	bf ff 00 00 00       	mov    edi,0xff
c001f683:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f688:	83 d2 ff             	adc    edx,0xffffffff
c001f68b:	39 c7                	cmp    edi,eax
c001f68d:	bf 00 00 00 00       	mov    edi,0x0
c001f692:	19 d7                	sbb    edi,edx
c001f694:	72 15                	jb     c001f6ab <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f696:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f69a:	c1 e0 17             	shl    eax,0x17
c001f69d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6a3:	09 f1                	or     ecx,esi
c001f6a5:	09 c1                	or     ecx,eax
c001f6a7:	89 cf                	mov    edi,ecx
c001f6a9:	eb 02                	jmp    c001f6ad <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6ab:	31 ff                	xor    edi,edi
c001f6ad:	89 f8                	mov    eax,edi
c001f6af:	5b                   	pop    ebx
c001f6b0:	5e                   	pop    esi
c001f6b1:	5f                   	pop    edi
c001f6b2:	c3                   	ret    

c001f6b3 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6bb:	c3                   	ret    

c001f6bc <Vm::fpu32ToInternal(unsigned int)>:
c001f6bc:	57                   	push   edi
c001f6bd:	31 ff                	xor    edi,edi
c001f6bf:	56                   	push   esi
c001f6c0:	53                   	push   ebx
c001f6c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6c5:	89 cb                	mov    ebx,ecx
c001f6c7:	89 ce                	mov    esi,ecx
c001f6c9:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f6cf:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f6d5:	c1 e9 17             	shr    ecx,0x17
c001f6d8:	89 f0                	mov    eax,esi
c001f6da:	0f b6 d1             	movzx  edx,cl
c001f6dd:	81 c2 80 03 00 00    	add    edx,0x380
c001f6e3:	89 d1                	mov    ecx,edx
c001f6e5:	89 fa                	mov    edx,edi
c001f6e7:	c1 e1 14             	shl    ecx,0x14
c001f6ea:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f6ee:	c1 e0 1d             	shl    eax,0x1d
c001f6f1:	89 d7                	mov    edi,edx
c001f6f3:	89 c6                	mov    esi,eax
c001f6f5:	89 ca                	mov    edx,ecx
c001f6f7:	89 f0                	mov    eax,esi
c001f6f9:	09 fa                	or     edx,edi
c001f6fb:	09 da                	or     edx,ebx
c001f6fd:	5b                   	pop    ebx
c001f6fe:	5e                   	pop    esi
c001f6ff:	5f                   	pop    edi
c001f700:	c3                   	ret    

c001f701 <Vm::fpu64ToInternal(unsigned long long)>:
c001f701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f705:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f709:	c3                   	ret    

c001f70a <Vm::fpuFloatToLong(unsigned long long)>:
c001f70a:	57                   	push   edi
c001f70b:	31 c0                	xor    eax,eax
c001f70d:	56                   	push   esi
c001f70e:	31 d2                	xor    edx,edx
c001f710:	53                   	push   ebx
c001f711:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f719:	89 d9                	mov    ecx,ebx
c001f71b:	c1 e9 14             	shr    ecx,0x14
c001f71e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f724:	89 cf                	mov    edi,ecx
c001f726:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f72c:	78 33                	js     c001f761 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f72e:	89 d9                	mov    ecx,ebx
c001f730:	89 f0                	mov    eax,esi
c001f732:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f738:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f73e:	89 ca                	mov    edx,ecx
c001f740:	b9 34 00 00 00       	mov    ecx,0x34
c001f745:	29 f9                	sub    ecx,edi
c001f747:	0f ad d0             	shrd   eax,edx,cl
c001f74a:	d3 fa                	sar    edx,cl
c001f74c:	f6 c1 20             	test   cl,0x20
c001f74f:	74 05                	je     c001f756 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f751:	89 d0                	mov    eax,edx
c001f753:	c1 fa 1f             	sar    edx,0x1f
c001f756:	85 db                	test   ebx,ebx
c001f758:	79 07                	jns    c001f761 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f75a:	f7 d8                	neg    eax
c001f75c:	83 d2 00             	adc    edx,0x0
c001f75f:	f7 da                	neg    edx
c001f761:	5b                   	pop    ebx
c001f762:	5e                   	pop    esi
c001f763:	5f                   	pop    edi
c001f764:	c3                   	ret    

c001f765 <Vm::fpuULongToFloat(unsigned long long)>:
c001f765:	57                   	push   edi
c001f766:	31 c9                	xor    ecx,ecx
c001f768:	56                   	push   esi
c001f769:	53                   	push   ebx
c001f76a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f76e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f772:	0f ba e7 14          	bt     edi,0x14
c001f776:	72 07                	jb     c001f77f <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f778:	01 f6                	add    esi,esi
c001f77a:	11 ff                	adc    edi,edi
c001f77c:	41                   	inc    ecx
c001f77d:	eb f3                	jmp    c001f772 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f77f:	89 fa                	mov    edx,edi
c001f781:	89 f0                	mov    eax,esi
c001f783:	bb 33 04 00 00       	mov    ebx,0x433
c001f788:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f78e:	29 cb                	sub    ebx,ecx
c001f790:	89 d9                	mov    ecx,ebx
c001f792:	5b                   	pop    ebx
c001f793:	c1 e1 14             	shl    ecx,0x14
c001f796:	5e                   	pop    esi
c001f797:	09 ca                	or     edx,ecx
c001f799:	5f                   	pop    edi
c001f79a:	c3                   	ret    

c001f79b <Vm::fpuLongToFloat(long long)>:
c001f79b:	56                   	push   esi
c001f79c:	31 c0                	xor    eax,eax
c001f79e:	53                   	push   ebx
c001f79f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7a7:	39 c8                	cmp    eax,ecx
c001f7a9:	19 d8                	sbb    eax,ebx
c001f7ab:	7d 04                	jge    c001f7b1 <Vm::fpuLongToFloat(long long)+0x16>
c001f7ad:	31 f6                	xor    esi,esi
c001f7af:	eb 0c                	jmp    c001f7bd <Vm::fpuLongToFloat(long long)+0x22>
c001f7b1:	f7 d9                	neg    ecx
c001f7b3:	be 01 00 00 00       	mov    esi,0x1
c001f7b8:	83 d3 00             	adc    ebx,0x0
c001f7bb:	f7 db                	neg    ebx
c001f7bd:	31 c0                	xor    eax,eax
c001f7bf:	0f ba e3 14          	bt     ebx,0x14
c001f7c3:	72 07                	jb     c001f7cc <Vm::fpuLongToFloat(long long)+0x31>
c001f7c5:	01 c9                	add    ecx,ecx
c001f7c7:	11 db                	adc    ebx,ebx
c001f7c9:	40                   	inc    eax
c001f7ca:	eb f3                	jmp    c001f7bf <Vm::fpuLongToFloat(long long)+0x24>
c001f7cc:	ba 33 04 00 00       	mov    edx,0x433
c001f7d1:	29 c2                	sub    edx,eax
c001f7d3:	89 c8                	mov    eax,ecx
c001f7d5:	c1 e2 14             	shl    edx,0x14
c001f7d8:	89 d9                	mov    ecx,ebx
c001f7da:	89 f3                	mov    ebx,esi
c001f7dc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7e2:	09 ca                	or     edx,ecx
c001f7e4:	84 db                	test   bl,bl
c001f7e6:	74 06                	je     c001f7ee <Vm::fpuLongToFloat(long long)+0x53>
c001f7e8:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f7ee:	5b                   	pop    ebx
c001f7ef:	5e                   	pop    esi
c001f7f0:	c3                   	ret    

c001f7f1 <Vm::fpuGet0()>:
c001f7f1:	31 c0                	xor    eax,eax
c001f7f3:	31 d2                	xor    edx,edx
c001f7f5:	c3                   	ret    

c001f7f6 <Vm::fpuGet1()>:
c001f7f6:	b8 01 00 00 00       	mov    eax,0x1
c001f7fb:	31 d2                	xor    edx,edx
c001f7fd:	c3                   	ret    

c001f7fe <Vm::fpuGetPi()>:
c001f7fe:	b8 03 00 00 00       	mov    eax,0x3
c001f803:	31 d2                	xor    edx,edx
c001f805:	c3                   	ret    

c001f806 <Vm::fpuGetLog2E()>:
c001f806:	83 ec 18             	sub    esp,0x18
c001f809:	68 08 c8 02 c0       	push   0xc002c808
c001f80e:	e8 0e ae ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001f813:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f818:	31 d2                	xor    edx,edx
c001f81a:	83 c4 1c             	add    esp,0x1c
c001f81d:	c3                   	ret    

c001f81e <Vm::fpuGetLogE2()>:
c001f81e:	83 ec 18             	sub    esp,0x18
c001f821:	68 14 c8 02 c0       	push   0xc002c814
c001f826:	e8 f6 ad ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001f82b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f830:	31 d2                	xor    edx,edx
c001f832:	83 c4 1c             	add    esp,0x1c
c001f835:	c3                   	ret    

c001f836 <Vm::fpuGetLog210()>:
c001f836:	83 ec 18             	sub    esp,0x18
c001f839:	68 20 c8 02 c0       	push   0xc002c820
c001f83e:	e8 de ad ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001f843:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f848:	31 d2                	xor    edx,edx
c001f84a:	83 c4 1c             	add    esp,0x1c
c001f84d:	c3                   	ret    

c001f84e <Vm::fpuGetLog102()>:
c001f84e:	83 ec 18             	sub    esp,0x18
c001f851:	68 2d c8 02 c0       	push   0xc002c82d
c001f856:	e8 c6 ad ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001f85b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f860:	31 d2                	xor    edx,edx
c001f862:	83 c4 1c             	add    esp,0x1c
c001f865:	c3                   	ret    

c001f866 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f866:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f86a:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f872:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f876:	0f 92 c0             	setb   al
c001f879:	c3                   	ret    

c001f87a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f882:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f886:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f88a:	09 c2                	or     edx,eax
c001f88c:	0f 94 c0             	sete   al
c001f88f:	c3                   	ret    

c001f890 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f890:	57                   	push   edi
c001f891:	56                   	push   esi
c001f892:	53                   	push   ebx
c001f893:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f897:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f89b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f89f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8a3:	57                   	push   edi
c001f8a4:	56                   	push   esi
c001f8a5:	53                   	push   ebx
c001f8a6:	51                   	push   ecx
c001f8a7:	e8 ce ff ff ff       	call   c001f87a <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8ac:	83 c4 10             	add    esp,0x10
c001f8af:	88 c2                	mov    dl,al
c001f8b1:	31 c0                	xor    eax,eax
c001f8b3:	84 d2                	test   dl,dl
c001f8b5:	75 0c                	jne    c001f8c3 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8b7:	57                   	push   edi
c001f8b8:	56                   	push   esi
c001f8b9:	53                   	push   ebx
c001f8ba:	51                   	push   ecx
c001f8bb:	e8 a6 ff ff ff       	call   c001f866 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8c0:	83 c4 10             	add    esp,0x10
c001f8c3:	83 e0 01             	and    eax,0x1
c001f8c6:	5b                   	pop    ebx
c001f8c7:	88 c1                	mov    cl,al
c001f8c9:	83 e2 01             	and    edx,0x1
c001f8cc:	a0 81 1a 03 c0       	mov    al,ds:0xc0031a81
c001f8d1:	c1 e2 06             	shl    edx,0x6
c001f8d4:	83 e0 ba             	and    eax,0xffffffba
c001f8d7:	5e                   	pop    esi
c001f8d8:	09 c8                	or     eax,ecx
c001f8da:	5f                   	pop    edi
c001f8db:	09 d0                	or     eax,edx
c001f8dd:	a2 81 1a 03 c0       	mov    ds:0xc0031a81,al
c001f8e2:	c3                   	ret    

c001f8e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f8e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f8eb:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f8ef:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f8f3:	c3                   	ret    

c001f8f4 <Vm::fpuAbs(unsigned long long)>:
c001f8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8fc:	c3                   	ret    

c001f8fd <Vm::fpuChs(unsigned long long)>:
c001f8fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f901:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f905:	f7 d8                	neg    eax
c001f907:	83 d2 00             	adc    edx,0x0
c001f90a:	f7 da                	neg    edx
c001f90c:	c3                   	ret    

c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f90d:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f911:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f916:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f91a:	eb c7                	jmp    c001f8e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f91c <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f91c:	53                   	push   ebx
c001f91d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f921:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f925:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f929:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f92d:	0f af ca             	imul   ecx,edx
c001f930:	0f af d8             	imul   ebx,eax
c001f933:	f7 e2                	mul    edx
c001f935:	01 d9                	add    ecx,ebx
c001f937:	5b                   	pop    ebx
c001f938:	01 ca                	add    edx,ecx
c001f93a:	c3                   	ret    

c001f93b <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f93b:	83 ec 0c             	sub    esp,0xc
c001f93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f94e:	e8 99 70 00 00       	call   c00269ec <__udivdi3>
c001f953:	83 c4 1c             	add    esp,0x1c
c001f956:	c3                   	ret    

c001f957 <Vm::fpuSquare(unsigned long long)>:
c001f957:	50                   	push   eax
c001f958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f95c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f960:	52                   	push   edx
c001f961:	50                   	push   eax
c001f962:	52                   	push   edx
c001f963:	50                   	push   eax
c001f964:	e8 b3 ff ff ff       	call   c001f91c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f969:	83 c4 14             	add    esp,0x14
c001f96c:	c3                   	ret    

c001f96d <Vm::fpuGetReg(int)>:
c001f96d:	83 ec 0c             	sub    esp,0xc
c001f970:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f975:	76 10                	jbe    c001f987 <Vm::fpuGetReg(int)+0x1a>
c001f977:	83 ec 0c             	sub    esp,0xc
c001f97a:	68 3a c8 02 c0       	push   0xc002c83a
c001f97f:	e8 9d ac ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001f984:	83 c4 10             	add    esp,0x10
c001f987:	a0 81 1a 03 c0       	mov    al,ds:0xc0031a81
c001f98c:	b9 08 00 00 00       	mov    ecx,0x8
c001f991:	c0 e8 03             	shr    al,0x3
c001f994:	83 e0 07             	and    eax,0x7
c001f997:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f99b:	99                   	cdq    
c001f99c:	f7 f9                	idiv   ecx
c001f99e:	8b 04 d5 84 1a 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce57c]
c001f9a5:	8b 14 d5 88 1a 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce578]
c001f9ac:	83 c4 0c             	add    esp,0xc
c001f9af:	c3                   	ret    

c001f9b0 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9b0:	57                   	push   edi
c001f9b1:	56                   	push   esi
c001f9b2:	52                   	push   edx
c001f9b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9bb:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9c0:	76 10                	jbe    c001f9d2 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9c2:	83 ec 0c             	sub    esp,0xc
c001f9c5:	68 4d c8 02 c0       	push   0xc002c84d
c001f9ca:	e8 52 ac ff ff       	call   c001a621 <Krnl::panic(char const*)>
c001f9cf:	83 c4 10             	add    esp,0x10
c001f9d2:	a0 81 1a 03 c0       	mov    al,ds:0xc0031a81
c001f9d7:	b9 08 00 00 00       	mov    ecx,0x8
c001f9dc:	c0 e8 03             	shr    al,0x3
c001f9df:	83 e0 07             	and    eax,0x7
c001f9e2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9e6:	99                   	cdq    
c001f9e7:	f7 f9                	idiv   ecx
c001f9e9:	89 34 d5 84 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce57c],esi
c001f9f0:	89 3c d5 88 1a 03 c0 	mov    DWORD PTR [edx*8-0x3ffce578],edi
c001f9f7:	58                   	pop    eax
c001f9f8:	5e                   	pop    esi
c001f9f9:	5f                   	pop    edi
c001f9fa:	c3                   	ret    

c001f9fb <Vm::fpuPush(unsigned long long)>:
c001f9fb:	a0 81 1a 03 c0       	mov    al,ds:0xc0031a81
c001fa00:	c0 e8 03             	shr    al,0x3
c001fa03:	83 e0 07             	and    eax,0x7
c001fa06:	83 c0 07             	add    eax,0x7
c001fa09:	88 c2                	mov    dl,al
c001fa0b:	83 e0 07             	and    eax,0x7
c001fa0e:	83 e2 07             	and    edx,0x7
c001fa11:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa18:	8a 15 81 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031a81
c001fa1e:	83 e2 c7             	and    edx,0xffffffc7
c001fa21:	09 ca                	or     edx,ecx
c001fa23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa27:	88 15 81 1a 03 c0    	mov    BYTE PTR ds:0xc0031a81,dl
c001fa2d:	89 0c c5 88 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce578],ecx
c001fa34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa38:	89 14 c5 84 1a 03 c0 	mov    DWORD PTR [eax*8-0x3ffce57c],edx
c001fa3f:	a1 c4 1a 03 c0       	mov    eax,ds:0xc0031ac4
c001fa44:	83 f8 08             	cmp    eax,0x8
c001fa47:	75 08                	jne    c001fa51 <Vm::fpuPush(unsigned long long)+0x56>
c001fa49:	80 0d 80 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a80,0x40
c001fa50:	c3                   	ret    
c001fa51:	40                   	inc    eax
c001fa52:	a3 c4 1a 03 c0       	mov    ds:0xc0031ac4,eax
c001fa57:	c3                   	ret    

c001fa58 <Vm::fpuPop()>:
c001fa58:	8a 0d 81 1a 03 c0    	mov    cl,BYTE PTR ds:0xc0031a81
c001fa5e:	53                   	push   ebx
c001fa5f:	c0 e9 03             	shr    cl,0x3
c001fa62:	8a 1d 81 1a 03 c0    	mov    bl,BYTE PTR ds:0xc0031a81
c001fa68:	83 e1 07             	and    ecx,0x7
c001fa6b:	83 e3 c7             	and    ebx,0xffffffc7
c001fa6e:	8b 04 cd 84 1a 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce57c]
c001fa75:	8b 14 cd 88 1a 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce578]
c001fa7c:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fa83:	83 e1 38             	and    ecx,0x38
c001fa86:	09 d9                	or     ecx,ebx
c001fa88:	88 0d 81 1a 03 c0    	mov    BYTE PTR ds:0xc0031a81,cl
c001fa8e:	8b 0d c4 1a 03 c0    	mov    ecx,DWORD PTR ds:0xc0031ac4
c001fa94:	85 c9                	test   ecx,ecx
c001fa96:	74 09                	je     c001faa1 <Vm::fpuPop()+0x49>
c001fa98:	49                   	dec    ecx
c001fa99:	89 0d c4 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac4,ecx
c001fa9f:	eb 07                	jmp    c001faa8 <Vm::fpuPop()+0x50>
c001faa1:	80 0d 80 1a 03 c0 40 	or     BYTE PTR ds:0xc0031a80,0x40
c001faa8:	5b                   	pop    ebx
c001faa9:	c3                   	ret    

c001faaa <Vm::x87Handler(regs*)>:
c001faaa:	55                   	push   ebp
c001faab:	57                   	push   edi
c001faac:	56                   	push   esi
c001faad:	53                   	push   ebx
c001faae:	83 ec 1c             	sub    esp,0x1c
c001fab1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fab5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001faba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fabd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fac5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fac9:	50                   	push   eax
c001faca:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001face:	50                   	push   eax
c001facf:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fad3:	50                   	push   eax
c001fad4:	53                   	push   ebx
c001fad5:	e8 0e a2 ff ff       	call   c0019ce8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fada:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fadd:	83 c4 10             	add    esp,0x10
c001fae0:	89 c6                	mov    esi,eax
c001fae2:	80 fa d9             	cmp    dl,0xd9
c001fae5:	0f 85 52 01 00 00    	jne    c001fc3d <Vm::x87Handler(regs*)+0x193>
c001faeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faef:	8d 50 20             	lea    edx,[eax+0x20]
c001faf2:	80 fa 0e             	cmp    dl,0xe
c001faf5:	0f 87 86 00 00 00    	ja     c001fb81 <Vm::x87Handler(regs*)+0xd7>
c001fafb:	0f b6 d2             	movzx  edx,dl
c001fafe:	ff 24 95 60 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd37a0]
c001fb05:	e8 e7 fc ff ff       	call   c001f7f1 <Vm::fpuGet0()>
c001fb0a:	eb 05                	jmp    c001fb11 <Vm::x87Handler(regs*)+0x67>
c001fb0c:	e8 e5 fc ff ff       	call   c001f7f6 <Vm::fpuGet1()>
c001fb11:	57                   	push   edi
c001fb12:	57                   	push   edi
c001fb13:	52                   	push   edx
c001fb14:	50                   	push   eax
c001fb15:	e8 e1 fe ff ff       	call   c001f9fb <Vm::fpuPush(unsigned long long)>
c001fb1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb1e:	83 c4 10             	add    esp,0x10
c001fb21:	b0 01                	mov    al,0x1
c001fb23:	e9 e3 09 00 00       	jmp    c002050b <Vm::x87Handler(regs*)+0xa61>
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	6a 00                	push   0x0
c001fb2d:	e8 3b fe ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fb32:	59                   	pop    ecx
c001fb33:	5e                   	pop    esi
c001fb34:	52                   	push   edx
c001fb35:	50                   	push   eax
c001fb36:	e8 c2 fd ff ff       	call   c001f8fd <Vm::fpuChs(unsigned long long)>
c001fb3b:	eb 13                	jmp    c001fb50 <Vm::x87Handler(regs*)+0xa6>
c001fb3d:	83 ec 0c             	sub    esp,0xc
c001fb40:	6a 00                	push   0x0
c001fb42:	e8 26 fe ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fb47:	5f                   	pop    edi
c001fb48:	5d                   	pop    ebp
c001fb49:	52                   	push   edx
c001fb4a:	50                   	push   eax
c001fb4b:	e8 a4 fd ff ff       	call   c001f8f4 <Vm::fpuAbs(unsigned long long)>
c001fb50:	83 c4 0c             	add    esp,0xc
c001fb53:	52                   	push   edx
c001fb54:	50                   	push   eax
c001fb55:	6a 00                	push   0x0
c001fb57:	e8 54 fe ff ff       	call   c001f9b0 <Vm::fpuSetReg(int, unsigned long long)>
c001fb5c:	eb bc                	jmp    c001fb1a <Vm::x87Handler(regs*)+0x70>
c001fb5e:	e8 d3 fc ff ff       	call   c001f836 <Vm::fpuGetLog210()>
c001fb63:	eb ac                	jmp    c001fb11 <Vm::x87Handler(regs*)+0x67>
c001fb65:	e8 9c fc ff ff       	call   c001f806 <Vm::fpuGetLog2E()>
c001fb6a:	eb a5                	jmp    c001fb11 <Vm::x87Handler(regs*)+0x67>
c001fb6c:	e8 8d fc ff ff       	call   c001f7fe <Vm::fpuGetPi()>
c001fb71:	eb 9e                	jmp    c001fb11 <Vm::x87Handler(regs*)+0x67>
c001fb73:	e8 d6 fc ff ff       	call   c001f84e <Vm::fpuGetLog102()>
c001fb78:	eb 97                	jmp    c001fb11 <Vm::x87Handler(regs*)+0x67>
c001fb7a:	e8 9f fc ff ff       	call   c001f81e <Vm::fpuGetLogE2()>
c001fb7f:	eb 90                	jmp    c001fb11 <Vm::x87Handler(regs*)+0x67>
c001fb81:	8d 50 40             	lea    edx,[eax+0x40]
c001fb84:	80 fa 07             	cmp    dl,0x7
c001fb87:	77 15                	ja     c001fb9e <Vm::x87Handler(regs*)+0xf4>
c001fb89:	83 ec 0c             	sub    esp,0xc
c001fb8c:	2d c0 00 00 00       	sub    eax,0xc0
c001fb91:	50                   	push   eax
c001fb92:	e8 d6 fd ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fb97:	59                   	pop    ecx
c001fb98:	5e                   	pop    esi
c001fb99:	e9 75 ff ff ff       	jmp    c001fb13 <Vm::x87Handler(regs*)+0x69>
c001fb9e:	8d 50 38             	lea    edx,[eax+0x38]
c001fba1:	80 fa 07             	cmp    dl,0x7
c001fba4:	77 3c                	ja     c001fbe2 <Vm::x87Handler(regs*)+0x138>
c001fba6:	83 ec 0c             	sub    esp,0xc
c001fba9:	2d c8 00 00 00       	sub    eax,0xc8
c001fbae:	50                   	push   eax
c001fbaf:	e8 b9 fd ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fbb4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbbb:	89 c6                	mov    esi,eax
c001fbbd:	89 d7                	mov    edi,edx
c001fbbf:	e8 a9 fd ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fbc4:	83 c4 0c             	add    esp,0xc
c001fbc7:	52                   	push   edx
c001fbc8:	50                   	push   eax
c001fbc9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbcd:	2d c8 00 00 00       	sub    eax,0xc8
c001fbd2:	50                   	push   eax
c001fbd3:	e8 d8 fd ff ff       	call   c001f9b0 <Vm::fpuSetReg(int, unsigned long long)>
c001fbd8:	83 c4 0c             	add    esp,0xc
c001fbdb:	57                   	push   edi
c001fbdc:	56                   	push   esi
c001fbdd:	e9 73 ff ff ff       	jmp    c001fb55 <Vm::x87Handler(regs*)+0xab>
c001fbe2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbe6:	84 d2                	test   dl,dl
c001fbe8:	75 0f                	jne    c001fbf9 <Vm::x87Handler(regs*)+0x14f>
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	ff 36                	push   DWORD PTR [esi]
c001fbef:	e8 c8 fa ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c001fbf4:	e9 bf 00 00 00       	jmp    c001fcb8 <Vm::x87Handler(regs*)+0x20e>
c001fbf9:	80 fa 03             	cmp    dl,0x3
c001fbfc:	75 13                	jne    c001fc11 <Vm::x87Handler(regs*)+0x167>
c001fbfe:	e8 55 fe ff ff       	call   c001fa58 <Vm::fpuPop()>
c001fc03:	55                   	push   ebp
c001fc04:	55                   	push   ebp
c001fc05:	52                   	push   edx
c001fc06:	50                   	push   eax
c001fc07:	e8 4c fa ff ff       	call   c001f658 <Vm::fpuInternalTo32(unsigned long long)>
c001fc0c:	e9 88 00 00 00       	jmp    c001fc99 <Vm::x87Handler(regs*)+0x1ef>
c001fc11:	80 fa 05             	cmp    dl,0x5
c001fc14:	75 0e                	jne    c001fc24 <Vm::x87Handler(regs*)+0x17a>
c001fc16:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc19:	66 a3 82 1a 03 c0    	mov    ds:0xc0031a82,ax
c001fc1f:	e9 df 00 00 00       	jmp    c001fd03 <Vm::x87Handler(regs*)+0x259>
c001fc24:	31 c0                	xor    eax,eax
c001fc26:	80 fa 07             	cmp    dl,0x7
c001fc29:	0f 85 dc 08 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c001fc2f:	66 a1 82 1a 03 c0    	mov    ax,ds:0xc0031a82
c001fc35:	66 89 06             	mov    WORD PTR [esi],ax
c001fc38:	e9 c6 00 00 00       	jmp    c001fd03 <Vm::x87Handler(regs*)+0x259>
c001fc3d:	80 fa d8             	cmp    dl,0xd8
c001fc40:	0f 84 c9 00 00 00    	je     c001fd0f <Vm::x87Handler(regs*)+0x265>
c001fc46:	80 fa dc             	cmp    dl,0xdc
c001fc49:	0f 84 0d 02 00 00    	je     c001fe5c <Vm::x87Handler(regs*)+0x3b2>
c001fc4f:	80 fa de             	cmp    dl,0xde
c001fc52:	0f 84 cd 02 00 00    	je     c001ff25 <Vm::x87Handler(regs*)+0x47b>
c001fc58:	80 fa dd             	cmp    dl,0xdd
c001fc5b:	0f 84 5f 04 00 00    	je     c00200c0 <Vm::x87Handler(regs*)+0x616>
c001fc61:	80 fa da             	cmp    dl,0xda
c001fc64:	0f 84 24 05 00 00    	je     c002018e <Vm::x87Handler(regs*)+0x6e4>
c001fc6a:	80 fa df             	cmp    dl,0xdf
c001fc6d:	0f 84 68 05 00 00    	je     c00201db <Vm::x87Handler(regs*)+0x731>
c001fc73:	31 c0                	xor    eax,eax
c001fc75:	80 fa db             	cmp    dl,0xdb
c001fc78:	0f 85 8d 08 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c001fc7e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc82:	80 fa 03             	cmp    dl,0x3
c001fc85:	0f 85 70 06 00 00    	jne    c00202fb <Vm::x87Handler(regs*)+0x851>
c001fc8b:	e8 c8 fd ff ff       	call   c001fa58 <Vm::fpuPop()>
c001fc90:	55                   	push   ebp
c001fc91:	55                   	push   ebp
c001fc92:	52                   	push   edx
c001fc93:	50                   	push   eax
c001fc94:	e8 71 fa ff ff       	call   c001f70a <Vm::fpuFloatToLong(unsigned long long)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	89 06                	mov    DWORD PTR [esi],eax
c001fc9e:	eb 63                	jmp    c001fd03 <Vm::x87Handler(regs*)+0x259>
c001fca0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fca4:	84 d2                	test   dl,dl
c001fca6:	0f 85 e6 05 00 00    	jne    c0020292 <Vm::x87Handler(regs*)+0x7e8>
c001fcac:	57                   	push   edi
c001fcad:	57                   	push   edi
c001fcae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcb1:	ff 36                	push   DWORD PTR [esi]
c001fcb3:	e8 49 fa ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c001fcb8:	5e                   	pop    esi
c001fcb9:	5f                   	pop    edi
c001fcba:	52                   	push   edx
c001fcbb:	50                   	push   eax
c001fcbc:	e8 3a fd ff ff       	call   c001f9fb <Vm::fpuPush(unsigned long long)>
c001fcc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcc5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcc8:	e9 51 fe ff ff       	jmp    c001fb1e <Vm::x87Handler(regs*)+0x74>
c001fccd:	80 fa 03             	cmp    dl,0x3
c001fcd0:	0f 85 d7 06 00 00    	jne    c00203ad <Vm::x87Handler(regs*)+0x903>
c001fcd6:	57                   	push   edi
c001fcd7:	57                   	push   edi
c001fcd8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcdb:	ff 36                	push   DWORD PTR [esi]
c001fcdd:	e8 1f fa ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c001fce2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce9:	89 c6                	mov    esi,eax
c001fceb:	89 d7                	mov    edi,edx
c001fced:	e8 7b fc ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fcf2:	57                   	push   edi
c001fcf3:	56                   	push   esi
c001fcf4:	52                   	push   edx
c001fcf5:	50                   	push   eax
c001fcf6:	e8 95 fb ff ff       	call   c001f890 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fcfb:	83 c4 20             	add    esp,0x20
c001fcfe:	e8 55 fd ff ff       	call   c001fa58 <Vm::fpuPop()>
c001fd03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd07:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd0a:	e9 12 fe ff ff       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x77>
c001fd0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd13:	8d 50 40             	lea    edx,[eax+0x40]
c001fd16:	80 fa 07             	cmp    dl,0x7
c001fd19:	77 29                	ja     c001fd44 <Vm::x87Handler(regs*)+0x29a>
c001fd1b:	83 ec 0c             	sub    esp,0xc
c001fd1e:	2d c0 00 00 00       	sub    eax,0xc0
c001fd23:	50                   	push   eax
c001fd24:	e8 44 fc ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fd29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd30:	89 c6                	mov    esi,eax
c001fd32:	89 d7                	mov    edi,edx
c001fd34:	e8 34 fc ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fd39:	57                   	push   edi
c001fd3a:	56                   	push   esi
c001fd3b:	52                   	push   edx
c001fd3c:	50                   	push   eax
c001fd3d:	e8 a1 fb ff ff       	call   c001f8e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd42:	eb 2f                	jmp    c001fd73 <Vm::x87Handler(regs*)+0x2c9>
c001fd44:	8d 50 38             	lea    edx,[eax+0x38]
c001fd47:	80 fa 07             	cmp    dl,0x7
c001fd4a:	77 2f                	ja     c001fd7b <Vm::x87Handler(regs*)+0x2d1>
c001fd4c:	83 ec 0c             	sub    esp,0xc
c001fd4f:	2d c8 00 00 00       	sub    eax,0xc8
c001fd54:	50                   	push   eax
c001fd55:	e8 13 fc ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fd5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd61:	89 c6                	mov    esi,eax
c001fd63:	89 d7                	mov    edi,edx
c001fd65:	e8 03 fc ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fd6a:	57                   	push   edi
c001fd6b:	56                   	push   esi
c001fd6c:	52                   	push   edx
c001fd6d:	50                   	push   eax
c001fd6e:	e8 a9 fb ff ff       	call   c001f91c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd73:	83 c4 1c             	add    esp,0x1c
c001fd76:	e9 d8 fd ff ff       	jmp    c001fb53 <Vm::x87Handler(regs*)+0xa9>
c001fd7b:	8d 50 30             	lea    edx,[eax+0x30]
c001fd7e:	80 fa 07             	cmp    dl,0x7
c001fd81:	77 0d                	ja     c001fd90 <Vm::x87Handler(regs*)+0x2e6>
c001fd83:	83 ec 0c             	sub    esp,0xc
c001fd86:	2d d0 00 00 00       	sub    eax,0xd0
c001fd8b:	e9 99 03 00 00       	jmp    c0020129 <Vm::x87Handler(regs*)+0x67f>
c001fd90:	8d 50 28             	lea    edx,[eax+0x28]
c001fd93:	80 fa 07             	cmp    dl,0x7
c001fd96:	77 0d                	ja     c001fda5 <Vm::x87Handler(regs*)+0x2fb>
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	2d d8 00 00 00       	sub    eax,0xd8
c001fda0:	e9 c0 03 00 00       	jmp    c0020165 <Vm::x87Handler(regs*)+0x6bb>
c001fda5:	8d 50 20             	lea    edx,[eax+0x20]
c001fda8:	80 fa 07             	cmp    dl,0x7
c001fdab:	77 1b                	ja     c001fdc8 <Vm::x87Handler(regs*)+0x31e>
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	2d e0 00 00 00       	sub    eax,0xe0
c001fdb5:	50                   	push   eax
c001fdb6:	e8 b2 fb ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fdbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc2:	89 c6                	mov    esi,eax
c001fdc4:	89 d7                	mov    edi,edx
c001fdc6:	eb 22                	jmp    c001fdea <Vm::x87Handler(regs*)+0x340>
c001fdc8:	8d 50 18             	lea    edx,[eax+0x18]
c001fdcb:	80 fa 07             	cmp    dl,0x7
c001fdce:	77 2d                	ja     c001fdfd <Vm::x87Handler(regs*)+0x353>
c001fdd0:	83 ec 0c             	sub    esp,0xc
c001fdd3:	6a 00                	push   0x0
c001fdd5:	e8 93 fb ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fdda:	89 c6                	mov    esi,eax
c001fddc:	89 d7                	mov    edi,edx
c001fdde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde2:	2d e8 00 00 00       	sub    eax,0xe8
c001fde7:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdea:	e8 7e fb ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fdef:	57                   	push   edi
c001fdf0:	56                   	push   esi
c001fdf1:	52                   	push   edx
c001fdf2:	50                   	push   eax
c001fdf3:	e8 15 fb ff ff       	call   c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdf8:	e9 76 ff ff ff       	jmp    c001fd73 <Vm::x87Handler(regs*)+0x2c9>
c001fdfd:	8d 50 10             	lea    edx,[eax+0x10]
c001fe00:	80 fa 07             	cmp    dl,0x7
c001fe03:	77 1b                	ja     c001fe20 <Vm::x87Handler(regs*)+0x376>
c001fe05:	83 ec 0c             	sub    esp,0xc
c001fe08:	2d f0 00 00 00       	sub    eax,0xf0
c001fe0d:	50                   	push   eax
c001fe0e:	e8 5a fb ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fe13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe1a:	89 c6                	mov    esi,eax
c001fe1c:	89 d7                	mov    edi,edx
c001fe1e:	eb 22                	jmp    c001fe42 <Vm::x87Handler(regs*)+0x398>
c001fe20:	3c f7                	cmp    al,0xf7
c001fe22:	0f 86 d1 03 00 00    	jbe    c00201f9 <Vm::x87Handler(regs*)+0x74f>
c001fe28:	83 ec 0c             	sub    esp,0xc
c001fe2b:	6a 00                	push   0x0
c001fe2d:	e8 3b fb ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fe32:	89 c6                	mov    esi,eax
c001fe34:	89 d7                	mov    edi,edx
c001fe36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe3a:	2d f8 00 00 00       	sub    eax,0xf8
c001fe3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe42:	e8 26 fb ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fe47:	57                   	push   edi
c001fe48:	56                   	push   esi
c001fe49:	52                   	push   edx
c001fe4a:	50                   	push   eax
c001fe4b:	e8 eb fa ff ff       	call   c001f93b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe50:	83 c4 1c             	add    esp,0x1c
c001fe53:	52                   	push   edx
c001fe54:	50                   	push   eax
c001fe55:	6a 00                	push   0x0
c001fe57:	e9 51 02 00 00       	jmp    c00200ad <Vm::x87Handler(regs*)+0x603>
c001fe5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe60:	8d 50 40             	lea    edx,[eax+0x40]
c001fe63:	80 fa 07             	cmp    dl,0x7
c001fe66:	77 37                	ja     c001fe9f <Vm::x87Handler(regs*)+0x3f5>
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	2d c0 00 00 00       	sub    eax,0xc0
c001fe70:	50                   	push   eax
c001fe71:	e8 f7 fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fe76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe7d:	89 c6                	mov    esi,eax
c001fe7f:	89 d7                	mov    edi,edx
c001fe81:	e8 e7 fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fe86:	57                   	push   edi
c001fe87:	56                   	push   esi
c001fe88:	52                   	push   edx
c001fe89:	50                   	push   eax
c001fe8a:	e8 54 fa ff ff       	call   c001f8e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe8f:	83 c4 1c             	add    esp,0x1c
c001fe92:	52                   	push   edx
c001fe93:	50                   	push   eax
c001fe94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe98:	2d c0 00 00 00       	sub    eax,0xc0
c001fe9d:	eb 3d                	jmp    c001fedc <Vm::x87Handler(regs*)+0x432>
c001fe9f:	8d 50 38             	lea    edx,[eax+0x38]
c001fea2:	80 fa 07             	cmp    dl,0x7
c001fea5:	77 3b                	ja     c001fee2 <Vm::x87Handler(regs*)+0x438>
c001fea7:	83 ec 0c             	sub    esp,0xc
c001feaa:	2d c8 00 00 00       	sub    eax,0xc8
c001feaf:	50                   	push   eax
c001feb0:	e8 b8 fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001feb5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001febc:	89 c6                	mov    esi,eax
c001febe:	89 d7                	mov    edi,edx
c001fec0:	e8 a8 fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fec5:	57                   	push   edi
c001fec6:	56                   	push   esi
c001fec7:	52                   	push   edx
c001fec8:	50                   	push   eax
c001fec9:	e8 4e fa ff ff       	call   c001f91c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fece:	83 c4 1c             	add    esp,0x1c
c001fed1:	52                   	push   edx
c001fed2:	50                   	push   eax
c001fed3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed7:	2d c8 00 00 00       	sub    eax,0xc8
c001fedc:	50                   	push   eax
c001fedd:	e9 75 fc ff ff       	jmp    c001fb57 <Vm::x87Handler(regs*)+0xad>
c001fee2:	83 c0 18             	add    eax,0x18
c001fee5:	3c 07                	cmp    al,0x7
c001fee7:	0f 87 3b 04 00 00    	ja     c0020328 <Vm::x87Handler(regs*)+0x87e>
c001feed:	83 ec 0c             	sub    esp,0xc
c001fef0:	6a 00                	push   0x0
c001fef2:	e8 76 fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001fef7:	89 c6                	mov    esi,eax
c001fef9:	89 d7                	mov    edi,edx
c001fefb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feff:	2d e8 00 00 00       	sub    eax,0xe8
c001ff04:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff07:	e8 61 fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ff0c:	57                   	push   edi
c001ff0d:	56                   	push   esi
c001ff0e:	52                   	push   edx
c001ff0f:	50                   	push   eax
c001ff10:	e8 f8 f9 ff ff       	call   c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff15:	83 c4 1c             	add    esp,0x1c
c001ff18:	52                   	push   edx
c001ff19:	50                   	push   eax
c001ff1a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff1e:	2d e8 00 00 00       	sub    eax,0xe8
c001ff23:	eb b7                	jmp    c001fedc <Vm::x87Handler(regs*)+0x432>
c001ff25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff29:	8d 50 40             	lea    edx,[eax+0x40]
c001ff2c:	80 fa 07             	cmp    dl,0x7
c001ff2f:	77 3a                	ja     c001ff6b <Vm::x87Handler(regs*)+0x4c1>
c001ff31:	83 ec 0c             	sub    esp,0xc
c001ff34:	2d c0 00 00 00       	sub    eax,0xc0
c001ff39:	50                   	push   eax
c001ff3a:	e8 2e fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ff3f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff46:	89 c6                	mov    esi,eax
c001ff48:	89 d7                	mov    edi,edx
c001ff4a:	e8 1e fa ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ff4f:	57                   	push   edi
c001ff50:	56                   	push   esi
c001ff51:	52                   	push   edx
c001ff52:	50                   	push   eax
c001ff53:	e8 8b f9 ff ff       	call   c001f8e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff58:	83 c4 1c             	add    esp,0x1c
c001ff5b:	52                   	push   edx
c001ff5c:	50                   	push   eax
c001ff5d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff61:	2d c0 00 00 00       	sub    eax,0xc0
c001ff66:	e9 9e 01 00 00       	jmp    c0020109 <Vm::x87Handler(regs*)+0x65f>
c001ff6b:	8d 50 20             	lea    edx,[eax+0x20]
c001ff6e:	80 fa 07             	cmp    dl,0x7
c001ff71:	77 3a                	ja     c001ffad <Vm::x87Handler(regs*)+0x503>
c001ff73:	83 ec 0c             	sub    esp,0xc
c001ff76:	2d e0 00 00 00       	sub    eax,0xe0
c001ff7b:	50                   	push   eax
c001ff7c:	e8 ec f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ff81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff88:	89 c6                	mov    esi,eax
c001ff8a:	89 d7                	mov    edi,edx
c001ff8c:	e8 dc f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ff91:	57                   	push   edi
c001ff92:	56                   	push   esi
c001ff93:	52                   	push   edx
c001ff94:	50                   	push   eax
c001ff95:	e8 73 f9 ff ff       	call   c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff9a:	83 c4 1c             	add    esp,0x1c
c001ff9d:	52                   	push   edx
c001ff9e:	50                   	push   eax
c001ff9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa3:	2d e0 00 00 00       	sub    eax,0xe0
c001ffa8:	e9 5c 01 00 00       	jmp    c0020109 <Vm::x87Handler(regs*)+0x65f>
c001ffad:	8d 50 18             	lea    edx,[eax+0x18]
c001ffb0:	80 fa 07             	cmp    dl,0x7
c001ffb3:	77 3b                	ja     c001fff0 <Vm::x87Handler(regs*)+0x546>
c001ffb5:	83 ec 0c             	sub    esp,0xc
c001ffb8:	6a 00                	push   0x0
c001ffba:	e8 ae f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ffbf:	89 c6                	mov    esi,eax
c001ffc1:	89 d7                	mov    edi,edx
c001ffc3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc7:	2d e8 00 00 00       	sub    eax,0xe8
c001ffcc:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffcf:	e8 99 f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c001ffd4:	57                   	push   edi
c001ffd5:	56                   	push   esi
c001ffd6:	52                   	push   edx
c001ffd7:	50                   	push   eax
c001ffd8:	e8 30 f9 ff ff       	call   c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffdd:	83 c4 1c             	add    esp,0x1c
c001ffe0:	52                   	push   edx
c001ffe1:	50                   	push   eax
c001ffe2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe6:	2d e8 00 00 00       	sub    eax,0xe8
c001ffeb:	e9 19 01 00 00       	jmp    c0020109 <Vm::x87Handler(regs*)+0x65f>
c001fff0:	8d 50 38             	lea    edx,[eax+0x38]
c001fff3:	80 fa 07             	cmp    dl,0x7
c001fff6:	77 37                	ja     c002002f <Vm::x87Handler(regs*)+0x585>
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	2d c8 00 00 00       	sub    eax,0xc8
c0020000:	50                   	push   eax
c0020001:	e8 67 f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020006:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000d:	89 c6                	mov    esi,eax
c002000f:	89 d7                	mov    edi,edx
c0020011:	e8 57 f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020016:	57                   	push   edi
c0020017:	56                   	push   esi
c0020018:	52                   	push   edx
c0020019:	50                   	push   eax
c002001a:	e8 fd f8 ff ff       	call   c001f91c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002001f:	83 c4 1c             	add    esp,0x1c
c0020022:	52                   	push   edx
c0020023:	50                   	push   eax
c0020024:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020028:	2d c8 00 00 00       	sub    eax,0xc8
c002002d:	eb 7d                	jmp    c00200ac <Vm::x87Handler(regs*)+0x602>
c002002f:	3c f7                	cmp    al,0xf7
c0020031:	76 38                	jbe    c002006b <Vm::x87Handler(regs*)+0x5c1>
c0020033:	83 ec 0c             	sub    esp,0xc
c0020036:	6a 00                	push   0x0
c0020038:	e8 30 f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002003d:	89 c6                	mov    esi,eax
c002003f:	89 d7                	mov    edi,edx
c0020041:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020045:	2d f8 00 00 00       	sub    eax,0xf8
c002004a:	89 04 24             	mov    DWORD PTR [esp],eax
c002004d:	e8 1b f9 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020052:	57                   	push   edi
c0020053:	56                   	push   esi
c0020054:	52                   	push   edx
c0020055:	50                   	push   eax
c0020056:	e8 e0 f8 ff ff       	call   c001f93b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002005b:	83 c4 1c             	add    esp,0x1c
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020064:	2d f8 00 00 00       	sub    eax,0xf8
c0020069:	eb 41                	jmp    c00200ac <Vm::x87Handler(regs*)+0x602>
c002006b:	8d 50 10             	lea    edx,[eax+0x10]
c002006e:	80 fa 07             	cmp    dl,0x7
c0020071:	0f 87 5a 01 00 00    	ja     c00201d1 <Vm::x87Handler(regs*)+0x727>
c0020077:	83 ec 0c             	sub    esp,0xc
c002007a:	2d f0 00 00 00       	sub    eax,0xf0
c002007f:	50                   	push   eax
c0020080:	e8 e8 f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020085:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002008c:	89 c6                	mov    esi,eax
c002008e:	89 d7                	mov    edi,edx
c0020090:	e8 d8 f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020095:	57                   	push   edi
c0020096:	56                   	push   esi
c0020097:	52                   	push   edx
c0020098:	50                   	push   eax
c0020099:	e8 9d f8 ff ff       	call   c001f93b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002009e:	83 c4 1c             	add    esp,0x1c
c00200a1:	52                   	push   edx
c00200a2:	50                   	push   eax
c00200a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a7:	2d f0 00 00 00       	sub    eax,0xf0
c00200ac:	50                   	push   eax
c00200ad:	e8 fe f8 ff ff       	call   c001f9b0 <Vm::fpuSetReg(int, unsigned long long)>
c00200b2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200b6:	e8 9d f9 ff ff       	call   c001fa58 <Vm::fpuPop()>
c00200bb:	e9 5e fa ff ff       	jmp    c001fb1e <Vm::x87Handler(regs*)+0x74>
c00200c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c4:	8d 50 30             	lea    edx,[eax+0x30]
c00200c7:	80 fa 07             	cmp    dl,0x7
c00200ca:	77 1d                	ja     c00200e9 <Vm::x87Handler(regs*)+0x63f>
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	6a 00                	push   0x0
c00200d1:	e8 97 f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00200d6:	83 c4 0c             	add    esp,0xc
c00200d9:	52                   	push   edx
c00200da:	50                   	push   eax
c00200db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200df:	2d d0 00 00 00       	sub    eax,0xd0
c00200e4:	e9 f3 fd ff ff       	jmp    c001fedc <Vm::x87Handler(regs*)+0x432>
c00200e9:	8d 50 28             	lea    edx,[eax+0x28]
c00200ec:	80 fa 07             	cmp    dl,0x7
c00200ef:	77 28                	ja     c0020119 <Vm::x87Handler(regs*)+0x66f>
c00200f1:	83 ec 0c             	sub    esp,0xc
c00200f4:	6a 00                	push   0x0
c00200f6:	e8 72 f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00200fb:	83 c4 0c             	add    esp,0xc
c00200fe:	52                   	push   edx
c00200ff:	50                   	push   eax
c0020100:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020104:	2d d8 00 00 00       	sub    eax,0xd8
c0020109:	50                   	push   eax
c002010a:	e8 a1 f8 ff ff       	call   c001f9b0 <Vm::fpuSetReg(int, unsigned long long)>
c002010f:	e8 44 f9 ff ff       	call   c001fa58 <Vm::fpuPop()>
c0020114:	e9 01 fa ff ff       	jmp    c001fb1a <Vm::x87Handler(regs*)+0x70>
c0020119:	8d 50 20             	lea    edx,[eax+0x20]
c002011c:	80 fa 07             	cmp    dl,0x7
c002011f:	77 30                	ja     c0020151 <Vm::x87Handler(regs*)+0x6a7>
c0020121:	83 ec 0c             	sub    esp,0xc
c0020124:	2d e0 00 00 00       	sub    eax,0xe0
c0020129:	50                   	push   eax
c002012a:	e8 3e f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002012f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020136:	89 c6                	mov    esi,eax
c0020138:	89 d7                	mov    edi,edx
c002013a:	e8 2e f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002013f:	57                   	push   edi
c0020140:	56                   	push   esi
c0020141:	52                   	push   edx
c0020142:	50                   	push   eax
c0020143:	e8 48 f7 ff ff       	call   c001f890 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020148:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002014c:	e9 54 02 00 00       	jmp    c00203a5 <Vm::x87Handler(regs*)+0x8fb>
c0020151:	8d 50 18             	lea    edx,[eax+0x18]
c0020154:	80 fa 07             	cmp    dl,0x7
c0020157:	0f 87 43 fb ff ff    	ja     c001fca0 <Vm::x87Handler(regs*)+0x1f6>
c002015d:	83 ec 0c             	sub    esp,0xc
c0020160:	2d e8 00 00 00       	sub    eax,0xe8
c0020165:	50                   	push   eax
c0020166:	e8 02 f8 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002016b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020172:	89 c6                	mov    esi,eax
c0020174:	89 d7                	mov    edi,edx
c0020176:	e8 f2 f7 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002017b:	57                   	push   edi
c002017c:	56                   	push   esi
c002017d:	52                   	push   edx
c002017e:	50                   	push   eax
c002017f:	e8 0c f7 ff ff       	call   c001f890 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020184:	83 c4 20             	add    esp,0x20
c0020187:	e8 cc f8 ff ff       	call   c001fa58 <Vm::fpuPop()>
c002018c:	eb 62                	jmp    c00201f0 <Vm::x87Handler(regs*)+0x746>
c002018e:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020192:	0f 85 0f 01 00 00    	jne    c00202a7 <Vm::x87Handler(regs*)+0x7fd>
c0020198:	83 ec 0c             	sub    esp,0xc
c002019b:	6a 01                	push   0x1
c002019d:	e8 cb f7 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00201a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a9:	89 c6                	mov    esi,eax
c00201ab:	89 d7                	mov    edi,edx
c00201ad:	e8 bb f7 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00201b2:	57                   	push   edi
c00201b3:	56                   	push   esi
c00201b4:	52                   	push   edx
c00201b5:	50                   	push   eax
c00201b6:	e8 d5 f6 ff ff       	call   c001f890 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201bb:	83 c4 20             	add    esp,0x20
c00201be:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201c2:	e8 91 f8 ff ff       	call   c001fa58 <Vm::fpuPop()>
c00201c7:	e8 8c f8 ff ff       	call   c001fa58 <Vm::fpuPop()>
c00201cc:	e9 50 f9 ff ff       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x77>
c00201d1:	3c d9                	cmp    al,0xd9
c00201d3:	0f 85 b5 02 00 00    	jne    c002048e <Vm::x87Handler(regs*)+0x9e4>
c00201d9:	eb bd                	jmp    c0020198 <Vm::x87Handler(regs*)+0x6ee>
c00201db:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00201df:	0f 85 ea 02 00 00    	jne    c00204cf <Vm::x87Handler(regs*)+0xa25>
c00201e5:	0f b7 05 80 1a 03 c0 	movzx  eax,WORD PTR ds:0xc0031a80
c00201ec:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00201f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201f4:	e9 28 f9 ff ff       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x77>
c00201f9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201fd:	84 d2                	test   dl,dl
c00201ff:	75 0f                	jne    c0020210 <Vm::x87Handler(regs*)+0x766>
c0020201:	83 ec 0c             	sub    esp,0xc
c0020204:	ff 36                	push   DWORD PTR [esi]
c0020206:	e8 b1 f4 ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c002020b:	e9 2c 01 00 00       	jmp    c002033c <Vm::x87Handler(regs*)+0x892>
c0020210:	80 fa 01             	cmp    dl,0x1
c0020213:	75 0f                	jne    c0020224 <Vm::x87Handler(regs*)+0x77a>
c0020215:	83 ec 0c             	sub    esp,0xc
c0020218:	ff 36                	push   DWORD PTR [esi]
c002021a:	e8 9d f4 ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c002021f:	e9 81 02 00 00       	jmp    c00204a5 <Vm::x87Handler(regs*)+0x9fb>
c0020224:	80 fa 04             	cmp    dl,0x4
c0020227:	75 0f                	jne    c0020238 <Vm::x87Handler(regs*)+0x78e>
c0020229:	83 ec 0c             	sub    esp,0xc
c002022c:	ff 36                	push   DWORD PTR [esi]
c002022e:	e8 89 f4 ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c0020233:	e9 86 01 00 00       	jmp    c00203be <Vm::x87Handler(regs*)+0x914>
c0020238:	80 fa 05             	cmp    dl,0x5
c002023b:	75 1b                	jne    c0020258 <Vm::x87Handler(regs*)+0x7ae>
c002023d:	83 ec 0c             	sub    esp,0xc
c0020240:	6a 00                	push   0x0
c0020242:	e8 26 f7 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020247:	89 c7                	mov    edi,eax
c0020249:	89 d5                	mov    ebp,edx
c002024b:	58                   	pop    eax
c002024c:	ff 36                	push   DWORD PTR [esi]
c002024e:	e8 69 f4 ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c0020253:	e9 a3 01 00 00       	jmp    c00203fb <Vm::x87Handler(regs*)+0x951>
c0020258:	80 fa 06             	cmp    dl,0x6
c002025b:	75 0f                	jne    c002026c <Vm::x87Handler(regs*)+0x7c2>
c002025d:	83 ec 0c             	sub    esp,0xc
c0020260:	ff 36                	push   DWORD PTR [esi]
c0020262:	e8 55 f4 ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c0020267:	e9 ae 01 00 00       	jmp    c002041a <Vm::x87Handler(regs*)+0x970>
c002026c:	31 c0                	xor    eax,eax
c002026e:	80 fa 07             	cmp    dl,0x7
c0020271:	0f 85 94 02 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c0020277:	83 ec 0c             	sub    esp,0xc
c002027a:	6a 00                	push   0x0
c002027c:	e8 ec f6 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020281:	89 c7                	mov    edi,eax
c0020283:	89 d5                	mov    ebp,edx
c0020285:	58                   	pop    eax
c0020286:	ff 36                	push   DWORD PTR [esi]
c0020288:	e8 2f f4 ff ff       	call   c001f6bc <Vm::fpu32ToInternal(unsigned int)>
c002028d:	e9 cb 01 00 00       	jmp    c002045d <Vm::x87Handler(regs*)+0x9b3>
c0020292:	80 fa 03             	cmp    dl,0x3
c0020295:	0f 85 d3 01 00 00    	jne    c002046e <Vm::x87Handler(regs*)+0x9c4>
c002029b:	e8 b8 f7 ff ff       	call   c001fa58 <Vm::fpuPop()>
c00202a0:	51                   	push   ecx
c00202a1:	51                   	push   ecx
c00202a2:	e9 de 01 00 00       	jmp    c0020485 <Vm::x87Handler(regs*)+0x9db>
c00202a7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202ab:	80 fa 01             	cmp    dl,0x1
c00202ae:	75 09                	jne    c00202b9 <Vm::x87Handler(regs*)+0x80f>
c00202b0:	57                   	push   edi
c00202b1:	57                   	push   edi
c00202b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00202b4:	e9 e3 01 00 00       	jmp    c002049c <Vm::x87Handler(regs*)+0x9f2>
c00202b9:	80 fa 04             	cmp    dl,0x4
c00202bc:	75 12                	jne    c00202d0 <Vm::x87Handler(regs*)+0x826>
c00202be:	31 d2                	xor    edx,edx
c00202c0:	51                   	push   ecx
c00202c1:	51                   	push   ecx
c00202c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00202c4:	52                   	push   edx
c00202c5:	50                   	push   eax
c00202c6:	e8 d0 f4 ff ff       	call   c001f79b <Vm::fpuLongToFloat(long long)>
c00202cb:	e9 ee 00 00 00       	jmp    c00203be <Vm::x87Handler(regs*)+0x914>
c00202d0:	31 c0                	xor    eax,eax
c00202d2:	80 fa 07             	cmp    dl,0x7
c00202d5:	0f 85 30 02 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c00202db:	83 ec 0c             	sub    esp,0xc
c00202de:	6a 00                	push   0x0
c00202e0:	e8 88 f6 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00202e5:	89 c7                	mov    edi,eax
c00202e7:	89 d5                	mov    ebp,edx
c00202e9:	58                   	pop    eax
c00202ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00202ec:	5a                   	pop    edx
c00202ed:	31 d2                	xor    edx,edx
c00202ef:	52                   	push   edx
c00202f0:	50                   	push   eax
c00202f1:	e8 a5 f4 ff ff       	call   c001f79b <Vm::fpuLongToFloat(long long)>
c00202f6:	e9 62 01 00 00       	jmp    c002045d <Vm::x87Handler(regs*)+0x9b3>
c00202fb:	84 d2                	test   dl,dl
c00202fd:	75 0d                	jne    c002030c <Vm::x87Handler(regs*)+0x862>
c00202ff:	31 d2                	xor    edx,edx
c0020301:	55                   	push   ebp
c0020302:	55                   	push   ebp
c0020303:	8b 06                	mov    eax,DWORD PTR [esi]
c0020305:	52                   	push   edx
c0020306:	50                   	push   eax
c0020307:	e9 d3 01 00 00       	jmp    c00204df <Vm::x87Handler(regs*)+0xa35>
c002030c:	31 c0                	xor    eax,eax
c002030e:	80 fa 02             	cmp    dl,0x2
c0020311:	0f 85 f4 01 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c0020317:	83 ec 0c             	sub    esp,0xc
c002031a:	6a 00                	push   0x0
c002031c:	e8 4c f6 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020321:	59                   	pop    ecx
c0020322:	5f                   	pop    edi
c0020323:	e9 6a f9 ff ff       	jmp    c001fc92 <Vm::x87Handler(regs*)+0x1e8>
c0020328:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002032c:	84 d2                	test   dl,dl
c002032e:	75 2a                	jne    c002035a <Vm::x87Handler(regs*)+0x8b0>
c0020330:	50                   	push   eax
c0020331:	50                   	push   eax
c0020332:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020335:	ff 36                	push   DWORD PTR [esi]
c0020337:	e8 c5 f3 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c002033c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020343:	89 c6                	mov    esi,eax
c0020345:	89 d7                	mov    edi,edx
c0020347:	e8 21 f6 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002034c:	57                   	push   edi
c002034d:	56                   	push   esi
c002034e:	52                   	push   edx
c002034f:	50                   	push   eax
c0020350:	e8 8e f5 ff ff       	call   c001f8e3 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020355:	e9 64 01 00 00       	jmp    c00204be <Vm::x87Handler(regs*)+0xa14>
c002035a:	80 fa 01             	cmp    dl,0x1
c002035d:	75 11                	jne    c0020370 <Vm::x87Handler(regs*)+0x8c6>
c002035f:	50                   	push   eax
c0020360:	50                   	push   eax
c0020361:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020364:	ff 36                	push   DWORD PTR [esi]
c0020366:	e8 96 f3 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c002036b:	e9 35 01 00 00       	jmp    c00204a5 <Vm::x87Handler(regs*)+0x9fb>
c0020370:	80 fa 02             	cmp    dl,0x2
c0020373:	0f 85 54 f9 ff ff    	jne    c001fccd <Vm::x87Handler(regs*)+0x223>
c0020379:	55                   	push   ebp
c002037a:	55                   	push   ebp
c002037b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002037e:	ff 36                	push   DWORD PTR [esi]
c0020380:	e8 7c f3 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c0020385:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002038c:	89 c6                	mov    esi,eax
c002038e:	89 d7                	mov    edi,edx
c0020390:	e8 d8 f5 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020395:	57                   	push   edi
c0020396:	56                   	push   esi
c0020397:	52                   	push   edx
c0020398:	50                   	push   eax
c0020399:	e8 f2 f4 ff ff       	call   c001f890 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002039e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203a2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203a5:	83 c4 20             	add    esp,0x20
c00203a8:	e9 74 f7 ff ff       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x77>
c00203ad:	80 fa 04             	cmp    dl,0x4
c00203b0:	75 2a                	jne    c00203dc <Vm::x87Handler(regs*)+0x932>
c00203b2:	51                   	push   ecx
c00203b3:	51                   	push   ecx
c00203b4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b7:	ff 36                	push   DWORD PTR [esi]
c00203b9:	e8 43 f3 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c00203be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203c5:	89 c6                	mov    esi,eax
c00203c7:	89 d7                	mov    edi,edx
c00203c9:	e8 9f f5 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00203ce:	57                   	push   edi
c00203cf:	56                   	push   esi
c00203d0:	52                   	push   edx
c00203d1:	50                   	push   eax
c00203d2:	e8 36 f5 ff ff       	call   c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>
c00203d7:	e9 e2 00 00 00       	jmp    c00204be <Vm::x87Handler(regs*)+0xa14>
c00203dc:	80 fa 05             	cmp    dl,0x5
c00203df:	75 28                	jne    c0020409 <Vm::x87Handler(regs*)+0x95f>
c00203e1:	83 ec 0c             	sub    esp,0xc
c00203e4:	6a 00                	push   0x0
c00203e6:	e8 82 f5 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00203eb:	89 c7                	mov    edi,eax
c00203ed:	89 d5                	mov    ebp,edx
c00203ef:	58                   	pop    eax
c00203f0:	5a                   	pop    edx
c00203f1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203f4:	ff 36                	push   DWORD PTR [esi]
c00203f6:	e8 06 f3 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c00203fb:	83 c4 10             	add    esp,0x10
c00203fe:	55                   	push   ebp
c00203ff:	57                   	push   edi
c0020400:	52                   	push   edx
c0020401:	50                   	push   eax
c0020402:	e8 06 f5 ff ff       	call   c001f90d <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020407:	eb 60                	jmp    c0020469 <Vm::x87Handler(regs*)+0x9bf>
c0020409:	80 fa 06             	cmp    dl,0x6
c002040c:	75 2a                	jne    c0020438 <Vm::x87Handler(regs*)+0x98e>
c002040e:	51                   	push   ecx
c002040f:	51                   	push   ecx
c0020410:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020413:	ff 36                	push   DWORD PTR [esi]
c0020415:	e8 e7 f2 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c002041a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020421:	89 c6                	mov    esi,eax
c0020423:	89 d7                	mov    edi,edx
c0020425:	e8 43 f5 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002042a:	57                   	push   edi
c002042b:	56                   	push   esi
c002042c:	52                   	push   edx
c002042d:	50                   	push   eax
c002042e:	e8 08 f5 ff ff       	call   c001f93b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020433:	e9 86 00 00 00       	jmp    c00204be <Vm::x87Handler(regs*)+0xa14>
c0020438:	31 c0                	xor    eax,eax
c002043a:	80 fa 07             	cmp    dl,0x7
c002043d:	0f 85 c8 00 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c0020443:	83 ec 0c             	sub    esp,0xc
c0020446:	6a 00                	push   0x0
c0020448:	e8 20 f5 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c002044d:	89 c7                	mov    edi,eax
c002044f:	89 d5                	mov    ebp,edx
c0020451:	58                   	pop    eax
c0020452:	5a                   	pop    edx
c0020453:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020456:	ff 36                	push   DWORD PTR [esi]
c0020458:	e8 a4 f2 ff ff       	call   c001f701 <Vm::fpu64ToInternal(unsigned long long)>
c002045d:	83 c4 10             	add    esp,0x10
c0020460:	55                   	push   ebp
c0020461:	57                   	push   edi
c0020462:	52                   	push   edx
c0020463:	50                   	push   eax
c0020464:	e8 d2 f4 ff ff       	call   c001f93b <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020469:	83 c4 0c             	add    esp,0xc
c002046c:	eb 53                	jmp    c00204c1 <Vm::x87Handler(regs*)+0xa17>
c002046e:	31 c0                	xor    eax,eax
c0020470:	80 fa 02             	cmp    dl,0x2
c0020473:	0f 85 92 00 00 00    	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c0020479:	83 ec 0c             	sub    esp,0xc
c002047c:	6a 00                	push   0x0
c002047e:	e8 ea f4 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c0020483:	59                   	pop    ecx
c0020484:	5f                   	pop    edi
c0020485:	52                   	push   edx
c0020486:	50                   	push   eax
c0020487:	e8 27 f2 ff ff       	call   c001f6b3 <Vm::fpuInternalTo64(unsigned long long)>
c002048c:	eb 70                	jmp    c00204fe <Vm::x87Handler(regs*)+0xa54>
c002048e:	31 c0                	xor    eax,eax
c0020490:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020495:	75 74                	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c0020497:	50                   	push   eax
c0020498:	50                   	push   eax
c0020499:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002049c:	31 d2                	xor    edx,edx
c002049e:	52                   	push   edx
c002049f:	50                   	push   eax
c00204a0:	e8 f6 f2 ff ff       	call   c001f79b <Vm::fpuLongToFloat(long long)>
c00204a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ac:	89 c6                	mov    esi,eax
c00204ae:	89 d7                	mov    edi,edx
c00204b0:	e8 b8 f4 ff ff       	call   c001f96d <Vm::fpuGetReg(int)>
c00204b5:	57                   	push   edi
c00204b6:	56                   	push   esi
c00204b7:	52                   	push   edx
c00204b8:	50                   	push   eax
c00204b9:	e8 5e f4 ff ff       	call   c001f91c <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204be:	83 c4 1c             	add    esp,0x1c
c00204c1:	52                   	push   edx
c00204c2:	50                   	push   eax
c00204c3:	6a 00                	push   0x0
c00204c5:	e8 e6 f4 ff ff       	call   c001f9b0 <Vm::fpuSetReg(int, unsigned long long)>
c00204ca:	e9 f2 f7 ff ff       	jmp    c001fcc1 <Vm::x87Handler(regs*)+0x217>
c00204cf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204d3:	80 fa 05             	cmp    dl,0x5
c00204d6:	75 11                	jne    c00204e9 <Vm::x87Handler(regs*)+0xa3f>
c00204d8:	55                   	push   ebp
c00204d9:	55                   	push   ebp
c00204da:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204dd:	ff 36                	push   DWORD PTR [esi]
c00204df:	e8 81 f2 ff ff       	call   c001f765 <Vm::fpuULongToFloat(unsigned long long)>
c00204e4:	e9 cf f7 ff ff       	jmp    c001fcb8 <Vm::x87Handler(regs*)+0x20e>
c00204e9:	31 c0                	xor    eax,eax
c00204eb:	80 fa 07             	cmp    dl,0x7
c00204ee:	75 1b                	jne    c002050b <Vm::x87Handler(regs*)+0xa61>
c00204f0:	e8 63 f5 ff ff       	call   c001fa58 <Vm::fpuPop()>
c00204f5:	51                   	push   ecx
c00204f6:	51                   	push   ecx
c00204f7:	52                   	push   edx
c00204f8:	50                   	push   eax
c00204f9:	e8 0c f2 ff ff       	call   c001f70a <Vm::fpuFloatToLong(unsigned long long)>
c00204fe:	83 c4 10             	add    esp,0x10
c0020501:	89 06                	mov    DWORD PTR [esi],eax
c0020503:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020506:	e9 f8 f7 ff ff       	jmp    c001fd03 <Vm::x87Handler(regs*)+0x259>
c002050b:	83 c4 1c             	add    esp,0x1c
c002050e:	5b                   	pop    ebx
c002050f:	5e                   	pop    esi
c0020510:	5f                   	pop    edi
c0020511:	5d                   	pop    ebp
c0020512:	c3                   	ret    

c0020513 <__static_initialization_and_destruction_0(int, int)>:
c0020513:	83 ec 0c             	sub    esp,0xc
c0020516:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002051b:	75 1a                	jne    c0020537 <__static_initialization_and_destruction_0(int, int)+0x24>
c002051d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020525:	75 10                	jne    c0020537 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020527:	83 ec 0c             	sub    esp,0xc
c002052a:	68 80 1a 03 c0       	push   0xc0031a80
c002052f:	e8 0c 88 00 00       	call   c0028d40 <Vm::_FPUState::_FPUState()>
c0020534:	83 c4 10             	add    esp,0x10
c0020537:	90                   	nop
c0020538:	83 c4 0c             	add    esp,0xc
c002053b:	c3                   	ret    

c002053c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002053c:	83 ec 0c             	sub    esp,0xc
c002053f:	83 ec 08             	sub    esp,0x8
c0020542:	68 ff ff 00 00       	push   0xffff
c0020547:	6a 01                	push   0x1
c0020549:	e8 c5 ff ff ff       	call   c0020513 <__static_initialization_and_destruction_0(int, int)>
c002054e:	83 c4 10             	add    esp,0x10
c0020551:	83 c4 0c             	add    esp,0xc
c0020554:	c3                   	ret    
c0020555:	90                   	nop

c0020556 <FAT::getName()>:
c0020556:	b8 9c c8 02 c0       	mov    eax,0xc002c89c
c002055b:	c3                   	ret    

c002055c <FAT::tell(void*, unsigned long long*)>:
c002055c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020561:	75 06                	jne    c0020569 <FAT::tell(void*, unsigned long long*)+0xd>
c0020563:	b8 04 00 00 00       	mov    eax,0x4
c0020568:	c3                   	ret    
c0020569:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002056e:	75 06                	jne    c0020576 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020570:	b8 04 00 00 00       	mov    eax,0x4
c0020575:	c3                   	ret    
c0020576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002057a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002057d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020584:	89 01                	mov    DWORD PTR [ecx],eax
c0020586:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020589:	b8 00 00 00 00       	mov    eax,0x0
c002058e:	c3                   	ret    
c002058f:	90                   	nop

c0020590 <FAT::stat(void*, unsigned long long*)>:
c0020590:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020595:	75 06                	jne    c002059d <FAT::stat(void*, unsigned long long*)+0xd>
c0020597:	b8 04 00 00 00       	mov    eax,0x4
c002059c:	c3                   	ret    
c002059d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205a2:	75 06                	jne    c00205aa <FAT::stat(void*, unsigned long long*)+0x1a>
c00205a4:	b8 04 00 00 00       	mov    eax,0x4
c00205a9:	c3                   	ret    
c00205aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205b8:	89 01                	mov    DWORD PTR [ecx],eax
c00205ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205bd:	b8 00 00 00 00       	mov    eax,0x0
c00205c2:	c3                   	ret    
c00205c3:	90                   	nop

c00205c4 <FAT::~FAT()>:
c00205c4:	83 ec 0c             	sub    esp,0xc
c00205c7:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c00205cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d0:	89 10                	mov    DWORD PTR [eax],edx
c00205d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d6:	83 ec 0c             	sub    esp,0xc
c00205d9:	50                   	push   eax
c00205da:	e8 bd 2c ff ff       	call   c001329c <Filesystem::~Filesystem()>
c00205df:	83 c4 10             	add    esp,0x10
c00205e2:	90                   	nop
c00205e3:	83 c4 0c             	add    esp,0xc
c00205e6:	c3                   	ret    
c00205e7:	90                   	nop

c00205e8 <FAT::~FAT()>:
c00205e8:	83 ec 0c             	sub    esp,0xc
c00205eb:	83 ec 0c             	sub    esp,0xc
c00205ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205f2:	e8 cd ff ff ff       	call   c00205c4 <FAT::~FAT()>
c00205f7:	83 c4 10             	add    esp,0x10
c00205fa:	83 ec 08             	sub    esp,0x8
c00205fd:	6a 08                	push   0x8
c00205ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020603:	e8 8c 28 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0020608:	83 c4 10             	add    esp,0x10
c002060b:	83 c4 0c             	add    esp,0xc
c002060e:	c3                   	ret    
c002060f:	90                   	nop

c0020610 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020610:	83 ec 1c             	sub    esp,0x1c
c0020613:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002061a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002061f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020623:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c002062a:	83 f8 ff             	cmp    eax,0xffffffff
c002062d:	75 34                	jne    c0020663 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002062f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020633:	88 c2                	mov    dl,al
c0020635:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c002063a:	01 d0                	add    eax,edx
c002063c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020640:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c0020646:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002064a:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c0020651:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0020656:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002065a:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0020661:	eb 17                	jmp    c002067a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020663:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020667:	88 c2                	mov    dl,al
c0020669:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002066d:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c0020674:	01 d0                	add    eax,edx
c0020676:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002067a:	83 ec 04             	sub    esp,0x4
c002067d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020681:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020685:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020689:	50                   	push   eax
c002068a:	e8 a9 66 fe ff       	call   c0006d38 <f_getlabel>
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020696:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002069b:	75 07                	jne    c00206a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002069d:	b8 00 00 00 00       	mov    eax,0x0
c00206a2:	eb 05                	jmp    c00206a9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206a4:	b8 01 00 00 00       	mov    eax,0x1
c00206a9:	83 c4 1c             	add    esp,0x1c
c00206ac:	c3                   	ret    
c00206ad:	90                   	nop

c00206ae <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206ae:	57                   	push   edi
c00206af:	83 ec 58             	sub    esp,0x58
c00206b2:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206ba:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206be:	b9 0f 00 00 00       	mov    ecx,0xf
c00206c3:	b8 00 00 00 00       	mov    eax,0x0
c00206c8:	fc                   	cld    
c00206c9:	89 d7                	mov    edi,edx
c00206cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206cd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206d1:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c00206d8:	83 f8 ff             	cmp    eax,0xffffffff
c00206db:	75 34                	jne    c0020711 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00206dd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206e1:	88 c2                	mov    dl,al
c00206e3:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c00206e8:	01 d0                	add    eax,edx
c00206ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206ee:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c00206f4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00206f8:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c00206ff:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0020704:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020708:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c002070f:	eb 17                	jmp    c0020728 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020711:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020715:	88 c2                	mov    dl,al
c0020717:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002071b:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c0020722:	01 d0                	add    eax,edx
c0020724:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020728:	83 ec 08             	sub    esp,0x8
c002072b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002072f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020733:	50                   	push   eax
c0020734:	e8 3b 02 fe ff       	call   c0000974 <strcat>
c0020739:	83 c4 10             	add    esp,0x10
c002073c:	83 ec 0c             	sub    esp,0xc
c002073f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020743:	50                   	push   eax
c0020744:	e8 dd 67 fe ff       	call   c0006f26 <f_setlabel>
c0020749:	83 c4 10             	add    esp,0x10
c002074c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020750:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020755:	75 07                	jne    c002075e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020757:	b8 00 00 00 00       	mov    eax,0x0
c002075c:	eb 05                	jmp    c0020763 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002075e:	b8 01 00 00 00       	mov    eax,0x1
c0020763:	83 c4 58             	add    esp,0x58
c0020766:	5f                   	pop    edi
c0020767:	c3                   	ret    

c0020768 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020768:	83 ec 2c             	sub    esp,0x2c
c002076b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020773:	83 ec 08             	sub    esp,0x8
c0020776:	68 c0 c8 02 c0       	push   0xc002c8c0
c002077b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002077f:	e8 3c 01 fe ff       	call   c00008c0 <strcmp>
c0020784:	83 c4 10             	add    esp,0x10
c0020787:	85 c0                	test   eax,eax
c0020789:	0f 94 c0             	sete   al
c002078c:	84 c0                	test   al,al
c002078e:	74 0d                	je     c002079d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020790:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020798:	e9 a6 00 00 00       	jmp    c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002079d:	83 ec 08             	sub    esp,0x8
c00207a0:	68 b2 c8 02 c0       	push   0xc002c8b2
c00207a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207a9:	e8 12 01 fe ff       	call   c00008c0 <strcmp>
c00207ae:	83 c4 10             	add    esp,0x10
c00207b1:	85 c0                	test   eax,eax
c00207b3:	0f 94 c0             	sete   al
c00207b6:	84 c0                	test   al,al
c00207b8:	74 0a                	je     c00207c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207ba:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207c2:	eb 7f                	jmp    c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207c4:	83 ec 08             	sub    esp,0x8
c00207c7:	68 b8 c8 02 c0       	push   0xc002c8b8
c00207cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207d0:	e8 eb 00 fe ff       	call   c00008c0 <strcmp>
c00207d5:	83 c4 10             	add    esp,0x10
c00207d8:	85 c0                	test   eax,eax
c00207da:	0f 94 c0             	sete   al
c00207dd:	84 c0                	test   al,al
c00207df:	74 0a                	je     c00207eb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00207e1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207e9:	eb 58                	jmp    c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207eb:	83 ec 08             	sub    esp,0x8
c00207ee:	68 ac 94 02 c0       	push   0xc00294ac
c00207f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207f7:	e8 c4 00 fe ff       	call   c00008c0 <strcmp>
c00207fc:	83 c4 10             	add    esp,0x10
c00207ff:	85 c0                	test   eax,eax
c0020801:	0f 94 c0             	sete   al
c0020804:	84 c0                	test   al,al
c0020806:	74 0a                	je     c0020812 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020808:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020810:	eb 31                	jmp    c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020812:	83 ec 08             	sub    esp,0x8
c0020815:	68 be c8 02 c0       	push   0xc002c8be
c002081a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002081e:	e8 9d 00 fe ff       	call   c00008c0 <strcmp>
c0020823:	83 c4 10             	add    esp,0x10
c0020826:	85 c0                	test   eax,eax
c0020828:	0f 94 c0             	sete   al
c002082b:	84 c0                	test   al,al
c002082d:	74 0a                	je     c0020839 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002082f:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020837:	eb 0a                	jmp    c0020843 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020839:	b8 08 00 00 00       	mov    eax,0x8
c002083e:	e9 04 01 00 00       	jmp    c0020947 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020843:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002084a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002084f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020853:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c002085a:	83 f8 ff             	cmp    eax,0xffffffff
c002085d:	75 34                	jne    c0020893 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002085f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020863:	88 c2                	mov    dl,al
c0020865:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c002086a:	01 d0                	add    eax,edx
c002086c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020870:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c0020876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002087a:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c0020881:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0020886:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002088a:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0020891:	eb 17                	jmp    c00208aa <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020893:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020897:	88 c2                	mov    dl,al
c0020899:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002089d:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c00208a4:	01 d0                	add    eax,edx
c00208a6:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208ae:	88 04 24             	mov    BYTE PTR [esp],al
c00208b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208c1:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208c6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00208ce:	83 ec 0c             	sub    esp,0xc
c00208d1:	68 00 20 00 00       	push   0x2000
c00208d6:	e8 68 ef fe ff       	call   c000f843 <malloc>
c00208db:	83 c4 10             	add    esp,0x10
c00208de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00208e2:	68 00 20 00 00       	push   0x2000
c00208e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208eb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208ef:	50                   	push   eax
c00208f0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00208f4:	50                   	push   eax
c00208f5:	e8 77 6a fe ff       	call   c0007371 <f_mkfs>
c00208fa:	83 c4 10             	add    esp,0x10
c00208fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020901:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020906:	75 07                	jne    c002090f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020908:	b8 00 00 00 00       	mov    eax,0x0
c002090d:	eb 38                	jmp    c0020947 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002090f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020914:	75 17                	jne    c002092d <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020916:	83 ec 0c             	sub    esp,0xc
c0020919:	68 f0 c8 02 c0       	push   0xc002c8f0
c002091e:	e8 51 26 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0020923:	83 c4 10             	add    esp,0x10
c0020926:	b8 09 00 00 00       	mov    eax,0x9
c002092b:	eb 1a                	jmp    c0020947 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002092d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020931:	83 ec 08             	sub    esp,0x8
c0020934:	50                   	push   eax
c0020935:	68 c4 c8 02 c0       	push   0xc002c8c4
c002093a:	e8 35 26 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c002093f:	83 c4 10             	add    esp,0x10
c0020942:	b8 01 00 00 00       	mov    eax,0x1
c0020947:	83 c4 2c             	add    esp,0x2c
c002094a:	c3                   	ret    
c002094b:	90                   	nop

c002094c <FAT::tryMount(LogicalDisk*, int)>:
c002094c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020952:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0020957:	83 f8 14             	cmp    eax,0x14
c002095a:	75 17                	jne    c0020973 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002095c:	83 ec 0c             	sub    esp,0xc
c002095f:	68 d6 c8 02 c0       	push   0xc002c8d6
c0020964:	e8 b8 9c ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0020969:	83 c4 10             	add    esp,0x10
c002096c:	b0 00                	mov    al,0x0
c002096e:	e9 d7 01 00 00       	jmp    c0020b4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020973:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002097a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020980:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020986:	3d 00 02 00 00       	cmp    eax,0x200
c002098b:	74 07                	je     c0020994 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002098d:	b0 00                	mov    al,0x0
c002098f:	e9 b6 01 00 00       	jmp    c0020b4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020994:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002099c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209a3:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c00209aa:	83 f8 ff             	cmp    eax,0xffffffff
c00209ad:	74 07                	je     c00209b6 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209af:	b0 01                	mov    al,0x1
c00209b1:	e9 94 01 00 00       	jmp    c0020b4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209b6:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209c0:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209c8:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00209cf:	88 c2                	mov    dl,al
c00209d1:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c00209d6:	01 d0                	add    eax,edx
c00209d8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00209df:	8b 15 e0 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031ae0
c00209e5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209ec:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c00209f3:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c00209f8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00209ff:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0020a06:	83 ec 0c             	sub    esp,0xc
c0020a09:	68 54 02 00 00       	push   0x254
c0020a0e:	e8 30 ee fe ff       	call   c000f843 <malloc>
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a1d:	83 ec 04             	sub    esp,0x4
c0020a20:	6a 00                	push   0x0
c0020a22:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a29:	50                   	push   eax
c0020a2a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a31:	e8 f9 44 fe ff       	call   c0004f2f <f_mount>
c0020a36:	83 c4 10             	add    esp,0x10
c0020a39:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a40:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a48:	74 19                	je     c0020a63 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a4a:	83 ec 0c             	sub    esp,0xc
c0020a4d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a54:	e8 0a ee fe ff       	call   c000f863 <rfree>
c0020a59:	83 c4 10             	add    esp,0x10
c0020a5c:	b0 00                	mov    al,0x0
c0020a5e:	e9 e7 00 00 00       	jmp    c0020b4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a63:	83 ec 04             	sub    esp,0x4
c0020a66:	68 00 01 00 00       	push   0x100
c0020a6b:	6a 00                	push   0x0
c0020a6d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a74:	50                   	push   eax
c0020a75:	e8 fe fc fd ff       	call   c0000778 <memset>
c0020a7a:	83 c4 10             	add    esp,0x10
c0020a7d:	83 ec 08             	sub    esp,0x8
c0020a80:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a87:	50                   	push   eax
c0020a88:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020a8f:	50                   	push   eax
c0020a90:	e8 df fe fd ff       	call   c0000974 <strcat>
c0020a95:	83 c4 10             	add    esp,0x10
c0020a98:	83 ec 08             	sub    esp,0x8
c0020a9b:	68 e4 c8 02 c0       	push   0xc002c8e4
c0020aa0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aa7:	50                   	push   eax
c0020aa8:	e8 c7 fe fd ff       	call   c0000974 <strcat>
c0020aad:	83 c4 10             	add    esp,0x10
c0020ab0:	83 ec 04             	sub    esp,0x4
c0020ab3:	6a 01                	push   0x1
c0020ab5:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020abc:	50                   	push   eax
c0020abd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ac1:	50                   	push   eax
c0020ac2:	e8 ca 44 fe ff       	call   c0004f91 <f_open>
c0020ac7:	83 c4 10             	add    esp,0x10
c0020aca:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ad1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020ad8:	85 c0                	test   eax,eax
c0020ada:	74 0a                	je     c0020ae6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020adc:	78 2d                	js     c0020b0b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ade:	83 e8 04             	sub    eax,0x4
c0020ae1:	83 f8 01             	cmp    eax,0x1
c0020ae4:	77 25                	ja     c0020b0b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020ae6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020aee:	83 ec 0c             	sub    esp,0xc
c0020af1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020af5:	50                   	push   eax
c0020af6:	e8 e8 4f fe ff       	call   c0005ae3 <f_close>
c0020afb:	83 c4 10             	add    esp,0x10
c0020afe:	90                   	nop
c0020aff:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b07:	74 3a                	je     c0020b43 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b09:	eb 2d                	jmp    c0020b38 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b0b:	83 ec 0c             	sub    esp,0xc
c0020b0e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b15:	e8 49 ed fe ff       	call   c000f863 <rfree>
c0020b1a:	83 c4 10             	add    esp,0x10
c0020b1d:	83 ec 04             	sub    esp,0x4
c0020b20:	6a 00                	push   0x0
c0020b22:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b29:	50                   	push   eax
c0020b2a:	6a 00                	push   0x0
c0020b2c:	e8 fe 43 fe ff       	call   c0004f2f <f_mount>
c0020b31:	83 c4 10             	add    esp,0x10
c0020b34:	b0 00                	mov    al,0x0
c0020b36:	eb 12                	jmp    c0020b4a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b38:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0020b3d:	40                   	inc    eax
c0020b3e:	a3 e0 1a 03 c0       	mov    ds:0xc0031ae0,eax
c0020b43:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b4a:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b50:	c3                   	ret    
c0020b51:	90                   	nop

c0020b52 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b52:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b58:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b60:	74 0a                	je     c0020b6c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b62:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b6a:	75 0a                	jne    c0020b76 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b6c:	b8 04 00 00 00       	mov    eax,0x4
c0020b71:	e9 db 00 00 00       	jmp    c0020c51 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020b76:	83 ec 08             	sub    esp,0x8
c0020b79:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020b80:	50                   	push   eax
c0020b81:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020b88:	e8 60 55 fe ff       	call   c00060ed <f_readdir>
c0020b8d:	83 c4 10             	add    esp,0x10
c0020b90:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020b97:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020b9d:	83 ec 0c             	sub    esp,0xc
c0020ba0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020ba7:	83 c0 1a             	add    eax,0x1a
c0020baa:	50                   	push   eax
c0020bab:	e8 e4 fb fd ff       	call   c0000794 <strlen>
c0020bb0:	83 c4 10             	add    esp,0x10
c0020bb3:	ba 00 00 00 00       	mov    edx,0x0
c0020bb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bbc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bc0:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bc7:	0f b6 c0             	movzx  eax,al
c0020bca:	83 e0 10             	and    eax,0x10
c0020bcd:	74 07                	je     c0020bd6 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020bcf:	b8 02 00 00 00       	mov    eax,0x2
c0020bd4:	eb 05                	jmp    c0020bdb <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020bd6:	b8 01 00 00 00       	mov    eax,0x1
c0020bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bdf:	83 ec 08             	sub    esp,0x8
c0020be2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020be9:	83 c0 1a             	add    eax,0x1a
c0020bec:	50                   	push   eax
c0020bed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bf1:	83 c0 10             	add    eax,0x10
c0020bf4:	50                   	push   eax
c0020bf5:	e8 3a fc fd ff       	call   c0000834 <strcpy>
c0020bfa:	83 c4 10             	add    esp,0x10
c0020bfd:	83 ec 04             	sub    esp,0x4
c0020c00:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c07:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c0b:	50                   	push   eax
c0020c0c:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c13:	e8 2c fb fd ff       	call   c0000744 <memcpy>
c0020c18:	83 c4 10             	add    esp,0x10
c0020c1b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c22:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c28:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c2f:	84 c0                	test   al,al
c0020c31:	75 07                	jne    c0020c3a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c33:	b8 07 00 00 00       	mov    eax,0x7
c0020c38:	eb 17                	jmp    c0020c51 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c3a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c41:	85 c0                	test   eax,eax
c0020c43:	75 07                	jne    c0020c4c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c45:	b8 00 00 00 00       	mov    eax,0x0
c0020c4a:	eb 05                	jmp    c0020c51 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c4c:	b8 01 00 00 00       	mov    eax,0x1
c0020c51:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c57:	c3                   	ret    

c0020c58 <FAT::read(void*, unsigned long, void*, int*)>:
c0020c58:	83 ec 1c             	sub    esp,0x1c
c0020c5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c60:	74 07                	je     c0020c69 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c67:	75 07                	jne    c0020c70 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c69:	b8 04 00 00 00       	mov    eax,0x4
c0020c6e:	eb 3d                	jmp    c0020cad <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020c70:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c74:	50                   	push   eax
c0020c75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020c7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c81:	e8 47 47 fe ff       	call   c00053cd <f_read>
c0020c86:	83 c4 10             	add    esp,0x10
c0020c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c91:	89 c2                	mov    edx,eax
c0020c93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020c97:	89 10                	mov    DWORD PTR [eax],edx
c0020c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c9d:	85 c0                	test   eax,eax
c0020c9f:	75 07                	jne    c0020ca8 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020ca1:	b8 00 00 00 00       	mov    eax,0x0
c0020ca6:	eb 05                	jmp    c0020cad <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ca8:	b8 01 00 00 00       	mov    eax,0x1
c0020cad:	83 c4 1c             	add    esp,0x1c
c0020cb0:	c3                   	ret    
c0020cb1:	90                   	nop

c0020cb2 <FAT::write(void*, unsigned long, void*, int*)>:
c0020cb2:	83 ec 1c             	sub    esp,0x1c
c0020cb5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cba:	74 07                	je     c0020cc3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cbc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cc1:	75 07                	jne    c0020cca <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020cc3:	b8 04 00 00 00       	mov    eax,0x4
c0020cc8:	eb 3d                	jmp    c0020d07 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cca:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cce:	50                   	push   eax
c0020ccf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cd3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cdb:	e8 6d 49 fe ff       	call   c000564d <f_write>
c0020ce0:	83 c4 10             	add    esp,0x10
c0020ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ce7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ceb:	89 c2                	mov    edx,eax
c0020ced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cf1:	89 10                	mov    DWORD PTR [eax],edx
c0020cf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cf7:	85 c0                	test   eax,eax
c0020cf9:	75 07                	jne    c0020d02 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020cfb:	b8 00 00 00 00       	mov    eax,0x0
c0020d00:	eb 05                	jmp    c0020d07 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d02:	b8 01 00 00 00       	mov    eax,0x1
c0020d07:	83 c4 1c             	add    esp,0x1c
c0020d0a:	c3                   	ret    
c0020d0b:	90                   	nop

c0020d0c <FAT::close(void*)>:
c0020d0c:	83 ec 1c             	sub    esp,0x1c
c0020d0f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d14:	75 07                	jne    c0020d1d <FAT::close(void*)+0x11>
c0020d16:	b8 04 00 00 00       	mov    eax,0x4
c0020d1b:	eb 36                	jmp    c0020d53 <FAT::close(void*)+0x47>
c0020d1d:	83 ec 0c             	sub    esp,0xc
c0020d20:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d24:	e8 ba 4d fe ff       	call   c0005ae3 <f_close>
c0020d29:	83 c4 10             	add    esp,0x10
c0020d2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d30:	83 ec 0c             	sub    esp,0xc
c0020d33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d37:	e8 17 eb fe ff       	call   c000f853 <free>
c0020d3c:	83 c4 10             	add    esp,0x10
c0020d3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d43:	85 c0                	test   eax,eax
c0020d45:	75 07                	jne    c0020d4e <FAT::close(void*)+0x42>
c0020d47:	b8 00 00 00 00       	mov    eax,0x0
c0020d4c:	eb 05                	jmp    c0020d53 <FAT::close(void*)+0x47>
c0020d4e:	b8 01 00 00 00       	mov    eax,0x1
c0020d53:	83 c4 1c             	add    esp,0x1c
c0020d56:	c3                   	ret    
c0020d57:	90                   	nop

c0020d58 <FAT::closeDir(void*)>:
c0020d58:	83 ec 1c             	sub    esp,0x1c
c0020d5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d60:	75 07                	jne    c0020d69 <FAT::closeDir(void*)+0x11>
c0020d62:	b8 04 00 00 00       	mov    eax,0x4
c0020d67:	eb 36                	jmp    c0020d9f <FAT::closeDir(void*)+0x47>
c0020d69:	83 ec 0c             	sub    esp,0xc
c0020d6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d70:	e8 56 53 fe ff       	call   c00060cb <f_closedir>
c0020d75:	83 c4 10             	add    esp,0x10
c0020d78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d7c:	83 ec 0c             	sub    esp,0xc
c0020d7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d83:	e8 cb ea fe ff       	call   c000f853 <free>
c0020d88:	83 c4 10             	add    esp,0x10
c0020d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d8f:	85 c0                	test   eax,eax
c0020d91:	75 07                	jne    c0020d9a <FAT::closeDir(void*)+0x42>
c0020d93:	b8 00 00 00 00       	mov    eax,0x0
c0020d98:	eb 05                	jmp    c0020d9f <FAT::closeDir(void*)+0x47>
c0020d9a:	b8 01 00 00 00       	mov    eax,0x1
c0020d9f:	83 c4 1c             	add    esp,0x1c
c0020da2:	c3                   	ret    
c0020da3:	90                   	nop

c0020da4 <FAT::seek(void*, unsigned long long)>:
c0020da4:	83 ec 2c             	sub    esp,0x2c
c0020da7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020dab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020db3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020db7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dbc:	75 07                	jne    c0020dc5 <FAT::seek(void*, unsigned long long)+0x21>
c0020dbe:	b8 04 00 00 00       	mov    eax,0x4
c0020dc3:	eb 2f                	jmp    c0020df4 <FAT::seek(void*, unsigned long long)+0x50>
c0020dc5:	83 ec 04             	sub    esp,0x4
c0020dc8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dcc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dd0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020dd4:	e8 39 4d fe ff       	call   c0005b12 <f_lseek>
c0020dd9:	83 c4 10             	add    esp,0x10
c0020ddc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020de4:	85 c0                	test   eax,eax
c0020de6:	75 07                	jne    c0020def <FAT::seek(void*, unsigned long long)+0x4b>
c0020de8:	b8 00 00 00 00       	mov    eax,0x0
c0020ded:	eb 05                	jmp    c0020df4 <FAT::seek(void*, unsigned long long)+0x50>
c0020def:	b8 01 00 00 00       	mov    eax,0x1
c0020df4:	83 c4 2c             	add    esp,0x2c
c0020df7:	c3                   	ret    

c0020df8 <fatWrapperReadDisk>:
c0020df8:	83 ec 1c             	sub    esp,0x1c
c0020dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e17:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020e1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e22:	83 ec 0c             	sub    esp,0xc
c0020e25:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e29:	52                   	push   edx
c0020e2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e32:	50                   	push   eax
c0020e33:	e8 58 59 ff ff       	call   c0016790 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e38:	83 c4 20             	add    esp,0x20
c0020e3b:	83 c4 1c             	add    esp,0x1c
c0020e3e:	c3                   	ret    

c0020e3f <fatWrapperWriteDisk>:
c0020e3f:	83 ec 1c             	sub    esp,0x1c
c0020e42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e46:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e4a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e59:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e5e:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020e65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e69:	83 ec 0c             	sub    esp,0xc
c0020e6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e70:	52                   	push   edx
c0020e71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e79:	50                   	push   eax
c0020e7a:	e8 7d 59 ff ff       	call   c00167fc <LogicalDisk::write(unsigned long long, int, void*)>
c0020e7f:	83 c4 20             	add    esp,0x20
c0020e82:	83 c4 1c             	add    esp,0x1c
c0020e85:	c3                   	ret    

c0020e86 <fatWrapperIoctl>:
c0020e86:	53                   	push   ebx
c0020e87:	83 ec 28             	sub    esp,0x28
c0020e8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020e92:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020e96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020e9a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020e9f:	75 31                	jne    c0020ed2 <fatWrapperIoctl+0x4c>
c0020ea1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ea5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ea9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eae:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020eb5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ebb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ec1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ec5:	66 89 02             	mov    WORD PTR [edx],ax
c0020ec8:	b8 00 00 00 00       	mov    eax,0x0
c0020ecd:	e9 b2 00 00 00       	jmp    c0020f84 <fatWrapperIoctl+0xfe>
c0020ed2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ed7:	75 6a                	jne    c0020f43 <fatWrapperIoctl+0xbd>
c0020ed9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020edd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ee1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ee6:	8b 04 85 c0 ea 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1540]
c0020eed:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ef3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020ef9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020eff:	89 c8                	mov    eax,ecx
c0020f01:	89 da                	mov    edx,ebx
c0020f03:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f07:	c1 e0 0a             	shl    eax,0xa
c0020f0a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f0f:	8b 0c 8d c0 ea 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1540]
c0020f16:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f1c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f22:	89 cb                	mov    ebx,ecx
c0020f24:	c1 fb 1f             	sar    ebx,0x1f
c0020f27:	53                   	push   ebx
c0020f28:	51                   	push   ecx
c0020f29:	52                   	push   edx
c0020f2a:	50                   	push   eax
c0020f2b:	e8 bc 5a 00 00       	call   c00269ec <__udivdi3>
c0020f30:	83 c4 10             	add    esp,0x10
c0020f33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f37:	89 01                	mov    DWORD PTR [ecx],eax
c0020f39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f3c:	b8 00 00 00 00       	mov    eax,0x0
c0020f41:	eb 41                	jmp    c0020f84 <fatWrapperIoctl+0xfe>
c0020f43:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f48:	75 07                	jne    c0020f51 <fatWrapperIoctl+0xcb>
c0020f4a:	b8 00 00 00 00       	mov    eax,0x0
c0020f4f:	eb 33                	jmp    c0020f84 <fatWrapperIoctl+0xfe>
c0020f51:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f56:	75 19                	jne    c0020f71 <fatWrapperIoctl+0xeb>
c0020f58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f64:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f6a:	b8 00 00 00 00       	mov    eax,0x0
c0020f6f:	eb 13                	jmp    c0020f84 <fatWrapperIoctl+0xfe>
c0020f71:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020f76:	75 07                	jne    c0020f7f <fatWrapperIoctl+0xf9>
c0020f78:	b8 00 00 00 00       	mov    eax,0x0
c0020f7d:	eb 05                	jmp    c0020f84 <fatWrapperIoctl+0xfe>
c0020f7f:	b8 04 00 00 00       	mov    eax,0x4
c0020f84:	83 c4 28             	add    esp,0x28
c0020f87:	5b                   	pop    ebx
c0020f88:	c3                   	ret    
c0020f89:	90                   	nop

c0020f8a <FAT::FAT()>:
c0020f8a:	83 ec 1c             	sub    esp,0x1c
c0020f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f91:	83 ec 0c             	sub    esp,0xc
c0020f94:	50                   	push   eax
c0020f95:	e8 de 22 ff ff       	call   c0013278 <Filesystem::Filesystem()>
c0020f9a:	83 c4 10             	add    esp,0x10
c0020f9d:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c0020fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fa6:	89 10                	mov    DWORD PTR [eax],edx
c0020fa8:	c7 05 e0 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031ae0,0x0
c0020fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fba:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020fbf:	7f 15                	jg     c0020fd6 <FAT::FAT()+0x4c>
c0020fc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fc5:	c7 04 85 00 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce500],0xffffffff
c0020fd0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020fd4:	eb e4                	jmp    c0020fba <FAT::FAT()+0x30>
c0020fd6:	90                   	nop
c0020fd7:	83 c4 1c             	add    esp,0x1c
c0020fda:	c3                   	ret    
c0020fdb:	90                   	nop

c0020fdc <FAT::fixFilepath(char*)>:
c0020fdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fe0:	8a 00                	mov    al,BYTE PTR [eax]
c0020fe2:	3c 40                	cmp    al,0x40
c0020fe4:	7e 2c                	jle    c0021012 <FAT::fixFilepath(char*)+0x36>
c0020fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fea:	8a 00                	mov    al,BYTE PTR [eax]
c0020fec:	83 e8 41             	sub    eax,0x41
c0020fef:	88 c2                	mov    dl,al
c0020ff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ff5:	88 10                	mov    BYTE PTR [eax],dl
c0020ff7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ffb:	8a 00                	mov    al,BYTE PTR [eax]
c0020ffd:	0f be c0             	movsx  eax,al
c0021000:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c0021007:	83 c0 30             	add    eax,0x30
c002100a:	88 c2                	mov    dl,al
c002100c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021010:	88 10                	mov    BYTE PTR [eax],dl
c0021012:	90                   	nop
c0021013:	c3                   	ret    

c0021014 <FAT::open(char const*, void**, FileOpenMode)>:
c0021014:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002101a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021022:	74 0a                	je     c002102e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021024:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002102c:	75 0a                	jne    c0021038 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002102e:	b8 04 00 00 00       	mov    eax,0x4
c0021033:	e9 fd 00 00 00       	jmp    c0021135 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021038:	83 ec 08             	sub    esp,0x8
c002103b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021042:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021046:	50                   	push   eax
c0021047:	e8 e8 f7 fd ff       	call   c0000834 <strcpy>
c002104c:	83 c4 10             	add    esp,0x10
c002104f:	83 ec 08             	sub    esp,0x8
c0021052:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021056:	50                   	push   eax
c0021057:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002105e:	e8 79 ff ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c0021063:	83 c4 10             	add    esp,0x10
c0021066:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002106e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021075:	83 e0 01             	and    eax,0x1
c0021078:	74 08                	je     c0021082 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002107a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021082:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021089:	83 e0 04             	and    eax,0x4
c002108c:	74 10                	je     c002109e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002108e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021096:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002109e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210a5:	83 e0 02             	and    eax,0x2
c00210a8:	74 08                	je     c00210b2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210aa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210b9:	83 e0 08             	and    eax,0x8
c00210bc:	74 08                	je     c00210c6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210be:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210cd:	83 e0 10             	and    eax,0x10
c00210d0:	74 08                	je     c00210da <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00210d2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00210da:	83 ec 0c             	sub    esp,0xc
c00210dd:	68 50 02 00 00       	push   0x250
c00210e2:	e8 5c e7 fe ff       	call   c000f843 <malloc>
c00210e7:	83 c4 10             	add    esp,0x10
c00210ea:	89 c2                	mov    edx,eax
c00210ec:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00210f3:	89 10                	mov    DWORD PTR [eax],edx
c00210f5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00210fd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021104:	8b 00                	mov    eax,DWORD PTR [eax]
c0021106:	83 ec 04             	sub    esp,0x4
c0021109:	52                   	push   edx
c002110a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002110e:	52                   	push   edx
c002110f:	50                   	push   eax
c0021110:	e8 7c 3e fe ff       	call   c0004f91 <f_open>
c0021115:	83 c4 10             	add    esp,0x10
c0021118:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002111f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021127:	74 07                	je     c0021130 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021129:	b8 01 00 00 00       	mov    eax,0x1
c002112e:	eb 05                	jmp    c0021135 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021130:	b8 00 00 00 00       	mov    eax,0x0
c0021135:	81 c4 1c 01 00 00    	add    esp,0x11c
c002113b:	c3                   	ret    

c002113c <FAT::openDir(char const*, void**)>:
c002113c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021142:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002114a:	74 0a                	je     c0021156 <FAT::openDir(char const*, void**)+0x1a>
c002114c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021154:	75 07                	jne    c002115d <FAT::openDir(char const*, void**)+0x21>
c0021156:	b8 04 00 00 00       	mov    eax,0x4
c002115b:	eb 7d                	jmp    c00211da <FAT::openDir(char const*, void**)+0x9e>
c002115d:	83 ec 08             	sub    esp,0x8
c0021160:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021167:	8d 44 24 18          	lea    eax,[esp+0x18]
c002116b:	50                   	push   eax
c002116c:	e8 c3 f6 fd ff       	call   c0000834 <strcpy>
c0021171:	83 c4 10             	add    esp,0x10
c0021174:	83 ec 08             	sub    esp,0x8
c0021177:	8d 44 24 14          	lea    eax,[esp+0x14]
c002117b:	50                   	push   eax
c002117c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021183:	e8 54 fe ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c0021188:	83 c4 10             	add    esp,0x10
c002118b:	83 ec 0c             	sub    esp,0xc
c002118e:	6a 4c                	push   0x4c
c0021190:	e8 ae e6 fe ff       	call   c000f843 <malloc>
c0021195:	83 c4 10             	add    esp,0x10
c0021198:	89 c2                	mov    edx,eax
c002119a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211a1:	89 10                	mov    DWORD PTR [eax],edx
c00211a3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ac:	83 ec 08             	sub    esp,0x8
c00211af:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211b3:	52                   	push   edx
c00211b4:	50                   	push   eax
c00211b5:	e8 0f 4e fe ff       	call   c0005fc9 <f_opendir>
c00211ba:	83 c4 10             	add    esp,0x10
c00211bd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211c4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211cc:	74 07                	je     c00211d5 <FAT::openDir(char const*, void**)+0x99>
c00211ce:	b8 01 00 00 00       	mov    eax,0x1
c00211d3:	eb 05                	jmp    c00211da <FAT::openDir(char const*, void**)+0x9e>
c00211d5:	b8 00 00 00 00       	mov    eax,0x0
c00211da:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211e0:	c3                   	ret    
c00211e1:	90                   	nop

c00211e2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00211e2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211e8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00211f0:	75 0a                	jne    c00211fc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00211f2:	b8 04 00 00 00       	mov    eax,0x4
c00211f7:	e9 c9 00 00 00       	jmp    c00212c5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00211fc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021204:	75 0a                	jne    c0021210 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021206:	b8 04 00 00 00       	mov    eax,0x4
c002120b:	e9 b5 00 00 00       	jmp    c00212c5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021210:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021218:	75 0a                	jne    c0021224 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002121a:	b8 04 00 00 00       	mov    eax,0x4
c002121f:	e9 a1 00 00 00       	jmp    c00212c5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021224:	83 ec 08             	sub    esp,0x8
c0021227:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002122e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021235:	50                   	push   eax
c0021236:	e8 f9 f5 fd ff       	call   c0000834 <strcpy>
c002123b:	83 c4 10             	add    esp,0x10
c002123e:	83 ec 08             	sub    esp,0x8
c0021241:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021248:	50                   	push   eax
c0021249:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021250:	e8 87 fd ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c0021255:	83 c4 10             	add    esp,0x10
c0021258:	83 ec 08             	sub    esp,0x8
c002125b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002125f:	50                   	push   eax
c0021260:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021267:	50                   	push   eax
c0021268:	e8 1b 4f fe ff       	call   c0006188 <f_stat>
c002126d:	83 c4 10             	add    esp,0x10
c0021270:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021277:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002127e:	85 c0                	test   eax,eax
c0021280:	74 07                	je     c0021289 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021282:	83 f8 04             	cmp    eax,0x4
c0021285:	74 32                	je     c00212b9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021287:	eb 37                	jmp    c00212c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021289:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002128d:	0f b6 c0             	movzx  eax,al
c0021290:	83 e0 10             	and    eax,0x10
c0021293:	0f 95 c2             	setne  dl
c0021296:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002129d:	88 10                	mov    BYTE PTR [eax],dl
c002129f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212a6:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212ad:	89 01                	mov    DWORD PTR [ecx],eax
c00212af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212b2:	b8 00 00 00 00       	mov    eax,0x0
c00212b7:	eb 0c                	jmp    c00212c5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212b9:	b8 02 00 00 00       	mov    eax,0x2
c00212be:	eb 05                	jmp    c00212c5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212c0:	b8 01 00 00 00       	mov    eax,0x1
c00212c5:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212cb:	c3                   	ret    

c00212cc <FAT::unlink(char const*)>:
c00212cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212da:	75 07                	jne    c00212e3 <FAT::unlink(char const*)+0x17>
c00212dc:	b8 04 00 00 00       	mov    eax,0x4
c00212e1:	eb 5c                	jmp    c002133f <FAT::unlink(char const*)+0x73>
c00212e3:	83 ec 08             	sub    esp,0x8
c00212e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212f1:	50                   	push   eax
c00212f2:	e8 3d f5 fd ff       	call   c0000834 <strcpy>
c00212f7:	83 c4 10             	add    esp,0x10
c00212fa:	83 ec 08             	sub    esp,0x8
c00212fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021301:	50                   	push   eax
c0021302:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021309:	e8 ce fc ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c002130e:	83 c4 10             	add    esp,0x10
c0021311:	83 ec 0c             	sub    esp,0xc
c0021314:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021318:	50                   	push   eax
c0021319:	e8 bc 51 fe ff       	call   c00064da <f_unlink>
c002131e:	83 c4 10             	add    esp,0x10
c0021321:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021328:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002132f:	85 c0                	test   eax,eax
c0021331:	75 07                	jne    c002133a <FAT::unlink(char const*)+0x6e>
c0021333:	b8 00 00 00 00       	mov    eax,0x0
c0021338:	eb 05                	jmp    c002133f <FAT::unlink(char const*)+0x73>
c002133a:	b8 01 00 00 00       	mov    eax,0x1
c002133f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021345:	c3                   	ret    

c0021346 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021346:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002134c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021353:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002135a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002135e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021362:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002136a:	75 0a                	jne    c0021376 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002136c:	b8 04 00 00 00       	mov    eax,0x4
c0021371:	e9 1c 01 00 00       	jmp    c0021492 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021376:	83 ec 08             	sub    esp,0x8
c0021379:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021380:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021384:	50                   	push   eax
c0021385:	e8 aa f4 fd ff       	call   c0000834 <strcpy>
c002138a:	83 c4 10             	add    esp,0x10
c002138d:	83 ec 08             	sub    esp,0x8
c0021390:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021394:	50                   	push   eax
c0021395:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002139c:	e8 3b fc ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c00213a1:	83 c4 10             	add    esp,0x10
c00213a4:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213ac:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213b9:	83 e0 01             	and    eax,0x1
c00213bc:	74 08                	je     c00213c6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213be:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213cb:	83 e0 02             	and    eax,0x2
c00213ce:	74 08                	je     c00213d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00213d0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00213d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213dd:	83 e0 04             	and    eax,0x4
c00213e0:	74 08                	je     c00213ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00213e2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00213ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213ef:	83 e0 08             	and    eax,0x8
c00213f2:	74 08                	je     c00213fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00213f4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00213fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021401:	83 e0 01             	and    eax,0x1
c0021404:	74 08                	je     c002140e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021406:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002140e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021413:	83 e0 02             	and    eax,0x2
c0021416:	74 08                	je     c0021420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021418:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021420:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021425:	83 e0 04             	and    eax,0x4
c0021428:	74 08                	je     c0021432 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002142a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021432:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021437:	83 e0 08             	and    eax,0x8
c002143a:	74 08                	je     c0021444 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002143c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021444:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002144b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021452:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002145a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021462:	83 ec 04             	sub    esp,0x4
c0021465:	52                   	push   edx
c0021466:	50                   	push   eax
c0021467:	8d 44 24 24          	lea    eax,[esp+0x24]
c002146b:	50                   	push   eax
c002146c:	e8 0b 57 fe ff       	call   c0006b7c <f_chmod>
c0021471:	83 c4 10             	add    esp,0x10
c0021474:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002147b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021482:	85 c0                	test   eax,eax
c0021484:	75 07                	jne    c002148d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021486:	b8 00 00 00 00       	mov    eax,0x0
c002148b:	eb 05                	jmp    c0021492 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002148d:	b8 01 00 00 00       	mov    eax,0x1
c0021492:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021498:	c3                   	ret    
c0021499:	90                   	nop

c002149a <FAT::rename(char const*, char const*)>:
c002149a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214a0:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214a8:	74 0a                	je     c00214b4 <FAT::rename(char const*, char const*)+0x1a>
c00214aa:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214b2:	75 0a                	jne    c00214be <FAT::rename(char const*, char const*)+0x24>
c00214b4:	b8 04 00 00 00       	mov    eax,0x4
c00214b9:	e9 98 00 00 00       	jmp    c0021556 <FAT::rename(char const*, char const*)+0xbc>
c00214be:	83 ec 08             	sub    esp,0x8
c00214c1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214c8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00214cf:	50                   	push   eax
c00214d0:	e8 5f f3 fd ff       	call   c0000834 <strcpy>
c00214d5:	83 c4 10             	add    esp,0x10
c00214d8:	83 ec 08             	sub    esp,0x8
c00214db:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00214e2:	50                   	push   eax
c00214e3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214ea:	e8 ed fa ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c00214ef:	83 c4 10             	add    esp,0x10
c00214f2:	83 ec 08             	sub    esp,0x8
c00214f5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00214fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021500:	50                   	push   eax
c0021501:	e8 2e f3 fd ff       	call   c0000834 <strcpy>
c0021506:	83 c4 10             	add    esp,0x10
c0021509:	83 ec 08             	sub    esp,0x8
c002150c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021510:	50                   	push   eax
c0021511:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021518:	e8 bf fa ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c002151d:	83 c4 10             	add    esp,0x10
c0021520:	83 ec 08             	sub    esp,0x8
c0021523:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021527:	50                   	push   eax
c0021528:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002152f:	50                   	push   eax
c0021530:	e8 54 53 fe ff       	call   c0006889 <f_rename>
c0021535:	83 c4 10             	add    esp,0x10
c0021538:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002153f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021546:	85 c0                	test   eax,eax
c0021548:	75 07                	jne    c0021551 <FAT::rename(char const*, char const*)+0xb7>
c002154a:	b8 00 00 00 00       	mov    eax,0x0
c002154f:	eb 05                	jmp    c0021556 <FAT::rename(char const*, char const*)+0xbc>
c0021551:	b8 01 00 00 00       	mov    eax,0x1
c0021556:	81 c4 1c 02 00 00    	add    esp,0x21c
c002155c:	c3                   	ret    
c002155d:	90                   	nop

c002155e <FAT::mkdir(char const*)>:
c002155e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021564:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002156c:	75 07                	jne    c0021575 <FAT::mkdir(char const*)+0x17>
c002156e:	b8 04 00 00 00       	mov    eax,0x4
c0021573:	eb 5c                	jmp    c00215d1 <FAT::mkdir(char const*)+0x73>
c0021575:	83 ec 08             	sub    esp,0x8
c0021578:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002157f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021583:	50                   	push   eax
c0021584:	e8 ab f2 fd ff       	call   c0000834 <strcpy>
c0021589:	83 c4 10             	add    esp,0x10
c002158c:	83 ec 08             	sub    esp,0x8
c002158f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021593:	50                   	push   eax
c0021594:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002159b:	e8 3c fa ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c00215a0:	83 c4 10             	add    esp,0x10
c00215a3:	83 ec 0c             	sub    esp,0xc
c00215a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215aa:	50                   	push   eax
c00215ab:	e8 ad 50 fe ff       	call   c000665d <f_mkdir>
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215ba:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215c1:	85 c0                	test   eax,eax
c00215c3:	75 07                	jne    c00215cc <FAT::mkdir(char const*)+0x6e>
c00215c5:	b8 00 00 00 00       	mov    eax,0x0
c00215ca:	eb 05                	jmp    c00215d1 <FAT::mkdir(char const*)+0x73>
c00215cc:	b8 01 00 00 00       	mov    eax,0x1
c00215d1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00215d7:	c3                   	ret    

c00215d8 <FAT::exists(char const*)>:
c00215d8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00215de:	83 ec 08             	sub    esp,0x8
c00215e1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00215e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00215ec:	50                   	push   eax
c00215ed:	e8 42 f2 fd ff       	call   c0000834 <strcpy>
c00215f2:	83 c4 10             	add    esp,0x10
c00215f5:	83 ec 08             	sub    esp,0x8
c00215f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215fc:	50                   	push   eax
c00215fd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021604:	e8 d3 f9 ff ff       	call   c0020fdc <FAT::fixFilepath(char*)>
c0021609:	83 c4 10             	add    esp,0x10
c002160c:	83 ec 08             	sub    esp,0x8
c002160f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021616:	50                   	push   eax
c0021617:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002161b:	50                   	push   eax
c002161c:	e8 67 4b fe ff       	call   c0006188 <f_stat>
c0021621:	83 c4 10             	add    esp,0x10
c0021624:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002162b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021632:	85 c0                	test   eax,eax
c0021634:	75 04                	jne    c002163a <FAT::exists(char const*)+0x62>
c0021636:	b0 01                	mov    al,0x1
c0021638:	eb 02                	jmp    c002163c <FAT::exists(char const*)+0x64>
c002163a:	b0 00                	mov    al,0x0
c002163c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021642:	c3                   	ret    
c0021643:	90                   	nop

c0021644 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021644:	b8 08 00 00 00       	mov    eax,0x8
c0021649:	c3                   	ret    

c002164a <ISO9660::seek(void*, unsigned long long)>:
c002164a:	53                   	push   ebx
c002164b:	b8 04 00 00 00       	mov    eax,0x4
c0021650:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021654:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021658:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002165c:	85 d2                	test   edx,edx
c002165e:	74 17                	je     c0021677 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021660:	89 c8                	mov    eax,ecx
c0021662:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021665:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021668:	b8 01 00 00 00       	mov    eax,0x1
c002166d:	73 08                	jae    c0021677 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002166f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021672:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021675:	31 c0                	xor    eax,eax
c0021677:	5b                   	pop    ebx
c0021678:	c3                   	ret    
c0021679:	90                   	nop

c002167a <ISO9660::tell(void*, unsigned long long*)>:
c002167a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002167e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021682:	85 d2                	test   edx,edx
c0021684:	74 12                	je     c0021698 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021686:	85 c0                	test   eax,eax
c0021688:	74 0e                	je     c0021698 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002168a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002168d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021690:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021693:	89 10                	mov    DWORD PTR [eax],edx
c0021695:	31 c0                	xor    eax,eax
c0021697:	c3                   	ret    
c0021698:	b8 04 00 00 00       	mov    eax,0x4
c002169d:	c3                   	ret    

c002169e <ISO9660::getName()>:
c002169e:	b8 7c c9 02 c0       	mov    eax,0xc002c97c
c00216a3:	c3                   	ret    

c00216a4 <ISO9660::stat(void*, unsigned long long*)>:
c00216a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ac:	85 d2                	test   edx,edx
c00216ae:	74 12                	je     c00216c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216b0:	85 c0                	test   eax,eax
c00216b2:	74 0e                	je     c00216c2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216ba:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216bd:	89 10                	mov    DWORD PTR [eax],edx
c00216bf:	31 c0                	xor    eax,eax
c00216c1:	c3                   	ret    
c00216c2:	b8 04 00 00 00       	mov    eax,0x4
c00216c7:	c3                   	ret    

c00216c8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216c8:	b8 01 00 00 00       	mov    eax,0x1
c00216cd:	c3                   	ret    

c00216ce <ISO9660::unlink(char const*)>:
c00216ce:	b8 01 00 00 00       	mov    eax,0x1
c00216d3:	c3                   	ret    

c00216d4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00216d4:	b8 01 00 00 00       	mov    eax,0x1
c00216d9:	c3                   	ret    

c00216da <ISO9660::rename(char const*, char const*)>:
c00216da:	b8 01 00 00 00       	mov    eax,0x1
c00216df:	c3                   	ret    

c00216e0 <ISO9660::mkdir(char const*)>:
c00216e0:	b8 01 00 00 00       	mov    eax,0x1
c00216e5:	c3                   	ret    

c00216e6 <ISO9660::close(void*)>:
c00216e6:	83 ec 0c             	sub    esp,0xc
c00216e9:	b8 04 00 00 00       	mov    eax,0x4
c00216ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216f2:	85 d2                	test   edx,edx
c00216f4:	74 0e                	je     c0021704 <ISO9660::close(void*)+0x1e>
c00216f6:	83 ec 0c             	sub    esp,0xc
c00216f9:	52                   	push   edx
c00216fa:	e8 54 e1 fe ff       	call   c000f853 <free>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	31 c0                	xor    eax,eax
c0021704:	83 c4 0c             	add    esp,0xc
c0021707:	c3                   	ret    

c0021708 <ISO9660::closeDir(void*)>:
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	b8 04 00 00 00       	mov    eax,0x4
c0021710:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021714:	85 d2                	test   edx,edx
c0021716:	74 0e                	je     c0021726 <ISO9660::closeDir(void*)+0x1e>
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	52                   	push   edx
c002171c:	e8 32 e1 fe ff       	call   c000f853 <free>
c0021721:	83 c4 10             	add    esp,0x10
c0021724:	31 c0                	xor    eax,eax
c0021726:	83 c4 0c             	add    esp,0xc
c0021729:	c3                   	ret    

c002172a <ISO9660::~ISO9660()>:
c002172a:	83 ec 0c             	sub    esp,0xc
c002172d:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c0021732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021736:	89 10                	mov    DWORD PTR [eax],edx
c0021738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173c:	83 ec 0c             	sub    esp,0xc
c002173f:	50                   	push   eax
c0021740:	e8 57 1b ff ff       	call   c001329c <Filesystem::~Filesystem()>
c0021745:	83 c4 10             	add    esp,0x10
c0021748:	90                   	nop
c0021749:	83 c4 0c             	add    esp,0xc
c002174c:	c3                   	ret    
c002174d:	90                   	nop

c002174e <ISO9660::~ISO9660()>:
c002174e:	83 ec 0c             	sub    esp,0xc
c0021751:	83 ec 0c             	sub    esp,0xc
c0021754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021758:	e8 cd ff ff ff       	call   c002172a <ISO9660::~ISO9660()>
c002175d:	83 c4 10             	add    esp,0x10
c0021760:	83 ec 08             	sub    esp,0x8
c0021763:	6a 08                	push   0x8
c0021765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021769:	e8 26 17 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c002176e:	83 c4 10             	add    esp,0x10
c0021771:	83 c4 0c             	add    esp,0xc
c0021774:	c3                   	ret    

c0021775 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021775:	55                   	push   ebp
c0021776:	31 c9                	xor    ecx,ecx
c0021778:	57                   	push   edi
c0021779:	56                   	push   esi
c002177a:	53                   	push   ebx
c002177b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002177f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021783:	89 eb                	mov    ebx,ebp
c0021785:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021789:	39 ce                	cmp    esi,ecx
c002178b:	7e 17                	jle    c00217a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002178d:	31 d2                	xor    edx,edx
c002178f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021793:	7d 13                	jge    c00217a8 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021795:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021799:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002179c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002179f:	75 0d                	jne    c00217ae <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217a1:	42                   	inc    edx
c00217a2:	eb eb                	jmp    c002178f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217a4:	31 c0                	xor    eax,eax
c00217a6:	eb 0a                	jmp    c00217b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217a8:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217ac:	eb 04                	jmp    c00217b2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217ae:	41                   	inc    ecx
c00217af:	43                   	inc    ebx
c00217b0:	eb d7                	jmp    c0021789 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217b2:	5b                   	pop    ebx
c00217b3:	5e                   	pop    esi
c00217b4:	5f                   	pop    edi
c00217b5:	5d                   	pop    ebp
c00217b6:	c3                   	ret    

c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217b7:	56                   	push   esi
c00217b8:	53                   	push   ebx
c00217b9:	52                   	push   edx
c00217ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217c6:	39 0d e0 1b 03 c0    	cmp    DWORD PTR ds:0xc0031be0,ecx
c00217cc:	75 08                	jne    c00217d6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00217ce:	38 05 34 da 02 c0    	cmp    BYTE PTR ds:0xc002da34,al
c00217d4:	74 2b                	je     c0021801 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00217d6:	83 ec 0c             	sub    esp,0xc
c00217d9:	a2 34 da 02 c0       	mov    ds:0xc002da34,al
c00217de:	68 00 1c 03 c0       	push   0xc0031c00
c00217e3:	0f be c0             	movsx  eax,al
c00217e6:	6a 01                	push   0x1
c00217e8:	89 0d e0 1b 03 c0    	mov    DWORD PTR ds:0xc0031be0,ecx
c00217ee:	31 db                	xor    ebx,ebx
c00217f0:	53                   	push   ebx
c00217f1:	51                   	push   ecx
c00217f2:	ff 34 85 bc e9 02 c0 	push   DWORD PTR [eax*4-0x3ffd1644]
c00217f9:	e8 92 4f ff ff       	call   c0016790 <LogicalDisk::read(unsigned long long, int, void*)>
c00217fe:	83 c4 20             	add    esp,0x20
c0021801:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021809:	c7 44 24 14 00 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031c00
c0021811:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021815:	58                   	pop    eax
c0021816:	5b                   	pop    ebx
c0021817:	5e                   	pop    esi
c0021818:	e9 27 ef fd ff       	jmp    c0000744 <memcpy>
c002181d:	90                   	nop

c002181e <ISO9660::tryMount(LogicalDisk*, int)>:
c002181e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021824:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002182b:	83 c0 41             	add    eax,0x41
c002182e:	0f be c0             	movsx  eax,al
c0021831:	50                   	push   eax
c0021832:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021836:	50                   	push   eax
c0021837:	6a 10                	push   0x10
c0021839:	e8 79 ff ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002183e:	83 c4 10             	add    esp,0x10
c0021841:	31 c0                	xor    eax,eax
c0021843:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021848:	75 1d                	jne    c0021867 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002184a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002184f:	75 16                	jne    c0021867 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021851:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021856:	75 0f                	jne    c0021867 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021858:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002185d:	75 08                	jne    c0021867 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002185f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021864:	0f 94 c0             	sete   al
c0021867:	81 c4 0c 08 00 00    	add    esp,0x80c
c002186d:	c3                   	ret    

c002186e <ISO9660::read(void*, unsigned long, void*, int*)>:
c002186e:	55                   	push   ebp
c002186f:	57                   	push   edi
c0021870:	56                   	push   esi
c0021871:	53                   	push   ebx
c0021872:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021878:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002187f:	85 ed                	test   ebp,ebp
c0021881:	0f 84 d6 01 00 00    	je     c0021a5d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021887:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002188f:	0f 84 c8 01 00 00    	je     c0021a5d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021895:	b8 01 00 00 00       	mov    eax,0x1
c002189a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002189e:	0f 85 be 01 00 00    	jne    c0021a62 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218a4:	31 d2                	xor    edx,edx
c00218a6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218b0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218b7:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00218bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218c1:	01 f0                	add    eax,esi
c00218c3:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218c6:	11 fa                	adc    edx,edi
c00218c8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218cc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00218d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00218d4:	19 d1                	sbb    ecx,edx
c00218d6:	72 0a                	jb     c00218e2 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00218d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00218dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00218e0:	eb 13                	jmp    c00218f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00218e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218ea:	29 f0                	sub    eax,esi
c00218ec:	19 fa                	sbb    edx,edi
c00218ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00218f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00218f8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00218fb:	0f a4 c2 0b          	shld   edx,eax,0xb
c00218ff:	51                   	push   ecx
c0021900:	c1 e0 0b             	shl    eax,0xb
c0021903:	01 c6                	add    esi,eax
c0021905:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021909:	11 d7                	adc    edi,edx
c002190b:	50                   	push   eax
c002190c:	89 fa                	mov    edx,edi
c002190e:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021912:	89 f0                	mov    eax,esi
c0021914:	53                   	push   ebx
c0021915:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021919:	50                   	push   eax
c002191a:	e8 98 fe ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002191f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021923:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021926:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002192a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021930:	83 c4 10             	add    esp,0x10
c0021933:	b8 00 08 00 00       	mov    eax,0x800
c0021938:	29 d0                	sub    eax,edx
c002193a:	39 c1                	cmp    ecx,eax
c002193c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021940:	83 d9 00             	sbb    ecx,0x0
c0021943:	7d 1c                	jge    c0021961 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021945:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002194a:	75 12                	jne    c002195e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002194c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021953:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021959:	e9 fb 00 00 00       	jmp    c0021a59 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002195e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021961:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021964:	31 d2                	xor    edx,edx
c0021966:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002196a:	39 c2                	cmp    edx,eax
c002196c:	7d 14                	jge    c0021982 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002196e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021979:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002197c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002197f:	42                   	inc    edx
c0021980:	eb e8                	jmp    c002196a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021982:	89 c3                	mov    ebx,eax
c0021984:	85 c0                	test   eax,eax
c0021986:	79 02                	jns    c002198a <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021988:	31 db                	xor    ebx,ebx
c002198a:	99                   	cdq    
c002198b:	01 c3                	add    ebx,eax
c002198d:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021994:	01 c6                	add    esi,eax
c0021996:	11 d7                	adc    edi,edx
c0021998:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002199c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219a0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219a3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219a7:	29 c6                	sub    esi,eax
c00219a9:	19 d7                	sbb    edi,edx
c00219ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00219ae:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219b2:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219b7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219ba:	b8 00 00 00 00       	mov    eax,0x0
c00219bf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219c3:	7d 3e                	jge    c0021a03 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219c5:	52                   	push   edx
c00219c6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219ca:	50                   	push   eax
c00219cb:	53                   	push   ebx
c00219cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00219d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00219d4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219d8:	50                   	push   eax
c00219d9:	e8 d9 fd ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219de:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00219e6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00219eb:	81 c3 00 08 00 00    	add    ebx,0x800
c00219f1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00219f9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00219fe:	83 c4 10             	add    esp,0x10
c0021a01:	eb af                	jmp    c00219b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a07:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a0a:	74 32                	je     c0021a3e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a0c:	50                   	push   eax
c0021a0d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a11:	50                   	push   eax
c0021a12:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a16:	50                   	push   eax
c0021a17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a1b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a1f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a23:	56                   	push   esi
c0021a24:	e8 8e fd ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a29:	83 c4 0c             	add    esp,0xc
c0021a2c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a30:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a34:	50                   	push   eax
c0021a35:	53                   	push   ebx
c0021a36:	e8 09 ed fd ff       	call   c0000744 <memcpy>
c0021a3b:	83 c4 10             	add    esp,0x10
c0021a3e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a45:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a4d:	89 38                	mov    DWORD PTR [eax],edi
c0021a4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a53:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a56:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a59:	31 c0                	xor    eax,eax
c0021a5b:	eb 05                	jmp    c0021a62 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a5d:	b8 04 00 00 00       	mov    eax,0x4
c0021a62:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a68:	5b                   	pop    ebx
c0021a69:	5e                   	pop    esi
c0021a6a:	5f                   	pop    edi
c0021a6b:	5d                   	pop    ebp
c0021a6c:	c3                   	ret    
c0021a6d:	90                   	nop

c0021a6e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021a6e:	55                   	push   ebp
c0021a6f:	57                   	push   edi
c0021a70:	56                   	push   esi
c0021a71:	53                   	push   ebx
c0021a72:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021a78:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021a7f:	85 f6                	test   esi,esi
c0021a81:	0f 84 64 02 00 00    	je     c0021ceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a87:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021a8f:	0f 84 56 02 00 00    	je     c0021ceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021a95:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021a98:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021a9b:	75 0a                	jne    c0021aa7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021a9d:	b8 07 00 00 00       	mov    eax,0x7
c0021aa2:	e9 49 02 00 00       	jmp    c0021cf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021aa7:	50                   	push   eax
c0021aa8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021aac:	50                   	push   eax
c0021aad:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ab4:	53                   	push   ebx
c0021ab5:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ab7:	c1 e0 0b             	shl    eax,0xb
c0021aba:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021abd:	c1 e8 0b             	shr    eax,0xb
c0021ac0:	50                   	push   eax
c0021ac1:	e8 f1 fc ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ac6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021ac9:	83 c4 10             	add    esp,0x10
c0021acc:	89 c1                	mov    ecx,eax
c0021ace:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021ad1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ad7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ada:	84 db                	test   bl,bl
c0021adc:	0f 85 90 00 00 00    	jne    c0021b72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021ae2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021ae8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021aee:	29 c7                	sub    edi,eax
c0021af0:	89 fb                	mov    ebx,edi
c0021af2:	c1 fb 1f             	sar    ebx,0x1f
c0021af5:	01 f8                	add    eax,edi
c0021af7:	11 da                	adc    edx,ebx
c0021af9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021afd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b01:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b04:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b07:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b0a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b14:	89 d8                	mov    eax,ebx
c0021b16:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b19:	ba 00 00 00 00       	mov    edx,0x0
c0021b1e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b22:	b8 00 00 00 00       	mov    eax,0x0
c0021b27:	73 0b                	jae    c0021b34 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b30:	29 f8                	sub    eax,edi
c0021b32:	19 da                	sbb    edx,ebx
c0021b34:	89 d3                	mov    ebx,edx
c0021b36:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b39:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b3c:	09 c3                	or     ebx,eax
c0021b3e:	0f 84 59 ff ff ff    	je     c0021a9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b44:	55                   	push   ebp
c0021b45:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b49:	50                   	push   eax
c0021b4a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b51:	53                   	push   ebx
c0021b52:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b54:	c1 e0 0b             	shl    eax,0xb
c0021b57:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b5b:	c1 e8 0b             	shr    eax,0xb
c0021b5e:	50                   	push   eax
c0021b5f:	e8 53 fc ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b64:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b67:	83 c4 10             	add    esp,0x10
c0021b6a:	25 ff 07 00 00       	and    eax,0x7ff
c0021b6f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021b72:	57                   	push   edi
c0021b73:	6a 28                	push   0x28
c0021b75:	6a 00                	push   0x0
c0021b77:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b7b:	50                   	push   eax
c0021b7c:	e8 f7 eb fd ff       	call   c0000778 <memset>
c0021b81:	31 d2                	xor    edx,edx
c0021b83:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021b86:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b8c:	89 f8                	mov    eax,edi
c0021b8e:	83 c0 21             	add    eax,0x21
c0021b91:	83 d2 00             	adc    edx,0x0
c0021b94:	89 c7                	mov    edi,eax
c0021b96:	89 d5                	mov    ebp,edx
c0021b98:	83 c4 10             	add    esp,0x10
c0021b9b:	31 c9                	xor    ecx,ecx
c0021b9d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021ba4:	83 f9 28             	cmp    ecx,0x28
c0021ba7:	88 04 24             	mov    BYTE PTR [esp],al
c0021baa:	0f 94 c2             	sete   dl
c0021bad:	88 d0                	mov    al,dl
c0021baf:	ba ff 07 00 00       	mov    edx,0x7ff
c0021bb4:	39 fa                	cmp    edx,edi
c0021bb6:	ba 00 00 00 00       	mov    edx,0x0
c0021bbb:	19 ea                	sbb    edx,ebp
c0021bbd:	0f 92 c2             	setb   dl
c0021bc0:	09 c2                	or     edx,eax
c0021bc2:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bc6:	0f 94 c0             	sete   al
c0021bc9:	08 d0                	or     al,dl
c0021bcb:	75 16                	jne    c0021be3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bcd:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021bd1:	74 10                	je     c0021be3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bd3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021bd6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021bda:	41                   	inc    ecx
c0021bdb:	83 c7 01             	add    edi,0x1
c0021bde:	83 d5 00             	adc    ebp,0x0
c0021be1:	eb ba                	jmp    c0021b9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021be3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021bea:	83 ec 0c             	sub    esp,0xc
c0021bed:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021bf1:	57                   	push   edi
c0021bf2:	e8 9d eb fd ff       	call   c0000794 <strlen>
c0021bf7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021bff:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c03:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c0a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c0d:	5a                   	pop    edx
c0021c0e:	25 ff 07 00 00       	and    eax,0x7ff
c0021c13:	01 c8                	add    eax,ecx
c0021c15:	59                   	pop    ecx
c0021c16:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c1c:	83 e0 02             	and    eax,0x2
c0021c1f:	3c 01                	cmp    al,0x1
c0021c21:	19 c0                	sbb    eax,eax
c0021c23:	83 c0 02             	add    eax,0x2
c0021c26:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c2a:	57                   	push   edi
c0021c2b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c2f:	50                   	push   eax
c0021c30:	e8 ff eb fd ff       	call   c0000834 <strcpy>
c0021c35:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c39:	83 c4 10             	add    esp,0x10
c0021c3c:	84 c0                	test   al,al
c0021c3e:	75 21                	jne    c0021c61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c40:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c48:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c50:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c58:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c5f:	eb 28                	jmp    c0021c89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c61:	fe c8                	dec    al
c0021c63:	75 24                	jne    c0021c89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c65:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c6d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c75:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c7d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021c84:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021c89:	0f b6 fb             	movzx  edi,bl
c0021c8c:	31 db                	xor    ebx,ebx
c0021c8e:	50                   	push   eax
c0021c8f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021c96:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021c9a:	50                   	push   eax
c0021c9b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021ca2:	e8 9d ea fd ff       	call   c0000744 <memcpy>
c0021ca7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021cae:	89 f9                	mov    ecx,edi
c0021cb0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021cb6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021cb9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cbc:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cbf:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021cc2:	83 c4 10             	add    esp,0x10
c0021cc5:	39 c7                	cmp    edi,eax
c0021cc7:	89 df                	mov    edi,ebx
c0021cc9:	19 d7                	sbb    edi,edx
c0021ccb:	72 10                	jb     c0021cdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ccd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021cd4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021cdb:	eb 0a                	jmp    c0021ce7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021cdd:	29 c8                	sub    eax,ecx
c0021cdf:	19 da                	sbb    edx,ebx
c0021ce1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021ce4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021ce7:	31 c0                	xor    eax,eax
c0021ce9:	eb 05                	jmp    c0021cf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ceb:	b8 04 00 00 00       	mov    eax,0x4
c0021cf0:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021cf6:	5b                   	pop    ebx
c0021cf7:	5e                   	pop    esi
c0021cf8:	5f                   	pop    edi
c0021cf9:	5d                   	pop    ebp
c0021cfa:	c3                   	ret    

c0021cfb <readRoot(unsigned int*, unsigned int*, char)>:
c0021cfb:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d01:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d09:	50                   	push   eax
c0021d0a:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d0e:	50                   	push   eax
c0021d0f:	6a 10                	push   0x10
c0021d11:	e8 a1 fa ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d16:	83 c4 0c             	add    esp,0xc
c0021d19:	6a 22                	push   0x22
c0021d1b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d22:	50                   	push   eax
c0021d23:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d27:	50                   	push   eax
c0021d28:	e8 17 ea fd ff       	call   c0000744 <memcpy>
c0021d2d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d38:	89 10                	mov    DWORD PTR [eax],edx
c0021d3a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d45:	89 10                	mov    DWORD PTR [eax],edx
c0021d47:	b0 01                	mov    al,0x1
c0021d49:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d4f:	c3                   	ret    

c0021d50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d50:	55                   	push   ebp
c0021d51:	57                   	push   edi
c0021d52:	56                   	push   esi
c0021d53:	53                   	push   ebx
c0021d54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d5a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d61:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d6c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021d70:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021d74:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021d78:	75 03                	jne    c0021d7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d7a:	83 c3 02             	add    ebx,0x2
c0021d7d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021d80:	75 03                	jne    c0021d85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021d82:	43                   	inc    ebx
c0021d83:	eb f8                	jmp    c0021d7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021d85:	51                   	push   ecx
c0021d86:	68 00 01 00 00       	push   0x100
c0021d8b:	6a 00                	push   0x0
c0021d8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d91:	50                   	push   eax
c0021d92:	e8 e1 e9 fd ff       	call   c0000778 <memset>
c0021d97:	83 c4 10             	add    esp,0x10
c0021d9a:	31 d2                	xor    edx,edx
c0021d9c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d9f:	84 c0                	test   al,al
c0021da1:	74 21                	je     c0021dc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021da3:	3c 2f                	cmp    al,0x2f
c0021da5:	75 0b                	jne    c0021db2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021da7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021dab:	bd 01 00 00 00       	mov    ebp,0x1
c0021db0:	eb 14                	jmp    c0021dc6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021db2:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021db5:	80 f9 19             	cmp    cl,0x19
c0021db8:	77 03                	ja     c0021dbd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dba:	83 e8 20             	sub    eax,0x20
c0021dbd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021dc1:	42                   	inc    edx
c0021dc2:	eb d8                	jmp    c0021d9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021dc4:	31 ed                	xor    ebp,ebp
c0021dc6:	83 ec 0c             	sub    esp,0xc
c0021dc9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021dd0:	e8 6e da fe ff       	call   c000f843 <malloc>
c0021dd5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021ddc:	89 c6                	mov    esi,eax
c0021dde:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021de4:	c1 ef 0b             	shr    edi,0xb
c0021de7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021dee:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021df2:	83 c4 10             	add    esp,0x10
c0021df5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021dfa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021dfe:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e05:	74 28                	je     c0021e2f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e07:	52                   	push   edx
c0021e08:	57                   	push   edi
c0021e09:	50                   	push   eax
c0021e0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e0e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e15:	e8 9d f9 ff ff       	call   c00217b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e1e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e25:	05 00 08 00 00       	add    eax,0x800
c0021e2a:	83 c4 10             	add    esp,0x10
c0021e2d:	eb cb                	jmp    c0021dfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e2f:	83 ec 0c             	sub    esp,0xc
c0021e32:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e36:	57                   	push   edi
c0021e37:	e8 58 e9 fd ff       	call   c0000794 <strlen>
c0021e3c:	50                   	push   eax
c0021e3d:	57                   	push   edi
c0021e3e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e45:	56                   	push   esi
c0021e46:	e8 2a f9 ff ff       	call   c0021775 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e4b:	83 c4 20             	add    esp,0x20
c0021e4e:	85 c0                	test   eax,eax
c0021e50:	75 13                	jne    c0021e65 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	56                   	push   esi
c0021e56:	e8 f8 d9 fe ff       	call   c000f853 <free>
c0021e5b:	83 c4 10             	add    esp,0x10
c0021e5e:	31 c0                	xor    eax,eax
c0021e60:	e9 b3 00 00 00       	jmp    c0021f18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e65:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e69:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e6d:	c1 e7 08             	shl    edi,0x8
c0021e70:	c1 e2 10             	shl    edx,0x10
c0021e73:	09 d7                	or     edi,edx
c0021e75:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021e79:	09 d7                	or     edi,edx
c0021e7b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021e7f:	c1 e2 18             	shl    edx,0x18
c0021e82:	09 d7                	or     edi,edx
c0021e84:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021e88:	89 d1                	mov    ecx,edx
c0021e8a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021e8e:	c1 e1 08             	shl    ecx,0x8
c0021e91:	c1 e2 10             	shl    edx,0x10
c0021e94:	09 ca                	or     edx,ecx
c0021e96:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021e9a:	09 ca                	or     edx,ecx
c0021e9c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ea0:	c1 e1 18             	shl    ecx,0x18
c0021ea3:	09 ca                	or     edx,ecx
c0021ea5:	89 e9                	mov    ecx,ebp
c0021ea7:	84 c9                	test   cl,cl
c0021ea9:	74 3c                	je     c0021ee7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021eab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021eaf:	83 ec 0c             	sub    esp,0xc
c0021eb2:	56                   	push   esi
c0021eb3:	e8 9b d9 fe ff       	call   c000f853 <free>
c0021eb8:	83 c4 0c             	add    esp,0xc
c0021ebb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ec2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ec7:	50                   	push   eax
c0021ec8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ecf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ed6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eda:	52                   	push   edx
c0021edb:	57                   	push   edi
c0021edc:	53                   	push   ebx
c0021edd:	e8 6e fe ff ff       	call   c0021d50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ee2:	83 c4 20             	add    esp,0x20
c0021ee5:	eb 31                	jmp    c0021f18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ee7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021eea:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021ef1:	d0 e8                	shr    al,1
c0021ef3:	89 3b                	mov    DWORD PTR [ebx],edi
c0021ef5:	83 e0 01             	and    eax,0x1
c0021ef8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021eff:	83 ec 0c             	sub    esp,0xc
c0021f02:	89 13                	mov    DWORD PTR [ebx],edx
c0021f04:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f0b:	89 03                	mov    DWORD PTR [ebx],eax
c0021f0d:	56                   	push   esi
c0021f0e:	e8 40 d9 fe ff       	call   c000f853 <free>
c0021f13:	83 c4 10             	add    esp,0x10
c0021f16:	b0 01                	mov    al,0x1
c0021f18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f1e:	5b                   	pop    ebx
c0021f1f:	5e                   	pop    esi
c0021f20:	5f                   	pop    edi
c0021f21:	5d                   	pop    ebp
c0021f22:	c3                   	ret    

c0021f23 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f23:	55                   	push   ebp
c0021f24:	57                   	push   edi
c0021f25:	56                   	push   esi
c0021f26:	53                   	push   ebx
c0021f27:	83 ec 20             	sub    esp,0x20
c0021f2a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f2e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f32:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f3e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f46:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f4b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f51:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f57:	57                   	push   edi
c0021f58:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f5c:	50                   	push   eax
c0021f5d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f61:	50                   	push   eax
c0021f62:	e8 94 fd ff ff       	call   c0021cfb <readRoot(unsigned int*, unsigned int*, char)>
c0021f67:	5a                   	pop    edx
c0021f68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f6c:	e8 23 e8 fd ff       	call   c0000794 <strlen>
c0021f71:	83 c4 10             	add    esp,0x10
c0021f74:	83 f8 03             	cmp    eax,0x3
c0021f77:	77 17                	ja     c0021f90 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f7d:	89 03                	mov    DWORD PTR [ebx],eax
c0021f7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f83:	89 06                	mov    DWORD PTR [esi],eax
c0021f85:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021f8c:	b0 01                	mov    al,0x1
c0021f8e:	eb 19                	jmp    c0021fa9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021f90:	50                   	push   eax
c0021f91:	55                   	push   ebp
c0021f92:	57                   	push   edi
c0021f93:	56                   	push   esi
c0021f94:	53                   	push   ebx
c0021f95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f9d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fa1:	e8 aa fd ff ff       	call   c0021d50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fa6:	83 c4 20             	add    esp,0x20
c0021fa9:	83 c4 1c             	add    esp,0x1c
c0021fac:	5b                   	pop    ebx
c0021fad:	5e                   	pop    esi
c0021fae:	5f                   	pop    edi
c0021faf:	5d                   	pop    ebp
c0021fb0:	c3                   	ret    
c0021fb1:	90                   	nop

c0021fb2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fb2:	57                   	push   edi
c0021fb3:	56                   	push   esi
c0021fb4:	53                   	push   ebx
c0021fb5:	83 ec 10             	sub    esp,0x10
c0021fb8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fbc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fc0:	85 ff                	test   edi,edi
c0021fc2:	0f 84 9d 00 00 00    	je     c0022065 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fc8:	85 f6                	test   esi,esi
c0021fca:	0f 84 95 00 00 00    	je     c0022065 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021fd0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021fd5:	74 17                	je     c0021fee <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021fd7:	83 ec 0c             	sub    esp,0xc
c0021fda:	68 97 c9 02 c0       	push   0xc002c997
c0021fdf:	e8 90 0f ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0021fe4:	83 c4 10             	add    esp,0x10
c0021fe7:	b8 03 00 00 00       	mov    eax,0x3
c0021fec:	eb 7c                	jmp    c002206a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021fee:	83 ec 0c             	sub    esp,0xc
c0021ff1:	6a 1c                	push   0x1c
c0021ff3:	e8 4b d8 fe ff       	call   c000f843 <malloc>
c0021ff8:	89 07                	mov    DWORD PTR [edi],eax
c0021ffa:	89 c3                	mov    ebx,eax
c0021ffc:	58                   	pop    eax
c0021ffd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022001:	50                   	push   eax
c0022002:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022005:	50                   	push   eax
c0022006:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002200a:	50                   	push   eax
c002200b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002200f:	50                   	push   eax
c0022010:	56                   	push   esi
c0022011:	e8 0d ff ff ff       	call   c0021f23 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022016:	83 c4 20             	add    esp,0x20
c0022019:	84 c0                	test   al,al
c002201b:	74 07                	je     c0022024 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002201d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022022:	74 0b                	je     c002202f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022024:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022028:	b8 01 00 00 00       	mov    eax,0x1
c002202d:	eb 3b                	jmp    c002206a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002202f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022033:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022037:	89 03                	mov    DWORD PTR [ebx],eax
c0022039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022044:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002204b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022052:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022055:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002205c:	8a 06                	mov    al,BYTE PTR [esi]
c002205e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022061:	31 c0                	xor    eax,eax
c0022063:	eb 05                	jmp    c002206a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022065:	b8 04 00 00 00       	mov    eax,0x4
c002206a:	83 c4 10             	add    esp,0x10
c002206d:	5b                   	pop    ebx
c002206e:	5e                   	pop    esi
c002206f:	5f                   	pop    edi
c0022070:	c3                   	ret    
c0022071:	90                   	nop

c0022072 <ISO9660::exists(char const*)>:
c0022072:	83 ec 28             	sub    esp,0x28
c0022075:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022079:	8d 54 24 18          	lea    edx,[esp+0x18]
c002207d:	52                   	push   edx
c002207e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022081:	52                   	push   edx
c0022082:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022086:	52                   	push   edx
c0022087:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002208b:	52                   	push   edx
c002208c:	50                   	push   eax
c002208d:	e8 91 fe ff ff       	call   c0021f23 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022092:	83 c4 3c             	add    esp,0x3c
c0022095:	c3                   	ret    

c0022096 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022096:	56                   	push   esi
c0022097:	53                   	push   ebx
c0022098:	83 ec 14             	sub    esp,0x14
c002209b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002209f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220a3:	85 db                	test   ebx,ebx
c00220a5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220a9:	0f 94 c2             	sete   dl
c00220ac:	85 f6                	test   esi,esi
c00220ae:	0f 94 c0             	sete   al
c00220b1:	08 c2                	or     dl,al
c00220b3:	75 68                	jne    c002211d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220b5:	85 c9                	test   ecx,ecx
c00220b7:	74 64                	je     c002211d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220b9:	83 ec 0c             	sub    esp,0xc
c00220bc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220d0:	50                   	push   eax
c00220d1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00220d4:	50                   	push   eax
c00220d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220d9:	50                   	push   eax
c00220da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220de:	50                   	push   eax
c00220df:	51                   	push   ecx
c00220e0:	e8 3e fe ff ff       	call   c0021f23 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220e5:	83 c4 20             	add    esp,0x20
c00220e8:	ba 01 00 00 00       	mov    edx,0x1
c00220ed:	84 c0                	test   al,al
c00220ef:	74 31                	je     c0022122 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00220f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220fc:	89 03                	mov    DWORD PTR [ebx],eax
c00220fe:	ba 00 00 00 00       	mov    edx,0x0
c0022103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022107:	85 c0                	test   eax,eax
c0022109:	0f 95 06             	setne  BYTE PTR [esi]
c002210c:	74 14                	je     c0022122 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002210e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022114:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002211b:	eb 05                	jmp    c0022122 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002211d:	ba 04 00 00 00       	mov    edx,0x4
c0022122:	83 c4 14             	add    esp,0x14
c0022125:	89 d0                	mov    eax,edx
c0022127:	5b                   	pop    ebx
c0022128:	5e                   	pop    esi
c0022129:	c3                   	ret    

c002212a <ISO9660::openDir(char const*, void**)>:
c002212a:	57                   	push   edi
c002212b:	56                   	push   esi
c002212c:	53                   	push   ebx
c002212d:	83 ec 10             	sub    esp,0x10
c0022130:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022134:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022138:	85 ff                	test   edi,edi
c002213a:	0f 84 95 00 00 00    	je     c00221d5 <ISO9660::openDir(char const*, void**)+0xab>
c0022140:	85 f6                	test   esi,esi
c0022142:	0f 84 8d 00 00 00    	je     c00221d5 <ISO9660::openDir(char const*, void**)+0xab>
c0022148:	83 ec 0c             	sub    esp,0xc
c002214b:	6a 1c                	push   0x1c
c002214d:	e8 f1 d6 fe ff       	call   c000f843 <malloc>
c0022152:	89 07                	mov    DWORD PTR [edi],eax
c0022154:	89 c3                	mov    ebx,eax
c0022156:	59                   	pop    ecx
c0022157:	8d 44 24 18          	lea    eax,[esp+0x18]
c002215b:	50                   	push   eax
c002215c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002215f:	50                   	push   eax
c0022160:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022164:	50                   	push   eax
c0022165:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022169:	50                   	push   eax
c002216a:	56                   	push   esi
c002216b:	e8 b3 fd ff ff       	call   c0021f23 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022170:	83 c4 20             	add    esp,0x20
c0022173:	84 c0                	test   al,al
c0022175:	74 07                	je     c002217e <ISO9660::openDir(char const*, void**)+0x54>
c0022177:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002217c:	75 21                	jne    c002219f <ISO9660::openDir(char const*, void**)+0x75>
c002217e:	0f b6 c0             	movzx  eax,al
c0022181:	52                   	push   edx
c0022182:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022186:	50                   	push   eax
c0022187:	68 bd c9 02 c0       	push   0xc002c9bd
c002218c:	e8 e3 0d ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0022191:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022195:	83 c4 10             	add    esp,0x10
c0022198:	b8 01 00 00 00       	mov    eax,0x1
c002219d:	eb 3b                	jmp    c00221da <ISO9660::openDir(char const*, void**)+0xb0>
c002219f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221a7:	89 03                	mov    DWORD PTR [ebx],eax
c00221a9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221c5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221cc:	8a 06                	mov    al,BYTE PTR [esi]
c00221ce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221d1:	31 c0                	xor    eax,eax
c00221d3:	eb 05                	jmp    c00221da <ISO9660::openDir(char const*, void**)+0xb0>
c00221d5:	b8 04 00 00 00       	mov    eax,0x4
c00221da:	83 c4 10             	add    esp,0x10
c00221dd:	5b                   	pop    ebx
c00221de:	5e                   	pop    esi
c00221df:	5f                   	pop    edi
c00221e0:	c3                   	ret    
c00221e1:	90                   	nop

c00221e2 <ISO9660::ISO9660()>:
c00221e2:	83 ec 0c             	sub    esp,0xc
c00221e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e9:	83 ec 0c             	sub    esp,0xc
c00221ec:	50                   	push   eax
c00221ed:	e8 86 10 ff ff       	call   c0013278 <Filesystem::Filesystem()>
c00221f2:	83 c4 10             	add    esp,0x10
c00221f5:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c00221fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221fe:	89 10                	mov    DWORD PTR [eax],edx
c0022200:	90                   	nop
c0022201:	83 c4 0c             	add    esp,0xc
c0022204:	c3                   	ret    
c0022205:	90                   	nop

c0022206 <SoundChannel::~SoundChannel()>:
c0022206:	83 ec 0c             	sub    esp,0xc
c0022209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	50                   	push   eax
c0022214:	e8 3a d6 fe ff       	call   c000f853 <free>
c0022219:	83 c4 10             	add    esp,0x10
c002221c:	90                   	nop
c002221d:	83 c4 0c             	add    esp,0xc
c0022220:	c3                   	ret    
c0022221:	90                   	nop

c0022222 <SoundChannel::setSpeed(float)>:
c0022222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022226:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002222a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002222d:	c3                   	ret    

c002222e <SoundChannel::getSpeed()>:
c002222e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022232:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022235:	c3                   	ret    

c0022236 <SoundChannel::setVolume(int)>:
c0022236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002223a:	83 f8 64             	cmp    eax,0x64
c002223d:	7e 05                	jle    c0022244 <SoundChannel::setVolume(int)+0xe>
c002223f:	b8 64 00 00 00       	mov    eax,0x64
c0022244:	85 c0                	test   eax,eax
c0022246:	79 02                	jns    c002224a <SoundChannel::setVolume(int)+0x14>
c0022248:	31 c0                	xor    eax,eax
c002224a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002224e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022251:	c3                   	ret    

c0022252 <SoundChannel::getVolume()>:
c0022252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022256:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022259:	c3                   	ret    

c002225a <SoundChannel::pause()>:
c002225a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002225e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022262:	c3                   	ret    
c0022263:	90                   	nop

c0022264 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022264:	83 ec 1c             	sub    esp,0x1c
c0022267:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002226b:	e8 ea ff ff ff       	call   c002225a <SoundChannel::pause()>
c0022270:	83 c4 04             	add    esp,0x4
c0022273:	6a 50                	push   0x50
c0022275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022279:	e8 b8 ff ff ff       	call   c0022236 <SoundChannel::setVolume(int)>
c002227e:	83 c4 08             	add    esp,0x8
c0022281:	a1 58 ca 02 c0       	mov    eax,ds:0xc002ca58
c0022286:	50                   	push   eax
c0022287:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002228b:	e8 92 ff ff ff       	call   c0022222 <SoundChannel::setSpeed(float)>
c0022290:	83 c4 08             	add    esp,0x8
c0022293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022297:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002229b:	89 10                	mov    DWORD PTR [eax],edx
c002229d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222b3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222b8:	75 23                	jne    c00222dd <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222be:	8b 10                	mov    edx,DWORD PTR [eax]
c00222c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222c7:	0f af c2             	imul   eax,edx
c00222ca:	85 c0                	test   eax,eax
c00222cc:	79 03                	jns    c00222d1 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00222ce:	83 c0 03             	add    eax,0x3
c00222d1:	c1 f8 02             	sar    eax,0x2
c00222d4:	05 a0 0f 00 00       	add    eax,0xfa0
c00222d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00222e5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00222e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00222f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00222fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022302:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022305:	c1 e0 02             	shl    eax,0x2
c0022308:	83 ec 0c             	sub    esp,0xc
c002230b:	50                   	push   eax
c002230c:	e8 32 d5 fe ff       	call   c000f843 <malloc>
c0022311:	83 c4 10             	add    esp,0x10
c0022314:	89 c2                	mov    edx,eax
c0022316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002231d:	83 ec 04             	sub    esp,0x4
c0022320:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022324:	50                   	push   eax
c0022325:	6a 01                	push   0x1
c0022327:	6a 04                	push   0x4
c0022329:	e8 71 68 fe ff       	call   c0008b9f <src_new>
c002232e:	83 c4 10             	add    esp,0x10
c0022331:	89 c2                	mov    edx,eax
c0022333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022337:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002233a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002233e:	85 c0                	test   eax,eax
c0022340:	74 10                	je     c0022352 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022342:	83 ec 0c             	sub    esp,0xc
c0022345:	68 3c ca 02 c0       	push   0xc002ca3c
c002234a:	e8 d2 82 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c002234f:	83 c4 10             	add    esp,0x10
c0022352:	a0 00 28 03 c0       	mov    al,ds:0xc0032800
c0022357:	83 f0 01             	xor    eax,0x1
c002235a:	84 c0                	test   al,al
c002235c:	74 57                	je     c00223b5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002235e:	a1 5c ca 02 c0       	mov    eax,ds:0xc002ca5c
c0022363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022367:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002236f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022377:	7f 35                	jg     c00223ae <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022379:	83 ec 0c             	sub    esp,0xc
c002237c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022380:	e8 92 4f 00 00       	call   c0027317 <__floatsisf>
c0022385:	83 c4 10             	add    esp,0x10
c0022388:	8b 15 5c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca5c
c002238e:	83 ec 08             	sub    esp,0x8
c0022391:	52                   	push   edx
c0022392:	50                   	push   eax
c0022393:	e8 91 4b 00 00       	call   c0026f29 <__mulsf3>
c0022398:	83 c4 10             	add    esp,0x10
c002239b:	89 c2                	mov    edx,eax
c002239d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223a1:	89 14 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],edx
c00223a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223ac:	eb c1                	jmp    c002236f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223ae:	c6 05 00 28 03 c0 01 	mov    BYTE PTR ds:0xc0032800,0x1
c00223b5:	90                   	nop
c00223b6:	83 c4 1c             	add    esp,0x1c
c00223b9:	c3                   	ret    

c00223ba <SoundChannel::play()>:
c00223ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223be:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223c2:	c3                   	ret    
c00223c3:	90                   	nop

c00223c4 <SoundChannel::paused()>:
c00223c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223cb:	c3                   	ret    

c00223cc <SoundChannel::getSampleRate()>:
c00223cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00223d2:	c3                   	ret    
c00223d3:	90                   	nop

c00223d4 <SoundChannel::getBits()>:
c00223d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223db:	c3                   	ret    

c00223dc <SoundChannel::getBufferUsed()>:
c00223dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00223e3:	c3                   	ret    

c00223e4 <SoundChannel::getBufferSize()>:
c00223e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223eb:	c3                   	ret    

c00223ec <SoundChannel::unbuffer(float*, int, int)>:
c00223ec:	56                   	push   esi
c00223ed:	53                   	push   ebx
c00223ee:	83 ec 40             	sub    esp,0x40
c00223f1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00223f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00223f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223fc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00223ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022403:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022407:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002240b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002240f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022413:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022417:	e8 fb 4e 00 00       	call   c0027317 <__floatsisf>
c002241c:	5a                   	pop    edx
c002241d:	89 c6                	mov    esi,eax
c002241f:	ff 33                	push   DWORD PTR [ebx]
c0022421:	e8 f1 4e 00 00       	call   c0027317 <__floatsisf>
c0022426:	59                   	pop    ecx
c0022427:	5a                   	pop    edx
c0022428:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002242b:	50                   	push   eax
c002242c:	e8 f8 4a 00 00       	call   c0026f29 <__mulsf3>
c0022431:	59                   	pop    ecx
c0022432:	5a                   	pop    edx
c0022433:	50                   	push   eax
c0022434:	56                   	push   esi
c0022435:	e8 b2 4c 00 00       	call   c00270ec <__divsf3>
c002243a:	89 04 24             	mov    DWORD PTR [esp],eax
c002243d:	e8 a5 61 00 00       	call   c00285e7 <__extendsfdf2>
c0022442:	59                   	pop    ecx
c0022443:	5e                   	pop    esi
c0022444:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022448:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002244c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022454:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022458:	50                   	push   eax
c0022459:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002245c:	e8 33 63 fe ff       	call   c0008794 <src_process>
c0022461:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022465:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022468:	83 c4 0c             	add    esp,0xc
c002246b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002246e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022471:	29 d0                	sub    eax,edx
c0022473:	c1 e0 02             	shl    eax,0x2
c0022476:	50                   	push   eax
c0022477:	8d 04 91             	lea    eax,[ecx+edx*4]
c002247a:	50                   	push   eax
c002247b:	51                   	push   ecx
c002247c:	e8 fb e1 fd ff       	call   c000067c <memmove>
c0022481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022485:	83 c4 44             	add    esp,0x44
c0022488:	5b                   	pop    ebx
c0022489:	5e                   	pop    esi
c002248a:	c3                   	ret    
c002248b:	90                   	nop

c002248c <SoundChannel::buffer8(unsigned char*, int)>:
c002248c:	55                   	push   ebp
c002248d:	57                   	push   edi
c002248e:	56                   	push   esi
c002248f:	53                   	push   ebx
c0022490:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022494:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022498:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002249b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002249f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224a2:	74 7a                	je     c002251e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224a4:	85 ff                	test   edi,edi
c00224a6:	7e 76                	jle    c002251e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224a8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224ac:	8d 70 01             	lea    esi,[eax+0x1]
c00224af:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224b2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224b5:	8b 1c 9d 00 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc00]
c00224bc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224bf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224c2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224c5:	74 5e                	je     c0022525 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224c7:	83 ff 01             	cmp    edi,0x1
c00224ca:	74 4b                	je     c0022517 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224cc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00224d0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224d3:	8d 70 01             	lea    esi,[eax+0x1]
c00224d6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224d9:	8b 1c 9d 00 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc00]
c00224e0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224e3:	b8 02 00 00 00       	mov    eax,0x2
c00224e8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00224eb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00224ee:	75 23                	jne    c0022513 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00224f0:	eb 27                	jmp    c0022519 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00224f2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00224f7:	8d 71 01             	lea    esi,[ecx+0x1]
c00224fa:	40                   	inc    eax
c00224fb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224fe:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022501:	8b 1c 9d 00 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdc00]
c0022508:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002250b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002250e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022511:	74 06                	je     c0022519 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022513:	39 c7                	cmp    edi,eax
c0022515:	75 db                	jne    c00224f2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022517:	89 f8                	mov    eax,edi
c0022519:	5b                   	pop    ebx
c002251a:	5e                   	pop    esi
c002251b:	5f                   	pop    edi
c002251c:	5d                   	pop    ebp
c002251d:	c3                   	ret    
c002251e:	5b                   	pop    ebx
c002251f:	31 c0                	xor    eax,eax
c0022521:	5e                   	pop    esi
c0022522:	5f                   	pop    edi
c0022523:	5d                   	pop    ebp
c0022524:	c3                   	ret    
c0022525:	b8 01 00 00 00       	mov    eax,0x1
c002252a:	eb ed                	jmp    c0022519 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002252c <SoundDevice::SoundDevice(char const*)>:
c002252c:	83 ec 1c             	sub    esp,0x1c
c002252f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022533:	83 ec 08             	sub    esp,0x8
c0022536:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002253a:	50                   	push   eax
c002253b:	e8 4a 20 ff ff       	call   c001458a <Device::Device(char const*)>
c0022540:	83 c4 10             	add    esp,0x10
c0022543:	ba 68 ca 02 c0       	mov    edx,0xc002ca68
c0022548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002254c:	89 10                	mov    DWORD PTR [eax],edx
c002254e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022552:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002255c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022560:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002256a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022572:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022577:	7f 19                	jg     c0022592 <SoundDevice::SoundDevice(char const*)+0x66>
c0022579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022581:	83 c2 54             	add    edx,0x54
c0022584:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002258c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022590:	eb e0                	jmp    c0022572 <SoundDevice::SoundDevice(char const*)+0x46>
c0022592:	90                   	nop
c0022593:	83 c4 1c             	add    esp,0x1c
c0022596:	c3                   	ret    
c0022597:	90                   	nop

c0022598 <SoundDevice::~SoundDevice()>:
c0022598:	53                   	push   ebx
c0022599:	83 ec 18             	sub    esp,0x18
c002259c:	ba 68 ca 02 c0       	mov    edx,0xc002ca68
c00225a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225a5:	89 10                	mov    DWORD PTR [eax],edx
c00225a7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225af:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225b4:	7f 46                	jg     c00225fc <SoundDevice::~SoundDevice()+0x64>
c00225b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225be:	83 c2 54             	add    edx,0x54
c00225c1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225c5:	85 c0                	test   eax,eax
c00225c7:	74 2d                	je     c00225f6 <SoundDevice::~SoundDevice()+0x5e>
c00225c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225d1:	83 c2 54             	add    edx,0x54
c00225d4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00225d8:	85 db                	test   ebx,ebx
c00225da:	74 1a                	je     c00225f6 <SoundDevice::~SoundDevice()+0x5e>
c00225dc:	83 ec 0c             	sub    esp,0xc
c00225df:	53                   	push   ebx
c00225e0:	e8 21 fc ff ff       	call   c0022206 <SoundChannel::~SoundChannel()>
c00225e5:	83 c4 10             	add    esp,0x10
c00225e8:	83 ec 08             	sub    esp,0x8
c00225eb:	6a 2c                	push   0x2c
c00225ed:	53                   	push   ebx
c00225ee:	e8 a1 08 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225fa:	eb b3                	jmp    c00225af <SoundDevice::~SoundDevice()+0x17>
c00225fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022600:	83 ec 0c             	sub    esp,0xc
c0022603:	50                   	push   eax
c0022604:	e8 63 1c ff ff       	call   c001426c <Device::~Device()>
c0022609:	83 c4 10             	add    esp,0x10
c002260c:	90                   	nop
c002260d:	83 c4 18             	add    esp,0x18
c0022610:	5b                   	pop    ebx
c0022611:	c3                   	ret    

c0022612 <SoundDevice::~SoundDevice()>:
c0022612:	83 ec 0c             	sub    esp,0xc
c0022615:	83 ec 0c             	sub    esp,0xc
c0022618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002261c:	e8 77 ff ff ff       	call   c0022598 <SoundDevice::~SoundDevice()>
c0022621:	83 c4 10             	add    esp,0x10
c0022624:	83 ec 08             	sub    esp,0x8
c0022627:	68 e4 01 00 00       	push   0x1e4
c002262c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022630:	e8 5f 08 ff ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0022635:	83 c4 10             	add    esp,0x10
c0022638:	83 c4 0c             	add    esp,0xc
c002263b:	c3                   	ret    

c002263c <SoundDevice::getFreeChannelNum()>:
c002263c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022640:	31 c0                	xor    eax,eax
c0022642:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002264a:	74 09                	je     c0022655 <SoundDevice::getFreeChannelNum()+0x19>
c002264c:	40                   	inc    eax
c002264d:	83 f8 20             	cmp    eax,0x20
c0022650:	75 f0                	jne    c0022642 <SoundDevice::getFreeChannelNum()+0x6>
c0022652:	83 c8 ff             	or     eax,0xffffffff
c0022655:	c3                   	ret    

c0022656 <SoundDevice::addChannel(SoundChannel*)>:
c0022656:	56                   	push   esi
c0022657:	53                   	push   ebx
c0022658:	51                   	push   ecx
c0022659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002265d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022661:	53                   	push   ebx
c0022662:	e8 d5 ff ff ff       	call   c002263c <SoundDevice::getFreeChannelNum()>
c0022667:	5a                   	pop    edx
c0022668:	83 f8 ff             	cmp    eax,0xffffffff
c002266b:	74 51                	je     c00226be <SoundDevice::addChannel(SoundChannel*)+0x68>
c002266d:	85 f6                	test   esi,esi
c002266f:	74 4d                	je     c00226be <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022671:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022678:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002267f:	75 30                	jne    c00226b1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022681:	83 ec 0c             	sub    esp,0xc
c0022684:	56                   	push   esi
c0022685:	e8 42 fd ff ff       	call   c00223cc <SoundChannel::getSampleRate()>
c002268a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022690:	89 34 24             	mov    DWORD PTR [esp],esi
c0022693:	e8 3c fd ff ff       	call   c00223d4 <SoundChannel::getBits()>
c0022698:	83 c4 0c             	add    esp,0xc
c002269b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226a1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226a3:	50                   	push   eax
c00226a4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226aa:	53                   	push   ebx
c00226ab:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226ae:	83 c4 10             	add    esp,0x10
c00226b1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226b7:	b8 01 00 00 00       	mov    eax,0x1
c00226bc:	eb 03                	jmp    c00226c1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226be:	83 c8 ff             	or     eax,0xffffffff
c00226c1:	5a                   	pop    edx
c00226c2:	5b                   	pop    ebx
c00226c3:	5e                   	pop    esi
c00226c4:	c3                   	ret    
c00226c5:	90                   	nop

c00226c6 <SoundDevice::removeChannel(int)>:
c00226c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226ce:	83 fa 1f             	cmp    edx,0x1f
c00226d1:	77 23                	ja     c00226f6 <SoundDevice::removeChannel(int)+0x30>
c00226d3:	8d 14 90             	lea    edx,[eax+edx*4]
c00226d6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00226dd:	74 17                	je     c00226f6 <SoundDevice::removeChannel(int)+0x30>
c00226df:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00226e9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00226ef:	75 05                	jne    c00226f6 <SoundDevice::removeChannel(int)+0x30>
c00226f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00226f3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00226f6:	c3                   	ret    
c00226f7:	90                   	nop

c00226f8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00226f8:	57                   	push   edi
c00226f9:	56                   	push   esi
c00226fa:	53                   	push   ebx
c00226fb:	31 db                	xor    ebx,ebx
c00226fd:	83 ec 10             	sub    esp,0x10
c0022700:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022704:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022708:	0f 8d cb 00 00 00    	jge    c00227d9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002270e:	83 ec 0c             	sub    esp,0xc
c0022711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022715:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022718:	e8 ca 5e 00 00       	call   c00285e7 <__extendsfdf2>
c002271d:	83 c4 10             	add    esp,0x10
c0022720:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022724:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022728:	68 00 00 f0 3f       	push   0x3ff00000
c002272d:	6a 00                	push   0x0
c002272f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022737:	e8 37 4e 00 00       	call   c0027573 <__adddf3>
c002273c:	83 c4 10             	add    esp,0x10
c002273f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022743:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022747:	68 00 00 e0 3f       	push   0x3fe00000
c002274c:	6a 00                	push   0x0
c002274e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022752:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022756:	e8 95 54 00 00       	call   c0027bf0 <__muldf3>
c002275b:	83 c4 10             	add    esp,0x10
c002275e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022762:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022766:	68 00 00 60 40       	push   0x40600000
c002276b:	6a 00                	push   0x0
c002276d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022775:	e8 76 54 00 00       	call   c0027bf0 <__muldf3>
c002277a:	59                   	pop    ecx
c002277b:	5f                   	pop    edi
c002277c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022780:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022784:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022788:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002278c:	e8 32 5d 00 00       	call   c00284c3 <__truncdfsf2>
c0022791:	5a                   	pop    edx
c0022792:	89 c7                	mov    edi,eax
c0022794:	59                   	pop    ecx
c0022795:	68 00 00 fe 42       	push   0x42fe0000
c002279a:	50                   	push   eax
c002279b:	e8 cd 4d 00 00       	call   c002756d <__gesf2>
c00227a0:	83 c4 10             	add    esp,0x10
c00227a3:	85 c0                	test   eax,eax
c00227a5:	78 06                	js     c00227ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227a7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227ab:	eb 26                	jmp    c00227d3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227ad:	50                   	push   eax
c00227ae:	50                   	push   eax
c00227af:	6a 00                	push   0x0
c00227b1:	57                   	push   edi
c00227b2:	e8 ba 4d 00 00       	call   c0027571 <__lesf2>
c00227b7:	83 c4 10             	add    esp,0x10
c00227ba:	85 c0                	test   eax,eax
c00227bc:	7f 06                	jg     c00227c4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227be:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227c2:	eb 0f                	jmp    c00227d3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227c4:	83 ec 0c             	sub    esp,0xc
c00227c7:	57                   	push   edi
c00227c8:	e8 af 5e 00 00       	call   c002867c <lrintf>
c00227cd:	83 c4 10             	add    esp,0x10
c00227d0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227d3:	43                   	inc    ebx
c00227d4:	e9 2b ff ff ff       	jmp    c0022704 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00227d9:	83 c4 10             	add    esp,0x10
c00227dc:	5b                   	pop    ebx
c00227dd:	5e                   	pop    esi
c00227de:	5f                   	pop    edi
c00227df:	c3                   	ret    

c00227e0 <SoundDevice::getAudio(int, float*, float*)>:
c00227e0:	55                   	push   ebp
c00227e1:	57                   	push   edi
c00227e2:	56                   	push   esi
c00227e3:	53                   	push   ebx
c00227e4:	31 db                	xor    ebx,ebx
c00227e6:	83 ec 20             	sub    esp,0x20
c00227e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00227ed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00227f1:	c1 e0 02             	shl    eax,0x2
c00227f4:	50                   	push   eax
c00227f5:	6a 00                	push   0x0
c00227f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00227fb:	e8 78 df fd ff       	call   c0000778 <memset>
c0022800:	83 c4 10             	add    esp,0x10
c0022803:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022807:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002280e:	85 c0                	test   eax,eax
c0022810:	0f 84 d7 00 00 00    	je     c00228ed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022816:	83 ec 0c             	sub    esp,0xc
c0022819:	50                   	push   eax
c002281a:	e8 a5 fb ff ff       	call   c00223c4 <SoundChannel::paused()>
c002281f:	83 c4 10             	add    esp,0x10
c0022822:	84 c0                	test   al,al
c0022824:	0f 85 c3 00 00 00    	jne    c00228ed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002282a:	83 ec 0c             	sub    esp,0xc
c002282d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022834:	e8 19 fa ff ff       	call   c0022252 <SoundChannel::getVolume()>
c0022839:	83 c4 10             	add    esp,0x10
c002283c:	85 c0                	test   eax,eax
c002283e:	0f 84 a9 00 00 00    	je     c00228ed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022844:	83 ec 0c             	sub    esp,0xc
c0022847:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002284e:	e8 ff f9 ff ff       	call   c0022252 <SoundChannel::getVolume()>
c0022853:	83 ec 0c             	sub    esp,0xc
c0022856:	50                   	push   eax
c0022857:	e8 bb 4a 00 00       	call   c0027317 <__floatsisf>
c002285c:	59                   	pop    ecx
c002285d:	5d                   	pop    ebp
c002285e:	31 ed                	xor    ebp,ebp
c0022860:	68 00 00 c8 42       	push   0x42c80000
c0022865:	50                   	push   eax
c0022866:	e8 81 48 00 00       	call   c00270ec <__divsf3>
c002286b:	83 c4 10             	add    esp,0x10
c002286e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022872:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022876:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002287c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022880:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022887:	e8 60 fb ff ff       	call   c00223ec <SoundChannel::unbuffer(float*, int, int)>
c002288c:	83 c4 20             	add    esp,0x20
c002288f:	89 c1                	mov    ecx,eax
c0022891:	39 cd                	cmp    ebp,ecx
c0022893:	7d 52                	jge    c00228e7 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022895:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022899:	50                   	push   eax
c002289a:	50                   	push   eax
c002289b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002289f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228a6:	e8 7e 46 00 00       	call   c0026f29 <__mulsf3>
c00228ab:	5a                   	pop    edx
c00228ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228b0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228b6:	e8 5c 4a 00 00       	call   c0027317 <__floatsisf>
c00228bb:	59                   	pop    ecx
c00228bc:	5a                   	pop    edx
c00228bd:	50                   	push   eax
c00228be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228c2:	e8 25 48 00 00       	call   c00270ec <__divsf3>
c00228c7:	59                   	pop    ecx
c00228c8:	5a                   	pop    edx
c00228c9:	50                   	push   eax
c00228ca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00228ce:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228d1:	e8 30 43 00 00       	call   c0026c06 <__addsf3>
c00228d6:	83 c4 10             	add    esp,0x10
c00228d9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00228dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00228e1:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00228e4:	45                   	inc    ebp
c00228e5:	eb aa                	jmp    c0022891 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00228e7:	39 cf                	cmp    edi,ecx
c00228e9:	7e 02                	jle    c00228ed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228eb:	89 cf                	mov    edi,ecx
c00228ed:	43                   	inc    ebx
c00228ee:	83 fb 20             	cmp    ebx,0x20
c00228f1:	0f 85 10 ff ff ff    	jne    c0022807 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00228f7:	83 c4 1c             	add    esp,0x1c
c00228fa:	89 f8                	mov    eax,edi
c00228fc:	5b                   	pop    ebx
c00228fd:	5e                   	pop    esi
c00228fe:	5f                   	pop    edi
c00228ff:	5d                   	pop    ebp
c0022900:	c3                   	ret    
c0022901:	90                   	nop

c0022902 <PCI::open(int, int, void*)>:
c0022902:	83 ec 18             	sub    esp,0x18
c0022905:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022909:	8b 10                	mov    edx,DWORD PTR [eax]
c002290b:	50                   	push   eax
c002290c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002290f:	31 c0                	xor    eax,eax
c0022911:	83 c4 1c             	add    esp,0x1c
c0022914:	c3                   	ret    
c0022915:	90                   	nop

c0022916 <PCI::close(int, int, void*)>:
c0022916:	31 c0                	xor    eax,eax
c0022918:	c3                   	ret    
c0022919:	90                   	nop

c002291a <PCI::PCI()>:
c002291a:	83 ec 0c             	sub    esp,0xc
c002291d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022921:	83 ec 08             	sub    esp,0x8
c0022924:	68 98 ca 02 c0       	push   0xc002ca98
c0022929:	50                   	push   eax
c002292a:	e8 df 12 ff ff       	call   c0013c0e <Bus::Bus(char const*)>
c002292f:	83 c4 10             	add    esp,0x10
c0022932:	ba 04 cb 02 c0       	mov    edx,0xc002cb04
c0022937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002293b:	89 10                	mov    DWORD PTR [eax],edx
c002293d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022941:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022947:	0f b6 d0             	movzx  edx,al
c002294a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022959:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002295f:	0f b6 d0             	movzx  edx,al
c0022962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022966:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002296b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022975:	8d 50 01             	lea    edx,[eax+0x1]
c0022978:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002297c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022982:	0f b6 d0             	movzx  edx,al
c0022985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022989:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002298d:	83 c9 c0             	or     ecx,0xffffffc0
c0022990:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022994:	90                   	nop
c0022995:	83 c4 0c             	add    esp,0xc
c0022998:	c3                   	ret    
c0022999:	90                   	nop

c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002299a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002299e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229a3:	89 ca                	mov    edx,ecx
c00229a5:	c1 e0 10             	shl    eax,0x10
c00229a8:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229ae:	09 d0                	or     eax,edx
c00229b0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229b5:	c1 e2 08             	shl    edx,0x8
c00229b8:	09 d0                	or     eax,edx
c00229ba:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229bf:	c1 e2 0b             	shl    edx,0xb
c00229c2:	09 d0                	or     eax,edx
c00229c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229c9:	0d 00 00 00 80       	or     eax,0x80000000
c00229ce:	ef                   	out    dx,eax
c00229cf:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229d4:	ed                   	in     eax,dx
c00229d5:	83 e1 02             	and    ecx,0x2
c00229d8:	0f b6 c9             	movzx  ecx,cl
c00229db:	c1 e1 03             	shl    ecx,0x3
c00229de:	d3 e8                	shr    eax,cl
c00229e0:	c3                   	ret    
c00229e1:	90                   	nop

c00229e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00229e2:	6a 00                	push   0x0
c00229e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229e9:	50                   	push   eax
c00229ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229ef:	50                   	push   eax
c00229f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229f5:	50                   	push   eax
c00229f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229fa:	e8 9b ff ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ff:	83 c4 14             	add    esp,0x14
c0022a02:	c3                   	ret    
c0022a03:	90                   	nop

c0022a04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a04:	6a 0e                	push   0xe
c0022a06:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a0b:	50                   	push   eax
c0022a0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a11:	50                   	push   eax
c0022a12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a17:	50                   	push   eax
c0022a18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a1c:	e8 79 ff ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a21:	83 c4 14             	add    esp,0x14
c0022a24:	0f b6 c0             	movzx  eax,al
c0022a27:	c3                   	ret    

c0022a28 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a28:	55                   	push   ebp
c0022a29:	57                   	push   edi
c0022a2a:	56                   	push   esi
c0022a2b:	53                   	push   ebx
c0022a2c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a31:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a36:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a3b:	6a 0a                	push   0xa
c0022a3d:	56                   	push   esi
c0022a3e:	55                   	push   ebp
c0022a3f:	57                   	push   edi
c0022a40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a44:	e8 51 ff ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a49:	6a 0a                	push   0xa
c0022a4b:	89 c3                	mov    ebx,eax
c0022a4d:	56                   	push   esi
c0022a4e:	0f b6 db             	movzx  ebx,bl
c0022a51:	55                   	push   ebp
c0022a52:	57                   	push   edi
c0022a53:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a57:	e8 3e ff ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a5c:	83 c4 28             	add    esp,0x28
c0022a5f:	25 00 ff 00 00       	and    eax,0xff00
c0022a64:	09 d8                	or     eax,ebx
c0022a66:	5b                   	pop    ebx
c0022a67:	5e                   	pop    esi
c0022a68:	5f                   	pop    edi
c0022a69:	5d                   	pop    ebp
c0022a6a:	c3                   	ret    
c0022a6b:	90                   	nop

c0022a6c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a6c:	6a 08                	push   0x8
c0022a6e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a73:	50                   	push   eax
c0022a74:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a79:	50                   	push   eax
c0022a7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a7f:	50                   	push   eax
c0022a80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a84:	e8 11 ff ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a89:	83 c4 14             	add    esp,0x14
c0022a8c:	0f b6 c4             	movzx  eax,ah
c0022a8f:	c3                   	ret    

c0022a90 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022a90:	6a 08                	push   0x8
c0022a92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a97:	50                   	push   eax
c0022a98:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9d:	50                   	push   eax
c0022a9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa3:	50                   	push   eax
c0022aa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa8:	e8 ed fe ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aad:	83 c4 14             	add    esp,0x14
c0022ab0:	c3                   	ret    
c0022ab1:	90                   	nop

c0022ab2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ab2:	6a 3c                	push   0x3c
c0022ab4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab9:	50                   	push   eax
c0022aba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abf:	50                   	push   eax
c0022ac0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac5:	50                   	push   eax
c0022ac6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aca:	e8 cb fe ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acf:	83 c4 14             	add    esp,0x14
c0022ad2:	c3                   	ret    
c0022ad3:	90                   	nop

c0022ad4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022ad4:	6a 18                	push   0x18
c0022ad6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022adb:	50                   	push   eax
c0022adc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae1:	50                   	push   eax
c0022ae2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ae7:	50                   	push   eax
c0022ae8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aec:	e8 a9 fe ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af1:	83 c4 14             	add    esp,0x14
c0022af4:	0f b6 c4             	movzx  eax,ah
c0022af7:	c3                   	ret    

c0022af8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022af8:	55                   	push   ebp
c0022af9:	57                   	push   edi
c0022afa:	56                   	push   esi
c0022afb:	53                   	push   ebx
c0022afc:	50                   	push   eax
c0022afd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b01:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b06:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b0b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b10:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b17:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b1a:	83 c3 10             	add    ebx,0x10
c0022b1d:	0f b6 c0             	movzx  eax,al
c0022b20:	0f b6 db             	movzx  ebx,bl
c0022b23:	50                   	push   eax
c0022b24:	51                   	push   ecx
c0022b25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b29:	57                   	push   edi
c0022b2a:	55                   	push   ebp
c0022b2b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b2f:	e8 66 fe ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b34:	53                   	push   ebx
c0022b35:	89 c6                	mov    esi,eax
c0022b37:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b3b:	c1 e6 10             	shl    esi,0x10
c0022b3e:	51                   	push   ecx
c0022b3f:	57                   	push   edi
c0022b40:	55                   	push   ebp
c0022b41:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b45:	e8 50 fe ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b4a:	83 c4 2c             	add    esp,0x2c
c0022b4d:	0f b7 c0             	movzx  eax,ax
c0022b50:	5b                   	pop    ebx
c0022b51:	09 f0                	or     eax,esi
c0022b53:	5e                   	pop    esi
c0022b54:	5f                   	pop    edi
c0022b55:	5d                   	pop    ebp
c0022b56:	c3                   	ret    
c0022b57:	90                   	nop

c0022b58 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b58:	53                   	push   ebx
c0022b59:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b5e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b67:	c1 e1 10             	shl    ecx,0x10
c0022b6a:	25 fc 00 00 00       	and    eax,0xfc
c0022b6f:	09 c1                	or     ecx,eax
c0022b71:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b76:	c1 e0 08             	shl    eax,0x8
c0022b79:	09 c1                	or     ecx,eax
c0022b7b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022b80:	c1 e0 0b             	shl    eax,0xb
c0022b83:	09 c1                	or     ecx,eax
c0022b85:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022b8b:	89 c8                	mov    eax,ecx
c0022b8d:	ef                   	out    dx,eax
c0022b8e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022b93:	ed                   	in     eax,dx
c0022b94:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022b99:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022b9e:	74 0a                	je     c0022baa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022ba0:	0f b7 d8             	movzx  ebx,ax
c0022ba3:	89 d0                	mov    eax,edx
c0022ba5:	c1 e0 10             	shl    eax,0x10
c0022ba8:	eb 05                	jmp    c0022baf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022baa:	66 31 c0             	xor    ax,ax
c0022bad:	89 d3                	mov    ebx,edx
c0022baf:	09 c3                	or     ebx,eax
c0022bb1:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bb6:	89 c8                	mov    eax,ecx
c0022bb8:	ef                   	out    dx,eax
c0022bb9:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bbe:	89 d8                	mov    eax,ebx
c0022bc0:	ef                   	out    dx,eax
c0022bc1:	5b                   	pop    ebx
c0022bc2:	c3                   	ret    
c0022bc3:	90                   	nop

c0022bc4 <PCI::checkBus(unsigned char)>:
c0022bc4:	56                   	push   esi
c0022bc5:	53                   	push   ebx
c0022bc6:	31 db                	xor    ebx,ebx
c0022bc8:	51                   	push   ecx
c0022bc9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022bce:	52                   	push   edx
c0022bcf:	53                   	push   ebx
c0022bd0:	43                   	inc    ebx
c0022bd1:	56                   	push   esi
c0022bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bd6:	e8 2b 03 00 00       	call   c0022f06 <PCI::checkDevice(unsigned char, unsigned char)>
c0022bdb:	83 c4 10             	add    esp,0x10
c0022bde:	83 fb 20             	cmp    ebx,0x20
c0022be1:	75 eb                	jne    c0022bce <PCI::checkBus(unsigned char)+0xa>
c0022be3:	58                   	pop    eax
c0022be4:	5b                   	pop    ebx
c0022be5:	5e                   	pop    esi
c0022be6:	c3                   	ret    
c0022be7:	90                   	nop

c0022be8 <PCI::foundDevice(PCIDeviceInfo)>:
c0022be8:	55                   	push   ebp
c0022be9:	57                   	push   edi
c0022bea:	56                   	push   esi
c0022beb:	53                   	push   ebx
c0022bec:	83 ec 1c             	sub    esp,0x1c
c0022bef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bf3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bf9:	0f 84 52 01 00 00    	je     c0022d51 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bff:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c03:	66 81 f9 06 04       	cmp    cx,0x406
c0022c08:	75 2c                	jne    c0022c36 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c0a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c0f:	50                   	push   eax
c0022c10:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c15:	50                   	push   eax
c0022c16:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c1b:	50                   	push   eax
c0022c1c:	56                   	push   esi
c0022c1d:	e8 b2 fe ff ff       	call   c0022ad4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c22:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c26:	0f b6 c0             	movzx  eax,al
c0022c29:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c2d:	83 c4 2c             	add    esp,0x2c
c0022c30:	5b                   	pop    ebx
c0022c31:	5e                   	pop    esi
c0022c32:	5f                   	pop    edi
c0022c33:	5d                   	pop    ebp
c0022c34:	eb 8e                	jmp    c0022bc4 <PCI::checkBus(unsigned char)>
c0022c36:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c3a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c44:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c48:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c4c:	88 d3                	mov    bl,dl
c0022c4e:	85 c0                	test   eax,eax
c0022c50:	74 33                	je     c0022c85 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c52:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c55:	85 d2                	test   edx,edx
c0022c57:	74 28                	je     c0022c81 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c59:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c5f:	31 ef                	xor    edi,ebp
c0022c61:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c67:	75 18                	jne    c0022c81 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c6d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c73:	75 0c                	jne    c0022c81 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c75:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c7b:	0f 84 d0 00 00 00    	je     c0022d51 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c83:	eb c9                	jmp    c0022c4e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c85:	66 81 f9 01 06       	cmp    cx,0x601
c0022c8a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c8e:	75 19                	jne    c0022ca9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c90:	83 ec 0c             	sub    esp,0xc
c0022c93:	68 64 01 00 00       	push   0x164
c0022c98:	e8 a6 cb fe ff       	call   c000f843 <malloc>
c0022c9d:	89 c5                	mov    ebp,eax
c0022c9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ca2:	e8 95 0f 00 00       	call   c0023c3c <SATABus::SATABus()>
c0022ca7:	eb 1e                	jmp    c0022cc7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022ca9:	66 81 f9 01 01       	cmp    cx,0x101
c0022cae:	75 60                	jne    c0022d10 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022cb0:	83 ec 0c             	sub    esp,0xc
c0022cb3:	68 70 02 00 00       	push   0x270
c0022cb8:	e8 86 cb fe ff       	call   c000f843 <malloc>
c0022cbd:	89 c5                	mov    ebp,eax
c0022cbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cc2:	e8 03 03 00 00       	call   c0022fca <IDE::IDE()>
c0022cc7:	58                   	pop    eax
c0022cc8:	5a                   	pop    edx
c0022cc9:	55                   	push   ebp
c0022cca:	56                   	push   esi
c0022ccb:	e8 ca 16 ff ff       	call   c001439a <Device::addChild(Device*)>
c0022cd0:	83 ec 1c             	sub    esp,0x1c
c0022cd3:	b9 09 00 00 00       	mov    ecx,0x9
c0022cd8:	fc                   	cld    
c0022cd9:	89 e7                	mov    edi,esp
c0022cdb:	89 de                	mov    esi,ebx
c0022cdd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cdf:	55                   	push   ebp
c0022ce0:	e8 bf 15 ff ff       	call   c00142a4 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ce5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ce8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022cec:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cf4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cfc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d07:	83 c4 4c             	add    esp,0x4c
c0022d0a:	5b                   	pop    ebx
c0022d0b:	5e                   	pop    esi
c0022d0c:	5f                   	pop    edi
c0022d0d:	5d                   	pop    ebp
c0022d0e:	ff e0                	jmp    eax
c0022d10:	83 ec 0c             	sub    esp,0xc
c0022d13:	68 58 01 00 00       	push   0x158
c0022d18:	e8 26 cb fe ff       	call   c000f843 <malloc>
c0022d1d:	89 c5                	mov    ebp,eax
c0022d1f:	58                   	pop    eax
c0022d20:	5a                   	pop    edx
c0022d21:	68 a0 ca 02 c0       	push   0xc002caa0
c0022d26:	55                   	push   ebp
c0022d27:	e8 64 19 ff ff       	call   c0014690 <DriverlessDevice::DriverlessDevice(char const*)>
c0022d2c:	59                   	pop    ecx
c0022d2d:	5f                   	pop    edi
c0022d2e:	55                   	push   ebp
c0022d2f:	56                   	push   esi
c0022d30:	e8 65 16 ff ff       	call   c001439a <Device::addChild(Device*)>
c0022d35:	b9 09 00 00 00       	mov    ecx,0x9
c0022d3a:	fc                   	cld    
c0022d3b:	89 df                	mov    edi,ebx
c0022d3d:	89 de                	mov    esi,ebx
c0022d3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d41:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d45:	83 c4 2c             	add    esp,0x2c
c0022d48:	5b                   	pop    ebx
c0022d49:	5e                   	pop    esi
c0022d4a:	5f                   	pop    edi
c0022d4b:	5d                   	pop    ebp
c0022d4c:	e9 53 15 ff ff       	jmp    c00142a4 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d51:	83 c4 1c             	add    esp,0x1c
c0022d54:	5b                   	pop    ebx
c0022d55:	5e                   	pop    esi
c0022d56:	5f                   	pop    edi
c0022d57:	5d                   	pop    ebp
c0022d58:	c3                   	ret    
c0022d59:	90                   	nop

c0022d5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d5a:	55                   	push   ebp
c0022d5b:	57                   	push   edi
c0022d5c:	56                   	push   esi
c0022d5d:	53                   	push   ebx
c0022d5e:	83 ec 5c             	sub    esp,0x5c
c0022d61:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d69:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d6d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022d72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022d76:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022d7a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022d7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d83:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022d88:	6a 0c                	push   0xc
c0022d8a:	55                   	push   ebp
c0022d8b:	53                   	push   ebx
c0022d8c:	57                   	push   edi
c0022d8d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022d94:	e8 01 fc ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d99:	55                   	push   ebp
c0022d9a:	53                   	push   ebx
c0022d9b:	57                   	push   edi
c0022d9c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022da3:	e8 80 fc ff ff       	call   c0022a28 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022da8:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022dad:	83 c4 24             	add    esp,0x24
c0022db0:	55                   	push   ebp
c0022db1:	53                   	push   ebx
c0022db2:	57                   	push   edi
c0022db3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022db7:	e8 f6 fc ff ff       	call   c0022ab2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dbc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022dc0:	6a 3c                	push   0x3c
c0022dc2:	55                   	push   ebp
c0022dc3:	53                   	push   ebx
c0022dc4:	57                   	push   edi
c0022dc5:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dcc:	e8 c9 fb ff ff       	call   c002299a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dd1:	0f b6 c4             	movzx  eax,ah
c0022dd4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022dd8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ddc:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022de0:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0022de5:	83 c4 24             	add    esp,0x24
c0022de8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022dee:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022df5:	74 6c                	je     c0022e63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022df7:	31 f6                	xor    esi,esi
c0022df9:	8b 15 a8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a8
c0022dff:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e05:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e0b:	7e 56                	jle    c0022e63 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e0d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e10:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e17:	39 cb                	cmp    ebx,ecx
c0022e19:	75 45                	jne    c0022e60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e1b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e22:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e26:	75 38                	jne    c0022e60 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e28:	83 ec 0c             	sub    esp,0xc
c0022e2b:	68 ba ca 02 c0       	push   0xc002caba
c0022e30:	e8 3f 01 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0022e35:	8b 15 a8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a8
c0022e3b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e41:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e49:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e4d:	52                   	push   edx
c0022e4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e52:	53                   	push   ebx
c0022e53:	68 df ca 02 c0       	push   0xc002cadf
c0022e58:	e8 17 01 ff ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0022e5d:	83 c4 20             	add    esp,0x20
c0022e60:	46                   	inc    esi
c0022e61:	eb 96                	jmp    c0022df9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e63:	31 d2                	xor    edx,edx
c0022e65:	83 ec 0c             	sub    esp,0xc
c0022e68:	55                   	push   ebp
c0022e69:	53                   	push   ebx
c0022e6a:	57                   	push   edi
c0022e6b:	52                   	push   edx
c0022e6c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022e70:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022e77:	e8 7c fc ff ff       	call   c0022af8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e7c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022e80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022e84:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e88:	42                   	inc    edx
c0022e89:	83 c4 20             	add    esp,0x20
c0022e8c:	83 fa 06             	cmp    edx,0x6
c0022e8f:	75 d4                	jne    c0022e65 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022e91:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e95:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022e99:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022e9d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ea1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022ea5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022ea9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022eae:	86 e0                	xchg   al,ah
c0022eb0:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022eb5:	55                   	push   ebp
c0022eb6:	53                   	push   ebx
c0022eb7:	57                   	push   edi
c0022eb8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ebc:	e8 ab fb ff ff       	call   c0022a6c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ec1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ec5:	55                   	push   ebp
c0022ec6:	53                   	push   ebx
c0022ec7:	57                   	push   edi
c0022ec8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ecf:	e8 0e fb ff ff       	call   c00229e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ed4:	83 ec 0c             	sub    esp,0xc
c0022ed7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022edc:	b9 09 00 00 00       	mov    ecx,0x9
c0022ee1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ee5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ee9:	fc                   	cld    
c0022eea:	89 e7                	mov    edi,esp
c0022eec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022eee:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022ef5:	e8 ee fc ff ff       	call   c0022be8 <PCI::foundDevice(PCIDeviceInfo)>
c0022efa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f00:	5b                   	pop    ebx
c0022f01:	5e                   	pop    esi
c0022f02:	5f                   	pop    edi
c0022f03:	5d                   	pop    ebp
c0022f04:	c3                   	ret    
c0022f05:	90                   	nop

c0022f06 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f06:	55                   	push   ebp
c0022f07:	57                   	push   edi
c0022f08:	56                   	push   esi
c0022f09:	53                   	push   ebx
c0022f0a:	83 ec 0c             	sub    esp,0xc
c0022f0d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f11:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f16:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f1b:	6a 00                	push   0x0
c0022f1d:	56                   	push   esi
c0022f1e:	57                   	push   edi
c0022f1f:	55                   	push   ebp
c0022f20:	e8 bd fa ff ff       	call   c00229e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f25:	6a 00                	push   0x0
c0022f27:	56                   	push   esi
c0022f28:	57                   	push   edi
c0022f29:	55                   	push   ebp
c0022f2a:	e8 2b fe ff ff       	call   c0022d5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f2f:	83 c4 20             	add    esp,0x20
c0022f32:	6a 00                	push   0x0
c0022f34:	56                   	push   esi
c0022f35:	57                   	push   edi
c0022f36:	55                   	push   ebp
c0022f37:	e8 c8 fa ff ff       	call   c0022a04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f3c:	83 c4 10             	add    esp,0x10
c0022f3f:	84 c0                	test   al,al
c0022f41:	79 27                	jns    c0022f6a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f43:	bb 01 00 00 00       	mov    ebx,0x1
c0022f48:	53                   	push   ebx
c0022f49:	56                   	push   esi
c0022f4a:	57                   	push   edi
c0022f4b:	55                   	push   ebp
c0022f4c:	e8 91 fa ff ff       	call   c00229e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	66 40                	inc    ax
c0022f56:	74 0c                	je     c0022f64 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f58:	53                   	push   ebx
c0022f59:	56                   	push   esi
c0022f5a:	57                   	push   edi
c0022f5b:	55                   	push   ebp
c0022f5c:	e8 f9 fd ff ff       	call   c0022d5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f61:	83 c4 10             	add    esp,0x10
c0022f64:	43                   	inc    ebx
c0022f65:	83 fb 08             	cmp    ebx,0x8
c0022f68:	75 de                	jne    c0022f48 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f6a:	83 c4 0c             	add    esp,0xc
c0022f6d:	5b                   	pop    ebx
c0022f6e:	5e                   	pop    esi
c0022f6f:	5f                   	pop    edi
c0022f70:	5d                   	pop    ebp
c0022f71:	c3                   	ret    

c0022f72 <PCI::detect()>:
c0022f72:	56                   	push   esi
c0022f73:	53                   	push   ebx
c0022f74:	53                   	push   ebx
c0022f75:	31 db                	xor    ebx,ebx
c0022f77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f7b:	6a 00                	push   0x0
c0022f7d:	6a 00                	push   0x0
c0022f7f:	6a 00                	push   0x0
c0022f81:	56                   	push   esi
c0022f82:	e8 7d fa ff ff       	call   c0022a04 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f87:	83 c4 10             	add    esp,0x10
c0022f8a:	a8 80                	test   al,0x80
c0022f8c:	75 21                	jne    c0022faf <PCI::detect()+0x3d>
c0022f8e:	51                   	push   ecx
c0022f8f:	51                   	push   ecx
c0022f90:	6a 00                	push   0x0
c0022f92:	56                   	push   esi
c0022f93:	e8 2c fc ff ff       	call   c0022bc4 <PCI::checkBus(unsigned char)>
c0022f98:	83 c4 10             	add    esp,0x10
c0022f9b:	eb 24                	jmp    c0022fc1 <PCI::detect()+0x4f>
c0022f9d:	52                   	push   edx
c0022f9e:	52                   	push   edx
c0022f9f:	53                   	push   ebx
c0022fa0:	43                   	inc    ebx
c0022fa1:	56                   	push   esi
c0022fa2:	e8 1d fc ff ff       	call   c0022bc4 <PCI::checkBus(unsigned char)>
c0022fa7:	83 c4 10             	add    esp,0x10
c0022faa:	83 fb 08             	cmp    ebx,0x8
c0022fad:	74 12                	je     c0022fc1 <PCI::detect()+0x4f>
c0022faf:	53                   	push   ebx
c0022fb0:	6a 00                	push   0x0
c0022fb2:	6a 00                	push   0x0
c0022fb4:	56                   	push   esi
c0022fb5:	e8 28 fa ff ff       	call   c00229e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fba:	83 c4 10             	add    esp,0x10
c0022fbd:	66 40                	inc    ax
c0022fbf:	74 dc                	je     c0022f9d <PCI::detect()+0x2b>
c0022fc1:	58                   	pop    eax
c0022fc2:	5b                   	pop    ebx
c0022fc3:	5e                   	pop    esi
c0022fc4:	c3                   	ret    
c0022fc5:	90                   	nop

c0022fc6 <IDE::close(int, int, void*)>:
c0022fc6:	83 c8 ff             	or     eax,0xffffffff
c0022fc9:	c3                   	ret    

c0022fca <IDE::IDE()>:
c0022fca:	83 ec 0c             	sub    esp,0xc
c0022fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd1:	83 ec 08             	sub    esp,0x8
c0022fd4:	68 28 cb 02 c0       	push   0xc002cb28
c0022fd9:	50                   	push   eax
c0022fda:	e8 47 17 ff ff       	call   c0014726 <HardDiskController::HardDiskController(char const*)>
c0022fdf:	83 c4 10             	add    esp,0x10
c0022fe2:	ba 68 cd 02 c0       	mov    edx,0xc002cd68
c0022fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022feb:	89 10                	mov    DWORD PTR [eax],edx
c0022fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022ff8:	90                   	nop
c0022ff9:	83 c4 0c             	add    esp,0xc
c0022ffc:	c3                   	ret    
c0022ffd:	90                   	nop

c0022ffe <IDE::prepareInterrupt(unsigned char)>:
c0022ffe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023003:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023007:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002300f:	c3                   	ret    

c0023010 <selectDrive(unsigned char, unsigned char)>:
c0023010:	c3                   	ret    
c0023011:	90                   	nop

c0023012 <IDE::getBase(unsigned char)>:
c0023012:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002301b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023023:	c3                   	ret    

c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023024:	55                   	push   ebp
c0023025:	57                   	push   edi
c0023026:	56                   	push   esi
c0023027:	53                   	push   ebx
c0023028:	83 ec 1c             	sub    esp,0x1c
c002302b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002302f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023033:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023036:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002303a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002303e:	80 f9 03             	cmp    cl,0x3
c0023041:	77 51                	ja     c0023094 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023043:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023047:	0f b6 f2             	movzx  esi,dl
c002304a:	0f b6 db             	movzx  ebx,bl
c002304d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023050:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023054:	83 ca 80             	or     edx,0xffffff80
c0023057:	0f b6 d2             	movzx  edx,dl
c002305a:	52                   	push   edx
c002305b:	6a 0c                	push   0xc
c002305d:	56                   	push   esi
c002305e:	57                   	push   edi
c002305f:	e8 c0 ff ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023064:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002306d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023071:	ee                   	out    dx,al
c0023072:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023077:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002307b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002307f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023083:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002308b:	83 c4 2c             	add    esp,0x2c
c002308e:	5b                   	pop    ebx
c002308f:	5e                   	pop    esi
c0023090:	5f                   	pop    edi
c0023091:	5d                   	pop    ebp
c0023092:	eb 90                	jmp    c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023094:	80 fb 07             	cmp    bl,0x7
c0023097:	77 12                	ja     c00230ab <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023099:	0f b6 d2             	movzx  edx,dl
c002309c:	0f b6 db             	movzx  ebx,bl
c002309f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230a7:	89 da                	mov    edx,ebx
c00230a9:	eb 2f                	jmp    c00230da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230ab:	80 fb 0d             	cmp    bl,0xd
c00230ae:	77 13                	ja     c00230c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230b0:	0f b6 d2             	movzx  edx,dl
c00230b3:	0f b6 db             	movzx  ebx,bl
c00230b6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230bd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230c1:	eb 17                	jmp    c00230da <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230c3:	80 fb 15             	cmp    bl,0x15
c00230c6:	77 13                	ja     c00230db <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230c8:	0f b6 d2             	movzx  edx,dl
c00230cb:	0f b6 db             	movzx  ebx,bl
c00230ce:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230d6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230da:	ee                   	out    dx,al
c00230db:	83 c4 1c             	add    esp,0x1c
c00230de:	5b                   	pop    ebx
c00230df:	5e                   	pop    esi
c00230e0:	5f                   	pop    edi
c00230e1:	5d                   	pop    ebp
c00230e2:	c3                   	ret    
c00230e3:	90                   	nop

c00230e4 <IDE::read(unsigned char, unsigned char)>:
c00230e4:	55                   	push   ebp
c00230e5:	57                   	push   edi
c00230e6:	56                   	push   esi
c00230e7:	53                   	push   ebx
c00230e8:	83 ec 1c             	sub    esp,0x1c
c00230eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230f3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230fa:	3c 03                	cmp    al,0x3
c00230fc:	77 43                	ja     c0023141 <IDE::read(unsigned char, unsigned char)+0x5d>
c00230fe:	0f b6 f2             	movzx  esi,dl
c0023101:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023104:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023108:	83 c8 80             	or     eax,0xffffff80
c002310b:	0f b6 c0             	movzx  eax,al
c002310e:	50                   	push   eax
c002310f:	6a 0c                	push   0xc
c0023111:	56                   	push   esi
c0023112:	57                   	push   edi
c0023113:	e8 0c ff ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023118:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002311d:	0f b6 c3             	movzx  eax,bl
c0023120:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023124:	ec                   	in     al,dx
c0023125:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023129:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002312e:	52                   	push   edx
c002312f:	6a 0c                	push   0xc
c0023131:	56                   	push   esi
c0023132:	57                   	push   edi
c0023133:	e8 ec fe ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023138:	83 c4 20             	add    esp,0x20
c002313b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002313f:	eb 49                	jmp    c002318a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023141:	80 fb 07             	cmp    bl,0x7
c0023144:	77 12                	ja     c0023158 <IDE::read(unsigned char, unsigned char)+0x74>
c0023146:	0f b6 d2             	movzx  edx,dl
c0023149:	0f b6 c3             	movzx  eax,bl
c002314c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023154:	89 c2                	mov    edx,eax
c0023156:	eb 31                	jmp    c0023189 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023158:	80 fb 0d             	cmp    bl,0xd
c002315b:	77 13                	ja     c0023170 <IDE::read(unsigned char, unsigned char)+0x8c>
c002315d:	0f b6 d2             	movzx  edx,dl
c0023160:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023167:	0f b6 d3             	movzx  edx,bl
c002316a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002316e:	eb 19                	jmp    c0023189 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023170:	31 c0                	xor    eax,eax
c0023172:	80 fb 15             	cmp    bl,0x15
c0023175:	77 13                	ja     c002318a <IDE::read(unsigned char, unsigned char)+0xa6>
c0023177:	0f b6 d2             	movzx  edx,dl
c002317a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023182:	0f b6 d3             	movzx  edx,bl
c0023185:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023189:	ec                   	in     al,dx
c002318a:	83 c4 1c             	add    esp,0x1c
c002318d:	5b                   	pop    ebx
c002318e:	5e                   	pop    esi
c002318f:	5f                   	pop    edi
c0023190:	5d                   	pop    ebp
c0023191:	c3                   	ret    

c0023192 <IDE::waitInterrupt(unsigned char)>:
c0023192:	55                   	push   ebp
c0023193:	57                   	push   edi
c0023194:	56                   	push   esi
c0023195:	53                   	push   ebx
c0023196:	31 db                	xor    ebx,ebx
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002319f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231a4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231ac:	89 e8                	mov    eax,ebp
c00231ae:	84 c0                	test   al,al
c00231b0:	75 34                	jne    c00231e6 <IDE::waitInterrupt(unsigned char)+0x54>
c00231b2:	52                   	push   edx
c00231b3:	6a 0c                	push   0xc
c00231b5:	56                   	push   esi
c00231b6:	57                   	push   edi
c00231b7:	e8 28 ff ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00231bc:	83 c4 10             	add    esp,0x10
c00231bf:	a8 01                	test   al,0x1
c00231c1:	75 2b                	jne    c00231ee <IDE::waitInterrupt(unsigned char)+0x5c>
c00231c3:	f6 c3 04             	test   bl,0x4
c00231c6:	75 16                	jne    c00231de <IDE::waitInterrupt(unsigned char)+0x4c>
c00231c8:	83 fb 32             	cmp    ebx,0x32
c00231cb:	7e 11                	jle    c00231de <IDE::waitInterrupt(unsigned char)+0x4c>
c00231cd:	50                   	push   eax
c00231ce:	50                   	push   eax
c00231cf:	6a 00                	push   0x0
c00231d1:	68 80 96 98 00       	push   0x989680
c00231d6:	e8 8b b1 ff ff       	call   c001e366 <nanoSleep(unsigned long long)>
c00231db:	83 c4 10             	add    esp,0x10
c00231de:	83 fb 3c             	cmp    ebx,0x3c
c00231e1:	74 0b                	je     c00231ee <IDE::waitInterrupt(unsigned char)+0x5c>
c00231e3:	43                   	inc    ebx
c00231e4:	eb be                	jmp    c00231a4 <IDE::waitInterrupt(unsigned char)+0x12>
c00231e6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231ee:	83 c4 0c             	add    esp,0xc
c00231f1:	89 e8                	mov    eax,ebp
c00231f3:	5b                   	pop    ebx
c00231f4:	5e                   	pop    esi
c00231f5:	5f                   	pop    edi
c00231f6:	5d                   	pop    ebp
c00231f7:	c3                   	ret    

c00231f8 <ideChannel0IRQHandler(regs*, void*)>:
c00231f8:	83 ec 10             	sub    esp,0x10
c00231fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231ff:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023206:	6a 07                	push   0x7
c0023208:	6a 00                	push   0x0
c002320a:	50                   	push   eax
c002320b:	e8 d4 fe ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023210:	83 c4 1c             	add    esp,0x1c
c0023213:	c3                   	ret    

c0023214 <ideChannel1IRQHandler(regs*, void*)>:
c0023214:	83 ec 10             	sub    esp,0x10
c0023217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002321b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023222:	6a 07                	push   0x7
c0023224:	6a 01                	push   0x1
c0023226:	50                   	push   eax
c0023227:	e8 b8 fe ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c002322c:	83 c4 1c             	add    esp,0x1c
c002322f:	c3                   	ret    

c0023230 <IDE::enableIRQs(unsigned char, bool)>:
c0023230:	57                   	push   edi
c0023231:	56                   	push   esi
c0023232:	be 04 00 00 00       	mov    esi,0x4
c0023237:	53                   	push   ebx
c0023238:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002323d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023241:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023246:	0f 94 c0             	sete   al
c0023249:	d1 e0                	shl    eax,1
c002324b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023252:	0f b6 c0             	movzx  eax,al
c0023255:	50                   	push   eax
c0023256:	6a 0c                	push   0xc
c0023258:	57                   	push   edi
c0023259:	53                   	push   ebx
c002325a:	e8 c5 fd ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002325f:	83 c4 10             	add    esp,0x10
c0023262:	50                   	push   eax
c0023263:	6a 0c                	push   0xc
c0023265:	57                   	push   edi
c0023266:	53                   	push   ebx
c0023267:	e8 78 fe ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c002326c:	83 c4 10             	add    esp,0x10
c002326f:	4e                   	dec    esi
c0023270:	75 f0                	jne    c0023262 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023272:	5b                   	pop    ebx
c0023273:	5e                   	pop    esi
c0023274:	5f                   	pop    edi
c0023275:	c3                   	ret    

c0023276 <IDE::open(int, int, void*)>:
c0023276:	55                   	push   ebp
c0023277:	57                   	push   edi
c0023278:	56                   	push   esi
c0023279:	53                   	push   ebx
c002327a:	83 ec 1c             	sub    esp,0x1c
c002327d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023281:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002328a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023293:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002329a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232a1:	0f 85 b0 02 00 00    	jne    c0023557 <IDE::open(int, int, void*)+0x2e1>
c00232a7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232ad:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232b1:	83 e0 7f             	and    eax,0x7f
c00232b4:	3c 05                	cmp    al,0x5
c00232b6:	74 04                	je     c00232bc <IDE::open(int, int, void*)+0x46>
c00232b8:	3c 0f                	cmp    al,0xf
c00232ba:	75 32                	jne    c00232ee <IDE::open(int, int, void*)+0x78>
c00232bc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232c2:	83 e0 fc             	and    eax,0xfffffffc
c00232c5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232cc:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00232d2:	83 e0 fc             	and    eax,0xfffffffc
c00232d5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232dc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232e2:	83 e0 fc             	and    eax,0xfffffffc
c00232e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232ec:	eb 14                	jmp    c0023302 <IDE::open(int, int, void*)+0x8c>
c00232ee:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232f8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023302:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023309:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023310:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023314:	89 c6                	mov    esi,eax
c0023316:	bf f8 0c 00 00       	mov    edi,0xcf8
c002331b:	c1 e6 10             	shl    esi,0x10
c002331e:	89 e8                	mov    eax,ebp
c0023320:	89 fa                	mov    edx,edi
c0023322:	c1 e0 0b             	shl    eax,0xb
c0023325:	09 f0                	or     eax,esi
c0023327:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002332e:	c1 e6 08             	shl    esi,0x8
c0023331:	09 c6                	or     esi,eax
c0023333:	89 f0                	mov    eax,esi
c0023335:	0d 08 00 00 80       	or     eax,0x80000008
c002333a:	ef                   	out    dx,eax
c002333b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023340:	89 ca                	mov    edx,ecx
c0023342:	ed                   	in     eax,dx
c0023343:	c1 e8 10             	shr    eax,0x10
c0023346:	3d ff ff 00 00       	cmp    eax,0xffff
c002334b:	0f 84 f5 00 00 00    	je     c0023446 <IDE::open(int, int, void*)+0x1d0>
c0023351:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023357:	89 fa                	mov    edx,edi
c0023359:	89 f0                	mov    eax,esi
c002335b:	ef                   	out    dx,eax
c002335c:	b0 fe                	mov    al,0xfe
c002335e:	89 ca                	mov    edx,ecx
c0023360:	ee                   	out    dx,al
c0023361:	89 f0                	mov    eax,esi
c0023363:	89 fa                	mov    edx,edi
c0023365:	ef                   	out    dx,eax
c0023366:	89 ca                	mov    edx,ecx
c0023368:	ed                   	in     eax,dx
c0023369:	3c fe                	cmp    al,0xfe
c002336b:	0f 85 a9 00 00 00    	jne    c002341a <IDE::open(int, int, void*)+0x1a4>
c0023371:	8b 15 a8 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e4a8
c0023377:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002337e:	74 33                	je     c00233b3 <IDE::open(int, int, void*)+0x13d>
c0023380:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023386:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002338a:	40                   	inc    eax
c002338b:	83 ec 0c             	sub    esp,0xc
c002338e:	0f b6 c0             	movzx  eax,al
c0023391:	50                   	push   eax
c0023392:	55                   	push   ebp
c0023393:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023397:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002339d:	51                   	push   ecx
c002339e:	e8 d7 4e ff ff       	call   c001827a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233a3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233a8:	83 c4 1c             	add    esp,0x1c
c00233ab:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233b1:	eb 0a                	jmp    c00233bd <IDE::open(int, int, void*)+0x147>
c00233b3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233bd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233c4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233cb:	c1 e1 10             	shl    ecx,0x10
c00233ce:	c1 e0 08             	shl    eax,0x8
c00233d1:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233d6:	09 c1                	or     ecx,eax
c00233d8:	89 fa                	mov    edx,edi
c00233da:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233e1:	c1 e0 0b             	shl    eax,0xb
c00233e4:	09 c1                	or     ecx,eax
c00233e6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233ec:	89 c8                	mov    eax,ecx
c00233ee:	ef                   	out    dx,eax
c00233ef:	be fc 0c 00 00       	mov    esi,0xcfc
c00233f4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233fa:	89 f2                	mov    edx,esi
c00233fc:	ee                   	out    dx,al
c00233fd:	89 c8                	mov    eax,ecx
c00233ff:	89 fa                	mov    edx,edi
c0023401:	ef                   	out    dx,eax
c0023402:	89 f2                	mov    edx,esi
c0023404:	ed                   	in     eax,dx
c0023405:	0f b6 c0             	movzx  eax,al
c0023408:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002340e:	74 46                	je     c0023456 <IDE::open(int, int, void*)+0x1e0>
c0023410:	83 ec 0c             	sub    esp,0xc
c0023413:	68 40 cb 02 c0       	push   0xc002cb40
c0023418:	eb 34                	jmp    c002344e <IDE::open(int, int, void*)+0x1d8>
c002341a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023423:	75 17                	jne    c002343c <IDE::open(int, int, void*)+0x1c6>
c0023425:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002342a:	74 07                	je     c0023433 <IDE::open(int, int, void*)+0x1bd>
c002342c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023431:	75 09                	jne    c002343c <IDE::open(int, int, void*)+0x1c6>
c0023433:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002343a:	eb 1a                	jmp    c0023456 <IDE::open(int, int, void*)+0x1e0>
c002343c:	83 ec 0c             	sub    esp,0xc
c002343f:	68 48 cb 02 c0       	push   0xc002cb48
c0023444:	eb 08                	jmp    c002344e <IDE::open(int, int, void*)+0x1d8>
c0023446:	83 ec 0c             	sub    esp,0xc
c0023449:	68 79 cb 02 c0       	push   0xc002cb79
c002344e:	e8 ce 71 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0023453:	83 c4 10             	add    esp,0x10
c0023456:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002345d:	79 1a                	jns    c0023479 <IDE::open(int, int, void*)+0x203>
c002345f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023465:	83 e0 fc             	and    eax,0xfffffffc
c0023468:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002346f:	83 c0 08             	add    eax,0x8
c0023472:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023479:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002347f:	89 c2                	mov    edx,eax
c0023481:	83 e2 0f             	and    edx,0xf
c0023484:	66 83 fa 08          	cmp    dx,0x8
c0023488:	75 0a                	jne    c0023494 <IDE::open(int, int, void*)+0x21e>
c002348a:	83 e8 02             	sub    eax,0x2
c002348d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023494:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002349a:	89 c2                	mov    edx,eax
c002349c:	83 e2 0f             	and    edx,0xf
c002349f:	66 83 fa 08          	cmp    dx,0x8
c00234a3:	75 0a                	jne    c00234af <IDE::open(int, int, void*)+0x239>
c00234a5:	83 e8 02             	sub    eax,0x2
c00234a8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234af:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234b6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234bd:	89 d0                	mov    eax,edx
c00234bf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234c2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234ca:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234cd:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234d2:	0f b6 c9             	movzx  ecx,cl
c00234d5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234dc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234df:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234e3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234e7:	8d 50 02             	lea    edx,[eax+0x2]
c00234ea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234ef:	0f b6 d2             	movzx  edx,dl
c00234f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234f8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234fb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234ff:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023503:	8d 48 03             	lea    ecx,[eax+0x3]
c0023506:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002350b:	0f b6 c9             	movzx  ecx,cl
c002350e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023514:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023517:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002351b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002351f:	8d 50 04             	lea    edx,[eax+0x4]
c0023522:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023528:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002352d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023534:	66 85 f6             	test   si,si
c0023537:	74 3e                	je     c0023577 <IDE::open(int, int, void*)+0x301>
c0023539:	0f b6 d2             	movzx  edx,dl
c002353c:	83 c0 05             	add    eax,0x5
c002353f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023542:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023546:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002354a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023550:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023555:	eb 20                	jmp    c0023577 <IDE::open(int, int, void*)+0x301>
c0023557:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023561:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002356b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023572:	e9 02 ff ff ff       	jmp    c0023479 <IDE::open(int, int, void*)+0x203>
c0023577:	52                   	push   edx
c0023578:	52                   	push   edx
c0023579:	6a 00                	push   0x0
c002357b:	53                   	push   ebx
c002357c:	e8 7d fa ff ff       	call   c0022ffe <IDE::prepareInterrupt(unsigned char)>
c0023581:	59                   	pop    ecx
c0023582:	5e                   	pop    esi
c0023583:	6a 01                	push   0x1
c0023585:	53                   	push   ebx
c0023586:	e8 73 fa ff ff       	call   c0022ffe <IDE::prepareInterrupt(unsigned char)>
c002358b:	83 c4 0c             	add    esp,0xc
c002358e:	6a 00                	push   0x0
c0023590:	6a 00                	push   0x0
c0023592:	53                   	push   ebx
c0023593:	e8 98 fc ff ff       	call   c0023230 <IDE::enableIRQs(unsigned char, bool)>
c0023598:	83 c4 0c             	add    esp,0xc
c002359b:	6a 00                	push   0x0
c002359d:	6a 01                	push   0x1
c002359f:	53                   	push   ebx
c00235a0:	e8 8b fc ff ff       	call   c0023230 <IDE::enableIRQs(unsigned char, bool)>
c00235a5:	83 c4 10             	add    esp,0x10
c00235a8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235af:	74 40                	je     c00235f1 <IDE::open(int, int, void*)+0x37b>
c00235b1:	83 ec 0c             	sub    esp,0xc
c00235b4:	68 a3 cb 02 c0       	push   0xc002cba3
c00235b9:	e8 b6 f9 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00235be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235c1:	6a 01                	push   0x1
c00235c3:	68 f8 31 02 c0       	push   0xc00231f8
c00235c8:	6a 0e                	push   0xe
c00235ca:	53                   	push   ebx
c00235cb:	e8 4e 0d ff ff       	call   c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235d0:	83 c4 14             	add    esp,0x14
c00235d3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235d9:	53                   	push   ebx
c00235da:	6a 01                	push   0x1
c00235dc:	68 14 32 02 c0       	push   0xc0023214
c00235e1:	6a 0f                	push   0xf
c00235e3:	53                   	push   ebx
c00235e4:	e8 35 0d ff ff       	call   c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235e9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235ef:	eb 4a                	jmp    c002363b <IDE::open(int, int, void*)+0x3c5>
c00235f1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235fb:	50                   	push   eax
c00235fc:	6a 0f                	push   0xf
c00235fe:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023604:	68 bf cb 02 c0       	push   0xc002cbbf
c0023609:	e8 66 f9 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c002360e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023611:	6a 00                	push   0x0
c0023613:	68 f8 31 02 c0       	push   0xc00231f8
c0023618:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002361e:	53                   	push   ebx
c002361f:	e8 fa 0c ff ff       	call   c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023624:	83 c4 14             	add    esp,0x14
c0023627:	53                   	push   ebx
c0023628:	6a 00                	push   0x0
c002362a:	68 14 32 02 c0       	push   0xc0023214
c002362f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023635:	53                   	push   ebx
c0023636:	e8 e3 0c ff ff       	call   c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002363b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002363d:	83 c4 20             	add    esp,0x20
c0023640:	83 ec 0c             	sub    esp,0xc
c0023643:	53                   	push   ebx
c0023644:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023647:	83 c4 0c             	add    esp,0xc
c002364a:	6a 07                	push   0x7
c002364c:	6a 00                	push   0x0
c002364e:	53                   	push   ebx
c002364f:	e8 90 fa ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023654:	83 c4 0c             	add    esp,0xc
c0023657:	6a 07                	push   0x7
c0023659:	6a 01                	push   0x1
c002365b:	53                   	push   ebx
c002365c:	e8 83 fa ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023661:	83 c4 0c             	add    esp,0xc
c0023664:	6a 01                	push   0x1
c0023666:	6a 00                	push   0x0
c0023668:	53                   	push   ebx
c0023669:	e8 c2 fb ff ff       	call   c0023230 <IDE::enableIRQs(unsigned char, bool)>
c002366e:	83 c4 0c             	add    esp,0xc
c0023671:	6a 01                	push   0x1
c0023673:	6a 01                	push   0x1
c0023675:	53                   	push   ebx
c0023676:	e8 b5 fb ff ff       	call   c0023230 <IDE::enableIRQs(unsigned char, bool)>
c002367b:	83 c4 2c             	add    esp,0x2c
c002367e:	31 c0                	xor    eax,eax
c0023680:	5b                   	pop    ebx
c0023681:	5e                   	pop    esi
c0023682:	5f                   	pop    edi
c0023683:	5d                   	pop    ebp
c0023684:	c3                   	ret    
c0023685:	90                   	nop

c0023686 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023686:	55                   	push   ebp
c0023687:	57                   	push   edi
c0023688:	56                   	push   esi
c0023689:	53                   	push   ebx
c002368a:	83 ec 1c             	sub    esp,0x1c
c002368d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023691:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023695:	8d 50 f8             	lea    edx,[eax-0x8]
c0023698:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002369c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236a0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236a4:	80 fa 03             	cmp    dl,0x3
c00236a7:	77 5d                	ja     c0023706 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236b1:	0f b6 db             	movzx  ebx,bl
c00236b4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236b7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236bb:	83 ca 80             	or     edx,0xffffff80
c00236be:	0f b6 d2             	movzx  edx,dl
c00236c1:	52                   	push   edx
c00236c2:	6a 0c                	push   0xc
c00236c4:	53                   	push   ebx
c00236c5:	56                   	push   esi
c00236c6:	e8 59 f9 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236cb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00236d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00236d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236d8:	0f b6 c0             	movzx  eax,al
c00236db:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236e1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236e6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236ea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236f2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236fa:	83 c4 2c             	add    esp,0x2c
c00236fd:	5b                   	pop    ebx
c00236fe:	5e                   	pop    esi
c00236ff:	5f                   	pop    edi
c0023700:	5d                   	pop    ebp
c0023701:	e9 1e f9 ff ff       	jmp    c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023706:	3c 07                	cmp    al,0x7
c0023708:	77 10                	ja     c002371a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002370a:	0f b6 db             	movzx  ebx,bl
c002370d:	0f b6 d0             	movzx  edx,al
c0023710:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023718:	eb 2d                	jmp    c0023747 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002371a:	3c 0d                	cmp    al,0xd
c002371c:	77 13                	ja     c0023731 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002371e:	0f b6 db             	movzx  ebx,bl
c0023721:	0f b6 c0             	movzx  eax,al
c0023724:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002372b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002372f:	eb 16                	jmp    c0023747 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023731:	3c 15                	cmp    al,0x15
c0023733:	77 14                	ja     c0023749 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023735:	0f b6 db             	movzx  ebx,bl
c0023738:	0f b6 c0             	movzx  eax,al
c002373b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023743:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023747:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023749:	83 c4 1c             	add    esp,0x1c
c002374c:	5b                   	pop    ebx
c002374d:	5e                   	pop    esi
c002374e:	5f                   	pop    edi
c002374f:	5d                   	pop    ebp
c0023750:	c3                   	ret    
c0023751:	90                   	nop

c0023752 <IDE::detect()>:
c0023752:	55                   	push   ebp
c0023753:	57                   	push   edi
c0023754:	56                   	push   esi
c0023755:	53                   	push   ebx
c0023756:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002375c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023763:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002376a:	0f 85 be 02 00 00    	jne    c0023a2e <IDE::detect()+0x2dc>
c0023770:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023777:	31 f6                	xor    esi,esi
c0023779:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023781:	31 ed                	xor    ebp,ebp
c0023783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023787:	c1 e0 06             	shl    eax,0x6
c002378a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023792:	89 e8                	mov    eax,ebp
c0023794:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023798:	c1 e0 04             	shl    eax,0x4
c002379b:	83 c8 a0             	or     eax,0xffffffa0
c002379e:	0f b6 c0             	movzx  eax,al
c00237a1:	50                   	push   eax
c00237a2:	6a 06                	push   0x6
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	e8 79 f8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237ab:	83 c4 0c             	add    esp,0xc
c00237ae:	6a 0c                	push   0xc
c00237b0:	56                   	push   esi
c00237b1:	53                   	push   ebx
c00237b2:	e8 2d f9 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00237b7:	83 c4 0c             	add    esp,0xc
c00237ba:	6a 0c                	push   0xc
c00237bc:	56                   	push   esi
c00237bd:	53                   	push   ebx
c00237be:	e8 21 f9 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00237c3:	83 c4 0c             	add    esp,0xc
c00237c6:	6a 0c                	push   0xc
c00237c8:	56                   	push   esi
c00237c9:	53                   	push   ebx
c00237ca:	e8 15 f9 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00237cf:	83 c4 0c             	add    esp,0xc
c00237d2:	6a 0c                	push   0xc
c00237d4:	56                   	push   esi
c00237d5:	53                   	push   ebx
c00237d6:	e8 09 f9 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00237db:	68 ec 00 00 00       	push   0xec
c00237e0:	6a 07                	push   0x7
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	e8 3b f8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237e9:	83 c4 1c             	add    esp,0x1c
c00237ec:	6a 0c                	push   0xc
c00237ee:	56                   	push   esi
c00237ef:	53                   	push   ebx
c00237f0:	e8 ef f8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00237f5:	83 c4 0c             	add    esp,0xc
c00237f8:	6a 0c                	push   0xc
c00237fa:	56                   	push   esi
c00237fb:	53                   	push   ebx
c00237fc:	e8 e3 f8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023801:	83 c4 0c             	add    esp,0xc
c0023804:	6a 0c                	push   0xc
c0023806:	56                   	push   esi
c0023807:	53                   	push   ebx
c0023808:	e8 d7 f8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c002380d:	83 c4 0c             	add    esp,0xc
c0023810:	6a 0c                	push   0xc
c0023812:	56                   	push   esi
c0023813:	53                   	push   ebx
c0023814:	e8 cb f8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023819:	83 c4 0c             	add    esp,0xc
c002381c:	6a 0c                	push   0xc
c002381e:	56                   	push   esi
c002381f:	53                   	push   ebx
c0023820:	e8 bf f8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023825:	83 c4 10             	add    esp,0x10
c0023828:	84 c0                	test   al,al
c002382a:	0f 84 8b 01 00 00    	je     c00239bb <IDE::detect()+0x269>
c0023830:	31 ff                	xor    edi,edi
c0023832:	50                   	push   eax
c0023833:	6a 0c                	push   0xc
c0023835:	56                   	push   esi
c0023836:	53                   	push   ebx
c0023837:	e8 a8 f8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c002383c:	83 c4 10             	add    esp,0x10
c002383f:	a8 01                	test   al,0x1
c0023841:	0f 85 8e 01 00 00    	jne    c00239d5 <IDE::detect()+0x283>
c0023847:	84 c0                	test   al,al
c0023849:	78 04                	js     c002384f <IDE::detect()+0xfd>
c002384b:	a8 08                	test   al,0x8
c002384d:	75 27                	jne    c0023876 <IDE::detect()+0x124>
c002384f:	47                   	inc    edi
c0023850:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023856:	7e da                	jle    c0023832 <IDE::detect()+0xe0>
c0023858:	50                   	push   eax
c0023859:	50                   	push   eax
c002385a:	6a 00                	push   0x0
c002385c:	68 40 4b 4c 00       	push   0x4c4b40
c0023861:	e8 00 ab ff ff       	call   c001e366 <nanoSleep(unsigned long long)>
c0023866:	83 c4 10             	add    esp,0x10
c0023869:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002386f:	75 c1                	jne    c0023832 <IDE::detect()+0xe0>
c0023871:	e9 5f 01 00 00       	jmp    c00239d5 <IDE::detect()+0x283>
c0023876:	31 c9                	xor    ecx,ecx
c0023878:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002387c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023880:	83 ec 0c             	sub    esp,0xc
c0023883:	68 80 00 00 00       	push   0x80
c0023888:	57                   	push   edi
c0023889:	6a 00                	push   0x0
c002388b:	56                   	push   esi
c002388c:	53                   	push   ebx
c002388d:	e8 f4 fd ff ff       	call   c0023686 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023892:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023897:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002389b:	89 d1                	mov    ecx,edx
c002389d:	c1 e0 06             	shl    eax,0x6
c00238a0:	01 d8                	add    eax,ebx
c00238a2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238a9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238b0:	89 f2                	mov    edx,esi
c00238b2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238b8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238bc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238c6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238cd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00238d5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238dc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238e4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238ea:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238f1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238f7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238fb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238ff:	83 c4 20             	add    esp,0x20
c0023902:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023905:	83 c0 02             	add    eax,0x2
c0023908:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002390e:	83 c7 02             	add    edi,0x2
c0023911:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023914:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002391a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002391e:	75 e2                	jne    c0023902 <IDE::detect()+0x1b0>
c0023920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023924:	c1 e0 06             	shl    eax,0x6
c0023927:	01 d8                	add    eax,ebx
c0023929:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002392f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023936:	66 c1 ea 09          	shr    dx,0x9
c002393a:	83 e2 01             	and    edx,0x1
c002393d:	84 c9                	test   cl,cl
c002393f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023945:	75 2f                	jne    c0023976 <IDE::detect()+0x224>
c0023947:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002394d:	85 c0                	test   eax,eax
c002394f:	74 66                	je     c00239b7 <IDE::detect()+0x265>
c0023951:	50                   	push   eax
c0023952:	55                   	push   ebp
c0023953:	56                   	push   esi
c0023954:	68 db cb 02 c0       	push   0xc002cbdb
c0023959:	e8 16 f6 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c002395e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023965:	e8 d9 be fe ff       	call   c000f843 <malloc>
c002396a:	89 c7                	mov    edi,eax
c002396c:	89 04 24             	mov    DWORD PTR [esp],eax
c002396f:	e8 78 06 00 00       	call   c0023fec <ATA::ATA()>
c0023974:	eb 28                	jmp    c002399e <IDE::detect()+0x24c>
c0023976:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002397c:	55                   	push   ebp
c002397d:	56                   	push   esi
c002397e:	68 0a cc 02 c0       	push   0xc002cc0a
c0023983:	e8 ec f5 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023988:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002398f:	e8 af be fe ff       	call   c000f843 <malloc>
c0023994:	89 c7                	mov    edi,eax
c0023996:	89 04 24             	mov    DWORD PTR [esp],eax
c0023999:	e8 8e 0c 00 00       	call   c002462c <ATAPI::ATAPI()>
c002399e:	5a                   	pop    edx
c002399f:	59                   	pop    ecx
c00239a0:	57                   	push   edi
c00239a1:	53                   	push   ebx
c00239a2:	e8 f3 09 ff ff       	call   c001439a <Device::addChild(Device*)>
c00239a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00239a9:	53                   	push   ebx
c00239aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239ae:	6a 00                	push   0x0
c00239b0:	57                   	push   edi
c00239b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239b4:	83 c4 20             	add    esp,0x20
c00239b7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239bb:	4d                   	dec    ebp
c00239bc:	74 0a                	je     c00239c8 <IDE::detect()+0x276>
c00239be:	bd 01 00 00 00       	mov    ebp,0x1
c00239c3:	e9 bb fd ff ff       	jmp    c0023783 <IDE::detect()+0x31>
c00239c8:	4e                   	dec    esi
c00239c9:	74 63                	je     c0023a2e <IDE::detect()+0x2dc>
c00239cb:	be 01 00 00 00       	mov    esi,0x1
c00239d0:	e9 ac fd ff ff       	jmp    c0023781 <IDE::detect()+0x2f>
c00239d5:	50                   	push   eax
c00239d6:	6a 04                	push   0x4
c00239d8:	56                   	push   esi
c00239d9:	53                   	push   ebx
c00239da:	e8 05 f7 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00239df:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239e3:	83 c4 0c             	add    esp,0xc
c00239e6:	6a 05                	push   0x5
c00239e8:	56                   	push   esi
c00239e9:	53                   	push   ebx
c00239ea:	e8 f5 f6 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c00239ef:	83 c4 10             	add    esp,0x10
c00239f2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00239f6:	80 fa 14             	cmp    dl,0x14
c00239f9:	75 04                	jne    c00239ff <IDE::detect()+0x2ad>
c00239fb:	3c eb                	cmp    al,0xeb
c00239fd:	eb 07                	jmp    c0023a06 <IDE::detect()+0x2b4>
c00239ff:	3c 96                	cmp    al,0x96
c0023a01:	75 b8                	jne    c00239bb <IDE::detect()+0x269>
c0023a03:	80 fa 69             	cmp    dl,0x69
c0023a06:	75 b3                	jne    c00239bb <IDE::detect()+0x269>
c0023a08:	68 a1 00 00 00       	push   0xa1
c0023a0d:	6a 07                	push   0x7
c0023a0f:	56                   	push   esi
c0023a10:	53                   	push   ebx
c0023a11:	e8 0e f6 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a16:	5f                   	pop    edi
c0023a17:	58                   	pop    eax
c0023a18:	6a 00                	push   0x0
c0023a1a:	68 40 42 0f 00       	push   0xf4240
c0023a1f:	e8 42 a9 ff ff       	call   c001e366 <nanoSleep(unsigned long long)>
c0023a24:	83 c4 10             	add    esp,0x10
c0023a27:	b1 01                	mov    cl,0x1
c0023a29:	e9 4a fe ff ff       	jmp    c0023878 <IDE::detect()+0x126>
c0023a2e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a34:	5b                   	pop    ebx
c0023a35:	5e                   	pop    esi
c0023a36:	5f                   	pop    edi
c0023a37:	5d                   	pop    ebp
c0023a38:	c3                   	ret    
c0023a39:	90                   	nop

c0023a3a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a3a:	55                   	push   ebp
c0023a3b:	57                   	push   edi
c0023a3c:	56                   	push   esi
c0023a3d:	53                   	push   ebx
c0023a3e:	83 ec 1c             	sub    esp,0x1c
c0023a41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a49:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a4d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a51:	88 c3                	mov    bl,al
c0023a53:	84 c0                	test   al,al
c0023a55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a59:	0f 84 67 01 00 00    	je     c0023bc6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a5f:	83 ec 0c             	sub    esp,0xc
c0023a62:	68 3b cc 02 c0       	push   0xc002cc3b
c0023a67:	e8 08 f5 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023a6c:	83 c4 10             	add    esp,0x10
c0023a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a73:	3c 01                	cmp    al,0x1
c0023a75:	75 17                	jne    c0023a8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023a77:	83 ec 0c             	sub    esp,0xc
c0023a7a:	b3 13                	mov    bl,0x13
c0023a7c:	68 47 cc 02 c0       	push   0xc002cc47
c0023a81:	e8 ee f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023a86:	83 c4 10             	add    esp,0x10
c0023a89:	e9 25 01 00 00       	jmp    c0023bb3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a8e:	3c 02                	cmp    al,0x2
c0023a90:	0f 85 ef 00 00 00    	jne    c0023b85 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023a96:	d1 e6                	shl    esi,1
c0023a98:	09 ee                	or     esi,ebp
c0023a9a:	52                   	push   edx
c0023a9b:	89 f0                	mov    eax,esi
c0023a9d:	6a 01                	push   0x1
c0023a9f:	0f b6 f0             	movzx  esi,al
c0023aa2:	c1 e6 06             	shl    esi,0x6
c0023aa5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023aad:	50                   	push   eax
c0023aae:	57                   	push   edi
c0023aaf:	e8 30 f6 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023ab4:	83 c4 10             	add    esp,0x10
c0023ab7:	89 c6                	mov    esi,eax
c0023ab9:	a8 01                	test   al,0x1
c0023abb:	74 12                	je     c0023acf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023abd:	83 ec 0c             	sub    esp,0xc
c0023ac0:	b3 07                	mov    bl,0x7
c0023ac2:	68 5c cc 02 c0       	push   0xc002cc5c
c0023ac7:	e8 a8 f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023acc:	83 c4 10             	add    esp,0x10
c0023acf:	f7 c6 02 00 00 00    	test   esi,0x2
c0023ad5:	74 12                	je     c0023ae9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023ad7:	83 ec 0c             	sub    esp,0xc
c0023ada:	b3 03                	mov    bl,0x3
c0023adc:	68 7a cc 02 c0       	push   0xc002cc7a
c0023ae1:	e8 8e f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	f7 c6 04 00 00 00    	test   esi,0x4
c0023aef:	74 12                	je     c0023b03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023af1:	83 ec 0c             	sub    esp,0xc
c0023af4:	b3 14                	mov    bl,0x14
c0023af6:	68 9a cc 02 c0       	push   0xc002cc9a
c0023afb:	e8 74 f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b00:	83 c4 10             	add    esp,0x10
c0023b03:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b09:	74 12                	je     c0023b1d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b0b:	83 ec 0c             	sub    esp,0xc
c0023b0e:	b3 03                	mov    bl,0x3
c0023b10:	68 7a cc 02 c0       	push   0xc002cc7a
c0023b15:	e8 5a f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b1a:	83 c4 10             	add    esp,0x10
c0023b1d:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b23:	74 12                	je     c0023b37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b25:	83 ec 0c             	sub    esp,0xc
c0023b28:	b3 15                	mov    bl,0x15
c0023b2a:	68 b2 cc 02 c0       	push   0xc002ccb2
c0023b2f:	e8 40 f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b34:	83 c4 10             	add    esp,0x10
c0023b37:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b3d:	74 12                	je     c0023b51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b3f:	83 ec 0c             	sub    esp,0xc
c0023b42:	b3 03                	mov    bl,0x3
c0023b44:	68 7a cc 02 c0       	push   0xc002cc7a
c0023b49:	e8 26 f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b4e:	83 c4 10             	add    esp,0x10
c0023b51:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b57:	74 12                	je     c0023b6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b59:	83 ec 0c             	sub    esp,0xc
c0023b5c:	b3 16                	mov    bl,0x16
c0023b5e:	68 cc cc 02 c0       	push   0xc002cccc
c0023b63:	e8 0c f4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b68:	83 c4 10             	add    esp,0x10
c0023b6b:	89 f0                	mov    eax,esi
c0023b6d:	84 c0                	test   al,al
c0023b6f:	79 42                	jns    c0023bb3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b71:	83 ec 0c             	sub    esp,0xc
c0023b74:	b3 0d                	mov    bl,0xd
c0023b76:	68 ed cc 02 c0       	push   0xc002cced
c0023b7b:	e8 f4 f3 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b80:	83 c4 10             	add    esp,0x10
c0023b83:	eb 2e                	jmp    c0023bb3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b85:	3c 03                	cmp    al,0x3
c0023b87:	75 14                	jne    c0023b9d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023b89:	83 ec 0c             	sub    esp,0xc
c0023b8c:	b3 17                	mov    bl,0x17
c0023b8e:	68 01 cd 02 c0       	push   0xc002cd01
c0023b93:	e8 dc f3 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023b98:	83 c4 10             	add    esp,0x10
c0023b9b:	eb 16                	jmp    c0023bb3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b9d:	3c 04                	cmp    al,0x4
c0023b9f:	75 12                	jne    c0023bb3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	b3 08                	mov    bl,0x8
c0023ba6:	68 17 cd 02 c0       	push   0xc002cd17
c0023bab:	e8 c4 f3 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023bb0:	83 c4 10             	add    esp,0x10
c0023bb3:	50                   	push   eax
c0023bb4:	50                   	push   eax
c0023bb5:	0f b6 c3             	movzx  eax,bl
c0023bb8:	50                   	push   eax
c0023bb9:	68 2f cd 02 c0       	push   0xc002cd2f
c0023bbe:	e8 b1 f3 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023bc3:	83 c4 10             	add    esp,0x10
c0023bc6:	83 c4 1c             	add    esp,0x1c
c0023bc9:	88 d8                	mov    al,bl
c0023bcb:	5b                   	pop    ebx
c0023bcc:	5e                   	pop    esi
c0023bcd:	5f                   	pop    edi
c0023bce:	5d                   	pop    ebp
c0023bcf:	c3                   	ret    

c0023bd0 <IDE::polling(unsigned char, unsigned int)>:
c0023bd0:	57                   	push   edi
c0023bd1:	56                   	push   esi
c0023bd2:	53                   	push   ebx
c0023bd3:	bb 04 00 00 00       	mov    ebx,0x4
c0023bd8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023bdc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023be1:	52                   	push   edx
c0023be2:	6a 0c                	push   0xc
c0023be4:	56                   	push   esi
c0023be5:	57                   	push   edi
c0023be6:	e8 f9 f4 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023beb:	83 c4 10             	add    esp,0x10
c0023bee:	4b                   	dec    ebx
c0023bef:	75 f0                	jne    c0023be1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023bf1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023bf6:	50                   	push   eax
c0023bf7:	6a 0c                	push   0xc
c0023bf9:	56                   	push   esi
c0023bfa:	57                   	push   edi
c0023bfb:	e8 e4 f4 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0023c00:	83 c4 10             	add    esp,0x10
c0023c03:	a8 01                	test   al,0x1
c0023c05:	74 12                	je     c0023c19 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c07:	83 ec 0c             	sub    esp,0xc
c0023c0a:	68 49 cd 02 c0       	push   0xc002cd49
c0023c0f:	e8 60 f3 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	eb 17                	jmp    c0023c30 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c19:	a8 20                	test   al,0x20
c0023c1b:	75 0f                	jne    c0023c2c <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c1d:	4b                   	dec    ebx
c0023c1e:	74 10                	je     c0023c30 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c20:	84 c0                	test   al,al
c0023c22:	78 d2                	js     c0023bf6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c24:	a8 08                	test   al,0x8
c0023c26:	74 ce                	je     c0023bf6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c28:	31 c0                	xor    eax,eax
c0023c2a:	eb 06                	jmp    c0023c32 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c2c:	b0 01                	mov    al,0x1
c0023c2e:	eb 02                	jmp    c0023c32 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c30:	b0 02                	mov    al,0x2
c0023c32:	5b                   	pop    ebx
c0023c33:	5e                   	pop    esi
c0023c34:	5f                   	pop    edi
c0023c35:	c3                   	ret    

c0023c36 <SATABus::close(int, int, void*)>:
c0023c36:	31 c0                	xor    eax,eax
c0023c38:	c3                   	ret    
c0023c39:	90                   	nop

c0023c3a <SATABus::detect()>:
c0023c3a:	c3                   	ret    
c0023c3b:	90                   	nop

c0023c3c <SATABus::SATABus()>:
c0023c3c:	83 ec 0c             	sub    esp,0xc
c0023c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c43:	83 ec 08             	sub    esp,0x8
c0023c46:	68 8c cd 02 c0       	push   0xc002cd8c
c0023c4b:	50                   	push   eax
c0023c4c:	e8 d5 0a ff ff       	call   c0014726 <HardDiskController::HardDiskController(char const*)>
c0023c51:	83 c4 10             	add    esp,0x10
c0023c54:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0023c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c5d:	89 10                	mov    DWORD PTR [eax],edx
c0023c5f:	83 ec 0c             	sub    esp,0xc
c0023c62:	6a 50                	push   0x50
c0023c64:	e8 61 c3 fe ff       	call   c000ffca <Phys::allocateContiguousPages(int)>
c0023c69:	83 c4 10             	add    esp,0x10
c0023c6c:	89 c2                	mov    edx,eax
c0023c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c72:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023c78:	83 ec 0c             	sub    esp,0xc
c0023c7b:	6a 50                	push   0x50
c0023c7d:	e8 c1 de fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0023c82:	83 c4 10             	add    esp,0x10
c0023c85:	89 c2                	mov    edx,eax
c0023c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023c91:	e8 48 e1 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0023c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023c9a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023ca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ca4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023caa:	83 ec 0c             	sub    esp,0xc
c0023cad:	6a 03                	push   0x3
c0023caf:	6a 50                	push   0x50
c0023cb1:	51                   	push   ecx
c0023cb2:	52                   	push   edx
c0023cb3:	50                   	push   eax
c0023cb4:	e8 6b e9 fe ff       	call   c0012624 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023cb9:	83 c4 20             	add    esp,0x20
c0023cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc0:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023cd0:	83 ec 04             	sub    esp,0x4
c0023cd3:	52                   	push   edx
c0023cd4:	50                   	push   eax
c0023cd5:	68 b0 cd 02 c0       	push   0xc002cdb0
c0023cda:	e8 95 f2 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023cdf:	83 c4 10             	add    esp,0x10
c0023ce2:	90                   	nop
c0023ce3:	83 c4 0c             	add    esp,0xc
c0023ce6:	c3                   	ret    
c0023ce7:	90                   	nop

c0023ce8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023ce8:	83 ec 0c             	sub    esp,0xc
c0023ceb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023cef:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023cf2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023cf5:	09 c2                	or     edx,eax
c0023cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d01:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d03:	31 c0                	xor    eax,eax
c0023d05:	c1 e9 08             	shr    ecx,0x8
c0023d08:	83 e1 0f             	and    ecx,0xf
c0023d0b:	39 c8                	cmp    eax,ecx
c0023d0d:	74 0a                	je     c0023d19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d0f:	f6 c2 01             	test   dl,0x1
c0023d12:	74 18                	je     c0023d2c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d14:	d1 ea                	shr    edx,1
c0023d16:	40                   	inc    eax
c0023d17:	eb f2                	jmp    c0023d0b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d19:	83 ec 0c             	sub    esp,0xc
c0023d1c:	68 d4 cd 02 c0       	push   0xc002cdd4
c0023d21:	e8 fb 68 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0023d26:	83 c4 10             	add    esp,0x10
c0023d29:	83 c8 ff             	or     eax,0xffffffff
c0023d2c:	83 c4 0c             	add    esp,0xc
c0023d2f:	c3                   	ret    

c0023d30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d30:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d34:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d37:	89 c2                	mov    edx,eax
c0023d39:	c1 ea 08             	shr    edx,0x8
c0023d3c:	83 e2 0f             	and    edx,0xf
c0023d3f:	fe ca                	dec    dl
c0023d41:	75 31                	jne    c0023d74 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d43:	83 e0 0f             	and    eax,0xf
c0023d46:	3c 03                	cmp    al,0x3
c0023d48:	75 2a                	jne    c0023d74 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d4a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d4d:	b8 02 00 00 00       	mov    eax,0x2
c0023d52:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d58:	74 1c                	je     c0023d76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d5a:	b8 04 00 00 00       	mov    eax,0x4
c0023d5f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d65:	74 0f                	je     c0023d76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d67:	31 c0                	xor    eax,eax
c0023d69:	83 fa 03             	cmp    edx,0x3
c0023d6c:	0f 94 c0             	sete   al
c0023d6f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023d73:	c3                   	ret    
c0023d74:	31 c0                	xor    eax,eax
c0023d76:	c3                   	ret    
c0023d77:	90                   	nop

c0023d78 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d7f:	0f ba e2 0f          	bt     edx,0xf
c0023d83:	72 f7                	jb     c0023d7c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023d85:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d88:	83 ca 10             	or     edx,0x10
c0023d8b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d91:	83 ca 01             	or     edx,0x1
c0023d94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023d97:	c3                   	ret    

c0023d98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023d9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023d9f:	83 e2 fe             	and    edx,0xfffffffe
c0023da2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023da5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023da8:	83 e2 ef             	and    edx,0xffffffef
c0023dab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023db1:	0f ba e2 0e          	bt     edx,0xe
c0023db5:	72 f7                	jb     c0023dae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023db7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dba:	0f ba e2 0f          	bt     edx,0xf
c0023dbe:	72 ee                	jb     c0023dae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023dc0:	c3                   	ret    
c0023dc1:	90                   	nop

c0023dc2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023dc2:	55                   	push   ebp
c0023dc3:	57                   	push   edi
c0023dc4:	56                   	push   esi
c0023dc5:	53                   	push   ebx
c0023dc6:	83 ec 1c             	sub    esp,0x1c
c0023dc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023dcd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023dd1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023dd5:	53                   	push   ebx
c0023dd6:	89 fd                	mov    ebp,edi
c0023dd8:	56                   	push   esi
c0023dd9:	c1 e5 0a             	shl    ebp,0xa
c0023ddc:	e8 b7 ff ff ff       	call   c0023d98 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023de1:	83 ec 0c             	sub    esp,0xc
c0023de4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023dea:	01 e8                	add    eax,ebp
c0023dec:	89 03                	mov    DWORD PTR [ebx],eax
c0023dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023df0:	68 00 04 00 00       	push   0x400
c0023df5:	6a 00                	push   0x0
c0023df7:	50                   	push   eax
c0023df8:	e8 7b c9 fd ff       	call   c0000778 <memset>
c0023dfd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e03:	89 fa                	mov    edx,edi
c0023e05:	01 e8                	add    eax,ebp
c0023e07:	c1 e7 0d             	shl    edi,0xd
c0023e0a:	89 03                	mov    DWORD PTR [ebx],eax
c0023e0c:	c1 e2 08             	shl    edx,0x8
c0023e0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e16:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e20:	89 d0                	mov    eax,edx
c0023e22:	83 c4 1c             	add    esp,0x1c
c0023e25:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e2b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e31:	68 00 01 00 00       	push   0x100
c0023e36:	6a 00                	push   0x0
c0023e38:	50                   	push   eax
c0023e39:	e8 3a c9 fd ff       	call   c0000778 <memset>
c0023e3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e42:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e48:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e52:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e55:	83 c4 10             	add    esp,0x10
c0023e58:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e5f:	31 ff                	xor    edi,edi
c0023e61:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e67:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e71:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e77:	83 c5 20             	add    ebp,0x20
c0023e7a:	01 f8                	add    eax,edi
c0023e7c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023e7f:	52                   	push   edx
c0023e80:	68 00 01 00 00       	push   0x100
c0023e85:	6a 00                	push   0x0
c0023e87:	50                   	push   eax
c0023e88:	e8 eb c8 fd ff       	call   c0000778 <memset>
c0023e8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e91:	83 c4 10             	add    esp,0x10
c0023e94:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023e9a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ea1:	01 f8                	add    eax,edi
c0023ea3:	81 c7 00 01 00 00    	add    edi,0x100
c0023ea9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eac:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023eb2:	75 b3                	jne    c0023e67 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023eb4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023eb8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ebc:	83 c4 1c             	add    esp,0x1c
c0023ebf:	5b                   	pop    ebx
c0023ec0:	5e                   	pop    esi
c0023ec1:	5f                   	pop    edi
c0023ec2:	5d                   	pop    ebp
c0023ec3:	e9 b0 fe ff ff       	jmp    c0023d78 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ec8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ec8:	55                   	push   ebp
c0023ec9:	57                   	push   edi
c0023eca:	56                   	push   esi
c0023ecb:	53                   	push   ebx
c0023ecc:	31 db                	xor    ebx,ebx
c0023ece:	83 ec 0c             	sub    esp,0xc
c0023ed1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ed5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ed9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023edc:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ee2:	0f 84 aa 00 00 00    	je     c0023f92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ee8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023eec:	89 d8                	mov    eax,ebx
c0023eee:	c1 e0 07             	shl    eax,0x7
c0023ef1:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023ef8:	55                   	push   ebp
c0023ef9:	56                   	push   esi
c0023efa:	e8 31 fe ff ff       	call   c0023d30 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023eff:	5a                   	pop    edx
c0023f00:	83 f8 01             	cmp    eax,0x1
c0023f03:	59                   	pop    ecx
c0023f04:	75 30                	jne    c0023f36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f06:	50                   	push   eax
c0023f07:	50                   	push   eax
c0023f08:	53                   	push   ebx
c0023f09:	68 f9 cd 02 c0       	push   0xc002cdf9
c0023f0e:	e8 61 f0 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023f13:	83 c4 0c             	add    esp,0xc
c0023f16:	53                   	push   ebx
c0023f17:	55                   	push   ebp
c0023f18:	56                   	push   esi
c0023f19:	e8 a4 fe ff ff       	call   c0023dc2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f1e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f25:	e8 19 b9 fe ff       	call   c000f843 <malloc>
c0023f2a:	89 c5                	mov    ebp,eax
c0023f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f2f:	e8 60 0d 00 00       	call   c0024c94 <SATA::SATA()>
c0023f34:	eb 33                	jmp    c0023f69 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f36:	83 f8 04             	cmp    eax,0x4
c0023f39:	75 47                	jne    c0023f82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f3b:	50                   	push   eax
c0023f3c:	50                   	push   eax
c0023f3d:	53                   	push   ebx
c0023f3e:	68 10 ce 02 c0       	push   0xc002ce10
c0023f43:	e8 2c f0 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023f48:	83 c4 0c             	add    esp,0xc
c0023f4b:	53                   	push   ebx
c0023f4c:	55                   	push   ebp
c0023f4d:	56                   	push   esi
c0023f4e:	e8 6f fe ff ff       	call   c0023dc2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f53:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f5a:	e8 e4 b8 fe ff       	call   c000f843 <malloc>
c0023f5f:	89 c5                	mov    ebp,eax
c0023f61:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f64:	e8 d7 10 00 00       	call   c0025040 <SATAPI::SATAPI()>
c0023f69:	5a                   	pop    edx
c0023f6a:	59                   	pop    ecx
c0023f6b:	55                   	push   ebp
c0023f6c:	56                   	push   esi
c0023f6d:	e8 28 04 ff ff       	call   c001439a <Device::addChild(Device*)>
c0023f72:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023f75:	56                   	push   esi
c0023f76:	6a 00                	push   0x0
c0023f78:	53                   	push   ebx
c0023f79:	55                   	push   ebp
c0023f7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023f7d:	83 c4 20             	add    esp,0x20
c0023f80:	eb 10                	jmp    c0023f92 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f82:	50                   	push   eax
c0023f83:	50                   	push   eax
c0023f84:	53                   	push   ebx
c0023f85:	68 29 ce 02 c0       	push   0xc002ce29
c0023f8a:	e8 e5 ef fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0023f8f:	83 c4 10             	add    esp,0x10
c0023f92:	d1 ef                	shr    edi,1
c0023f94:	43                   	inc    ebx
c0023f95:	83 fb 20             	cmp    ebx,0x20
c0023f98:	0f 85 3e ff ff ff    	jne    c0023edc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023f9e:	83 c4 0c             	add    esp,0xc
c0023fa1:	5b                   	pop    ebx
c0023fa2:	5e                   	pop    esi
c0023fa3:	5f                   	pop    edi
c0023fa4:	5d                   	pop    ebp
c0023fa5:	c3                   	ret    

c0023fa6 <SATABus::open(int, int, void*)>:
c0023fa6:	83 ec 14             	sub    esp,0x14
c0023fa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fad:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fb3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023fb9:	52                   	push   edx
c0023fba:	50                   	push   eax
c0023fbb:	e8 08 ff ff ff       	call   c0023ec8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023fc0:	31 c0                	xor    eax,eax
c0023fc2:	83 c4 1c             	add    esp,0x1c
c0023fc5:	c3                   	ret    

c0023fc6 <ATA::close(int, int, void*)>:
c0023fc6:	83 ec 0c             	sub    esp,0xc
c0023fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fcd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fd3:	85 c0                	test   eax,eax
c0023fd5:	74 0c                	je     c0023fe3 <ATA::close(int, int, void*)+0x1d>
c0023fd7:	83 ec 0c             	sub    esp,0xc
c0023fda:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fdc:	50                   	push   eax
c0023fdd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fe0:	83 c4 10             	add    esp,0x10
c0023fe3:	31 c0                	xor    eax,eax
c0023fe5:	83 c4 0c             	add    esp,0xc
c0023fe8:	c3                   	ret    
c0023fe9:	90                   	nop

c0023fea <ATA::powerSaving(PowerSavingLevel)>:
c0023fea:	c3                   	ret    
c0023feb:	90                   	nop

c0023fec <ATA::ATA()>:
c0023fec:	83 ec 0c             	sub    esp,0xc
c0023fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ff3:	83 ec 04             	sub    esp,0x4
c0023ff6:	68 00 02 00 00       	push   0x200
c0023ffb:	68 11 cf 02 c0       	push   0xc002cf11
c0024000:	50                   	push   eax
c0024001:	e8 b8 07 ff ff       	call   c00147be <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024006:	83 c4 10             	add    esp,0x10
c0024009:	ba 94 ce 02 c0       	mov    edx,0xc002ce94
c002400e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024012:	89 10                	mov    DWORD PTR [eax],edx
c0024014:	90                   	nop
c0024015:	83 c4 0c             	add    esp,0xc
c0024018:	c3                   	ret    
c0024019:	90                   	nop

c002401a <ATA::flush(bool)>:
c002401a:	53                   	push   ebx
c002401b:	83 ec 08             	sub    esp,0x8
c002401e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024023:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024027:	19 c0                	sbb    eax,eax
c0024029:	83 e0 fd             	and    eax,0xfffffffd
c002402c:	05 ea 00 00 00       	add    eax,0xea
c0024031:	50                   	push   eax
c0024032:	6a 07                	push   0x7
c0024034:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002403b:	50                   	push   eax
c002403c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024042:	e8 dd ef ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024047:	83 c4 0c             	add    esp,0xc
c002404a:	6a 00                	push   0x0
c002404c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024053:	50                   	push   eax
c0024054:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002405a:	e8 71 fb ff ff       	call   c0023bd0 <IDE::polling(unsigned char, unsigned int)>
c002405f:	83 c4 18             	add    esp,0x18
c0024062:	5b                   	pop    ebx
c0024063:	c3                   	ret    

c0024064 <ATA::readyForCommand()>:
c0024064:	56                   	push   esi
c0024065:	53                   	push   ebx
c0024066:	31 db                	xor    ebx,ebx
c0024068:	50                   	push   eax
c0024069:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002406d:	50                   	push   eax
c002406e:	6a 0c                	push   0xc
c0024070:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024077:	50                   	push   eax
c0024078:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002407e:	e8 61 f0 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0024083:	83 c4 10             	add    esp,0x10
c0024086:	a8 88                	test   al,0x88
c0024088:	74 23                	je     c00240ad <ATA::readyForCommand()+0x49>
c002408a:	43                   	inc    ebx
c002408b:	83 fb 63             	cmp    ebx,0x63
c002408e:	7e dd                	jle    c002406d <ATA::readyForCommand()+0x9>
c0024090:	51                   	push   ecx
c0024091:	51                   	push   ecx
c0024092:	6a 00                	push   0x0
c0024094:	68 40 42 0f 00       	push   0xf4240
c0024099:	e8 c8 a2 ff ff       	call   c001e366 <nanoSleep(unsigned long long)>
c002409e:	83 c4 10             	add    esp,0x10
c00240a1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240a7:	75 c4                	jne    c002406d <ATA::readyForCommand()+0x9>
c00240a9:	31 c0                	xor    eax,eax
c00240ab:	eb 02                	jmp    c00240af <ATA::readyForCommand()+0x4b>
c00240ad:	b0 01                	mov    al,0x1
c00240af:	5a                   	pop    edx
c00240b0:	5b                   	pop    ebx
c00240b1:	5e                   	pop    esi
c00240b2:	c3                   	ret    
c00240b3:	90                   	nop

c00240b4 <ATA::access(unsigned long long, int, void*, bool)>:
c00240b4:	55                   	push   ebp
c00240b5:	57                   	push   edi
c00240b6:	56                   	push   esi
c00240b7:	53                   	push   ebx
c00240b8:	83 ec 2c             	sub    esp,0x2c
c00240bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240c3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240cb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00240cf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00240d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00240d7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00240e1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00240e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00240eb:	c1 e0 06             	shl    eax,0x6
c00240ee:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00240f6:	74 5d                	je     c0024155 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00240f8:	89 fa                	mov    edx,edi
c00240fa:	89 f0                	mov    eax,esi
c00240fc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024100:	c1 ea 1c             	shr    edx,0x1c
c0024103:	89 d1                	mov    ecx,edx
c0024105:	09 c1                	or     ecx,eax
c0024107:	74 25                	je     c002412e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024109:	31 ed                	xor    ebp,ebp
c002410b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024112:	89 fa                	mov    edx,edi
c0024114:	89 f0                	mov    eax,esi
c0024116:	0f ad d0             	shrd   eax,edx,cl
c0024119:	d3 ea                	shr    edx,cl
c002411b:	f6 c1 20             	test   cl,0x20
c002411e:	74 02                	je     c0024122 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024120:	89 d0                	mov    eax,edx
c0024122:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024126:	45                   	inc    ebp
c0024127:	83 fd 06             	cmp    ebp,0x6
c002412a:	75 df                	jne    c002410b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002412c:	eb 76                	jmp    c00241a4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002412e:	89 f0                	mov    eax,esi
c0024130:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024135:	89 fa                	mov    edx,edi
c0024137:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002413e:	0f ac d0 10          	shrd   eax,edx,0x10
c0024142:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024147:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002414b:	c1 ee 18             	shr    esi,0x18
c002414e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024153:	eb 56                	jmp    c00241ab <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024155:	6a 00                	push   0x0
c0024157:	6a 3f                	push   0x3f
c0024159:	57                   	push   edi
c002415a:	56                   	push   esi
c002415b:	e8 8c 29 00 00       	call   c0026aec <__umoddi3>
c0024160:	83 c4 10             	add    esp,0x10
c0024163:	40                   	inc    eax
c0024164:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024168:	6a 00                	push   0x0
c002416a:	68 f0 03 00 00       	push   0x3f0
c002416f:	57                   	push   edi
c0024170:	56                   	push   esi
c0024171:	e8 76 28 00 00       	call   c00269ec <__udivdi3>
c0024176:	83 c4 10             	add    esp,0x10
c0024179:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002417e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024185:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002418a:	6a 00                	push   0x0
c002418c:	6a 3f                	push   0x3f
c002418e:	57                   	push   edi
c002418f:	56                   	push   esi
c0024190:	e8 57 28 00 00       	call   c00269ec <__udivdi3>
c0024195:	83 c4 10             	add    esp,0x10
c0024198:	89 c6                	mov    esi,eax
c002419a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002419f:	83 e6 0f             	and    esi,0xf
c00241a2:	eb 07                	jmp    c00241ab <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241a4:	31 f6                	xor    esi,esi
c00241a6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241ab:	bf 01 00 00 00       	mov    edi,0x1
c00241b0:	50                   	push   eax
c00241b1:	6a 00                	push   0x0
c00241b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ba:	50                   	push   eax
c00241bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241bf:	e8 6c f0 ff ff       	call   c0023230 <IDE::enableIRQs(unsigned char, bool)>
c00241c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241c7:	e8 98 fe ff ff       	call   c0024064 <ATA::readyForCommand()>
c00241cc:	83 c4 10             	add    esp,0x10
c00241cf:	84 c0                	test   al,al
c00241d1:	0f 84 5a 02 00 00    	je     c0024431 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00241d7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00241dd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241e3:	c1 e0 04             	shl    eax,0x4
c00241e6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00241ed:	09 c6                	or     esi,eax
c00241ef:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00241f4:	75 05                	jne    c00241fb <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00241f6:	83 ce a0             	or     esi,0xffffffa0
c00241f9:	eb 03                	jmp    c00241fe <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00241fb:	83 ce e0             	or     esi,0xffffffe0
c00241fe:	89 f0                	mov    eax,esi
c0024200:	0f b6 f0             	movzx  esi,al
c0024203:	56                   	push   esi
c0024204:	6a 06                	push   0x6
c0024206:	51                   	push   ecx
c0024207:	52                   	push   edx
c0024208:	e8 17 ee ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002420d:	83 c4 10             	add    esp,0x10
c0024210:	6a 00                	push   0x0
c0024212:	6a 01                	push   0x1
c0024214:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002421b:	50                   	push   eax
c002421c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024222:	e8 fd ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024227:	83 c4 10             	add    esp,0x10
c002422a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002422f:	75 6e                	jne    c002429f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024231:	6a 00                	push   0x0
c0024233:	6a 08                	push   0x8
c0024235:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002423c:	50                   	push   eax
c002423d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024243:	e8 dc ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024248:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002424d:	50                   	push   eax
c002424e:	6a 09                	push   0x9
c0024250:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024257:	50                   	push   eax
c0024258:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002425e:	e8 c1 ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024263:	83 c4 20             	add    esp,0x20
c0024266:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002426b:	50                   	push   eax
c002426c:	6a 0a                	push   0xa
c002426e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024275:	50                   	push   eax
c0024276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427c:	e8 a3 ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024281:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024286:	50                   	push   eax
c0024287:	6a 0b                	push   0xb
c0024289:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024290:	50                   	push   eax
c0024291:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024297:	e8 88 ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002429c:	83 c4 20             	add    esp,0x20
c002429f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242a4:	50                   	push   eax
c00242a5:	6a 02                	push   0x2
c00242a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242ae:	50                   	push   eax
c00242af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242b5:	e8 6a ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ba:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242bf:	50                   	push   eax
c00242c0:	6a 03                	push   0x3
c00242c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c9:	50                   	push   eax
c00242ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242d0:	e8 4f ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d5:	83 c4 20             	add    esp,0x20
c00242d8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00242dd:	50                   	push   eax
c00242de:	6a 04                	push   0x4
c00242e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e7:	50                   	push   eax
c00242e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ee:	e8 31 ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00242f8:	50                   	push   eax
c00242f9:	6a 05                	push   0x5
c00242fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024302:	50                   	push   eax
c0024303:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024309:	e8 16 ed ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430e:	83 c4 20             	add    esp,0x20
c0024311:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024316:	0f 94 c0             	sete   al
c0024319:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002431e:	74 09                	je     c0024329 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024320:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024327:	eb 07                	jmp    c0024330 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024329:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024330:	0f b6 c0             	movzx  eax,al
c0024333:	50                   	push   eax
c0024334:	6a 07                	push   0x7
c0024336:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433d:	50                   	push   eax
c002433e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024344:	e8 db ec ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024349:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002434d:	83 c4 10             	add    esp,0x10
c0024350:	85 f6                	test   esi,esi
c0024352:	0f 84 ba 00 00 00    	je     c0024412 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024358:	50                   	push   eax
c0024359:	6a 01                	push   0x1
c002435b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024362:	50                   	push   eax
c0024363:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024369:	e8 62 f8 ff ff       	call   c0023bd0 <IDE::polling(unsigned char, unsigned int)>
c002436e:	83 c4 10             	add    esp,0x10
c0024371:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024377:	84 c0                	test   al,al
c0024379:	74 2c                	je     c00243a7 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002437b:	0f b6 f8             	movzx  edi,al
c002437e:	0f b6 d2             	movzx  edx,dl
c0024381:	57                   	push   edi
c0024382:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024389:	50                   	push   eax
c002438a:	52                   	push   edx
c002438b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024391:	e8 a4 f6 ff ff       	call   c0023a3a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024396:	c7 04 24 6c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce6c
c002439d:	e8 d2 eb fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00243a2:	e9 87 00 00 00       	jmp    c002442e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243a7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243ac:	74 33                	je     c00243e1 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243ae:	31 ed                	xor    ebp,ebp
c00243b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243b4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243b8:	50                   	push   eax
c00243b9:	50                   	push   eax
c00243ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243c1:	50                   	push   eax
c00243c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c8:	e8 45 ec ff ff       	call   c0023012 <IDE::getBase(unsigned char)>
c00243cd:	89 c2                	mov    edx,eax
c00243cf:	89 f8                	mov    eax,edi
c00243d1:	66 ef                	out    dx,ax
c00243d3:	45                   	inc    ebp
c00243d4:	83 c4 10             	add    esp,0x10
c00243d7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00243dd:	75 d1                	jne    c00243b0 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c00243df:	eb 23                	jmp    c0024404 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c00243e1:	0f b6 d2             	movzx  edx,dl
c00243e4:	51                   	push   ecx
c00243e5:	51                   	push   ecx
c00243e6:	52                   	push   edx
c00243e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ed:	e8 20 ec ff ff       	call   c0023012 <IDE::getBase(unsigned char)>
c00243f2:	b9 00 01 00 00       	mov    ecx,0x100
c00243f7:	89 c2                	mov    edx,eax
c00243f9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00243fd:	fc                   	cld    
c00243fe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024401:	83 c4 10             	add    esp,0x10
c0024404:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002440c:	4e                   	dec    esi
c002440d:	e9 3e ff ff ff       	jmp    c0024350 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024412:	31 ff                	xor    edi,edi
c0024414:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024419:	74 16                	je     c0024431 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002441b:	50                   	push   eax
c002441c:	50                   	push   eax
c002441d:	31 c0                	xor    eax,eax
c002441f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024424:	0f 94 c0             	sete   al
c0024427:	50                   	push   eax
c0024428:	53                   	push   ebx
c0024429:	e8 ec fb ff ff       	call   c002401a <ATA::flush(bool)>
c002442e:	83 c4 10             	add    esp,0x10
c0024431:	83 c4 2c             	add    esp,0x2c
c0024434:	89 f8                	mov    eax,edi
c0024436:	5b                   	pop    ebx
c0024437:	5e                   	pop    esi
c0024438:	5f                   	pop    edi
c0024439:	5d                   	pop    ebp
c002443a:	c3                   	ret    
c002443b:	90                   	nop

c002443c <ATA::read(unsigned long long, int, void*)>:
c002443c:	57                   	push   edi
c002443d:	b8 04 00 00 00       	mov    eax,0x4
c0024442:	56                   	push   esi
c0024443:	53                   	push   ebx
c0024444:	83 ec 10             	sub    esp,0x10
c0024447:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002444b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002444f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024452:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024456:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002445a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024460:	77 3b                	ja     c002449d <ATA::read(unsigned long long, int, void*)+0x61>
c0024462:	b8 06 00 00 00       	mov    eax,0x6
c0024467:	85 d2                	test   edx,edx
c0024469:	74 32                	je     c002449d <ATA::read(unsigned long long, int, void*)+0x61>
c002446b:	50                   	push   eax
c002446c:	50                   	push   eax
c002446d:	6a 00                	push   0x0
c002446f:	52                   	push   edx
c0024470:	53                   	push   ebx
c0024471:	57                   	push   edi
c0024472:	56                   	push   esi
c0024473:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024477:	e8 38 fc ff ff       	call   c00240b4 <ATA::access(unsigned long long, int, void*, bool)>
c002447c:	83 c4 20             	add    esp,0x20
c002447f:	85 c0                	test   eax,eax
c0024481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024485:	75 11                	jne    c0024498 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024487:	01 1d 08 28 03 c0    	add    DWORD PTR ds:0xc0032808,ebx
c002448d:	e8 06 c5 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024492:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024496:	eb 05                	jmp    c002449d <ATA::read(unsigned long long, int, void*)+0x61>
c0024498:	b8 01 00 00 00       	mov    eax,0x1
c002449d:	83 c4 10             	add    esp,0x10
c00244a0:	5b                   	pop    ebx
c00244a1:	5e                   	pop    esi
c00244a2:	5f                   	pop    edi
c00244a3:	c3                   	ret    

c00244a4 <ATA::write(unsigned long long, int, void*)>:
c00244a4:	57                   	push   edi
c00244a5:	b8 04 00 00 00       	mov    eax,0x4
c00244aa:	56                   	push   esi
c00244ab:	53                   	push   ebx
c00244ac:	83 ec 10             	sub    esp,0x10
c00244af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244b7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244c2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244c8:	77 3b                	ja     c0024505 <ATA::write(unsigned long long, int, void*)+0x61>
c00244ca:	b8 06 00 00 00       	mov    eax,0x6
c00244cf:	85 d2                	test   edx,edx
c00244d1:	74 32                	je     c0024505 <ATA::write(unsigned long long, int, void*)+0x61>
c00244d3:	50                   	push   eax
c00244d4:	50                   	push   eax
c00244d5:	6a 01                	push   0x1
c00244d7:	52                   	push   edx
c00244d8:	53                   	push   ebx
c00244d9:	57                   	push   edi
c00244da:	56                   	push   esi
c00244db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244df:	e8 d0 fb ff ff       	call   c00240b4 <ATA::access(unsigned long long, int, void*, bool)>
c00244e4:	83 c4 20             	add    esp,0x20
c00244e7:	85 c0                	test   eax,eax
c00244e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244ed:	75 11                	jne    c0024500 <ATA::write(unsigned long long, int, void*)+0x5c>
c00244ef:	01 1d 04 28 03 c0    	add    DWORD PTR ds:0xc0032804,ebx
c00244f5:	e8 9e c4 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c00244fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244fe:	eb 05                	jmp    c0024505 <ATA::write(unsigned long long, int, void*)+0x61>
c0024500:	b8 01 00 00 00       	mov    eax,0x1
c0024505:	83 c4 10             	add    esp,0x10
c0024508:	5b                   	pop    ebx
c0024509:	5e                   	pop    esi
c002450a:	5f                   	pop    edi
c002450b:	c3                   	ret    

c002450c <ATA::detectCHS()>:
c002450c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024510:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024516:	c1 e0 06             	shl    eax,0x6
c0024519:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002451f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024529:	c7 44 24 04 77 ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ce77
c0024531:	e9 eb 60 ff ff       	jmp    c001a621 <Krnl::panic(char const*)>

c0024536 <ATA::open(int, int, void*)>:
c0024536:	53                   	push   ebx
c0024537:	83 ec 08             	sub    esp,0x8
c002453a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002453e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024542:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024546:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002454c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024552:	c1 e0 06             	shl    eax,0x6
c0024555:	01 d0                	add    eax,edx
c0024557:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002455e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024564:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002456b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024575:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002457b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024582:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024589:	75 0c                	jne    c0024597 <ATA::open(int, int, void*)+0x61>
c002458b:	83 ec 0c             	sub    esp,0xc
c002458e:	53                   	push   ebx
c002458f:	e8 78 ff ff ff       	call   c002450c <ATA::detectCHS()>
c0024594:	83 c4 10             	add    esp,0x10
c0024597:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002459d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245a3:	c1 e0 06             	shl    eax,0x6
c00245a6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245b7:	d1 e8                	shr    eax,1
c00245b9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245bf:	6a 04                	push   0x4
c00245c1:	6a 0c                	push   0xc
c00245c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245ca:	50                   	push   eax
c00245cb:	52                   	push   edx
c00245cc:	e8 53 ea ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245d1:	90                   	nop
c00245d2:	90                   	nop
c00245d3:	6a 00                	push   0x0
c00245d5:	6a 0c                	push   0xc
c00245d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245de:	50                   	push   eax
c00245df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00245e5:	e8 3a ea ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ea:	83 c4 14             	add    esp,0x14
c00245ed:	53                   	push   ebx
c00245ee:	e8 33 02 ff ff       	call   c0014826 <PhysicalDisk::startCache()>
c00245f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245f6:	e8 ad 23 ff ff       	call   c00169a8 <createPartitionsForDisk(PhysicalDisk*)>
c00245fb:	31 c0                	xor    eax,eax
c00245fd:	83 c4 18             	add    esp,0x18
c0024600:	5b                   	pop    ebx
c0024601:	c3                   	ret    

c0024602 <ATAPI::write(unsigned long long, int, void*)>:
c0024602:	b8 03 00 00 00       	mov    eax,0x3
c0024607:	c3                   	ret    

c0024608 <ATAPI::close(int, int, void*)>:
c0024608:	83 ec 0c             	sub    esp,0xc
c002460b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002460f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024615:	85 c0                	test   eax,eax
c0024617:	74 0c                	je     c0024625 <ATAPI::close(int, int, void*)+0x1d>
c0024619:	83 ec 0c             	sub    esp,0xc
c002461c:	8b 10                	mov    edx,DWORD PTR [eax]
c002461e:	50                   	push   eax
c002461f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024622:	83 c4 10             	add    esp,0x10
c0024625:	31 c0                	xor    eax,eax
c0024627:	83 c4 0c             	add    esp,0xc
c002462a:	c3                   	ret    
c002462b:	90                   	nop

c002462c <ATAPI::ATAPI()>:
c002462c:	83 ec 0c             	sub    esp,0xc
c002462f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024633:	83 ec 04             	sub    esp,0x4
c0024636:	68 00 08 00 00       	push   0x800
c002463b:	68 b1 cf 02 c0       	push   0xc002cfb1
c0024640:	50                   	push   eax
c0024641:	e8 78 01 ff ff       	call   c00147be <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024646:	83 c4 10             	add    esp,0x10
c0024649:	ba cc ce 02 c0       	mov    edx,0xc002cecc
c002464e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024652:	89 10                	mov    DWORD PTR [eax],edx
c0024654:	90                   	nop
c0024655:	83 c4 0c             	add    esp,0xc
c0024658:	c3                   	ret    
c0024659:	90                   	nop

c002465a <ATAPI::readyForCommand()>:
c002465a:	56                   	push   esi
c002465b:	53                   	push   ebx
c002465c:	31 db                	xor    ebx,ebx
c002465e:	50                   	push   eax
c002465f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024663:	50                   	push   eax
c0024664:	6a 0c                	push   0xc
c0024666:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002466d:	50                   	push   eax
c002466e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024674:	e8 6b ea ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0024679:	83 c4 10             	add    esp,0x10
c002467c:	a8 88                	test   al,0x88
c002467e:	74 23                	je     c00246a3 <ATAPI::readyForCommand()+0x49>
c0024680:	43                   	inc    ebx
c0024681:	83 fb 63             	cmp    ebx,0x63
c0024684:	7e dd                	jle    c0024663 <ATAPI::readyForCommand()+0x9>
c0024686:	51                   	push   ecx
c0024687:	51                   	push   ecx
c0024688:	6a 00                	push   0x0
c002468a:	68 40 42 0f 00       	push   0xf4240
c002468f:	e8 d2 9c ff ff       	call   c001e366 <nanoSleep(unsigned long long)>
c0024694:	83 c4 10             	add    esp,0x10
c0024697:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002469d:	75 c4                	jne    c0024663 <ATAPI::readyForCommand()+0x9>
c002469f:	31 c0                	xor    eax,eax
c00246a1:	eb 02                	jmp    c00246a5 <ATAPI::readyForCommand()+0x4b>
c00246a3:	b0 01                	mov    al,0x1
c00246a5:	5a                   	pop    edx
c00246a6:	5b                   	pop    ebx
c00246a7:	5e                   	pop    esi
c00246a8:	c3                   	ret    
c00246a9:	90                   	nop

c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246aa:	55                   	push   ebp
c00246ab:	57                   	push   edi
c00246ac:	56                   	push   esi
c00246ad:	53                   	push   ebx
c00246ae:	83 ec 20             	sub    esp,0x20
c00246b1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246b5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246b9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246c1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246c5:	6a 01                	push   0x1
c00246c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246ce:	50                   	push   eax
c00246cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d5:	e8 56 eb ff ff       	call   c0023230 <IDE::enableIRQs(unsigned char, bool)>
c00246da:	5e                   	pop    esi
c00246db:	58                   	pop    eax
c00246dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246e3:	50                   	push   eax
c00246e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246ea:	e8 0f e9 ff ff       	call   c0022ffe <IDE::prepareInterrupt(unsigned char)>
c00246ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00246f2:	e8 63 ff ff ff       	call   c002465a <ATAPI::readyForCommand()>
c00246f7:	83 c4 10             	add    esp,0x10
c00246fa:	84 c0                	test   al,al
c00246fc:	75 0a                	jne    c0024708 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00246fe:	bb 01 00 00 00       	mov    ebx,0x1
c0024703:	e9 57 02 00 00       	jmp    c002495f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024708:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002470e:	c1 e0 04             	shl    eax,0x4
c0024711:	0f b6 c0             	movzx  eax,al
c0024714:	50                   	push   eax
c0024715:	6a 06                	push   0x6
c0024717:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002471e:	50                   	push   eax
c002471f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024725:	e8 fa e8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002472a:	6a 00                	push   0x0
c002472c:	6a 01                	push   0x1
c002472e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024735:	50                   	push   eax
c0024736:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002473c:	e8 e3 e8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024741:	83 c4 20             	add    esp,0x20
c0024744:	0f b6 c3             	movzx  eax,bl
c0024747:	0f b6 df             	movzx  ebx,bh
c002474a:	50                   	push   eax
c002474b:	6a 04                	push   0x4
c002474d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024754:	50                   	push   eax
c0024755:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475b:	e8 c4 e8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024760:	53                   	push   ebx
c0024761:	6a 05                	push   0x5
c0024763:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002476a:	50                   	push   eax
c002476b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024771:	e8 ae e8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024776:	83 c4 20             	add    esp,0x20
c0024779:	68 a0 00 00 00       	push   0xa0
c002477e:	6a 07                	push   0x7
c0024780:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024787:	50                   	push   eax
c0024788:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478e:	e8 91 e8 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024793:	83 c4 0c             	add    esp,0xc
c0024796:	6a 01                	push   0x1
c0024798:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002479f:	50                   	push   eax
c00247a0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a6:	e8 25 f4 ff ff       	call   c0023bd0 <IDE::polling(unsigned char, unsigned int)>
c00247ab:	83 c4 10             	add    esp,0x10
c00247ae:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247b4:	84 c0                	test   al,al
c00247b6:	74 23                	je     c00247db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247b8:	0f b6 d8             	movzx  ebx,al
c00247bb:	0f b6 d2             	movzx  edx,dl
c00247be:	53                   	push   ebx
c00247bf:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247c6:	50                   	push   eax
c00247c7:	52                   	push   edx
c00247c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ce:	e8 67 f2 ff ff       	call   c0023a3a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00247d3:	83 c4 10             	add    esp,0x10
c00247d6:	e9 84 01 00 00       	jmp    c002495f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247db:	0f b6 d2             	movzx  edx,dl
c00247de:	53                   	push   ebx
c00247df:	53                   	push   ebx
c00247e0:	52                   	push   edx
c00247e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e7:	e8 26 e8 ff ff       	call   c0023012 <IDE::getBase(unsigned char)>
c00247ec:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00247f0:	b9 06 00 00 00       	mov    ecx,0x6
c00247f5:	89 c2                	mov    edx,eax
c00247f7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00247fa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00247fe:	83 c4 10             	add    esp,0x10
c0024801:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024807:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002480e:	85 db                	test   ebx,ebx
c0024810:	0f 84 ec 00 00 00    	je     c0024902 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024816:	51                   	push   ecx
c0024817:	51                   	push   ecx
c0024818:	52                   	push   edx
c0024819:	50                   	push   eax
c002481a:	e8 73 e9 ff ff       	call   c0023192 <IDE::waitInterrupt(unsigned char)>
c002481f:	83 c4 10             	add    esp,0x10
c0024822:	84 c0                	test   al,al
c0024824:	0f 84 d4 fe ff ff    	je     c00246fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002482a:	56                   	push   esi
c002482b:	56                   	push   esi
c002482c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024833:	50                   	push   eax
c0024834:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002483a:	e8 bf e7 ff ff       	call   c0022ffe <IDE::prepareInterrupt(unsigned char)>
c002483f:	83 c4 0c             	add    esp,0xc
c0024842:	6a 04                	push   0x4
c0024844:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002484b:	50                   	push   eax
c002484c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024852:	e8 8d e8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0024857:	83 c4 0c             	add    esp,0xc
c002485a:	89 c6                	mov    esi,eax
c002485c:	6a 05                	push   0x5
c002485e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024865:	50                   	push   eax
c0024866:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002486c:	e8 73 e8 ff ff       	call   c00230e4 <IDE::read(unsigned char, unsigned char)>
c0024871:	89 f1                	mov    ecx,esi
c0024873:	0f b6 c0             	movzx  eax,al
c0024876:	0f b6 f1             	movzx  esi,cl
c0024879:	c1 e0 08             	shl    eax,0x8
c002487c:	09 c6                	or     esi,eax
c002487e:	d1 fe                	sar    esi,1
c0024880:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024884:	83 c4 10             	add    esp,0x10
c0024887:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002488c:	74 41                	je     c00248cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002488e:	31 c9                	xor    ecx,ecx
c0024890:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024896:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002489d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248a1:	75 0a                	jne    c00248ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248a3:	01 c9                	add    ecx,ecx
c00248a5:	01 cd                	add    ebp,ecx
c00248a7:	4b                   	dec    ebx
c00248a8:	e9 54 ff ff ff       	jmp    c0024801 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248ad:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248b6:	51                   	push   ecx
c00248b7:	51                   	push   ecx
c00248b8:	52                   	push   edx
c00248b9:	50                   	push   eax
c00248ba:	e8 53 e7 ff ff       	call   c0023012 <IDE::getBase(unsigned char)>
c00248bf:	89 c2                	mov    edx,eax
c00248c1:	89 f0                	mov    eax,esi
c00248c3:	66 ef                	out    dx,ax
c00248c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248c9:	83 c4 10             	add    esp,0x10
c00248cc:	41                   	inc    ecx
c00248cd:	eb c1                	jmp    c0024890 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00248cf:	31 f6                	xor    esi,esi
c00248d1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248d7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248de:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00248e2:	75 06                	jne    c00248ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00248e4:	01 f6                	add    esi,esi
c00248e6:	01 f5                	add    ebp,esi
c00248e8:	eb bd                	jmp    c00248a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00248ea:	51                   	push   ecx
c00248eb:	51                   	push   ecx
c00248ec:	52                   	push   edx
c00248ed:	50                   	push   eax
c00248ee:	e8 1f e7 ff ff       	call   c0023012 <IDE::getBase(unsigned char)>
c00248f3:	89 c2                	mov    edx,eax
c00248f5:	66 ed                	in     ax,dx
c00248f7:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00248fc:	83 c4 10             	add    esp,0x10
c00248ff:	46                   	inc    esi
c0024900:	eb cf                	jmp    c00248d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024902:	51                   	push   ecx
c0024903:	51                   	push   ecx
c0024904:	52                   	push   edx
c0024905:	50                   	push   eax
c0024906:	e8 87 e8 ff ff       	call   c0023192 <IDE::waitInterrupt(unsigned char)>
c002490b:	83 c4 10             	add    esp,0x10
c002490e:	84 c0                	test   al,al
c0024910:	0f 84 e8 fd ff ff    	je     c00246fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024916:	bb a0 86 01 00       	mov    ebx,0x186a0
c002491b:	52                   	push   edx
c002491c:	52                   	push   edx
c002491d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024924:	50                   	push   eax
c0024925:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002492b:	e8 ce e6 ff ff       	call   c0022ffe <IDE::prepareInterrupt(unsigned char)>
c0024930:	83 c4 10             	add    esp,0x10
c0024933:	50                   	push   eax
c0024934:	50                   	push   eax
c0024935:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002493c:	50                   	push   eax
c002493d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024943:	e8 ca e6 ff ff       	call   c0023012 <IDE::getBase(unsigned char)>
c0024948:	8d 50 07             	lea    edx,[eax+0x7]
c002494b:	ec                   	in     al,dx
c002494c:	83 c4 10             	add    esp,0x10
c002494f:	a8 88                	test   al,0x88
c0024951:	74 0a                	je     c002495d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024953:	4b                   	dec    ebx
c0024954:	75 dd                	jne    c0024933 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024956:	bb 02 00 00 00       	mov    ebx,0x2
c002495b:	eb 02                	jmp    c002495f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002495d:	31 db                	xor    ebx,ebx
c002495f:	83 c4 1c             	add    esp,0x1c
c0024962:	89 d8                	mov    eax,ebx
c0024964:	5b                   	pop    ebx
c0024965:	5e                   	pop    esi
c0024966:	5f                   	pop    edi
c0024967:	5d                   	pop    ebp
c0024968:	c3                   	ret    
c0024969:	90                   	nop

c002496a <ATAPI::diskRemoved()>:
c002496a:	83 ec 18             	sub    esp,0x18
c002496d:	68 bd cf 02 c0       	push   0xc002cfbd
c0024972:	e8 fd e5 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0024977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002497b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024982:	83 c4 1c             	add    esp,0x1c
c0024985:	c3                   	ret    

c0024986 <ATAPI::eject()>:
c0024986:	57                   	push   edi
c0024987:	b9 03 00 00 00       	mov    ecx,0x3
c002498c:	53                   	push   ebx
c002498d:	83 ec 14             	sub    esp,0x14
c0024990:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024994:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024998:	fc                   	cld    
c0024999:	31 c0                	xor    eax,eax
c002499b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002499d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249a2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249a7:	50                   	push   eax
c00249a8:	50                   	push   eax
c00249a9:	6a 00                	push   0x0
c00249ab:	6a 00                	push   0x0
c00249ad:	6a 00                	push   0x0
c00249af:	6a 02                	push   0x2
c00249b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249b5:	50                   	push   eax
c00249b6:	53                   	push   ebx
c00249b7:	e8 ee fc ff ff       	call   c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249bc:	83 c4 14             	add    esp,0x14
c00249bf:	53                   	push   ebx
c00249c0:	e8 a5 ff ff ff       	call   c002496a <ATAPI::diskRemoved()>
c00249c5:	83 c4 24             	add    esp,0x24
c00249c8:	31 c0                	xor    eax,eax
c00249ca:	5b                   	pop    ebx
c00249cb:	5f                   	pop    edi
c00249cc:	c3                   	ret    
c00249cd:	90                   	nop

c00249ce <ATAPI::diskInserted()>:
c00249ce:	53                   	push   ebx
c00249cf:	83 ec 14             	sub    esp,0x14
c00249d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00249d6:	68 d4 cf 02 c0       	push   0xc002cfd4
c00249db:	e8 94 e5 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c00249e0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00249e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249ea:	e8 37 fe fe ff       	call   c0014826 <PhysicalDisk::startCache()>
c00249ef:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00249f3:	83 c4 18             	add    esp,0x18
c00249f6:	5b                   	pop    ebx
c00249f7:	e9 ac 1f ff ff       	jmp    c00169a8 <createPartitionsForDisk(PhysicalDisk*)>

c00249fc <ATAPI::detectMedia()>:
c00249fc:	56                   	push   esi
c00249fd:	53                   	push   ebx
c00249fe:	83 ec 28             	sub    esp,0x28
c0024a01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a05:	6a 0c                	push   0xc
c0024a07:	6a 00                	push   0x0
c0024a09:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a0d:	56                   	push   esi
c0024a0e:	e8 65 bd fd ff       	call   c0000778 <memset>
c0024a13:	58                   	pop    eax
c0024a14:	5a                   	pop    edx
c0024a15:	6a 00                	push   0x0
c0024a17:	6a 00                	push   0x0
c0024a19:	6a 00                	push   0x0
c0024a1b:	6a 00                	push   0x0
c0024a1d:	56                   	push   esi
c0024a1e:	53                   	push   ebx
c0024a1f:	e8 86 fc ff ff       	call   c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a24:	83 c4 1c             	add    esp,0x1c
c0024a27:	6a 0c                	push   0xc
c0024a29:	6a 00                	push   0x0
c0024a2b:	56                   	push   esi
c0024a2c:	e8 47 bd fd ff       	call   c0000778 <memset>
c0024a31:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a36:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a3b:	59                   	pop    ecx
c0024a3c:	58                   	pop    eax
c0024a3d:	6a 01                	push   0x1
c0024a3f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a43:	50                   	push   eax
c0024a44:	6a 00                	push   0x0
c0024a46:	6a 12                	push   0x12
c0024a48:	56                   	push   esi
c0024a49:	53                   	push   ebx
c0024a4a:	e8 5b fc ff ff       	call   c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a4f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a53:	83 c4 20             	add    esp,0x20
c0024a56:	83 e0 7f             	and    eax,0x7f
c0024a59:	3c 70                	cmp    al,0x70
c0024a5b:	74 15                	je     c0024a72 <ATAPI::detectMedia()+0x76>
c0024a5d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a64:	75 0c                	jne    c0024a72 <ATAPI::detectMedia()+0x76>
c0024a66:	83 ec 0c             	sub    esp,0xc
c0024a69:	53                   	push   ebx
c0024a6a:	e8 5f ff ff ff       	call   c00249ce <ATAPI::diskInserted()>
c0024a6f:	83 c4 10             	add    esp,0x10
c0024a72:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024a76:	83 e0 0f             	and    eax,0xf
c0024a79:	3c 02                	cmp    al,0x2
c0024a7b:	75 1b                	jne    c0024a98 <ATAPI::detectMedia()+0x9c>
c0024a7d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024a82:	75 2d                	jne    c0024ab1 <ATAPI::detectMedia()+0xb5>
c0024a84:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a8b:	74 24                	je     c0024ab1 <ATAPI::detectMedia()+0xb5>
c0024a8d:	83 ec 0c             	sub    esp,0xc
c0024a90:	53                   	push   ebx
c0024a91:	e8 d4 fe ff ff       	call   c002496a <ATAPI::diskRemoved()>
c0024a96:	eb 16                	jmp    c0024aae <ATAPI::detectMedia()+0xb2>
c0024a98:	84 c0                	test   al,al
c0024a9a:	75 15                	jne    c0024ab1 <ATAPI::detectMedia()+0xb5>
c0024a9c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024aa3:	75 0c                	jne    c0024ab1 <ATAPI::detectMedia()+0xb5>
c0024aa5:	83 ec 0c             	sub    esp,0xc
c0024aa8:	53                   	push   ebx
c0024aa9:	e8 20 ff ff ff       	call   c00249ce <ATAPI::diskInserted()>
c0024aae:	83 c4 10             	add    esp,0x10
c0024ab1:	83 c4 24             	add    esp,0x24
c0024ab4:	5b                   	pop    ebx
c0024ab5:	5e                   	pop    esi
c0024ab6:	c3                   	ret    
c0024ab7:	90                   	nop

c0024ab8 <ATAPI::open(int, int, void*)>:
c0024ab8:	53                   	push   ebx
c0024ab9:	83 ec 08             	sub    esp,0x8
c0024abc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ac0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ac4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ac8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ace:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024ad4:	c1 e0 06             	shl    eax,0x6
c0024ad7:	01 d0                	add    eax,edx
c0024ad9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024ae0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024ae6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024aed:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024af7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024afd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b04:	6a 04                	push   0x4
c0024b06:	6a 0c                	push   0xc
c0024b08:	51                   	push   ecx
c0024b09:	52                   	push   edx
c0024b0a:	e8 15 e5 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b0f:	90                   	nop
c0024b10:	90                   	nop
c0024b11:	6a 00                	push   0x0
c0024b13:	6a 0c                	push   0xc
c0024b15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b1c:	50                   	push   eax
c0024b1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b23:	e8 fc e4 ff ff       	call   c0023024 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b28:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b2f:	83 c4 14             	add    esp,0x14
c0024b32:	53                   	push   ebx
c0024b33:	e8 c4 fe ff ff       	call   c00249fc <ATAPI::detectMedia()>
c0024b38:	31 c0                	xor    eax,eax
c0024b3a:	83 c4 18             	add    esp,0x18
c0024b3d:	5b                   	pop    ebx
c0024b3e:	c3                   	ret    
c0024b3f:	90                   	nop

c0024b40 <ATAPI::read(unsigned long long, int, void*)>:
c0024b40:	55                   	push   ebp
c0024b41:	57                   	push   edi
c0024b42:	56                   	push   esi
c0024b43:	53                   	push   ebx
c0024b44:	83 ec 1c             	sub    esp,0x1c
c0024b47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b53:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b5a:	74 41                	je     c0024b9d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b5c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b60:	b9 03 00 00 00       	mov    ecx,0x3
c0024b65:	fc                   	cld    
c0024b66:	31 c0                	xor    eax,eax
c0024b68:	86 fb                	xchg   bl,bh
c0024b6a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b6c:	c1 c3 10             	rol    ebx,0x10
c0024b6f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024b74:	89 e8                	mov    eax,ebp
c0024b76:	86 fb                	xchg   bl,bh
c0024b78:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024b7c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024b80:	50                   	push   eax
c0024b81:	50                   	push   eax
c0024b82:	55                   	push   ebp
c0024b83:	c1 e5 0b             	shl    ebp,0xb
c0024b86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024b8a:	6a 00                	push   0x0
c0024b8c:	55                   	push   ebp
c0024b8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024b91:	50                   	push   eax
c0024b92:	56                   	push   esi
c0024b93:	e8 12 fb ff ff       	call   c00246aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024b98:	83 c4 20             	add    esp,0x20
c0024b9b:	eb 1a                	jmp    c0024bb7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024b9d:	83 ec 0c             	sub    esp,0xc
c0024ba0:	56                   	push   esi
c0024ba1:	e8 56 fe ff ff       	call   c00249fc <ATAPI::detectMedia()>
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bb0:	75 aa                	jne    c0024b5c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024bb2:	b8 02 00 00 00       	mov    eax,0x2
c0024bb7:	83 c4 1c             	add    esp,0x1c
c0024bba:	5b                   	pop    ebx
c0024bbb:	5e                   	pop    esi
c0024bbc:	5f                   	pop    edi
c0024bbd:	5d                   	pop    ebp
c0024bbe:	c3                   	ret    
c0024bbf:	90                   	nop

c0024bc0 <SATA::close(int, int, void*)>:
c0024bc0:	83 ec 0c             	sub    esp,0xc
c0024bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bcd:	85 c0                	test   eax,eax
c0024bcf:	74 0c                	je     c0024bdd <SATA::close(int, int, void*)+0x1d>
c0024bd1:	83 ec 0c             	sub    esp,0xc
c0024bd4:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bd6:	50                   	push   eax
c0024bd7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024bda:	83 c4 10             	add    esp,0x10
c0024bdd:	31 c0                	xor    eax,eax
c0024bdf:	83 c4 0c             	add    esp,0xc
c0024be2:	c3                   	ret    
c0024be3:	90                   	nop

c0024be4 <SATA::powerSaving(PowerSavingLevel)>:
c0024be4:	c3                   	ret    
c0024be5:	90                   	nop

c0024be6 <SATA::open(int, int, void*)>:
c0024be6:	56                   	push   esi
c0024be7:	53                   	push   ebx
c0024be8:	50                   	push   eax
c0024be9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024bed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024bf1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024bfb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c01:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c0f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c19:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c1f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c26:	e8 ba b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c2b:	89 c6                	mov    esi,eax
c0024c2d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c33:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c39:	e8 a7 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024c3e:	39 c6                	cmp    esi,eax
c0024c40:	74 10                	je     c0024c52 <SATA::open(int, int, void*)+0x6c>
c0024c42:	83 ec 0c             	sub    esp,0xc
c0024c45:	68 fc ce 02 c0       	push   0xc002cefc
c0024c4a:	e8 d2 59 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0024c4f:	83 c4 10             	add    esp,0x10
c0024c52:	83 ec 0c             	sub    esp,0xc
c0024c55:	6a 02                	push   0x2
c0024c57:	e8 e7 ce fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c0024c5c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c62:	e8 77 d1 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0024c67:	6a 03                	push   0x3
c0024c69:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024c6f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024c75:	50                   	push   eax
c0024c76:	e8 b5 d6 fe ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024c7b:	83 c4 14             	add    esp,0x14
c0024c7e:	53                   	push   ebx
c0024c7f:	e8 a2 fb fe ff       	call   c0014826 <PhysicalDisk::startCache()>
c0024c84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c87:	e8 1c 1d ff ff       	call   c00169a8 <createPartitionsForDisk(PhysicalDisk*)>
c0024c8c:	83 c4 14             	add    esp,0x14
c0024c8f:	31 c0                	xor    eax,eax
c0024c91:	5b                   	pop    ebx
c0024c92:	5e                   	pop    esi
c0024c93:	c3                   	ret    

c0024c94 <SATA::SATA()>:
c0024c94:	83 ec 0c             	sub    esp,0xc
c0024c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c9b:	83 ec 04             	sub    esp,0x4
c0024c9e:	68 00 02 00 00       	push   0x200
c0024ca3:	68 10 cf 02 c0       	push   0xc002cf10
c0024ca8:	50                   	push   eax
c0024ca9:	e8 10 fb fe ff       	call   c00147be <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024cae:	83 c4 10             	add    esp,0x10
c0024cb1:	ba 80 cf 02 c0       	mov    edx,0xc002cf80
c0024cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cba:	89 10                	mov    DWORD PTR [eax],edx
c0024cbc:	90                   	nop
c0024cbd:	83 c4 0c             	add    esp,0xc
c0024cc0:	c3                   	ret    
c0024cc1:	90                   	nop

c0024cc2 <SATA::access(unsigned long long, int, void*, bool)>:
c0024cc2:	55                   	push   ebp
c0024cc3:	57                   	push   edi
c0024cc4:	56                   	push   esi
c0024cc5:	53                   	push   ebx
c0024cc6:	83 ec 2c             	sub    esp,0x2c
c0024cc9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024ccd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024cd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cd5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024cd9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024cdd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024ce2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ce6:	7e 10                	jle    c0024cf8 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024ce8:	83 ec 0c             	sub    esp,0xc
c0024ceb:	68 20 cf 02 c0       	push   0xc002cf20
c0024cf0:	e8 2c 59 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0024cf5:	83 c4 10             	add    esp,0x10
c0024cf8:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024cfe:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d0e:	89 f0                	mov    eax,esi
c0024d10:	c1 e0 07             	shl    eax,0x7
c0024d13:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d17:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d21:	53                   	push   ebx
c0024d22:	8d 46 02             	lea    eax,[esi+0x2]
c0024d25:	53                   	push   ebx
c0024d26:	c1 e0 07             	shl    eax,0x7
c0024d29:	bb 01 00 00 00       	mov    ebx,0x1
c0024d2e:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d32:	50                   	push   eax
c0024d33:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d39:	e8 aa ef ff ff       	call   c0023ce8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d3e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d42:	83 c4 10             	add    esp,0x10
c0024d45:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d4a:	0f 84 ce 01 00 00    	je     c0024f1e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d50:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d54:	c1 e0 09             	shl    eax,0x9
c0024d57:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d60:	74 17                	je     c0024d79 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d62:	51                   	push   ecx
c0024d63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d67:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d6b:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d71:	e8 ce b9 fd ff       	call   c0000744 <memcpy>
c0024d76:	83 c4 10             	add    esp,0x10
c0024d79:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d7f:	8d 46 02             	lea    eax,[esi+0x2]
c0024d82:	c1 e0 07             	shl    eax,0x7
c0024d85:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d8b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d91:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d97:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d9b:	c1 e1 05             	shl    ecx,0x5
c0024d9e:	01 c8                	add    eax,ecx
c0024da0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024da4:	8a 18                	mov    bl,BYTE PTR [eax]
c0024da6:	83 e1 01             	and    ecx,0x1
c0024da9:	83 e3 bf             	and    ebx,0xffffffbf
c0024dac:	c1 e1 06             	shl    ecx,0x6
c0024daf:	09 d9                	or     ecx,ebx
c0024db1:	88 08                	mov    BYTE PTR [eax],cl
c0024db3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024db5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024dbb:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024dc1:	89 08                	mov    DWORD PTR [eax],ecx
c0024dc3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dc9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024dcf:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024dd5:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024dd8:	52                   	push   edx
c0024dd9:	68 90 00 00 00       	push   0x90
c0024dde:	6a 00                	push   0x0
c0024de0:	53                   	push   ebx
c0024de1:	e8 92 b9 fd ff       	call   c0000778 <memset>
c0024de6:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024dec:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024df0:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024df6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dfa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024dfe:	83 c4 10             	add    esp,0x10
c0024e01:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e04:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e0a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e10:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e15:	09 c8                	or     eax,ecx
c0024e17:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e1d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e20:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e27:	66 25 00 7f          	and    ax,0x7f00
c0024e2b:	66 0d 27 80          	or     ax,0x8027
c0024e2f:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e34:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e37:	19 c0                	sbb    eax,eax
c0024e39:	83 e0 f0             	and    eax,0xfffffff0
c0024e3c:	83 c0 35             	add    eax,0x35
c0024e3f:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e42:	89 f8                	mov    eax,edi
c0024e44:	c1 e8 10             	shr    eax,0x10
c0024e47:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e4a:	89 f8                	mov    eax,edi
c0024e4c:	c1 e8 18             	shr    eax,0x18
c0024e4f:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e52:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e56:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e5d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e60:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e64:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e68:	89 f3                	mov    ebx,esi
c0024e6a:	31 c0                	xor    eax,eax
c0024e6c:	c1 e3 07             	shl    ebx,0x7
c0024e6f:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024e73:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024e79:	80 e1 88             	and    cl,0x88
c0024e7c:	74 0a                	je     c0024e88 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024e7e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e83:	74 0a                	je     c0024e8f <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024e85:	40                   	inc    eax
c0024e86:	eb eb                	jmp    c0024e73 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024e88:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e8d:	75 0a                	jne    c0024e99 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024e8f:	83 ec 0c             	sub    esp,0xc
c0024e92:	68 59 cf 02 c0       	push   0xc002cf59
c0024e97:	eb 56                	jmp    c0024eef <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024e99:	b8 01 00 00 00       	mov    eax,0x1
c0024e9e:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ea2:	c1 e6 07             	shl    esi,0x7
c0024ea5:	d3 e0                	shl    eax,cl
c0024ea7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024eab:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024eb1:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024eb7:	85 c8                	test   eax,ecx
c0024eb9:	74 20                	je     c0024edb <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ebb:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ec1:	0f ba e1 1e          	bt     ecx,0x1e
c0024ec5:	73 ea                	jae    c0024eb1 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ec7:	83 ec 0c             	sub    esp,0xc
c0024eca:	31 db                	xor    ebx,ebx
c0024ecc:	68 67 cf 02 c0       	push   0xc002cf67
c0024ed1:	e8 4b 57 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0024ed6:	83 c4 10             	add    esp,0x10
c0024ed9:	eb 43                	jmp    c0024f1e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024edb:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024ee1:	0f ba e0 1e          	bt     eax,0x1e
c0024ee5:	73 17                	jae    c0024efe <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ee7:	83 ec 0c             	sub    esp,0xc
c0024eea:	68 67 cf 02 c0       	push   0xc002cf67
c0024eef:	e8 2d 57 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0024ef4:	bb 01 00 00 00       	mov    ebx,0x1
c0024ef9:	83 c4 10             	add    esp,0x10
c0024efc:	eb 20                	jmp    c0024f1e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024efe:	31 db                	xor    ebx,ebx
c0024f00:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f05:	75 17                	jne    c0024f1e <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f07:	50                   	push   eax
c0024f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f0c:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f12:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f16:	e8 29 b8 fd ff       	call   c0000744 <memcpy>
c0024f1b:	83 c4 10             	add    esp,0x10
c0024f1e:	83 c4 2c             	add    esp,0x2c
c0024f21:	89 d8                	mov    eax,ebx
c0024f23:	5b                   	pop    ebx
c0024f24:	5e                   	pop    esi
c0024f25:	5f                   	pop    edi
c0024f26:	5d                   	pop    ebp
c0024f27:	c3                   	ret    

c0024f28 <SATA::read(unsigned long long, int, void*)>:
c0024f28:	57                   	push   edi
c0024f29:	b8 04 00 00 00       	mov    eax,0x4
c0024f2e:	56                   	push   esi
c0024f2f:	53                   	push   ebx
c0024f30:	83 ec 10             	sub    esp,0x10
c0024f33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f3b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f3e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f46:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f4c:	77 3b                	ja     c0024f89 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f4e:	b8 06 00 00 00       	mov    eax,0x6
c0024f53:	85 d2                	test   edx,edx
c0024f55:	74 32                	je     c0024f89 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f57:	50                   	push   eax
c0024f58:	50                   	push   eax
c0024f59:	6a 00                	push   0x0
c0024f5b:	52                   	push   edx
c0024f5c:	53                   	push   ebx
c0024f5d:	57                   	push   edi
c0024f5e:	56                   	push   esi
c0024f5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f63:	e8 5a fd ff ff       	call   c0024cc2 <SATA::access(unsigned long long, int, void*, bool)>
c0024f68:	83 c4 20             	add    esp,0x20
c0024f6b:	85 c0                	test   eax,eax
c0024f6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f71:	75 11                	jne    c0024f84 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024f73:	01 1d 08 28 03 c0    	add    DWORD PTR ds:0xc0032808,ebx
c0024f79:	e8 1a ba fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c0024f7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f82:	eb 05                	jmp    c0024f89 <SATA::read(unsigned long long, int, void*)+0x61>
c0024f84:	b8 01 00 00 00       	mov    eax,0x1
c0024f89:	83 c4 10             	add    esp,0x10
c0024f8c:	5b                   	pop    ebx
c0024f8d:	5e                   	pop    esi
c0024f8e:	5f                   	pop    edi
c0024f8f:	c3                   	ret    

c0024f90 <SATA::write(unsigned long long, int, void*)>:
c0024f90:	55                   	push   ebp
c0024f91:	b8 04 00 00 00       	mov    eax,0x4
c0024f96:	57                   	push   edi
c0024f97:	56                   	push   esi
c0024f98:	53                   	push   ebx
c0024f99:	83 ec 1c             	sub    esp,0x1c
c0024f9c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fa0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fa4:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024faf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fb5:	77 56                	ja     c002500d <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fb7:	b8 06 00 00 00       	mov    eax,0x6
c0024fbc:	85 ff                	test   edi,edi
c0024fbe:	74 4d                	je     c002500d <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fc0:	89 ee                	mov    esi,ebp
c0024fc2:	c1 e6 09             	shl    esi,0x9
c0024fc5:	01 fe                	add    esi,edi
c0024fc7:	89 c8                	mov    eax,ecx
c0024fc9:	89 da                	mov    edx,ebx
c0024fcb:	83 c0 01             	add    eax,0x1
c0024fce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024fd2:	83 d2 00             	adc    edx,0x0
c0024fd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024fd9:	50                   	push   eax
c0024fda:	50                   	push   eax
c0024fdb:	6a 01                	push   0x1
c0024fdd:	57                   	push   edi
c0024fde:	81 c7 00 02 00 00    	add    edi,0x200
c0024fe4:	6a 01                	push   0x1
c0024fe6:	53                   	push   ebx
c0024fe7:	51                   	push   ecx
c0024fe8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024fec:	e8 d1 fc ff ff       	call   c0024cc2 <SATA::access(unsigned long long, int, void*, bool)>
c0024ff1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024ff5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ff9:	83 c4 20             	add    esp,0x20
c0024ffc:	39 f7                	cmp    edi,esi
c0024ffe:	75 c7                	jne    c0024fc7 <SATA::write(unsigned long long, int, void*)+0x37>
c0025000:	01 2d 04 28 03 c0    	add    DWORD PTR ds:0xc0032804,ebp
c0025006:	e8 8d b9 fe ff       	call   c0010998 <VgaText::updateDiskUsage()>
c002500b:	31 c0                	xor    eax,eax
c002500d:	83 c4 1c             	add    esp,0x1c
c0025010:	5b                   	pop    ebx
c0025011:	5e                   	pop    esi
c0025012:	5f                   	pop    edi
c0025013:	5d                   	pop    ebp
c0025014:	c3                   	ret    
c0025015:	90                   	nop

c0025016 <SATAPI::write(unsigned long long, int, void*)>:
c0025016:	b8 03 00 00 00       	mov    eax,0x3
c002501b:	c3                   	ret    

c002501c <SATAPI::close(int, int, void*)>:
c002501c:	83 ec 0c             	sub    esp,0xc
c002501f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025023:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025029:	85 c0                	test   eax,eax
c002502b:	74 0c                	je     c0025039 <SATAPI::close(int, int, void*)+0x1d>
c002502d:	83 ec 0c             	sub    esp,0xc
c0025030:	8b 10                	mov    edx,DWORD PTR [eax]
c0025032:	50                   	push   eax
c0025033:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025036:	83 c4 10             	add    esp,0x10
c0025039:	31 c0                	xor    eax,eax
c002503b:	83 c4 0c             	add    esp,0xc
c002503e:	c3                   	ret    
c002503f:	90                   	nop

c0025040 <SATAPI::SATAPI()>:
c0025040:	83 ec 0c             	sub    esp,0xc
c0025043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025047:	83 ec 04             	sub    esp,0x4
c002504a:	68 00 08 00 00       	push   0x800
c002504f:	68 b0 cf 02 c0       	push   0xc002cfb0
c0025054:	50                   	push   eax
c0025055:	e8 64 f7 fe ff       	call   c00147be <PhysicalDisk::PhysicalDisk(char const*, int)>
c002505a:	83 c4 10             	add    esp,0x10
c002505d:	ba 5c d0 02 c0       	mov    edx,0xc002d05c
c0025062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025066:	89 10                	mov    DWORD PTR [eax],edx
c0025068:	90                   	nop
c0025069:	83 c4 0c             	add    esp,0xc
c002506c:	c3                   	ret    
c002506d:	90                   	nop

c002506e <SATAPI::diskRemoved()>:
c002506e:	83 ec 18             	sub    esp,0x18
c0025071:	68 bc cf 02 c0       	push   0xc002cfbc
c0025076:	e8 f9 de fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c002507b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002507f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025086:	83 c4 1c             	add    esp,0x1c
c0025089:	c3                   	ret    

c002508a <SATAPI::diskInserted()>:
c002508a:	53                   	push   ebx
c002508b:	83 ec 14             	sub    esp,0x14
c002508e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025092:	68 d3 cf 02 c0       	push   0xc002cfd3
c0025097:	e8 d8 de fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c002509c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250a6:	e8 7b f7 fe ff       	call   c0014826 <PhysicalDisk::startCache()>
c00250ab:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250af:	83 c4 18             	add    esp,0x18
c00250b2:	5b                   	pop    ebx
c00250b3:	e9 f0 18 ff ff       	jmp    c00169a8 <createPartitionsForDisk(PhysicalDisk*)>

c00250b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250b8:	55                   	push   ebp
c00250b9:	57                   	push   edi
c00250ba:	56                   	push   esi
c00250bb:	53                   	push   ebx
c00250bc:	83 ec 24             	sub    esp,0x24
c00250bf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250c7:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00250d1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00250d5:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c00250db:	8d 5f 02             	lea    ebx,[edi+0x2]
c00250de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00250e4:	c1 e3 07             	shl    ebx,0x7
c00250e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00250eb:	89 f8                	mov    eax,edi
c00250ed:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00250f1:	c1 e0 07             	shl    eax,0x7
c00250f4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00250f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00250fc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025106:	53                   	push   ebx
c0025107:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002510d:	e8 d6 eb ff ff       	call   c0023ce8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025116:	83 c4 10             	add    esp,0x10
c0025119:	b8 01 00 00 00       	mov    eax,0x1
c002511e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025123:	0f 84 8a 01 00 00    	je     c00252b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025129:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002512f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025131:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025137:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002513d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025141:	c1 e1 05             	shl    ecx,0x5
c0025144:	01 c8                	add    eax,ecx
c0025146:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025148:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002514e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025154:	89 08                	mov    DWORD PTR [eax],ecx
c0025156:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002515c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025162:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025168:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002516b:	52                   	push   edx
c002516c:	68 90 00 00 00       	push   0x90
c0025171:	6a 00                	push   0x0
c0025173:	53                   	push   ebx
c0025174:	e8 ff b5 fd ff       	call   c0000778 <memset>
c0025179:	83 c4 0c             	add    esp,0xc
c002517c:	8d 43 40             	lea    eax,[ebx+0x40]
c002517f:	6a 0c                	push   0xc
c0025181:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025185:	50                   	push   eax
c0025186:	e8 b9 b5 fd ff       	call   c0000744 <memcpy>
c002518b:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0025191:	89 ea                	mov    edx,ebp
c0025193:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025199:	c1 ea 18             	shr    edx,0x18
c002519c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251a0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251a3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251a6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251aa:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251b0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251b6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251bb:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251bf:	09 c8                	or     eax,ecx
c00251c1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251c5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251cb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00251ce:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00251d5:	66 25 00 7f          	and    ax,0x7f00
c00251d9:	66 0d 27 80          	or     ax,0x8027
c00251dd:	66 89 03             	mov    WORD PTR [ebx],ax
c00251e0:	89 e8                	mov    eax,ebp
c00251e2:	c1 e8 10             	shr    eax,0x10
c00251e5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00251e8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00251ec:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00251ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251f3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00251f6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00251fa:	83 c4 10             	add    esp,0x10
c00251fd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025201:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025205:	31 c0                	xor    eax,eax
c0025207:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002520d:	80 e1 88             	and    cl,0x88
c0025210:	74 0a                	je     c002521c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025212:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025217:	74 0a                	je     c0025223 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025219:	40                   	inc    eax
c002521a:	eb eb                	jmp    c0025207 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002521c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025221:	75 0f                	jne    c0025232 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025223:	83 ec 0c             	sub    esp,0xc
c0025226:	68 59 cf 02 c0       	push   0xc002cf59
c002522b:	e8 f1 53 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0025230:	eb 3a                	jmp    c002526c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025232:	b8 01 00 00 00       	mov    eax,0x1
c0025237:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002523b:	c1 e7 07             	shl    edi,0x7
c002523e:	d3 e0                	shl    eax,cl
c0025240:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025243:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025249:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c002524f:	85 d0                	test   eax,edx
c0025251:	74 23                	je     c0025276 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025253:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025259:	0f ba e2 1e          	bt     edx,0x1e
c002525d:	73 ea                	jae    c0025249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c002525f:	83 ec 0c             	sub    esp,0xc
c0025262:	68 eb cf 02 c0       	push   0xc002cfeb
c0025267:	e8 08 dd fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c002526c:	83 c4 10             	add    esp,0x10
c002526f:	b8 01 00 00 00       	mov    eax,0x1
c0025274:	eb 3d                	jmp    c00252b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025276:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002527c:	0f ba e0 1e          	bt     eax,0x1e
c0025280:	73 0a                	jae    c002528c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025282:	83 ec 0c             	sub    esp,0xc
c0025285:	68 fe cf 02 c0       	push   0xc002cffe
c002528a:	eb db                	jmp    c0025267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002528c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025291:	74 1e                	je     c00252b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025293:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025298:	74 17                	je     c00252b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002529a:	50                   	push   eax
c002529b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002529f:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252a5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252a9:	e8 96 b4 fd ff       	call   c0000744 <memcpy>
c00252ae:	83 c4 10             	add    esp,0x10
c00252b1:	31 c0                	xor    eax,eax
c00252b3:	83 c4 1c             	add    esp,0x1c
c00252b6:	5b                   	pop    ebx
c00252b7:	5e                   	pop    esi
c00252b8:	5f                   	pop    edi
c00252b9:	5d                   	pop    ebp
c00252ba:	c3                   	ret    
c00252bb:	90                   	nop

c00252bc <SATAPI::eject()>:
c00252bc:	57                   	push   edi
c00252bd:	b9 03 00 00 00       	mov    ecx,0x3
c00252c2:	53                   	push   ebx
c00252c3:	83 ec 14             	sub    esp,0x14
c00252c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252ca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252ce:	fc                   	cld    
c00252cf:	31 c0                	xor    eax,eax
c00252d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252d3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252d8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252dd:	50                   	push   eax
c00252de:	6a 00                	push   0x0
c00252e0:	6a 00                	push   0x0
c00252e2:	6a 00                	push   0x0
c00252e4:	6a 00                	push   0x0
c00252e6:	6a 02                	push   0x2
c00252e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252ec:	50                   	push   eax
c00252ed:	53                   	push   ebx
c00252ee:	e8 c5 fd ff ff       	call   c00250b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252f3:	83 c4 14             	add    esp,0x14
c00252f6:	53                   	push   ebx
c00252f7:	e8 72 fd ff ff       	call   c002506e <SATAPI::diskRemoved()>
c00252fc:	83 c4 24             	add    esp,0x24
c00252ff:	31 c0                	xor    eax,eax
c0025301:	5b                   	pop    ebx
c0025302:	5f                   	pop    edi
c0025303:	c3                   	ret    

c0025304 <SATAPI::detectMedia()>:
c0025304:	56                   	push   esi
c0025305:	53                   	push   ebx
c0025306:	83 ec 28             	sub    esp,0x28
c0025309:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002530d:	6a 0c                	push   0xc
c002530f:	6a 00                	push   0x0
c0025311:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025315:	56                   	push   esi
c0025316:	e8 5d b4 fd ff       	call   c0000778 <memset>
c002531b:	83 c4 0c             	add    esp,0xc
c002531e:	6a 00                	push   0x0
c0025320:	6a 00                	push   0x0
c0025322:	6a 00                	push   0x0
c0025324:	6a 00                	push   0x0
c0025326:	6a 00                	push   0x0
c0025328:	56                   	push   esi
c0025329:	53                   	push   ebx
c002532a:	e8 89 fd ff ff       	call   c00250b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002532f:	83 c4 1c             	add    esp,0x1c
c0025332:	6a 0c                	push   0xc
c0025334:	6a 00                	push   0x0
c0025336:	56                   	push   esi
c0025337:	e8 3c b4 fd ff       	call   c0000778 <memset>
c002533c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025341:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025346:	83 c4 0c             	add    esp,0xc
c0025349:	6a 01                	push   0x1
c002534b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002534f:	50                   	push   eax
c0025350:	6a 00                	push   0x0
c0025352:	6a 00                	push   0x0
c0025354:	6a 12                	push   0x12
c0025356:	56                   	push   esi
c0025357:	53                   	push   ebx
c0025358:	e8 5b fd ff ff       	call   c00250b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002535d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025361:	83 c4 20             	add    esp,0x20
c0025364:	83 e0 7f             	and    eax,0x7f
c0025367:	3c 70                	cmp    al,0x70
c0025369:	74 15                	je     c0025380 <SATAPI::detectMedia()+0x7c>
c002536b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025372:	75 0c                	jne    c0025380 <SATAPI::detectMedia()+0x7c>
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	53                   	push   ebx
c0025378:	e8 0d fd ff ff       	call   c002508a <SATAPI::diskInserted()>
c002537d:	83 c4 10             	add    esp,0x10
c0025380:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025384:	83 e0 0f             	and    eax,0xf
c0025387:	3c 02                	cmp    al,0x2
c0025389:	75 1b                	jne    c00253a6 <SATAPI::detectMedia()+0xa2>
c002538b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025390:	75 2d                	jne    c00253bf <SATAPI::detectMedia()+0xbb>
c0025392:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025399:	74 24                	je     c00253bf <SATAPI::detectMedia()+0xbb>
c002539b:	83 ec 0c             	sub    esp,0xc
c002539e:	53                   	push   ebx
c002539f:	e8 ca fc ff ff       	call   c002506e <SATAPI::diskRemoved()>
c00253a4:	eb 16                	jmp    c00253bc <SATAPI::detectMedia()+0xb8>
c00253a6:	84 c0                	test   al,al
c00253a8:	75 15                	jne    c00253bf <SATAPI::detectMedia()+0xbb>
c00253aa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253b1:	75 0c                	jne    c00253bf <SATAPI::detectMedia()+0xbb>
c00253b3:	83 ec 0c             	sub    esp,0xc
c00253b6:	53                   	push   ebx
c00253b7:	e8 ce fc ff ff       	call   c002508a <SATAPI::diskInserted()>
c00253bc:	83 c4 10             	add    esp,0x10
c00253bf:	83 c4 24             	add    esp,0x24
c00253c2:	5b                   	pop    ebx
c00253c3:	5e                   	pop    esi
c00253c4:	c3                   	ret    
c00253c5:	90                   	nop

c00253c6 <SATAPI::open(int, int, void*)>:
c00253c6:	56                   	push   esi
c00253c7:	53                   	push   ebx
c00253c8:	50                   	push   eax
c00253c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253d1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253db:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ef:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00253f9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253ff:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025406:	e8 da aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c002540b:	89 c6                	mov    esi,eax
c002540d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025413:	81 c6 00 10 00 00    	add    esi,0x1000
c0025419:	e8 c7 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c002541e:	39 c6                	cmp    esi,eax
c0025420:	74 10                	je     c0025432 <SATAPI::open(int, int, void*)+0x6c>
c0025422:	83 ec 0c             	sub    esp,0xc
c0025425:	68 13 d0 02 c0       	push   0xc002d013
c002542a:	e8 f2 51 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c002542f:	83 c4 10             	add    esp,0x10
c0025432:	83 ec 0c             	sub    esp,0xc
c0025435:	6a 02                	push   0x2
c0025437:	e8 07 c7 fe ff       	call   c0011b43 <Virt::allocateKernelVirtualPages(int)>
c002543c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025442:	e8 97 c9 fe ff       	call   c0011dde <Virt::getAKernelVAS()>
c0025447:	6a 03                	push   0x3
c0025449:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002544f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025455:	50                   	push   eax
c0025456:	e8 d5 ce fe ff       	call   c0012330 <VAS::mapPage(unsigned long, unsigned long, int)>
c002545b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025462:	83 c4 14             	add    esp,0x14
c0025465:	53                   	push   ebx
c0025466:	e8 99 fe ff ff       	call   c0025304 <SATAPI::detectMedia()>
c002546b:	83 c4 14             	add    esp,0x14
c002546e:	31 c0                	xor    eax,eax
c0025470:	5b                   	pop    ebx
c0025471:	5e                   	pop    esi
c0025472:	c3                   	ret    
c0025473:	90                   	nop

c0025474 <SATAPI::read(unsigned long long, int, void*)>:
c0025474:	55                   	push   ebp
c0025475:	57                   	push   edi
c0025476:	56                   	push   esi
c0025477:	53                   	push   ebx
c0025478:	83 ec 1c             	sub    esp,0x1c
c002547b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002547f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025483:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025487:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002548e:	74 19                	je     c00254a9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025490:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025495:	7e 2e                	jle    c00254c5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025497:	83 ec 0c             	sub    esp,0xc
c002549a:	68 29 d0 02 c0       	push   0xc002d029
c002549f:	e8 7d 51 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c00254a4:	83 c4 10             	add    esp,0x10
c00254a7:	eb 1c                	jmp    c00254c5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254a9:	83 ec 0c             	sub    esp,0xc
c00254ac:	55                   	push   ebp
c00254ad:	e8 52 fe ff ff       	call   c0025304 <SATAPI::detectMedia()>
c00254b2:	83 c4 10             	add    esp,0x10
c00254b5:	b8 02 00 00 00       	mov    eax,0x2
c00254ba:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254c1:	75 cd                	jne    c0025490 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254c3:	eb 49                	jmp    c002550e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254c5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254c9:	b9 03 00 00 00       	mov    ecx,0x3
c00254ce:	fc                   	cld    
c00254cf:	31 c0                	xor    eax,eax
c00254d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254d3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254d8:	89 d8                	mov    eax,ebx
c00254da:	86 e0                	xchg   al,ah
c00254dc:	c1 c0 10             	rol    eax,0x10
c00254df:	86 e0                	xchg   al,ah
c00254e1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00254e5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00254e9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254ed:	50                   	push   eax
c00254ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254f6:	56                   	push   esi
c00254f7:	53                   	push   ebx
c00254f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00254fc:	c1 e0 0b             	shl    eax,0xb
c00254ff:	50                   	push   eax
c0025500:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025504:	50                   	push   eax
c0025505:	55                   	push   ebp
c0025506:	e8 ad fb ff ff       	call   c00250b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002550b:	83 c4 20             	add    esp,0x20
c002550e:	83 c4 1c             	add    esp,0x1c
c0025511:	5b                   	pop    ebx
c0025512:	5e                   	pop    esi
c0025513:	5f                   	pop    edi
c0025514:	5d                   	pop    ebp
c0025515:	c3                   	ret    

c0025516 <AVX::open(int, int, void*)>:
c0025516:	83 ec 0c             	sub    esp,0xc
c0025519:	e8 3a 11 00 00       	call   c0026658 <avxInit>
c002551e:	b8 00 00 00 00       	mov    eax,0x0
c0025523:	83 c4 0c             	add    esp,0xc
c0025526:	c3                   	ret    
c0025527:	90                   	nop

c0025528 <AVX::close(int, int, void*)>:
c0025528:	83 ec 0c             	sub    esp,0xc
c002552b:	e8 29 11 00 00       	call   c0026659 <avxClose>
c0025530:	b8 00 00 00 00       	mov    eax,0x0
c0025535:	83 c4 0c             	add    esp,0xc
c0025538:	c3                   	ret    
c0025539:	90                   	nop

c002553a <AVX::available()>:
c002553a:	83 ec 0c             	sub    esp,0xc
c002553d:	e8 0e 11 00 00       	call   c0026650 <avxDetect>
c0025542:	85 c0                	test   eax,eax
c0025544:	0f 95 c0             	setne  al
c0025547:	83 c4 0c             	add    esp,0xc
c002554a:	c3                   	ret    
c002554b:	90                   	nop

c002554c <AVX::save(void*)>:
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025553:	83 ec 0c             	sub    esp,0xc
c0025556:	50                   	push   eax
c0025557:	e8 fa 10 00 00       	call   c0026656 <avxSave>
c002555c:	83 c4 10             	add    esp,0x10
c002555f:	90                   	nop
c0025560:	83 c4 0c             	add    esp,0xc
c0025563:	c3                   	ret    

c0025564 <AVX::load(void*)>:
c0025564:	83 ec 0c             	sub    esp,0xc
c0025567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002556b:	83 ec 0c             	sub    esp,0xc
c002556e:	50                   	push   eax
c002556f:	e8 e3 10 00 00       	call   c0026657 <avxLoad>
c0025574:	83 c4 10             	add    esp,0x10
c0025577:	90                   	nop
c0025578:	83 c4 0c             	add    esp,0xc
c002557b:	c3                   	ret    

c002557c <AVX::AVX()>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	83 ec 08             	sub    esp,0x8
c0025586:	68 8c d0 02 c0       	push   0xc002d08c
c002558b:	50                   	push   eax
c002558c:	e8 0b f3 fe ff       	call   c001489c <FPU::FPU(char const*)>
c0025591:	83 c4 10             	add    esp,0x10
c0025594:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c0025599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559d:	89 10                	mov    DWORD PTR [eax],edx
c002559f:	90                   	nop
c00255a0:	83 c4 0c             	add    esp,0xc
c00255a3:	c3                   	ret    

c00255a4 <MMX::available()>:
c00255a4:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00255a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255af:	83 e0 20             	and    eax,0x20
c00255b2:	84 c0                	test   al,al
c00255b4:	0f 95 c0             	setne  al
c00255b7:	c3                   	ret    

c00255b8 <MMX::open(int, int, void*)>:
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	e8 1c 11 00 00       	call   c00266dc <x87Init>
c00255c0:	b8 00 00 00 00       	mov    eax,0x0
c00255c5:	83 c4 0c             	add    esp,0xc
c00255c8:	c3                   	ret    
c00255c9:	90                   	nop

c00255ca <MMX::close(int, int, void*)>:
c00255ca:	83 ec 0c             	sub    esp,0xc
c00255cd:	e8 24 11 00 00       	call   c00266f6 <x87Close>
c00255d2:	b8 00 00 00 00       	mov    eax,0x0
c00255d7:	83 c4 0c             	add    esp,0xc
c00255da:	c3                   	ret    
c00255db:	90                   	nop

c00255dc <MMX::save(void*)>:
c00255dc:	83 ec 0c             	sub    esp,0xc
c00255df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255e3:	83 ec 0c             	sub    esp,0xc
c00255e6:	50                   	push   eax
c00255e7:	e8 e5 10 00 00       	call   c00266d1 <x87Save>
c00255ec:	83 c4 10             	add    esp,0x10
c00255ef:	90                   	nop
c00255f0:	83 c4 0c             	add    esp,0xc
c00255f3:	c3                   	ret    

c00255f4 <MMX::load(void*)>:
c00255f4:	83 ec 0c             	sub    esp,0xc
c00255f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255fb:	83 ec 0c             	sub    esp,0xc
c00255fe:	50                   	push   eax
c00255ff:	e8 d3 10 00 00       	call   c00266d7 <x87Load>
c0025604:	83 c4 10             	add    esp,0x10
c0025607:	90                   	nop
c0025608:	83 c4 0c             	add    esp,0xc
c002560b:	c3                   	ret    

c002560c <MMX::MMX()>:
c002560c:	83 ec 0c             	sub    esp,0xc
c002560f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025613:	83 ec 08             	sub    esp,0x8
c0025616:	68 cc d0 02 c0       	push   0xc002d0cc
c002561b:	50                   	push   eax
c002561c:	e8 7b f2 fe ff       	call   c001489c <FPU::FPU(char const*)>
c0025621:	83 c4 10             	add    esp,0x10
c0025624:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0025629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562d:	89 10                	mov    DWORD PTR [eax],edx
c002562f:	90                   	nop
c0025630:	83 c4 0c             	add    esp,0xc
c0025633:	c3                   	ret    

c0025634 <SSE::open(int, int, void*)>:
c0025634:	83 ec 0c             	sub    esp,0xc
c0025637:	e8 58 10 00 00       	call   c0026694 <sseInit>
c002563c:	b8 00 00 00 00       	mov    eax,0x0
c0025641:	83 c4 0c             	add    esp,0xc
c0025644:	c3                   	ret    
c0025645:	90                   	nop

c0025646 <SSE::close(int, int, void*)>:
c0025646:	83 ec 0c             	sub    esp,0xc
c0025649:	e8 56 10 00 00       	call   c00266a4 <sseClose>
c002564e:	b8 00 00 00 00       	mov    eax,0x0
c0025653:	83 c4 0c             	add    esp,0xc
c0025656:	c3                   	ret    
c0025657:	90                   	nop

c0025658 <SSE::available()>:
c0025658:	83 ec 1c             	sub    esp,0x1c
c002565b:	e8 10 10 00 00       	call   c0026670 <absolutelyNoChanceInHell>
c0025660:	85 c0                	test   eax,eax
c0025662:	0f 95 c0             	setne  al
c0025665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025669:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002566d:	83 c4 1c             	add    esp,0x1c
c0025670:	c3                   	ret    
c0025671:	90                   	nop

c0025672 <SSE::save(void*)>:
c0025672:	83 ec 0c             	sub    esp,0xc
c0025675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025679:	83 ec 0c             	sub    esp,0xc
c002567c:	50                   	push   eax
c002567d:	e8 06 10 00 00       	call   c0026688 <sseSave>
c0025682:	83 c4 10             	add    esp,0x10
c0025685:	90                   	nop
c0025686:	83 c4 0c             	add    esp,0xc
c0025689:	c3                   	ret    

c002568a <SSE::load(void*)>:
c002568a:	83 ec 0c             	sub    esp,0xc
c002568d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025691:	83 ec 0c             	sub    esp,0xc
c0025694:	50                   	push   eax
c0025695:	e8 f4 0f 00 00       	call   c002668e <sseLoad>
c002569a:	83 c4 10             	add    esp,0x10
c002569d:	90                   	nop
c002569e:	83 c4 0c             	add    esp,0xc
c00256a1:	c3                   	ret    

c00256a2 <SSE::SSE()>:
c00256a2:	83 ec 0c             	sub    esp,0xc
c00256a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a9:	83 ec 08             	sub    esp,0x8
c00256ac:	68 0c d1 02 c0       	push   0xc002d10c
c00256b1:	50                   	push   eax
c00256b2:	e8 e5 f1 fe ff       	call   c001489c <FPU::FPU(char const*)>
c00256b7:	83 c4 10             	add    esp,0x10
c00256ba:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c00256bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256c3:	89 10                	mov    DWORD PTR [eax],edx
c00256c5:	90                   	nop
c00256c6:	83 c4 0c             	add    esp,0xc
c00256c9:	c3                   	ret    

c00256ca <x87::open(int, int, void*)>:
c00256ca:	83 ec 0c             	sub    esp,0xc
c00256cd:	e8 0a 10 00 00       	call   c00266dc <x87Init>
c00256d2:	b8 00 00 00 00       	mov    eax,0x0
c00256d7:	83 c4 0c             	add    esp,0xc
c00256da:	c3                   	ret    
c00256db:	90                   	nop

c00256dc <x87::close(int, int, void*)>:
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	e8 12 10 00 00       	call   c00266f6 <x87Close>
c00256e4:	b8 00 00 00 00       	mov    eax,0x0
c00256e9:	83 c4 0c             	add    esp,0xc
c00256ec:	c3                   	ret    
c00256ed:	90                   	nop

c00256ee <x87::available()>:
c00256ee:	83 ec 0c             	sub    esp,0xc
c00256f1:	e8 c0 0f 00 00       	call   c00266b6 <x87Detect>
c00256f6:	85 c0                	test   eax,eax
c00256f8:	0f 95 c0             	setne  al
c00256fb:	83 c4 0c             	add    esp,0xc
c00256fe:	c3                   	ret    
c00256ff:	90                   	nop

c0025700 <x87::save(void*)>:
c0025700:	83 ec 0c             	sub    esp,0xc
c0025703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025707:	83 ec 0c             	sub    esp,0xc
c002570a:	50                   	push   eax
c002570b:	e8 c1 0f 00 00       	call   c00266d1 <x87Save>
c0025710:	83 c4 10             	add    esp,0x10
c0025713:	90                   	nop
c0025714:	83 c4 0c             	add    esp,0xc
c0025717:	c3                   	ret    

c0025718 <x87::load(void*)>:
c0025718:	83 ec 0c             	sub    esp,0xc
c002571b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002571f:	83 ec 0c             	sub    esp,0xc
c0025722:	50                   	push   eax
c0025723:	e8 af 0f 00 00       	call   c00266d7 <x87Load>
c0025728:	83 c4 10             	add    esp,0x10
c002572b:	90                   	nop
c002572c:	83 c4 0c             	add    esp,0xc
c002572f:	c3                   	ret    

c0025730 <x87::x87()>:
c0025730:	83 ec 0c             	sub    esp,0xc
c0025733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025737:	83 ec 08             	sub    esp,0x8
c002573a:	68 4c d1 02 c0       	push   0xc002d14c
c002573f:	50                   	push   eax
c0025740:	e8 57 f1 fe ff       	call   c001489c <FPU::FPU(char const*)>
c0025745:	83 c4 10             	add    esp,0x10
c0025748:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c002574d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025751:	89 10                	mov    DWORD PTR [eax],edx
c0025753:	90                   	nop
c0025754:	83 c4 0c             	add    esp,0xc
c0025757:	c3                   	ret    

c0025758 <APIC::disable()>:
c0025758:	90                   	nop
c0025759:	c3                   	ret    

c002575a <APIC::close(int, int, void*)>:
c002575a:	55                   	push   ebp
c002575b:	89 e5                	mov    ebp,esp
c002575d:	83 ec 08             	sub    esp,0x8
c0025760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025763:	8b 00                	mov    eax,DWORD PTR [eax]
c0025765:	83 c0 3c             	add    eax,0x3c
c0025768:	8b 00                	mov    eax,DWORD PTR [eax]
c002576a:	83 ec 0c             	sub    esp,0xc
c002576d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025770:	ff d0                	call   eax
c0025772:	83 c4 10             	add    esp,0x10
c0025775:	b8 00 00 00 00       	mov    eax,0x0
c002577a:	c9                   	leave  
c002577b:	c3                   	ret    

c002577c <IOAPIC::close(int, int, void*)>:
c002577c:	b8 00 00 00 00       	mov    eax,0x0
c0025781:	c3                   	ret    

c0025782 <APIC::io_wait()>:
c0025782:	eb 00                	jmp    c0025784 <APIC::io_wait()+0x2>
c0025784:	eb 00                	jmp    c0025786 <APIC::io_wait()+0x4>
c0025786:	90                   	nop
c0025787:	c3                   	ret    

c0025788 <APIC::getBase()>:
c0025788:	55                   	push   ebp
c0025789:	89 e5                	mov    ebp,esp
c002578b:	83 ec 18             	sub    esp,0x18
c002578e:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0025793:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025799:	83 e0 08             	and    eax,0x8
c002579c:	84 c0                	test   al,al
c002579e:	75 07                	jne    c00257a7 <APIC::getBase()+0x1f>
c00257a0:	b8 00 00 00 00       	mov    eax,0x0
c00257a5:	eb 21                	jmp    c00257c8 <APIC::getBase()+0x40>
c00257a7:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00257ac:	83 ec 08             	sub    esp,0x8
c00257af:	6a 1b                	push   0x1b
c00257b1:	50                   	push   eax
c00257b2:	e8 31 96 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257b7:	83 c4 10             	add    esp,0x10
c00257ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257bd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257c8:	c9                   	leave  
c00257c9:	c3                   	ret    

c00257ca <APIC::eoi(unsigned char)>:
c00257ca:	55                   	push   ebp
c00257cb:	89 e5                	mov    ebp,esp
c00257cd:	83 ec 28             	sub    esp,0x28
c00257d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257d6:	83 ec 0c             	sub    esp,0xc
c00257d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257dc:	e8 a7 ff ff ff       	call   c0025788 <APIC::getBase()>
c00257e1:	83 c4 10             	add    esp,0x10
c00257e4:	05 b0 00 00 00       	add    eax,0xb0
c00257e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00257ef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00257f5:	90                   	nop
c00257f6:	c9                   	leave  
c00257f7:	c3                   	ret    

c00257f8 <APIC::open(int, int, void*)>:
c00257f8:	55                   	push   ebp
c00257f9:	89 e5                	mov    ebp,esp
c00257fb:	57                   	push   edi
c00257fc:	56                   	push   esi
c00257fd:	53                   	push   ebx
c00257fe:	83 ec 2c             	sub    esp,0x2c
c0025801:	83 ec 0c             	sub    esp,0xc
c0025804:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025807:	e8 7c ff ff ff       	call   c0025788 <APIC::getBase()>
c002580c:	83 c4 10             	add    esp,0x10
c002580f:	89 c2                	mov    edx,eax
c0025811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025814:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002581a:	0f b6 f8             	movzx  edi,al
c002581d:	89 d0                	mov    eax,edx
c002581f:	ba 00 00 00 00       	mov    edx,0x0
c0025824:	89 c1                	mov    ecx,eax
c0025826:	80 e5 ff             	and    ch,0xff
c0025829:	89 cb                	mov    ebx,ecx
c002582b:	0f b6 f2             	movzx  esi,dl
c002582e:	89 d8                	mov    eax,ebx
c0025830:	89 f2                	mov    edx,esi
c0025832:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025835:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025838:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002583c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025840:	83 e0 00             	and    eax,0x0
c0025843:	09 d0                	or     eax,edx
c0025845:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002584c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025852:	8d 50 01             	lea    edx,[eax+0x1]
c0025855:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025858:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002585e:	0f b6 d0             	movzx  edx,al
c0025861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025864:	83 c2 08             	add    edx,0x8
c0025867:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002586b:	0f b6 c9             	movzx  ecx,cl
c002586e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025874:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025878:	83 ec 0c             	sub    esp,0xc
c002587b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002587e:	e8 05 ff ff ff       	call   c0025788 <APIC::getBase()>
c0025883:	83 c4 10             	add    esp,0x10
c0025886:	05 f0 00 00 00       	add    eax,0xf0
c002588b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002588e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025891:	8b 00                	mov    eax,DWORD PTR [eax]
c0025893:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025896:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002589d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258a7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258aa:	89 10                	mov    DWORD PTR [eax],edx
c00258ac:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258b3:	a1 90 0d 03 c0       	mov    eax,ds:0xc0030d90
c00258b8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258bb:	7d 7c                	jge    c0025939 <APIC::open(int, int, void*)+0x141>
c00258bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258c0:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c00258c7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258cd:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c00258d4:	c1 e8 08             	shr    eax,0x8
c00258d7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00258db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258de:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c00258e5:	c1 e8 18             	shr    eax,0x18
c00258e8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00258eb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00258ef:	75 40                	jne    c0025931 <APIC::open(int, int, void*)+0x139>
c00258f1:	83 ec 0c             	sub    esp,0xc
c00258f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258f7:	e8 8c fe ff ff       	call   c0025788 <APIC::getBase()>
c00258fc:	83 c4 10             	add    esp,0x10
c00258ff:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025903:	75 07                	jne    c002590c <APIC::open(int, int, void*)+0x114>
c0025905:	ba 60 03 00 00       	mov    edx,0x360
c002590a:	eb 05                	jmp    c0025911 <APIC::open(int, int, void*)+0x119>
c002590c:	ba 50 03 00 00       	mov    edx,0x350
c0025911:	01 d0                	add    eax,edx
c0025913:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025916:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025919:	8b 00                	mov    eax,DWORD PTR [eax]
c002591b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002591e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025925:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025929:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002592c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002592f:	89 10                	mov    DWORD PTR [eax],edx
c0025931:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025934:	e9 7a ff ff ff       	jmp    c00258b3 <APIC::open(int, int, void*)+0xbb>
c0025939:	b8 00 00 00 00       	mov    eax,0x0
c002593e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025941:	5b                   	pop    ebx
c0025942:	5e                   	pop    esi
c0025943:	5f                   	pop    edi
c0025944:	5d                   	pop    ebp
c0025945:	c3                   	ret    

c0025946 <IOAPIC::IOAPIC()>:
c0025946:	83 ec 0c             	sub    esp,0xc
c0025949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594d:	83 ec 08             	sub    esp,0x8
c0025950:	68 8c d1 02 c0       	push   0xc002d18c
c0025955:	50                   	push   eax
c0025956:	e8 2f ec fe ff       	call   c001458a <Device::Device(char const*)>
c002595b:	83 c4 10             	add    esp,0x10
c002595e:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c0025963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025967:	89 10                	mov    DWORD PTR [eax],edx
c0025969:	90                   	nop
c002596a:	83 c4 0c             	add    esp,0xc
c002596d:	c3                   	ret    

c002596e <APIC::APIC()>:
c002596e:	53                   	push   ebx
c002596f:	83 ec 18             	sub    esp,0x18
c0025972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025976:	83 ec 08             	sub    esp,0x8
c0025979:	68 94 d1 02 c0       	push   0xc002d194
c002597e:	50                   	push   eax
c002597f:	e8 72 f3 fe ff       	call   c0014cf6 <InterruptController::InterruptController(char const*)>
c0025984:	83 c4 10             	add    esp,0x10
c0025987:	ba 6c d2 02 c0       	mov    edx,0xc002d26c
c002598c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025990:	89 10                	mov    DWORD PTR [eax],edx
c0025992:	a0 60 28 03 c0       	mov    al,ds:0xc0032860
c0025997:	83 f0 01             	xor    eax,0x1
c002599a:	84 c0                	test   al,al
c002599c:	0f 84 a1 00 00 00    	je     c0025a43 <APIC::APIC()+0xd5>
c00259a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259a7:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c00259ac:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259b0:	0f 83 86 00 00 00    	jae    c0025a3c <APIC::APIC()+0xce>
c00259b6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259be:	83 ec 0c             	sub    esp,0xc
c00259c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259c5:	e8 79 9e fe ff       	call   c000f843 <malloc>
c00259ca:	83 c4 10             	add    esp,0x10
c00259cd:	89 c3                	mov    ebx,eax
c00259cf:	83 ec 0c             	sub    esp,0xc
c00259d2:	53                   	push   ebx
c00259d3:	e8 6e ff ff ff       	call   c0025946 <IOAPIC::IOAPIC()>
c00259d8:	83 c4 10             	add    esp,0x10
c00259db:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00259df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00259e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259e8:	89 14 85 40 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7c0],edx
c00259ef:	a1 20 28 03 c0       	mov    eax,ds:0xc0032820
c00259f4:	40                   	inc    eax
c00259f5:	a3 20 28 03 c0       	mov    ds:0xc0032820,eax
c00259fa:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00259ff:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a05:	83 ec 08             	sub    esp,0x8
c0025a08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a0c:	50                   	push   eax
c0025a0d:	e8 88 e9 fe ff       	call   c001439a <Device::addChild(Device*)>
c0025a12:	83 c4 10             	add    esp,0x10
c0025a15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a19:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a1b:	83 c0 08             	add    eax,0x8
c0025a1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a20:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a25:	6a 00                	push   0x0
c0025a27:	6a 00                	push   0x0
c0025a29:	52                   	push   edx
c0025a2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a2e:	ff d0                	call   eax
c0025a30:	83 c4 10             	add    esp,0x10
c0025a33:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a37:	e9 6b ff ff ff       	jmp    c00259a7 <APIC::APIC()+0x39>
c0025a3c:	c6 05 60 28 03 c0 01 	mov    BYTE PTR ds:0xc0032860,0x1
c0025a43:	90                   	nop
c0025a44:	83 c4 18             	add    esp,0x18
c0025a47:	5b                   	pop    ebx
c0025a48:	c3                   	ret    
c0025a49:	90                   	nop

c0025a4a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a4a:	55                   	push   ebp
c0025a4b:	89 e5                	mov    ebp,esp
c0025a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a56:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a59:	72 1d                	jb     c0025a78 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a5e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a67:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a6d:	01 d0                	add    eax,edx
c0025a6f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a72:	73 04                	jae    c0025a78 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a74:	b0 01                	mov    al,0x1
c0025a76:	eb 02                	jmp    c0025a7a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025a78:	b0 00                	mov    al,0x0
c0025a7a:	5d                   	pop    ebp
c0025a7b:	c3                   	ret    

c0025a7c <IOAPIC::read(int)>:
c0025a7c:	55                   	push   ebp
c0025a7d:	89 e5                	mov    ebp,esp
c0025a7f:	83 ec 10             	sub    esp,0x10
c0025a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a85:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a8b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a91:	0f b6 d0             	movzx  edx,al
c0025a94:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a97:	89 10                	mov    DWORD PTR [eax],edx
c0025a99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a9c:	83 c0 10             	add    eax,0x10
c0025a9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aa1:	c9                   	leave  
c0025aa2:	c3                   	ret    
c0025aa3:	90                   	nop

c0025aa4 <IOAPIC::open(int, int, void*)>:
c0025aa4:	55                   	push   ebp
c0025aa5:	89 e5                	mov    ebp,esp
c0025aa7:	57                   	push   edi
c0025aa8:	56                   	push   esi
c0025aa9:	53                   	push   ebx
c0025aaa:	83 ec 0c             	sub    esp,0xc
c0025aad:	83 ec 0c             	sub    esp,0xc
c0025ab0:	68 bf d1 02 c0       	push   0xc002d1bf
c0025ab5:	e8 ba d4 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0025aba:	83 c4 10             	add    esp,0x10
c0025abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ac0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ac3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025ad2:	8b 14 85 80 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf180]
c0025ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025adc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aeb:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c0025af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b07:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b0d:	0f b6 f8             	movzx  edi,al
c0025b10:	89 d0                	mov    eax,edx
c0025b12:	ba 00 00 00 00       	mov    edx,0x0
c0025b17:	89 c1                	mov    ecx,eax
c0025b19:	80 e5 ff             	and    ch,0xff
c0025b1c:	89 cb                	mov    ebx,ecx
c0025b1e:	0f b6 f2             	movzx  esi,dl
c0025b21:	89 d8                	mov    eax,ebx
c0025b23:	89 f2                	mov    edx,esi
c0025b25:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b28:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b2b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b2f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b33:	83 e0 00             	and    eax,0x0
c0025b36:	09 d0                	or     eax,edx
c0025b38:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b45:	8d 50 01             	lea    edx,[eax+0x1]
c0025b48:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b4b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b51:	0f b6 d0             	movzx  edx,al
c0025b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b57:	83 c2 08             	add    edx,0x8
c0025b5a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b5e:	0f b6 c9             	movzx  ecx,cl
c0025b61:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b67:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b6b:	83 ec 08             	sub    esp,0x8
c0025b6e:	6a 01                	push   0x1
c0025b70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b73:	e8 04 ff ff ff       	call   c0025a7c <IOAPIC::read(int)>
c0025b78:	83 c4 10             	add    esp,0x10
c0025b7b:	c1 f8 10             	sar    eax,0x10
c0025b7e:	0f b6 c0             	movzx  eax,al
c0025b81:	8d 50 01             	lea    edx,[eax+0x1]
c0025b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b87:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025b8d:	b8 00 00 00 00       	mov    eax,0x0
c0025b92:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b95:	5b                   	pop    ebx
c0025b96:	5e                   	pop    esi
c0025b97:	5f                   	pop    edi
c0025b98:	5d                   	pop    ebp
c0025b99:	c3                   	ret    

c0025b9a <IOAPIC::write(int, int)>:
c0025b9a:	55                   	push   ebp
c0025b9b:	89 e5                	mov    ebp,esp
c0025b9d:	83 ec 10             	sub    esp,0x10
c0025ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025ba9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025baf:	0f b6 d0             	movzx  edx,al
c0025bb2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bb5:	89 10                	mov    DWORD PTR [eax],edx
c0025bb7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bba:	8d 50 10             	lea    edx,[eax+0x10]
c0025bbd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bc0:	89 02                	mov    DWORD PTR [edx],eax
c0025bc2:	90                   	nop
c0025bc3:	c9                   	leave  
c0025bc4:	c3                   	ret    
c0025bc5:	90                   	nop

c0025bc6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bc6:	55                   	push   ebp
c0025bc7:	89 e5                	mov    ebp,esp
c0025bc9:	53                   	push   ebx
c0025bca:	83 ec 2c             	sub    esp,0x2c
c0025bcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bd0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025bd3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025bd6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025bd9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025bdc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bdf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025be2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025be5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025be8:	88 d8                	mov    al,bl
c0025bea:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025bed:	88 c8                	mov    al,cl
c0025bef:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025bf2:	88 d0                	mov    al,dl
c0025bf4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025bf7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025bfb:	83 c0 08             	add    eax,0x8
c0025bfe:	01 c0                	add    eax,eax
c0025c00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c03:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c07:	83 c0 08             	add    eax,0x8
c0025c0a:	01 c0                	add    eax,eax
c0025c0c:	40                   	inc    eax
c0025c0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c10:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c13:	50                   	push   eax
c0025c14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c17:	e8 60 fe ff ff       	call   c0025a7c <IOAPIC::read(int)>
c0025c1c:	83 c4 08             	add    esp,0x8
c0025c1f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c22:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c29:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c2c:	c1 e0 18             	shl    eax,0x18
c0025c2f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c32:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c38:	52                   	push   edx
c0025c39:	50                   	push   eax
c0025c3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c3d:	e8 58 ff ff ff       	call   c0025b9a <IOAPIC::write(int, int)>
c0025c42:	83 c4 0c             	add    esp,0xc
c0025c45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c48:	50                   	push   eax
c0025c49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c4c:	e8 2b fe ff ff       	call   c0025a7c <IOAPIC::read(int)>
c0025c51:	83 c4 08             	add    esp,0x8
c0025c54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c57:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c5e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c65:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c6c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025c70:	74 09                	je     c0025c7b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025c72:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025c79:	eb 07                	jmp    c0025c82 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025c7b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025c82:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025c86:	74 09                	je     c0025c91 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025c88:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025c8f:	eb 07                	jmp    c0025c98 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025c91:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025c98:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025c9f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025ca3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025ca6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025ca9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cac:	52                   	push   edx
c0025cad:	50                   	push   eax
c0025cae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cb1:	e8 e4 fe ff ff       	call   c0025b9a <IOAPIC::write(int, int)>
c0025cb6:	83 c4 0c             	add    esp,0xc
c0025cb9:	90                   	nop
c0025cba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025cbd:	c9                   	leave  
c0025cbe:	c3                   	ret    
c0025cbf:	90                   	nop

c0025cc0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cc0:	55                   	push   ebp
c0025cc1:	89 e5                	mov    ebp,esp
c0025cc3:	57                   	push   edi
c0025cc4:	56                   	push   esi
c0025cc5:	53                   	push   ebx
c0025cc6:	83 ec 2c             	sub    esp,0x2c
c0025cc9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025ccc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025ccf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025cd3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025cd7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cdb:	74 5a                	je     c0025d37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025cdd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ce1:	7f 44                	jg     c0025d27 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ce3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ce6:	05 00 d7 02 c0       	add    eax,0xc002d700
c0025ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0025ced:	0f b6 c0             	movzx  eax,al
c0025cf0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cf3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cf6:	66 8b 84 00 20 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf1e0]
c0025cfe:	0f b7 c0             	movzx  eax,ax
c0025d01:	83 e0 02             	and    eax,0x2
c0025d04:	85 c0                	test   eax,eax
c0025d06:	74 04                	je     c0025d0c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d08:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d0f:	66 8b 84 00 20 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf1e0]
c0025d17:	0f b7 c0             	movzx  eax,ax
c0025d1a:	83 e0 08             	and    eax,0x8
c0025d1d:	85 c0                	test   eax,eax
c0025d1f:	74 16                	je     c0025d37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d21:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d25:	eb 10                	jmp    c0025d37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d27:	83 ec 0c             	sub    esp,0xc
c0025d2a:	68 d0 d1 02 c0       	push   0xc002d1d0
c0025d2f:	e8 ed 48 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0025d34:	83 c4 10             	add    esp,0x10
c0025d37:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d3b:	a1 20 28 03 c0       	mov    eax,ds:0xc0032820
c0025d40:	83 ec 08             	sub    esp,0x8
c0025d43:	50                   	push   eax
c0025d44:	68 08 d2 02 c0       	push   0xc002d208
c0025d49:	e8 26 d2 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0025d4e:	83 c4 10             	add    esp,0x10
c0025d51:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d58:	a1 20 28 03 c0       	mov    eax,ds:0xc0032820
c0025d5d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d60:	7d 67                	jge    c0025dc9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d62:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d65:	8b 04 85 40 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd7c0]
c0025d6c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025d6f:	83 ec 08             	sub    esp,0x8
c0025d72:	52                   	push   edx
c0025d73:	50                   	push   eax
c0025d74:	e8 d1 fc ff ff       	call   c0025a4a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025d79:	83 c4 10             	add    esp,0x10
c0025d7c:	84 c0                	test   al,al
c0025d7e:	74 44                	je     c0025dc4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025d80:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d83:	8b 1c 85 40 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd7c0]
c0025d8a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025d8e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d91:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025d95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d98:	83 c0 20             	add    eax,0x20
c0025d9b:	0f b6 f0             	movzx  esi,al
c0025d9e:	b8 00 00 00 00       	mov    eax,0x0
c0025da3:	99                   	cdq    
c0025da4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025da7:	0f b6 c9             	movzx  ecx,cl
c0025daa:	83 ec 04             	sub    esp,0x4
c0025dad:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025db0:	57                   	push   edi
c0025db1:	56                   	push   esi
c0025db2:	52                   	push   edx
c0025db3:	50                   	push   eax
c0025db4:	51                   	push   ecx
c0025db5:	53                   	push   ebx
c0025db6:	e8 0b fe ff ff       	call   c0025bc6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025dbb:	83 c4 20             	add    esp,0x20
c0025dbe:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025dc2:	eb 05                	jmp    c0025dc9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dc4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025dc7:	eb 8f                	jmp    c0025d58 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dc9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dcc:	83 f0 01             	xor    eax,0x1
c0025dcf:	84 c0                	test   al,al
c0025dd1:	74 10                	je     c0025de3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025dd3:	83 ec 0c             	sub    esp,0xc
c0025dd6:	68 1f d2 02 c0       	push   0xc002d21f
c0025ddb:	e8 41 48 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0025de0:	83 c4 10             	add    esp,0x10
c0025de3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025de7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025dee:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025df2:	7f 65                	jg     c0025e59 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025df4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025df7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025dfa:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e01:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e04:	01 ca                	add    edx,ecx
c0025e06:	83 c2 54             	add    edx,0x54
c0025e09:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e0d:	85 c0                	test   eax,eax
c0025e0f:	75 43                	jne    c0025e54 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e17:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e1e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e21:	01 ca                	add    edx,ecx
c0025e23:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e26:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e29:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e33:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e3a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e3d:	01 ca                	add    edx,ecx
c0025e3f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e45:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e48:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e4f:	83 e8 20             	sub    eax,0x20
c0025e52:	eb 1a                	jmp    c0025e6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e54:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e57:	eb 95                	jmp    c0025dee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e59:	83 ec 0c             	sub    esp,0xc
c0025e5c:	68 2c d2 02 c0       	push   0xc002d22c
c0025e61:	e8 bb 47 ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0025e66:	83 c4 10             	add    esp,0x10
c0025e69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025e6e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025e71:	5b                   	pop    ebx
c0025e72:	5e                   	pop    esi
c0025e73:	5f                   	pop    edi
c0025e74:	5d                   	pop    ebp
c0025e75:	c3                   	ret    

c0025e76 <PIC::disable()>:
c0025e76:	55                   	push   ebp
c0025e77:	89 e5                	mov    ebp,esp
c0025e79:	83 ec 10             	sub    esp,0x10
c0025e7c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025e82:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025e86:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e89:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e8d:	ee                   	out    dx,al
c0025e8e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025e94:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025e98:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e9b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025e9f:	ee                   	out    dx,al
c0025ea0:	90                   	nop
c0025ea1:	c9                   	leave  
c0025ea2:	c3                   	ret    
c0025ea3:	90                   	nop

c0025ea4 <PIC::close(int, int, void*)>:
c0025ea4:	55                   	push   ebp
c0025ea5:	89 e5                	mov    ebp,esp
c0025ea7:	83 ec 08             	sub    esp,0x8
c0025eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ead:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eaf:	83 c0 3c             	add    eax,0x3c
c0025eb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025eb4:	83 ec 0c             	sub    esp,0xc
c0025eb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eba:	ff d0                	call   eax
c0025ebc:	83 c4 10             	add    esp,0x10
c0025ebf:	b8 00 00 00 00       	mov    eax,0x0
c0025ec4:	c9                   	leave  
c0025ec5:	c3                   	ret    

c0025ec6 <PIC::PIC()>:
c0025ec6:	83 ec 0c             	sub    esp,0xc
c0025ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ecd:	83 ec 08             	sub    esp,0x8
c0025ed0:	68 d8 d2 02 c0       	push   0xc002d2d8
c0025ed5:	50                   	push   eax
c0025ed6:	e8 1b ee fe ff       	call   c0014cf6 <InterruptController::InterruptController(char const*)>
c0025edb:	83 c4 10             	add    esp,0x10
c0025ede:	ba 04 d3 02 c0       	mov    edx,0xc002d304
c0025ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee7:	89 10                	mov    DWORD PTR [eax],edx
c0025ee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ef3:	0f b6 d0             	movzx  edx,al
c0025ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efa:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f0b:	0f b6 d0             	movzx  edx,al
c0025f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f12:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f21:	8d 50 01             	lea    edx,[eax+0x1]
c0025f24:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f28:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f2e:	0f b6 d0             	movzx  edx,al
c0025f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f35:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f39:	83 e1 3f             	and    ecx,0x3f
c0025f3c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f4a:	0f b6 d0             	movzx  edx,al
c0025f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f51:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f62:	0f b6 d0             	movzx  edx,al
c0025f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f69:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f78:	8d 50 01             	lea    edx,[eax+0x1]
c0025f7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f85:	0f b6 d0             	movzx  edx,al
c0025f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f90:	83 e1 3f             	and    ecx,0x3f
c0025f93:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f97:	90                   	nop
c0025f98:	83 c4 0c             	add    esp,0xc
c0025f9b:	c3                   	ret    

c0025f9c <PIC::ioWait()>:
c0025f9c:	eb 00                	jmp    c0025f9e <PIC::ioWait()+0x2>
c0025f9e:	eb 00                	jmp    c0025fa0 <PIC::ioWait()+0x4>
c0025fa0:	90                   	nop
c0025fa1:	c3                   	ret    

c0025fa2 <PIC::getIRQReg(int)>:
c0025fa2:	55                   	push   ebp
c0025fa3:	89 e5                	mov    ebp,esp
c0025fa5:	83 ec 10             	sub    esp,0x10
c0025fa8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fab:	0f b6 c0             	movzx  eax,al
c0025fae:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fb4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fb7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fba:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025fbe:	ee                   	out    dx,al
c0025fbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fc2:	0f b6 c0             	movzx  eax,al
c0025fc5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025fcb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025fce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025fd1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025fd5:	ee                   	out    dx,al
c0025fd6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025fdc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025fe0:	89 c2                	mov    edx,eax
c0025fe2:	ec                   	in     al,dx
c0025fe3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025fe6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025fe9:	0f b6 c0             	movzx  eax,al
c0025fec:	c1 e0 08             	shl    eax,0x8
c0025fef:	89 c1                	mov    ecx,eax
c0025ff1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025ff7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ffb:	89 c2                	mov    edx,eax
c0025ffd:	ec                   	in     al,dx
c0025ffe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026001:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026004:	0f b6 c0             	movzx  eax,al
c0026007:	09 c8                	or     eax,ecx
c0026009:	c9                   	leave  
c002600a:	c3                   	ret    
c002600b:	90                   	nop

c002600c <PIC::eoi(unsigned char)>:
c002600c:	55                   	push   ebp
c002600d:	89 e5                	mov    ebp,esp
c002600f:	83 ec 14             	sub    esp,0x14
c0026012:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026015:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026018:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002601c:	75 1e                	jne    c002603c <PIC::eoi(unsigned char)+0x30>
c002601e:	6a 0b                	push   0xb
c0026020:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026023:	e8 7a ff ff ff       	call   c0025fa2 <PIC::getIRQReg(int)>
c0026028:	83 c4 08             	add    esp,0x8
c002602b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002602f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026033:	25 80 00 00 00       	and    eax,0x80
c0026038:	85 c0                	test   eax,eax
c002603a:	74 5f                	je     c002609b <PIC::eoi(unsigned char)+0x8f>
c002603c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026040:	75 2d                	jne    c002606f <PIC::eoi(unsigned char)+0x63>
c0026042:	6a 0b                	push   0xb
c0026044:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026047:	e8 56 ff ff ff       	call   c0025fa2 <PIC::getIRQReg(int)>
c002604c:	83 c4 08             	add    esp,0x8
c002604f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026053:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026056:	66 85 c0             	test   ax,ax
c0026059:	78 14                	js     c002606f <PIC::eoi(unsigned char)+0x63>
c002605b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026061:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026065:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026068:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002606c:	ee                   	out    dx,al
c002606d:	eb 2d                	jmp    c002609c <PIC::eoi(unsigned char)+0x90>
c002606f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026073:	76 12                	jbe    c0026087 <PIC::eoi(unsigned char)+0x7b>
c0026075:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002607b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002607f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026082:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026086:	ee                   	out    dx,al
c0026087:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002608d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026091:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026094:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026098:	ee                   	out    dx,al
c0026099:	eb 01                	jmp    c002609c <PIC::eoi(unsigned char)+0x90>
c002609b:	90                   	nop
c002609c:	c9                   	leave  
c002609d:	c3                   	ret    

c002609e <PIC::remap()>:
c002609e:	55                   	push   ebp
c002609f:	89 e5                	mov    ebp,esp
c00260a1:	83 ec 48             	sub    esp,0x48
c00260a4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260ab:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260b2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260b8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260bb:	89 c2                	mov    edx,eax
c00260bd:	ec                   	in     al,dx
c00260be:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260c1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260c4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260c7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260cd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00260d0:	89 c2                	mov    edx,eax
c00260d2:	ec                   	in     al,dx
c00260d3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00260d6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00260d9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00260dc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00260e2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00260e6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00260e9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00260ec:	ee                   	out    dx,al
c00260ed:	83 ec 0c             	sub    esp,0xc
c00260f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f3:	e8 a4 fe ff ff       	call   c0025f9c <PIC::ioWait()>
c00260f8:	83 c4 10             	add    esp,0x10
c00260fb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026101:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026105:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026108:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002610b:	ee                   	out    dx,al
c002610c:	83 ec 0c             	sub    esp,0xc
c002610f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026112:	e8 85 fe ff ff       	call   c0025f9c <PIC::ioWait()>
c0026117:	83 c4 10             	add    esp,0x10
c002611a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002611d:	0f b6 c0             	movzx  eax,al
c0026120:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026126:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026129:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002612c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002612f:	ee                   	out    dx,al
c0026130:	83 ec 0c             	sub    esp,0xc
c0026133:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026136:	e8 61 fe ff ff       	call   c0025f9c <PIC::ioWait()>
c002613b:	83 c4 10             	add    esp,0x10
c002613e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026141:	0f b6 c0             	movzx  eax,al
c0026144:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002614a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002614d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026150:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026153:	ee                   	out    dx,al
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002615a:	e8 3d fe ff ff       	call   c0025f9c <PIC::ioWait()>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026168:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002616c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002616f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026172:	ee                   	out    dx,al
c0026173:	83 ec 0c             	sub    esp,0xc
c0026176:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026179:	e8 1e fe ff ff       	call   c0025f9c <PIC::ioWait()>
c002617e:	83 c4 10             	add    esp,0x10
c0026181:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026187:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002618b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002618e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026191:	ee                   	out    dx,al
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026198:	e8 ff fd ff ff       	call   c0025f9c <PIC::ioWait()>
c002619d:	83 c4 10             	add    esp,0x10
c00261a0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261a6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261aa:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261ad:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261b0:	ee                   	out    dx,al
c00261b1:	83 ec 0c             	sub    esp,0xc
c00261b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b7:	e8 e0 fd ff ff       	call   c0025f9c <PIC::ioWait()>
c00261bc:	83 c4 10             	add    esp,0x10
c00261bf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261c5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261c9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261cc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00261cf:	ee                   	out    dx,al
c00261d0:	83 ec 0c             	sub    esp,0xc
c00261d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d6:	e8 c1 fd ff ff       	call   c0025f9c <PIC::ioWait()>
c00261db:	83 c4 10             	add    esp,0x10
c00261de:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00261e2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00261e8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00261eb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00261ee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00261f1:	ee                   	out    dx,al
c00261f2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00261f6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00261fc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00261ff:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026202:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026205:	ee                   	out    dx,al
c0026206:	90                   	nop
c0026207:	c9                   	leave  
c0026208:	c3                   	ret    
c0026209:	90                   	nop

c002620a <PIC::open(int, int, void*)>:
c002620a:	55                   	push   ebp
c002620b:	89 e5                	mov    ebp,esp
c002620d:	83 ec 18             	sub    esp,0x18
c0026210:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026216:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002621a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002621d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026221:	ee                   	out    dx,al
c0026222:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026228:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002622c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002622f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026233:	ee                   	out    dx,al
c0026234:	83 ec 0c             	sub    esp,0xc
c0026237:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002623a:	e8 5f fe ff ff       	call   c002609e <PIC::remap()>
c002623f:	83 c4 10             	add    esp,0x10
c0026242:	b8 00 00 00 00       	mov    eax,0x0
c0026247:	c9                   	leave  
c0026248:	c3                   	ret    
c0026249:	90                   	nop

c002624a <APICTimer::close(int, int, void*)>:
c002624a:	b8 00 00 00 00       	mov    eax,0x0
c002624f:	c3                   	ret    

c0026250 <apicTimerHandler(regs*, void*)>:
c0026250:	83 ec 0c             	sub    esp,0xc
c0026253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026257:	8b 00                	mov    eax,DWORD PTR [eax]
c0026259:	99                   	cdq    
c002625a:	52                   	push   edx
c002625b:	50                   	push   eax
c002625c:	6a 00                	push   0x0
c002625e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026263:	e8 84 07 00 00       	call   c00269ec <__udivdi3>
c0026268:	83 c4 10             	add    esp,0x10
c002626b:	83 ec 08             	sub    esp,0x8
c002626e:	52                   	push   edx
c002626f:	50                   	push   eax
c0026270:	e8 d8 0a ff ff       	call   c0016d4d <timerHandler(unsigned long long)>
c0026275:	83 c4 10             	add    esp,0x10
c0026278:	90                   	nop
c0026279:	83 c4 0c             	add    esp,0xc
c002627c:	c3                   	ret    
c002627d:	90                   	nop

c002627e <APICTimer::write(int)>:
c002627e:	53                   	push   ebx
c002627f:	83 ec 28             	sub    esp,0x28
c0026282:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026286:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002628a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026290:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c0026295:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002629b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262a1:	83 ec 0c             	sub    esp,0xc
c00262a4:	50                   	push   eax
c00262a5:	e8 de f4 ff ff       	call   c0025788 <APIC::getBase()>
c00262aa:	83 c4 10             	add    esp,0x10
c00262ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262b1:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c00262b6:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c00262bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262c8:	05 e0 03 00 00       	add    eax,0x3e0
c00262cd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00262d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262d7:	05 80 03 00 00       	add    eax,0x380
c00262dc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00262e2:	fb                   	sti    
c00262e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262eb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00262f0:	83 d2 00             	adc    edx,0x0
c00262f3:	89 c1                	mov    ecx,eax
c00262f5:	89 d3                	mov    ebx,edx
c00262f7:	a1 30 eb 02 c0       	mov    eax,ds:0xc002eb30
c00262fc:	8b 15 34 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb34
c0026302:	39 c8                	cmp    eax,ecx
c0026304:	89 d0                	mov    eax,edx
c0026306:	19 d8                	sbb    eax,ebx
c0026308:	73 02                	jae    c002630c <APICTimer::write(int)+0x8e>
c002630a:	eb d7                	jmp    c00262e3 <APICTimer::write(int)+0x65>
c002630c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026310:	05 20 03 00 00       	add    eax,0x320
c0026315:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002631b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002631f:	05 90 03 00 00       	add    eax,0x390
c0026324:	8b 00                	mov    eax,DWORD PTR [eax]
c0026326:	f7 d0                	not    eax
c0026328:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002632c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026334:	ba 00 00 00 00       	mov    edx,0x0
c0026339:	f7 f3                	div    ebx
c002633b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002633f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026343:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026349:	0d 00 00 02 00       	or     eax,0x20000
c002634e:	89 c2                	mov    edx,eax
c0026350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026354:	05 20 03 00 00       	add    eax,0x320
c0026359:	89 10                	mov    DWORD PTR [eax],edx
c002635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002635f:	05 e0 03 00 00       	add    eax,0x3e0
c0026364:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002636a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002636e:	05 80 03 00 00       	add    eax,0x380
c0026373:	89 c2                	mov    edx,eax
c0026375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026379:	89 02                	mov    DWORD PTR [edx],eax
c002637b:	90                   	nop
c002637c:	83 c4 28             	add    esp,0x28
c002637f:	5b                   	pop    ebx
c0026380:	c3                   	ret    
c0026381:	90                   	nop

c0026382 <APICTimer::open(int, int, void*)>:
c0026382:	57                   	push   edi
c0026383:	56                   	push   esi
c0026384:	53                   	push   ebx
c0026385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026389:	8b 00                	mov    eax,DWORD PTR [eax]
c002638b:	83 c0 24             	add    eax,0x24
c002638e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026390:	83 ec 08             	sub    esp,0x8
c0026393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002639b:	ff d0                	call   eax
c002639d:	83 c4 10             	add    esp,0x10
c00263a0:	a1 a8 e4 02 c0       	mov    eax,ds:0xc002e4a8
c00263a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263ab:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263b1:	83 ec 0c             	sub    esp,0xc
c00263b4:	50                   	push   eax
c00263b5:	e8 ce f3 ff ff       	call   c0025788 <APIC::getBase()>
c00263ba:	83 c4 10             	add    esp,0x10
c00263bd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263cd:	0f b6 f8             	movzx  edi,al
c00263d0:	89 d0                	mov    eax,edx
c00263d2:	ba 00 00 00 00       	mov    edx,0x0
c00263d7:	89 c1                	mov    ecx,eax
c00263d9:	80 e5 ff             	and    ch,0xff
c00263dc:	89 cb                	mov    ebx,ecx
c00263de:	0f b6 f2             	movzx  esi,dl
c00263e1:	89 d8                	mov    eax,ebx
c00263e3:	89 f2                	mov    edx,esi
c00263e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00263e9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00263ec:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00263f0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00263f4:	83 e0 00             	and    eax,0x0
c00263f7:	09 d0                	or     eax,edx
c00263f9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00263fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026401:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026407:	8d 50 01             	lea    edx,[eax+0x1]
c002640a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002640e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026414:	0f b6 d0             	movzx  edx,al
c0026417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641b:	83 c2 08             	add    edx,0x8
c002641e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026422:	0f b6 c9             	movzx  ecx,cl
c0026425:	81 c9 00 00 01 00    	or     ecx,0x10000
c002642b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002642f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026437:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002643d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026441:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026445:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002644b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002644f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026455:	83 ec 0c             	sub    esp,0xc
c0026458:	51                   	push   ecx
c0026459:	6a 01                	push   0x1
c002645b:	68 50 62 02 c0       	push   0xc0026250
c0026460:	52                   	push   edx
c0026461:	50                   	push   eax
c0026462:	e8 b7 de fe ff       	call   c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026467:	83 c4 20             	add    esp,0x20
c002646a:	89 c2                	mov    edx,eax
c002646c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026470:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026476:	b8 00 00 00 00       	mov    eax,0x0
c002647b:	5b                   	pop    ebx
c002647c:	5e                   	pop    esi
c002647d:	5f                   	pop    edi
c002647e:	c3                   	ret    
c002647f:	90                   	nop

c0026480 <APICTimer::APICTimer()>:
c0026480:	83 ec 0c             	sub    esp,0xc
c0026483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026487:	83 ec 08             	sub    esp,0x8
c002648a:	68 44 d3 02 c0       	push   0xc002d344
c002648f:	50                   	push   eax
c0026490:	e8 29 08 ff ff       	call   c0016cbe <Timer::Timer(char const*)>
c0026495:	83 c4 10             	add    esp,0x10
c0026498:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c002649d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a1:	89 10                	mov    DWORD PTR [eax],edx
c00264a3:	90                   	nop
c00264a4:	83 c4 0c             	add    esp,0xc
c00264a7:	c3                   	ret    

c00264a8 <PIT::write(int)>:
c00264a8:	83 ec 10             	sub    esp,0x10
c00264ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264bd:	a3 64 28 03 c0       	mov    ds:0xc0032864,eax
c00264c2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264c7:	99                   	cdq    
c00264c8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264d0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00264d7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00264dc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00264e0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00264e5:	ee                   	out    dx,al
c00264e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264ea:	0f b6 c0             	movzx  eax,al
c00264ed:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00264f4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00264f8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00264fc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026501:	ee                   	out    dx,al
c0026502:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026506:	c1 f8 08             	sar    eax,0x8
c0026509:	0f b6 c0             	movzx  eax,al
c002650c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026513:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026517:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002651b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026520:	ee                   	out    dx,al
c0026521:	90                   	nop
c0026522:	83 c4 10             	add    esp,0x10
c0026525:	c3                   	ret    

c0026526 <pitHandler(regs*, void*)>:
c0026526:	83 ec 0c             	sub    esp,0xc
c0026529:	a1 64 28 03 c0       	mov    eax,ds:0xc0032864
c002652e:	99                   	cdq    
c002652f:	52                   	push   edx
c0026530:	50                   	push   eax
c0026531:	6a 00                	push   0x0
c0026533:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026538:	e8 af 04 00 00       	call   c00269ec <__udivdi3>
c002653d:	83 c4 10             	add    esp,0x10
c0026540:	83 ec 08             	sub    esp,0x8
c0026543:	52                   	push   edx
c0026544:	50                   	push   eax
c0026545:	e8 03 08 ff ff       	call   c0016d4d <timerHandler(unsigned long long)>
c002654a:	83 c4 10             	add    esp,0x10
c002654d:	90                   	nop
c002654e:	83 c4 0c             	add    esp,0xc
c0026551:	c3                   	ret    

c0026552 <PIT::open(int, int, void*)>:
c0026552:	83 ec 0c             	sub    esp,0xc
c0026555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026559:	8b 00                	mov    eax,DWORD PTR [eax]
c002655b:	83 c0 24             	add    eax,0x24
c002655e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026560:	83 ec 08             	sub    esp,0x8
c0026563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002656b:	ff d0                	call   eax
c002656d:	83 c4 10             	add    esp,0x10
c0026570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026574:	83 ec 0c             	sub    esp,0xc
c0026577:	6a 00                	push   0x0
c0026579:	6a 01                	push   0x1
c002657b:	68 26 65 02 c0       	push   0xc0026526
c0026580:	6a 00                	push   0x0
c0026582:	50                   	push   eax
c0026583:	e8 96 dd fe ff       	call   c001431e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026588:	83 c4 20             	add    esp,0x20
c002658b:	89 c2                	mov    edx,eax
c002658d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026591:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026597:	b8 00 00 00 00       	mov    eax,0x0
c002659c:	83 c4 0c             	add    esp,0xc
c002659f:	c3                   	ret    

c00265a0 <PIT::close(int, int, void*)>:
c00265a0:	83 ec 0c             	sub    esp,0xc
c00265a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265b5:	6a 01                	push   0x1
c00265b7:	68 26 65 02 c0       	push   0xc0026526
c00265bc:	6a 00                	push   0x0
c00265be:	50                   	push   eax
c00265bf:	e8 98 dd fe ff       	call   c001435c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265c4:	83 c4 10             	add    esp,0x10
c00265c7:	b8 00 00 00 00       	mov    eax,0x0
c00265cc:	83 c4 0c             	add    esp,0xc
c00265cf:	c3                   	ret    

c00265d0 <PIT::PIT()>:
c00265d0:	83 ec 0c             	sub    esp,0xc
c00265d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d7:	83 ec 08             	sub    esp,0x8
c00265da:	68 80 d3 02 c0       	push   0xc002d380
c00265df:	50                   	push   eax
c00265e0:	e8 d9 06 ff ff       	call   c0016cbe <Timer::Timer(char const*)>
c00265e5:	83 c4 10             	add    esp,0x10
c00265e8:	ba a8 d3 02 c0       	mov    edx,0xc002d3a8
c00265ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f1:	89 10                	mov    DWORD PTR [eax],edx
c00265f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00265fd:	0f b6 d0             	movzx  edx,al
c0026600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026604:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002660b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026615:	0f b6 d0             	movzx  edx,al
c0026618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026625:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002662b:	8d 50 01             	lea    edx,[eax+0x1]
c002662e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026632:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026638:	0f b6 d0             	movzx  edx,al
c002663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026643:	83 e1 3f             	and    ecx,0x3f
c0026646:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002664a:	90                   	nop
c002664b:	83 c4 0c             	add    esp,0xc
c002664e:	c3                   	ret    
c002664f:	90                   	nop

c0026650 <avxDetect>:
c0026650:	b8 00 00 00 00       	mov    eax,0x0
c0026655:	c3                   	ret    

c0026656 <avxSave>:
c0026656:	c3                   	ret    

c0026657 <avxLoad>:
c0026657:	c3                   	ret    

c0026658 <avxInit>:
c0026658:	c3                   	ret    

c0026659 <avxClose>:
c0026659:	c3                   	ret    

c002665a <wouldSheSayYes>:
c002665a:	c3                   	ret    
c002665b:	49                   	dec    ecx
c002665c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026660:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026664:	75 20                	jne    c0026686 <sseDetect.noSSE+0x1>
c0026666:	4e                   	dec    esi
c0026667:	79 61                	jns    c00266ca <x87Detect+0x14>
c0026669:	68 2e 2e 2e 00       	push   0x2e2e2e
c002666e:	66 90                	xchg   ax,ax

c0026670 <absolutelyNoChanceInHell>:
c0026670:	b8 01 00 00 00       	mov    eax,0x1
c0026675:	0f a2                	cpuid  
c0026677:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002667d:	74 06                	je     c0026685 <sseDetect.noSSE>
c002667f:	b8 01 00 00 00       	mov    eax,0x1
c0026684:	c3                   	ret    

c0026685 <sseDetect.noSSE>:
c0026685:	31 c0                	xor    eax,eax
c0026687:	c3                   	ret    

c0026688 <sseSave>:
c0026688:	0f ae 44 24 08       	fxsave [esp+0x8]
c002668d:	c3                   	ret    

c002668e <sseLoad>:
c002668e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026693:	c3                   	ret    

c0026694 <sseInit>:
c0026694:	e8 43 00 00 00       	call   c00266dc <x87Init>
c0026699:	0f 20 e0             	mov    eax,cr4
c002669c:	66 0d 00 06          	or     ax,0x600
c00266a0:	0f 22 e0             	mov    cr4,eax
c00266a3:	c3                   	ret    

c00266a4 <sseClose>:
c00266a4:	c3                   	ret    
c00266a5:	66 90                	xchg   ax,ax
c00266a7:	66 90                	xchg   ax,ax
c00266a9:	66 90                	xchg   ax,ax
c00266ab:	66 90                	xchg   ax,ax
c00266ad:	66 90                	xchg   ax,ax
c00266af:	90                   	nop

c00266b0 <value_37F>:
c00266b0:	7f 03                	jg     c00266b5 <value_37A+0x1>

c00266b2 <value_37E>:
c00266b2:	7e 03                	jle    c00266b7 <x87Detect+0x1>

c00266b4 <value_37A>:
c00266b4:	7a 03                	jp     c00266b9 <x87Detect+0x3>

c00266b6 <x87Detect>:
c00266b6:	b8 01 00 00 00       	mov    eax,0x1
c00266bb:	0f a2                	cpuid  
c00266bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00266c3:	74 06                	je     c00266cb <x87Detect.nox87>
c00266c5:	b8 01 00 00 00       	mov    eax,0x1
c00266ca:	c3                   	ret    

c00266cb <x87Detect.nox87>:
c00266cb:	b8 00 00 00 00       	mov    eax,0x0
c00266d0:	c3                   	ret    

c00266d1 <x87Save>:
c00266d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00266d6:	c3                   	ret    

c00266d7 <x87Load>:
c00266d7:	dd 64 24 08          	frstor [esp+0x8]
c00266db:	c3                   	ret    

c00266dc <x87Init>:
c00266dc:	9b db e3             	finit  
c00266df:	0f 20 c0             	mov    eax,cr0
c00266e2:	66 25 fb ff          	and    ax,0xfffb
c00266e6:	66 0d 22 00          	or     ax,0x22
c00266ea:	0f 22 c0             	mov    cr0,eax
c00266ed:	0f 06                	clts   
c00266ef:	d9 2d b4 66 02 c0    	fldcw  WORD PTR ds:0xc00266b4
c00266f5:	c3                   	ret    

c00266f6 <x87Close>:
c00266f6:	c3                   	ret    
c00266f7:	90                   	nop

c00266f8 <__do_global_ctors_aux>:
c00266f8:	a1 3c 92 02 c0       	mov    eax,ds:0xc002923c
c00266fd:	83 f8 ff             	cmp    eax,0xffffffff
c0026700:	74 1a                	je     c002671c <__do_global_ctors_aux+0x24>
c0026702:	55                   	push   ebp
c0026703:	89 e5                	mov    ebp,esp
c0026705:	53                   	push   ebx
c0026706:	52                   	push   edx
c0026707:	bb 3c 92 02 c0       	mov    ebx,0xc002923c
c002670c:	ff d0                	call   eax
c002670e:	83 eb 04             	sub    ebx,0x4
c0026711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026713:	83 f8 ff             	cmp    eax,0xffffffff
c0026716:	75 f4                	jne    c002670c <__do_global_ctors_aux+0x14>
c0026718:	58                   	pop    eax
c0026719:	5b                   	pop    ebx
c002671a:	5d                   	pop    ebp
c002671b:	c3                   	ret    
c002671c:	c3                   	ret    
c002671d:	66 90                	xchg   ax,ax
c002671f:	90                   	nop

c0026720 <__divdi3>:
c0026720:	55                   	push   ebp
c0026721:	57                   	push   edi
c0026722:	56                   	push   esi
c0026723:	53                   	push   ebx
c0026724:	83 ec 1c             	sub    esp,0x1c
c0026727:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002672b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002672f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026732:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002673a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002673e:	85 db                	test   ebx,ebx
c0026740:	0f 88 8e 00 00 00    	js     c00267d4 <__divdi3+0xb4>
c0026746:	89 dd                	mov    ebp,ebx
c0026748:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026750:	89 d3                	mov    ebx,edx
c0026752:	85 d2                	test   edx,edx
c0026754:	79 0d                	jns    c0026763 <__divdi3+0x43>
c0026756:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002675a:	f7 d8                	neg    eax
c002675c:	83 d2 00             	adc    edx,0x0
c002675f:	f7 da                	neg    edx
c0026761:	89 d3                	mov    ebx,edx
c0026763:	89 c7                	mov    edi,eax
c0026765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026768:	85 db                	test   ebx,ebx
c002676a:	75 48                	jne    c00267b4 <__divdi3+0x94>
c002676c:	39 ef                	cmp    edi,ebp
c002676e:	76 24                	jbe    c0026794 <__divdi3+0x74>
c0026770:	89 ea                	mov    edx,ebp
c0026772:	f7 f7                	div    edi
c0026774:	89 c1                	mov    ecx,eax
c0026776:	31 f6                	xor    esi,esi
c0026778:	89 c8                	mov    eax,ecx
c002677a:	89 f2                	mov    edx,esi
c002677c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026780:	85 c9                	test   ecx,ecx
c0026782:	74 07                	je     c002678b <__divdi3+0x6b>
c0026784:	f7 d8                	neg    eax
c0026786:	83 d2 00             	adc    edx,0x0
c0026789:	f7 da                	neg    edx
c002678b:	83 c4 1c             	add    esp,0x1c
c002678e:	5b                   	pop    ebx
c002678f:	5e                   	pop    esi
c0026790:	5f                   	pop    edi
c0026791:	5d                   	pop    ebp
c0026792:	c3                   	ret    
c0026793:	90                   	nop
c0026794:	85 ff                	test   edi,edi
c0026796:	75 0b                	jne    c00267a3 <__divdi3+0x83>
c0026798:	b8 01 00 00 00       	mov    eax,0x1
c002679d:	31 d2                	xor    edx,edx
c002679f:	f7 f3                	div    ebx
c00267a1:	89 c7                	mov    edi,eax
c00267a3:	31 d2                	xor    edx,edx
c00267a5:	89 e8                	mov    eax,ebp
c00267a7:	f7 f7                	div    edi
c00267a9:	89 c6                	mov    esi,eax
c00267ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267ae:	f7 f7                	div    edi
c00267b0:	89 c1                	mov    ecx,eax
c00267b2:	eb c4                	jmp    c0026778 <__divdi3+0x58>
c00267b4:	39 eb                	cmp    ebx,ebp
c00267b6:	77 3c                	ja     c00267f4 <__divdi3+0xd4>
c00267b8:	0f bd f3             	bsr    esi,ebx
c00267bb:	83 f6 1f             	xor    esi,0x1f
c00267be:	75 40                	jne    c0026800 <__divdi3+0xe0>
c00267c0:	39 eb                	cmp    ebx,ebp
c00267c2:	72 09                	jb     c00267cd <__divdi3+0xad>
c00267c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00267c7:	0f 87 97 00 00 00    	ja     c0026864 <__divdi3+0x144>
c00267cd:	b9 01 00 00 00       	mov    ecx,0x1
c00267d2:	eb a4                	jmp    c0026778 <__divdi3+0x58>
c00267d4:	f7 d9                	neg    ecx
c00267d6:	83 d3 00             	adc    ebx,0x0
c00267d9:	f7 db                	neg    ebx
c00267db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267e2:	89 dd                	mov    ebp,ebx
c00267e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00267ec:	e9 5f ff ff ff       	jmp    c0026750 <__divdi3+0x30>
c00267f1:	8d 76 00             	lea    esi,[esi+0x0]
c00267f4:	31 f6                	xor    esi,esi
c00267f6:	31 c9                	xor    ecx,ecx
c00267f8:	e9 7b ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c00267fd:	8d 76 00             	lea    esi,[esi+0x0]
c0026800:	b8 20 00 00 00       	mov    eax,0x20
c0026805:	29 f0                	sub    eax,esi
c0026807:	89 f1                	mov    ecx,esi
c0026809:	d3 e3                	shl    ebx,cl
c002680b:	89 fa                	mov    edx,edi
c002680d:	88 c1                	mov    cl,al
c002680f:	d3 ea                	shr    edx,cl
c0026811:	09 da                	or     edx,ebx
c0026813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026817:	89 f1                	mov    ecx,esi
c0026819:	d3 e7                	shl    edi,cl
c002681b:	89 eb                	mov    ebx,ebp
c002681d:	88 c1                	mov    cl,al
c002681f:	d3 eb                	shr    ebx,cl
c0026821:	89 f1                	mov    ecx,esi
c0026823:	d3 e5                	shl    ebp,cl
c0026825:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026828:	88 c1                	mov    cl,al
c002682a:	d3 ea                	shr    edx,cl
c002682c:	09 d5                	or     ebp,edx
c002682e:	89 e8                	mov    eax,ebp
c0026830:	89 da                	mov    edx,ebx
c0026832:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026836:	89 d3                	mov    ebx,edx
c0026838:	89 c5                	mov    ebp,eax
c002683a:	f7 e7                	mul    edi
c002683c:	39 d3                	cmp    ebx,edx
c002683e:	72 18                	jb     c0026858 <__divdi3+0x138>
c0026840:	74 0a                	je     c002684c <__divdi3+0x12c>
c0026842:	89 e9                	mov    ecx,ebp
c0026844:	31 f6                	xor    esi,esi
c0026846:	e9 2d ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c002684b:	90                   	nop
c002684c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002684f:	89 f1                	mov    ecx,esi
c0026851:	d3 e7                	shl    edi,cl
c0026853:	39 c7                	cmp    edi,eax
c0026855:	73 eb                	jae    c0026842 <__divdi3+0x122>
c0026857:	90                   	nop
c0026858:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002685b:	31 f6                	xor    esi,esi
c002685d:	e9 16 ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c0026862:	66 90                	xchg   ax,ax
c0026864:	31 c9                	xor    ecx,ecx
c0026866:	e9 0d ff ff ff       	jmp    c0026778 <__divdi3+0x58>
c002686b:	90                   	nop

c002686c <__moddi3>:
c002686c:	55                   	push   ebp
c002686d:	57                   	push   edi
c002686e:	56                   	push   esi
c002686f:	53                   	push   ebx
c0026870:	83 ec 2c             	sub    esp,0x2c
c0026873:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026877:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002687b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002687f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026883:	85 db                	test   ebx,ebx
c0026885:	0f 88 85 00 00 00    	js     c0026910 <__moddi3+0xa4>
c002688b:	89 de                	mov    esi,ebx
c002688d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026895:	89 d7                	mov    edi,edx
c0026897:	85 d2                	test   edx,edx
c0026899:	79 09                	jns    c00268a4 <__moddi3+0x38>
c002689b:	f7 d8                	neg    eax
c002689d:	83 d2 00             	adc    edx,0x0
c00268a0:	f7 da                	neg    edx
c00268a2:	89 d7                	mov    edi,edx
c00268a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268a8:	89 cd                	mov    ebp,ecx
c00268aa:	85 ff                	test   edi,edi
c00268ac:	75 52                	jne    c0026900 <__moddi3+0x94>
c00268ae:	89 c3                	mov    ebx,eax
c00268b0:	39 f0                	cmp    eax,esi
c00268b2:	76 24                	jbe    c00268d8 <__moddi3+0x6c>
c00268b4:	89 c8                	mov    eax,ecx
c00268b6:	89 f2                	mov    edx,esi
c00268b8:	f7 f3                	div    ebx
c00268ba:	89 d6                	mov    esi,edx
c00268bc:	89 f0                	mov    eax,esi
c00268be:	31 d2                	xor    edx,edx
c00268c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268c4:	85 c9                	test   ecx,ecx
c00268c6:	74 07                	je     c00268cf <__moddi3+0x63>
c00268c8:	f7 d8                	neg    eax
c00268ca:	83 d2 00             	adc    edx,0x0
c00268cd:	f7 da                	neg    edx
c00268cf:	83 c4 2c             	add    esp,0x2c
c00268d2:	5b                   	pop    ebx
c00268d3:	5e                   	pop    esi
c00268d4:	5f                   	pop    edi
c00268d5:	5d                   	pop    ebp
c00268d6:	c3                   	ret    
c00268d7:	90                   	nop
c00268d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00268dc:	85 db                	test   ebx,ebx
c00268de:	75 0d                	jne    c00268ed <__moddi3+0x81>
c00268e0:	b8 01 00 00 00       	mov    eax,0x1
c00268e5:	31 d2                	xor    edx,edx
c00268e7:	f7 f7                	div    edi
c00268e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268ed:	89 f0                	mov    eax,esi
c00268ef:	31 d2                	xor    edx,edx
c00268f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00268f5:	f7 f7                	div    edi
c00268f7:	89 e8                	mov    eax,ebp
c00268f9:	f7 f7                	div    edi
c00268fb:	89 d6                	mov    esi,edx
c00268fd:	eb bd                	jmp    c00268bc <__moddi3+0x50>
c00268ff:	90                   	nop
c0026900:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026904:	39 f7                	cmp    edi,esi
c0026906:	76 20                	jbe    c0026928 <__moddi3+0xbc>
c0026908:	89 c8                	mov    eax,ecx
c002690a:	89 f2                	mov    edx,esi
c002690c:	eb b2                	jmp    c00268c0 <__moddi3+0x54>
c002690e:	66 90                	xchg   ax,ax
c0026910:	f7 d9                	neg    ecx
c0026912:	83 d3 00             	adc    ebx,0x0
c0026915:	f7 db                	neg    ebx
c0026917:	89 de                	mov    esi,ebx
c0026919:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026921:	e9 6f ff ff ff       	jmp    c0026895 <__moddi3+0x29>
c0026926:	66 90                	xchg   ax,ax
c0026928:	0f bd c7             	bsr    eax,edi
c002692b:	83 f0 1f             	xor    eax,0x1f
c002692e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026932:	75 24                	jne    c0026958 <__moddi3+0xec>
c0026934:	39 f7                	cmp    edi,esi
c0026936:	72 06                	jb     c002693e <__moddi3+0xd2>
c0026938:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002693c:	77 0c                	ja     c002694a <__moddi3+0xde>
c002693e:	89 e9                	mov    ecx,ebp
c0026940:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026944:	19 fe                	sbb    esi,edi
c0026946:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002694a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002694e:	89 f2                	mov    edx,esi
c0026950:	e9 6b ff ff ff       	jmp    c00268c0 <__moddi3+0x54>
c0026955:	8d 76 00             	lea    esi,[esi+0x0]
c0026958:	b8 20 00 00 00       	mov    eax,0x20
c002695d:	89 c2                	mov    edx,eax
c002695f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026963:	29 da                	sub    edx,ebx
c0026965:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026969:	88 d9                	mov    cl,bl
c002696b:	d3 e7                	shl    edi,cl
c002696d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026971:	88 d1                	mov    cl,dl
c0026973:	d3 e8                	shr    eax,cl
c0026975:	09 c7                	or     edi,eax
c0026977:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002697b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002697f:	89 d8                	mov    eax,ebx
c0026981:	88 d9                	mov    cl,bl
c0026983:	d3 e7                	shl    edi,cl
c0026985:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026989:	89 f3                	mov    ebx,esi
c002698b:	88 d1                	mov    cl,dl
c002698d:	d3 eb                	shr    ebx,cl
c002698f:	89 c7                	mov    edi,eax
c0026991:	88 c1                	mov    cl,al
c0026993:	d3 e6                	shl    esi,cl
c0026995:	89 e8                	mov    eax,ebp
c0026997:	88 d1                	mov    cl,dl
c0026999:	d3 e8                	shr    eax,cl
c002699b:	09 f0                	or     eax,esi
c002699d:	89 f9                	mov    ecx,edi
c002699f:	d3 e5                	shl    ebp,cl
c00269a1:	89 da                	mov    edx,ebx
c00269a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269a7:	89 d3                	mov    ebx,edx
c00269a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269ad:	89 c6                	mov    esi,eax
c00269af:	89 d1                	mov    ecx,edx
c00269b1:	39 d3                	cmp    ebx,edx
c00269b3:	72 27                	jb     c00269dc <__moddi3+0x170>
c00269b5:	74 21                	je     c00269d8 <__moddi3+0x16c>
c00269b7:	29 f5                	sub    ebp,esi
c00269b9:	19 cb                	sbb    ebx,ecx
c00269bb:	89 de                	mov    esi,ebx
c00269bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00269c1:	d3 e6                	shl    esi,cl
c00269c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00269c7:	89 f9                	mov    ecx,edi
c00269c9:	d3 ed                	shr    ebp,cl
c00269cb:	09 ee                	or     esi,ebp
c00269cd:	89 f0                	mov    eax,esi
c00269cf:	d3 eb                	shr    ebx,cl
c00269d1:	89 da                	mov    edx,ebx
c00269d3:	e9 e8 fe ff ff       	jmp    c00268c0 <__moddi3+0x54>
c00269d8:	39 c5                	cmp    ebp,eax
c00269da:	73 db                	jae    c00269b7 <__moddi3+0x14b>
c00269dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00269e4:	89 d1                	mov    ecx,edx
c00269e6:	89 c6                	mov    esi,eax
c00269e8:	eb cd                	jmp    c00269b7 <__moddi3+0x14b>
c00269ea:	66 90                	xchg   ax,ax

c00269ec <__udivdi3>:
c00269ec:	55                   	push   ebp
c00269ed:	57                   	push   edi
c00269ee:	56                   	push   esi
c00269ef:	53                   	push   ebx
c00269f0:	83 ec 1c             	sub    esp,0x1c
c00269f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00269f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00269fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00269ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a03:	85 d2                	test   edx,edx
c0026a05:	75 41                	jne    c0026a48 <__udivdi3+0x5c>
c0026a07:	39 f7                	cmp    edi,esi
c0026a09:	76 15                	jbe    c0026a20 <__udivdi3+0x34>
c0026a0b:	89 e8                	mov    eax,ebp
c0026a0d:	89 f2                	mov    edx,esi
c0026a0f:	f7 f7                	div    edi
c0026a11:	31 db                	xor    ebx,ebx
c0026a13:	89 da                	mov    edx,ebx
c0026a15:	83 c4 1c             	add    esp,0x1c
c0026a18:	5b                   	pop    ebx
c0026a19:	5e                   	pop    esi
c0026a1a:	5f                   	pop    edi
c0026a1b:	5d                   	pop    ebp
c0026a1c:	c3                   	ret    
c0026a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a20:	89 f9                	mov    ecx,edi
c0026a22:	85 ff                	test   edi,edi
c0026a24:	75 0b                	jne    c0026a31 <__udivdi3+0x45>
c0026a26:	b8 01 00 00 00       	mov    eax,0x1
c0026a2b:	31 d2                	xor    edx,edx
c0026a2d:	f7 f7                	div    edi
c0026a2f:	89 c1                	mov    ecx,eax
c0026a31:	31 d2                	xor    edx,edx
c0026a33:	89 f0                	mov    eax,esi
c0026a35:	f7 f1                	div    ecx
c0026a37:	89 c3                	mov    ebx,eax
c0026a39:	89 e8                	mov    eax,ebp
c0026a3b:	f7 f1                	div    ecx
c0026a3d:	89 da                	mov    edx,ebx
c0026a3f:	83 c4 1c             	add    esp,0x1c
c0026a42:	5b                   	pop    ebx
c0026a43:	5e                   	pop    esi
c0026a44:	5f                   	pop    edi
c0026a45:	5d                   	pop    ebp
c0026a46:	c3                   	ret    
c0026a47:	90                   	nop
c0026a48:	39 f2                	cmp    edx,esi
c0026a4a:	77 1c                	ja     c0026a68 <__udivdi3+0x7c>
c0026a4c:	0f bd da             	bsr    ebx,edx
c0026a4f:	83 f3 1f             	xor    ebx,0x1f
c0026a52:	75 24                	jne    c0026a78 <__udivdi3+0x8c>
c0026a54:	39 f2                	cmp    edx,esi
c0026a56:	72 08                	jb     c0026a60 <__udivdi3+0x74>
c0026a58:	39 ef                	cmp    edi,ebp
c0026a5a:	0f 87 84 00 00 00    	ja     c0026ae4 <__udivdi3+0xf8>
c0026a60:	b8 01 00 00 00       	mov    eax,0x1
c0026a65:	eb ac                	jmp    c0026a13 <__udivdi3+0x27>
c0026a67:	90                   	nop
c0026a68:	31 db                	xor    ebx,ebx
c0026a6a:	31 c0                	xor    eax,eax
c0026a6c:	89 da                	mov    edx,ebx
c0026a6e:	83 c4 1c             	add    esp,0x1c
c0026a71:	5b                   	pop    ebx
c0026a72:	5e                   	pop    esi
c0026a73:	5f                   	pop    edi
c0026a74:	5d                   	pop    ebp
c0026a75:	c3                   	ret    
c0026a76:	66 90                	xchg   ax,ax
c0026a78:	b8 20 00 00 00       	mov    eax,0x20
c0026a7d:	29 d8                	sub    eax,ebx
c0026a7f:	88 d9                	mov    cl,bl
c0026a81:	d3 e2                	shl    edx,cl
c0026a83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026a87:	89 fa                	mov    edx,edi
c0026a89:	88 c1                	mov    cl,al
c0026a8b:	d3 ea                	shr    edx,cl
c0026a8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a91:	09 d1                	or     ecx,edx
c0026a93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a97:	88 d9                	mov    cl,bl
c0026a99:	d3 e7                	shl    edi,cl
c0026a9b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a9f:	89 f7                	mov    edi,esi
c0026aa1:	88 c1                	mov    cl,al
c0026aa3:	d3 ef                	shr    edi,cl
c0026aa5:	88 d9                	mov    cl,bl
c0026aa7:	d3 e6                	shl    esi,cl
c0026aa9:	89 ea                	mov    edx,ebp
c0026aab:	88 c1                	mov    cl,al
c0026aad:	d3 ea                	shr    edx,cl
c0026aaf:	09 d6                	or     esi,edx
c0026ab1:	89 f0                	mov    eax,esi
c0026ab3:	89 fa                	mov    edx,edi
c0026ab5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026ab9:	89 d7                	mov    edi,edx
c0026abb:	89 c6                	mov    esi,eax
c0026abd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026ac1:	39 d7                	cmp    edi,edx
c0026ac3:	72 13                	jb     c0026ad8 <__udivdi3+0xec>
c0026ac5:	74 09                	je     c0026ad0 <__udivdi3+0xe4>
c0026ac7:	89 f0                	mov    eax,esi
c0026ac9:	31 db                	xor    ebx,ebx
c0026acb:	e9 43 ff ff ff       	jmp    c0026a13 <__udivdi3+0x27>
c0026ad0:	88 d9                	mov    cl,bl
c0026ad2:	d3 e5                	shl    ebp,cl
c0026ad4:	39 c5                	cmp    ebp,eax
c0026ad6:	73 ef                	jae    c0026ac7 <__udivdi3+0xdb>
c0026ad8:	8d 46 ff             	lea    eax,[esi-0x1]
c0026adb:	31 db                	xor    ebx,ebx
c0026add:	e9 31 ff ff ff       	jmp    c0026a13 <__udivdi3+0x27>
c0026ae2:	66 90                	xchg   ax,ax
c0026ae4:	31 c0                	xor    eax,eax
c0026ae6:	e9 28 ff ff ff       	jmp    c0026a13 <__udivdi3+0x27>
c0026aeb:	90                   	nop

c0026aec <__umoddi3>:
c0026aec:	55                   	push   ebp
c0026aed:	57                   	push   edi
c0026aee:	56                   	push   esi
c0026aef:	53                   	push   ebx
c0026af0:	83 ec 1c             	sub    esp,0x1c
c0026af3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026af7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026afb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b03:	89 da                	mov    edx,ebx
c0026b05:	85 c0                	test   eax,eax
c0026b07:	75 37                	jne    c0026b40 <__umoddi3+0x54>
c0026b09:	39 df                	cmp    edi,ebx
c0026b0b:	76 13                	jbe    c0026b20 <__umoddi3+0x34>
c0026b0d:	89 f0                	mov    eax,esi
c0026b0f:	f7 f7                	div    edi
c0026b11:	89 d0                	mov    eax,edx
c0026b13:	31 d2                	xor    edx,edx
c0026b15:	83 c4 1c             	add    esp,0x1c
c0026b18:	5b                   	pop    ebx
c0026b19:	5e                   	pop    esi
c0026b1a:	5f                   	pop    edi
c0026b1b:	5d                   	pop    ebp
c0026b1c:	c3                   	ret    
c0026b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b20:	89 fd                	mov    ebp,edi
c0026b22:	85 ff                	test   edi,edi
c0026b24:	75 0b                	jne    c0026b31 <__umoddi3+0x45>
c0026b26:	b8 01 00 00 00       	mov    eax,0x1
c0026b2b:	31 d2                	xor    edx,edx
c0026b2d:	f7 f7                	div    edi
c0026b2f:	89 c5                	mov    ebp,eax
c0026b31:	89 d8                	mov    eax,ebx
c0026b33:	31 d2                	xor    edx,edx
c0026b35:	f7 f5                	div    ebp
c0026b37:	89 f0                	mov    eax,esi
c0026b39:	f7 f5                	div    ebp
c0026b3b:	89 d0                	mov    eax,edx
c0026b3d:	eb d4                	jmp    c0026b13 <__umoddi3+0x27>
c0026b3f:	90                   	nop
c0026b40:	89 f1                	mov    ecx,esi
c0026b42:	39 d8                	cmp    eax,ebx
c0026b44:	76 0a                	jbe    c0026b50 <__umoddi3+0x64>
c0026b46:	89 f0                	mov    eax,esi
c0026b48:	83 c4 1c             	add    esp,0x1c
c0026b4b:	5b                   	pop    ebx
c0026b4c:	5e                   	pop    esi
c0026b4d:	5f                   	pop    edi
c0026b4e:	5d                   	pop    ebp
c0026b4f:	c3                   	ret    
c0026b50:	0f bd e8             	bsr    ebp,eax
c0026b53:	83 f5 1f             	xor    ebp,0x1f
c0026b56:	75 1c                	jne    c0026b74 <__umoddi3+0x88>
c0026b58:	39 d8                	cmp    eax,ebx
c0026b5a:	72 04                	jb     c0026b60 <__umoddi3+0x74>
c0026b5c:	39 f7                	cmp    edi,esi
c0026b5e:	77 08                	ja     c0026b68 <__umoddi3+0x7c>
c0026b60:	89 da                	mov    edx,ebx
c0026b62:	29 fe                	sub    esi,edi
c0026b64:	19 c2                	sbb    edx,eax
c0026b66:	89 f1                	mov    ecx,esi
c0026b68:	89 c8                	mov    eax,ecx
c0026b6a:	83 c4 1c             	add    esp,0x1c
c0026b6d:	5b                   	pop    ebx
c0026b6e:	5e                   	pop    esi
c0026b6f:	5f                   	pop    edi
c0026b70:	5d                   	pop    ebp
c0026b71:	c3                   	ret    
c0026b72:	66 90                	xchg   ax,ax
c0026b74:	ba 20 00 00 00       	mov    edx,0x20
c0026b79:	29 ea                	sub    edx,ebp
c0026b7b:	89 e9                	mov    ecx,ebp
c0026b7d:	d3 e0                	shl    eax,cl
c0026b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b83:	89 f8                	mov    eax,edi
c0026b85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026b89:	88 d1                	mov    cl,dl
c0026b8b:	d3 e8                	shr    eax,cl
c0026b8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b91:	09 c1                	or     ecx,eax
c0026b93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b97:	89 e9                	mov    ecx,ebp
c0026b99:	d3 e7                	shl    edi,cl
c0026b9b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b9f:	89 d8                	mov    eax,ebx
c0026ba1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026ba5:	88 d1                	mov    cl,dl
c0026ba7:	d3 e8                	shr    eax,cl
c0026ba9:	89 c7                	mov    edi,eax
c0026bab:	89 e9                	mov    ecx,ebp
c0026bad:	d3 e3                	shl    ebx,cl
c0026baf:	89 f0                	mov    eax,esi
c0026bb1:	88 d1                	mov    cl,dl
c0026bb3:	d3 e8                	shr    eax,cl
c0026bb5:	09 d8                	or     eax,ebx
c0026bb7:	89 e9                	mov    ecx,ebp
c0026bb9:	d3 e6                	shl    esi,cl
c0026bbb:	89 f3                	mov    ebx,esi
c0026bbd:	89 fa                	mov    edx,edi
c0026bbf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026bc3:	89 d1                	mov    ecx,edx
c0026bc5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026bc9:	89 c6                	mov    esi,eax
c0026bcb:	89 d7                	mov    edi,edx
c0026bcd:	39 d1                	cmp    ecx,edx
c0026bcf:	72 27                	jb     c0026bf8 <__umoddi3+0x10c>
c0026bd1:	74 21                	je     c0026bf4 <__umoddi3+0x108>
c0026bd3:	89 ca                	mov    edx,ecx
c0026bd5:	29 f3                	sub    ebx,esi
c0026bd7:	19 fa                	sbb    edx,edi
c0026bd9:	89 d0                	mov    eax,edx
c0026bdb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026bdf:	d3 e0                	shl    eax,cl
c0026be1:	89 e9                	mov    ecx,ebp
c0026be3:	d3 eb                	shr    ebx,cl
c0026be5:	09 d8                	or     eax,ebx
c0026be7:	d3 ea                	shr    edx,cl
c0026be9:	83 c4 1c             	add    esp,0x1c
c0026bec:	5b                   	pop    ebx
c0026bed:	5e                   	pop    esi
c0026bee:	5f                   	pop    edi
c0026bef:	5d                   	pop    ebp
c0026bf0:	c3                   	ret    
c0026bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0026bf4:	39 c3                	cmp    ebx,eax
c0026bf6:	73 db                	jae    c0026bd3 <__umoddi3+0xe7>
c0026bf8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026bfc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c00:	89 d7                	mov    edi,edx
c0026c02:	89 c6                	mov    esi,eax
c0026c04:	eb cd                	jmp    c0026bd3 <__umoddi3+0xe7>

c0026c06 <__addsf3>:
c0026c06:	55                   	push   ebp
c0026c07:	89 e5                	mov    ebp,esp
c0026c09:	57                   	push   edi
c0026c0a:	56                   	push   esi
c0026c0b:	53                   	push   ebx
c0026c0c:	83 ec 08             	sub    esp,0x8
c0026c0f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c12:	89 fa                	mov    edx,edi
c0026c14:	89 f8                	mov    eax,edi
c0026c16:	c1 f8 17             	sar    eax,0x17
c0026c19:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c1c:	c1 e2 08             	shl    edx,0x8
c0026c1f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c25:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c28:	89 de                	mov    esi,ebx
c0026c2a:	c1 fe 17             	sar    esi,0x17
c0026c2d:	c1 e3 08             	shl    ebx,0x8
c0026c30:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c36:	31 f0                	xor    eax,esi
c0026c38:	0f 88 3b 01 00 00    	js     c0026d79 <__addsf3+0x173>
c0026c3e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c41:	29 f1                	sub    ecx,esi
c0026c43:	85 c9                	test   ecx,ecx
c0026c45:	7e 54                	jle    c0026c9b <__addsf3+0x95>
c0026c47:	89 f0                	mov    eax,esi
c0026c49:	84 c0                	test   al,al
c0026c4b:	75 10                	jne    c0026c5d <__addsf3+0x57>
c0026c4d:	85 db                	test   ebx,ebx
c0026c4f:	0f 84 aa 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026c55:	49                   	dec    ecx
c0026c56:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c59:	74 38                	je     c0026c93 <__addsf3+0x8d>
c0026c5b:	eb 13                	jmp    c0026c70 <__addsf3+0x6a>
c0026c5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c60:	f7 d0                	not    eax
c0026c62:	84 c0                	test   al,al
c0026c64:	0f 84 95 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026c6a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c70:	83 f9 1f             	cmp    ecx,0x1f
c0026c73:	0f 8f 86 02 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026c79:	89 de                	mov    esi,ebx
c0026c7b:	d3 ee                	shr    esi,cl
c0026c7d:	b8 20 00 00 00       	mov    eax,0x20
c0026c82:	29 c8                	sub    eax,ecx
c0026c84:	89 c1                	mov    ecx,eax
c0026c86:	d3 e3                	shl    ebx,cl
c0026c88:	31 c0                	xor    eax,eax
c0026c8a:	85 db                	test   ebx,ebx
c0026c8c:	0f 95 c0             	setne  al
c0026c8f:	09 f0                	or     eax,esi
c0026c91:	01 d0                	add    eax,edx
c0026c93:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c96:	e9 b6 00 00 00       	jmp    c0026d51 <__addsf3+0x14b>
c0026c9b:	74 5c                	je     c0026cf9 <__addsf3+0xf3>
c0026c9d:	89 f1                	mov    ecx,esi
c0026c9f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026ca2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ca5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ca9:	75 14                	jne    c0026cbf <__addsf3+0xb9>
c0026cab:	85 d2                	test   edx,edx
c0026cad:	0f 84 4c 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026cb3:	49                   	dec    ecx
c0026cb4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cb7:	0f 84 94 00 00 00    	je     c0026d51 <__addsf3+0x14b>
c0026cbd:	eb 12                	jmp    c0026cd1 <__addsf3+0xcb>
c0026cbf:	89 f0                	mov    eax,esi
c0026cc1:	f7 d0                	not    eax
c0026cc3:	84 c0                	test   al,al
c0026cc5:	0f 84 34 02 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026ccb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cd1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cd4:	83 f9 1f             	cmp    ecx,0x1f
c0026cd7:	0f 8f 22 02 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026cdd:	89 d7                	mov    edi,edx
c0026cdf:	d3 ef                	shr    edi,cl
c0026ce1:	b8 20 00 00 00       	mov    eax,0x20
c0026ce6:	29 c8                	sub    eax,ecx
c0026ce8:	89 c1                	mov    ecx,eax
c0026cea:	d3 e2                	shl    edx,cl
c0026cec:	31 c0                	xor    eax,eax
c0026cee:	85 d2                	test   edx,edx
c0026cf0:	0f 95 c0             	setne  al
c0026cf3:	09 f8                	or     eax,edi
c0026cf5:	01 d8                	add    eax,ebx
c0026cf7:	eb 58                	jmp    c0026d51 <__addsf3+0x14b>
c0026cf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cfc:	8d 70 01             	lea    esi,[eax+0x1]
c0026cff:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d05:	75 32                	jne    c0026d39 <__addsf3+0x133>
c0026d07:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d0b:	75 1f                	jne    c0026d2c <__addsf3+0x126>
c0026d0d:	85 d2                	test   edx,edx
c0026d0f:	0f 84 e0 01 00 00    	je     c0026ef5 <__addsf3+0x2ef>
c0026d15:	85 db                	test   ebx,ebx
c0026d17:	0f 84 e2 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026d1d:	89 d0                	mov    eax,edx
c0026d1f:	01 d8                	add    eax,ebx
c0026d21:	0f 89 a9 01 00 00    	jns    c0026ed0 <__addsf3+0x2ca>
c0026d27:	e9 9d 01 00 00       	jmp    c0026ec9 <__addsf3+0x2c3>
c0026d2c:	85 d2                	test   edx,edx
c0026d2e:	0f 85 cb 01 00 00    	jne    c0026eff <__addsf3+0x2f9>
c0026d34:	e9 bc 01 00 00       	jmp    c0026ef5 <__addsf3+0x2ef>
c0026d39:	31 c0                	xor    eax,eax
c0026d3b:	89 f1                	mov    ecx,esi
c0026d3d:	f7 d1                	not    ecx
c0026d3f:	84 c9                	test   cl,cl
c0026d41:	0f 84 90 01 00 00    	je     c0026ed7 <__addsf3+0x2d1>
c0026d47:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d4a:	d1 e8                	shr    eax,1
c0026d4c:	e9 86 01 00 00       	jmp    c0026ed7 <__addsf3+0x2d1>
c0026d51:	85 c0                	test   eax,eax
c0026d53:	0f 89 7e 01 00 00    	jns    c0026ed7 <__addsf3+0x2d1>
c0026d59:	46                   	inc    esi
c0026d5a:	89 f2                	mov    edx,esi
c0026d5c:	f7 d2                	not    edx
c0026d5e:	84 d2                	test   dl,dl
c0026d60:	0f 84 6f 01 00 00    	je     c0026ed5 <__addsf3+0x2cf>
c0026d66:	89 c2                	mov    edx,eax
c0026d68:	83 e2 01             	and    edx,0x1
c0026d6b:	d1 e8                	shr    eax,1
c0026d6d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026d72:	09 d0                	or     eax,edx
c0026d74:	e9 5e 01 00 00       	jmp    c0026ed7 <__addsf3+0x2d1>
c0026d79:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026d7d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d80:	89 f0                	mov    eax,esi
c0026d82:	0f b6 c0             	movzx  eax,al
c0026d85:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026d88:	29 c1                	sub    ecx,eax
c0026d8a:	85 c9                	test   ecx,ecx
c0026d8c:	7e 55                	jle    c0026de3 <__addsf3+0x1dd>
c0026d8e:	85 c0                	test   eax,eax
c0026d90:	75 11                	jne    c0026da3 <__addsf3+0x19d>
c0026d92:	85 db                	test   ebx,ebx
c0026d94:	0f 84 65 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026d9a:	49                   	dec    ecx
c0026d9b:	75 19                	jne    c0026db6 <__addsf3+0x1b0>
c0026d9d:	89 d0                	mov    eax,edx
c0026d9f:	29 d8                	sub    eax,ebx
c0026da1:	eb 38                	jmp    c0026ddb <__addsf3+0x1d5>
c0026da3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026da6:	f7 d0                	not    eax
c0026da8:	84 c0                	test   al,al
c0026daa:	0f 84 4f 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026db0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026db6:	83 f9 1f             	cmp    ecx,0x1f
c0026db9:	0f 8f 40 01 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026dbf:	89 de                	mov    esi,ebx
c0026dc1:	d3 ee                	shr    esi,cl
c0026dc3:	b8 20 00 00 00       	mov    eax,0x20
c0026dc8:	29 c8                	sub    eax,ecx
c0026dca:	89 c1                	mov    ecx,eax
c0026dcc:	d3 e3                	shl    ebx,cl
c0026dce:	31 c0                	xor    eax,eax
c0026dd0:	85 db                	test   ebx,ebx
c0026dd2:	0f 95 c0             	setne  al
c0026dd5:	09 f0                	or     eax,esi
c0026dd7:	29 c2                	sub    edx,eax
c0026dd9:	89 d0                	mov    eax,edx
c0026ddb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026dde:	e9 af 00 00 00       	jmp    c0026e92 <__addsf3+0x28c>
c0026de3:	74 5c                	je     c0026e41 <__addsf3+0x23b>
c0026de5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026de8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026deb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026def:	75 14                	jne    c0026e05 <__addsf3+0x1ff>
c0026df1:	85 d2                	test   edx,edx
c0026df3:	0f 84 06 01 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026df9:	48                   	dec    eax
c0026dfa:	75 1b                	jne    c0026e17 <__addsf3+0x211>
c0026dfc:	89 d8                	mov    eax,ebx
c0026dfe:	29 d0                	sub    eax,edx
c0026e00:	e9 8d 00 00 00       	jmp    c0026e92 <__addsf3+0x28c>
c0026e05:	89 f1                	mov    ecx,esi
c0026e07:	f7 d1                	not    ecx
c0026e09:	84 c9                	test   cl,cl
c0026e0b:	0f 84 ee 00 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026e11:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e1a:	83 f8 1f             	cmp    eax,0x1f
c0026e1d:	0f 8f dc 00 00 00    	jg     c0026eff <__addsf3+0x2f9>
c0026e23:	89 d7                	mov    edi,edx
c0026e25:	88 c1                	mov    cl,al
c0026e27:	d3 ef                	shr    edi,cl
c0026e29:	b9 20 00 00 00       	mov    ecx,0x20
c0026e2e:	29 c1                	sub    ecx,eax
c0026e30:	d3 e2                	shl    edx,cl
c0026e32:	31 c0                	xor    eax,eax
c0026e34:	85 d2                	test   edx,edx
c0026e36:	0f 95 c0             	setne  al
c0026e39:	09 f8                	or     eax,edi
c0026e3b:	29 c3                	sub    ebx,eax
c0026e3d:	89 d8                	mov    eax,ebx
c0026e3f:	eb 51                	jmp    c0026e92 <__addsf3+0x28c>
c0026e41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e44:	40                   	inc    eax
c0026e45:	a8 fe                	test   al,0xfe
c0026e47:	75 3d                	jne    c0026e86 <__addsf3+0x280>
c0026e49:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e4d:	0f 85 a7 00 00 00    	jne    c0026efa <__addsf3+0x2f4>
c0026e53:	85 d2                	test   edx,edx
c0026e55:	75 12                	jne    c0026e69 <__addsf3+0x263>
c0026e57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5a:	85 db                	test   ebx,ebx
c0026e5c:	0f 85 9d 00 00 00    	jne    c0026eff <__addsf3+0x2f9>
c0026e62:	31 ff                	xor    edi,edi
c0026e64:	e9 96 00 00 00       	jmp    c0026eff <__addsf3+0x2f9>
c0026e69:	85 db                	test   ebx,ebx
c0026e6b:	0f 84 8e 00 00 00    	je     c0026eff <__addsf3+0x2f9>
c0026e71:	89 d0                	mov    eax,edx
c0026e73:	29 d8                	sub    eax,ebx
c0026e75:	79 06                	jns    c0026e7d <__addsf3+0x277>
c0026e77:	89 d8                	mov    eax,ebx
c0026e79:	29 d0                	sub    eax,edx
c0026e7b:	eb 5a                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026e7d:	bf 00 00 00 00       	mov    edi,0x0
c0026e82:	74 7b                	je     c0026eff <__addsf3+0x2f9>
c0026e84:	eb 4a                	jmp    c0026ed0 <__addsf3+0x2ca>
c0026e86:	89 d0                	mov    eax,edx
c0026e88:	29 d8                	sub    eax,ebx
c0026e8a:	79 12                	jns    c0026e9e <__addsf3+0x298>
c0026e8c:	89 d8                	mov    eax,ebx
c0026e8e:	29 d0                	sub    eax,edx
c0026e90:	eb 09                	jmp    c0026e9b <__addsf3+0x295>
c0026e92:	85 c0                	test   eax,eax
c0026e94:	79 41                	jns    c0026ed7 <__addsf3+0x2d1>
c0026e96:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026e9b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026e9e:	31 f6                	xor    esi,esi
c0026ea0:	85 c0                	test   eax,eax
c0026ea2:	74 33                	je     c0026ed7 <__addsf3+0x2d1>
c0026ea4:	0f bd c8             	bsr    ecx,eax
c0026ea7:	83 f1 1f             	xor    ecx,0x1f
c0026eaa:	d3 e0                	shl    eax,cl
c0026eac:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026eb0:	39 ca                	cmp    edx,ecx
c0026eb2:	7f 10                	jg     c0026ec4 <__addsf3+0x2be>
c0026eb4:	29 d1                	sub    ecx,edx
c0026eb6:	41                   	inc    ecx
c0026eb7:	d3 e8                	shr    eax,cl
c0026eb9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ebc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ec2:	eb 13                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026ec4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ec7:	29 ce                	sub    esi,ecx
c0026ec9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ece:	eb 07                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026ed0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ed3:	eb 02                	jmp    c0026ed7 <__addsf3+0x2d1>
c0026ed5:	31 c0                	xor    eax,eax
c0026ed7:	89 c2                	mov    edx,eax
c0026ed9:	c1 ea 08             	shr    edx,0x8
c0026edc:	a8 7f                	test   al,0x7f
c0026ede:	0f 95 c1             	setne  cl
c0026ee1:	09 d1                	or     ecx,edx
c0026ee3:	83 e1 01             	and    ecx,0x1
c0026ee6:	c1 e8 07             	shr    eax,0x7
c0026ee9:	21 c8                	and    eax,ecx
c0026eeb:	c1 e6 17             	shl    esi,0x17
c0026eee:	09 d6                	or     esi,edx
c0026ef0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026ef3:	eb 0a                	jmp    c0026eff <__addsf3+0x2f9>
c0026ef5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ef8:	eb 05                	jmp    c0026eff <__addsf3+0x2f9>
c0026efa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026eff:	89 f8                	mov    eax,edi
c0026f01:	5a                   	pop    edx
c0026f02:	59                   	pop    ecx
c0026f03:	5b                   	pop    ebx
c0026f04:	5e                   	pop    esi
c0026f05:	5f                   	pop    edi
c0026f06:	5d                   	pop    ebp
c0026f07:	c3                   	ret    

c0026f08 <__subsf3>:
c0026f08:	55                   	push   ebp
c0026f09:	89 e5                	mov    ebp,esp
c0026f0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f0e:	05 00 00 00 80       	add    eax,0x80000000
c0026f13:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f16:	5d                   	pop    ebp
c0026f17:	e9 ea fc ff ff       	jmp    c0026c06 <__addsf3>

c0026f1c <__negsf2>:
c0026f1c:	55                   	push   ebp
c0026f1d:	89 e5                	mov    ebp,esp
c0026f1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f22:	05 00 00 00 80       	add    eax,0x80000000
c0026f27:	5d                   	pop    ebp
c0026f28:	c3                   	ret    

c0026f29 <__mulsf3>:
c0026f29:	55                   	push   ebp
c0026f2a:	89 e5                	mov    ebp,esp
c0026f2c:	57                   	push   edi
c0026f2d:	56                   	push   esi
c0026f2e:	53                   	push   ebx
c0026f2f:	83 ec 1c             	sub    esp,0x1c
c0026f32:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f35:	89 f0                	mov    eax,esi
c0026f37:	89 f1                	mov    ecx,esi
c0026f39:	c1 f9 17             	sar    ecx,0x17
c0026f3c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f3f:	c1 e0 08             	shl    eax,0x8
c0026f42:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f47:	89 c1                	mov    ecx,eax
c0026f49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f4c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f4f:	89 c7                	mov    edi,eax
c0026f51:	c1 ff 17             	sar    edi,0x17
c0026f54:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f58:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f5b:	89 f8                	mov    eax,edi
c0026f5d:	0f b6 c0             	movzx  eax,al
c0026f60:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026f63:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026f67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f6a:	42                   	inc    edx
c0026f6b:	80 e2 fe             	and    dl,0xfe
c0026f6e:	75 7b                	jne    c0026feb <__mulsf3+0xc2>
c0026f70:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f74:	74 54                	je     c0026fca <__mulsf3+0xa1>
c0026f76:	85 c9                	test   ecx,ecx
c0026f78:	0f 85 64 01 00 00    	jne    c00270e2 <__mulsf3+0x1b9>
c0026f7e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f81:	80 e2 fe             	and    dl,0xfe
c0026f84:	75 1f                	jne    c0026fa5 <__mulsf3+0x7c>
c0026f86:	85 c0                	test   eax,eax
c0026f88:	b8 00 00 00 00       	mov    eax,0x0
c0026f8d:	74 29                	je     c0026fb8 <__mulsf3+0x8f>
c0026f8f:	53                   	push   ebx
c0026f90:	53                   	push   ebx
c0026f91:	50                   	push   eax
c0026f92:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f95:	e8 96 05 00 00       	call   c0027530 <__nesf2>
c0026f9a:	83 c4 10             	add    esp,0x10
c0026f9d:	85 c0                	test   eax,eax
c0026f9f:	0f 85 3a 01 00 00    	jne    c00270df <__mulsf3+0x1b6>
c0026fa5:	85 ff                	test   edi,edi
c0026fa7:	0f 89 35 01 00 00    	jns    c00270e2 <__mulsf3+0x1b9>
c0026fad:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026fb3:	e9 2a 01 00 00       	jmp    c00270e2 <__mulsf3+0x1b9>
c0026fb8:	51                   	push   ecx
c0026fb9:	51                   	push   ecx
c0026fba:	50                   	push   eax
c0026fbb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fbe:	e8 6d 05 00 00       	call   c0027530 <__nesf2>
c0026fc3:	83 c4 10             	add    esp,0x10
c0026fc6:	85 c0                	test   eax,eax
c0026fc8:	eb 15                	jmp    c0026fdf <__mulsf3+0xb6>
c0026fca:	85 c9                	test   ecx,ecx
c0026fcc:	74 0b                	je     c0026fd9 <__mulsf3+0xb0>
c0026fce:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026fd1:	01 c9                	add    ecx,ecx
c0026fd3:	78 16                	js     c0026feb <__mulsf3+0xc2>
c0026fd5:	89 d3                	mov    ebx,edx
c0026fd7:	eb f5                	jmp    c0026fce <__mulsf3+0xa5>
c0026fd9:	89 f8                	mov    eax,edi
c0026fdb:	f7 d0                	not    eax
c0026fdd:	84 c0                	test   al,al
c0026fdf:	75 c4                	jne    c0026fa5 <__mulsf3+0x7c>
c0026fe1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026fe6:	e9 f7 00 00 00       	jmp    c00270e2 <__mulsf3+0x1b9>
c0026feb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026fee:	c1 e6 08             	shl    esi,0x8
c0026ff1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026ff7:	8d 57 01             	lea    edx,[edi+0x1]
c0026ffa:	80 e2 fe             	and    dl,0xfe
c0026ffd:	75 63                	jne    c0027062 <__mulsf3+0x139>
c0026fff:	85 c0                	test   eax,eax
c0027001:	74 2f                	je     c0027032 <__mulsf3+0x109>
c0027003:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027007:	0f 89 d2 00 00 00    	jns    c00270df <__mulsf3+0x1b6>
c002700d:	52                   	push   edx
c002700e:	52                   	push   edx
c002700f:	6a 00                	push   0x0
c0027011:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027014:	e8 dc 04 00 00       	call   c00274f5 <__eqsf2>
c0027019:	83 c4 10             	add    esp,0x10
c002701c:	85 c0                	test   eax,eax
c002701e:	0f 85 bb 00 00 00    	jne    c00270df <__mulsf3+0x1b6>
c0027024:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027027:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002702d:	e9 b0 00 00 00       	jmp    c00270e2 <__mulsf3+0x1b9>
c0027032:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027035:	50                   	push   eax
c0027036:	50                   	push   eax
c0027037:	6a 00                	push   0x0
c0027039:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703c:	e8 b4 04 00 00       	call   c00274f5 <__eqsf2>
c0027041:	83 c4 10             	add    esp,0x10
c0027044:	85 c0                	test   eax,eax
c0027046:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027049:	75 0c                	jne    c0027057 <__mulsf3+0x12e>
c002704b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002704f:	0f 89 8a 00 00 00    	jns    c00270df <__mulsf3+0x1b6>
c0027055:	eb cd                	jmp    c0027024 <__mulsf3+0xfb>
c0027057:	8d 43 ff             	lea    eax,[ebx-0x1]
c002705a:	01 f6                	add    esi,esi
c002705c:	78 04                	js     c0027062 <__mulsf3+0x139>
c002705e:	89 c3                	mov    ebx,eax
c0027060:	eb f5                	jmp    c0027057 <__mulsf3+0x12e>
c0027062:	89 c8                	mov    eax,ecx
c0027064:	0d 00 00 00 80       	or     eax,0x80000000
c0027069:	81 ce 00 00 00 80    	or     esi,0x80000000
c002706f:	f7 e6                	mul    esi
c0027071:	85 c0                	test   eax,eax
c0027073:	0f 95 c0             	setne  al
c0027076:	0f b6 c0             	movzx  eax,al
c0027079:	09 c2                	or     edx,eax
c002707b:	78 03                	js     c0027080 <__mulsf3+0x157>
c002707d:	01 d2                	add    edx,edx
c002707f:	4b                   	dec    ebx
c0027080:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027086:	7f 22                	jg     c00270aa <__mulsf3+0x181>
c0027088:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002708e:	85 db                	test   ebx,ebx
c0027090:	7f 23                	jg     c00270b5 <__mulsf3+0x18c>
c0027092:	83 fb e9             	cmp    ebx,0xffffffe9
c0027095:	7c 1a                	jl     c00270b1 <__mulsf3+0x188>
c0027097:	81 ca 00 00 00 80    	or     edx,0x80000000
c002709d:	b9 01 00 00 00       	mov    ecx,0x1
c00270a2:	29 d9                	sub    ecx,ebx
c00270a4:	d3 ea                	shr    edx,cl
c00270a6:	31 db                	xor    ebx,ebx
c00270a8:	eb 0b                	jmp    c00270b5 <__mulsf3+0x18c>
c00270aa:	bb ff 00 00 00       	mov    ebx,0xff
c00270af:	eb 02                	jmp    c00270b3 <__mulsf3+0x18a>
c00270b1:	31 db                	xor    ebx,ebx
c00270b3:	31 d2                	xor    edx,edx
c00270b5:	89 d0                	mov    eax,edx
c00270b7:	c1 e8 08             	shr    eax,0x8
c00270ba:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270bd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270c3:	09 fb                	or     ebx,edi
c00270c5:	c1 e3 17             	shl    ebx,0x17
c00270c8:	09 c3                	or     ebx,eax
c00270ca:	f6 c2 7f             	test   dl,0x7f
c00270cd:	0f 95 c1             	setne  cl
c00270d0:	09 c8                	or     eax,ecx
c00270d2:	83 e0 01             	and    eax,0x1
c00270d5:	c1 ea 07             	shr    edx,0x7
c00270d8:	21 c2                	and    edx,eax
c00270da:	8d 34 13             	lea    esi,[ebx+edx*1]
c00270dd:	eb 03                	jmp    c00270e2 <__mulsf3+0x1b9>
c00270df:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00270e2:	89 f0                	mov    eax,esi
c00270e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270e7:	5b                   	pop    ebx
c00270e8:	5e                   	pop    esi
c00270e9:	5f                   	pop    edi
c00270ea:	5d                   	pop    ebp
c00270eb:	c3                   	ret    

c00270ec <__divsf3>:
c00270ec:	55                   	push   ebp
c00270ed:	89 e5                	mov    ebp,esp
c00270ef:	57                   	push   edi
c00270f0:	56                   	push   esi
c00270f1:	53                   	push   ebx
c00270f2:	83 ec 1c             	sub    esp,0x1c
c00270f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00270f8:	89 d8                	mov    eax,ebx
c00270fa:	89 d9                	mov    ecx,ebx
c00270fc:	c1 f9 17             	sar    ecx,0x17
c00270ff:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027102:	c1 e0 08             	shl    eax,0x8
c0027105:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002710a:	89 c1                	mov    ecx,eax
c002710c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002710f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027112:	89 c7                	mov    edi,eax
c0027114:	c1 ff 17             	sar    edi,0x17
c0027117:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002711b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002711e:	89 f8                	mov    eax,edi
c0027120:	0f b6 c0             	movzx  eax,al
c0027123:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027126:	29 c6                	sub    esi,eax
c0027128:	83 c6 7f             	add    esi,0x7f
c002712b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002712e:	42                   	inc    edx
c002712f:	80 e2 fe             	and    dl,0xfe
c0027132:	0f 85 9c 00 00 00    	jne    c00271d4 <__divsf3+0xe8>
c0027138:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002713c:	74 33                	je     c0027171 <__divsf3+0x85>
c002713e:	85 c9                	test   ecx,ecx
c0027140:	0f 85 c7 01 00 00    	jne    c002730d <__divsf3+0x221>
c0027146:	8d 57 01             	lea    edx,[edi+0x1]
c0027149:	80 e2 fe             	and    dl,0xfe
c002714c:	75 2f                	jne    c002717d <__divsf3+0x91>
c002714e:	85 c0                	test   eax,eax
c0027150:	74 2b                	je     c002717d <__divsf3+0x91>
c0027152:	51                   	push   ecx
c0027153:	51                   	push   ecx
c0027154:	6a 00                	push   0x0
c0027156:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027159:	e8 d2 03 00 00       	call   c0027530 <__nesf2>
c002715e:	83 c4 10             	add    esp,0x10
c0027161:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027164:	85 c0                	test   eax,eax
c0027166:	0f 85 a1 01 00 00    	jne    c002730d <__divsf3+0x221>
c002716c:	e9 92 01 00 00       	jmp    c0027303 <__divsf3+0x217>
c0027171:	85 c9                	test   ecx,ecx
c0027173:	75 1b                	jne    c0027190 <__divsf3+0xa4>
c0027175:	8d 57 01             	lea    edx,[edi+0x1]
c0027178:	80 e2 fe             	and    dl,0xfe
c002717b:	74 1e                	je     c002719b <__divsf3+0xaf>
c002717d:	85 ff                	test   edi,edi
c002717f:	0f 89 88 01 00 00    	jns    c002730d <__divsf3+0x221>
c0027185:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002718b:	e9 7d 01 00 00       	jmp    c002730d <__divsf3+0x221>
c0027190:	8d 56 ff             	lea    edx,[esi-0x1]
c0027193:	01 c9                	add    ecx,ecx
c0027195:	78 3d                	js     c00271d4 <__divsf3+0xe8>
c0027197:	89 d6                	mov    esi,edx
c0027199:	eb f5                	jmp    c0027190 <__divsf3+0xa4>
c002719b:	85 c0                	test   eax,eax
c002719d:	b8 00 00 00 00       	mov    eax,0x0
c00271a2:	74 18                	je     c00271bc <__divsf3+0xd0>
c00271a4:	52                   	push   edx
c00271a5:	52                   	push   edx
c00271a6:	50                   	push   eax
c00271a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271aa:	e8 81 03 00 00       	call   c0027530 <__nesf2>
c00271af:	83 c4 10             	add    esp,0x10
c00271b2:	85 c0                	test   eax,eax
c00271b4:	0f 85 50 01 00 00    	jne    c002730a <__divsf3+0x21e>
c00271ba:	eb c1                	jmp    c002717d <__divsf3+0x91>
c00271bc:	56                   	push   esi
c00271bd:	56                   	push   esi
c00271be:	50                   	push   eax
c00271bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271c2:	e8 69 03 00 00       	call   c0027530 <__nesf2>
c00271c7:	83 c4 10             	add    esp,0x10
c00271ca:	85 c0                	test   eax,eax
c00271cc:	0f 84 31 01 00 00    	je     c0027303 <__divsf3+0x217>
c00271d2:	eb a9                	jmp    c002717d <__divsf3+0x91>
c00271d4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00271d7:	c1 e3 08             	shl    ebx,0x8
c00271da:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271e0:	8d 57 01             	lea    edx,[edi+0x1]
c00271e3:	80 e2 fe             	and    dl,0xfe
c00271e6:	75 71                	jne    c0027259 <__divsf3+0x16d>
c00271e8:	85 c0                	test   eax,eax
c00271ea:	ba 00 00 00 00       	mov    edx,0x0
c00271ef:	74 2f                	je     c0027220 <__divsf3+0x134>
c00271f1:	51                   	push   ecx
c00271f2:	51                   	push   ecx
c00271f3:	52                   	push   edx
c00271f4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271f7:	e8 f9 02 00 00       	call   c00274f5 <__eqsf2>
c00271fc:	83 c4 10             	add    esp,0x10
c00271ff:	85 c0                	test   eax,eax
c0027201:	0f 85 03 01 00 00    	jne    c002730a <__divsf3+0x21e>
c0027207:	31 d2                	xor    edx,edx
c0027209:	89 d3                	mov    ebx,edx
c002720b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002720e:	31 f8                	xor    eax,edi
c0027210:	0f 89 f7 00 00 00    	jns    c002730d <__divsf3+0x221>
c0027216:	bb 00 00 00 80       	mov    ebx,0x80000000
c002721b:	e9 ed 00 00 00       	jmp    c002730d <__divsf3+0x221>
c0027220:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027223:	50                   	push   eax
c0027224:	50                   	push   eax
c0027225:	52                   	push   edx
c0027226:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027229:	e8 c7 02 00 00       	call   c00274f5 <__eqsf2>
c002722e:	83 c4 10             	add    esp,0x10
c0027231:	85 c0                	test   eax,eax
c0027233:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027236:	75 16                	jne    c002724e <__divsf3+0x162>
c0027238:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002723b:	31 fb                	xor    ebx,edi
c002723d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027243:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027249:	e9 bf 00 00 00       	jmp    c002730d <__divsf3+0x221>
c002724e:	8d 46 01             	lea    eax,[esi+0x1]
c0027251:	01 db                	add    ebx,ebx
c0027253:	78 04                	js     c0027259 <__divsf3+0x16d>
c0027255:	89 c6                	mov    esi,eax
c0027257:	eb f5                	jmp    c002724e <__divsf3+0x162>
c0027259:	89 c8                	mov    eax,ecx
c002725b:	0d 00 00 00 80       	or     eax,0x80000000
c0027260:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027266:	31 d2                	xor    edx,edx
c0027268:	39 d8                	cmp    eax,ebx
c002726a:	72 07                	jb     c0027273 <__divsf3+0x187>
c002726c:	29 d8                	sub    eax,ebx
c002726e:	ba 01 00 00 00       	mov    edx,0x1
c0027273:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002727a:	01 d2                	add    edx,edx
c002727c:	89 c1                	mov    ecx,eax
c002727e:	01 c0                	add    eax,eax
c0027280:	85 c9                	test   ecx,ecx
c0027282:	78 04                	js     c0027288 <__divsf3+0x19c>
c0027284:	39 c3                	cmp    ebx,eax
c0027286:	77 05                	ja     c002728d <__divsf3+0x1a1>
c0027288:	29 d8                	sub    eax,ebx
c002728a:	83 ca 01             	or     edx,0x1
c002728d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027290:	75 e8                	jne    c002727a <__divsf3+0x18e>
c0027292:	85 c0                	test   eax,eax
c0027294:	0f 95 c0             	setne  al
c0027297:	0f b6 c0             	movzx  eax,al
c002729a:	c1 e2 06             	shl    edx,0x6
c002729d:	09 c2                	or     edx,eax
c002729f:	78 03                	js     c00272a4 <__divsf3+0x1b8>
c00272a1:	01 d2                	add    edx,edx
c00272a3:	4e                   	dec    esi
c00272a4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272aa:	7f 22                	jg     c00272ce <__divsf3+0x1e2>
c00272ac:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272b2:	85 f6                	test   esi,esi
c00272b4:	7f 23                	jg     c00272d9 <__divsf3+0x1ed>
c00272b6:	83 fe e9             	cmp    esi,0xffffffe9
c00272b9:	7c 1a                	jl     c00272d5 <__divsf3+0x1e9>
c00272bb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00272c1:	b9 01 00 00 00       	mov    ecx,0x1
c00272c6:	29 f1                	sub    ecx,esi
c00272c8:	d3 ea                	shr    edx,cl
c00272ca:	31 f6                	xor    esi,esi
c00272cc:	eb 0b                	jmp    c00272d9 <__divsf3+0x1ed>
c00272ce:	be ff 00 00 00       	mov    esi,0xff
c00272d3:	eb 02                	jmp    c00272d7 <__divsf3+0x1eb>
c00272d5:	31 f6                	xor    esi,esi
c00272d7:	31 d2                	xor    edx,edx
c00272d9:	89 d0                	mov    eax,edx
c00272db:	c1 e8 08             	shr    eax,0x8
c00272de:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00272e1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00272e7:	09 fe                	or     esi,edi
c00272e9:	c1 e6 17             	shl    esi,0x17
c00272ec:	09 c6                	or     esi,eax
c00272ee:	f6 c2 7f             	test   dl,0x7f
c00272f1:	0f 95 c1             	setne  cl
c00272f4:	09 c8                	or     eax,ecx
c00272f6:	83 e0 01             	and    eax,0x1
c00272f9:	c1 ea 07             	shr    edx,0x7
c00272fc:	21 c2                	and    edx,eax
c00272fe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027301:	eb 0a                	jmp    c002730d <__divsf3+0x221>
c0027303:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027308:	eb 03                	jmp    c002730d <__divsf3+0x221>
c002730a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002730d:	89 d8                	mov    eax,ebx
c002730f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027312:	5b                   	pop    ebx
c0027313:	5e                   	pop    esi
c0027314:	5f                   	pop    edi
c0027315:	5d                   	pop    ebp
c0027316:	c3                   	ret    

c0027317 <__floatsisf>:
c0027317:	55                   	push   ebp
c0027318:	89 e5                	mov    ebp,esp
c002731a:	53                   	push   ebx
c002731b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002731e:	85 d2                	test   edx,edx
c0027320:	7e 2b                	jle    c002734d <__floatsisf+0x36>
c0027322:	0f bd ca             	bsr    ecx,edx
c0027325:	83 f1 1f             	xor    ecx,0x1f
c0027328:	d3 e2                	shl    edx,cl
c002732a:	89 d0                	mov    eax,edx
c002732c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027331:	89 c3                	mov    ebx,eax
c0027333:	c1 eb 08             	shr    ebx,0x8
c0027336:	80 e2 7f             	and    dl,0x7f
c0027339:	0f 95 c2             	setne  dl
c002733c:	09 da                	or     edx,ebx
c002733e:	83 e2 01             	and    edx,0x1
c0027341:	c1 e8 07             	shr    eax,0x7
c0027344:	21 c2                	and    edx,eax
c0027346:	b8 9e 00 00 00       	mov    eax,0x9e
c002734b:	eb 32                	jmp    c002737f <__floatsisf+0x68>
c002734d:	b8 00 00 00 00       	mov    eax,0x0
c0027352:	74 34                	je     c0027388 <__floatsisf+0x71>
c0027354:	f7 da                	neg    edx
c0027356:	0f bd ca             	bsr    ecx,edx
c0027359:	83 f1 1f             	xor    ecx,0x1f
c002735c:	d3 e2                	shl    edx,cl
c002735e:	89 d0                	mov    eax,edx
c0027360:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027365:	89 c3                	mov    ebx,eax
c0027367:	c1 eb 08             	shr    ebx,0x8
c002736a:	80 e2 7f             	and    dl,0x7f
c002736d:	0f 95 c2             	setne  dl
c0027370:	09 da                	or     edx,ebx
c0027372:	83 e2 01             	and    edx,0x1
c0027375:	c1 e8 07             	shr    eax,0x7
c0027378:	21 c2                	and    edx,eax
c002737a:	b8 9e 01 00 00       	mov    eax,0x19e
c002737f:	29 c8                	sub    eax,ecx
c0027381:	c1 e0 17             	shl    eax,0x17
c0027384:	09 d8                	or     eax,ebx
c0027386:	01 d0                	add    eax,edx
c0027388:	5b                   	pop    ebx
c0027389:	5d                   	pop    ebp
c002738a:	c3                   	ret    

c002738b <__floatunsisf>:
c002738b:	55                   	push   ebp
c002738c:	89 e5                	mov    ebp,esp
c002738e:	53                   	push   ebx
c002738f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027392:	31 c0                	xor    eax,eax
c0027394:	85 d2                	test   edx,edx
c0027396:	74 32                	je     c00273ca <__floatunsisf+0x3f>
c0027398:	0f bd ca             	bsr    ecx,edx
c002739b:	83 f1 1f             	xor    ecx,0x1f
c002739e:	d3 e2                	shl    edx,cl
c00273a0:	89 d0                	mov    eax,edx
c00273a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273a7:	89 c3                	mov    ebx,eax
c00273a9:	c1 eb 08             	shr    ebx,0x8
c00273ac:	80 e2 7f             	and    dl,0x7f
c00273af:	0f 95 c2             	setne  dl
c00273b2:	09 da                	or     edx,ebx
c00273b4:	83 e2 01             	and    edx,0x1
c00273b7:	c1 e8 07             	shr    eax,0x7
c00273ba:	21 c2                	and    edx,eax
c00273bc:	b8 9e 00 00 00       	mov    eax,0x9e
c00273c1:	29 c8                	sub    eax,ecx
c00273c3:	c1 e0 17             	shl    eax,0x17
c00273c6:	09 d8                	or     eax,ebx
c00273c8:	01 d0                	add    eax,edx
c00273ca:	5b                   	pop    ebx
c00273cb:	5d                   	pop    ebp
c00273cc:	c3                   	ret    

c00273cd <__fixsfsi>:
c00273cd:	55                   	push   ebp
c00273ce:	89 e5                	mov    ebp,esp
c00273d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273d3:	89 d1                	mov    ecx,edx
c00273d5:	c1 e1 08             	shl    ecx,0x8
c00273d8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00273de:	c1 fa 17             	sar    edx,0x17
c00273e1:	78 1c                	js     c00273ff <__fixsfsi+0x32>
c00273e3:	83 ea 7f             	sub    edx,0x7f
c00273e6:	31 c0                	xor    eax,eax
c00273e8:	83 fa 1e             	cmp    edx,0x1e
c00273eb:	77 40                	ja     c002742d <__fixsfsi+0x60>
c00273ed:	89 c8                	mov    eax,ecx
c00273ef:	0d 00 00 00 80       	or     eax,0x80000000
c00273f4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00273f9:	29 d1                	sub    ecx,edx
c00273fb:	d3 e8                	shr    eax,cl
c00273fd:	eb 2e                	jmp    c002742d <__fixsfsi+0x60>
c00273ff:	31 c0                	xor    eax,eax
c0027401:	81 c2 81 00 00 00    	add    edx,0x81
c0027407:	78 24                	js     c002742d <__fixsfsi+0x60>
c0027409:	83 fa 1e             	cmp    edx,0x1e
c002740c:	7e 09                	jle    c0027417 <__fixsfsi+0x4a>
c002740e:	83 fa 1f             	cmp    edx,0x1f
c0027411:	75 18                	jne    c002742b <__fixsfsi+0x5e>
c0027413:	85 c9                	test   ecx,ecx
c0027415:	75 14                	jne    c002742b <__fixsfsi+0x5e>
c0027417:	89 c8                	mov    eax,ecx
c0027419:	0d 00 00 00 80       	or     eax,0x80000000
c002741e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027423:	29 d1                	sub    ecx,edx
c0027425:	d3 e8                	shr    eax,cl
c0027427:	f7 d8                	neg    eax
c0027429:	eb 02                	jmp    c002742d <__fixsfsi+0x60>
c002742b:	31 c0                	xor    eax,eax
c002742d:	5d                   	pop    ebp
c002742e:	c3                   	ret    

c002742f <__fixunssfsi>:
c002742f:	55                   	push   ebp
c0027430:	89 e5                	mov    ebp,esp
c0027432:	53                   	push   ebx
c0027433:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027436:	89 d3                	mov    ebx,edx
c0027438:	c1 fb 17             	sar    ebx,0x17
c002743b:	83 eb 7f             	sub    ebx,0x7f
c002743e:	31 c0                	xor    eax,eax
c0027440:	83 fb 1f             	cmp    ebx,0x1f
c0027443:	77 18                	ja     c002745d <__fixunssfsi+0x2e>
c0027445:	89 d0                	mov    eax,edx
c0027447:	c1 e0 08             	shl    eax,0x8
c002744a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002744f:	0d 00 00 00 80       	or     eax,0x80000000
c0027454:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027459:	29 d9                	sub    ecx,ebx
c002745b:	d3 e8                	shr    eax,cl
c002745d:	5b                   	pop    ebx
c002745e:	5d                   	pop    ebp
c002745f:	c3                   	ret    

c0027460 <__cmpsf2>:
c0027460:	55                   	push   ebp
c0027461:	89 e5                	mov    ebp,esp
c0027463:	57                   	push   edi
c0027464:	56                   	push   esi
c0027465:	53                   	push   ebx
c0027466:	83 ec 24             	sub    esp,0x24
c0027469:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002746c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002746f:	e8 4f 10 00 00       	call   c00284c3 <__truncdfsf2>
c0027474:	5a                   	pop    edx
c0027475:	59                   	pop    ecx
c0027476:	89 c3                	mov    ebx,eax
c0027478:	c1 e8 17             	shr    eax,0x17
c002747b:	0f b6 f0             	movzx  esi,al
c002747e:	89 d8                	mov    eax,ebx
c0027480:	c1 e8 1f             	shr    eax,0x1f
c0027483:	31 c6                	xor    esi,eax
c0027485:	c1 e3 08             	shl    ebx,0x8
c0027488:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002748b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002748e:	e8 30 10 00 00       	call   c00284c3 <__truncdfsf2>
c0027493:	83 c4 10             	add    esp,0x10
c0027496:	89 c1                	mov    ecx,eax
c0027498:	c1 e9 17             	shr    ecx,0x17
c002749b:	0f b6 c9             	movzx  ecx,cl
c002749e:	89 c7                	mov    edi,eax
c00274a0:	c1 ef 1f             	shr    edi,0x1f
c00274a3:	89 ca                	mov    edx,ecx
c00274a5:	31 fa                	xor    edx,edi
c00274a7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274aa:	c1 e0 08             	shl    eax,0x8
c00274ad:	89 c2                	mov    edx,eax
c00274af:	89 d8                	mov    eax,ebx
c00274b1:	09 d0                	or     eax,edx
c00274b3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274b8:	09 f0                	or     eax,esi
c00274ba:	75 08                	jne    c00274c4 <__cmpsf2+0x64>
c00274bc:	31 c0                	xor    eax,eax
c00274be:	39 f9                	cmp    ecx,edi
c00274c0:	75 0c                	jne    c00274ce <__cmpsf2+0x6e>
c00274c2:	eb 29                	jmp    c00274ed <__cmpsf2+0x8d>
c00274c4:	b8 01 00 00 00       	mov    eax,0x1
c00274c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274cc:	7f 1f                	jg     c00274ed <__cmpsf2+0x8d>
c00274ce:	83 c8 ff             	or     eax,0xffffffff
c00274d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00274d4:	7c 17                	jl     c00274ed <__cmpsf2+0x8d>
c00274d6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00274dc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274e2:	b8 01 00 00 00       	mov    eax,0x1
c00274e7:	39 d3                	cmp    ebx,edx
c00274e9:	77 02                	ja     c00274ed <__cmpsf2+0x8d>
c00274eb:	19 c0                	sbb    eax,eax
c00274ed:	8d 65 f4             	lea    esp,[ebp-0xc]
c00274f0:	5b                   	pop    ebx
c00274f1:	5e                   	pop    esi
c00274f2:	5f                   	pop    edi
c00274f3:	5d                   	pop    ebp
c00274f4:	c3                   	ret    

c00274f5 <__eqsf2>:
c00274f5:	55                   	push   ebp
c00274f6:	89 e5                	mov    ebp,esp
c00274f8:	83 ec 24             	sub    esp,0x24
c00274fb:	6a 01                	push   0x1
c00274fd:	83 ec 0c             	sub    esp,0xc
c0027500:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027503:	e8 df 10 00 00       	call   c00285e7 <__extendsfdf2>
c0027508:	83 c4 10             	add    esp,0x10
c002750b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002750e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027511:	52                   	push   edx
c0027512:	50                   	push   eax
c0027513:	50                   	push   eax
c0027514:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027517:	e8 cb 10 00 00       	call   c00285e7 <__extendsfdf2>
c002751c:	59                   	pop    ecx
c002751d:	59                   	pop    ecx
c002751e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027521:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027524:	52                   	push   edx
c0027525:	50                   	push   eax
c0027526:	e8 35 ff ff ff       	call   c0027460 <__cmpsf2>
c002752b:	83 c4 20             	add    esp,0x20
c002752e:	c9                   	leave  
c002752f:	c3                   	ret    

c0027530 <__nesf2>:
c0027530:	eb c3                	jmp    c00274f5 <__eqsf2>

c0027532 <__gtsf2>:
c0027532:	55                   	push   ebp
c0027533:	89 e5                	mov    ebp,esp
c0027535:	83 ec 24             	sub    esp,0x24
c0027538:	6a ff                	push   0xffffffff
c002753a:	83 ec 0c             	sub    esp,0xc
c002753d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027540:	e8 a2 10 00 00       	call   c00285e7 <__extendsfdf2>
c0027545:	83 c4 10             	add    esp,0x10
c0027548:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002754b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002754e:	52                   	push   edx
c002754f:	50                   	push   eax
c0027550:	50                   	push   eax
c0027551:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027554:	e8 8e 10 00 00       	call   c00285e7 <__extendsfdf2>
c0027559:	59                   	pop    ecx
c002755a:	59                   	pop    ecx
c002755b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002755e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027561:	52                   	push   edx
c0027562:	50                   	push   eax
c0027563:	e8 f8 fe ff ff       	call   c0027460 <__cmpsf2>
c0027568:	83 c4 20             	add    esp,0x20
c002756b:	c9                   	leave  
c002756c:	c3                   	ret    

c002756d <__gesf2>:
c002756d:	eb c3                	jmp    c0027532 <__gtsf2>

c002756f <__ltsf2>:
c002756f:	eb 84                	jmp    c00274f5 <__eqsf2>

c0027571 <__lesf2>:
c0027571:	eb 82                	jmp    c00274f5 <__eqsf2>

c0027573 <__adddf3>:
c0027573:	55                   	push   ebp
c0027574:	89 e5                	mov    ebp,esp
c0027576:	57                   	push   edi
c0027577:	56                   	push   esi
c0027578:	53                   	push   ebx
c0027579:	83 ec 24             	sub    esp,0x24
c002757c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002757f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027582:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027585:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027588:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002758b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002758e:	89 c8                	mov    eax,ecx
c0027590:	89 ce                	mov    esi,ecx
c0027592:	c1 fe 14             	sar    esi,0x14
c0027595:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027598:	89 fb                	mov    ebx,edi
c002759a:	89 fa                	mov    edx,edi
c002759c:	c1 e2 0b             	shl    edx,0xb
c002759f:	c1 e0 0b             	shl    eax,0xb
c00275a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275a7:	c1 eb 15             	shr    ebx,0x15
c00275aa:	09 d8                	or     eax,ebx
c00275ac:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275b2:	c1 fe 14             	sar    esi,0x14
c00275b5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275b8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275bb:	89 f3                	mov    ebx,esi
c00275bd:	c1 e3 0b             	shl    ebx,0xb
c00275c0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00275c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275c6:	c1 e3 0b             	shl    ebx,0xb
c00275c9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00275cf:	c1 ee 15             	shr    esi,0x15
c00275d2:	09 f3                	or     ebx,esi
c00275d4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00275d7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275da:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00275dd:	0f 88 5f 02 00 00    	js     c0027842 <__adddf3+0x2cf>
c00275e3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00275e6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00275e9:	85 db                	test   ebx,ebx
c00275eb:	0f 8e c7 00 00 00    	jle    c00276b8 <__adddf3+0x145>
c00275f1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00275f8:	75 1a                	jne    c0027614 <__adddf3+0xa1>
c00275fa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275fd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027600:	0f 84 b2 05 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027606:	4b                   	dec    ebx
c0027607:	75 23                	jne    c002762c <__adddf3+0xb9>
c0027609:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002760c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002760f:	e9 99 00 00 00       	jmp    c00276ad <__adddf3+0x13a>
c0027614:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027617:	f7 d6                	not    esi
c0027619:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002761f:	0f 84 93 05 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027625:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002762c:	83 fb 1f             	cmp    ebx,0x1f
c002762f:	7e 42                	jle    c0027673 <__adddf3+0x100>
c0027631:	83 fb 3f             	cmp    ebx,0x3f
c0027634:	0f 8f 7e 05 00 00    	jg     c0027bb8 <__adddf3+0x645>
c002763a:	83 e3 1f             	and    ebx,0x1f
c002763d:	89 d9                	mov    ecx,ebx
c002763f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027642:	d3 ef                	shr    edi,cl
c0027644:	31 db                	xor    ebx,ebx
c0027646:	85 c9                	test   ecx,ecx
c0027648:	74 15                	je     c002765f <__adddf3+0xec>
c002764a:	be 20 00 00 00       	mov    esi,0x20
c002764f:	29 ce                	sub    esi,ecx
c0027651:	89 f1                	mov    ecx,esi
c0027653:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027656:	d3 e6                	shl    esi,cl
c0027658:	31 db                	xor    ebx,ebx
c002765a:	85 f6                	test   esi,esi
c002765c:	0f 95 c3             	setne  bl
c002765f:	31 c9                	xor    ecx,ecx
c0027661:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027665:	0f 95 c1             	setne  cl
c0027668:	09 cf                	or     edi,ecx
c002766a:	09 fb                	or     ebx,edi
c002766c:	01 da                	add    edx,ebx
c002766e:	83 d0 00             	adc    eax,0x0
c0027671:	eb 3a                	jmp    c00276ad <__adddf3+0x13a>
c0027673:	bf 20 00 00 00       	mov    edi,0x20
c0027678:	29 df                	sub    edi,ebx
c002767a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002767d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027680:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027683:	d3 e6                	shl    esi,cl
c0027685:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027688:	88 d9                	mov    cl,bl
c002768a:	d3 ef                	shr    edi,cl
c002768c:	09 fe                	or     esi,edi
c002768e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027691:	88 d9                	mov    cl,bl
c0027693:	d3 ef                	shr    edi,cl
c0027695:	89 fb                	mov    ebx,edi
c0027697:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002769a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002769d:	d3 e7                	shl    edi,cl
c002769f:	85 ff                	test   edi,edi
c00276a1:	0f 95 c1             	setne  cl
c00276a4:	0f b6 c9             	movzx  ecx,cl
c00276a7:	09 ce                	or     esi,ecx
c00276a9:	01 f2                	add    edx,esi
c00276ab:	11 d8                	adc    eax,ebx
c00276ad:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276b3:	e9 52 01 00 00       	jmp    c002780a <__adddf3+0x297>
c00276b8:	0f 84 d5 00 00 00    	je     c0027793 <__adddf3+0x220>
c00276be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276c1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00276c4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00276c7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00276ca:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00276d1:	75 20                	jne    c00276f3 <__adddf3+0x180>
c00276d3:	89 d6                	mov    esi,edx
c00276d5:	09 c6                	or     esi,eax
c00276d7:	0f 84 db 04 00 00    	je     c0027bb8 <__adddf3+0x645>
c00276dd:	4b                   	dec    ebx
c00276de:	75 29                	jne    c0027709 <__adddf3+0x196>
c00276e0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00276e6:	01 d1                	add    ecx,edx
c00276e8:	11 c6                	adc    esi,eax
c00276ea:	89 f0                	mov    eax,esi
c00276ec:	89 ca                	mov    edx,ecx
c00276ee:	e9 17 01 00 00       	jmp    c002780a <__adddf3+0x297>
c00276f3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00276f6:	f7 d6                	not    esi
c00276f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276fe:	0f 84 b4 04 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027704:	0d 00 00 00 80       	or     eax,0x80000000
c0027709:	83 fb 1f             	cmp    ebx,0x1f
c002770c:	7e 48                	jle    c0027756 <__adddf3+0x1e3>
c002770e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027711:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027714:	83 fb 3f             	cmp    ebx,0x3f
c0027717:	0f 8f 9b 04 00 00    	jg     c0027bb8 <__adddf3+0x645>
c002771d:	83 e3 1f             	and    ebx,0x1f
c0027720:	89 d9                	mov    ecx,ebx
c0027722:	89 c7                	mov    edi,eax
c0027724:	d3 ef                	shr    edi,cl
c0027726:	31 db                	xor    ebx,ebx
c0027728:	85 c9                	test   ecx,ecx
c002772a:	74 12                	je     c002773e <__adddf3+0x1cb>
c002772c:	be 20 00 00 00       	mov    esi,0x20
c0027731:	29 ce                	sub    esi,ecx
c0027733:	89 f1                	mov    ecx,esi
c0027735:	d3 e0                	shl    eax,cl
c0027737:	31 db                	xor    ebx,ebx
c0027739:	85 c0                	test   eax,eax
c002773b:	0f 95 c3             	setne  bl
c002773e:	31 c0                	xor    eax,eax
c0027740:	85 d2                	test   edx,edx
c0027742:	0f 95 c0             	setne  al
c0027745:	09 c7                	or     edi,eax
c0027747:	09 fb                	or     ebx,edi
c0027749:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002774c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002774f:	01 da                	add    edx,ebx
c0027751:	83 d6 00             	adc    esi,0x0
c0027754:	eb 39                	jmp    c002778f <__adddf3+0x21c>
c0027756:	be 20 00 00 00       	mov    esi,0x20
c002775b:	29 de                	sub    esi,ebx
c002775d:	89 c7                	mov    edi,eax
c002775f:	89 f1                	mov    ecx,esi
c0027761:	d3 e7                	shl    edi,cl
c0027763:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027766:	89 d7                	mov    edi,edx
c0027768:	88 d9                	mov    cl,bl
c002776a:	d3 ef                	shr    edi,cl
c002776c:	89 f9                	mov    ecx,edi
c002776e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027771:	09 cf                	or     edi,ecx
c0027773:	88 d9                	mov    cl,bl
c0027775:	d3 e8                	shr    eax,cl
c0027777:	89 f1                	mov    ecx,esi
c0027779:	d3 e2                	shl    edx,cl
c002777b:	85 d2                	test   edx,edx
c002777d:	0f 95 c2             	setne  dl
c0027780:	0f b6 d2             	movzx  edx,dl
c0027783:	09 d7                	or     edi,edx
c0027785:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027788:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002778b:	01 fa                	add    edx,edi
c002778d:	11 c6                	adc    esi,eax
c002778f:	89 f0                	mov    eax,esi
c0027791:	eb 77                	jmp    c002780a <__adddf3+0x297>
c0027793:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027796:	46                   	inc    esi
c0027797:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002779a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277a0:	75 41                	jne    c00277e3 <__adddf3+0x270>
c00277a2:	89 d3                	mov    ebx,edx
c00277a4:	09 c3                	or     ebx,eax
c00277a6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277ad:	75 27                	jne    c00277d6 <__adddf3+0x263>
c00277af:	85 db                	test   ebx,ebx
c00277b1:	0f 84 fb 03 00 00    	je     c0027bb2 <__adddf3+0x63f>
c00277b7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277ba:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277bd:	0f 84 f5 03 00 00    	je     c0027bb8 <__adddf3+0x645>
c00277c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277c9:	85 c0                	test   eax,eax
c00277cb:	0f 89 91 03 00 00    	jns    c0027b62 <__adddf3+0x5ef>
c00277d1:	e9 85 03 00 00       	jmp    c0027b5b <__adddf3+0x5e8>
c00277d6:	85 db                	test   ebx,ebx
c00277d8:	0f 85 da 03 00 00    	jne    c0027bb8 <__adddf3+0x645>
c00277de:	e9 cf 03 00 00       	jmp    c0027bb2 <__adddf3+0x63f>
c00277e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00277e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00277e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277ec:	f7 d1                	not    ecx
c00277ee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00277f4:	0f 84 70 03 00 00    	je     c0027b6a <__adddf3+0x5f7>
c00277fa:	d1 ea                	shr    edx,1
c00277fc:	89 c1                	mov    ecx,eax
c00277fe:	c1 e1 1f             	shl    ecx,0x1f
c0027801:	09 ca                	or     edx,ecx
c0027803:	d1 e8                	shr    eax,1
c0027805:	e9 6f 03 00 00       	jmp    c0027b79 <__adddf3+0x606>
c002780a:	85 c0                	test   eax,eax
c002780c:	0f 89 67 03 00 00    	jns    c0027b79 <__adddf3+0x606>
c0027812:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027815:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027818:	f7 d1                	not    ecx
c002781a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027820:	0f 84 44 03 00 00    	je     c0027b6a <__adddf3+0x5f7>
c0027826:	89 d1                	mov    ecx,edx
c0027828:	d1 e9                	shr    ecx,1
c002782a:	83 e2 01             	and    edx,0x1
c002782d:	09 ca                	or     edx,ecx
c002782f:	89 c1                	mov    ecx,eax
c0027831:	c1 e1 1f             	shl    ecx,0x1f
c0027834:	09 ca                	or     edx,ecx
c0027836:	d1 e8                	shr    eax,1
c0027838:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002783d:	e9 37 03 00 00       	jmp    c0027b79 <__adddf3+0x606>
c0027842:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027845:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002784b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002784e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027851:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027857:	29 de                	sub    esi,ebx
c0027859:	85 f6                	test   esi,esi
c002785b:	0f 8e bd 00 00 00    	jle    c002791e <__adddf3+0x3ab>
c0027861:	85 db                	test   ebx,ebx
c0027863:	75 17                	jne    c002787c <__adddf3+0x309>
c0027865:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027868:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002786b:	0f 84 47 03 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027871:	4e                   	dec    esi
c0027872:	75 20                	jne    c0027894 <__adddf3+0x321>
c0027874:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027877:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002787a:	eb 5b                	jmp    c00278d7 <__adddf3+0x364>
c002787c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002787f:	f7 d3                	not    ebx
c0027881:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027887:	0f 84 2b 03 00 00    	je     c0027bb8 <__adddf3+0x645>
c002788d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027894:	83 fe 1f             	cmp    esi,0x1f
c0027897:	7e 49                	jle    c00278e2 <__adddf3+0x36f>
c0027899:	83 fe 3f             	cmp    esi,0x3f
c002789c:	0f 8f 16 03 00 00    	jg     c0027bb8 <__adddf3+0x645>
c00278a2:	83 e6 1f             	and    esi,0x1f
c00278a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278a8:	89 f1                	mov    ecx,esi
c00278aa:	d3 ef                	shr    edi,cl
c00278ac:	31 db                	xor    ebx,ebx
c00278ae:	85 f6                	test   esi,esi
c00278b0:	74 13                	je     c00278c5 <__adddf3+0x352>
c00278b2:	b9 20 00 00 00       	mov    ecx,0x20
c00278b7:	29 f1                	sub    ecx,esi
c00278b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278bc:	d3 e6                	shl    esi,cl
c00278be:	31 db                	xor    ebx,ebx
c00278c0:	85 f6                	test   esi,esi
c00278c2:	0f 95 c3             	setne  bl
c00278c5:	31 c9                	xor    ecx,ecx
c00278c7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278cb:	0f 95 c1             	setne  cl
c00278ce:	09 cf                	or     edi,ecx
c00278d0:	09 fb                	or     ebx,edi
c00278d2:	29 da                	sub    edx,ebx
c00278d4:	83 d8 00             	sbb    eax,0x0
c00278d7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278dd:	e9 aa 01 00 00       	jmp    c0027a8c <__adddf3+0x519>
c00278e2:	bf 20 00 00 00       	mov    edi,0x20
c00278e7:	29 f7                	sub    edi,esi
c00278e9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00278ec:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00278ef:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00278f2:	d3 e3                	shl    ebx,cl
c00278f4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278f7:	89 f1                	mov    ecx,esi
c00278f9:	d3 ef                	shr    edi,cl
c00278fb:	09 fb                	or     ebx,edi
c00278fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027900:	89 f1                	mov    ecx,esi
c0027902:	d3 ef                	shr    edi,cl
c0027904:	89 fe                	mov    esi,edi
c0027906:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027909:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002790c:	d3 e7                	shl    edi,cl
c002790e:	85 ff                	test   edi,edi
c0027910:	0f 95 c1             	setne  cl
c0027913:	0f b6 c9             	movzx  ecx,cl
c0027916:	09 cb                	or     ebx,ecx
c0027918:	29 da                	sub    edx,ebx
c002791a:	19 f0                	sbb    eax,esi
c002791c:	eb b9                	jmp    c00278d7 <__adddf3+0x364>
c002791e:	0f 84 cd 00 00 00    	je     c00279f1 <__adddf3+0x47e>
c0027924:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027927:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002792a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002792d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027931:	75 1b                	jne    c002794e <__adddf3+0x3db>
c0027933:	89 d6                	mov    esi,edx
c0027935:	09 c6                	or     esi,eax
c0027937:	0f 84 7b 02 00 00    	je     c0027bb8 <__adddf3+0x645>
c002793d:	4b                   	dec    ebx
c002793e:	75 24                	jne    c0027964 <__adddf3+0x3f1>
c0027940:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027943:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027946:	29 d1                	sub    ecx,edx
c0027948:	19 c6                	sbb    esi,eax
c002794a:	89 ca                	mov    edx,ecx
c002794c:	eb 61                	jmp    c00279af <__adddf3+0x43c>
c002794e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027951:	f7 d6                	not    esi
c0027953:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027959:	0f 84 59 02 00 00    	je     c0027bb8 <__adddf3+0x645>
c002795f:	0d 00 00 00 80       	or     eax,0x80000000
c0027964:	83 fb 1f             	cmp    ebx,0x1f
c0027967:	7e 4d                	jle    c00279b6 <__adddf3+0x443>
c0027969:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002796c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002796f:	83 fb 3f             	cmp    ebx,0x3f
c0027972:	0f 8f 40 02 00 00    	jg     c0027bb8 <__adddf3+0x645>
c0027978:	83 e3 1f             	and    ebx,0x1f
c002797b:	89 d9                	mov    ecx,ebx
c002797d:	89 c7                	mov    edi,eax
c002797f:	d3 ef                	shr    edi,cl
c0027981:	31 db                	xor    ebx,ebx
c0027983:	85 c9                	test   ecx,ecx
c0027985:	74 12                	je     c0027999 <__adddf3+0x426>
c0027987:	be 20 00 00 00       	mov    esi,0x20
c002798c:	29 ce                	sub    esi,ecx
c002798e:	89 f1                	mov    ecx,esi
c0027990:	d3 e0                	shl    eax,cl
c0027992:	31 db                	xor    ebx,ebx
c0027994:	85 c0                	test   eax,eax
c0027996:	0f 95 c3             	setne  bl
c0027999:	31 c0                	xor    eax,eax
c002799b:	85 d2                	test   edx,edx
c002799d:	0f 95 c0             	setne  al
c00279a0:	09 c7                	or     edi,eax
c00279a2:	09 fb                	or     ebx,edi
c00279a4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279aa:	29 da                	sub    edx,ebx
c00279ac:	83 de 00             	sbb    esi,0x0
c00279af:	89 f0                	mov    eax,esi
c00279b1:	e9 d6 00 00 00       	jmp    c0027a8c <__adddf3+0x519>
c00279b6:	be 20 00 00 00       	mov    esi,0x20
c00279bb:	29 de                	sub    esi,ebx
c00279bd:	89 c7                	mov    edi,eax
c00279bf:	89 f1                	mov    ecx,esi
c00279c1:	d3 e7                	shl    edi,cl
c00279c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00279c6:	89 d7                	mov    edi,edx
c00279c8:	88 d9                	mov    cl,bl
c00279ca:	d3 ef                	shr    edi,cl
c00279cc:	89 f9                	mov    ecx,edi
c00279ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279d1:	09 cf                	or     edi,ecx
c00279d3:	88 d9                	mov    cl,bl
c00279d5:	d3 e8                	shr    eax,cl
c00279d7:	89 f1                	mov    ecx,esi
c00279d9:	d3 e2                	shl    edx,cl
c00279db:	85 d2                	test   edx,edx
c00279dd:	0f 95 c2             	setne  dl
c00279e0:	0f b6 d2             	movzx  edx,dl
c00279e3:	09 d7                	or     edi,edx
c00279e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279eb:	29 fa                	sub    edx,edi
c00279ed:	19 c6                	sbb    esi,eax
c00279ef:	eb be                	jmp    c00279af <__adddf3+0x43c>
c00279f1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00279f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00279f7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00279fd:	75 6a                	jne    c0027a69 <__adddf3+0x4f6>
c00279ff:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a03:	75 58                	jne    c0027a5d <__adddf3+0x4ea>
c0027a05:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a08:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a0b:	89 d6                	mov    esi,edx
c0027a0d:	09 c6                	or     esi,eax
c0027a0f:	75 17                	jne    c0027a28 <__adddf3+0x4b5>
c0027a11:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a14:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a17:	85 db                	test   ebx,ebx
c0027a19:	0f 85 99 01 00 00    	jne    c0027bb8 <__adddf3+0x645>
c0027a1f:	31 ff                	xor    edi,edi
c0027a21:	31 c9                	xor    ecx,ecx
c0027a23:	e9 90 01 00 00       	jmp    c0027bb8 <__adddf3+0x645>
c0027a28:	85 db                	test   ebx,ebx
c0027a2a:	0f 84 88 01 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027a30:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a33:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a36:	85 c0                	test   eax,eax
c0027a38:	79 10                	jns    c0027a4a <__adddf3+0x4d7>
c0027a3a:	31 c9                	xor    ecx,ecx
c0027a3c:	f7 da                	neg    edx
c0027a3e:	0f 95 c1             	setne  cl
c0027a41:	01 c8                	add    eax,ecx
c0027a43:	f7 d8                	neg    eax
c0027a45:	e9 2f 01 00 00       	jmp    c0027b79 <__adddf3+0x606>
c0027a4a:	31 ff                	xor    edi,edi
c0027a4c:	31 c9                	xor    ecx,ecx
c0027a4e:	89 c3                	mov    ebx,eax
c0027a50:	09 d3                	or     ebx,edx
c0027a52:	0f 84 60 01 00 00    	je     c0027bb8 <__adddf3+0x645>
c0027a58:	e9 05 01 00 00       	jmp    c0027b62 <__adddf3+0x5ef>
c0027a5d:	31 ff                	xor    edi,edi
c0027a5f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027a64:	e9 4f 01 00 00       	jmp    c0027bb8 <__adddf3+0x645>
c0027a69:	89 c1                	mov    ecx,eax
c0027a6b:	89 d0                	mov    eax,edx
c0027a6d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027a70:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027a73:	89 ca                	mov    edx,ecx
c0027a75:	85 c9                	test   ecx,ecx
c0027a77:	79 2c                	jns    c0027aa5 <__adddf3+0x532>
c0027a79:	31 c9                	xor    ecx,ecx
c0027a7b:	f7 d8                	neg    eax
c0027a7d:	0f 95 c1             	setne  cl
c0027a80:	01 ca                	add    edx,ecx
c0027a82:	f7 da                	neg    edx
c0027a84:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a87:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a8a:	eb 19                	jmp    c0027aa5 <__adddf3+0x532>
c0027a8c:	85 c0                	test   eax,eax
c0027a8e:	0f 89 e5 00 00 00    	jns    c0027b79 <__adddf3+0x606>
c0027a94:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027a99:	89 c1                	mov    ecx,eax
c0027a9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a9e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027aa1:	89 d0                	mov    eax,edx
c0027aa3:	89 ca                	mov    edx,ecx
c0027aa5:	85 d2                	test   edx,edx
c0027aa7:	74 59                	je     c0027b02 <__adddf3+0x58f>
c0027aa9:	0f bd da             	bsr    ebx,edx
c0027aac:	83 f3 1f             	xor    ebx,0x1f
c0027aaf:	88 d9                	mov    cl,bl
c0027ab1:	d3 e2                	shl    edx,cl
c0027ab3:	bf 20 00 00 00       	mov    edi,0x20
c0027ab8:	89 f9                	mov    ecx,edi
c0027aba:	29 d9                	sub    ecx,ebx
c0027abc:	89 c6                	mov    esi,eax
c0027abe:	d3 ee                	shr    esi,cl
c0027ac0:	09 d6                	or     esi,edx
c0027ac2:	88 d9                	mov    cl,bl
c0027ac4:	d3 e0                	shl    eax,cl
c0027ac6:	89 c2                	mov    edx,eax
c0027ac8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027acb:	25 ff 07 00 00       	and    eax,0x7ff
c0027ad0:	39 d8                	cmp    eax,ebx
c0027ad2:	7f 22                	jg     c0027af6 <__adddf3+0x583>
c0027ad4:	29 c3                	sub    ebx,eax
c0027ad6:	43                   	inc    ebx
c0027ad7:	88 d9                	mov    cl,bl
c0027ad9:	d3 ea                	shr    edx,cl
c0027adb:	29 df                	sub    edi,ebx
c0027add:	89 f9                	mov    ecx,edi
c0027adf:	89 f0                	mov    eax,esi
c0027ae1:	d3 e0                	shl    eax,cl
c0027ae3:	09 c2                	or     edx,eax
c0027ae5:	89 f0                	mov    eax,esi
c0027ae7:	88 d9                	mov    cl,bl
c0027ae9:	d3 e8                	shr    eax,cl
c0027aeb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027aee:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027af4:	eb 6f                	jmp    c0027b65 <__adddf3+0x5f2>
c0027af6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af9:	29 d8                	sub    eax,ebx
c0027afb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027afe:	89 f0                	mov    eax,esi
c0027b00:	eb 59                	jmp    c0027b5b <__adddf3+0x5e8>
c0027b02:	85 c0                	test   eax,eax
c0027b04:	74 6a                	je     c0027b70 <__adddf3+0x5fd>
c0027b06:	0f bd c8             	bsr    ecx,eax
c0027b09:	83 f1 1f             	xor    ecx,0x1f
c0027b0c:	d3 e0                	shl    eax,cl
c0027b0e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b11:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b17:	83 c1 20             	add    ecx,0x20
c0027b1a:	39 cb                	cmp    ebx,ecx
c0027b1c:	7f 35                	jg     c0027b53 <__adddf3+0x5e0>
c0027b1e:	29 d9                	sub    ecx,ebx
c0027b20:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b23:	83 fe 1f             	cmp    esi,0x1f
c0027b26:	7e 09                	jle    c0027b31 <__adddf3+0x5be>
c0027b28:	83 e9 1f             	sub    ecx,0x1f
c0027b2b:	d3 e8                	shr    eax,cl
c0027b2d:	89 c3                	mov    ebx,eax
c0027b2f:	eb 11                	jmp    c0027b42 <__adddf3+0x5cf>
c0027b31:	b9 20 00 00 00       	mov    ecx,0x20
c0027b36:	29 f1                	sub    ecx,esi
c0027b38:	89 c3                	mov    ebx,eax
c0027b3a:	d3 e3                	shl    ebx,cl
c0027b3c:	89 f1                	mov    ecx,esi
c0027b3e:	d3 e8                	shr    eax,cl
c0027b40:	89 c2                	mov    edx,eax
c0027b42:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b45:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b4a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b4d:	89 d0                	mov    eax,edx
c0027b4f:	89 da                	mov    edx,ebx
c0027b51:	eb 26                	jmp    c0027b79 <__adddf3+0x606>
c0027b53:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b56:	29 cf                	sub    edi,ecx
c0027b58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b5b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b60:	eb 17                	jmp    c0027b79 <__adddf3+0x606>
c0027b62:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b65:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b68:	eb 0f                	jmp    c0027b79 <__adddf3+0x606>
c0027b6a:	31 d2                	xor    edx,edx
c0027b6c:	31 c0                	xor    eax,eax
c0027b6e:	eb 09                	jmp    c0027b79 <__adddf3+0x606>
c0027b70:	89 c2                	mov    edx,eax
c0027b72:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027b79:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b7c:	c1 e1 14             	shl    ecx,0x14
c0027b7f:	89 c3                	mov    ebx,eax
c0027b81:	c1 eb 0b             	shr    ebx,0xb
c0027b84:	09 d9                	or     ecx,ebx
c0027b86:	89 d3                	mov    ebx,edx
c0027b88:	c1 eb 0b             	shr    ebx,0xb
c0027b8b:	c1 e0 15             	shl    eax,0x15
c0027b8e:	09 d8                	or     eax,ebx
c0027b90:	89 c7                	mov    edi,eax
c0027b92:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027b98:	0f 95 c0             	setne  al
c0027b9b:	89 c6                	mov    esi,eax
c0027b9d:	09 f3                	or     ebx,esi
c0027b9f:	83 e3 01             	and    ebx,0x1
c0027ba2:	c1 ea 0a             	shr    edx,0xa
c0027ba5:	21 da                	and    edx,ebx
c0027ba7:	89 f8                	mov    eax,edi
c0027ba9:	01 d0                	add    eax,edx
c0027bab:	83 d1 00             	adc    ecx,0x0
c0027bae:	89 c7                	mov    edi,eax
c0027bb0:	eb 06                	jmp    c0027bb8 <__adddf3+0x645>
c0027bb2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bb5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bb8:	89 f8                	mov    eax,edi
c0027bba:	89 ca                	mov    edx,ecx
c0027bbc:	83 c4 24             	add    esp,0x24
c0027bbf:	5b                   	pop    ebx
c0027bc0:	5e                   	pop    esi
c0027bc1:	5f                   	pop    edi
c0027bc2:	5d                   	pop    ebp
c0027bc3:	c3                   	ret    

c0027bc4 <__subdf3>:
c0027bc4:	55                   	push   ebp
c0027bc5:	89 e5                	mov    ebp,esp
c0027bc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027bcd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bd3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027bd6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027bd9:	5d                   	pop    ebp
c0027bda:	e9 94 f9 ff ff       	jmp    c0027573 <__adddf3>

c0027bdf <__negdf2>:
c0027bdf:	55                   	push   ebp
c0027be0:	89 e5                	mov    ebp,esp
c0027be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027be5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027be8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bee:	5d                   	pop    ebp
c0027bef:	c3                   	ret    

c0027bf0 <__muldf3>:
c0027bf0:	55                   	push   ebp
c0027bf1:	89 e5                	mov    ebp,esp
c0027bf3:	57                   	push   edi
c0027bf4:	56                   	push   esi
c0027bf5:	53                   	push   ebx
c0027bf6:	83 ec 24             	sub    esp,0x24
c0027bf9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027bfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027bff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c02:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c05:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c08:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c0b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c0e:	89 c8                	mov    eax,ecx
c0027c10:	c1 f8 14             	sar    eax,0x14
c0027c13:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c16:	89 f8                	mov    eax,edi
c0027c18:	89 fb                	mov    ebx,edi
c0027c1a:	c1 e3 0b             	shl    ebx,0xb
c0027c1d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c20:	c1 e1 0b             	shl    ecx,0xb
c0027c23:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c29:	c1 e8 15             	shr    eax,0x15
c0027c2c:	09 c1                	or     ecx,eax
c0027c2e:	89 d6                	mov    esi,edx
c0027c30:	89 d0                	mov    eax,edx
c0027c32:	c1 f8 14             	sar    eax,0x14
c0027c35:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c38:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c3b:	89 c3                	mov    ebx,eax
c0027c3d:	c1 e3 0b             	shl    ebx,0xb
c0027c40:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c43:	c1 e6 0b             	shl    esi,0xb
c0027c46:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c4c:	c1 e8 15             	shr    eax,0x15
c0027c4f:	09 c6                	or     esi,eax
c0027c51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c54:	25 ff 07 00 00       	and    eax,0x7ff
c0027c59:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c5c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c5f:	25 ff 07 00 00       	and    eax,0x7ff
c0027c64:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027c67:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c6a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c6d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027c74:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c77:	40                   	inc    eax
c0027c78:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c7d:	0f 85 8d 00 00 00    	jne    c0027d10 <__muldf3+0x120>
c0027c83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c86:	09 c8                	or     eax,ecx
c0027c88:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027c8c:	74 44                	je     c0027cd2 <__muldf3+0xe2>
c0027c8e:	85 c0                	test   eax,eax
c0027c90:	0f 85 31 02 00 00    	jne    c0027ec7 <__muldf3+0x2d7>
c0027c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c99:	40                   	inc    eax
c0027c9a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c9f:	75 13                	jne    c0027cb4 <__muldf3+0xc4>
c0027ca1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ca4:	09 f1                	or     ecx,esi
c0027ca6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027caa:	74 22                	je     c0027cce <__muldf3+0xde>
c0027cac:	85 c9                	test   ecx,ecx
c0027cae:	0f 85 0d 02 00 00    	jne    c0027ec1 <__muldf3+0x2d1>
c0027cb4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cb8:	0f 89 09 02 00 00    	jns    c0027ec7 <__muldf3+0x2d7>
c0027cbe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cc1:	05 00 00 00 80       	add    eax,0x80000000
c0027cc6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cc9:	e9 f9 01 00 00       	jmp    c0027ec7 <__muldf3+0x2d7>
c0027cce:	85 c9                	test   ecx,ecx
c0027cd0:	eb 2e                	jmp    c0027d00 <__muldf3+0x110>
c0027cd2:	85 c0                	test   eax,eax
c0027cd4:	74 20                	je     c0027cf6 <__muldf3+0x106>
c0027cd6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027cd9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cdc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027cdf:	c1 ef 1f             	shr    edi,0x1f
c0027ce2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027ce5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ce8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ceb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cee:	09 f9                	or     ecx,edi
c0027cf0:	78 1e                	js     c0027d10 <__muldf3+0x120>
c0027cf2:	89 c3                	mov    ebx,eax
c0027cf4:	eb e0                	jmp    c0027cd6 <__muldf3+0xe6>
c0027cf6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cf9:	f7 d0                	not    eax
c0027cfb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d00:	75 b2                	jne    c0027cb4 <__muldf3+0xc4>
c0027d02:	31 ff                	xor    edi,edi
c0027d04:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d0b:	e9 b7 01 00 00       	jmp    c0027ec7 <__muldf3+0x2d7>
c0027d10:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d13:	40                   	inc    eax
c0027d14:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d19:	75 57                	jne    c0027d72 <__muldf3+0x182>
c0027d1b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d1e:	09 f0                	or     eax,esi
c0027d20:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d24:	74 23                	je     c0027d49 <__muldf3+0x159>
c0027d26:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d2a:	0f 89 91 01 00 00    	jns    c0027ec1 <__muldf3+0x2d1>
c0027d30:	85 c0                	test   eax,eax
c0027d32:	0f 85 89 01 00 00    	jne    c0027ec1 <__muldf3+0x2d1>
c0027d38:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d3b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d41:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d44:	e9 7e 01 00 00       	jmp    c0027ec7 <__muldf3+0x2d7>
c0027d49:	85 c0                	test   eax,eax
c0027d4b:	75 0c                	jne    c0027d59 <__muldf3+0x169>
c0027d4d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d51:	0f 89 6a 01 00 00    	jns    c0027ec1 <__muldf3+0x2d1>
c0027d57:	eb df                	jmp    c0027d38 <__muldf3+0x148>
c0027d59:	01 f6                	add    esi,esi
c0027d5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d5e:	c1 ea 1f             	shr    edx,0x1f
c0027d61:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027d64:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027d67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d6a:	09 d6                	or     esi,edx
c0027d6c:	78 04                	js     c0027d72 <__muldf3+0x182>
c0027d6e:	89 c3                	mov    ebx,eax
c0027d70:	eb e7                	jmp    c0027d59 <__muldf3+0x169>
c0027d72:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027d78:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d7e:	89 c8                	mov    eax,ecx
c0027d80:	f7 e6                	mul    esi
c0027d82:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027d85:	89 c7                	mov    edi,eax
c0027d87:	89 c8                	mov    eax,ecx
c0027d89:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027d8c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027d8f:	89 c1                	mov    ecx,eax
c0027d91:	89 f0                	mov    eax,esi
c0027d93:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027d96:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027d99:	89 c6                	mov    esi,eax
c0027d9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d9e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027da1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027da4:	31 c0                	xor    eax,eax
c0027da6:	01 f1                	add    ecx,esi
c0027da8:	0f 92 c0             	setb   al
c0027dab:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dae:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027db1:	83 d6 00             	adc    esi,0x0
c0027db4:	01 c7                	add    edi,eax
c0027db6:	83 d6 00             	adc    esi,0x0
c0027db9:	01 ca                	add    edx,ecx
c0027dbb:	0f 92 c1             	setb   cl
c0027dbe:	0f b6 c9             	movzx  ecx,cl
c0027dc1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027dc4:	83 d6 00             	adc    esi,0x0
c0027dc7:	01 cf                	add    edi,ecx
c0027dc9:	83 d6 00             	adc    esi,0x0
c0027dcc:	31 c9                	xor    ecx,ecx
c0027dce:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027dd1:	0f 95 c1             	setne  cl
c0027dd4:	09 cf                	or     edi,ecx
c0027dd6:	85 f6                	test   esi,esi
c0027dd8:	78 0c                	js     c0027de6 <__muldf3+0x1f6>
c0027dda:	01 f6                	add    esi,esi
c0027ddc:	89 f8                	mov    eax,edi
c0027dde:	c1 e8 1f             	shr    eax,0x1f
c0027de1:	09 c6                	or     esi,eax
c0027de3:	01 ff                	add    edi,edi
c0027de5:	4b                   	dec    ebx
c0027de6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027dec:	0f 8f 85 00 00 00    	jg     c0027e77 <__muldf3+0x287>
c0027df2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027df8:	85 db                	test   ebx,ebx
c0027dfa:	0f 8f 84 00 00 00    	jg     c0027e84 <__muldf3+0x294>
c0027e00:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e03:	7c 79                	jl     c0027e7e <__muldf3+0x28e>
c0027e05:	ba 01 00 00 00       	mov    edx,0x1
c0027e0a:	29 da                	sub    edx,ebx
c0027e0c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e12:	83 fa 1f             	cmp    edx,0x1f
c0027e15:	7e 30                	jle    c0027e47 <__muldf3+0x257>
c0027e17:	83 fa 20             	cmp    edx,0x20
c0027e1a:	75 0b                	jne    c0027e27 <__muldf3+0x237>
c0027e1c:	31 c0                	xor    eax,eax
c0027e1e:	85 ff                	test   edi,edi
c0027e20:	0f 95 c0             	setne  al
c0027e23:	89 c7                	mov    edi,eax
c0027e25:	eb 1a                	jmp    c0027e41 <__muldf3+0x251>
c0027e27:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e2a:	89 f0                	mov    eax,esi
c0027e2c:	d3 e0                	shl    eax,cl
c0027e2e:	09 f8                	or     eax,edi
c0027e30:	0f 95 c0             	setne  al
c0027e33:	0f b6 c0             	movzx  eax,al
c0027e36:	89 c7                	mov    edi,eax
c0027e38:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e3d:	29 d9                	sub    ecx,ebx
c0027e3f:	d3 ee                	shr    esi,cl
c0027e41:	09 f7                	or     edi,esi
c0027e43:	31 db                	xor    ebx,ebx
c0027e45:	eb 3b                	jmp    c0027e82 <__muldf3+0x292>
c0027e47:	83 c3 1f             	add    ebx,0x1f
c0027e4a:	89 f0                	mov    eax,esi
c0027e4c:	88 d9                	mov    cl,bl
c0027e4e:	d3 e0                	shl    eax,cl
c0027e50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e53:	89 f8                	mov    eax,edi
c0027e55:	88 d1                	mov    cl,dl
c0027e57:	d3 e8                	shr    eax,cl
c0027e59:	89 c1                	mov    ecx,eax
c0027e5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e5e:	09 c8                	or     eax,ecx
c0027e60:	88 d9                	mov    cl,bl
c0027e62:	d3 e7                	shl    edi,cl
c0027e64:	31 db                	xor    ebx,ebx
c0027e66:	85 ff                	test   edi,edi
c0027e68:	0f 95 c3             	setne  bl
c0027e6b:	89 df                	mov    edi,ebx
c0027e6d:	09 c7                	or     edi,eax
c0027e6f:	88 d1                	mov    cl,dl
c0027e71:	d3 ee                	shr    esi,cl
c0027e73:	31 db                	xor    ebx,ebx
c0027e75:	eb 0d                	jmp    c0027e84 <__muldf3+0x294>
c0027e77:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027e7c:	eb 02                	jmp    c0027e80 <__muldf3+0x290>
c0027e7e:	31 db                	xor    ebx,ebx
c0027e80:	31 ff                	xor    edi,edi
c0027e82:	31 f6                	xor    esi,esi
c0027e84:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e87:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027e8a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027e8f:	09 c3                	or     ebx,eax
c0027e91:	c1 e3 14             	shl    ebx,0x14
c0027e94:	89 f0                	mov    eax,esi
c0027e96:	c1 e8 0b             	shr    eax,0xb
c0027e99:	09 c3                	or     ebx,eax
c0027e9b:	89 f8                	mov    eax,edi
c0027e9d:	c1 e8 0b             	shr    eax,0xb
c0027ea0:	c1 e6 15             	shl    esi,0x15
c0027ea3:	09 c6                	or     esi,eax
c0027ea5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027eab:	0f 95 c1             	setne  cl
c0027eae:	09 c8                	or     eax,ecx
c0027eb0:	83 e0 01             	and    eax,0x1
c0027eb3:	c1 ef 0a             	shr    edi,0xa
c0027eb6:	21 c7                	and    edi,eax
c0027eb8:	01 f7                	add    edi,esi
c0027eba:	83 d3 00             	adc    ebx,0x0
c0027ebd:	89 da                	mov    edx,ebx
c0027ebf:	eb 03                	jmp    c0027ec4 <__muldf3+0x2d4>
c0027ec1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ec4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ec7:	89 f8                	mov    eax,edi
c0027ec9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027ecc:	83 c4 24             	add    esp,0x24
c0027ecf:	5b                   	pop    ebx
c0027ed0:	5e                   	pop    esi
c0027ed1:	5f                   	pop    edi
c0027ed2:	5d                   	pop    ebp
c0027ed3:	c3                   	ret    

c0027ed4 <__divdf3>:
c0027ed4:	55                   	push   ebp
c0027ed5:	89 e5                	mov    ebp,esp
c0027ed7:	57                   	push   edi
c0027ed8:	56                   	push   esi
c0027ed9:	53                   	push   ebx
c0027eda:	83 ec 2c             	sub    esp,0x2c
c0027edd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ee0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ee3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ee6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ee9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027eec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027eef:	89 ce                	mov    esi,ecx
c0027ef1:	89 c8                	mov    eax,ecx
c0027ef3:	c1 f8 14             	sar    eax,0x14
c0027ef6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ef9:	89 f8                	mov    eax,edi
c0027efb:	89 fb                	mov    ebx,edi
c0027efd:	c1 e3 0b             	shl    ebx,0xb
c0027f00:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f03:	c1 e6 0b             	shl    esi,0xb
c0027f06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f0c:	c1 e8 15             	shr    eax,0x15
c0027f0f:	09 c6                	or     esi,eax
c0027f11:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f14:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f17:	89 c2                	mov    edx,eax
c0027f19:	c1 fa 14             	sar    edx,0x14
c0027f1c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f1f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f22:	89 de                	mov    esi,ebx
c0027f24:	c1 e6 0b             	shl    esi,0xb
c0027f27:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f2a:	c1 e0 0b             	shl    eax,0xb
c0027f2d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f32:	c1 eb 15             	shr    ebx,0x15
c0027f35:	09 d8                	or     eax,ebx
c0027f37:	89 c2                	mov    edx,eax
c0027f39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f3c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f41:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f44:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f47:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f4d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f50:	29 d8                	sub    eax,ebx
c0027f52:	05 ff 03 00 00       	add    eax,0x3ff
c0027f57:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f5a:	46                   	inc    esi
c0027f5b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f61:	0f 85 a5 00 00 00    	jne    c002800c <__divdf3+0x138>
c0027f67:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f6a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027f6d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027f71:	74 2a                	je     c0027f9d <__divdf3+0xc9>
c0027f73:	85 f6                	test   esi,esi
c0027f75:	0f 85 cc 02 00 00    	jne    c0028247 <__divdf3+0x373>
c0027f7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027f7e:	40                   	inc    eax
c0027f7f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027f84:	75 26                	jne    c0027fac <__divdf3+0xd8>
c0027f86:	85 db                	test   ebx,ebx
c0027f88:	74 22                	je     c0027fac <__divdf3+0xd8>
c0027f8a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027f8d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027f90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027f93:	09 d0                	or     eax,edx
c0027f95:	0f 85 ac 02 00 00    	jne    c0028247 <__divdf3+0x373>
c0027f9b:	eb 63                	jmp    c0028000 <__divdf3+0x12c>
c0027f9d:	85 f6                	test   esi,esi
c0027f9f:	75 22                	jne    c0027fc3 <__divdf3+0xef>
c0027fa1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fa4:	40                   	inc    eax
c0027fa5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027faa:	74 36                	je     c0027fe2 <__divdf3+0x10e>
c0027fac:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027fb0:	0f 89 91 02 00 00    	jns    c0028247 <__divdf3+0x373>
c0027fb6:	89 f8                	mov    eax,edi
c0027fb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027fbe:	e9 80 02 00 00       	jmp    c0028243 <__divdf3+0x36f>
c0027fc3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fc6:	01 f6                	add    esi,esi
c0027fc8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fcb:	c1 ef 1f             	shr    edi,0x1f
c0027fce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fd1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027fd4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027fd7:	09 f7                	or     edi,esi
c0027fd9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027fdc:	78 2e                	js     c002800c <__divdf3+0x138>
c0027fde:	89 c8                	mov    eax,ecx
c0027fe0:	eb e1                	jmp    c0027fc3 <__divdf3+0xef>
c0027fe2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fe5:	09 d0                	or     eax,edx
c0027fe7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027feb:	74 0f                	je     c0027ffc <__divdf3+0x128>
c0027fed:	85 c0                	test   eax,eax
c0027fef:	74 bb                	je     c0027fac <__divdf3+0xd8>
c0027ff1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ff4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ff7:	e9 4b 02 00 00       	jmp    c0028247 <__divdf3+0x373>
c0027ffc:	85 c0                	test   eax,eax
c0027ffe:	75 ac                	jne    c0027fac <__divdf3+0xd8>
c0028000:	31 ff                	xor    edi,edi
c0028002:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028007:	e9 3b 02 00 00       	jmp    c0028247 <__divdf3+0x373>
c002800c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002800f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028012:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028018:	75 6b                	jne    c0028085 <__divdf3+0x1b1>
c002801a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002801d:	09 d6                	or     esi,edx
c002801f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028023:	74 28                	je     c002804d <__divdf3+0x179>
c0028025:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028028:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002802b:	85 f6                	test   esi,esi
c002802d:	0f 85 14 02 00 00    	jne    c0028247 <__divdf3+0x373>
c0028033:	31 ff                	xor    edi,edi
c0028035:	31 c9                	xor    ecx,ecx
c0028037:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002803a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002803d:	0f 89 04 02 00 00    	jns    c0028247 <__divdf3+0x373>
c0028043:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028048:	e9 fa 01 00 00       	jmp    c0028247 <__divdf3+0x373>
c002804d:	85 f6                	test   esi,esi
c002804f:	75 1b                	jne    c002806c <__divdf3+0x198>
c0028051:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028054:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028057:	25 00 00 00 80       	and    eax,0x80000000
c002805c:	31 c9                	xor    ecx,ecx
c002805e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028063:	89 cf                	mov    edi,ecx
c0028065:	89 c1                	mov    ecx,eax
c0028067:	e9 db 01 00 00       	jmp    c0028247 <__divdf3+0x373>
c002806c:	01 d2                	add    edx,edx
c002806e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028071:	c1 eb 1f             	shr    ebx,0x1f
c0028074:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028077:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002807a:	8d 48 01             	lea    ecx,[eax+0x1]
c002807d:	09 da                	or     edx,ebx
c002807f:	78 04                	js     c0028085 <__divdf3+0x1b1>
c0028081:	89 c8                	mov    eax,ecx
c0028083:	eb e7                	jmp    c002806c <__divdf3+0x198>
c0028085:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028088:	81 ce 00 00 00 80    	or     esi,0x80000000
c002808e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028094:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028097:	39 d6                	cmp    esi,edx
c0028099:	77 0d                	ja     c00280a8 <__divdf3+0x1d4>
c002809b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002809e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280a1:	72 1b                	jb     c00280be <__divdf3+0x1ea>
c00280a3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280a6:	75 16                	jne    c00280be <__divdf3+0x1ea>
c00280a8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280ab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280ae:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280b1:	83 de 00             	sbb    esi,0x0
c00280b4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280b7:	ba 01 00 00 00       	mov    edx,0x1
c00280bc:	eb 02                	jmp    c00280c0 <__divdf3+0x1ec>
c00280be:	31 d2                	xor    edx,edx
c00280c0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00280c7:	31 ff                	xor    edi,edi
c00280c9:	01 ff                	add    edi,edi
c00280cb:	89 d1                	mov    ecx,edx
c00280cd:	c1 e9 1f             	shr    ecx,0x1f
c00280d0:	09 cf                	or     edi,ecx
c00280d2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00280d5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00280d8:	89 da                	mov    edx,ebx
c00280da:	89 f3                	mov    ebx,esi
c00280dc:	8d 34 36             	lea    esi,[esi+esi*1]
c00280df:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280e2:	c1 e9 1f             	shr    ecx,0x1f
c00280e5:	09 ce                	or     esi,ecx
c00280e7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280ea:	01 c9                	add    ecx,ecx
c00280ec:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00280ef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00280f2:	85 db                	test   ebx,ebx
c00280f4:	78 29                	js     c002811f <__divdf3+0x24b>
c00280f6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00280f9:	72 07                	jb     c0028102 <__divdf3+0x22e>
c00280fb:	75 3c                	jne    c0028139 <__divdf3+0x265>
c00280fd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028100:	77 37                	ja     c0028139 <__divdf3+0x265>
c0028102:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028105:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028108:	31 d2                	xor    edx,edx
c002810a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002810d:	0f 97 c2             	seta   dl
c0028110:	29 d6                	sub    esi,edx
c0028112:	89 d9                	mov    ecx,ebx
c0028114:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028117:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002811a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002811d:	eb 17                	jmp    c0028136 <__divdf3+0x262>
c002811f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028122:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028125:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028128:	0f 97 c1             	seta   cl
c002812b:	0f b6 c9             	movzx  ecx,cl
c002812e:	29 ce                	sub    esi,ecx
c0028130:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028133:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028136:	83 ca 01             	or     edx,0x1
c0028139:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002813c:	75 8b                	jne    c00280c9 <__divdf3+0x1f5>
c002813e:	c1 e7 09             	shl    edi,0x9
c0028141:	89 d1                	mov    ecx,edx
c0028143:	c1 e9 17             	shr    ecx,0x17
c0028146:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028149:	09 f3                	or     ebx,esi
c002814b:	0f 95 c3             	setne  bl
c002814e:	0f b6 db             	movzx  ebx,bl
c0028151:	c1 e2 09             	shl    edx,0x9
c0028154:	09 d3                	or     ebx,edx
c0028156:	89 ca                	mov    edx,ecx
c0028158:	09 fa                	or     edx,edi
c002815a:	78 0c                	js     c0028168 <__divdf3+0x294>
c002815c:	01 d2                	add    edx,edx
c002815e:	89 d9                	mov    ecx,ebx
c0028160:	c1 e9 1f             	shr    ecx,0x1f
c0028163:	09 ca                	or     edx,ecx
c0028165:	01 db                	add    ebx,ebx
c0028167:	48                   	dec    eax
c0028168:	3d fe 07 00 00       	cmp    eax,0x7fe
c002816d:	0f 8f 83 00 00 00    	jg     c00281f6 <__divdf3+0x322>
c0028173:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028179:	85 c0                	test   eax,eax
c002817b:	0f 8f 82 00 00 00    	jg     c0028203 <__divdf3+0x32f>
c0028181:	83 f8 cc             	cmp    eax,0xffffffcc
c0028184:	7c 77                	jl     c00281fd <__divdf3+0x329>
c0028186:	be 01 00 00 00       	mov    esi,0x1
c002818b:	29 c6                	sub    esi,eax
c002818d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028193:	83 fe 1f             	cmp    esi,0x1f
c0028196:	7e 2f                	jle    c00281c7 <__divdf3+0x2f3>
c0028198:	83 fe 20             	cmp    esi,0x20
c002819b:	75 0a                	jne    c00281a7 <__divdf3+0x2d3>
c002819d:	85 db                	test   ebx,ebx
c002819f:	0f 95 c3             	setne  bl
c00281a2:	0f b6 db             	movzx  ebx,bl
c00281a5:	eb 1a                	jmp    c00281c1 <__divdf3+0x2ed>
c00281a7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281aa:	89 d7                	mov    edi,edx
c00281ac:	d3 e7                	shl    edi,cl
c00281ae:	89 f9                	mov    ecx,edi
c00281b0:	09 d9                	or     ecx,ebx
c00281b2:	0f 95 c3             	setne  bl
c00281b5:	0f b6 db             	movzx  ebx,bl
c00281b8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281bd:	29 c1                	sub    ecx,eax
c00281bf:	d3 ea                	shr    edx,cl
c00281c1:	09 d3                	or     ebx,edx
c00281c3:	31 c0                	xor    eax,eax
c00281c5:	eb 3a                	jmp    c0028201 <__divdf3+0x32d>
c00281c7:	83 c0 1f             	add    eax,0x1f
c00281ca:	89 d7                	mov    edi,edx
c00281cc:	88 c1                	mov    cl,al
c00281ce:	d3 e7                	shl    edi,cl
c00281d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281d3:	89 df                	mov    edi,ebx
c00281d5:	89 f1                	mov    ecx,esi
c00281d7:	d3 ef                	shr    edi,cl
c00281d9:	89 f9                	mov    ecx,edi
c00281db:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00281de:	09 cf                	or     edi,ecx
c00281e0:	88 c1                	mov    cl,al
c00281e2:	d3 e3                	shl    ebx,cl
c00281e4:	85 db                	test   ebx,ebx
c00281e6:	0f 95 c3             	setne  bl
c00281e9:	0f b6 db             	movzx  ebx,bl
c00281ec:	09 fb                	or     ebx,edi
c00281ee:	89 f1                	mov    ecx,esi
c00281f0:	d3 ea                	shr    edx,cl
c00281f2:	31 c0                	xor    eax,eax
c00281f4:	eb 0d                	jmp    c0028203 <__divdf3+0x32f>
c00281f6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00281fb:	eb 02                	jmp    c00281ff <__divdf3+0x32b>
c00281fd:	31 c0                	xor    eax,eax
c00281ff:	31 db                	xor    ebx,ebx
c0028201:	31 d2                	xor    edx,edx
c0028203:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028206:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028209:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002820f:	09 c8                	or     eax,ecx
c0028211:	c1 e0 14             	shl    eax,0x14
c0028214:	89 d1                	mov    ecx,edx
c0028216:	c1 e9 0b             	shr    ecx,0xb
c0028219:	09 c8                	or     eax,ecx
c002821b:	89 c6                	mov    esi,eax
c002821d:	89 d9                	mov    ecx,ebx
c002821f:	c1 e9 0b             	shr    ecx,0xb
c0028222:	c1 e2 15             	shl    edx,0x15
c0028225:	09 ca                	or     edx,ecx
c0028227:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002822d:	0f 95 c0             	setne  al
c0028230:	09 c1                	or     ecx,eax
c0028232:	83 e1 01             	and    ecx,0x1
c0028235:	c1 eb 0a             	shr    ebx,0xa
c0028238:	21 cb                	and    ebx,ecx
c002823a:	01 d3                	add    ebx,edx
c002823c:	89 d8                	mov    eax,ebx
c002823e:	83 d6 00             	adc    esi,0x0
c0028241:	89 f2                	mov    edx,esi
c0028243:	89 c7                	mov    edi,eax
c0028245:	89 d1                	mov    ecx,edx
c0028247:	89 f8                	mov    eax,edi
c0028249:	89 ca                	mov    edx,ecx
c002824b:	83 c4 2c             	add    esp,0x2c
c002824e:	5b                   	pop    ebx
c002824f:	5e                   	pop    esi
c0028250:	5f                   	pop    edi
c0028251:	5d                   	pop    ebp
c0028252:	c3                   	ret    

c0028253 <__floatsidf>:
c0028253:	55                   	push   ebp
c0028254:	89 e5                	mov    ebp,esp
c0028256:	56                   	push   esi
c0028257:	53                   	push   ebx
c0028258:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002825b:	85 db                	test   ebx,ebx
c002825d:	7e 15                	jle    c0028274 <__floatsidf+0x21>
c002825f:	0f bd cb             	bsr    ecx,ebx
c0028262:	83 f1 1f             	xor    ecx,0x1f
c0028265:	d3 e3                	shl    ebx,cl
c0028267:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002826d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028272:	eb 21                	jmp    c0028295 <__floatsidf+0x42>
c0028274:	b8 00 00 00 00       	mov    eax,0x0
c0028279:	ba 00 00 00 00       	mov    edx,0x0
c002827e:	74 2a                	je     c00282aa <__floatsidf+0x57>
c0028280:	f7 db                	neg    ebx
c0028282:	0f bd cb             	bsr    ecx,ebx
c0028285:	83 f1 1f             	xor    ecx,0x1f
c0028288:	d3 e3                	shl    ebx,cl
c002828a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028290:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028295:	29 c8                	sub    eax,ecx
c0028297:	c1 e0 14             	shl    eax,0x14
c002829a:	89 c1                	mov    ecx,eax
c002829c:	89 de                	mov    esi,ebx
c002829e:	c1 ee 0b             	shr    esi,0xb
c00282a1:	09 f1                	or     ecx,esi
c00282a3:	89 ca                	mov    edx,ecx
c00282a5:	c1 e3 15             	shl    ebx,0x15
c00282a8:	89 d8                	mov    eax,ebx
c00282aa:	5b                   	pop    ebx
c00282ab:	5e                   	pop    esi
c00282ac:	5d                   	pop    ebp
c00282ad:	c3                   	ret    

c00282ae <__floatunsidf>:
c00282ae:	55                   	push   ebp
c00282af:	89 e5                	mov    ebp,esp
c00282b1:	56                   	push   esi
c00282b2:	53                   	push   ebx
c00282b3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282b6:	85 db                	test   ebx,ebx
c00282b8:	74 2a                	je     c00282e4 <__floatunsidf+0x36>
c00282ba:	0f bd cb             	bsr    ecx,ebx
c00282bd:	83 f1 1f             	xor    ecx,0x1f
c00282c0:	d3 e3                	shl    ebx,cl
c00282c2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282c8:	b8 1e 04 00 00       	mov    eax,0x41e
c00282cd:	29 c8                	sub    eax,ecx
c00282cf:	c1 e0 14             	shl    eax,0x14
c00282d2:	89 c1                	mov    ecx,eax
c00282d4:	89 de                	mov    esi,ebx
c00282d6:	c1 ee 0b             	shr    esi,0xb
c00282d9:	09 f1                	or     ecx,esi
c00282db:	89 ca                	mov    edx,ecx
c00282dd:	c1 e3 15             	shl    ebx,0x15
c00282e0:	89 d8                	mov    eax,ebx
c00282e2:	eb 04                	jmp    c00282e8 <__floatunsidf+0x3a>
c00282e4:	31 c0                	xor    eax,eax
c00282e6:	31 d2                	xor    edx,edx
c00282e8:	5b                   	pop    ebx
c00282e9:	5e                   	pop    esi
c00282ea:	5d                   	pop    ebp
c00282eb:	c3                   	ret    

c00282ec <__fixdfsi>:
c00282ec:	55                   	push   ebp
c00282ed:	89 e5                	mov    ebp,esp
c00282ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282f2:	89 d1                	mov    ecx,edx
c00282f4:	c1 e1 0b             	shl    ecx,0xb
c00282f7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00282fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028300:	c1 e8 15             	shr    eax,0x15
c0028303:	09 c1                	or     ecx,eax
c0028305:	c1 fa 14             	sar    edx,0x14
c0028308:	78 1f                	js     c0028329 <__fixdfsi+0x3d>
c002830a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028310:	31 c0                	xor    eax,eax
c0028312:	83 fa 1e             	cmp    edx,0x1e
c0028315:	77 40                	ja     c0028357 <__fixdfsi+0x6b>
c0028317:	89 c8                	mov    eax,ecx
c0028319:	0d 00 00 00 80       	or     eax,0x80000000
c002831e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028323:	29 d1                	sub    ecx,edx
c0028325:	d3 e8                	shr    eax,cl
c0028327:	eb 2e                	jmp    c0028357 <__fixdfsi+0x6b>
c0028329:	31 c0                	xor    eax,eax
c002832b:	81 c2 01 04 00 00    	add    edx,0x401
c0028331:	78 24                	js     c0028357 <__fixdfsi+0x6b>
c0028333:	83 fa 1e             	cmp    edx,0x1e
c0028336:	7e 09                	jle    c0028341 <__fixdfsi+0x55>
c0028338:	83 fa 1f             	cmp    edx,0x1f
c002833b:	75 18                	jne    c0028355 <__fixdfsi+0x69>
c002833d:	85 c9                	test   ecx,ecx
c002833f:	75 14                	jne    c0028355 <__fixdfsi+0x69>
c0028341:	89 c8                	mov    eax,ecx
c0028343:	0d 00 00 00 80       	or     eax,0x80000000
c0028348:	b9 1f 00 00 00       	mov    ecx,0x1f
c002834d:	29 d1                	sub    ecx,edx
c002834f:	d3 e8                	shr    eax,cl
c0028351:	f7 d8                	neg    eax
c0028353:	eb 02                	jmp    c0028357 <__fixdfsi+0x6b>
c0028355:	31 c0                	xor    eax,eax
c0028357:	5d                   	pop    ebp
c0028358:	c3                   	ret    

c0028359 <__fixunsdfsi>:
c0028359:	55                   	push   ebp
c002835a:	89 e5                	mov    ebp,esp
c002835c:	53                   	push   ebx
c002835d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028360:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028363:	89 d3                	mov    ebx,edx
c0028365:	c1 fb 14             	sar    ebx,0x14
c0028368:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002836e:	31 c0                	xor    eax,eax
c0028370:	83 fb 1f             	cmp    ebx,0x1f
c0028373:	77 1d                	ja     c0028392 <__fixunsdfsi+0x39>
c0028375:	89 d0                	mov    eax,edx
c0028377:	c1 e0 0b             	shl    eax,0xb
c002837a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002837f:	c1 e9 15             	shr    ecx,0x15
c0028382:	09 c8                	or     eax,ecx
c0028384:	0d 00 00 00 80       	or     eax,0x80000000
c0028389:	b9 1f 00 00 00       	mov    ecx,0x1f
c002838e:	29 d9                	sub    ecx,ebx
c0028390:	d3 e8                	shr    eax,cl
c0028392:	5b                   	pop    ebx
c0028393:	5d                   	pop    ebp
c0028394:	c3                   	ret    

c0028395 <__cmpdf2>:
c0028395:	55                   	push   ebp
c0028396:	89 e5                	mov    ebp,esp
c0028398:	57                   	push   edi
c0028399:	56                   	push   esi
c002839a:	53                   	push   ebx
c002839b:	83 ec 0c             	sub    esp,0xc
c002839e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283a4:	89 ca                	mov    edx,ecx
c00283a6:	c1 ea 14             	shr    edx,0x14
c00283a9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283af:	89 cb                	mov    ebx,ecx
c00283b1:	c1 fb 1f             	sar    ebx,0x1f
c00283b4:	31 da                	xor    edx,ebx
c00283b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283b9:	89 df                	mov    edi,ebx
c00283bb:	c1 e7 0b             	shl    edi,0xb
c00283be:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283c1:	c1 e1 0b             	shl    ecx,0xb
c00283c4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ca:	c1 eb 15             	shr    ebx,0x15
c00283cd:	09 d9                	or     ecx,ebx
c00283cf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00283d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283d5:	89 ce                	mov    esi,ecx
c00283d7:	c1 ee 14             	shr    esi,0x14
c00283da:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283e0:	89 cb                	mov    ebx,ecx
c00283e2:	c1 fb 1f             	sar    ebx,0x1f
c00283e5:	31 de                	xor    esi,ebx
c00283e7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00283ea:	89 df                	mov    edi,ebx
c00283ec:	c1 e7 0b             	shl    edi,0xb
c00283ef:	c1 e1 0b             	shl    ecx,0xb
c00283f2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283f8:	c1 eb 15             	shr    ebx,0x15
c00283fb:	09 d9                	or     ecx,ebx
c00283fd:	89 d3                	mov    ebx,edx
c00283ff:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028405:	43                   	inc    ebx
c0028406:	83 fb 01             	cmp    ebx,0x1
c0028409:	77 08                	ja     c0028413 <__cmpdf2+0x7e>
c002840b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002840e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028411:	75 68                	jne    c002847b <__cmpdf2+0xe6>
c0028413:	89 f3                	mov    ebx,esi
c0028415:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002841b:	43                   	inc    ebx
c002841c:	83 fb 01             	cmp    ebx,0x1
c002841f:	77 06                	ja     c0028427 <__cmpdf2+0x92>
c0028421:	89 fb                	mov    ebx,edi
c0028423:	09 cb                	or     ebx,ecx
c0028425:	75 54                	jne    c002847b <__cmpdf2+0xe6>
c0028427:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002842a:	09 f8                	or     eax,edi
c002842c:	09 c8                	or     eax,ecx
c002842e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028431:	75 12                	jne    c0028445 <__cmpdf2+0xb0>
c0028433:	8d 42 01             	lea    eax,[edx+0x1]
c0028436:	83 f8 01             	cmp    eax,0x1
c0028439:	77 0a                	ja     c0028445 <__cmpdf2+0xb0>
c002843b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002843e:	31 c0                	xor    eax,eax
c0028440:	83 fb 01             	cmp    ebx,0x1
c0028443:	76 36                	jbe    c002847b <__cmpdf2+0xe6>
c0028445:	b8 01 00 00 00       	mov    eax,0x1
c002844a:	39 f2                	cmp    edx,esi
c002844c:	7f 2d                	jg     c002847b <__cmpdf2+0xe6>
c002844e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028453:	7c 26                	jl     c002847b <__cmpdf2+0xe6>
c0028455:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028458:	77 07                	ja     c0028461 <__cmpdf2+0xcc>
c002845a:	72 16                	jb     c0028472 <__cmpdf2+0xdd>
c002845c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002845f:	76 0a                	jbe    c002846b <__cmpdf2+0xd6>
c0028461:	89 d0                	mov    eax,edx
c0028463:	c1 f8 1f             	sar    eax,0x1f
c0028466:	83 c8 01             	or     eax,0x1
c0028469:	eb 10                	jmp    c002847b <__cmpdf2+0xe6>
c002846b:	b8 00 00 00 00       	mov    eax,0x0
c0028470:	73 09                	jae    c002847b <__cmpdf2+0xe6>
c0028472:	89 d0                	mov    eax,edx
c0028474:	c1 f8 1f             	sar    eax,0x1f
c0028477:	83 e0 02             	and    eax,0x2
c002847a:	48                   	dec    eax
c002847b:	83 c4 0c             	add    esp,0xc
c002847e:	5b                   	pop    ebx
c002847f:	5e                   	pop    esi
c0028480:	5f                   	pop    edi
c0028481:	5d                   	pop    ebp
c0028482:	c3                   	ret    

c0028483 <__eqdf2>:
c0028483:	55                   	push   ebp
c0028484:	89 e5                	mov    ebp,esp
c0028486:	50                   	push   eax
c0028487:	6a 01                	push   0x1
c0028489:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002848c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002848f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028492:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028495:	e8 fb fe ff ff       	call   c0028395 <__cmpdf2>
c002849a:	83 c4 18             	add    esp,0x18
c002849d:	c9                   	leave  
c002849e:	c3                   	ret    

c002849f <__nedf2>:
c002849f:	eb e2                	jmp    c0028483 <__eqdf2>

c00284a1 <__gtdf2>:
c00284a1:	55                   	push   ebp
c00284a2:	89 e5                	mov    ebp,esp
c00284a4:	50                   	push   eax
c00284a5:	6a ff                	push   0xffffffff
c00284a7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284aa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284b3:	e8 dd fe ff ff       	call   c0028395 <__cmpdf2>
c00284b8:	83 c4 18             	add    esp,0x18
c00284bb:	c9                   	leave  
c00284bc:	c3                   	ret    

c00284bd <__gedf2>:
c00284bd:	eb e2                	jmp    c00284a1 <__gtdf2>

c00284bf <__ltdf2>:
c00284bf:	eb c2                	jmp    c0028483 <__eqdf2>

c00284c1 <__ledf2>:
c00284c1:	eb c0                	jmp    c0028483 <__eqdf2>

c00284c3 <__truncdfsf2>:
c00284c3:	55                   	push   ebp
c00284c4:	89 e5                	mov    ebp,esp
c00284c6:	57                   	push   edi
c00284c7:	56                   	push   esi
c00284c8:	53                   	push   ebx
c00284c9:	83 ec 0c             	sub    esp,0xc
c00284cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00284cf:	89 d1                	mov    ecx,edx
c00284d1:	c1 f9 14             	sar    ecx,0x14
c00284d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00284d7:	89 df                	mov    edi,ebx
c00284d9:	c1 e7 0b             	shl    edi,0xb
c00284dc:	89 d0                	mov    eax,edx
c00284de:	c1 e0 0b             	shl    eax,0xb
c00284e1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00284e6:	c1 eb 15             	shr    ebx,0x15
c00284e9:	09 d8                	or     eax,ebx
c00284eb:	89 cb                	mov    ebx,ecx
c00284ed:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284f3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00284f9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00284ff:	0f 86 9e 00 00 00    	jbe    c00285a3 <__truncdfsf2+0xe0>
c0028505:	85 db                	test   ebx,ebx
c0028507:	75 0a                	jne    c0028513 <__truncdfsf2+0x50>
c0028509:	c1 fa 17             	sar    edx,0x17
c002850c:	30 d2                	xor    dl,dl
c002850e:	e9 84 00 00 00       	jmp    c0028597 <__truncdfsf2+0xd4>
c0028513:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028519:	83 fe 83             	cmp    esi,0xffffff83
c002851c:	7d 4b                	jge    c0028569 <__truncdfsf2+0xa6>
c002851e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028523:	29 f1                	sub    ecx,esi
c0028525:	83 f9 1f             	cmp    ecx,0x1f
c0028528:	7f 6b                	jg     c0028595 <__truncdfsf2+0xd2>
c002852a:	0d 00 00 00 80       	or     eax,0x80000000
c002852f:	89 c3                	mov    ebx,eax
c0028531:	d3 eb                	shr    ebx,cl
c0028533:	be 01 00 00 00       	mov    esi,0x1
c0028538:	d3 e6                	shl    esi,cl
c002853a:	4e                   	dec    esi
c002853b:	21 f0                	and    eax,esi
c002853d:	09 f8                	or     eax,edi
c002853f:	0f 95 c0             	setne  al
c0028542:	0f b6 c0             	movzx  eax,al
c0028545:	09 c3                	or     ebx,eax
c0028547:	89 d9                	mov    ecx,ebx
c0028549:	c1 e9 08             	shr    ecx,0x8
c002854c:	f6 c3 7f             	test   bl,0x7f
c002854f:	0f 95 c0             	setne  al
c0028552:	09 c8                	or     eax,ecx
c0028554:	83 e0 01             	and    eax,0x1
c0028557:	c1 eb 07             	shr    ebx,0x7
c002855a:	21 c3                	and    ebx,eax
c002855c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028562:	09 d1                	or     ecx,edx
c0028564:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028567:	eb 76                	jmp    c00285df <__truncdfsf2+0x11c>
c0028569:	83 c6 80             	add    esi,0xffffff80
c002856c:	7e 1d                	jle    c002858b <__truncdfsf2+0xc8>
c002856e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028574:	75 0b                	jne    c0028581 <__truncdfsf2+0xbe>
c0028576:	09 f8                	or     eax,edi
c0028578:	74 09                	je     c0028583 <__truncdfsf2+0xc0>
c002857a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002857f:	eb 02                	jmp    c0028583 <__truncdfsf2+0xc0>
c0028581:	31 c0                	xor    eax,eax
c0028583:	c1 fa 17             	sar    edx,0x17
c0028586:	80 ca ff             	or     dl,0xff
c0028589:	eb 0e                	jmp    c0028599 <__truncdfsf2+0xd6>
c002858b:	c1 fa 1f             	sar    edx,0x1f
c002858e:	c1 e2 08             	shl    edx,0x8
c0028591:	09 ca                	or     edx,ecx
c0028593:	eb 04                	jmp    c0028599 <__truncdfsf2+0xd6>
c0028595:	31 d2                	xor    edx,edx
c0028597:	31 c0                	xor    eax,eax
c0028599:	c1 e2 17             	shl    edx,0x17
c002859c:	c1 e8 08             	shr    eax,0x8
c002859f:	09 d0                	or     eax,edx
c00285a1:	eb 3c                	jmp    c00285df <__truncdfsf2+0x11c>
c00285a3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285a9:	89 ca                	mov    edx,ecx
c00285ab:	c1 fa 0b             	sar    edx,0xb
c00285ae:	c1 e2 08             	shl    edx,0x8
c00285b1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285b4:	31 db                	xor    ebx,ebx
c00285b6:	85 ff                	test   edi,edi
c00285b8:	0f 95 c3             	setne  bl
c00285bb:	09 d8                	or     eax,ebx
c00285bd:	89 c3                	mov    ebx,eax
c00285bf:	c1 eb 08             	shr    ebx,0x8
c00285c2:	a8 7f                	test   al,0x7f
c00285c4:	0f 95 c2             	setne  dl
c00285c7:	89 d6                	mov    esi,edx
c00285c9:	09 de                	or     esi,ebx
c00285cb:	83 e6 01             	and    esi,0x1
c00285ce:	c1 e8 07             	shr    eax,0x7
c00285d1:	21 f0                	and    eax,esi
c00285d3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00285d6:	09 ca                	or     edx,ecx
c00285d8:	c1 e2 17             	shl    edx,0x17
c00285db:	09 da                	or     edx,ebx
c00285dd:	01 d0                	add    eax,edx
c00285df:	83 c4 0c             	add    esp,0xc
c00285e2:	5b                   	pop    ebx
c00285e3:	5e                   	pop    esi
c00285e4:	5f                   	pop    edi
c00285e5:	5d                   	pop    ebp
c00285e6:	c3                   	ret    

c00285e7 <__extendsfdf2>:
c00285e7:	55                   	push   ebp
c00285e8:	89 e5                	mov    ebp,esp
c00285ea:	57                   	push   edi
c00285eb:	56                   	push   esi
c00285ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00285ef:	89 d1                	mov    ecx,edx
c00285f1:	c1 f9 17             	sar    ecx,0x17
c00285f4:	c1 e2 08             	shl    edx,0x8
c00285f7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00285fd:	89 c8                	mov    eax,ecx
c00285ff:	80 e4 f8             	and    ah,0xf8
c0028602:	8d 71 01             	lea    esi,[ecx+0x1]
c0028605:	81 e6 fe 00 00 00    	and    esi,0xfe
c002860b:	75 27                	jne    c0028634 <__extendsfdf2+0x4d>
c002860d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028613:	75 18                	jne    c002862d <__extendsfdf2+0x46>
c0028615:	85 d2                	test   edx,edx
c0028617:	74 20                	je     c0028639 <__extendsfdf2+0x52>
c0028619:	41                   	inc    ecx
c002861a:	01 d2                	add    edx,edx
c002861c:	79 fb                	jns    c0028619 <__extendsfdf2+0x32>
c002861e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028624:	29 c8                	sub    eax,ecx
c0028626:	05 81 03 00 00       	add    eax,0x381
c002862b:	eb 0c                	jmp    c0028639 <__extendsfdf2+0x52>
c002862d:	05 00 07 00 00       	add    eax,0x700
c0028632:	eb 05                	jmp    c0028639 <__extendsfdf2+0x52>
c0028634:	05 80 03 00 00       	add    eax,0x380
c0028639:	c1 e0 14             	shl    eax,0x14
c002863c:	89 c1                	mov    ecx,eax
c002863e:	89 d0                	mov    eax,edx
c0028640:	c1 e8 0b             	shr    eax,0xb
c0028643:	09 c1                	or     ecx,eax
c0028645:	c1 e2 15             	shl    edx,0x15
c0028648:	89 d0                	mov    eax,edx
c002864a:	89 ca                	mov    edx,ecx
c002864c:	5e                   	pop    esi
c002864d:	5f                   	pop    edi
c002864e:	5d                   	pop    ebp
c002864f:	c3                   	ret    

c0028650 <fabs>:
c0028650:	83 ec 0c             	sub    esp,0xc
c0028653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028657:	89 04 24             	mov    DWORD PTR [esp],eax
c002865a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002865e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028663:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028667:	dd 04 24             	fld    QWORD PTR [esp]
c002866a:	83 c4 0c             	add    esp,0xc
c002866d:	c3                   	ret    
c002866e:	66 90                	xchg   ax,ax

c0028670 <lrint>:
c0028670:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028674:	83 ec 04             	sub    esp,0x4
c0028677:	db 1c 24             	fistp  DWORD PTR [esp]
c002867a:	58                   	pop    eax
c002867b:	c3                   	ret    

c002867c <lrintf>:
c002867c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028680:	83 ec 04             	sub    esp,0x4
c0028683:	db 1c 24             	fistp  DWORD PTR [esp]
c0028686:	58                   	pop    eax
c0028687:	c3                   	ret    

Disassembly of section .init:

c0028688 <_init>:
c0028688:	55                   	push   ebp
c0028689:	89 e5                	mov    ebp,esp
c002868b:	e8 88 7a fd ff       	call   c0000118 <frame_dummy>
c0028690:	e8 63 e0 ff ff       	call   c00266f8 <__do_global_ctors_aux>
c0028695:	5d                   	pop    ebp
c0028696:	c3                   	ret    

Disassembly of section .fini:

c0028697 <_fini>:
c0028697:	55                   	push   ebp
c0028698:	89 e5                	mov    ebp,esp
c002869a:	e8 09 7a fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002869f:	5d                   	pop    ebp
c00286a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286a2 <Computer::~Computer()>:
c00286a2:	83 ec 0c             	sub    esp,0xc
c00286a5:	ba e8 a1 02 c0       	mov    edx,0xc002a1e8
c00286aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ae:	89 10                	mov    DWORD PTR [eax],edx
c00286b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b4:	83 ec 0c             	sub    esp,0xc
c00286b7:	50                   	push   eax
c00286b8:	e8 af bb fe ff       	call   c001426c <Device::~Device()>
c00286bd:	83 c4 10             	add    esp,0x10
c00286c0:	90                   	nop
c00286c1:	83 c4 0c             	add    esp,0xc
c00286c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00286c6 <Computer::~Computer()>:
c00286c6:	83 ec 0c             	sub    esp,0xc
c00286c9:	83 ec 0c             	sub    esp,0xc
c00286cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d0:	e8 cd ff ff ff       	call   c00286a2 <Computer::~Computer()>
c00286d5:	83 c4 10             	add    esp,0x10
c00286d8:	83 ec 08             	sub    esp,0x8
c00286db:	68 ec 01 00 00       	push   0x1ec
c00286e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286e4:	e8 ab a7 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00286e9:	83 c4 10             	add    esp,0x10
c00286ec:	83 c4 0c             	add    esp,0xc
c00286ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00286f0 <idleCommon()>:
c00286f0:	83 ec 0c             	sub    esp,0xc
c00286f3:	e8 1e 57 ff ff       	call   c001de16 <lockScheduler()>
c00286f8:	e8 55 5a ff ff       	call   c001e152 <schedule()>
c00286fd:	83 c4 0c             	add    esp,0xc
c0028700:	e9 13 57 ff ff       	jmp    c001de18 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028706 <LinkedList<UnixFile>::~LinkedList()>:
c0028706:	90                   	nop
c0028707:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028708 <LinkedList<UnixFile>::LinkedList()>:
c0028708:	83 ec 0c             	sub    esp,0xc
c002870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874b:	83 ec 0c             	sub    esp,0xc
c002874e:	68 a6 a4 02 c0       	push   0xc002a4a6
c0028753:	e8 1c a8 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0028758:	83 c4 10             	add    esp,0x10
c002875b:	90                   	nop
c002875c:	83 c4 0c             	add    esp,0xc
c002875f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028760 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028760:	83 ec 0c             	sub    esp,0xc
c0028763:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028768:	75 10                	jne    c002877a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002876a:	83 ec 0c             	sub    esp,0xc
c002876d:	68 c0 a4 02 c0       	push   0xc002a4c0
c0028772:	e8 aa 1e ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028777:	83 c4 10             	add    esp,0x10
c002877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028780:	85 c0                	test   eax,eax
c0028782:	74 34                	je     c00287b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878b:	85 c0                	test   eax,eax
c002878d:	74 29                	je     c00287b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002878f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028793:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028796:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002879a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287b6:	eb 65                	jmp    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287be:	85 c0                	test   eax,eax
c00287c0:	75 4b                	jne    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c9:	85 c0                	test   eax,eax
c00287cb:	75 40                	jne    c002880d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00287cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287d5:	89 10                	mov    DWORD PTR [eax],edx
c00287d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f7:	85 c0                	test   eax,eax
c00287f9:	74 22                	je     c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287fb:	83 ec 0c             	sub    esp,0xc
c00287fe:	68 e2 a4 02 c0       	push   0xc002a4e2
c0028803:	e8 19 1e ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028808:	83 c4 10             	add    esp,0x10
c002880b:	eb 10                	jmp    c002881d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002880d:	83 ec 0c             	sub    esp,0xc
c0028810:	68 ec a4 02 c0       	push   0xc002a4ec
c0028815:	e8 07 1e ff ff       	call   c001a621 <Krnl::panic(char const*)>
c002881a:	83 c4 10             	add    esp,0x10
c002881d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028821:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028824:	8d 50 01             	lea    edx,[eax+0x1]
c0028827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002882e:	90                   	nop
c002882f:	83 c4 0c             	add    esp,0xc
c0028832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028834 <LinkedList<UnixFile>::getFirstElement()>:
c0028834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028838:	8b 00                	mov    eax,DWORD PTR [eax]
c002883a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002883c <LinkedList<UnixFile>::removeFirst()>:
c002883c:	83 ec 0c             	sub    esp,0xc
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 00                	mov    eax,DWORD PTR [eax]
c0028845:	85 c0                	test   eax,eax
c0028847:	75 12                	jne    c002885b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028849:	83 ec 0c             	sub    esp,0xc
c002884c:	68 f8 a4 02 c0       	push   0xc002a4f8
c0028851:	e8 cb 1d ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028856:	83 c4 10             	add    esp,0x10
c0028859:	eb 7e                	jmp    c00288d9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002885b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028862:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028865:	85 c0                	test   eax,eax
c0028867:	74 10                	je     c0028879 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028869:	83 ec 0c             	sub    esp,0xc
c002886c:	68 43 a5 02 c0       	push   0xc002a543
c0028871:	e8 ab 1d ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028876:	83 c4 10             	add    esp,0x10
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	8b 00                	mov    eax,DWORD PTR [eax]
c002887f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028882:	85 c0                	test   eax,eax
c0028884:	75 33                	jne    c00288b9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028894:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002889b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a2:	83 f8 01             	cmp    eax,0x1
c00288a5:	74 21                	je     c00288c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288a7:	83 ec 0c             	sub    esp,0xc
c00288aa:	68 1c a5 02 c0       	push   0xc002a51c
c00288af:	e8 6d 1d ff ff       	call   c001a621 <Krnl::panic(char const*)>
c00288b4:	83 c4 10             	add    esp,0x10
c00288b7:	eb 0f                	jmp    c00288c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288bf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00288c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c6:	89 10                	mov    DWORD PTR [eax],edx
c00288c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00288d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288d9:	83 c4 0c             	add    esp,0xc
c00288dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00288de <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00288de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00288e6 <DriverlessDevice::~DriverlessDevice()>:
c00288e6:	ba 24 ad 02 c0       	mov    edx,0xc002ad24
c00288eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288ef:	89 10                	mov    DWORD PTR [eax],edx
c00288f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f5:	50                   	push   eax
c00288f6:	e8 71 b9 fe ff       	call   c001426c <Device::~Device()>
c00288fb:	83 c4 04             	add    esp,0x4
c00288fe:	90                   	nop
c00288ff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028900 <DriverlessDevice::~DriverlessDevice()>:
c0028900:	83 ec 0c             	sub    esp,0xc
c0028903:	83 ec 0c             	sub    esp,0xc
c0028906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002890a:	e8 d7 ff ff ff       	call   c00288e6 <DriverlessDevice::~DriverlessDevice()>
c002890f:	83 c4 10             	add    esp,0x10
c0028912:	83 ec 08             	sub    esp,0x8
c0028915:	68 58 01 00 00       	push   0x158
c002891a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002891e:	e8 71 a5 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028923:	83 c4 10             	add    esp,0x10
c0028926:	83 c4 0c             	add    esp,0xc
c0028929:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002892a <LinkedList<Device>::addElement(Device*)>:
c002892a:	83 ec 0c             	sub    esp,0xc
c002892d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028932:	75 10                	jne    c0028944 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028934:	83 ec 0c             	sub    esp,0xc
c0028937:	68 c0 a4 02 c0       	push   0xc002a4c0
c002893c:	e8 e0 1c ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028941:	83 c4 10             	add    esp,0x10
c0028944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028948:	8b 00                	mov    eax,DWORD PTR [eax]
c002894a:	85 c0                	test   eax,eax
c002894c:	74 3a                	je     c0028988 <LinkedList<Device>::addElement(Device*)+0x5e>
c002894e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028955:	85 c0                	test   eax,eax
c0028957:	74 2f                	je     c0028988 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028964:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002896a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028972:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028979:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002897c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028986:	eb 68                	jmp    c00289f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898c:	8b 00                	mov    eax,DWORD PTR [eax]
c002898e:	85 c0                	test   eax,eax
c0028990:	75 4e                	jne    c00289e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028999:	85 c0                	test   eax,eax
c002899b:	75 43                	jne    c00289e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002899d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289a5:	89 10                	mov    DWORD PTR [eax],edx
c00289a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289b9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289ca:	85 c0                	test   eax,eax
c00289cc:	74 22                	je     c00289f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289ce:	83 ec 0c             	sub    esp,0xc
c00289d1:	68 e2 a4 02 c0       	push   0xc002a4e2
c00289d6:	e8 46 1c ff ff       	call   c001a621 <Krnl::panic(char const*)>
c00289db:	83 c4 10             	add    esp,0x10
c00289de:	eb 10                	jmp    c00289f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289e0:	83 ec 0c             	sub    esp,0xc
c00289e3:	68 ec a4 02 c0       	push   0xc002a4ec
c00289e8:	e8 34 1c ff ff       	call   c001a621 <Krnl::panic(char const*)>
c00289ed:	83 c4 10             	add    esp,0x10
c00289f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289f7:	8d 50 01             	lea    edx,[eax+0x1]
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a01:	90                   	nop
c0028a02:	83 c4 0c             	add    esp,0xc
c0028a05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a06 <LinkedList<Device>::LinkedList()>:
c0028a06:	83 ec 0c             	sub    esp,0xc
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a42:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a49:	83 ec 0c             	sub    esp,0xc
c0028a4c:	68 a6 a4 02 c0       	push   0xc002a4a6
c0028a51:	e8 1e a5 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0028a56:	83 c4 10             	add    esp,0x10
c0028a59:	90                   	nop
c0028a5a:	83 c4 0c             	add    esp,0xc
c0028a5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a5e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028a66 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a6c:	85 c0                	test   eax,eax
c0028a6e:	75 0e                	jne    c0028a7e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a77:	85 c0                	test   eax,eax
c0028a79:	75 03                	jne    c0028a7e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028a7b:	b0 01                	mov    al,0x1
c0028a7d:	c3                   	ret    
c0028a7e:	b0 00                	mov    al,0x0
c0028a80:	90                   	nop
c0028a81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028a82 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028a82:	83 ec 0c             	sub    esp,0xc
c0028a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a89:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a8b:	85 c0                	test   eax,eax
c0028a8d:	75 15                	jne    c0028aa4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028a8f:	83 ec 0c             	sub    esp,0xc
c0028a92:	68 f8 a4 02 c0       	push   0xc002a4f8
c0028a97:	e8 85 1b ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028a9c:	83 c4 10             	add    esp,0x10
c0028a9f:	e9 88 00 00 00       	jmp    c0028b2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aae:	85 c0                	test   eax,eax
c0028ab0:	0f 95 c0             	setne  al
c0028ab3:	84 c0                	test   al,al
c0028ab5:	74 10                	je     c0028ac7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028ab7:	83 ec 0c             	sub    esp,0xc
c0028aba:	68 43 a5 02 c0       	push   0xc002a543
c0028abf:	e8 5d 1b ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028ac4:	83 c4 10             	add    esp,0x10
c0028ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0028acd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028ad0:	85 c0                	test   eax,eax
c0028ad2:	0f 94 c0             	sete   al
c0028ad5:	84 c0                	test   al,al
c0028ad7:	74 33                	je     c0028b0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028af5:	83 f8 01             	cmp    eax,0x1
c0028af8:	74 21                	je     c0028b1b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028afa:	83 ec 0c             	sub    esp,0xc
c0028afd:	68 1c a5 02 c0       	push   0xc002a51c
c0028b02:	e8 1a 1b ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	eb 0f                	jmp    c0028b1b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b12:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b19:	89 10                	mov    DWORD PTR [eax],edx
c0028b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b22:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b29:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b2c:	83 c4 0c             	add    esp,0xc
c0028b2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b30:	83 ec 0c             	sub    esp,0xc
c0028b33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b38:	75 10                	jne    c0028b4a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	68 c0 a4 02 c0       	push   0xc002a4c0
c0028b42:	e8 da 1a ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b50:	85 c0                	test   eax,eax
c0028b52:	74 34                	je     c0028b88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5b:	85 c0                	test   eax,eax
c0028b5d:	74 29                	je     c0028b88 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b6a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028b75:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b7f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b86:	eb 65                	jmp    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b8e:	85 c0                	test   eax,eax
c0028b90:	75 4b                	jne    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b99:	85 c0                	test   eax,eax
c0028b9b:	75 40                	jne    c0028bdd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ba5:	89 10                	mov    DWORD PTR [eax],edx
c0028ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028baf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bb9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bc7:	85 c0                	test   eax,eax
c0028bc9:	74 22                	je     c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bcb:	83 ec 0c             	sub    esp,0xc
c0028bce:	68 e2 a4 02 c0       	push   0xc002a4e2
c0028bd3:	e8 49 1a ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028bd8:	83 c4 10             	add    esp,0x10
c0028bdb:	eb 10                	jmp    c0028bed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bdd:	83 ec 0c             	sub    esp,0xc
c0028be0:	68 ec a4 02 c0       	push   0xc002a4ec
c0028be5:	e8 37 1a ff ff       	call   c001a621 <Krnl::panic(char const*)>
c0028bea:	83 c4 10             	add    esp,0x10
c0028bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bf4:	8d 50 01             	lea    edx,[eax+0x1]
c0028bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bfe:	90                   	nop
c0028bff:	83 c4 0c             	add    esp,0xc
c0028c02:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c04 <ACPI::~ACPI()>:
c0028c04:	83 ec 0c             	sub    esp,0xc
c0028c07:	ba 88 b6 02 c0       	mov    edx,0xc002b688
c0028c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c10:	89 10                	mov    DWORD PTR [eax],edx
c0028c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c16:	83 ec 0c             	sub    esp,0xc
c0028c19:	50                   	push   eax
c0028c1a:	e8 4d b6 fe ff       	call   c001426c <Device::~Device()>
c0028c1f:	83 c4 10             	add    esp,0x10
c0028c22:	90                   	nop
c0028c23:	83 c4 0c             	add    esp,0xc
c0028c26:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c28 <ACPI::~ACPI()>:
c0028c28:	83 ec 0c             	sub    esp,0xc
c0028c2b:	83 ec 0c             	sub    esp,0xc
c0028c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c32:	e8 cd ff ff ff       	call   c0028c04 <ACPI::~ACPI()>
c0028c37:	83 c4 10             	add    esp,0x10
c0028c3a:	83 ec 08             	sub    esp,0x8
c0028c3d:	68 68 12 00 00       	push   0x1268
c0028c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c46:	e8 49 a2 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028c4b:	83 c4 10             	add    esp,0x10
c0028c4e:	83 c4 0c             	add    esp,0xc
c0028c51:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c52 <CPU::~CPU()>:
c0028c52:	83 ec 0c             	sub    esp,0xc
c0028c55:	ba 78 ba 02 c0       	mov    edx,0xc002ba78
c0028c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5e:	89 10                	mov    DWORD PTR [eax],edx
c0028c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c64:	83 ec 0c             	sub    esp,0xc
c0028c67:	50                   	push   eax
c0028c68:	e8 ff b5 fe ff       	call   c001426c <Device::~Device()>
c0028c6d:	83 c4 10             	add    esp,0x10
c0028c70:	90                   	nop
c0028c71:	83 c4 0c             	add    esp,0xc
c0028c74:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028c76 <CPU::~CPU()>:
c0028c76:	83 ec 0c             	sub    esp,0xc
c0028c79:	83 ec 0c             	sub    esp,0xc
c0028c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c80:	e8 cd ff ff ff       	call   c0028c52 <CPU::~CPU()>
c0028c85:	83 c4 10             	add    esp,0x10
c0028c88:	83 ec 08             	sub    esp,0x8
c0028c8b:	68 98 11 00 00       	push   0x1198
c0028c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c94:	e8 fb a1 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028c99:	83 c4 10             	add    esp,0x10
c0028c9c:	83 c4 0c             	add    esp,0xc
c0028c9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ca0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ca0:	90                   	nop
c0028ca1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ca2 <ThreadControlBlock::ThreadControlBlock()>:
c0028ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ca6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cb1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cbc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028cc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cc7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cd2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cda:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028cde:	90                   	nop
c0028cdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ce0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ce0:	83 ec 0c             	sub    esp,0xc
c0028ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cfc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d23:	83 ec 0c             	sub    esp,0xc
c0028d26:	68 a6 a4 02 c0       	push   0xc002a4a6
c0028d2b:	e8 44 a2 fe ff       	call   c0012f74 <Dbg::kprintf(char const*, ...)>
c0028d30:	83 c4 10             	add    esp,0x10
c0028d33:	90                   	nop
c0028d34:	83 c4 0c             	add    esp,0xc
c0028d37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d38 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d3f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d40 <Vm::_FPUState::_FPUState()>:
c0028d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d44:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d4b:	90                   	nop
c0028d4c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d4e <PCI::~PCI()>:
c0028d4e:	83 ec 0c             	sub    esp,0xc
c0028d51:	ba 04 cb 02 c0       	mov    edx,0xc002cb04
c0028d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5a:	89 10                	mov    DWORD PTR [eax],edx
c0028d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d60:	83 ec 0c             	sub    esp,0xc
c0028d63:	50                   	push   eax
c0028d64:	e8 db ae fe ff       	call   c0013c44 <Bus::~Bus()>
c0028d69:	83 c4 10             	add    esp,0x10
c0028d6c:	90                   	nop
c0028d6d:	83 c4 0c             	add    esp,0xc
c0028d70:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028d72 <PCI::~PCI()>:
c0028d72:	83 ec 0c             	sub    esp,0xc
c0028d75:	83 ec 0c             	sub    esp,0xc
c0028d78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d7c:	e8 cd ff ff ff       	call   c0028d4e <PCI::~PCI()>
c0028d81:	83 c4 10             	add    esp,0x10
c0028d84:	83 ec 08             	sub    esp,0x8
c0028d87:	68 58 01 00 00       	push   0x158
c0028d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d90:	e8 ff a0 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028d95:	83 c4 10             	add    esp,0x10
c0028d98:	83 c4 0c             	add    esp,0xc
c0028d9b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028d9c <IDE::~IDE()>:
c0028d9c:	83 ec 0c             	sub    esp,0xc
c0028d9f:	ba 68 cd 02 c0       	mov    edx,0xc002cd68
c0028da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da8:	89 10                	mov    DWORD PTR [eax],edx
c0028daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dae:	83 ec 0c             	sub    esp,0xc
c0028db1:	50                   	push   eax
c0028db2:	e8 a5 b9 fe ff       	call   c001475c <HardDiskController::~HardDiskController()>
c0028db7:	83 c4 10             	add    esp,0x10
c0028dba:	90                   	nop
c0028dbb:	83 c4 0c             	add    esp,0xc
c0028dbe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028dc0 <IDE::~IDE()>:
c0028dc0:	83 ec 0c             	sub    esp,0xc
c0028dc3:	83 ec 0c             	sub    esp,0xc
c0028dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dca:	e8 cd ff ff ff       	call   c0028d9c <IDE::~IDE()>
c0028dcf:	83 c4 10             	add    esp,0x10
c0028dd2:	83 ec 08             	sub    esp,0x8
c0028dd5:	68 70 02 00 00       	push   0x270
c0028dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dde:	e8 b1 a0 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028de3:	83 c4 10             	add    esp,0x10
c0028de6:	83 c4 0c             	add    esp,0xc
c0028de9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028dea <SATABus::~SATABus()>:
c0028dea:	83 ec 0c             	sub    esp,0xc
c0028ded:	ba 48 ce 02 c0       	mov    edx,0xc002ce48
c0028df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df6:	89 10                	mov    DWORD PTR [eax],edx
c0028df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dfc:	83 ec 0c             	sub    esp,0xc
c0028dff:	50                   	push   eax
c0028e00:	e8 57 b9 fe ff       	call   c001475c <HardDiskController::~HardDiskController()>
c0028e05:	83 c4 10             	add    esp,0x10
c0028e08:	90                   	nop
c0028e09:	83 c4 0c             	add    esp,0xc
c0028e0c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e0e <SATABus::~SATABus()>:
c0028e0e:	83 ec 0c             	sub    esp,0xc
c0028e11:	83 ec 0c             	sub    esp,0xc
c0028e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e18:	e8 cd ff ff ff       	call   c0028dea <SATABus::~SATABus()>
c0028e1d:	83 c4 10             	add    esp,0x10
c0028e20:	83 ec 08             	sub    esp,0x8
c0028e23:	68 64 01 00 00       	push   0x164
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 63 a0 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 c4 0c             	add    esp,0xc
c0028e37:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e38 <ATA::~ATA()>:
c0028e38:	83 ec 0c             	sub    esp,0xc
c0028e3b:	ba 94 ce 02 c0       	mov    edx,0xc002ce94
c0028e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e44:	89 10                	mov    DWORD PTR [eax],edx
c0028e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e4a:	83 ec 0c             	sub    esp,0xc
c0028e4d:	50                   	push   eax
c0028e4e:	e8 fb b9 fe ff       	call   c001484e <PhysicalDisk::~PhysicalDisk()>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	90                   	nop
c0028e57:	83 c4 0c             	add    esp,0xc
c0028e5a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e5c <ATA::~ATA()>:
c0028e5c:	83 ec 0c             	sub    esp,0xc
c0028e5f:	83 ec 0c             	sub    esp,0xc
c0028e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e66:	e8 cd ff ff ff       	call   c0028e38 <ATA::~ATA()>
c0028e6b:	83 c4 10             	add    esp,0x10
c0028e6e:	83 ec 08             	sub    esp,0x8
c0028e71:	68 7c 01 00 00       	push   0x17c
c0028e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7a:	e8 15 a0 fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	83 c4 0c             	add    esp,0xc
c0028e85:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028e86 <ATAPI::~ATAPI()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	ba cc ce 02 c0       	mov    edx,0xc002cecc
c0028e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e92:	89 10                	mov    DWORD PTR [eax],edx
c0028e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e98:	83 ec 0c             	sub    esp,0xc
c0028e9b:	50                   	push   eax
c0028e9c:	e8 ad b9 fe ff       	call   c001484e <PhysicalDisk::~PhysicalDisk()>
c0028ea1:	83 c4 10             	add    esp,0x10
c0028ea4:	90                   	nop
c0028ea5:	83 c4 0c             	add    esp,0xc
c0028ea8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eaa <ATAPI::~ATAPI()>:
c0028eaa:	83 ec 0c             	sub    esp,0xc
c0028ead:	83 ec 0c             	sub    esp,0xc
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 cd ff ff ff       	call   c0028e86 <ATAPI::~ATAPI()>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 ec 08             	sub    esp,0x8
c0028ebf:	68 80 01 00 00       	push   0x180
c0028ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec8:	e8 c7 9f fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	83 c4 0c             	add    esp,0xc
c0028ed3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ed4 <SATA::~SATA()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	ba 80 cf 02 c0       	mov    edx,0xc002cf80
c0028edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee0:	89 10                	mov    DWORD PTR [eax],edx
c0028ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee6:	83 ec 0c             	sub    esp,0xc
c0028ee9:	50                   	push   eax
c0028eea:	e8 5f b9 fe ff       	call   c001484e <PhysicalDisk::~PhysicalDisk()>
c0028eef:	83 c4 10             	add    esp,0x10
c0028ef2:	90                   	nop
c0028ef3:	83 c4 0c             	add    esp,0xc
c0028ef6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028ef8 <SATA::~SATA()>:
c0028ef8:	83 ec 0c             	sub    esp,0xc
c0028efb:	83 ec 0c             	sub    esp,0xc
c0028efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f02:	e8 cd ff ff ff       	call   c0028ed4 <SATA::~SATA()>
c0028f07:	83 c4 10             	add    esp,0x10
c0028f0a:	83 ec 08             	sub    esp,0x8
c0028f0d:	68 7c 01 00 00       	push   0x17c
c0028f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f16:	e8 79 9f fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	83 c4 0c             	add    esp,0xc
c0028f21:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f22 <SATAPI::~SATAPI()>:
c0028f22:	83 ec 0c             	sub    esp,0xc
c0028f25:	ba 5c d0 02 c0       	mov    edx,0xc002d05c
c0028f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2e:	89 10                	mov    DWORD PTR [eax],edx
c0028f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f34:	83 ec 0c             	sub    esp,0xc
c0028f37:	50                   	push   eax
c0028f38:	e8 11 b9 fe ff       	call   c001484e <PhysicalDisk::~PhysicalDisk()>
c0028f3d:	83 c4 10             	add    esp,0x10
c0028f40:	90                   	nop
c0028f41:	83 c4 0c             	add    esp,0xc
c0028f44:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f46 <SATAPI::~SATAPI()>:
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	83 ec 0c             	sub    esp,0xc
c0028f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f50:	e8 cd ff ff ff       	call   c0028f22 <SATAPI::~SATAPI()>
c0028f55:	83 c4 10             	add    esp,0x10
c0028f58:	83 ec 08             	sub    esp,0x8
c0028f5b:	68 80 01 00 00       	push   0x180
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 2b 9f fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 c4 0c             	add    esp,0xc
c0028f6f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028f70 <AVX::~AVX()>:
c0028f70:	83 ec 0c             	sub    esp,0xc
c0028f73:	ba 9c d0 02 c0       	mov    edx,0xc002d09c
c0028f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7c:	89 10                	mov    DWORD PTR [eax],edx
c0028f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f82:	83 ec 0c             	sub    esp,0xc
c0028f85:	50                   	push   eax
c0028f86:	e8 47 b9 fe ff       	call   c00148d2 <FPU::~FPU()>
c0028f8b:	83 c4 10             	add    esp,0x10
c0028f8e:	90                   	nop
c0028f8f:	83 c4 0c             	add    esp,0xc
c0028f92:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028f94 <AVX::~AVX()>:
c0028f94:	83 ec 0c             	sub    esp,0xc
c0028f97:	83 ec 0c             	sub    esp,0xc
c0028f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f9e:	e8 cd ff ff ff       	call   c0028f70 <AVX::~AVX()>
c0028fa3:	83 c4 10             	add    esp,0x10
c0028fa6:	83 ec 08             	sub    esp,0x8
c0028fa9:	68 58 01 00 00       	push   0x158
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 dd 9e fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 c4 0c             	add    esp,0xc
c0028fbd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028fbe <MMX::~MMX()>:
c0028fbe:	83 ec 0c             	sub    esp,0xc
c0028fc1:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	89 10                	mov    DWORD PTR [eax],edx
c0028fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd0:	83 ec 0c             	sub    esp,0xc
c0028fd3:	50                   	push   eax
c0028fd4:	e8 f9 b8 fe ff       	call   c00148d2 <FPU::~FPU()>
c0028fd9:	83 c4 10             	add    esp,0x10
c0028fdc:	90                   	nop
c0028fdd:	83 c4 0c             	add    esp,0xc
c0028fe0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028fe2 <MMX::~MMX()>:
c0028fe2:	83 ec 0c             	sub    esp,0xc
c0028fe5:	83 ec 0c             	sub    esp,0xc
c0028fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fec:	e8 cd ff ff ff       	call   c0028fbe <MMX::~MMX()>
c0028ff1:	83 c4 10             	add    esp,0x10
c0028ff4:	83 ec 08             	sub    esp,0x8
c0028ff7:	68 58 01 00 00       	push   0x158
c0028ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029000:	e8 8f 9e fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	83 c4 0c             	add    esp,0xc
c002900b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002900c <SSE::~SSE()>:
c002900c:	83 ec 0c             	sub    esp,0xc
c002900f:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0029014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029018:	89 10                	mov    DWORD PTR [eax],edx
c002901a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901e:	83 ec 0c             	sub    esp,0xc
c0029021:	50                   	push   eax
c0029022:	e8 ab b8 fe ff       	call   c00148d2 <FPU::~FPU()>
c0029027:	83 c4 10             	add    esp,0x10
c002902a:	90                   	nop
c002902b:	83 c4 0c             	add    esp,0xc
c002902e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029030 <SSE::~SSE()>:
c0029030:	83 ec 0c             	sub    esp,0xc
c0029033:	83 ec 0c             	sub    esp,0xc
c0029036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002903a:	e8 cd ff ff ff       	call   c002900c <SSE::~SSE()>
c002903f:	83 c4 10             	add    esp,0x10
c0029042:	83 ec 08             	sub    esp,0x8
c0029045:	68 58 01 00 00       	push   0x158
c002904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904e:	e8 41 9e fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	83 c4 0c             	add    esp,0xc
c0029059:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002905a <x87::~x87()>:
c002905a:	83 ec 0c             	sub    esp,0xc
c002905d:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c0029062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029066:	89 10                	mov    DWORD PTR [eax],edx
c0029068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906c:	83 ec 0c             	sub    esp,0xc
c002906f:	50                   	push   eax
c0029070:	e8 5d b8 fe ff       	call   c00148d2 <FPU::~FPU()>
c0029075:	83 c4 10             	add    esp,0x10
c0029078:	90                   	nop
c0029079:	83 c4 0c             	add    esp,0xc
c002907c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002907e <x87::~x87()>:
c002907e:	83 ec 0c             	sub    esp,0xc
c0029081:	83 ec 0c             	sub    esp,0xc
c0029084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029088:	e8 cd ff ff ff       	call   c002905a <x87::~x87()>
c002908d:	83 c4 10             	add    esp,0x10
c0029090:	83 ec 08             	sub    esp,0x8
c0029093:	68 58 01 00 00       	push   0x158
c0029098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909c:	e8 f3 9d fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	83 c4 0c             	add    esp,0xc
c00290a7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290a8 <IOAPIC::~IOAPIC()>:
c00290a8:	83 ec 0c             	sub    esp,0xc
c00290ab:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c00290b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b4:	89 10                	mov    DWORD PTR [eax],edx
c00290b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ba:	83 ec 0c             	sub    esp,0xc
c00290bd:	50                   	push   eax
c00290be:	e8 a9 b1 fe ff       	call   c001426c <Device::~Device()>
c00290c3:	83 c4 10             	add    esp,0x10
c00290c6:	90                   	nop
c00290c7:	83 c4 0c             	add    esp,0xc
c00290ca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00290cc <IOAPIC::~IOAPIC()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	83 ec 0c             	sub    esp,0xc
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 cd ff ff ff       	call   c00290a8 <IOAPIC::~IOAPIC()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 ec 08             	sub    esp,0x8
c00290e1:	68 68 01 00 00       	push   0x168
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 a5 9d fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 c4 0c             	add    esp,0xc
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00290f6 <APIC::~APIC()>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	ba 6c d2 02 c0       	mov    edx,0xc002d26c
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	89 10                	mov    DWORD PTR [eax],edx
c0029104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029108:	83 ec 0c             	sub    esp,0xc
c002910b:	50                   	push   eax
c002910c:	e8 8b bc fe ff       	call   c0014d9c <InterruptController::~InterruptController()>
c0029111:	83 c4 10             	add    esp,0x10
c0029114:	90                   	nop
c0029115:	83 c4 0c             	add    esp,0xc
c0029118:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002911a <APIC::~APIC()>:
c002911a:	83 ec 0c             	sub    esp,0xc
c002911d:	83 ec 0c             	sub    esp,0xc
c0029120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029124:	e8 cd ff ff ff       	call   c00290f6 <APIC::~APIC()>
c0029129:	83 c4 10             	add    esp,0x10
c002912c:	83 ec 08             	sub    esp,0x8
c002912f:	68 58 21 00 00       	push   0x2158
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 57 9d fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 c4 0c             	add    esp,0xc
c0029143:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029144 <PIC::~PIC()>:
c0029144:	83 ec 0c             	sub    esp,0xc
c0029147:	ba 04 d3 02 c0       	mov    edx,0xc002d304
c002914c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029150:	89 10                	mov    DWORD PTR [eax],edx
c0029152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	50                   	push   eax
c002915a:	e8 3d bc fe ff       	call   c0014d9c <InterruptController::~InterruptController()>
c002915f:	83 c4 10             	add    esp,0x10
c0029162:	90                   	nop
c0029163:	83 c4 0c             	add    esp,0xc
c0029166:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029168 <PIC::~PIC()>:
c0029168:	83 ec 0c             	sub    esp,0xc
c002916b:	83 ec 0c             	sub    esp,0xc
c002916e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029172:	e8 cd ff ff ff       	call   c0029144 <PIC::~PIC()>
c0029177:	83 c4 10             	add    esp,0x10
c002917a:	83 ec 08             	sub    esp,0x8
c002917d:	68 58 21 00 00       	push   0x2158
c0029182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029186:	e8 09 9d fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 c4 0c             	add    esp,0xc
c0029191:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029192 <APICTimer::~APICTimer()>:
c0029192:	83 ec 0c             	sub    esp,0xc
c0029195:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c002919a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919e:	89 10                	mov    DWORD PTR [eax],edx
c00291a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	50                   	push   eax
c00291a8:	e8 47 db fe ff       	call   c0016cf4 <Timer::~Timer()>
c00291ad:	83 c4 10             	add    esp,0x10
c00291b0:	90                   	nop
c00291b1:	83 c4 0c             	add    esp,0xc
c00291b4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291b6 <APICTimer::~APICTimer()>:
c00291b6:	83 ec 0c             	sub    esp,0xc
c00291b9:	83 ec 0c             	sub    esp,0xc
c00291bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c0:	e8 cd ff ff ff       	call   c0029192 <APICTimer::~APICTimer()>
c00291c5:	83 c4 10             	add    esp,0x10
c00291c8:	83 ec 08             	sub    esp,0x8
c00291cb:	68 60 01 00 00       	push   0x160
c00291d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d4:	e8 bb 9c fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 c4 0c             	add    esp,0xc
c00291df:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00291e0 <PIT::~PIT()>:
c00291e0:	83 ec 0c             	sub    esp,0xc
c00291e3:	ba a8 d3 02 c0       	mov    edx,0xc002d3a8
c00291e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ec:	89 10                	mov    DWORD PTR [eax],edx
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	83 ec 0c             	sub    esp,0xc
c00291f5:	50                   	push   eax
c00291f6:	e8 f9 da fe ff       	call   c0016cf4 <Timer::~Timer()>
c00291fb:	83 c4 10             	add    esp,0x10
c00291fe:	90                   	nop
c00291ff:	83 c4 0c             	add    esp,0xc
c0029202:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029204 <PIT::~PIT()>:
c0029204:	83 ec 0c             	sub    esp,0xc
c0029207:	83 ec 0c             	sub    esp,0xc
c002920a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002920e:	e8 cd ff ff ff       	call   c00291e0 <PIT::~PIT()>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	83 ec 08             	sub    esp,0x8
c0029219:	68 5c 01 00 00       	push   0x15c
c002921e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029222:	e8 6d 9c fe ff       	call   c0012e94 <operator delete(void*, unsigned long)>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	83 c4 0c             	add    esp,0xc
c002922d:	c3                   	ret    
