
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f1 65 01 00       	call   c0016611 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 4f 03 c0       	mov    eax,0xc0034f84
c0000025:	3d 84 4f 03 c0       	cmp    eax,0xc0034f84
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 4f 03 c0       	push   0xc0034f84
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 4f 03 c0       	mov    eax,0xc0034f84
c0000051:	2d 84 4f 03 c0       	sub    eax,0xc0034f84
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 4f 03 c0       	push   0xc0034f84
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 78 03 c0 00 	cmp    BYTE PTR ds:0xc00378a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c f9 02 c0       	mov    ebx,0xc002f99c
c0000097:	81 eb 98 f9 02 c0    	sub    ebx,0xc002f998
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 f9 02 c0       	mov    esi,0xc002f998
c00000a6:	a1 a4 78 03 c0       	mov    eax,ds:0xc00378a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 78 03 c0       	mov    ds:0xc00378a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 78 03 c0       	mov    eax,ds:0xc00378a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 4f 03 c0       	push   0xc0034f84
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 78 03 c0 01 	mov    BYTE PTR ds:0xc00378a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 78 03 c0       	push   0xc00378a8
c0000108:	68 84 4f 03 c0       	push   0xc0034f84
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 0f 4d 02 00       	call   c0024fbc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 8f 01 00       	call   c00191cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ed 4c 02 00       	call   c0024fbc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 fa 51 02 00       	call   c00254e8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 9d 56 02 00       	call   c0025994 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 b9 03 c0 	lgdtd  ds:0xc003b9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 eb 01 02 00       	jmp    c002056a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 78 03 c0       	mov    ds:0xc00378c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 78 03 c0    	mov    DWORD PTR ds:0xc00378c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 78 03 c0    	mov    ebx,DWORD PTR ds:0xc00378c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 f9 02 c0 02 	test   BYTE PTR [edx-0x3ffd0660],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 f9 02 c0 01 	test   BYTE PTR [edx-0x3ffd0660],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 f9 02 c0 08 	test   BYTE PTR [edx-0x3ffd0660],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 f9 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0660],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 f9 02 c0 01 	test   BYTE PTR [edx-0x3ffd0660],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 a4 fa 02 c0       	push   0xc002faa4
c0000c47:	e8 58 16 02 00       	call   c00222a4 <KeCPuts>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 df fa 02 c0       	push   0xc002fadf
c0000c5f:	e8 28 16 02 00       	call   c002228c <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 43 15 02 00       	call   c00221cc <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 6d 15 02 00       	call   c0022210 <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 71 15 02 00       	call   c002222c <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 70 15 02 00       	call   c0022248 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 f9 fa 02 c0       	push   0xc002faf9
c0000ceb:	e8 9c 15 02 00       	call   c002228c <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 06 fb 02 c0       	push   0xc002fb06
c0000d07:	e8 80 15 02 00       	call   c002228c <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 14 fb 02 c0       	push   0xc002fb14
c0000d1f:	e8 68 15 02 00       	call   c002228c <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 22 fb 02 c0       	push   0xc002fb22
c0000d37:	e8 50 15 02 00       	call   c002228c <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 36 fb 02 c0       	push   0xc002fb36
c0000d53:	e8 34 15 02 00       	call   c002228c <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 4d fb 02 c0       	push   0xc002fb4d
c0000d6f:	e8 18 15 02 00       	call   c002228c <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 d9 14 02 00       	call   c0022268 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f10:	85 c9                	test   ecx,ecx
c0000f12:	0f 84 01 01 00 00    	je     c0001019 <dlfree+0x110>
c0000f18:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f1b:	8b 1d e0 78 03 c0    	mov    ebx,DWORD PTR ds:0xc00378e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c3                	cmp    ebx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 cb 03             	or     ebx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 1d e0 78 03 c0    	mov    DWORD PTR ds:0xc00378e0,ebx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 1c 85 e4 78 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc871c]
c0000f43:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f45:	89 14 85 e4 78 03 c0 	mov    DWORD PTR [eax*4-0x3ffc871c],edx
c0000f4c:	e9 c8 00 00 00       	jmp    c0001019 <dlfree+0x110>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 cb 01             	or     ebx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 1d e0 78 03 c0    	mov    DWORD PTR ds:0xc00378e0,ebx
c0000f66:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f69:	83 e3 fc             	and    ebx,0xfffffffc
c0000f6c:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000f75:	29 ca                	sub    edx,ecx
c0000f77:	01 c8                	add    eax,ecx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000f7f:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000f82:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000f85:	39 35 0c 79 03 c0    	cmp    DWORD PTR ds:0xc003790c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000f91:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000f94:	80 e1 01             	and    cl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000f9f:	01 d8                	add    eax,ebx
c0000fa1:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fa4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fa7:	8b 0d 1c 79 03 c0    	mov    ecx,DWORD PTR ds:0xc003791c
c0000fad:	c7 42 0c 14 79 03 c0 	mov    DWORD PTR [edx+0xc],0xc0037914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 d8                	add    eax,ebx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 35                	jbe    c0001019 <dlfree+0x110>
c0000fe4:	f6 05 e0 78 03 c0 02 	test   BYTE PTR ds:0xc00378e0,0x2
c0000feb:	74 2c                	je     c0001019 <dlfree+0x110>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000ffd:	01 c8                	add    eax,ecx
c0000fff:	53                   	push   ebx
c0001000:	29 ca                	sub    edx,ecx
c0001002:	53                   	push   ebx
c0001003:	ff 0d 30 7c 03 c0    	dec    DWORD PTR ds:0xc0037c30
c0001009:	50                   	push   eax
c000100a:	29 05 44 7c 03 c0    	sub    DWORD PTR ds:0xc0037c44,eax
c0001010:	52                   	push   edx
c0001011:	e8 21 55 01 00       	call   c0016537 <munmap>
c0001016:	83 c4 10             	add    esp,0x10
c0001019:	5b                   	pop    ebx
c000101a:	5e                   	pop    esi
c000101b:	5f                   	pop    edi
c000101c:	c3                   	ret    

c000101d <sYSMALLOc>:
c000101d:	55                   	push   ebp
c000101e:	57                   	push   edi
c000101f:	56                   	push   esi
c0001020:	53                   	push   ebx
c0001021:	89 d3                	mov    ebx,edx
c0001023:	83 ec 2c             	sub    esp,0x2c
c0001026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000102a:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0001030:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001033:	8d 45 ff             	lea    eax,[ebp-0x1]
c0001036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000103a:	74 1f                	je     c000105b <sYSMALLOc+0x3e>
c000103c:	89 d0                	mov    eax,edx
c000103e:	e8 df fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001043:	83 ec 0c             	sub    esp,0xc
c0001046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000104a:	83 e8 07             	sub    eax,0x7
c000104d:	50                   	push   eax
c000104e:	e8 7d 03 00 00       	call   c00013d0 <dlmalloc>
c0001053:	83 c4 10             	add    esp,0x10
c0001056:	e9 6d 03 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000105b:	f7 dd                	neg    ebp
c000105d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001061:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0001065:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000106b:	0f 87 be 00 00 00    	ja     c000112f <sYSMALLOc+0x112>
c0001071:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0001077:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c000107d:	0f 8d ac 00 00 00    	jge    c000112f <sYSMALLOc+0x112>
c0001083:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0001087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000108b:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c000108f:	21 ee                	and    esi,ebp
c0001091:	39 fe                	cmp    esi,edi
c0001093:	0f 86 96 00 00 00    	jbe    c000112f <sYSMALLOc+0x112>
c0001099:	52                   	push   edx
c000109a:	52                   	push   edx
c000109b:	6a 00                	push   0x0
c000109d:	6a ff                	push   0xffffffff
c000109f:	6a 0c                	push   0xc
c00010a1:	6a 03                	push   0x3
c00010a3:	56                   	push   esi
c00010a4:	6a 00                	push   0x0
c00010a6:	e8 2e 54 01 00       	call   c00164d9 <mmap>
c00010ab:	83 c4 20             	add    esp,0x20
c00010ae:	83 f8 ff             	cmp    eax,0xffffffff
c00010b1:	74 7c                	je     c000112f <sYSMALLOc+0x112>
c00010b3:	89 c1                	mov    ecx,eax
c00010b5:	83 e1 07             	and    ecx,0x7
c00010b8:	74 13                	je     c00010cd <sYSMALLOc+0xb0>
c00010ba:	ba 08 00 00 00       	mov    edx,0x8
c00010bf:	29 ca                	sub    edx,ecx
c00010c1:	89 f1                	mov    ecx,esi
c00010c3:	01 d0                	add    eax,edx
c00010c5:	29 d1                	sub    ecx,edx
c00010c7:	89 10                	mov    DWORD PTR [eax],edx
c00010c9:	89 ca                	mov    edx,ecx
c00010cb:	eb 08                	jmp    c00010d5 <sYSMALLOc+0xb8>
c00010cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00010d3:	89 f2                	mov    edx,esi
c00010d5:	83 ca 02             	or     edx,0x2
c00010d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00010db:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c00010e1:	8d 57 01             	lea    edx,[edi+0x1]
c00010e4:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c00010ea:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c00010f0:	7e 06                	jle    c00010f8 <sYSMALLOc+0xdb>
c00010f2:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c00010f8:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c00010fe:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0001104:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c000110a:	76 06                	jbe    c0001112 <sYSMALLOc+0xf5>
c000110c:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001112:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0001118:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c000111e:	0f 83 3f 01 00 00    	jae    c0001263 <sYSMALLOc+0x246>
c0001124:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000112a:	e9 34 01 00 00       	jmp    c0001263 <sYSMALLOc+0x246>
c000112f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001132:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0001138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000113f:	83 e0 fc             	and    eax,0xfffffffc
c0001142:	89 04 24             	mov    DWORD PTR [esp],eax
c0001145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001149:	03 04 24             	add    eax,DWORD PTR [esp]
c000114c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001154:	83 c0 10             	add    eax,0x10
c0001157:	01 c5                	add    ebp,eax
c0001159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000115d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001164:	74 03                	je     c0001169 <sYSMALLOc+0x14c>
c0001166:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0001169:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c000116d:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0001171:	89 ee                	mov    esi,ebp
c0001173:	7f 18                	jg     c000118d <sYSMALLOc+0x170>
c0001175:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000117c:	74 27                	je     c00011a5 <sYSMALLOc+0x188>
c000117e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001182:	03 34 24             	add    esi,DWORD PTR [esp]
c0001185:	01 ee                	add    esi,ebp
c0001187:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c000118b:	eb 18                	jmp    c00011a5 <sYSMALLOc+0x188>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	55                   	push   ebp
c0001191:	e8 0d 53 01 00       	call   c00164a3 <sbrk_thunk>
c0001196:	83 c4 10             	add    esp,0x10
c0001199:	89 c7                	mov    edi,eax
c000119b:	83 c8 ff             	or     eax,0xffffffff
c000119e:	83 ff ff             	cmp    edi,0xffffffff
c00011a1:	75 42                	jne    c00011e5 <sYSMALLOc+0x1c8>
c00011a3:	eb d0                	jmp    c0001175 <sYSMALLOc+0x158>
c00011a5:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011ab:	77 05                	ja     c00011b2 <sYSMALLOc+0x195>
c00011ad:	be 00 c0 00 00       	mov    esi,0xc000
c00011b2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00011b6:	77 07                	ja     c00011bf <sYSMALLOc+0x1a2>
c00011b8:	31 c0                	xor    eax,eax
c00011ba:	e9 09 02 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c00011bf:	50                   	push   eax
c00011c0:	50                   	push   eax
c00011c1:	6a 00                	push   0x0
c00011c3:	6a ff                	push   0xffffffff
c00011c5:	6a 0c                	push   0xc
c00011c7:	6a 03                	push   0x3
c00011c9:	56                   	push   esi
c00011ca:	6a 00                	push   0x0
c00011cc:	e8 08 53 01 00       	call   c00164d9 <mmap>
c00011d1:	83 c4 20             	add    esp,0x20
c00011d4:	89 c7                	mov    edi,eax
c00011d6:	83 f8 ff             	cmp    eax,0xffffffff
c00011d9:	74 dd                	je     c00011b8 <sYSMALLOc+0x19b>
c00011db:	8d 04 30             	lea    eax,[eax+esi*1]
c00011de:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011e5:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c00011eb:	01 f5                	add    ebp,esi
c00011ed:	83 f8 ff             	cmp    eax,0xffffffff
c00011f0:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00011f6:	75 73                	jne    c000126b <sYSMALLOc+0x24e>
c00011f8:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00011fc:	75 6d                	jne    c000126b <sYSMALLOc+0x24e>
c00011fe:	03 34 24             	add    esi,DWORD PTR [esp]
c0001201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001205:	83 ce 01             	or     esi,0x1
c0001208:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000120b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001211:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001217:	73 06                	jae    c000121f <sYSMALLOc+0x202>
c0001219:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000121f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001225:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000122b:	73 06                	jae    c0001233 <sYSMALLOc+0x216>
c000122d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001233:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001236:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001239:	83 e2 fc             	and    edx,0xfffffffc
c000123c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001240:	0f 82 72 ff ff ff    	jb     c00011b8 <sYSMALLOc+0x19b>
c0001246:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000124a:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c000124e:	01 c1                	add    ecx,eax
c0001250:	83 ca 01             	or     edx,0x1
c0001253:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001256:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000125a:	83 cb 01             	or     ebx,0x1
c000125d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001263:	83 c0 08             	add    eax,0x8
c0001266:	e9 5d 01 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000126b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001271:	89 d1                	mov    ecx,edx
c0001273:	83 e1 01             	and    ecx,0x1
c0001276:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000127a:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c000127f:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c0001283:	74 14                	je     c0001299 <sYSMALLOc+0x27c>
c0001285:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001289:	76 0e                	jbe    c0001299 <sYSMALLOc+0x27c>
c000128b:	83 e2 fe             	and    edx,0xfffffffe
c000128e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001294:	e9 89 00 00 00       	jmp    c0001322 <sYSMALLOc+0x305>
c0001299:	85 c9                	test   ecx,ecx
c000129b:	0f 84 81 00 00 00    	je     c0001322 <sYSMALLOc+0x305>
c00012a1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00012a5:	74 0e                	je     c00012b5 <sYSMALLOc+0x298>
c00012a7:	89 f8                	mov    eax,edi
c00012a9:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00012ad:	01 c5                	add    ebp,eax
c00012af:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00012b5:	89 fa                	mov    edx,edi
c00012b7:	83 e2 07             	and    edx,0x7
c00012ba:	74 0c                	je     c00012c8 <sYSMALLOc+0x2ab>
c00012bc:	b8 08 00 00 00       	mov    eax,0x8
c00012c1:	29 d0                	sub    eax,edx
c00012c3:	8d 14 07             	lea    edx,[edi+eax*1]
c00012c6:	eb 04                	jmp    c00012cc <sYSMALLOc+0x2af>
c00012c8:	89 fa                	mov    edx,edi
c00012ca:	31 c0                	xor    eax,eax
c00012cc:	03 04 24             	add    eax,DWORD PTR [esp]
c00012cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00012d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00012d7:	8d 0c 06             	lea    ecx,[esi+eax*1]
c00012da:	83 ec 0c             	sub    esp,0xc
c00012dd:	01 f9                	add    ecx,edi
c00012df:	01 cd                	add    ebp,ecx
c00012e1:	29 c8                	sub    eax,ecx
c00012e3:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c00012e7:	01 c5                	add    ebp,eax
c00012e9:	55                   	push   ebp
c00012ea:	e8 b4 51 01 00       	call   c00164a3 <sbrk_thunk>
c00012ef:	83 c4 10             	add    esp,0x10
c00012f2:	83 f8 ff             	cmp    eax,0xffffffff
c00012f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00012f9:	75 17                	jne    c0001312 <sYSMALLOc+0x2f5>
c00012fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00012ff:	83 ec 0c             	sub    esp,0xc
c0001302:	6a 00                	push   0x0
c0001304:	e8 9a 51 01 00       	call   c00164a3 <sbrk_thunk>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001310:	eb 32                	jmp    c0001344 <sYSMALLOc+0x327>
c0001312:	39 f8                	cmp    eax,edi
c0001314:	73 39                	jae    c000134f <sYSMALLOc+0x332>
c0001316:	8d 04 37             	lea    eax,[edi+esi*1]
c0001319:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001320:	eb 22                	jmp    c0001344 <sYSMALLOc+0x327>
c0001322:	89 fa                	mov    edx,edi
c0001324:	83 f8 ff             	cmp    eax,0xffffffff
c0001327:	75 24                	jne    c000134d <sYSMALLOc+0x330>
c0001329:	83 ec 0c             	sub    esp,0xc
c000132c:	6a 00                	push   0x0
c000132e:	e8 70 51 01 00       	call   c00164a3 <sbrk_thunk>
c0001333:	83 c4 10             	add    esp,0x10
c0001336:	89 c2                	mov    edx,eax
c0001338:	29 fa                	sub    edx,edi
c000133a:	29 f2                	sub    edx,esi
c000133c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001342:	89 fa                	mov    edx,edi
c0001344:	83 f8 ff             	cmp    eax,0xffffffff
c0001347:	0f 84 be fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000134d:	31 ed                	xor    ebp,ebp
c000134f:	29 d0                	sub    eax,edx
c0001351:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0001354:	01 e8                	add    eax,ebp
c0001356:	83 c8 01             	or     eax,0x1
c0001359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000135c:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c0001362:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0001366:	0f 84 9f fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000136c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001370:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0001373:	83 ee 0c             	sub    esi,0xc
c0001376:	83 e6 f8             	and    esi,0xfffffff8
c0001379:	89 f0                	mov    eax,esi
c000137b:	83 c8 01             	or     eax,0x1
c000137e:	83 fe 0f             	cmp    esi,0xf
c0001381:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001384:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000138c:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001394:	0f 86 71 fe ff ff    	jbe    c000120b <sYSMALLOc+0x1ee>
c000139a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00013a0:	83 ec 0c             	sub    esp,0xc
c00013a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00013ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00013b1:	83 c0 08             	add    eax,0x8
c00013b4:	50                   	push   eax
c00013b5:	e8 4f fb ff ff       	call   c0000f09 <dlfree>
c00013ba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00013c0:	83 c4 10             	add    esp,0x10
c00013c3:	e9 43 fe ff ff       	jmp    c000120b <sYSMALLOc+0x1ee>
c00013c8:	83 c4 2c             	add    esp,0x2c
c00013cb:	5b                   	pop    ebx
c00013cc:	5e                   	pop    esi
c00013cd:	5f                   	pop    edi
c00013ce:	5d                   	pop    ebp
c00013cf:	c3                   	ret    

c00013d0 <dlmalloc>:
c00013d0:	55                   	push   ebp
c00013d1:	57                   	push   edi
c00013d2:	56                   	push   esi
c00013d3:	53                   	push   ebx
c00013d4:	83 ec 1c             	sub    esp,0x1c
c00013d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00013db:	83 f8 df             	cmp    eax,0xffffffdf
c00013de:	0f 87 70 03 00 00    	ja     c0001754 <dlmalloc+0x384>
c00013e4:	83 c0 0b             	add    eax,0xb
c00013e7:	be 10 00 00 00       	mov    esi,0x10
c00013ec:	83 f8 0f             	cmp    eax,0xf
c00013ef:	76 05                	jbe    c00013f6 <dlmalloc+0x26>
c00013f1:	83 e0 f8             	and    eax,0xfffffff8
c00013f4:	89 c6                	mov    esi,eax
c00013f6:	8b 3d e0 78 03 c0    	mov    edi,DWORD PTR ds:0xc00378e0
c00013fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0001402:	75 17                	jne    c000141b <dlmalloc+0x4b>
c0001404:	85 ff                	test   edi,edi
c0001406:	0f 85 05 03 00 00    	jne    c0001711 <dlmalloc+0x341>
c000140c:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001411:	e8 0c fa ff ff       	call   c0000e22 <malloc_consolidate>
c0001416:	e9 f6 02 00 00       	jmp    c0001711 <dlmalloc+0x341>
c000141b:	39 f7                	cmp    edi,esi
c000141d:	72 1f                	jb     c000143e <dlmalloc+0x6e>
c000141f:	89 f2                	mov    edx,esi
c0001421:	c1 ea 03             	shr    edx,0x3
c0001424:	83 ea 02             	sub    edx,0x2
c0001427:	8b 04 95 e4 78 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc871c]
c000142e:	85 c0                	test   eax,eax
c0001430:	74 0c                	je     c000143e <dlmalloc+0x6e>
c0001432:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001435:	89 0c 95 e4 78 03 c0 	mov    DWORD PTR [edx*4-0x3ffc871c],ecx
c000143c:	eb 30                	jmp    c000146e <dlmalloc+0x9e>
c000143e:	89 f0                	mov    eax,esi
c0001440:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001446:	77 2e                	ja     c0001476 <dlmalloc+0xa6>
c0001448:	c1 e8 03             	shr    eax,0x3
c000144b:	8d 14 c5 14 79 03 c0 	lea    edx,[eax*8-0x3ffc86ec]
c0001452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001456:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001459:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000145c:	39 c3                	cmp    ebx,eax
c000145e:	74 2e                	je     c000148e <dlmalloc+0xbe>
c0001460:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001463:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001468:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000146b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000146e:	83 c0 08             	add    eax,0x8
c0001471:	e9 e0 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001476:	e8 23 f9 ff ff       	call   c0000d9e <largebin_index>
c000147b:	83 e7 02             	and    edi,0x2
c000147e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001482:	74 0a                	je     c000148e <dlmalloc+0xbe>
c0001484:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001489:	e8 94 f9 ff ff       	call   c0000e22 <malloc_consolidate>
c000148e:	8d 46 10             	lea    eax,[esi+0x10]
c0001491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001495:	8b 1d 20 79 03 c0    	mov    ebx,DWORD PTR ds:0xc0037920
c000149b:	81 fb 14 79 03 c0    	cmp    ebx,0xc0037914
c00014a1:	0f 84 13 01 00 00    	je     c00015ba <dlmalloc+0x1ea>
c00014a7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ad:	83 e7 fc             	and    edi,0xfffffffc
c00014b0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014b6:	77 4c                	ja     c0001504 <dlmalloc+0x134>
c00014b8:	3d 14 79 03 c0       	cmp    eax,0xc0037914
c00014bd:	75 45                	jne    c0001504 <dlmalloc+0x134>
c00014bf:	39 1d 10 79 03 c0    	cmp    DWORD PTR ds:0xc0037910,ebx
c00014c5:	75 3d                	jne    c0001504 <dlmalloc+0x134>
c00014c7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014cb:	73 37                	jae    c0001504 <dlmalloc+0x134>
c00014cd:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014d0:	89 fa                	mov    edx,edi
c00014d2:	a3 1c 79 03 c0       	mov    ds:0xc003791c,eax
c00014d7:	a3 20 79 03 c0       	mov    ds:0xc0037920,eax
c00014dc:	a3 10 79 03 c0       	mov    ds:0xc0037910,eax
c00014e1:	29 f2                	sub    edx,esi
c00014e3:	c7 40 08 14 79 03 c0 	mov    DWORD PTR [eax+0x8],0xc0037914
c00014ea:	c7 40 0c 14 79 03 c0 	mov    DWORD PTR [eax+0xc],0xc0037914
c00014f1:	83 ce 01             	or     esi,0x1
c00014f4:	89 d1                	mov    ecx,edx
c00014f6:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00014f9:	83 c9 01             	or     ecx,0x1
c00014fc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00014ff:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001502:	eb 15                	jmp    c0001519 <dlmalloc+0x149>
c0001504:	a3 20 79 03 c0       	mov    ds:0xc0037920,eax
c0001509:	39 fe                	cmp    esi,edi
c000150b:	c7 40 08 14 79 03 c0 	mov    DWORD PTR [eax+0x8],0xc0037914
c0001512:	75 0d                	jne    c0001521 <dlmalloc+0x151>
c0001514:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001519:	8d 43 08             	lea    eax,[ebx+0x8]
c000151c:	e9 35 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001521:	89 f8                	mov    eax,edi
c0001523:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001529:	77 19                	ja     c0001544 <dlmalloc+0x174>
c000152b:	c1 e8 03             	shr    eax,0x3
c000152e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001531:	83 c2 0d             	add    edx,0xd
c0001534:	8d 2c 95 d8 78 03 c0 	lea    ebp,[edx*4-0x3ffc8728]
c000153b:	8b 14 95 e0 78 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc8720]
c0001542:	eb 46                	jmp    c000158a <dlmalloc+0x1ba>
c0001544:	e8 55 f8 ff ff       	call   c0000d9e <largebin_index>
c0001549:	8d 14 00             	lea    edx,[eax+eax*1]
c000154c:	83 c2 0d             	add    edx,0xd
c000154f:	8d 0c 95 e0 78 03 c0 	lea    ecx,[edx*4-0x3ffc8720]
c0001556:	8b 14 95 e0 78 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc8720]
c000155d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001560:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001564:	89 d5                	mov    ebp,edx
c0001566:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000156a:	74 1e                	je     c000158a <dlmalloc+0x1ba>
c000156c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000156f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001572:	77 12                	ja     c0001586 <dlmalloc+0x1b6>
c0001574:	83 cf 01             	or     edi,0x1
c0001577:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000157a:	76 05                	jbe    c0001581 <dlmalloc+0x1b1>
c000157c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000157f:	eb f6                	jmp    c0001577 <dlmalloc+0x1a7>
c0001581:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001584:	eb 04                	jmp    c000158a <dlmalloc+0x1ba>
c0001586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000158a:	89 c7                	mov    edi,eax
c000158c:	88 c1                	mov    cl,al
c000158e:	c1 ff 05             	sar    edi,0x5
c0001591:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001595:	bf 01 00 00 00       	mov    edi,0x1
c000159a:	d3 e7                	shl    edi,cl
c000159c:	89 f8                	mov    eax,edi
c000159e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015a2:	09 04 bd 14 7c 03 c0 	or     DWORD PTR [edi*4-0x3ffc83ec],eax
c00015a9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015ac:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015af:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015b2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015b5:	e9 db fe ff ff       	jmp    c0001495 <dlmalloc+0xc5>
c00015ba:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015c0:	76 78                	jbe    c000163a <dlmalloc+0x26a>
c00015c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015c6:	8d 04 c5 14 79 03 c0 	lea    eax,[eax*8-0x3ffc86ec]
c00015cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00015d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015d3:	39 ca                	cmp    edx,ecx
c00015d5:	74 63                	je     c000163a <dlmalloc+0x26a>
c00015d7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00015da:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015dd:	83 e3 fc             	and    ebx,0xfffffffc
c00015e0:	39 de                	cmp    esi,ebx
c00015e2:	77 52                	ja     c0001636 <dlmalloc+0x266>
c00015e4:	89 df                	mov    edi,ebx
c00015e6:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00015e9:	29 f7                	sub    edi,esi
c00015eb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00015ee:	01 d3                	add    ebx,edx
c00015f0:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00015f3:	83 ff 0f             	cmp    edi,0xf
c00015f6:	8d 42 08             	lea    eax,[edx+0x8]
c00015f9:	77 09                	ja     c0001604 <dlmalloc+0x234>
c00015fb:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00015ff:	e9 52 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001604:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001607:	83 ce 01             	or     esi,0x1
c000160a:	89 0d 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,ecx
c0001610:	89 0d 20 79 03 c0    	mov    DWORD PTR ds:0xc0037920,ecx
c0001616:	c7 41 08 14 79 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0037914
c000161d:	c7 41 0c 14 79 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0037914
c0001624:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001627:	89 fa                	mov    edx,edi
c0001629:	83 ca 01             	or     edx,0x1
c000162c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000162f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001631:	e9 20 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001636:	89 c2                	mov    edx,eax
c0001638:	eb 99                	jmp    c00015d3 <dlmalloc+0x203>
c000163a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000163e:	b8 01 00 00 00       	mov    eax,0x1
c0001643:	41                   	inc    ecx
c0001644:	89 cb                	mov    ebx,ecx
c0001646:	8d 14 cd 0c 79 03 c0 	lea    edx,[ecx*8-0x3ffc86f4]
c000164d:	c1 eb 05             	shr    ebx,0x5
c0001650:	d3 e0                	shl    eax,cl
c0001652:	8b 3c 9d 14 7c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc83ec]
c0001659:	39 f8                	cmp    eax,edi
c000165b:	77 04                	ja     c0001661 <dlmalloc+0x291>
c000165d:	85 c0                	test   eax,eax
c000165f:	75 26                	jne    c0001687 <dlmalloc+0x2b7>
c0001661:	43                   	inc    ebx
c0001662:	83 fb 02             	cmp    ebx,0x2
c0001665:	0f 87 a6 00 00 00    	ja     c0001711 <dlmalloc+0x341>
c000166b:	8b 3c 9d 14 7c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc83ec]
c0001672:	85 ff                	test   edi,edi
c0001674:	74 eb                	je     c0001661 <dlmalloc+0x291>
c0001676:	89 d8                	mov    eax,ebx
c0001678:	c1 e0 06             	shl    eax,0x6
c000167b:	8d 14 85 0c 79 03 c0 	lea    edx,[eax*4-0x3ffc86f4]
c0001682:	b8 01 00 00 00       	mov    eax,0x1
c0001687:	85 f8                	test   eax,edi
c0001689:	75 07                	jne    c0001692 <dlmalloc+0x2c2>
c000168b:	83 c2 08             	add    edx,0x8
c000168e:	01 c0                	add    eax,eax
c0001690:	eb f5                	jmp    c0001687 <dlmalloc+0x2b7>
c0001692:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001695:	39 ca                	cmp    edx,ecx
c0001697:	75 14                	jne    c00016ad <dlmalloc+0x2dd>
c0001699:	89 c1                	mov    ecx,eax
c000169b:	83 c2 08             	add    edx,0x8
c000169e:	f7 d1                	not    ecx
c00016a0:	01 c0                	add    eax,eax
c00016a2:	21 cf                	and    edi,ecx
c00016a4:	89 3c 9d 14 7c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc83ec],edi
c00016ab:	eb ac                	jmp    c0001659 <dlmalloc+0x289>
c00016ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016b0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016b3:	83 e0 fc             	and    eax,0xfffffffc
c00016b6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016b9:	89 c3                	mov    ebx,eax
c00016bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016be:	29 f3                	sub    ebx,esi
c00016c0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016c3:	83 fb 0f             	cmp    ebx,0xf
c00016c6:	8d 41 08             	lea    eax,[ecx+0x8]
c00016c9:	77 09                	ja     c00016d4 <dlmalloc+0x304>
c00016cb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016cf:	e9 82 00 00 00       	jmp    c0001756 <dlmalloc+0x386>
c00016d4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00016d7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00016dd:	89 3d 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,edi
c00016e3:	89 3d 20 79 03 c0    	mov    DWORD PTR ds:0xc0037920,edi
c00016e9:	c7 47 08 14 79 03 c0 	mov    DWORD PTR [edi+0x8],0xc0037914
c00016f0:	c7 47 0c 14 79 03 c0 	mov    DWORD PTR [edi+0xc],0xc0037914
c00016f7:	77 06                	ja     c00016ff <dlmalloc+0x32f>
c00016f9:	89 3d 10 79 03 c0    	mov    DWORD PTR ds:0xc0037910,edi
c00016ff:	83 ce 01             	or     esi,0x1
c0001702:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001705:	89 d9                	mov    ecx,ebx
c0001707:	83 c9 01             	or     ecx,0x1
c000170a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000170d:	89 1a                	mov    DWORD PTR [edx],ebx
c000170f:	eb 45                	jmp    c0001756 <dlmalloc+0x386>
c0001711:	a1 0c 79 03 c0       	mov    eax,ds:0xc003790c
c0001716:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001719:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000171c:	83 e2 fc             	and    edx,0xfffffffc
c000171f:	39 d1                	cmp    ecx,edx
c0001721:	77 1e                	ja     c0001741 <dlmalloc+0x371>
c0001723:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 0d 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,ecx
c000172e:	83 cb 01             	or     ebx,0x1
c0001731:	29 f2                	sub    edx,esi
c0001733:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001736:	83 ca 01             	or     edx,0x1
c0001739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000173c:	e9 2d fd ff ff       	jmp    c000146e <dlmalloc+0x9e>
c0001741:	83 c4 1c             	add    esp,0x1c
c0001744:	89 f0                	mov    eax,esi
c0001746:	5b                   	pop    ebx
c0001747:	ba e0 78 03 c0       	mov    edx,0xc00378e0
c000174c:	5e                   	pop    esi
c000174d:	5f                   	pop    edi
c000174e:	5d                   	pop    ebp
c000174f:	e9 c9 f8 ff ff       	jmp    c000101d <sYSMALLOc>
c0001754:	31 c0                	xor    eax,eax
c0001756:	83 c4 1c             	add    esp,0x1c
c0001759:	5b                   	pop    ebx
c000175a:	5e                   	pop    esi
c000175b:	5f                   	pop    edi
c000175c:	5d                   	pop    ebp
c000175d:	c3                   	ret    

c000175e <iALLOc>:
c000175e:	55                   	push   ebp
c000175f:	89 c5                	mov    ebp,eax
c0001761:	57                   	push   edi
c0001762:	56                   	push   esi
c0001763:	53                   	push   ebx
c0001764:	83 ec 2c             	sub    esp,0x2c
c0001767:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000176b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000176f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001773:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c000177a:	75 12                	jne    c000178e <iALLOc+0x30>
c000177c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001780:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001785:	e8 98 f6 ff ff       	call   c0000e22 <malloc_consolidate>
c000178a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000178e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001793:	74 12                	je     c00017a7 <iALLOc+0x49>
c0001795:	85 ed                	test   ebp,ebp
c0001797:	0f 84 64 01 00 00    	je     c0001901 <iALLOc+0x1a3>
c000179d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017a5:	eb 33                	jmp    c00017da <iALLOc+0x7c>
c00017a7:	85 ed                	test   ebp,ebp
c00017a9:	75 14                	jne    c00017bf <iALLOc+0x61>
c00017ab:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017b3:	83 c4 2c             	add    esp,0x2c
c00017b6:	5b                   	pop    ebx
c00017b7:	5e                   	pop    esi
c00017b8:	5f                   	pop    edi
c00017b9:	5d                   	pop    ebp
c00017ba:	e9 11 fc ff ff       	jmp    c00013d0 <dlmalloc>
c00017bf:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017c6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017ce:	83 f8 0f             	cmp    eax,0xf
c00017d1:	76 07                	jbe    c00017da <iALLOc+0x7c>
c00017d3:	83 e0 f8             	and    eax,0xfffffff8
c00017d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00017da:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00017df:	75 09                	jne    c00017ea <iALLOc+0x8c>
c00017e1:	89 d0                	mov    eax,edx
c00017e3:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00017e6:	31 f6                	xor    esi,esi
c00017e8:	eb 3b                	jmp    c0001825 <iALLOc+0xc7>
c00017ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00017ec:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00017f4:	83 c0 0b             	add    eax,0xb
c00017f7:	83 f8 0f             	cmp    eax,0xf
c00017fa:	76 07                	jbe    c0001803 <iALLOc+0xa5>
c00017fc:	83 e0 f8             	and    eax,0xfffffff8
c00017ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001807:	0f af f5             	imul   esi,ebp
c000180a:	eb 25                	jmp    c0001831 <iALLOc+0xd3>
c000180c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000180e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001811:	bb 10 00 00 00       	mov    ebx,0x10
c0001816:	83 f9 0f             	cmp    ecx,0xf
c0001819:	76 05                	jbe    c0001820 <iALLOc+0xc2>
c000181b:	83 e1 f8             	and    ecx,0xfffffff8
c000181e:	89 cb                	mov    ebx,ecx
c0001820:	01 de                	add    esi,ebx
c0001822:	83 c0 04             	add    eax,0x4
c0001825:	39 c7                	cmp    edi,eax
c0001827:	75 e3                	jne    c000180c <iALLOc+0xae>
c0001829:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001831:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001835:	8b 1d 34 7c 03 c0    	mov    ebx,DWORD PTR ds:0xc0037c34
c000183b:	83 ec 0c             	sub    esp,0xc
c000183e:	c7 05 34 7c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037c34,0x0
c0001848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000184c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001850:	50                   	push   eax
c0001851:	e8 7a fb ff ff       	call   c00013d0 <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 1d 34 7c 03 c0    	mov    DWORD PTR ds:0xc0037c34,ebx
c000185f:	85 c0                	test   eax,eax
c0001861:	0f 84 92 00 00 00    	je     c00018f9 <iALLOc+0x19b>
c0001867:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000186a:	8d 78 f8             	lea    edi,[eax-0x8]
c000186d:	83 e3 fc             	and    ebx,0xfffffffc
c0001870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001874:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001879:	74 1e                	je     c0001899 <iALLOc+0x13b>
c000187b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000187f:	89 d9                	mov    ecx,ebx
c0001881:	52                   	push   edx
c0001882:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001886:	83 e9 04             	sub    ecx,0x4
c0001889:	51                   	push   ecx
c000188a:	6a 00                	push   0x0
c000188c:	50                   	push   eax
c000188d:	e8 5e ec ff ff       	call   c00004f0 <memset>
c0001892:	83 c4 10             	add    esp,0x10
c0001895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001899:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000189e:	75 14                	jne    c00018b4 <iALLOc+0x156>
c00018a0:	8d 04 37             	lea    eax,[edi+esi*1]
c00018a3:	29 f3                	sub    ebx,esi
c00018a5:	8d 48 08             	lea    ecx,[eax+0x8]
c00018a8:	83 cb 01             	or     ebx,0x1
c00018ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018b2:	89 f3                	mov    ebx,esi
c00018b4:	31 c0                	xor    eax,eax
c00018b6:	4d                   	dec    ebp
c00018b7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	39 c5                	cmp    ebp,eax
c00018c0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018c3:	74 2c                	je     c00018f1 <iALLOc+0x193>
c00018c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018c9:	85 c9                	test   ecx,ecx
c00018cb:	75 15                	jne    c00018e2 <iALLOc+0x184>
c00018cd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018d0:	8d 71 0b             	lea    esi,[ecx+0xb]
c00018d3:	b9 10 00 00 00       	mov    ecx,0x10
c00018d8:	83 fe 0f             	cmp    esi,0xf
c00018db:	76 05                	jbe    c00018e2 <iALLOc+0x184>
c00018dd:	83 e6 f8             	and    esi,0xfffffff8
c00018e0:	89 f1                	mov    ecx,esi
c00018e2:	89 ce                	mov    esi,ecx
c00018e4:	29 cb                	sub    ebx,ecx
c00018e6:	83 ce 01             	or     esi,0x1
c00018e9:	40                   	inc    eax
c00018ea:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00018ed:	01 cf                	add    edi,ecx
c00018ef:	eb c6                	jmp    c00018b7 <iALLOc+0x159>
c00018f1:	83 cb 01             	or     ebx,0x1
c00018f4:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00018f7:	eb 08                	jmp    c0001901 <iALLOc+0x1a3>
c00018f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001905:	83 c4 2c             	add    esp,0x2c
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlrealloc>:
c000190d:	55                   	push   ebp
c000190e:	57                   	push   edi
c000190f:	56                   	push   esi
c0001910:	53                   	push   ebx
c0001911:	83 ec 1c             	sub    esp,0x1c
c0001914:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000191c:	85 db                	test   ebx,ebx
c000191e:	75 10                	jne    c0001930 <dlrealloc+0x23>
c0001920:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001924:	83 c4 1c             	add    esp,0x1c
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	e9 a0 fa ff ff       	jmp    c00013d0 <dlmalloc>
c0001930:	83 f8 df             	cmp    eax,0xffffffdf
c0001933:	0f 87 a5 01 00 00    	ja     c0001ade <dlrealloc+0x1d1>
c0001939:	83 c0 0b             	add    eax,0xb
c000193c:	bd 10 00 00 00       	mov    ebp,0x10
c0001941:	83 f8 0f             	cmp    eax,0xf
c0001944:	76 05                	jbe    c000194b <dlrealloc+0x3e>
c0001946:	83 e0 f8             	and    eax,0xfffffff8
c0001949:	89 c5                	mov    ebp,eax
c000194b:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000194e:	89 c6                	mov    esi,eax
c0001950:	83 e6 fc             	and    esi,0xfffffffc
c0001953:	a8 02                	test   al,0x2
c0001955:	0f 85 4e 01 00 00    	jne    c0001aa9 <dlrealloc+0x19c>
c000195b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000195e:	39 f5                	cmp    ebp,esi
c0001960:	0f 86 04 01 00 00    	jbe    c0001a6a <dlrealloc+0x15d>
c0001966:	8d 14 37             	lea    edx,[edi+esi*1]
c0001969:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000196c:	39 15 0c 79 03 c0    	cmp    DWORD PTR ds:0xc003790c,edx
c0001972:	75 33                	jne    c00019a7 <dlrealloc+0x9a>
c0001974:	83 e1 fc             	and    ecx,0xfffffffc
c0001977:	01 f1                	add    ecx,esi
c0001979:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000197d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001980:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001984:	77 49                	ja     c00019cf <dlrealloc+0xc2>
c0001986:	01 ef                	add    edi,ebp
c0001988:	83 e0 01             	and    eax,0x1
c000198b:	09 e8                	or     eax,ebp
c000198d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001990:	89 3d 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,edi
c0001996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000199a:	29 e8                	sub    eax,ebp
c000199c:	83 c8 01             	or     eax,0x1
c000199f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019a2:	e9 39 01 00 00       	jmp    c0001ae0 <dlrealloc+0x1d3>
c00019a7:	89 c8                	mov    eax,ecx
c00019a9:	83 e0 fe             	and    eax,0xfffffffe
c00019ac:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00019b1:	75 1c                	jne    c00019cf <dlrealloc+0xc2>
c00019b3:	83 e1 fc             	and    ecx,0xfffffffc
c00019b6:	01 f1                	add    ecx,esi
c00019b8:	39 cd                	cmp    ebp,ecx
c00019ba:	77 13                	ja     c00019cf <dlrealloc+0xc2>
c00019bc:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00019bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00019c2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00019c5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00019c8:	89 ce                	mov    esi,ecx
c00019ca:	e9 9b 00 00 00       	jmp    c0001a6a <dlrealloc+0x15d>
c00019cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00019d3:	8d 45 f9             	lea    eax,[ebp-0x7]
c00019d6:	83 ec 0c             	sub    esp,0xc
c00019d9:	50                   	push   eax
c00019da:	e8 f1 f9 ff ff       	call   c00013d0 <dlmalloc>
c00019df:	83 c4 10             	add    esp,0x10
c00019e2:	85 c0                	test   eax,eax
c00019e4:	0f 84 f4 00 00 00    	je     c0001ade <dlrealloc+0x1d1>
c00019ea:	8d 48 f8             	lea    ecx,[eax-0x8]
c00019ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f1:	39 ca                	cmp    edx,ecx
c00019f3:	75 0a                	jne    c00019ff <dlrealloc+0xf2>
c00019f5:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00019f8:	83 e0 fc             	and    eax,0xfffffffc
c00019fb:	01 c6                	add    esi,eax
c00019fd:	eb 6b                	jmp    c0001a6a <dlrealloc+0x15d>
c00019ff:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a02:	83 f9 27             	cmp    ecx,0x27
c0001a05:	76 08                	jbe    c0001a0f <dlrealloc+0x102>
c0001a07:	89 de                	mov    esi,ebx
c0001a09:	89 c7                	mov    edi,eax
c0001a0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0d:	eb 43                	jmp    c0001a52 <dlrealloc+0x145>
c0001a0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a11:	83 f9 13             	cmp    ecx,0x13
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a1c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a22:	76 2e                	jbe    c0001a52 <dlrealloc+0x145>
c0001a24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a27:	83 f9 1b             	cmp    ecx,0x1b
c0001a2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a2d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a33:	76 1d                	jbe    c0001a52 <dlrealloc+0x145>
c0001a35:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a38:	83 f9 23             	cmp    ecx,0x23
c0001a3b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a3e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a44:	76 0c                	jbe    c0001a52 <dlrealloc+0x145>
c0001a46:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a49:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a4f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	53                   	push   ebx
c0001a5a:	e8 aa f4 ff ff       	call   c0000f09 <dlfree>
c0001a5f:	83 c4 10             	add    esp,0x10
c0001a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a66:	89 c3                	mov    ebx,eax
c0001a68:	eb 76                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a6a:	89 f2                	mov    edx,esi
c0001a6c:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a6f:	29 ea                	sub    edx,ebp
c0001a71:	83 e1 01             	and    ecx,0x1
c0001a74:	8d 04 37             	lea    eax,[edi+esi*1]
c0001a77:	83 fa 0f             	cmp    edx,0xf
c0001a7a:	77 0b                	ja     c0001a87 <dlrealloc+0x17a>
c0001a7c:	09 f1                	or     ecx,esi
c0001a7e:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001a81:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a85:	eb 59                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a87:	01 ef                	add    edi,ebp
c0001a89:	83 ec 0c             	sub    esp,0xc
c0001a8c:	09 cd                	or     ebp,ecx
c0001a8e:	83 ca 01             	or     edx,0x1
c0001a91:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001a94:	83 c7 08             	add    edi,0x8
c0001a97:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001a9a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a9e:	57                   	push   edi
c0001a9f:	e8 65 f4 ff ff       	call   c0000f09 <dlfree>
c0001aa4:	83 c4 10             	add    esp,0x10
c0001aa7:	eb 37                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001aa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001aac:	39 f0                	cmp    eax,esi
c0001aae:	76 30                	jbe    c0001ae0 <dlrealloc+0x1d3>
c0001ab0:	83 ec 0c             	sub    esp,0xc
c0001ab3:	83 ed 07             	sub    ebp,0x7
c0001ab6:	55                   	push   ebp
c0001ab7:	e8 14 f9 ff ff       	call   c00013d0 <dlmalloc>
c0001abc:	83 c4 10             	add    esp,0x10
c0001abf:	89 c5                	mov    ebp,eax
c0001ac1:	85 c0                	test   eax,eax
c0001ac3:	74 19                	je     c0001ade <dlrealloc+0x1d1>
c0001ac5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001ac8:	89 c7                	mov    edi,eax
c0001aca:	89 de                	mov    esi,ebx
c0001acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ace:	83 ec 0c             	sub    esp,0xc
c0001ad1:	53                   	push   ebx
c0001ad2:	89 eb                	mov    ebx,ebp
c0001ad4:	e8 30 f4 ff ff       	call   c0000f09 <dlfree>
c0001ad9:	83 c4 10             	add    esp,0x10
c0001adc:	eb 02                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001ade:	31 db                	xor    ebx,ebx
c0001ae0:	83 c4 1c             	add    esp,0x1c
c0001ae3:	89 d8                	mov    eax,ebx
c0001ae5:	5b                   	pop    ebx
c0001ae6:	5e                   	pop    esi
c0001ae7:	5f                   	pop    edi
c0001ae8:	5d                   	pop    ebp
c0001ae9:	c3                   	ret    

c0001aea <dlmemalign>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 0c             	sub    esp,0xc
c0001af1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001af9:	83 fa 08             	cmp    edx,0x8
c0001afc:	77 10                	ja     c0001b0e <dlmemalign+0x24>
c0001afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b02:	83 c4 0c             	add    esp,0xc
c0001b05:	5b                   	pop    ebx
c0001b06:	5e                   	pop    esi
c0001b07:	5f                   	pop    edi
c0001b08:	5d                   	pop    ebp
c0001b09:	e9 c2 f8 ff ff       	jmp    c00013d0 <dlmalloc>
c0001b0e:	bf 10 00 00 00       	mov    edi,0x10
c0001b13:	83 fa 0f             	cmp    edx,0xf
c0001b16:	76 13                	jbe    c0001b2b <dlmemalign+0x41>
c0001b18:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b1b:	85 d1                	test   ecx,edx
c0001b1d:	75 04                	jne    c0001b23 <dlmemalign+0x39>
c0001b1f:	89 d7                	mov    edi,edx
c0001b21:	eb 08                	jmp    c0001b2b <dlmemalign+0x41>
c0001b23:	39 d7                	cmp    edi,edx
c0001b25:	73 04                	jae    c0001b2b <dlmemalign+0x41>
c0001b27:	01 ff                	add    edi,edi
c0001b29:	eb f8                	jmp    c0001b23 <dlmemalign+0x39>
c0001b2b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b2e:	76 07                	jbe    c0001b37 <dlmemalign+0x4d>
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	e9 ce 00 00 00       	jmp    c0001c05 <dlmemalign+0x11b>
c0001b37:	83 c0 0b             	add    eax,0xb
c0001b3a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b3f:	83 f8 0f             	cmp    eax,0xf
c0001b42:	76 05                	jbe    c0001b49 <dlmemalign+0x5f>
c0001b44:	83 e0 f8             	and    eax,0xfffffff8
c0001b47:	89 c5                	mov    ebp,eax
c0001b49:	83 ec 0c             	sub    esp,0xc
c0001b4c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b50:	50                   	push   eax
c0001b51:	e8 7a f8 ff ff       	call   c00013d0 <dlmalloc>
c0001b56:	83 c4 10             	add    esp,0x10
c0001b59:	89 c1                	mov    ecx,eax
c0001b5b:	85 c0                	test   eax,eax
c0001b5d:	74 d1                	je     c0001b30 <dlmemalign+0x46>
c0001b5f:	31 d2                	xor    edx,edx
c0001b61:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b64:	f7 f7                	div    edi
c0001b66:	85 d2                	test   edx,edx
c0001b68:	74 62                	je     c0001bcc <dlmemalign+0xe2>
c0001b6a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b6e:	89 f8                	mov    eax,edi
c0001b70:	f7 d8                	neg    eax
c0001b72:	21 c3                	and    ebx,eax
c0001b74:	83 eb 08             	sub    ebx,0x8
c0001b77:	89 d8                	mov    eax,ebx
c0001b79:	29 f0                	sub    eax,esi
c0001b7b:	83 f8 0f             	cmp    eax,0xf
c0001b7e:	77 02                	ja     c0001b82 <dlmemalign+0x98>
c0001b80:	01 fb                	add    ebx,edi
c0001b82:	89 d8                	mov    eax,ebx
c0001b84:	29 f0                	sub    eax,esi
c0001b86:	89 c6                	mov    esi,eax
c0001b88:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001b8b:	89 c2                	mov    edx,eax
c0001b8d:	83 e2 fc             	and    edx,0xfffffffc
c0001b90:	29 f2                	sub    edx,esi
c0001b92:	a8 02                	test   al,0x2
c0001b94:	74 10                	je     c0001ba6 <dlmemalign+0xbc>
c0001b96:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001b99:	83 ca 02             	or     edx,0x2
c0001b9c:	8d 43 08             	lea    eax,[ebx+0x8]
c0001b9f:	89 33                	mov    DWORD PTR [ebx],esi
c0001ba1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001ba4:	eb 5f                	jmp    c0001c05 <dlmemalign+0x11b>
c0001ba6:	83 ec 0c             	sub    esp,0xc
c0001ba9:	89 d0                	mov    eax,edx
c0001bab:	83 c8 01             	or     eax,0x1
c0001bae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001bb1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001bb6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bb9:	83 e0 01             	and    eax,0x1
c0001bbc:	09 f0                	or     eax,esi
c0001bbe:	89 de                	mov    esi,ebx
c0001bc0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bc3:	51                   	push   ecx
c0001bc4:	e8 40 f3 ff ff       	call   c0000f09 <dlfree>
c0001bc9:	83 c4 10             	add    esp,0x10
c0001bcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bcf:	a8 02                	test   al,0x2
c0001bd1:	75 2f                	jne    c0001c02 <dlmemalign+0x118>
c0001bd3:	83 e0 fc             	and    eax,0xfffffffc
c0001bd6:	8d 55 10             	lea    edx,[ebp+0x10]
c0001bd9:	39 c2                	cmp    edx,eax
c0001bdb:	73 25                	jae    c0001c02 <dlmemalign+0x118>
c0001bdd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001be0:	83 ec 0c             	sub    esp,0xc
c0001be3:	29 e8                	sub    eax,ebp
c0001be5:	83 c2 08             	add    edx,0x8
c0001be8:	83 c8 01             	or     eax,0x1
c0001beb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001bee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bf1:	83 e0 01             	and    eax,0x1
c0001bf4:	09 c5                	or     ebp,eax
c0001bf6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001bf9:	52                   	push   edx
c0001bfa:	e8 0a f3 ff ff       	call   c0000f09 <dlfree>
c0001bff:	83 c4 10             	add    esp,0x10
c0001c02:	8d 46 08             	lea    eax,[esi+0x8]
c0001c05:	83 c4 0c             	add    esp,0xc
c0001c08:	5b                   	pop    ebx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	5d                   	pop    ebp
c0001c0c:	c3                   	ret    

c0001c0d <dlcalloc>:
c0001c0d:	53                   	push   ebx
c0001c0e:	83 ec 14             	sub    esp,0x14
c0001c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c15:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c1a:	50                   	push   eax
c0001c1b:	e8 b0 f7 ff ff       	call   c00013d0 <dlmalloc>
c0001c20:	83 c4 10             	add    esp,0x10
c0001c23:	89 c3                	mov    ebx,eax
c0001c25:	85 c0                	test   eax,eax
c0001c27:	74 6e                	je     c0001c97 <dlcalloc+0x8a>
c0001c29:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c2c:	a8 02                	test   al,0x2
c0001c2e:	75 67                	jne    c0001c97 <dlcalloc+0x8a>
c0001c30:	83 e0 fc             	and    eax,0xfffffffc
c0001c33:	83 e8 04             	sub    eax,0x4
c0001c36:	83 f8 27             	cmp    eax,0x27
c0001c39:	76 0f                	jbe    c0001c4a <dlcalloc+0x3d>
c0001c3b:	52                   	push   edx
c0001c3c:	50                   	push   eax
c0001c3d:	6a 00                	push   0x0
c0001c3f:	53                   	push   ebx
c0001c40:	e8 ab e8 ff ff       	call   c00004f0 <memset>
c0001c45:	83 c4 10             	add    esp,0x10
c0001c48:	eb 4d                	jmp    c0001c97 <dlcalloc+0x8a>
c0001c4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c5e:	83 f8 13             	cmp    eax,0x13
c0001c61:	76 34                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001c71:	83 f8 1b             	cmp    eax,0x1b
c0001c74:	76 21                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001c7d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001c84:	83 f8 23             	cmp    eax,0x23
c0001c87:	76 0e                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c89:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001c90:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001c97:	89 d8                	mov    eax,ebx
c0001c99:	83 c4 08             	add    esp,0x8
c0001c9c:	5b                   	pop    ebx
c0001c9d:	c3                   	ret    

c0001c9e <dlcfree>:
c0001c9e:	e9 66 f2 ff ff       	jmp    c0000f09 <dlfree>

c0001ca3 <dlindependent_calloc>:
c0001ca3:	83 ec 28             	sub    esp,0x28
c0001ca6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001caf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001cb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001cb7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cbf:	e8 9a fa ff ff       	call   c000175e <iALLOc>
c0001cc4:	83 c4 2c             	add    esp,0x2c
c0001cc7:	c3                   	ret    

c0001cc8 <dlindependent_comalloc>:
c0001cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cd0:	31 c9                	xor    ecx,ecx
c0001cd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001cda:	e9 7f fa ff ff       	jmp    c000175e <iALLOc>

c0001cdf <dlvalloc>:
c0001cdf:	83 ec 0c             	sub    esp,0xc
c0001ce2:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c0001ce9:	75 0a                	jne    c0001cf5 <dlvalloc+0x16>
c0001ceb:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001cf0:	e8 2d f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cf5:	50                   	push   eax
c0001cf6:	50                   	push   eax
c0001cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001cfb:	ff 35 3c 7c 03 c0    	push   DWORD PTR ds:0xc0037c3c
c0001d01:	e8 e4 fd ff ff       	call   c0001aea <dlmemalign>
c0001d06:	83 c4 1c             	add    esp,0x1c
c0001d09:	c3                   	ret    

c0001d0a <dlpvalloc>:
c0001d0a:	83 ec 0c             	sub    esp,0xc
c0001d0d:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c0001d14:	75 0a                	jne    c0001d20 <dlpvalloc+0x16>
c0001d16:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d1b:	e8 02 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d20:	a1 3c 7c 03 c0       	mov    eax,ds:0xc0037c3c
c0001d25:	89 c1                	mov    ecx,eax
c0001d27:	52                   	push   edx
c0001d28:	f7 d9                	neg    ecx
c0001d2a:	52                   	push   edx
c0001d2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d2f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d33:	21 ca                	and    edx,ecx
c0001d35:	52                   	push   edx
c0001d36:	50                   	push   eax
c0001d37:	e8 ae fd ff ff       	call   c0001aea <dlmemalign>
c0001d3c:	83 c4 1c             	add    esp,0x1c
c0001d3f:	c3                   	ret    

c0001d40 <dlmalloc_trim>:
c0001d40:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d45:	e8 d8 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d4a:	31 c0                	xor    eax,eax
c0001d4c:	c3                   	ret    

c0001d4d <dlmalloc_usable_size>:
c0001d4d:	53                   	push   ebx
c0001d4e:	31 c0                	xor    eax,eax
c0001d50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d54:	85 c9                	test   ecx,ecx
c0001d56:	74 24                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d58:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d5b:	f6 c2 02             	test   dl,0x2
c0001d5e:	74 08                	je     c0001d68 <dlmalloc_usable_size+0x1b>
c0001d60:	83 e2 fc             	and    edx,0xfffffffc
c0001d63:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d66:	eb 14                	jmp    c0001d7c <dlmalloc_usable_size+0x2f>
c0001d68:	89 d3                	mov    ebx,edx
c0001d6a:	31 c0                	xor    eax,eax
c0001d6c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d6f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001d74:	74 06                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d76:	83 e2 fc             	and    edx,0xfffffffc
c0001d79:	8d 42 fc             	lea    eax,[edx-0x4]
c0001d7c:	5b                   	pop    ebx
c0001d7d:	c3                   	ret    

c0001d7e <dlmallinfo>:
c0001d7e:	55                   	push   ebp
c0001d7f:	57                   	push   edi
c0001d80:	56                   	push   esi
c0001d81:	53                   	push   ebx
c0001d82:	83 ec 08             	sub    esp,0x8
c0001d85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001d89:	83 3d 0c 79 03 c0 00 	cmp    DWORD PTR ds:0xc003790c,0x0
c0001d90:	75 0a                	jne    c0001d9c <dlmallinfo+0x1e>
c0001d92:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d97:	e8 86 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d9c:	a1 0c 79 03 c0       	mov    eax,ds:0xc003790c
c0001da1:	31 ed                	xor    ebp,ebp
c0001da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001da6:	31 c9                	xor    ecx,ecx
c0001da8:	83 e0 fc             	and    eax,0xfffffffc
c0001dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	8b 14 85 e4 78 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc871c]
c0001db8:	85 d2                	test   edx,edx
c0001dba:	74 0e                	je     c0001dca <dlmallinfo+0x4c>
c0001dbc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001dbf:	45                   	inc    ebp
c0001dc0:	83 e6 fc             	and    esi,0xfffffffc
c0001dc3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001dc6:	01 f1                	add    ecx,esi
c0001dc8:	eb ee                	jmp    c0001db8 <dlmallinfo+0x3a>
c0001dca:	40                   	inc    eax
c0001dcb:	83 f8 0a             	cmp    eax,0xa
c0001dce:	75 e1                	jne    c0001db1 <dlmallinfo+0x33>
c0001dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001dd4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ddb:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001dde:	b8 14 79 03 c0       	mov    eax,0xc0037914
c0001de3:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001de6:	39 f0                	cmp    eax,esi
c0001de8:	74 10                	je     c0001dfa <dlmallinfo+0x7c>
c0001dea:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ded:	ff 04 24             	inc    DWORD PTR [esp]
c0001df0:	83 e7 fc             	and    edi,0xfffffffc
c0001df3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001df6:	01 fa                	add    edx,edi
c0001df8:	eb ec                	jmp    c0001de6 <dlmallinfo+0x68>
c0001dfa:	83 c0 08             	add    eax,0x8
c0001dfd:	3d 0c 7c 03 c0       	cmp    eax,0xc0037c0c
c0001e02:	75 df                	jne    c0001de3 <dlmallinfo+0x65>
c0001e04:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e07:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e0a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e0d:	a1 48 7c 03 c0       	mov    eax,ds:0xc0037c48
c0001e12:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e15:	89 03                	mov    DWORD PTR [ebx],eax
c0001e17:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e1a:	8b 35 30 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c30
c0001e20:	29 d0                	sub    eax,edx
c0001e22:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e28:	8b 35 44 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c44
c0001e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e32:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e35:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e38:	8b 35 54 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c54
c0001e3e:	89 d8                	mov    eax,ebx
c0001e40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c2 04 00             	ret    0x4

c0001e4d <dlmalloc_stats>:
c0001e4d:	83 ec 30             	sub    esp,0x30
c0001e50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e54:	50                   	push   eax
c0001e55:	e8 24 ff ff ff       	call   c0001d7e <dlmallinfo>
c0001e5a:	83 c4 30             	add    esp,0x30
c0001e5d:	c3                   	ret    

c0001e5e <dlmallopt>:
c0001e5e:	56                   	push   esi
c0001e5f:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001e64:	53                   	push   ebx
c0001e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e6d:	e8 b0 ef ff ff       	call   c0000e22 <malloc_consolidate>
c0001e72:	8d 46 04             	lea    eax,[esi+0x4]
c0001e75:	83 f8 05             	cmp    eax,0x5
c0001e78:	77 5d                	ja     c0001ed7 <dlmallopt+0x79>
c0001e7a:	ff 24 85 60 fb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd04a0]
c0001e81:	83 fb 50             	cmp    ebx,0x50
c0001e84:	77 51                	ja     c0001ed7 <dlmallopt+0x79>
c0001e86:	ba 08 00 00 00       	mov    edx,0x8
c0001e8b:	85 db                	test   ebx,ebx
c0001e8d:	74 12                	je     c0001ea1 <dlmallopt+0x43>
c0001e8f:	83 c3 0b             	add    ebx,0xb
c0001e92:	ba 10 00 00 00       	mov    edx,0x10
c0001e97:	83 fb 0f             	cmp    ebx,0xf
c0001e9a:	76 05                	jbe    c0001ea1 <dlmallopt+0x43>
c0001e9c:	89 da                	mov    edx,ebx
c0001e9e:	83 e2 f8             	and    edx,0xfffffff8
c0001ea1:	a1 e0 78 03 c0       	mov    eax,ds:0xc00378e0
c0001ea6:	83 e0 03             	and    eax,0x3
c0001ea9:	09 d0                	or     eax,edx
c0001eab:	a3 e0 78 03 c0       	mov    ds:0xc00378e0,eax
c0001eb0:	eb 27                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001eb2:	89 1d 24 7c 03 c0    	mov    DWORD PTR ds:0xc0037c24,ebx
c0001eb8:	eb 16                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eba:	89 1d 28 7c 03 c0    	mov    DWORD PTR ds:0xc0037c28,ebx
c0001ec0:	eb 0e                	jmp    c0001ed0 <dlmallopt+0x72>
c0001ec2:	89 1d 2c 7c 03 c0    	mov    DWORD PTR ds:0xc0037c2c,ebx
c0001ec8:	eb 06                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eca:	89 1d 34 7c 03 c0    	mov    DWORD PTR ds:0xc0037c34,ebx
c0001ed0:	be 01 00 00 00       	mov    esi,0x1
c0001ed5:	eb 02                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001ed7:	31 f6                	xor    esi,esi
c0001ed9:	89 f0                	mov    eax,esi
c0001edb:	5b                   	pop    ebx
c0001edc:	5e                   	pop    esi
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isblank>:
c0001ee0:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee5:	74 09                	je     c0001ef0 <isblank+0x10>
c0001ee7:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001eec:	75 0a                	jne    c0001ef8 <isblank+0x18>
c0001eee:	66 90                	xchg   ax,ax
c0001ef0:	b8 01 00 00 00       	mov    eax,0x1
c0001ef5:	c3                   	ret    
c0001ef6:	66 90                	xchg   ax,ax
c0001ef8:	b8 00 00 00 00       	mov    eax,0x0
c0001efd:	c3                   	ret    
c0001efe:	66 90                	xchg   ax,ax

c0001f00 <iscntrl>:
c0001f00:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f05:	7e 09                	jle    c0001f10 <iscntrl+0x10>
c0001f07:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f0c:	75 0a                	jne    c0001f18 <iscntrl+0x18>
c0001f0e:	66 90                	xchg   ax,ax
c0001f10:	b8 01 00 00 00       	mov    eax,0x1
c0001f15:	c3                   	ret    
c0001f16:	66 90                	xchg   ax,ax
c0001f18:	b8 00 00 00 00       	mov    eax,0x0
c0001f1d:	c3                   	ret    
c0001f1e:	66 90                	xchg   ax,ax

c0001f20 <isdigit>:
c0001f20:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f25:	7e 0d                	jle    c0001f34 <isdigit+0x14>
c0001f27:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f2c:	7f 06                	jg     c0001f34 <isdigit+0x14>
c0001f2e:	b8 01 00 00 00       	mov    eax,0x1
c0001f33:	c3                   	ret    
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    
c0001f3a:	66 90                	xchg   ax,ax

c0001f3c <islower>:
c0001f3c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f41:	7e 0d                	jle    c0001f50 <islower+0x14>
c0001f43:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f48:	7f 06                	jg     c0001f50 <islower+0x14>
c0001f4a:	b8 01 00 00 00       	mov    eax,0x1
c0001f4f:	c3                   	ret    
c0001f50:	b8 00 00 00 00       	mov    eax,0x0
c0001f55:	c3                   	ret    
c0001f56:	66 90                	xchg   ax,ax

c0001f58 <isspace>:
c0001f58:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f5d:	7c 19                	jl     c0001f78 <isspace+0x20>
c0001f5f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f64:	7e 0a                	jle    c0001f70 <isspace+0x18>
c0001f66:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f6b:	75 0b                	jne    c0001f78 <isspace+0x20>
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0001f70:	b8 01 00 00 00       	mov    eax,0x1
c0001f75:	c3                   	ret    
c0001f76:	66 90                	xchg   ax,ax
c0001f78:	b8 00 00 00 00       	mov    eax,0x0
c0001f7d:	c3                   	ret    
c0001f7e:	66 90                	xchg   ax,ax

c0001f80 <isupper>:
c0001f80:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f85:	7e 0d                	jle    c0001f94 <isupper+0x14>
c0001f87:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001f8c:	7f 06                	jg     c0001f94 <isupper+0x14>
c0001f8e:	b8 01 00 00 00       	mov    eax,0x1
c0001f93:	c3                   	ret    
c0001f94:	b8 00 00 00 00       	mov    eax,0x0
c0001f99:	c3                   	ret    
c0001f9a:	66 90                	xchg   ax,ax

c0001f9c <isalpha>:
c0001f9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fa0:	e8 db ff ff ff       	call   c0001f80 <isupper>
c0001fa5:	83 c4 04             	add    esp,0x4
c0001fa8:	85 c0                	test   eax,eax
c0001faa:	75 10                	jne    c0001fbc <isalpha+0x20>
c0001fac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fb0:	e8 87 ff ff ff       	call   c0001f3c <islower>
c0001fb5:	83 c4 04             	add    esp,0x4
c0001fb8:	85 c0                	test   eax,eax
c0001fba:	74 08                	je     c0001fc4 <isalpha+0x28>
c0001fbc:	b8 01 00 00 00       	mov    eax,0x1
c0001fc1:	c3                   	ret    
c0001fc2:	66 90                	xchg   ax,ax
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalnum>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 c7 ff ff ff       	call   c0001f9c <isalpha>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalnum+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 3b ff ff ff       	call   c0001f20 <isdigit>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalnum+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <ispunct>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalnum>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 28                	jne    c0002034 <ispunct+0x38>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 43 ff ff ff       	call   c0001f58 <isspace>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	75 18                	jne    c0002034 <ispunct+0x38>
c000201c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002020:	e8 db fe ff ff       	call   c0001f00 <iscntrl>
c0002025:	83 c4 04             	add    esp,0x4
c0002028:	85 c0                	test   eax,eax
c000202a:	75 08                	jne    c0002034 <ispunct+0x38>
c000202c:	b8 01 00 00 00       	mov    eax,0x1
c0002031:	c3                   	ret    
c0002032:	66 90                	xchg   ax,ax
c0002034:	b8 00 00 00 00       	mov    eax,0x0
c0002039:	c3                   	ret    
c000203a:	66 90                	xchg   ax,ax

c000203c <isgraph>:
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 87 ff ff ff       	call   c0001fcc <isalnum>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 10                	jne    c000205c <isgraph+0x20>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 a7 ff ff ff       	call   c0001ffc <ispunct>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	74 08                	je     c0002064 <isgraph+0x28>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isprint>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 c7 ff ff ff       	call   c000203c <isgraph>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 08                	jne    c0002084 <isprint+0x18>
c000207c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0002081:	75 09                	jne    c000208c <isprint+0x20>
c0002083:	90                   	nop
c0002084:	b8 01 00 00 00       	mov    eax,0x1
c0002089:	c3                   	ret    
c000208a:	66 90                	xchg   ax,ax
c000208c:	b8 00 00 00 00       	mov    eax,0x0
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax

c0002094 <isxdigit>:
c0002094:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002098:	e8 83 fe ff ff       	call   c0001f20 <isdigit>
c000209d:	83 c4 04             	add    esp,0x4
c00020a0:	85 c0                	test   eax,eax
c00020a2:	75 20                	jne    c00020c4 <isxdigit+0x30>
c00020a4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020a9:	7e 09                	jle    c00020b4 <isxdigit+0x20>
c00020ab:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020b0:	7e 12                	jle    c00020c4 <isxdigit+0x30>
c00020b2:	66 90                	xchg   ax,ax
c00020b4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020b9:	7e 11                	jle    c00020cc <isxdigit+0x38>
c00020bb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020c0:	7f 0a                	jg     c00020cc <isxdigit+0x38>
c00020c2:	66 90                	xchg   ax,ax
c00020c4:	b8 01 00 00 00       	mov    eax,0x1
c00020c9:	c3                   	ret    
c00020ca:	66 90                	xchg   ax,ax
c00020cc:	b8 00 00 00 00       	mov    eax,0x0
c00020d1:	c3                   	ret    

c00020d2 <disk_status>:
c00020d2:	31 c0                	xor    eax,eax
c00020d4:	c3                   	ret    

c00020d5 <disk_initialize>:
c00020d5:	31 c0                	xor    eax,eax
c00020d7:	c3                   	ret    

c00020d8 <disk_read>:
c00020d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020dd:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c00020e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020e9:	e9 9e 6e 02 00       	jmp    c0028f8c <fatWrapperReadDisk>

c00020ee <disk_write>:
c00020ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020f3:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c00020fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020ff:	e9 c8 6e 02 00       	jmp    c0028fcc <fatWrapperWriteDisk>

c0002104 <disk_ioctl>:
c0002104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000210d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002112:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c000211a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000211e:	e9 e9 6e 02 00       	jmp    c002900c <fatWrapperIoctl>

c0002123 <ld_word>:
c0002123:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	c1 e2 08             	shl    edx,0x8
c000212d:	09 d0                	or     eax,edx
c000212f:	c3                   	ret    

c0002130 <ld_dword>:
c0002130:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002134:	89 d1                	mov    ecx,edx
c0002136:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000213a:	c1 e1 08             	shl    ecx,0x8
c000213d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002140:	09 ca                	or     edx,ecx
c0002142:	c1 e2 08             	shl    edx,0x8
c0002145:	09 d0                	or     eax,edx
c0002147:	c3                   	ret    

c0002148 <st_word>:
c0002148:	66 89 10             	mov    WORD PTR [eax],dx
c000214b:	c3                   	ret    

c000214c <st_dword>:
c000214c:	89 10                	mov    DWORD PTR [eax],edx
c000214e:	c3                   	ret    

c000214f <mem_cpy>:
c000214f:	85 c9                	test   ecx,ecx
c0002151:	74 10                	je     c0002163 <mem_cpy+0x14>
c0002153:	57                   	push   edi
c0002154:	01 c1                	add    ecx,eax
c0002156:	56                   	push   esi
c0002157:	89 c7                	mov    edi,eax
c0002159:	89 d6                	mov    esi,edx
c000215b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000215c:	39 f9                	cmp    ecx,edi
c000215e:	75 fb                	jne    c000215b <mem_cpy+0xc>
c0002160:	5e                   	pop    esi
c0002161:	5f                   	pop    edi
c0002162:	c3                   	ret    
c0002163:	c3                   	ret    

c0002164 <mem_set>:
c0002164:	01 c1                	add    ecx,eax
c0002166:	40                   	inc    eax
c0002167:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c000216a:	39 c8                	cmp    eax,ecx
c000216c:	75 f8                	jne    c0002166 <mem_set+0x2>
c000216e:	c3                   	ret    

c000216f <mem_cmp>:
c000216f:	57                   	push   edi
c0002170:	56                   	push   esi
c0002171:	89 c6                	mov    esi,eax
c0002173:	53                   	push   ebx
c0002174:	46                   	inc    esi
c0002175:	42                   	inc    edx
c0002176:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000217a:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000217e:	29 fb                	sub    ebx,edi
c0002180:	89 cf                	mov    edi,ecx
c0002182:	29 f7                	sub    edi,esi
c0002184:	01 c7                	add    edi,eax
c0002186:	74 04                	je     c000218c <mem_cmp+0x1d>
c0002188:	85 db                	test   ebx,ebx
c000218a:	74 e8                	je     c0002174 <mem_cmp+0x5>
c000218c:	89 d8                	mov    eax,ebx
c000218e:	5b                   	pop    ebx
c000218f:	5e                   	pop    esi
c0002190:	5f                   	pop    edi
c0002191:	c3                   	ret    

c0002192 <chk_chr>:
c0002192:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002195:	85 c9                	test   ecx,ecx
c0002197:	74 07                	je     c00021a0 <chk_chr+0xe>
c0002199:	39 d1                	cmp    ecx,edx
c000219b:	74 03                	je     c00021a0 <chk_chr+0xe>
c000219d:	40                   	inc    eax
c000219e:	eb f2                	jmp    c0002192 <chk_chr>
c00021a0:	89 c8                	mov    eax,ecx
c00021a2:	c3                   	ret    

c00021a3 <dbc_1st>:
c00021a3:	31 c0                	xor    eax,eax
c00021a5:	c3                   	ret    

c00021a6 <dbc_2nd>:
c00021a6:	31 c0                	xor    eax,eax
c00021a8:	c3                   	ret    

c00021a9 <tchar2uni>:
c00021a9:	57                   	push   edi
c00021aa:	56                   	push   esi
c00021ab:	53                   	push   ebx
c00021ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021ae:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021b0:	8d 73 01             	lea    esi,[ebx+0x1]
c00021b3:	f6 c1 80             	test   cl,0x80
c00021b6:	75 0a                	jne    c00021c2 <tchar2uni+0x19>
c00021b8:	0f b6 d1             	movzx  edx,cl
c00021bb:	89 f3                	mov    ebx,esi
c00021bd:	e9 b2 00 00 00       	jmp    c0002274 <tchar2uni+0xcb>
c00021c2:	89 ca                	mov    edx,ecx
c00021c4:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021ca:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021d0:	89 ca                	mov    edx,ecx
c00021d2:	75 0a                	jne    c00021de <tchar2uni+0x35>
c00021d4:	83 e2 1f             	and    edx,0x1f
c00021d7:	b9 01 00 00 00       	mov    ecx,0x1
c00021dc:	eb 37                	jmp    c0002215 <tchar2uni+0x6c>
c00021de:	81 e2 f0 00 00 00    	and    edx,0xf0
c00021e4:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00021ea:	75 0c                	jne    c00021f8 <tchar2uni+0x4f>
c00021ec:	89 ca                	mov    edx,ecx
c00021ee:	b9 02 00 00 00       	mov    ecx,0x2
c00021f3:	83 e2 0f             	and    edx,0xf
c00021f6:	eb 1d                	jmp    c0002215 <tchar2uni+0x6c>
c00021f8:	89 cf                	mov    edi,ecx
c00021fa:	83 ca ff             	or     edx,0xffffffff
c00021fd:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002203:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002209:	75 70                	jne    c000227b <tchar2uni+0xd2>
c000220b:	89 ca                	mov    edx,ecx
c000220d:	b9 03 00 00 00       	mov    ecx,0x3
c0002212:	83 e2 07             	and    edx,0x7
c0002215:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002219:	46                   	inc    esi
c000221a:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000221d:	89 cf                	mov    edi,ecx
c000221f:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002225:	83 c7 80             	add    edi,0xffffff80
c0002228:	75 4e                	jne    c0002278 <tchar2uni+0xcf>
c000222a:	c1 e2 06             	shl    edx,0x6
c000222d:	83 e1 3f             	and    ecx,0x3f
c0002230:	09 ca                	or     edx,ecx
c0002232:	39 de                	cmp    esi,ebx
c0002234:	75 e3                	jne    c0002219 <tchar2uni+0x70>
c0002236:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002239:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000223f:	77 37                	ja     c0002278 <tchar2uni+0xcf>
c0002241:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002247:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000224d:	76 29                	jbe    c0002278 <tchar2uni+0xcf>
c000224f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002255:	76 1d                	jbe    c0002274 <tchar2uni+0xcb>
c0002257:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000225d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002263:	c1 e1 06             	shl    ecx,0x6
c0002266:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000226c:	09 ca                	or     edx,ecx
c000226e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002274:	89 18                	mov    DWORD PTR [eax],ebx
c0002276:	eb 03                	jmp    c000227b <tchar2uni+0xd2>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	5b                   	pop    ebx
c000227c:	89 d0                	mov    eax,edx
c000227e:	5e                   	pop    esi
c000227f:	5f                   	pop    edi
c0002280:	c3                   	ret    

c0002281 <put_utf>:
c0002281:	53                   	push   ebx
c0002282:	83 f8 7f             	cmp    eax,0x7f
c0002285:	89 c3                	mov    ebx,eax
c0002287:	b0 00                	mov    al,0x0
c0002289:	77 11                	ja     c000229c <put_utf+0x1b>
c000228b:	85 c9                	test   ecx,ecx
c000228d:	0f 84 e5 00 00 00    	je     c0002378 <put_utf+0xf7>
c0002293:	88 1a                	mov    BYTE PTR [edx],bl
c0002295:	b0 01                	mov    al,0x1
c0002297:	e9 dc 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c000229c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022a2:	77 23                	ja     c00022c7 <put_utf+0x46>
c00022a4:	83 f9 01             	cmp    ecx,0x1
c00022a7:	0f 86 cb 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ad:	89 d8                	mov    eax,ebx
c00022af:	83 e3 3f             	and    ebx,0x3f
c00022b2:	c1 e8 06             	shr    eax,0x6
c00022b5:	83 cb 80             	or     ebx,0xffffff80
c00022b8:	83 c8 c0             	or     eax,0xffffffc0
c00022bb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022be:	88 02                	mov    BYTE PTR [edx],al
c00022c0:	b0 02                	mov    al,0x2
c00022c2:	e9 b1 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c00022c7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022cd:	77 40                	ja     c000230f <put_utf+0x8e>
c00022cf:	83 f9 02             	cmp    ecx,0x2
c00022d2:	0f 86 a0 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022d8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00022de:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00022e4:	0f 86 8e 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ea:	89 d8                	mov    eax,ebx
c00022ec:	c1 e8 0c             	shr    eax,0xc
c00022ef:	83 c8 e0             	or     eax,0xffffffe0
c00022f2:	88 02                	mov    BYTE PTR [edx],al
c00022f4:	89 d8                	mov    eax,ebx
c00022f6:	83 e3 3f             	and    ebx,0x3f
c00022f9:	c1 e8 06             	shr    eax,0x6
c00022fc:	83 cb 80             	or     ebx,0xffffff80
c00022ff:	83 e0 3f             	and    eax,0x3f
c0002302:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002305:	83 c8 80             	or     eax,0xffffff80
c0002308:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000230b:	b0 03                	mov    al,0x3
c000230d:	eb 69                	jmp    c0002378 <put_utf+0xf7>
c000230f:	83 f9 03             	cmp    ecx,0x3
c0002312:	76 64                	jbe    c0002378 <put_utf+0xf7>
c0002314:	89 d9                	mov    ecx,ebx
c0002316:	0f b7 c3             	movzx  eax,bx
c0002319:	66 31 c9             	xor    cx,cx
c000231c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002322:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002328:	c1 e9 06             	shr    ecx,0x6
c000232b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002331:	77 43                	ja     c0002376 <put_utf+0xf5>
c0002333:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002339:	77 3b                	ja     c0002376 <put_utf+0xf5>
c000233b:	09 cb                	or     ebx,ecx
c000233d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002343:	89 d8                	mov    eax,ebx
c0002345:	c1 e8 12             	shr    eax,0x12
c0002348:	83 c8 f0             	or     eax,0xfffffff0
c000234b:	88 02                	mov    BYTE PTR [edx],al
c000234d:	89 d8                	mov    eax,ebx
c000234f:	c1 e8 0c             	shr    eax,0xc
c0002352:	83 e0 3f             	and    eax,0x3f
c0002355:	83 c8 80             	or     eax,0xffffff80
c0002358:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000235b:	89 d8                	mov    eax,ebx
c000235d:	83 e3 3f             	and    ebx,0x3f
c0002360:	c1 e8 06             	shr    eax,0x6
c0002363:	83 cb 80             	or     ebx,0xffffff80
c0002366:	83 e0 3f             	and    eax,0x3f
c0002369:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000236c:	83 c8 80             	or     eax,0xffffff80
c000236f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002372:	b0 04                	mov    al,0x4
c0002374:	eb 02                	jmp    c0002378 <put_utf+0xf7>
c0002376:	31 c0                	xor    eax,eax
c0002378:	5b                   	pop    ebx
c0002379:	c3                   	ret    

c000237a <clst2sect>:
c000237a:	8d 4a fe             	lea    ecx,[edx-0x2]
c000237d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002380:	83 ea 02             	sub    edx,0x2
c0002383:	39 ca                	cmp    edx,ecx
c0002385:	76 0d                	jbe    c0002394 <clst2sect+0x1a>
c0002387:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000238b:	0f af d1             	imul   edx,ecx
c000238e:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002391:	89 d0                	mov    eax,edx
c0002393:	c3                   	ret    
c0002394:	31 c0                	xor    eax,eax
c0002396:	c3                   	ret    

c0002397 <pick_lfn>:
c0002397:	55                   	push   ebp
c0002398:	57                   	push   edi
c0002399:	89 c7                	mov    edi,eax
c000239b:	56                   	push   esi
c000239c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000239f:	53                   	push   ebx
c00023a0:	89 d3                	mov    ebx,edx
c00023a2:	e8 7c fd ff ff       	call   c0002123 <ld_word>
c00023a7:	66 85 c0             	test   ax,ax
c00023aa:	74 04                	je     c00023b0 <pick_lfn+0x19>
c00023ac:	31 c0                	xor    eax,eax
c00023ae:	eb 62                	jmp    c0002412 <pick_lfn+0x7b>
c00023b0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023b3:	bd 01 00 00 00       	mov    ebp,0x1
c00023b8:	83 e1 bf             	and    ecx,0xffffffbf
c00023bb:	31 f6                	xor    esi,esi
c00023bd:	49                   	dec    ecx
c00023be:	6b c9 0d             	imul   ecx,ecx,0xd
c00023c1:	0f b6 86 c0 fc 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0340]
c00023c8:	01 d8                	add    eax,ebx
c00023ca:	e8 54 fd ff ff       	call   c0002123 <ld_word>
c00023cf:	66 85 ed             	test   bp,bp
c00023d2:	74 11                	je     c00023e5 <pick_lfn+0x4e>
c00023d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00023da:	77 d0                	ja     c00023ac <pick_lfn+0x15>
c00023dc:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00023e0:	89 c5                	mov    ebp,eax
c00023e2:	41                   	inc    ecx
c00023e3:	eb 0a                	jmp    c00023ef <pick_lfn+0x58>
c00023e5:	0f b7 c0             	movzx  eax,ax
c00023e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00023ed:	75 bd                	jne    c00023ac <pick_lfn+0x15>
c00023ef:	46                   	inc    esi
c00023f0:	83 fe 0d             	cmp    esi,0xd
c00023f3:	75 cc                	jne    c00023c1 <pick_lfn+0x2a>
c00023f5:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00023f8:	74 13                	je     c000240d <pick_lfn+0x76>
c00023fa:	66 85 ed             	test   bp,bp
c00023fd:	74 0e                	je     c000240d <pick_lfn+0x76>
c00023ff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002405:	77 a5                	ja     c00023ac <pick_lfn+0x15>
c0002407:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000240d:	b8 01 00 00 00       	mov    eax,0x1
c0002412:	5b                   	pop    ebx
c0002413:	5e                   	pop    esi
c0002414:	5f                   	pop    edi
c0002415:	5d                   	pop    ebp
c0002416:	c3                   	ret    

c0002417 <put_lfn>:
c0002417:	55                   	push   ebp
c0002418:	57                   	push   edi
c0002419:	89 d7                	mov    edi,edx
c000241b:	56                   	push   esi
c000241c:	31 f6                	xor    esi,esi
c000241e:	53                   	push   ebx
c000241f:	83 ec 0c             	sub    esp,0xc
c0002422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002426:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000242a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000242e:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002434:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002437:	8d 42 1a             	lea    eax,[edx+0x1a]
c000243a:	31 d2                	xor    edx,edx
c000243c:	e8 07 fd ff ff       	call   c0002148 <st_word>
c0002441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002448:	0f b6 d9             	movzx  ebx,cl
c000244b:	4b                   	dec    ebx
c000244c:	6b db 0d             	imul   ebx,ebx,0xd
c000244f:	0f b7 c6             	movzx  eax,si
c0002452:	3d ff ff 00 00       	cmp    eax,0xffff
c0002457:	74 09                	je     c0002462 <put_lfn+0x4b>
c0002459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000245d:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002461:	43                   	inc    ebx
c0002462:	0f b7 ee             	movzx  ebp,si
c0002465:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002468:	89 ea                	mov    edx,ebp
c000246a:	0f b6 80 c0 fc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0340]
c0002471:	01 f8                	add    eax,edi
c0002473:	e8 d0 fc ff ff       	call   c0002148 <st_word>
c0002478:	85 ed                	test   ebp,ebp
c000247a:	75 05                	jne    c0002481 <put_lfn+0x6a>
c000247c:	be ff ff 00 00       	mov    esi,0xffff
c0002481:	ff 04 24             	inc    DWORD PTR [esp]
c0002484:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002488:	75 c5                	jne    c000244f <put_lfn+0x38>
c000248a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002490:	74 0b                	je     c000249d <put_lfn+0x86>
c0002492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002496:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000249b:	75 07                	jne    c00024a4 <put_lfn+0x8d>
c000249d:	83 c9 40             	or     ecx,0x40
c00024a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024a8:	88 07                	mov    BYTE PTR [edi],al
c00024aa:	83 c4 0c             	add    esp,0xc
c00024ad:	5b                   	pop    ebx
c00024ae:	5e                   	pop    esi
c00024af:	5f                   	pop    edi
c00024b0:	5d                   	pop    ebp
c00024b1:	c3                   	ret    

c00024b2 <gen_numname>:
c00024b2:	57                   	push   edi
c00024b3:	89 cf                	mov    edi,ecx
c00024b5:	56                   	push   esi
c00024b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00024bb:	53                   	push   ebx
c00024bc:	89 c6                	mov    esi,eax
c00024be:	83 ec 10             	sub    esp,0x10
c00024c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024c5:	e8 85 fc ff ff       	call   c000214f <mem_cpy>
c00024ca:	83 fb 05             	cmp    ebx,0x5
c00024cd:	76 30                	jbe    c00024ff <gen_numname+0x4d>
c00024cf:	66 8b 07             	mov    ax,WORD PTR [edi]
c00024d2:	66 85 c0             	test   ax,ax
c00024d5:	74 28                	je     c00024ff <gen_numname+0x4d>
c00024d7:	83 c7 02             	add    edi,0x2
c00024da:	ba 10 00 00 00       	mov    edx,0x10
c00024df:	01 db                	add    ebx,ebx
c00024e1:	89 c1                	mov    ecx,eax
c00024e3:	c1 e0 10             	shl    eax,0x10
c00024e6:	83 e1 01             	and    ecx,0x1
c00024e9:	c1 e8 11             	shr    eax,0x11
c00024ec:	01 cb                	add    ebx,ecx
c00024ee:	0f ba e3 10          	bt     ebx,0x10
c00024f2:	73 06                	jae    c00024fa <gen_numname+0x48>
c00024f4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00024fa:	4a                   	dec    edx
c00024fb:	75 e2                	jne    c00024df <gen_numname+0x2d>
c00024fd:	eb d0                	jmp    c00024cf <gen_numname+0x1d>
c00024ff:	b8 07 00 00 00       	mov    eax,0x7
c0002504:	89 d9                	mov    ecx,ebx
c0002506:	83 e1 0f             	and    ecx,0xf
c0002509:	8d 79 30             	lea    edi,[ecx+0x30]
c000250c:	89 fa                	mov    edx,edi
c000250e:	83 ff 39             	cmp    edi,0x39
c0002511:	76 03                	jbe    c0002516 <gen_numname+0x64>
c0002513:	8d 51 37             	lea    edx,[ecx+0x37]
c0002516:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002519:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000251d:	89 da                	mov    edx,ebx
c000251f:	c1 ea 04             	shr    edx,0x4
c0002522:	83 fb 0f             	cmp    ebx,0xf
c0002525:	76 06                	jbe    c000252d <gen_numname+0x7b>
c0002527:	89 c8                	mov    eax,ecx
c0002529:	89 d3                	mov    ebx,edx
c000252b:	eb d7                	jmp    c0002504 <gen_numname+0x52>
c000252d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002532:	31 d2                	xor    edx,edx
c0002534:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002537:	8d 04 16             	lea    eax,[esi+edx*1]
c000253a:	39 ca                	cmp    edx,ecx
c000253c:	73 19                	jae    c0002557 <gen_numname+0xa5>
c000253e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002541:	83 f8 20             	cmp    eax,0x20
c0002544:	74 11                	je     c0002557 <gen_numname+0xa5>
c0002546:	e8 58 fc ff ff       	call   c00021a3 <dbc_1st>
c000254b:	85 c0                	test   eax,eax
c000254d:	74 05                	je     c0002554 <gen_numname+0xa2>
c000254f:	39 d3                	cmp    ebx,edx
c0002551:	74 04                	je     c0002557 <gen_numname+0xa5>
c0002553:	42                   	inc    edx
c0002554:	42                   	inc    edx
c0002555:	eb e0                	jmp    c0002537 <gen_numname+0x85>
c0002557:	b0 20                	mov    al,0x20
c0002559:	83 f9 07             	cmp    ecx,0x7
c000255c:	77 05                	ja     c0002563 <gen_numname+0xb1>
c000255e:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002562:	41                   	inc    ecx
c0002563:	42                   	inc    edx
c0002564:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002568:	83 fa 07             	cmp    edx,0x7
c000256b:	76 ea                	jbe    c0002557 <gen_numname+0xa5>
c000256d:	83 c4 10             	add    esp,0x10
c0002570:	5b                   	pop    ebx
c0002571:	5e                   	pop    esi
c0002572:	5f                   	pop    edi
c0002573:	c3                   	ret    

c0002574 <sum_sfn>:
c0002574:	53                   	push   ebx
c0002575:	31 c9                	xor    ecx,ecx
c0002577:	31 db                	xor    ebx,ebx
c0002579:	0f b6 d1             	movzx  edx,cl
c000257c:	c1 e1 07             	shl    ecx,0x7
c000257f:	d1 ea                	shr    edx,1
c0002581:	09 ca                	or     edx,ecx
c0002583:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002586:	43                   	inc    ebx
c0002587:	01 ca                	add    edx,ecx
c0002589:	83 fb 0b             	cmp    ebx,0xb
c000258c:	88 d1                	mov    cl,dl
c000258e:	75 e9                	jne    c0002579 <sum_sfn+0x5>
c0002590:	88 d0                	mov    al,dl
c0002592:	5b                   	pop    ebx
c0002593:	c3                   	ret    

c0002594 <get_ldnumber>:
c0002594:	8b 10                	mov    edx,DWORD PTR [eax]
c0002596:	85 d2                	test   edx,edx
c0002598:	74 14                	je     c00025ae <get_ldnumber+0x1a>
c000259a:	56                   	push   esi
c000259b:	53                   	push   ebx
c000259c:	89 d3                	mov    ebx,edx
c000259e:	43                   	inc    ebx
c000259f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c00025a2:	80 f9 1f             	cmp    cl,0x1f
c00025a5:	76 0d                	jbe    c00025b4 <get_ldnumber+0x20>
c00025a7:	80 f9 3a             	cmp    cl,0x3a
c00025aa:	75 f2                	jne    c000259e <get_ldnumber+0xa>
c00025ac:	eb 0a                	jmp    c00025b8 <get_ldnumber+0x24>
c00025ae:	83 c9 ff             	or     ecx,0xffffffff
c00025b1:	89 c8                	mov    eax,ecx
c00025b3:	c3                   	ret    
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	eb 24                	jmp    c00025dc <get_ldnumber+0x48>
c00025b8:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00025bb:	8d 4e d0             	lea    ecx,[esi-0x30]
c00025be:	80 f9 09             	cmp    cl,0x9
c00025c1:	77 16                	ja     c00025d9 <get_ldnumber+0x45>
c00025c3:	83 c2 02             	add    edx,0x2
c00025c6:	83 c9 ff             	or     ecx,0xffffffff
c00025c9:	39 d3                	cmp    ebx,edx
c00025cb:	75 0f                	jne    c00025dc <get_ldnumber+0x48>
c00025cd:	89 f2                	mov    edx,esi
c00025cf:	89 18                	mov    DWORD PTR [eax],ebx
c00025d1:	0f be ca             	movsx  ecx,dl
c00025d4:	83 e9 30             	sub    ecx,0x30
c00025d7:	eb 03                	jmp    c00025dc <get_ldnumber+0x48>
c00025d9:	83 c9 ff             	or     ecx,0xffffffff
c00025dc:	89 c8                	mov    eax,ecx
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	c3                   	ret    

c00025e1 <validate>:
c00025e1:	56                   	push   esi
c00025e2:	53                   	push   ebx
c00025e3:	89 d6                	mov    esi,edx
c00025e5:	51                   	push   ecx
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 09                	jne    c00025f3 <validate+0x12>
c00025ea:	b8 09 00 00 00       	mov    eax,0x9
c00025ef:	31 c9                	xor    ecx,ecx
c00025f1:	eb 2e                	jmp    c0002621 <validate+0x40>
c00025f3:	89 c3                	mov    ebx,eax
c00025f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00025f7:	85 c0                	test   eax,eax
c00025f9:	74 ef                	je     c00025ea <validate+0x9>
c00025fb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00025fe:	74 ea                	je     c00025ea <validate+0x9>
c0002600:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002603:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002607:	75 e1                	jne    c00025ea <validate+0x9>
c0002609:	83 ec 0c             	sub    esp,0xc
c000260c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002610:	50                   	push   eax
c0002611:	e8 bc fa ff ff       	call   c00020d2 <disk_status>
c0002616:	83 c4 10             	add    esp,0x10
c0002619:	a8 01                	test   al,0x1
c000261b:	75 cd                	jne    c00025ea <validate+0x9>
c000261d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000261f:	31 c0                	xor    eax,eax
c0002621:	89 0e                	mov    DWORD PTR [esi],ecx
c0002623:	5a                   	pop    edx
c0002624:	5b                   	pop    ebx
c0002625:	5e                   	pop    esi
c0002626:	c3                   	ret    

c0002627 <sync_window>:
c0002627:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000262b:	74 58                	je     c0002685 <sync_window+0x5e>
c000262d:	56                   	push   esi
c000262e:	53                   	push   ebx
c000262f:	8d 70 34             	lea    esi,[eax+0x34]
c0002632:	51                   	push   ecx
c0002633:	89 c3                	mov    ebx,eax
c0002635:	6a 01                	push   0x1
c0002637:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000263a:	56                   	push   esi
c000263b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263f:	50                   	push   eax
c0002640:	e8 a9 fa ff ff       	call   c00020ee <disk_write>
c0002645:	83 c4 10             	add    esp,0x10
c0002648:	ba 01 00 00 00       	mov    edx,0x1
c000264d:	85 c0                	test   eax,eax
c000264f:	75 2e                	jne    c000267f <sync_window+0x58>
c0002651:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002654:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002657:	89 c1                	mov    ecx,eax
c0002659:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000265d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002660:	39 d1                	cmp    ecx,edx
c0002662:	73 19                	jae    c000267d <sync_window+0x56>
c0002664:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002668:	75 13                	jne    c000267d <sync_window+0x56>
c000266a:	6a 01                	push   0x1
c000266c:	01 d0                	add    eax,edx
c000266e:	50                   	push   eax
c000266f:	56                   	push   esi
c0002670:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002674:	50                   	push   eax
c0002675:	e8 74 fa ff ff       	call   c00020ee <disk_write>
c000267a:	83 c4 10             	add    esp,0x10
c000267d:	31 d2                	xor    edx,edx
c000267f:	89 d0                	mov    eax,edx
c0002681:	5a                   	pop    edx
c0002682:	5b                   	pop    ebx
c0002683:	5e                   	pop    esi
c0002684:	c3                   	ret    
c0002685:	31 d2                	xor    edx,edx
c0002687:	89 d0                	mov    eax,edx
c0002689:	c3                   	ret    

c000268a <move_window>:
c000268a:	57                   	push   edi
c000268b:	56                   	push   esi
c000268c:	31 f6                	xor    esi,esi
c000268e:	53                   	push   ebx
c000268f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002692:	74 32                	je     c00026c6 <move_window+0x3c>
c0002694:	89 c3                	mov    ebx,eax
c0002696:	89 d7                	mov    edi,edx
c0002698:	e8 8a ff ff ff       	call   c0002627 <sync_window>
c000269d:	89 c6                	mov    esi,eax
c000269f:	85 c0                	test   eax,eax
c00026a1:	75 23                	jne    c00026c6 <move_window+0x3c>
c00026a3:	6a 01                	push   0x1
c00026a5:	8d 43 34             	lea    eax,[ebx+0x34]
c00026a8:	57                   	push   edi
c00026a9:	50                   	push   eax
c00026aa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026ae:	50                   	push   eax
c00026af:	e8 24 fa ff ff       	call   c00020d8 <disk_read>
c00026b4:	83 c4 10             	add    esp,0x10
c00026b7:	85 c0                	test   eax,eax
c00026b9:	74 08                	je     c00026c3 <move_window+0x39>
c00026bb:	be 01 00 00 00       	mov    esi,0x1
c00026c0:	83 cf ff             	or     edi,0xffffffff
c00026c3:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00026c6:	89 f0                	mov    eax,esi
c00026c8:	5b                   	pop    ebx
c00026c9:	5e                   	pop    esi
c00026ca:	5f                   	pop    edi
c00026cb:	c3                   	ret    

c00026cc <check_fs>:
c00026cc:	53                   	push   ebx
c00026cd:	89 c3                	mov    ebx,eax
c00026cf:	83 ec 08             	sub    esp,0x8
c00026d2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00026d6:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00026dd:	e8 a8 ff ff ff       	call   c000268a <move_window>
c00026e2:	ba 04 00 00 00       	mov    edx,0x4
c00026e7:	85 c0                	test   eax,eax
c00026e9:	75 68                	jne    c0002753 <check_fs+0x87>
c00026eb:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00026f1:	e8 2d fa ff ff       	call   c0002123 <ld_word>
c00026f6:	ba 03 00 00 00       	mov    edx,0x3
c00026fb:	66 3d 55 aa          	cmp    ax,0xaa55
c00026ff:	75 52                	jne    c0002753 <check_fs+0x87>
c0002701:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002704:	8d 50 18             	lea    edx,[eax+0x18]
c0002707:	80 fa 01             	cmp    dl,0x1
c000270a:	76 09                	jbe    c0002715 <check_fs+0x49>
c000270c:	ba 02 00 00 00       	mov    edx,0x2
c0002711:	3c eb                	cmp    al,0xeb
c0002713:	75 3e                	jne    c0002753 <check_fs+0x87>
c0002715:	ba 1c 3b 03 c0       	mov    edx,0xc0033b1c
c000271a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000271d:	b9 03 00 00 00       	mov    ecx,0x3
c0002722:	e8 48 fa ff ff       	call   c000216f <mem_cmp>
c0002727:	31 d2                	xor    edx,edx
c0002729:	85 c0                	test   eax,eax
c000272b:	74 26                	je     c0002753 <check_fs+0x87>
c000272d:	ba 78 fb 02 c0       	mov    edx,0xc002fb78
c0002732:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002738:	b9 05 00 00 00       	mov    ecx,0x5
c000273d:	e8 2d fa ff ff       	call   c000216f <mem_cmp>
c0002742:	31 d2                	xor    edx,edx
c0002744:	85 c0                	test   eax,eax
c0002746:	74 0b                	je     c0002753 <check_fs+0x87>
c0002748:	31 d2                	xor    edx,edx
c000274a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000274e:	0f 95 c2             	setne  dl
c0002751:	01 d2                	add    edx,edx
c0002753:	89 d0                	mov    eax,edx
c0002755:	83 c4 08             	add    esp,0x8
c0002758:	5b                   	pop    ebx
c0002759:	c3                   	ret    

c000275a <find_volume>:
c000275a:	55                   	push   ebp
c000275b:	57                   	push   edi
c000275c:	56                   	push   esi
c000275d:	89 c6                	mov    esi,eax
c000275f:	53                   	push   ebx
c0002760:	89 d3                	mov    ebx,edx
c0002762:	83 ec 2c             	sub    esp,0x2c
c0002765:	31 d2                	xor    edx,edx
c0002767:	e8 60 ff ff ff       	call   c00026cc <check_fs>
c000276c:	83 f8 02             	cmp    eax,0x2
c000276f:	74 06                	je     c0002777 <find_volume+0x1d>
c0002771:	77 62                	ja     c00027d5 <find_volume+0x7b>
c0002773:	85 db                	test   ebx,ebx
c0002775:	74 5e                	je     c00027d5 <find_volume+0x7b>
c0002777:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000277b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002781:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000278b:	89 cf                	mov    edi,ecx
c000278d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002791:	89 e8                	mov    eax,ebp
c0002793:	83 c5 10             	add    ebp,0x10
c0002796:	e8 95 f9 ff ff       	call   c0002130 <ld_dword>
c000279b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279f:	89 01                	mov    DWORD PTR [ecx],eax
c00027a1:	83 c1 04             	add    ecx,0x4
c00027a4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00027a8:	75 e3                	jne    c000278d <find_volume+0x33>
c00027aa:	31 ed                	xor    ebp,ebp
c00027ac:	85 db                	test   ebx,ebx
c00027ae:	74 03                	je     c00027b3 <find_volume+0x59>
c00027b0:	8d 6b ff             	lea    ebp,[ebx-0x1]
c00027b3:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c00027b6:	b8 03 00 00 00       	mov    eax,0x3
c00027bb:	85 d2                	test   edx,edx
c00027bd:	74 0c                	je     c00027cb <find_volume+0x71>
c00027bf:	89 f0                	mov    eax,esi
c00027c1:	e8 06 ff ff ff       	call   c00026cc <check_fs>
c00027c6:	83 f8 01             	cmp    eax,0x1
c00027c9:	76 0a                	jbe    c00027d5 <find_volume+0x7b>
c00027cb:	85 db                	test   ebx,ebx
c00027cd:	75 06                	jne    c00027d5 <find_volume+0x7b>
c00027cf:	45                   	inc    ebp
c00027d0:	83 fd 03             	cmp    ebp,0x3
c00027d3:	76 de                	jbe    c00027b3 <find_volume+0x59>
c00027d5:	83 c4 2c             	add    esp,0x2c
c00027d8:	5b                   	pop    ebx
c00027d9:	5e                   	pop    esi
c00027da:	5f                   	pop    edi
c00027db:	5d                   	pop    ebp
c00027dc:	c3                   	ret    

c00027dd <mount_volume>:
c00027dd:	55                   	push   ebp
c00027de:	89 d5                	mov    ebp,edx
c00027e0:	57                   	push   edi
c00027e1:	89 cf                	mov    edi,ecx
c00027e3:	56                   	push   esi
c00027e4:	53                   	push   ebx
c00027e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00027ea:	83 ec 1c             	sub    esp,0x1c
c00027ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00027f3:	e8 9c fd ff ff       	call   c0002594 <get_ldnumber>
c00027f8:	85 c0                	test   eax,eax
c00027fa:	0f 88 c4 02 00 00    	js     c0002ac4 <mount_volume+0x2e7>
c0002800:	8b 34 85 80 7c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8380]
c0002807:	89 c2                	mov    edx,eax
c0002809:	bb 0c 00 00 00       	mov    ebx,0xc
c000280e:	85 f6                	test   esi,esi
c0002810:	0f 84 ae 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002816:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002819:	83 e7 fe             	and    edi,0xfffffffe
c000281c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000281f:	74 3a                	je     c000285b <mount_volume+0x7e>
c0002821:	89 04 24             	mov    DWORD PTR [esp],eax
c0002824:	83 ec 0c             	sub    esp,0xc
c0002827:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000282b:	50                   	push   eax
c000282c:	e8 a1 f8 ff ff       	call   c00020d2 <disk_status>
c0002831:	83 c4 10             	add    esp,0x10
c0002834:	a8 01                	test   al,0x1
c0002836:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0002839:	75 20                	jne    c000285b <mount_volume+0x7e>
c000283b:	31 db                	xor    ebx,ebx
c000283d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002843:	0f 84 7b 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002849:	a8 04                	test   al,0x4
c000284b:	0f 84 73 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002851:	bb 0a 00 00 00       	mov    ebx,0xa
c0002856:	e9 69 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c000285b:	83 ec 0c             	sub    esp,0xc
c000285e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002861:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002864:	0f b6 c2             	movzx  eax,dl
c0002867:	bb 03 00 00 00       	mov    ebx,0x3
c000286c:	50                   	push   eax
c000286d:	e8 63 f8 ff ff       	call   c00020d5 <disk_initialize>
c0002872:	83 c4 10             	add    esp,0x10
c0002875:	a8 01                	test   al,0x1
c0002877:	0f 85 47 02 00 00    	jne    c0002ac4 <mount_volume+0x2e7>
c000287d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002883:	74 04                	je     c0002889 <mount_volume+0xac>
c0002885:	a8 04                	test   al,0x4
c0002887:	75 c8                	jne    c0002851 <mount_volume+0x74>
c0002889:	31 d2                	xor    edx,edx
c000288b:	89 f0                	mov    eax,esi
c000288d:	bb 01 00 00 00       	mov    ebx,0x1
c0002892:	e8 c3 fe ff ff       	call   c000275a <find_volume>
c0002897:	83 f8 04             	cmp    eax,0x4
c000289a:	0f 84 24 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c00028a0:	83 f8 01             	cmp    eax,0x1
c00028a3:	76 0a                	jbe    c00028af <mount_volume+0xd2>
c00028a5:	bb 0d 00 00 00       	mov    ebx,0xd
c00028aa:	e9 15 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c00028af:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028b2:	e8 6c f8 ff ff       	call   c0002123 <ld_word>
c00028b7:	66 3d 00 02          	cmp    ax,0x200
c00028bb:	75 e8                	jne    c00028a5 <mount_volume+0xc8>
c00028bd:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028c0:	e8 5e f8 ff ff       	call   c0002123 <ld_word>
c00028c5:	0f b7 c0             	movzx  eax,ax
c00028c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00028cb:	85 c0                	test   eax,eax
c00028cd:	75 0b                	jne    c00028da <mount_volume+0xfd>
c00028cf:	8d 46 58             	lea    eax,[esi+0x58]
c00028d2:	e8 59 f8 ff ff       	call   c0002130 <ld_dword>
c00028d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00028da:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00028dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00028e4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00028e7:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00028ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00028ee:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00028f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f5:	48                   	dec    eax
c00028f6:	3c 01                	cmp    al,0x1
c00028f8:	77 ab                	ja     c00028a5 <mount_volume+0xc8>
c00028fa:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00028fe:	89 c3                	mov    ebx,eax
c0002900:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0002904:	66 85 c0             	test   ax,ax
c0002907:	74 9c                	je     c00028a5 <mount_volume+0xc8>
c0002909:	8d 40 ff             	lea    eax,[eax-0x1]
c000290c:	85 d8                	test   eax,ebx
c000290e:	75 95                	jne    c00028a5 <mount_volume+0xc8>
c0002910:	8d 46 45             	lea    eax,[esi+0x45]
c0002913:	e8 0b f8 ff ff       	call   c0002123 <ld_word>
c0002918:	89 c7                	mov    edi,eax
c000291a:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c000291e:	a8 0f                	test   al,0xf
c0002920:	75 83                	jne    c00028a5 <mount_volume+0xc8>
c0002922:	8d 46 47             	lea    eax,[esi+0x47]
c0002925:	e8 f9 f7 ff ff       	call   c0002123 <ld_word>
c000292a:	0f b7 e8             	movzx  ebp,ax
c000292d:	85 ed                	test   ebp,ebp
c000292f:	75 0a                	jne    c000293b <mount_volume+0x15e>
c0002931:	8d 46 54             	lea    eax,[esi+0x54]
c0002934:	e8 f7 f7 ff ff       	call   c0002130 <ld_dword>
c0002939:	89 c5                	mov    ebp,eax
c000293b:	8d 46 42             	lea    eax,[esi+0x42]
c000293e:	e8 e0 f7 ff ff       	call   c0002123 <ld_word>
c0002943:	0f b7 c8             	movzx  ecx,ax
c0002946:	85 c9                	test   ecx,ecx
c0002948:	0f 84 57 ff ff ff    	je     c00028a5 <mount_volume+0xc8>
c000294e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002953:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295b:	0f b7 c7             	movzx  eax,di
c000295e:	c1 e8 04             	shr    eax,0x4
c0002961:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002965:	01 c8                	add    eax,ecx
c0002967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000296b:	39 c5                	cmp    ebp,eax
c000296d:	0f 82 32 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002973:	29 c5                	sub    ebp,eax
c0002975:	31 d2                	xor    edx,edx
c0002977:	89 e8                	mov    eax,ebp
c0002979:	f7 f3                	div    ebx
c000297b:	39 dd                	cmp    ebp,ebx
c000297d:	0f 82 22 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002983:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002988:	0f 87 17 ff ff ff    	ja     c00028a5 <mount_volume+0xc8>
c000298e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002993:	0f 86 1c 01 00 00    	jbe    c0002ab5 <mount_volume+0x2d8>
c0002999:	bb 03 00 00 00       	mov    ebx,0x3
c000299e:	8d 68 02             	lea    ebp,[eax+0x2]
c00029a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029a9:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c00029ad:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029b0:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029b3:	01 c8                	add    eax,ecx
c00029b5:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00029b8:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029bb:	83 fb 03             	cmp    ebx,0x3
c00029be:	75 23                	jne    c00029e3 <mount_volume+0x206>
c00029c0:	8d 46 5e             	lea    eax,[esi+0x5e]
c00029c3:	e8 5b f7 ff ff       	call   c0002123 <ld_word>
c00029c8:	09 c7                	or     edi,eax
c00029ca:	66 85 ff             	test   di,di
c00029cd:	0f 85 d2 fe ff ff    	jne    c00028a5 <mount_volume+0xc8>
c00029d3:	8d 46 60             	lea    eax,[esi+0x60]
c00029d6:	c1 e5 02             	shl    ebp,0x2
c00029d9:	e8 52 f7 ff ff       	call   c0002130 <ld_dword>
c00029de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029e1:	eb 24                	jmp    c0002a07 <mount_volume+0x22a>
c00029e3:	66 85 ff             	test   di,di
c00029e6:	0f 84 b9 fe ff ff    	je     c00028a5 <mount_volume+0xc8>
c00029ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00029f0:	83 fb 02             	cmp    ebx,0x2
c00029f3:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029f6:	75 04                	jne    c00029fc <mount_volume+0x21f>
c00029f8:	01 ed                	add    ebp,ebp
c00029fa:	eb 0b                	jmp    c0002a07 <mount_volume+0x22a>
c00029fc:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002a00:	83 e5 01             	and    ebp,0x1
c0002a03:	d1 e8                	shr    eax,1
c0002a05:	01 c5                	add    ebp,eax
c0002a07:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a0d:	c1 ed 09             	shr    ebp,0x9
c0002a10:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0002a13:	0f 87 8c fe ff ff    	ja     c00028a5 <mount_volume+0xc8>
c0002a19:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a20:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a27:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a2b:	83 fb 03             	cmp    ebx,0x3
c0002a2e:	75 6e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a30:	8d 46 64             	lea    eax,[esi+0x64]
c0002a33:	e8 eb f6 ff ff       	call   c0002123 <ld_word>
c0002a38:	66 48                	dec    ax
c0002a3a:	75 62                	jne    c0002a9e <mount_volume+0x2c1>
c0002a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002a40:	89 f0                	mov    eax,esi
c0002a42:	42                   	inc    edx
c0002a43:	e8 42 fc ff ff       	call   c000268a <move_window>
c0002a48:	85 c0                	test   eax,eax
c0002a4a:	75 52                	jne    c0002a9e <mount_volume+0x2c1>
c0002a4c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a50:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a56:	e8 c8 f6 ff ff       	call   c0002123 <ld_word>
c0002a5b:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a5f:	75 3d                	jne    c0002a9e <mount_volume+0x2c1>
c0002a61:	8d 46 34             	lea    eax,[esi+0x34]
c0002a64:	e8 c7 f6 ff ff       	call   c0002130 <ld_dword>
c0002a69:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a6e:	75 2e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a70:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002a76:	e8 b5 f6 ff ff       	call   c0002130 <ld_dword>
c0002a7b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a80:	75 1c                	jne    c0002a9e <mount_volume+0x2c1>
c0002a82:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002a88:	e8 a3 f6 ff ff       	call   c0002130 <ld_dword>
c0002a8d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002a90:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002a96:	e8 95 f6 ff ff       	call   c0002130 <ld_dword>
c0002a9b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002a9e:	66 a1 60 7c 03 c0    	mov    ax,ds:0xc0037c60
c0002aa4:	88 1e                	mov    BYTE PTR [esi],bl
c0002aa6:	40                   	inc    eax
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	66 a3 60 7c 03 c0    	mov    ds:0xc0037c60,ax
c0002aaf:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002ab3:	eb 0f                	jmp    c0002ac4 <mount_volume+0x2e7>
c0002ab5:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002aba:	19 db                	sbb    ebx,ebx
c0002abc:	83 c3 02             	add    ebx,0x2
c0002abf:	e9 da fe ff ff       	jmp    c000299e <mount_volume+0x1c1>
c0002ac4:	83 c4 1c             	add    esp,0x1c
c0002ac7:	89 d8                	mov    eax,ebx
c0002ac9:	5b                   	pop    ebx
c0002aca:	5e                   	pop    esi
c0002acb:	5f                   	pop    edi
c0002acc:	5d                   	pop    ebp
c0002acd:	c3                   	ret    

c0002ace <put_fat>:
c0002ace:	55                   	push   ebp
c0002acf:	bd 02 00 00 00       	mov    ebp,0x2
c0002ad4:	57                   	push   edi
c0002ad5:	56                   	push   esi
c0002ad6:	53                   	push   ebx
c0002ad7:	83 ec 1c             	sub    esp,0x1c
c0002ada:	83 fa 01             	cmp    edx,0x1
c0002add:	0f 86 38 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002ae3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002ae6:	0f 86 2f 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002aec:	89 c6                	mov    esi,eax
c0002aee:	89 cf                	mov    edi,ecx
c0002af0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 f8 02             	cmp    eax,0x2
c0002af8:	0f 84 b1 00 00 00    	je     c0002baf <put_fat+0xe1>
c0002afe:	83 f8 03             	cmp    eax,0x3
c0002b01:	0f 84 d5 00 00 00    	je     c0002bdc <put_fat+0x10e>
c0002b07:	48                   	dec    eax
c0002b08:	0f 85 0d 01 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b0e:	89 d1                	mov    ecx,edx
c0002b10:	89 f0                	mov    eax,esi
c0002b12:	d1 e9                	shr    ecx,1
c0002b14:	01 d1                	add    ecx,edx
c0002b16:	89 ca                	mov    edx,ecx
c0002b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b1c:	c1 ea 09             	shr    edx,0x9
c0002b1f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b22:	e8 63 fb ff ff       	call   c000268a <move_window>
c0002b27:	89 c5                	mov    ebp,eax
c0002b29:	85 c0                	test   eax,eax
c0002b2b:	0f 85 ea 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b35:	8d 46 34             	lea    eax,[esi+0x34]
c0002b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b3c:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b3f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b49:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b4d:	89 f8                	mov    eax,edi
c0002b4f:	83 e3 01             	and    ebx,0x1
c0002b52:	74 11                	je     c0002b65 <put_fat+0x97>
c0002b54:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b56:	89 f8                	mov    eax,edi
c0002b58:	83 e2 0f             	and    edx,0xf
c0002b5b:	c1 e0 04             	shl    eax,0x4
c0002b5e:	25 f0 0f 00 00       	and    eax,0xff0
c0002b63:	09 d0                	or     eax,edx
c0002b65:	88 01                	mov    BYTE PTR [ecx],al
c0002b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b6b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b6f:	c1 ea 09             	shr    edx,0x9
c0002b72:	89 f0                	mov    eax,esi
c0002b74:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b77:	e8 0e fb ff ff       	call   c000268a <move_window>
c0002b7c:	89 c5                	mov    ebp,eax
c0002b7e:	85 c0                	test   eax,eax
c0002b80:	0f 85 95 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b8a:	25 ff 01 00 00       	and    eax,0x1ff
c0002b8f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b93:	85 db                	test   ebx,ebx
c0002b95:	74 07                	je     c0002b9e <put_fat+0xd0>
c0002b97:	c1 ef 04             	shr    edi,0x4
c0002b9a:	89 f9                	mov    ecx,edi
c0002b9c:	eb 0d                	jmp    c0002bab <put_fat+0xdd>
c0002b9e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002ba0:	c1 ef 08             	shr    edi,0x8
c0002ba3:	83 e1 f0             	and    ecx,0xfffffff0
c0002ba6:	83 e7 0f             	and    edi,0xf
c0002ba9:	09 f9                	or     ecx,edi
c0002bab:	88 08                	mov    BYTE PTR [eax],cl
c0002bad:	eb 27                	jmp    c0002bd6 <put_fat+0x108>
c0002baf:	c1 ea 08             	shr    edx,0x8
c0002bb2:	89 f0                	mov    eax,esi
c0002bb4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bb7:	e8 ce fa ff ff       	call   c000268a <move_window>
c0002bbc:	89 c5                	mov    ebp,eax
c0002bbe:	85 c0                	test   eax,eax
c0002bc0:	75 59                	jne    c0002c1b <put_fat+0x14d>
c0002bc2:	01 db                	add    ebx,ebx
c0002bc4:	0f b7 d7             	movzx  edx,di
c0002bc7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bcd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002bd1:	e8 72 f5 ff ff       	call   c0002148 <st_word>
c0002bd6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bda:	eb 3f                	jmp    c0002c1b <put_fat+0x14d>
c0002bdc:	c1 ea 07             	shr    edx,0x7
c0002bdf:	89 f0                	mov    eax,esi
c0002be1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002be4:	e8 a1 fa ff ff       	call   c000268a <move_window>
c0002be9:	89 c5                	mov    ebp,eax
c0002beb:	85 c0                	test   eax,eax
c0002bed:	75 2c                	jne    c0002c1b <put_fat+0x14d>
c0002bef:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002bf5:	c1 e3 02             	shl    ebx,0x2
c0002bf8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002bfe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c02:	89 d8                	mov    eax,ebx
c0002c04:	e8 27 f5 ff ff       	call   c0002130 <ld_dword>
c0002c09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c0e:	09 f8                	or     eax,edi
c0002c10:	89 c2                	mov    edx,eax
c0002c12:	89 d8                	mov    eax,ebx
c0002c14:	e8 33 f5 ff ff       	call   c000214c <st_dword>
c0002c19:	eb bb                	jmp    c0002bd6 <put_fat+0x108>
c0002c1b:	83 c4 1c             	add    esp,0x1c
c0002c1e:	89 e8                	mov    eax,ebp
c0002c20:	5b                   	pop    ebx
c0002c21:	5e                   	pop    esi
c0002c22:	5f                   	pop    edi
c0002c23:	5d                   	pop    ebp
c0002c24:	c3                   	ret    

c0002c25 <dir_clear>:
c0002c25:	55                   	push   ebp
c0002c26:	57                   	push   edi
c0002c27:	56                   	push   esi
c0002c28:	89 c6                	mov    esi,eax
c0002c2a:	53                   	push   ebx
c0002c2b:	83 ec 1c             	sub    esp,0x1c
c0002c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c32:	e8 f0 f9 ff ff       	call   c0002627 <sync_window>
c0002c37:	85 c0                	test   eax,eax
c0002c39:	0f 85 c0 00 00 00    	jne    c0002cff <dir_clear+0xda>
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	89 f0                	mov    eax,esi
c0002c45:	e8 30 f7 ff ff       	call   c000237a <clst2sect>
c0002c4a:	31 d2                	xor    edx,edx
c0002c4c:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c4f:	89 c5                	mov    ebp,eax
c0002c51:	b9 00 02 00 00       	mov    ecx,0x200
c0002c56:	8d 46 34             	lea    eax,[esi+0x34]
c0002c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c5d:	e8 02 f5 ff ff       	call   c0002164 <mem_set>
c0002c62:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002c66:	c1 e3 09             	shl    ebx,0x9
c0002c69:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002c6f:	76 1b                	jbe    c0002c8c <dir_clear+0x67>
c0002c71:	bb 00 80 00 00       	mov    ebx,0x8000
c0002c76:	eb 14                	jmp    c0002c8c <dir_clear+0x67>
c0002c78:	83 ec 0c             	sub    esp,0xc
c0002c7b:	53                   	push   ebx
c0002c7c:	e8 eb 32 00 00       	call   c0005f6c <ff_memalloc>
c0002c81:	83 c4 10             	add    esp,0x10
c0002c84:	89 c7                	mov    edi,eax
c0002c86:	85 c0                	test   eax,eax
c0002c88:	75 7c                	jne    c0002d06 <dir_clear+0xe1>
c0002c8a:	d1 eb                	shr    ebx,1
c0002c8c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c92:	77 e4                	ja     c0002c78 <dir_clear+0x53>
c0002c94:	31 db                	xor    ebx,ebx
c0002c96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002c9a:	39 d8                	cmp    eax,ebx
c0002c9c:	76 53                	jbe    c0002cf1 <dir_clear+0xcc>
c0002c9e:	6a 01                	push   0x1
c0002ca0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ca3:	50                   	push   eax
c0002ca4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cac:	50                   	push   eax
c0002cad:	e8 3c f4 ff ff       	call   c00020ee <disk_write>
c0002cb2:	83 c4 10             	add    esp,0x10
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 38                	jne    c0002cf1 <dir_clear+0xcc>
c0002cb9:	43                   	inc    ebx
c0002cba:	eb da                	jmp    c0002c96 <dir_clear+0x71>
c0002cbc:	52                   	push   edx
c0002cbd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002cc4:	50                   	push   eax
c0002cc5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002cc9:	57                   	push   edi
c0002cca:	50                   	push   eax
c0002ccb:	e8 1e f4 ff ff       	call   c00020ee <disk_write>
c0002cd0:	83 c4 10             	add    esp,0x10
c0002cd3:	85 c0                	test   eax,eax
c0002cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002cd9:	75 0a                	jne    c0002ce5 <dir_clear+0xc0>
c0002cdb:	01 d3                	add    ebx,edx
c0002cdd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002ce1:	39 d8                	cmp    eax,ebx
c0002ce3:	77 d7                	ja     c0002cbc <dir_clear+0x97>
c0002ce5:	83 ec 0c             	sub    esp,0xc
c0002ce8:	57                   	push   edi
c0002ce9:	e8 96 32 00 00       	call   c0005f84 <ff_memfree>
c0002cee:	83 c4 10             	add    esp,0x10
c0002cf1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cf5:	39 d8                	cmp    eax,ebx
c0002cf7:	0f 95 c0             	setne  al
c0002cfa:	0f b6 c0             	movzx  eax,al
c0002cfd:	eb 19                	jmp    c0002d18 <dir_clear+0xf3>
c0002cff:	b8 01 00 00 00       	mov    eax,0x1
c0002d04:	eb 12                	jmp    c0002d18 <dir_clear+0xf3>
c0002d06:	89 d9                	mov    ecx,ebx
c0002d08:	31 d2                	xor    edx,edx
c0002d0a:	e8 55 f4 ff ff       	call   c0002164 <mem_set>
c0002d0f:	89 da                	mov    edx,ebx
c0002d11:	31 db                	xor    ebx,ebx
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	eb c5                	jmp    c0002cdd <dir_clear+0xb8>
c0002d18:	83 c4 1c             	add    esp,0x1c
c0002d1b:	5b                   	pop    ebx
c0002d1c:	5e                   	pop    esi
c0002d1d:	5f                   	pop    edi
c0002d1e:	5d                   	pop    ebp
c0002d1f:	c3                   	ret    

c0002d20 <create_name>:
c0002d20:	55                   	push   ebp
c0002d21:	57                   	push   edi
c0002d22:	89 d7                	mov    edi,edx
c0002d24:	56                   	push   esi
c0002d25:	31 f6                	xor    esi,esi
c0002d27:	53                   	push   ebx
c0002d28:	83 ec 3c             	sub    esp,0x3c
c0002d2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d2f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0002d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d42:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d46:	e8 5e f4 ff ff       	call   c00021a9 <tchar2uni>
c0002d4b:	89 c3                	mov    ebx,eax
c0002d4d:	83 f8 ff             	cmp    eax,0xffffffff
c0002d50:	75 0a                	jne    c0002d5c <create_name+0x3c>
c0002d52:	b8 06 00 00 00       	mov    eax,0x6
c0002d57:	e9 93 02 00 00       	jmp    c0002fef <create_name+0x2cf>
c0002d5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002d61:	76 0c                	jbe    c0002d6f <create_name+0x4f>
c0002d63:	c1 e8 10             	shr    eax,0x10
c0002d66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6a:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002d6e:	46                   	inc    esi
c0002d6f:	0f b7 d3             	movzx  edx,bx
c0002d72:	83 fa 1f             	cmp    edx,0x1f
c0002d75:	76 4a                	jbe    c0002dc1 <create_name+0xa1>
c0002d77:	83 fa 5c             	cmp    edx,0x5c
c0002d7a:	74 30                	je     c0002dac <create_name+0x8c>
c0002d7c:	83 fa 2f             	cmp    edx,0x2f
c0002d7f:	74 2b                	je     c0002dac <create_name+0x8c>
c0002d81:	83 fa 7f             	cmp    edx,0x7f
c0002d84:	77 0e                	ja     c0002d94 <create_name+0x74>
c0002d86:	b8 7e fb 02 c0       	mov    eax,0xc002fb7e
c0002d8b:	e8 02 f4 ff ff       	call   c0002192 <chk_chr>
c0002d90:	85 c0                	test   eax,eax
c0002d92:	75 be                	jne    c0002d52 <create_name+0x32>
c0002d94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002d9a:	77 b6                	ja     c0002d52 <create_name+0x32>
c0002d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002da0:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002da4:	46                   	inc    esi
c0002da5:	eb 9b                	jmp    c0002d42 <create_name+0x22>
c0002da7:	40                   	inc    eax
c0002da8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002db0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002db3:	83 fa 2f             	cmp    edx,0x2f
c0002db6:	74 ef                	je     c0002da7 <create_name+0x87>
c0002db8:	83 fa 5c             	cmp    edx,0x5c
c0002dbb:	74 ea                	je     c0002da7 <create_name+0x87>
c0002dbd:	31 db                	xor    ebx,ebx
c0002dbf:	eb 02                	jmp    c0002dc3 <create_name+0xa3>
c0002dc1:	b3 04                	mov    bl,0x4
c0002dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dc7:	89 07                	mov    DWORD PTR [edi],eax
c0002dc9:	85 f6                	test   esi,esi
c0002dcb:	74 16                	je     c0002de3 <create_name+0xc3>
c0002dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dd1:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002dd6:	83 f8 20             	cmp    eax,0x20
c0002dd9:	74 05                	je     c0002de0 <create_name+0xc0>
c0002ddb:	83 f8 2e             	cmp    eax,0x2e
c0002dde:	75 03                	jne    c0002de3 <create_name+0xc3>
c0002de0:	4e                   	dec    esi
c0002de1:	eb e6                	jmp    c0002dc9 <create_name+0xa9>
c0002de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de7:	31 ff                	xor    edi,edi
c0002de9:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002def:	85 f6                	test   esi,esi
c0002df1:	0f 84 5b ff ff ff    	je     c0002d52 <create_name+0x32>
c0002df7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dfb:	8d 57 01             	lea    edx,[edi+0x1]
c0002dfe:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e02:	83 f8 20             	cmp    eax,0x20
c0002e05:	75 04                	jne    c0002e0b <create_name+0xeb>
c0002e07:	89 d7                	mov    edi,edx
c0002e09:	eb ec                	jmp    c0002df7 <create_name+0xd7>
c0002e0b:	85 ff                	test   edi,edi
c0002e0d:	75 05                	jne    c0002e14 <create_name+0xf4>
c0002e0f:	83 f8 2e             	cmp    eax,0x2e
c0002e12:	75 08                	jne    c0002e1c <create_name+0xfc>
c0002e14:	83 cb 03             	or     ebx,0x3
c0002e17:	eb 03                	jmp    c0002e1c <create_name+0xfc>
c0002e19:	4e                   	dec    esi
c0002e1a:	74 0c                	je     c0002e28 <create_name+0x108>
c0002e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e20:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e26:	75 f1                	jne    c0002e19 <create_name+0xf9>
c0002e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e31:	83 c0 20             	add    eax,0x20
c0002e34:	ba 20 00 00 00       	mov    edx,0x20
c0002e39:	31 ed                	xor    ebp,ebp
c0002e3b:	e8 24 f3 ff ff       	call   c0002164 <mem_set>
c0002e40:	b9 08 00 00 00       	mov    ecx,0x8
c0002e45:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e4a:	8d 47 01             	lea    eax,[edi+0x1]
c0002e4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e55:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e59:	89 c7                	mov    edi,eax
c0002e5b:	85 c0                	test   eax,eax
c0002e5d:	0f 84 25 01 00 00    	je     c0002f88 <create_name+0x268>
c0002e63:	83 f8 20             	cmp    eax,0x20
c0002e66:	74 0f                	je     c0002e77 <create_name+0x157>
c0002e68:	83 f8 2e             	cmp    eax,0x2e
c0002e6b:	75 13                	jne    c0002e80 <create_name+0x160>
c0002e6d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e71:	0f 84 6a 01 00 00    	je     c0002fe1 <create_name+0x2c1>
c0002e77:	83 cb 03             	or     ebx,0x3
c0002e7a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002e7e:	eb ca                	jmp    c0002e4a <create_name+0x12a>
c0002e80:	39 cd                	cmp    ebp,ecx
c0002e82:	73 0b                	jae    c0002e8f <create_name+0x16f>
c0002e84:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e88:	75 3f                	jne    c0002ec9 <create_name+0x1a9>
c0002e8a:	e9 52 01 00 00       	jmp    c0002fe1 <create_name+0x2c1>
c0002e8f:	83 f9 0b             	cmp    ecx,0xb
c0002e92:	75 0d                	jne    c0002ea1 <create_name+0x181>
c0002e94:	83 cb 03             	or     ebx,0x3
c0002e97:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e9c:	e9 e7 00 00 00       	jmp    c0002f88 <create_name+0x268>
c0002ea1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002ea5:	74 0d                	je     c0002eb4 <create_name+0x194>
c0002ea7:	83 cb 03             	or     ebx,0x3
c0002eaa:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002eae:	0f 87 d4 00 00 00    	ja     c0002f88 <create_name+0x268>
c0002eb4:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002eb9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002ebd:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ec2:	bd 08 00 00 00       	mov    ebp,0x8
c0002ec7:	eb b1                	jmp    c0002e7a <create_name+0x15a>
c0002ec9:	83 f8 7f             	cmp    eax,0x7f
c0002ecc:	76 66                	jbe    c0002f34 <create_name+0x214>
c0002ece:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ed2:	89 d9                	mov    ecx,ebx
c0002ed4:	83 c9 02             	or     ecx,0x2
c0002ed7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002edb:	52                   	push   edx
c0002edc:	52                   	push   edx
c0002edd:	68 b5 01 00 00       	push   0x1b5
c0002ee2:	50                   	push   eax
c0002ee3:	e8 b4 30 00 00       	call   c0005f9c <ff_uni2oem>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	89 c7                	mov    edi,eax
c0002eed:	a8 80                	test   al,0x80
c0002eef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ef3:	74 0c                	je     c0002f01 <create_name+0x1e1>
c0002ef5:	83 e7 7f             	and    edi,0x7f
c0002ef8:	0f b6 bf 40 fc 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd03c0]
c0002eff:	eb 2a                	jmp    c0002f2b <create_name+0x20b>
c0002f01:	0f b7 c0             	movzx  eax,ax
c0002f04:	3d ff 00 00 00       	cmp    eax,0xff
c0002f09:	76 20                	jbe    c0002f2b <create_name+0x20b>
c0002f0b:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002f0e:	39 ea                	cmp    edx,ebp
c0002f10:	77 0a                	ja     c0002f1c <create_name+0x1fc>
c0002f12:	83 cb 03             	or     ebx,0x3
c0002f15:	89 cd                	mov    ebp,ecx
c0002f17:	e9 5e ff ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002f20:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002f24:	45                   	inc    ebp
c0002f25:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f29:	eb 4d                	jmp    c0002f78 <create_name+0x258>
c0002f2b:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f2f:	66 85 ff             	test   di,di
c0002f32:	74 19                	je     c0002f4d <create_name+0x22d>
c0002f34:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f38:	0f b7 d7             	movzx  edx,di
c0002f3b:	b8 87 fb 02 c0       	mov    eax,0xc002fb87
c0002f40:	e8 4d f2 ff ff       	call   c0002192 <chk_chr>
c0002f45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f49:	85 c0                	test   eax,eax
c0002f4b:	74 0a                	je     c0002f57 <create_name+0x237>
c0002f4d:	83 cb 03             	or     ebx,0x3
c0002f50:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f55:	eb 21                	jmp    c0002f78 <create_name+0x258>
c0002f57:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f5a:	66 83 f8 19          	cmp    ax,0x19
c0002f5e:	77 07                	ja     c0002f67 <create_name+0x247>
c0002f60:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002f65:	eb 11                	jmp    c0002f78 <create_name+0x258>
c0002f67:	8d 47 9f             	lea    eax,[edi-0x61]
c0002f6a:	66 83 f8 19          	cmp    ax,0x19
c0002f6e:	77 08                	ja     c0002f78 <create_name+0x258>
c0002f70:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002f75:	83 ef 20             	sub    edi,0x20
c0002f78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002f7c:	89 f8                	mov    eax,edi
c0002f7e:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002f82:	45                   	inc    ebp
c0002f83:	e9 f2 fe ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f8c:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002f90:	75 04                	jne    c0002f96 <create_name+0x276>
c0002f92:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002f96:	83 f9 08             	cmp    ecx,0x8
c0002f99:	75 05                	jne    c0002fa0 <create_name+0x280>
c0002f9b:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fa4:	83 e0 0c             	and    eax,0xc
c0002fa7:	83 f8 0c             	cmp    eax,0xc
c0002faa:	74 0c                	je     c0002fb8 <create_name+0x298>
c0002fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fb0:	83 e0 03             	and    eax,0x3
c0002fb3:	83 f8 03             	cmp    eax,0x3
c0002fb6:	75 05                	jne    c0002fbd <create_name+0x29d>
c0002fb8:	83 cb 02             	or     ebx,0x2
c0002fbb:	eb 19                	jmp    c0002fd6 <create_name+0x2b6>
c0002fbd:	f6 c3 02             	test   bl,0x2
c0002fc0:	75 14                	jne    c0002fd6 <create_name+0x2b6>
c0002fc2:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002fc7:	74 03                	je     c0002fcc <create_name+0x2ac>
c0002fc9:	83 cb 10             	or     ebx,0x10
c0002fcc:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002fd1:	74 03                	je     c0002fd6 <create_name+0x2b6>
c0002fd3:	83 cb 08             	or     ebx,0x8
c0002fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002fda:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002fdd:	31 c0                	xor    eax,eax
c0002fdf:	eb 0e                	jmp    c0002fef <create_name+0x2cf>
c0002fe1:	83 f9 0b             	cmp    ecx,0xb
c0002fe4:	0f 85 ca fe ff ff    	jne    c0002eb4 <create_name+0x194>
c0002fea:	e9 a5 fe ff ff       	jmp    c0002e94 <create_name+0x174>
c0002fef:	83 c4 3c             	add    esp,0x3c
c0002ff2:	5b                   	pop    ebx
c0002ff3:	5e                   	pop    esi
c0002ff4:	5f                   	pop    edi
c0002ff5:	5d                   	pop    ebp
c0002ff6:	c3                   	ret    

c0002ff7 <cmp_lfn>:
c0002ff7:	55                   	push   ebp
c0002ff8:	57                   	push   edi
c0002ff9:	89 d7                	mov    edi,edx
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003004:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003007:	e8 17 f1 ff ff       	call   c0002123 <ld_word>
c000300c:	66 85 c0             	test   ax,ax
c000300f:	74 07                	je     c0003018 <cmp_lfn+0x21>
c0003011:	31 c0                	xor    eax,eax
c0003013:	e9 a1 00 00 00       	jmp    c00030b9 <cmp_lfn+0xc2>
c0003018:	8a 1f                	mov    bl,BYTE PTR [edi]
c000301a:	bd 01 00 00 00       	mov    ebp,0x1
c000301f:	83 e3 3f             	and    ebx,0x3f
c0003022:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000302a:	4b                   	dec    ebx
c000302b:	6b db 0d             	imul   ebx,ebx,0xd
c000302e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003032:	0f b6 80 c0 fc 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0340]
c0003039:	01 f8                	add    eax,edi
c000303b:	e8 e3 f0 ff ff       	call   c0002123 <ld_word>
c0003040:	66 85 ed             	test   bp,bp
c0003043:	89 c6                	mov    esi,eax
c0003045:	74 3c                	je     c0003083 <cmp_lfn+0x8c>
c0003047:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000304d:	77 c2                	ja     c0003011 <cmp_lfn+0x1a>
c000304f:	83 ec 0c             	sub    esp,0xc
c0003052:	0f b7 c0             	movzx  eax,ax
c0003055:	50                   	push   eax
c0003056:	e8 59 30 00 00       	call   c00060b4 <ff_wtoupper>
c000305b:	89 c5                	mov    ebp,eax
c000305d:	8d 43 01             	lea    eax,[ebx+0x1]
c0003060:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003068:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000306c:	89 04 24             	mov    DWORD PTR [esp],eax
c000306f:	e8 40 30 00 00       	call   c00060b4 <ff_wtoupper>
c0003074:	83 c4 10             	add    esp,0x10
c0003077:	39 c5                	cmp    ebp,eax
c0003079:	75 96                	jne    c0003011 <cmp_lfn+0x1a>
c000307b:	89 f5                	mov    ebp,esi
c000307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003081:	eb 0b                	jmp    c000308e <cmp_lfn+0x97>
c0003083:	0f b7 c8             	movzx  ecx,ax
c0003086:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c000308c:	75 83                	jne    c0003011 <cmp_lfn+0x1a>
c000308e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003092:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003097:	75 95                	jne    c000302e <cmp_lfn+0x37>
c0003099:	f6 07 40             	test   BYTE PTR [edi],0x40
c000309c:	74 16                	je     c00030b4 <cmp_lfn+0xbd>
c000309e:	66 85 ed             	test   bp,bp
c00030a1:	74 11                	je     c00030b4 <cmp_lfn+0xbd>
c00030a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030a7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030ac:	0f 94 c0             	sete   al
c00030af:	0f b6 c0             	movzx  eax,al
c00030b2:	eb 05                	jmp    c00030b9 <cmp_lfn+0xc2>
c00030b4:	b8 01 00 00 00       	mov    eax,0x1
c00030b9:	83 c4 1c             	add    esp,0x1c
c00030bc:	5b                   	pop    ebx
c00030bd:	5e                   	pop    esi
c00030be:	5f                   	pop    edi
c00030bf:	5d                   	pop    ebp
c00030c0:	c3                   	ret    

c00030c1 <sync_fs>:
c00030c1:	56                   	push   esi
c00030c2:	53                   	push   ebx
c00030c3:	53                   	push   ebx
c00030c4:	89 c3                	mov    ebx,eax
c00030c6:	e8 5c f5 ff ff       	call   c0002627 <sync_window>
c00030cb:	85 c0                	test   eax,eax
c00030cd:	0f 85 9a 00 00 00    	jne    c000316d <sync_fs+0xac>
c00030d3:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00030d6:	75 7b                	jne    c0003153 <sync_fs+0x92>
c00030d8:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00030dc:	75 75                	jne    c0003153 <sync_fs+0x92>
c00030de:	b9 00 02 00 00       	mov    ecx,0x200
c00030e3:	8d 73 34             	lea    esi,[ebx+0x34]
c00030e6:	31 d2                	xor    edx,edx
c00030e8:	89 f0                	mov    eax,esi
c00030ea:	e8 75 f0 ff ff       	call   c0002164 <mem_set>
c00030ef:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00030f5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030fa:	e8 49 f0 ff ff       	call   c0002148 <st_word>
c00030ff:	ba 52 52 61 41       	mov    edx,0x41615252
c0003104:	89 f0                	mov    eax,esi
c0003106:	e8 41 f0 ff ff       	call   c000214c <st_dword>
c000310b:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0003111:	ba 72 72 41 61       	mov    edx,0x61417272
c0003116:	e8 31 f0 ff ff       	call   c000214c <st_dword>
c000311b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000311e:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003124:	e8 23 f0 ff ff       	call   c000214c <st_dword>
c0003129:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000312c:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0003132:	e8 15 f0 ff ff       	call   c000214c <st_dword>
c0003137:	6a 01                	push   0x1
c0003139:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000313c:	40                   	inc    eax
c000313d:	50                   	push   eax
c000313e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003141:	56                   	push   esi
c0003142:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003146:	50                   	push   eax
c0003147:	e8 a2 ef ff ff       	call   c00020ee <disk_write>
c000314c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0003150:	83 c4 10             	add    esp,0x10
c0003153:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003157:	51                   	push   ecx
c0003158:	6a 00                	push   0x0
c000315a:	6a 00                	push   0x0
c000315c:	50                   	push   eax
c000315d:	e8 a2 ef ff ff       	call   c0002104 <disk_ioctl>
c0003162:	83 c4 10             	add    esp,0x10
c0003165:	85 c0                	test   eax,eax
c0003167:	0f 95 c0             	setne  al
c000316a:	0f b6 c0             	movzx  eax,al
c000316d:	5a                   	pop    edx
c000316e:	5b                   	pop    ebx
c000316f:	5e                   	pop    esi
c0003170:	c3                   	ret    

c0003171 <create_partition>:
c0003171:	55                   	push   ebp
c0003172:	0f b6 c0             	movzx  eax,al
c0003175:	57                   	push   edi
c0003176:	56                   	push   esi
c0003177:	53                   	push   ebx
c0003178:	83 ec 40             	sub    esp,0x40
c000317b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000317f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003183:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003187:	8d 44 24 30          	lea    eax,[esp+0x30]
c000318b:	50                   	push   eax
c000318c:	6a 01                	push   0x1
c000318e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003192:	e8 6d ef ff ff       	call   c0002104 <disk_ioctl>
c0003197:	83 c4 10             	add    esp,0x10
c000319a:	85 c0                	test   eax,eax
c000319c:	0f 85 6a 01 00 00    	jne    c000330c <create_partition+0x19b>
c00031a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00031a6:	b9 05 00 00 00       	mov    ecx,0x5
c00031ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00031af:	be 08 00 00 00       	mov    esi,0x8
c00031b4:	89 f0                	mov    eax,esi
c00031b6:	31 d2                	xor    edx,edx
c00031b8:	0f b6 d8             	movzx  ebx,al
c00031bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031bf:	f7 f3                	div    ebx
c00031c1:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031c6:	76 0a                	jbe    c00031d2 <create_partition+0x61>
c00031c8:	d1 e6                	shl    esi,1
c00031ca:	49                   	dec    ecx
c00031cb:	75 e7                	jne    c00031b4 <create_partition+0x43>
c00031cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00031d2:	b9 00 02 00 00       	mov    ecx,0x200
c00031d7:	31 d2                	xor    edx,edx
c00031d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031dd:	e8 82 ef ff ff       	call   c0002164 <mem_set>
c00031e2:	b9 64 00 00 00       	mov    ecx,0x64
c00031e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031eb:	31 d2                	xor    edx,edx
c00031ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031f5:	f7 f1                	div    ecx
c00031f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00031fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003200:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003204:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000320a:	89 f0                	mov    eax,esi
c000320c:	0f b6 c0             	movzx  eax,al
c000320f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003213:	85 c9                	test   ecx,ecx
c0003215:	75 34                	jne    c000324b <create_partition+0xda>
c0003217:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000321b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003220:	05 fe 01 00 00       	add    eax,0x1fe
c0003225:	e8 1e ef ff ff       	call   c0002148 <st_word>
c000322a:	6a 01                	push   0x1
c000322c:	6a 00                	push   0x0
c000322e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003236:	e8 b3 ee ff ff       	call   c00020ee <disk_write>
c000323b:	83 c4 10             	add    esp,0x10
c000323e:	85 c0                	test   eax,eax
c0003240:	0f 95 c0             	setne  al
c0003243:	0f b6 c0             	movzx  eax,al
c0003246:	e9 c6 00 00 00       	jmp    c0003311 <create_partition+0x1a0>
c000324b:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000324f:	76 c6                	jbe    c0003217 <create_partition+0xa6>
c0003251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003255:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003259:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c000325c:	83 fe 64             	cmp    esi,0x64
c000325f:	77 0d                	ja     c000326e <create_partition+0xfd>
c0003261:	74 07                	je     c000326a <create_partition+0xf9>
c0003263:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003268:	eb 04                	jmp    c000326e <create_partition+0xfd>
c000326a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000326e:	31 c0                	xor    eax,eax
c0003270:	89 f2                	mov    edx,esi
c0003272:	01 ca                	add    edx,ecx
c0003274:	0f 92 c0             	setb   al
c0003277:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c000327b:	77 04                	ja     c0003281 <create_partition+0x110>
c000327d:	85 c0                	test   eax,eax
c000327f:	74 08                	je     c0003289 <create_partition+0x118>
c0003281:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003285:	29 ce                	sub    esi,ecx
c0003287:	eb 04                	jmp    c000328d <create_partition+0x11c>
c0003289:	85 f6                	test   esi,esi
c000328b:	74 8a                	je     c0003217 <create_partition+0xa6>
c000328d:	89 ca                	mov    edx,ecx
c000328f:	89 d8                	mov    eax,ebx
c0003291:	bf 3f 00 00 00       	mov    edi,0x3f
c0003296:	e8 b1 ee ff ff       	call   c000214c <st_dword>
c000329b:	8d 43 04             	lea    eax,[ebx+0x4]
c000329e:	89 f2                	mov    edx,esi
c00032a0:	83 c3 10             	add    ebx,0x10
c00032a3:	e8 a4 ee ff ff       	call   c000214c <st_dword>
c00032a8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032ac:	31 d2                	xor    edx,edx
c00032ae:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b5:	89 c8                	mov    eax,ecx
c00032b7:	01 f1                	add    ecx,esi
c00032b9:	f7 f7                	div    edi
c00032bb:	89 d5                	mov    ebp,edx
c00032bd:	31 d2                	xor    edx,edx
c00032bf:	45                   	inc    ebp
c00032c0:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032ca:	89 c2                	mov    edx,eax
c00032cc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032cf:	c1 ea 02             	shr    edx,0x2
c00032d2:	83 e2 c0             	and    edx,0xffffffc0
c00032d5:	09 ea                	or     edx,ebp
c00032d7:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032da:	31 d2                	xor    edx,edx
c00032dc:	f7 f7                	div    edi
c00032de:	89 d6                	mov    esi,edx
c00032e0:	31 d2                	xor    edx,edx
c00032e2:	46                   	inc    esi
c00032e3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032e7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ea:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032ed:	89 c7                	mov    edi,eax
c00032ef:	c1 ef 02             	shr    edi,0x2
c00032f2:	83 e7 c0             	and    edi,0xffffffc0
c00032f5:	09 fe                	or     esi,edi
c00032f7:	89 f2                	mov    edx,esi
c00032f9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00032fc:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003301:	0f 85 0c ff ff ff    	jne    c0003213 <create_partition+0xa2>
c0003307:	e9 0b ff ff ff       	jmp    c0003217 <create_partition+0xa6>
c000330c:	b8 01 00 00 00       	mov    eax,0x1
c0003311:	83 c4 3c             	add    esp,0x3c
c0003314:	5b                   	pop    ebx
c0003315:	5e                   	pop    esi
c0003316:	5f                   	pop    edi
c0003317:	5d                   	pop    ebp
c0003318:	c3                   	ret    

c0003319 <get_fileinfo>:
c0003319:	55                   	push   ebp
c000331a:	57                   	push   edi
c000331b:	56                   	push   esi
c000331c:	53                   	push   ebx
c000331d:	83 ec 1c             	sub    esp,0x1c
c0003320:	8b 30                	mov    esi,DWORD PTR [eax]
c0003322:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003326:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000332a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000332e:	0f 84 d3 01 00 00    	je     c0003507 <get_fileinfo+0x1ee>
c0003334:	89 d3                	mov    ebx,edx
c0003336:	89 c6                	mov    esi,eax
c0003338:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000333c:	74 72                	je     c00033b0 <get_fileinfo+0x97>
c000333e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003346:	31 ed                	xor    ebp,ebp
c0003348:	31 ff                	xor    edi,edi
c000334a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000334e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003352:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003355:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003359:	89 c2                	mov    edx,eax
c000335b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335f:	85 c0                	test   eax,eax
c0003361:	74 41                	je     c00033a4 <get_fileinfo+0x8b>
c0003363:	0f b7 c5             	movzx  eax,bp
c0003366:	85 c0                	test   eax,eax
c0003368:	75 0d                	jne    c0003377 <get_fileinfo+0x5e>
c000336a:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003370:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003375:	76 22                	jbe    c0003399 <get_fileinfo+0x80>
c0003377:	c1 e0 10             	shl    eax,0x10
c000337a:	b9 ff 00 00 00       	mov    ecx,0xff
c000337f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003383:	29 f9                	sub    ecx,edi
c0003385:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003389:	e8 f3 ee ff ff       	call   c0002281 <put_utf>
c000338e:	0f b6 c0             	movzx  eax,al
c0003391:	85 c0                	test   eax,eax
c0003393:	74 0d                	je     c00033a2 <get_fileinfo+0x89>
c0003395:	01 c7                	add    edi,eax
c0003397:	31 d2                	xor    edx,edx
c0003399:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000339e:	89 d5                	mov    ebp,edx
c00033a0:	eb a8                	jmp    c000334a <get_fileinfo+0x31>
c00033a2:	31 ff                	xor    edi,edi
c00033a4:	66 85 ed             	test   bp,bp
c00033a7:	74 02                	je     c00033ab <get_fileinfo+0x92>
c00033a9:	31 ff                	xor    edi,edi
c00033ab:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033b0:	31 ff                	xor    edi,edi
c00033b2:	31 c9                	xor    ecx,ecx
c00033b4:	83 f9 0a             	cmp    ecx,0xa
c00033b7:	0f 87 ac 00 00 00    	ja     c0003469 <get_fileinfo+0x150>
c00033bd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033c3:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033c7:	89 c2                	mov    edx,eax
c00033c9:	83 f8 20             	cmp    eax,0x20
c00033cc:	0f 84 90 00 00 00    	je     c0003462 <get_fileinfo+0x149>
c00033d2:	83 f8 05             	cmp    eax,0x5
c00033d5:	75 05                	jne    c00033dc <get_fileinfo+0xc3>
c00033d7:	ba e5 00 00 00       	mov    edx,0xe5
c00033dc:	83 ff 0b             	cmp    edi,0xb
c00033df:	77 0b                	ja     c00033ec <get_fileinfo+0xd3>
c00033e1:	83 fd 09             	cmp    ebp,0x9
c00033e4:	75 06                	jne    c00033ec <get_fileinfo+0xd3>
c00033e6:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00033eb:	47                   	inc    edi
c00033ec:	0f b7 c2             	movzx  eax,dx
c00033ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033f3:	e8 ab ed ff ff       	call   c00021a3 <dbc_1st>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	74 2f                	je     c000342b <get_fileinfo+0x112>
c00033fc:	83 fd 08             	cmp    ebp,0x8
c00033ff:	74 2a                	je     c000342b <get_fileinfo+0x112>
c0003401:	83 fd 0b             	cmp    ebp,0xb
c0003404:	74 25                	je     c000342b <get_fileinfo+0x112>
c0003406:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003409:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000340d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003411:	e8 90 ed ff ff       	call   c00021a6 <dbc_2nd>
c0003416:	85 c0                	test   eax,eax
c0003418:	74 11                	je     c000342b <get_fileinfo+0x112>
c000341a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000341e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0003423:	c1 e0 08             	shl    eax,0x8
c0003426:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003429:	09 c2                	or     edx,eax
c000342b:	0f b7 d2             	movzx  edx,dx
c000342e:	50                   	push   eax
c000342f:	50                   	push   eax
c0003430:	68 b5 01 00 00       	push   0x1b5
c0003435:	52                   	push   edx
c0003436:	e8 01 2c 00 00       	call   c000603c <ff_oem2uni>
c000343b:	83 c4 10             	add    esp,0x10
c000343e:	0f b7 c0             	movzx  eax,ax
c0003441:	85 c0                	test   eax,eax
c0003443:	75 04                	jne    c0003449 <get_fileinfo+0x130>
c0003445:	31 ff                	xor    edi,edi
c0003447:	eb 20                	jmp    c0003469 <get_fileinfo+0x150>
c0003449:	b9 0c 00 00 00       	mov    ecx,0xc
c000344e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003452:	29 f9                	sub    ecx,edi
c0003454:	e8 28 ee ff ff       	call   c0002281 <put_utf>
c0003459:	0f b6 c0             	movzx  eax,al
c000345c:	85 c0                	test   eax,eax
c000345e:	74 e5                	je     c0003445 <get_fileinfo+0x12c>
c0003460:	01 c7                	add    edi,eax
c0003462:	89 e9                	mov    ecx,ebp
c0003464:	e9 4b ff ff ff       	jmp    c00033b4 <get_fileinfo+0x9b>
c0003469:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000346e:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003472:	75 5f                	jne    c00034d3 <get_fileinfo+0x1ba>
c0003474:	85 ff                	test   edi,edi
c0003476:	75 0b                	jne    c0003483 <get_fileinfo+0x16a>
c0003478:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000347c:	ba 01 00 00 00       	mov    edx,0x1
c0003481:	eb 3e                	jmp    c00034c1 <get_fileinfo+0x1a8>
c0003483:	bf 08 00 00 00       	mov    edi,0x8
c0003488:	31 d2                	xor    edx,edx
c000348a:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003490:	84 c0                	test   al,al
c0003492:	74 2d                	je     c00034c1 <get_fileinfo+0x1a8>
c0003494:	66 83 f8 2e          	cmp    ax,0x2e
c0003498:	74 1b                	je     c00034b5 <get_fileinfo+0x19c>
c000349a:	8d 48 bf             	lea    ecx,[eax-0x41]
c000349d:	66 83 f9 19          	cmp    cx,0x19
c00034a1:	77 17                	ja     c00034ba <get_fileinfo+0x1a1>
c00034a3:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034a6:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034a9:	21 f9                	and    ecx,edi
c00034ab:	80 e1 18             	and    cl,0x18
c00034ae:	74 0a                	je     c00034ba <get_fileinfo+0x1a1>
c00034b0:	83 c0 20             	add    eax,0x20
c00034b3:	eb 05                	jmp    c00034ba <get_fileinfo+0x1a1>
c00034b5:	bf 10 00 00 00       	mov    edi,0x10
c00034ba:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034be:	42                   	inc    edx
c00034bf:	eb c9                	jmp    c000348a <get_fileinfo+0x171>
c00034c1:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034c9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00034cd:	75 04                	jne    c00034d3 <get_fileinfo+0x1ba>
c00034cf:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00034d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034d6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00034d9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00034dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034df:	83 c0 1c             	add    eax,0x1c
c00034e2:	e8 49 ec ff ff       	call   c0002130 <ld_dword>
c00034e7:	89 03                	mov    DWORD PTR [ebx],eax
c00034e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034ec:	83 c0 16             	add    eax,0x16
c00034ef:	e8 2f ec ff ff       	call   c0002123 <ld_word>
c00034f4:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00034f8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fb:	83 c0 18             	add    eax,0x18
c00034fe:	e8 20 ec ff ff       	call   c0002123 <ld_word>
c0003503:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003507:	83 c4 1c             	add    esp,0x1c
c000350a:	5b                   	pop    ebx
c000350b:	5e                   	pop    esi
c000350c:	5f                   	pop    edi
c000350d:	5d                   	pop    ebp
c000350e:	c3                   	ret    

c000350f <ld_clust.isra.0>:
c000350f:	56                   	push   esi
c0003510:	89 c6                	mov    esi,eax
c0003512:	53                   	push   ebx
c0003513:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003516:	89 d3                	mov    ebx,edx
c0003518:	e8 06 ec ff ff       	call   c0002123 <ld_word>
c000351d:	0f b7 c8             	movzx  ecx,ax
c0003520:	89 f0                	mov    eax,esi
c0003522:	3c 03                	cmp    al,0x3
c0003524:	75 0d                	jne    c0003533 <ld_clust.isra.0+0x24>
c0003526:	8d 43 14             	lea    eax,[ebx+0x14]
c0003529:	e8 f5 eb ff ff       	call   c0002123 <ld_word>
c000352e:	c1 e0 10             	shl    eax,0x10
c0003531:	09 c1                	or     ecx,eax
c0003533:	89 c8                	mov    eax,ecx
c0003535:	5b                   	pop    ebx
c0003536:	5e                   	pop    esi
c0003537:	c3                   	ret    

c0003538 <st_clust.isra.1>:
c0003538:	56                   	push   esi
c0003539:	89 c6                	mov    esi,eax
c000353b:	53                   	push   ebx
c000353c:	89 d3                	mov    ebx,edx
c000353e:	0f b7 d1             	movzx  edx,cx
c0003541:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003544:	e8 ff eb ff ff       	call   c0002148 <st_word>
c0003549:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000354c:	75 0f                	jne    c000355d <st_clust.isra.1+0x25>
c000354e:	c1 e9 10             	shr    ecx,0x10
c0003551:	8d 43 14             	lea    eax,[ebx+0x14]
c0003554:	89 ca                	mov    edx,ecx
c0003556:	5b                   	pop    ebx
c0003557:	5e                   	pop    esi
c0003558:	e9 eb eb ff ff       	jmp    c0002148 <st_word>
c000355d:	5b                   	pop    ebx
c000355e:	5e                   	pop    esi
c000355f:	c3                   	ret    

c0003560 <get_fat.isra.2>:
c0003560:	b9 01 00 00 00       	mov    ecx,0x1
c0003565:	83 fa 01             	cmp    edx,0x1
c0003568:	0f 86 f3 00 00 00    	jbe    c0003661 <get_fat.isra.2+0x101>
c000356e:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003571:	0f 83 ea 00 00 00    	jae    c0003661 <get_fat.isra.2+0x101>
c0003577:	55                   	push   ebp
c0003578:	57                   	push   edi
c0003579:	89 c7                	mov    edi,eax
c000357b:	56                   	push   esi
c000357c:	89 d6                	mov    esi,edx
c000357e:	53                   	push   ebx
c000357f:	83 ec 0c             	sub    esp,0xc
c0003582:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003585:	83 f8 02             	cmp    eax,0x2
c0003588:	74 78                	je     c0003602 <get_fat.isra.2+0xa2>
c000358a:	83 f8 03             	cmp    eax,0x3
c000358d:	0f 84 96 00 00 00    	je     c0003629 <get_fat.isra.2+0xc9>
c0003593:	48                   	dec    eax
c0003594:	0f 85 bd 00 00 00    	jne    c0003657 <get_fat.isra.2+0xf7>
c000359a:	89 d3                	mov    ebx,edx
c000359c:	89 f8                	mov    eax,edi
c000359e:	d1 eb                	shr    ebx,1
c00035a0:	01 d3                	add    ebx,edx
c00035a2:	89 da                	mov    edx,ebx
c00035a4:	c1 ea 09             	shr    edx,0x9
c00035a7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035aa:	e8 db f0 ff ff       	call   c000268a <move_window>
c00035af:	85 c0                	test   eax,eax
c00035b1:	74 08                	je     c00035bb <get_fat.isra.2+0x5b>
c00035b3:	83 c9 ff             	or     ecx,0xffffffff
c00035b6:	e9 9c 00 00 00       	jmp    c0003657 <get_fat.isra.2+0xf7>
c00035bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00035be:	89 f8                	mov    eax,edi
c00035c0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035c6:	89 ea                	mov    edx,ebp
c00035c8:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c00035cc:	c1 ea 09             	shr    edx,0x9
c00035cf:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035d2:	e8 b3 f0 ff ff       	call   c000268a <move_window>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 d8                	jne    c00035b3 <get_fat.isra.2+0x53>
c00035db:	0f b6 c3             	movzx  eax,bl
c00035de:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00035e4:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00035e9:	c1 e3 08             	shl    ebx,0x8
c00035ec:	09 c3                	or     ebx,eax
c00035ee:	89 d9                	mov    ecx,ebx
c00035f0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00035f6:	83 e6 01             	and    esi,0x1
c00035f9:	74 5c                	je     c0003657 <get_fat.isra.2+0xf7>
c00035fb:	89 d9                	mov    ecx,ebx
c00035fd:	c1 e9 04             	shr    ecx,0x4
c0003600:	eb 55                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003602:	c1 ea 08             	shr    edx,0x8
c0003605:	89 f8                	mov    eax,edi
c0003607:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000360a:	e8 7b f0 ff ff       	call   c000268a <move_window>
c000360f:	85 c0                	test   eax,eax
c0003611:	75 a0                	jne    c00035b3 <get_fat.isra.2+0x53>
c0003613:	01 f6                	add    esi,esi
c0003615:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000361b:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000361f:	e8 ff ea ff ff       	call   c0002123 <ld_word>
c0003624:	0f b7 c8             	movzx  ecx,ax
c0003627:	eb 2e                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003629:	c1 ea 07             	shr    edx,0x7
c000362c:	89 f8                	mov    eax,edi
c000362e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003631:	e8 54 f0 ff ff       	call   c000268a <move_window>
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 75 ff ff ff    	jne    c00035b3 <get_fat.isra.2+0x53>
c000363e:	c1 e6 02             	shl    esi,0x2
c0003641:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003647:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000364b:	e8 e0 ea ff ff       	call   c0002130 <ld_dword>
c0003650:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003655:	89 c1                	mov    ecx,eax
c0003657:	83 c4 0c             	add    esp,0xc
c000365a:	89 c8                	mov    eax,ecx
c000365c:	5b                   	pop    ebx
c000365d:	5e                   	pop    esi
c000365e:	5f                   	pop    edi
c000365f:	5d                   	pop    ebp
c0003660:	c3                   	ret    
c0003661:	89 c8                	mov    eax,ecx
c0003663:	c3                   	ret    

c0003664 <dir_sdi>:
c0003664:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000366a:	0f 87 b6 00 00 00    	ja     c0003726 <dir_sdi+0xc2>
c0003670:	55                   	push   ebp
c0003671:	57                   	push   edi
c0003672:	56                   	push   esi
c0003673:	53                   	push   ebx
c0003674:	89 d3                	mov    ebx,edx
c0003676:	83 ec 1c             	sub    esp,0x1c
c0003679:	f6 c2 1f             	test   dl,0x1f
c000367c:	74 0a                	je     c0003688 <dir_sdi+0x24>
c000367e:	b8 02 00 00 00       	mov    eax,0x2
c0003683:	e9 96 00 00 00       	jmp    c000371e <dir_sdi+0xba>
c0003688:	89 c6                	mov    esi,eax
c000368a:	8b 38                	mov    edi,DWORD PTR [eax]
c000368c:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000368f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003692:	85 c9                	test   ecx,ecx
c0003694:	75 23                	jne    c00036b9 <dir_sdi+0x55>
c0003696:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003699:	76 07                	jbe    c00036a2 <dir_sdi+0x3e>
c000369b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000369e:	85 c0                	test   eax,eax
c00036a0:	75 15                	jne    c00036b7 <dir_sdi+0x53>
c00036a2:	89 da                	mov    edx,ebx
c00036a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00036a8:	c1 ea 05             	shr    edx,0x5
c00036ab:	39 c2                	cmp    edx,eax
c00036ad:	73 cf                	jae    c000367e <dir_sdi+0x1a>
c00036af:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c00036b2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036b5:	eb 3d                	jmp    c00036f4 <dir_sdi+0x90>
c00036b7:	89 c1                	mov    ecx,eax
c00036b9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00036bd:	c1 e5 09             	shl    ebp,0x9
c00036c0:	89 ca                	mov    edx,ecx
c00036c2:	39 eb                	cmp    ebx,ebp
c00036c4:	72 1c                	jb     c00036e2 <dir_sdi+0x7e>
c00036c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c8:	e8 93 fe ff ff       	call   c0003560 <get_fat.isra.2>
c00036cd:	89 c1                	mov    ecx,eax
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	74 45                	je     c0003719 <dir_sdi+0xb5>
c00036d4:	83 f8 01             	cmp    eax,0x1
c00036d7:	76 a5                	jbe    c000367e <dir_sdi+0x1a>
c00036d9:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00036dc:	76 a0                	jbe    c000367e <dir_sdi+0x1a>
c00036de:	29 eb                	sub    ebx,ebp
c00036e0:	eb de                	jmp    c00036c0 <dir_sdi+0x5c>
c00036e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036e6:	89 f8                	mov    eax,edi
c00036e8:	e8 8d ec ff ff       	call   c000237a <clst2sect>
c00036ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036f1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036f4:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00036f7:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00036fa:	85 d2                	test   edx,edx
c00036fc:	74 80                	je     c000367e <dir_sdi+0x1a>
c00036fe:	89 d8                	mov    eax,ebx
c0003700:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003706:	c1 e8 09             	shr    eax,0x9
c0003709:	01 d0                	add    eax,edx
c000370b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000370e:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0003712:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003715:	31 c0                	xor    eax,eax
c0003717:	eb 05                	jmp    c000371e <dir_sdi+0xba>
c0003719:	b8 01 00 00 00       	mov    eax,0x1
c000371e:	83 c4 1c             	add    esp,0x1c
c0003721:	5b                   	pop    ebx
c0003722:	5e                   	pop    esi
c0003723:	5f                   	pop    edi
c0003724:	5d                   	pop    ebp
c0003725:	c3                   	ret    
c0003726:	b8 02 00 00 00       	mov    eax,0x2
c000372b:	c3                   	ret    

c000372c <create_chain>:
c000372c:	55                   	push   ebp
c000372d:	89 c5                	mov    ebp,eax
c000372f:	57                   	push   edi
c0003730:	89 d7                	mov    edi,edx
c0003732:	56                   	push   esi
c0003733:	53                   	push   ebx
c0003734:	83 ec 1c             	sub    esp,0x1c
c0003737:	85 d2                	test   edx,edx
c0003739:	8b 30                	mov    esi,DWORD PTR [eax]
c000373b:	75 0e                	jne    c000374b <create_chain+0x1f>
c000373d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003740:	85 c9                	test   ecx,ecx
c0003742:	74 34                	je     c0003778 <create_chain+0x4c>
c0003744:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003747:	77 34                	ja     c000377d <create_chain+0x51>
c0003749:	eb 2d                	jmp    c0003778 <create_chain+0x4c>
c000374b:	89 f0                	mov    eax,esi
c000374d:	e8 0e fe ff ff       	call   c0003560 <get_fat.isra.2>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	83 f8 01             	cmp    eax,0x1
c0003757:	77 0a                	ja     c0003763 <create_chain+0x37>
c0003759:	bb 01 00 00 00       	mov    ebx,0x1
c000375e:	e9 fe 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003763:	83 f8 ff             	cmp    eax,0xffffffff
c0003766:	0f 84 f2 00 00 00    	je     c000385e <create_chain+0x132>
c000376c:	89 f9                	mov    ecx,edi
c000376e:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003771:	76 0a                	jbe    c000377d <create_chain+0x51>
c0003773:	e9 e9 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003778:	b9 01 00 00 00       	mov    ecx,0x1
c000377d:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003781:	75 07                	jne    c000378a <create_chain+0x5e>
c0003783:	31 db                	xor    ebx,ebx
c0003785:	e9 d7 00 00 00       	jmp    c0003861 <create_chain+0x135>
c000378a:	39 f9                	cmp    ecx,edi
c000378c:	75 46                	jne    c00037d4 <create_chain+0xa8>
c000378e:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003791:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003794:	77 05                	ja     c000379b <create_chain+0x6f>
c0003796:	bb 02 00 00 00       	mov    ebx,0x2
c000379b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000379f:	89 da                	mov    edx,ebx
c00037a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037a4:	e8 b7 fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037a9:	83 f8 01             	cmp    eax,0x1
c00037ac:	74 ab                	je     c0003759 <create_chain+0x2d>
c00037ae:	83 f8 ff             	cmp    eax,0xffffffff
c00037b1:	0f 84 a7 00 00 00    	je     c000385e <create_chain+0x132>
c00037b7:	85 c0                	test   eax,eax
c00037b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037bd:	74 11                	je     c00037d0 <create_chain+0xa4>
c00037bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00037c2:	83 f8 01             	cmp    eax,0x1
c00037c5:	76 0d                	jbe    c00037d4 <create_chain+0xa8>
c00037c7:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00037ca:	73 08                	jae    c00037d4 <create_chain+0xa8>
c00037cc:	89 c1                	mov    ecx,eax
c00037ce:	eb 04                	jmp    c00037d4 <create_chain+0xa8>
c00037d0:	85 db                	test   ebx,ebx
c00037d2:	75 3d                	jne    c0003811 <create_chain+0xe5>
c00037d4:	89 cb                	mov    ebx,ecx
c00037d6:	43                   	inc    ebx
c00037d7:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00037da:	77 0a                	ja     c00037e6 <create_chain+0xba>
c00037dc:	83 f9 01             	cmp    ecx,0x1
c00037df:	76 a2                	jbe    c0003783 <create_chain+0x57>
c00037e1:	bb 02 00 00 00       	mov    ebx,0x2
c00037e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037ea:	89 da                	mov    edx,ebx
c00037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037ef:	e8 6c fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037f4:	85 c0                	test   eax,eax
c00037f6:	74 19                	je     c0003811 <create_chain+0xe5>
c00037f8:	83 f8 01             	cmp    eax,0x1
c00037fb:	0f 84 58 ff ff ff    	je     c0003759 <create_chain+0x2d>
c0003801:	40                   	inc    eax
c0003802:	74 5a                	je     c000385e <create_chain+0x132>
c0003804:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003808:	39 cb                	cmp    ebx,ecx
c000380a:	75 ca                	jne    c00037d6 <create_chain+0xaa>
c000380c:	e9 72 ff ff ff       	jmp    c0003783 <create_chain+0x57>
c0003811:	83 c9 ff             	or     ecx,0xffffffff
c0003814:	89 da                	mov    edx,ebx
c0003816:	89 f0                	mov    eax,esi
c0003818:	e8 b1 f2 ff ff       	call   c0002ace <put_fat>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 36                	jne    c0003857 <create_chain+0x12b>
c0003821:	85 ff                	test   edi,edi
c0003823:	75 16                	jne    c000383b <create_chain+0x10f>
c0003825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003828:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000382b:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000382e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003831:	39 d0                	cmp    eax,edx
c0003833:	77 17                	ja     c000384c <create_chain+0x120>
c0003835:	48                   	dec    eax
c0003836:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003839:	eb 11                	jmp    c000384c <create_chain+0x120>
c000383b:	89 d9                	mov    ecx,ebx
c000383d:	89 fa                	mov    edx,edi
c000383f:	89 f0                	mov    eax,esi
c0003841:	e8 88 f2 ff ff       	call   c0002ace <put_fat>
c0003846:	85 c0                	test   eax,eax
c0003848:	74 db                	je     c0003825 <create_chain+0xf9>
c000384a:	eb 0b                	jmp    c0003857 <create_chain+0x12b>
c000384c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c000384f:	83 c8 01             	or     eax,0x1
c0003852:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003855:	eb 0a                	jmp    c0003861 <create_chain+0x135>
c0003857:	48                   	dec    eax
c0003858:	0f 85 fb fe ff ff    	jne    c0003759 <create_chain+0x2d>
c000385e:	83 cb ff             	or     ebx,0xffffffff
c0003861:	83 c4 1c             	add    esp,0x1c
c0003864:	89 d8                	mov    eax,ebx
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <remove_chain>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 d6                	mov    esi,edx
c0003870:	53                   	push   ebx
c0003871:	83 ec 0c             	sub    esp,0xc
c0003874:	83 fa 01             	cmp    edx,0x1
c0003877:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003879:	76 6a                	jbe    c00038e5 <remove_chain+0x7a>
c000387b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000387e:	76 65                	jbe    c00038e5 <remove_chain+0x7a>
c0003880:	89 c5                	mov    ebp,eax
c0003882:	89 ca                	mov    edx,ecx
c0003884:	85 c9                	test   ecx,ecx
c0003886:	74 0e                	je     c0003896 <remove_chain+0x2b>
c0003888:	83 c9 ff             	or     ecx,0xffffffff
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 3c f2 ff ff       	call   c0002ace <put_fat>
c0003892:	85 c0                	test   eax,eax
c0003894:	75 5b                	jne    c00038f1 <remove_chain+0x86>
c0003896:	89 f2                	mov    edx,esi
c0003898:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000389b:	e8 c0 fc ff ff       	call   c0003560 <get_fat.isra.2>
c00038a0:	89 c7                	mov    edi,eax
c00038a2:	85 c0                	test   eax,eax
c00038a4:	75 04                	jne    c00038aa <remove_chain+0x3f>
c00038a6:	31 c0                	xor    eax,eax
c00038a8:	eb 47                	jmp    c00038f1 <remove_chain+0x86>
c00038aa:	83 f8 01             	cmp    eax,0x1
c00038ad:	74 36                	je     c00038e5 <remove_chain+0x7a>
c00038af:	83 f8 ff             	cmp    eax,0xffffffff
c00038b2:	74 38                	je     c00038ec <remove_chain+0x81>
c00038b4:	31 c9                	xor    ecx,ecx
c00038b6:	89 f2                	mov    edx,esi
c00038b8:	89 d8                	mov    eax,ebx
c00038ba:	e8 0f f2 ff ff       	call   c0002ace <put_fat>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2e                	jne    c00038f1 <remove_chain+0x86>
c00038c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038cc:	39 c8                	cmp    eax,ecx
c00038ce:	73 0d                	jae    c00038dd <remove_chain+0x72>
c00038d0:	40                   	inc    eax
c00038d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00038d4:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00038d7:	83 c8 01             	or     eax,0x1
c00038da:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00038dd:	89 fe                	mov    esi,edi
c00038df:	39 fa                	cmp    edx,edi
c00038e1:	77 b3                	ja     c0003896 <remove_chain+0x2b>
c00038e3:	eb c1                	jmp    c00038a6 <remove_chain+0x3b>
c00038e5:	b8 02 00 00 00       	mov    eax,0x2
c00038ea:	eb 05                	jmp    c00038f1 <remove_chain+0x86>
c00038ec:	b8 01 00 00 00       	mov    eax,0x1
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <dir_next>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	56                   	push   esi
c00038fc:	53                   	push   ebx
c00038fd:	83 ec 1c             	sub    esp,0x1c
c0003900:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003903:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003905:	83 c7 20             	add    edi,0x20
c0003908:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000390e:	76 07                	jbe    c0003917 <dir_next+0x1e>
c0003910:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003917:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000391a:	b9 04 00 00 00       	mov    ecx,0x4
c000391f:	85 f6                	test   esi,esi
c0003921:	0f 84 cd 00 00 00    	je     c00039f4 <dir_next+0xfb>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	89 d1                	mov    ecx,edx
c000392b:	89 f8                	mov    eax,edi
c000392d:	25 ff 01 00 00       	and    eax,0x1ff
c0003932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003936:	0f 85 a8 00 00 00    	jne    c00039e4 <dir_next+0xeb>
c000393c:	46                   	inc    esi
c000393d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003940:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003943:	85 d2                	test   edx,edx
c0003945:	75 22                	jne    c0003969 <dir_next+0x70>
c0003947:	89 fa                	mov    edx,edi
c0003949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000394d:	c1 ea 05             	shr    edx,0x5
c0003950:	39 c2                	cmp    edx,eax
c0003952:	0f 82 8c 00 00 00    	jb     c00039e4 <dir_next+0xeb>
c0003958:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000395f:	b9 04 00 00 00       	mov    ecx,0x4
c0003964:	e9 8b 00 00 00       	jmp    c00039f4 <dir_next+0xfb>
c0003969:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000396d:	89 fe                	mov    esi,edi
c000396f:	48                   	dec    eax
c0003970:	c1 ee 09             	shr    esi,0x9
c0003973:	85 f0                	test   eax,esi
c0003975:	75 6d                	jne    c00039e4 <dir_next+0xeb>
c0003977:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000397b:	89 e8                	mov    eax,ebp
c000397d:	e8 de fb ff ff       	call   c0003560 <get_fat.isra.2>
c0003982:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003986:	89 c6                	mov    esi,eax
c0003988:	83 f8 01             	cmp    eax,0x1
c000398b:	77 07                	ja     c0003994 <dir_next+0x9b>
c000398d:	b9 02 00 00 00       	mov    ecx,0x2
c0003992:	eb 60                	jmp    c00039f4 <dir_next+0xfb>
c0003994:	83 f8 ff             	cmp    eax,0xffffffff
c0003997:	75 07                	jne    c00039a0 <dir_next+0xa7>
c0003999:	b9 01 00 00 00       	mov    ecx,0x1
c000399e:	eb 54                	jmp    c00039f4 <dir_next+0xfb>
c00039a0:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039a3:	77 30                	ja     c00039d5 <dir_next+0xdc>
c00039a5:	85 c9                	test   ecx,ecx
c00039a7:	74 af                	je     c0003958 <dir_next+0x5f>
c00039a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	e8 79 fd ff ff       	call   c000372c <create_chain>
c00039b3:	b9 07 00 00 00       	mov    ecx,0x7
c00039b8:	89 c6                	mov    esi,eax
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 36                	je     c00039f4 <dir_next+0xfb>
c00039be:	83 f8 01             	cmp    eax,0x1
c00039c1:	74 ca                	je     c000398d <dir_next+0x94>
c00039c3:	83 f8 ff             	cmp    eax,0xffffffff
c00039c6:	74 d1                	je     c0003999 <dir_next+0xa0>
c00039c8:	89 c2                	mov    edx,eax
c00039ca:	89 e8                	mov    eax,ebp
c00039cc:	e8 54 f2 ff ff       	call   c0002c25 <dir_clear>
c00039d1:	85 c0                	test   eax,eax
c00039d3:	75 c4                	jne    c0003999 <dir_next+0xa0>
c00039d5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00039d8:	89 f2                	mov    edx,esi
c00039da:	89 e8                	mov    eax,ebp
c00039dc:	e8 99 e9 ff ff       	call   c000237a <clst2sect>
c00039e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00039e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039e8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00039eb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00039ef:	31 c9                	xor    ecx,ecx
c00039f1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00039f4:	83 c4 1c             	add    esp,0x1c
c00039f7:	89 c8                	mov    eax,ecx
c00039f9:	5b                   	pop    ebx
c00039fa:	5e                   	pop    esi
c00039fb:	5f                   	pop    edi
c00039fc:	5d                   	pop    ebp
c00039fd:	c3                   	ret    

c00039fe <dir_alloc>:
c00039fe:	55                   	push   ebp
c00039ff:	89 c5                	mov    ebp,eax
c0003a01:	57                   	push   edi
c0003a02:	89 d7                	mov    edi,edx
c0003a04:	56                   	push   esi
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	53                   	push   ebx
c0003a08:	83 ec 0c             	sub    esp,0xc
c0003a0b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a0d:	e8 52 fc ff ff       	call   c0003664 <dir_sdi>
c0003a12:	85 c0                	test   eax,eax
c0003a14:	75 3b                	jne    c0003a51 <dir_alloc+0x53>
c0003a16:	31 db                	xor    ebx,ebx
c0003a18:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a1b:	89 f0                	mov    eax,esi
c0003a1d:	e8 68 ec ff ff       	call   c000268a <move_window>
c0003a22:	85 c0                	test   eax,eax
c0003a24:	75 2b                	jne    c0003a51 <dir_alloc+0x53>
c0003a26:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a2c:	85 d2                	test   edx,edx
c0003a2e:	74 08                	je     c0003a38 <dir_alloc+0x3a>
c0003a30:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a36:	75 07                	jne    c0003a3f <dir_alloc+0x41>
c0003a38:	43                   	inc    ebx
c0003a39:	39 fb                	cmp    ebx,edi
c0003a3b:	75 04                	jne    c0003a41 <dir_alloc+0x43>
c0003a3d:	eb 1c                	jmp    c0003a5b <dir_alloc+0x5d>
c0003a3f:	31 db                	xor    ebx,ebx
c0003a41:	ba 01 00 00 00       	mov    edx,0x1
c0003a46:	89 e8                	mov    eax,ebp
c0003a48:	e8 ac fe ff ff       	call   c00038f9 <dir_next>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	74 c7                	je     c0003a18 <dir_alloc+0x1a>
c0003a51:	83 f8 04             	cmp    eax,0x4
c0003a54:	75 05                	jne    c0003a5b <dir_alloc+0x5d>
c0003a56:	b8 07 00 00 00       	mov    eax,0x7
c0003a5b:	83 c4 0c             	add    esp,0xc
c0003a5e:	5b                   	pop    ebx
c0003a5f:	5e                   	pop    esi
c0003a60:	5f                   	pop    edi
c0003a61:	5d                   	pop    ebp
c0003a62:	c3                   	ret    

c0003a63 <dir_read>:
c0003a63:	55                   	push   ebp
c0003a64:	57                   	push   edi
c0003a65:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a6a:	56                   	push   esi
c0003a6b:	be 04 00 00 00       	mov    esi,0x4
c0003a70:	53                   	push   ebx
c0003a71:	89 c3                	mov    ebx,eax
c0003a73:	83 ec 1c             	sub    esp,0x1c
c0003a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a7a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003a7c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a81:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a84:	85 d2                	test   edx,edx
c0003a86:	0f 84 e3 00 00 00    	je     c0003b6f <dir_read+0x10c>
c0003a8c:	89 e8                	mov    eax,ebp
c0003a8e:	e8 f7 eb ff ff       	call   c000268a <move_window>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 dd 00 00 00    	jne    c0003b7a <dir_read+0x117>
c0003a9d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa0:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003aa3:	88 04 24             	mov    BYTE PTR [esp],al
c0003aa6:	85 c0                	test   eax,eax
c0003aa8:	0f 84 c7 00 00 00    	je     c0003b75 <dir_read+0x112>
c0003aae:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ab1:	83 e1 3f             	and    ecx,0x3f
c0003ab4:	83 f8 2e             	cmp    eax,0x2e
c0003ab7:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aba:	0f 84 95 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003ac0:	3d e5 00 00 00       	cmp    eax,0xe5
c0003ac5:	0f 84 8a 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003acb:	0f b6 c9             	movzx  ecx,cl
c0003ace:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003ad2:	83 e1 df             	and    ecx,0xffffffdf
c0003ad5:	83 f9 08             	cmp    ecx,0x8
c0003ad8:	0f 94 c1             	sete   cl
c0003adb:	0f b6 c9             	movzx  ecx,cl
c0003ade:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003ae2:	75 71                	jne    c0003b55 <dir_read+0xf2>
c0003ae4:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003ae9:	75 4a                	jne    c0003b35 <dir_read+0xd2>
c0003aeb:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003aef:	74 16                	je     c0003b07 <dir_read+0xa4>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003afb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003aff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b02:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b05:	eb 0e                	jmp    c0003b15 <dir_read+0xb2>
c0003b07:	89 f9                	mov    ecx,edi
c0003b09:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b0e:	0f b6 c9             	movzx  ecx,cl
c0003b11:	39 c1                	cmp    ecx,eax
c0003b13:	75 45                	jne    c0003b5a <dir_read+0xf7>
c0003b15:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b19:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b1e:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b21:	75 37                	jne    c0003b5a <dir_read+0xf7>
c0003b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b26:	e8 6c e8 ff ff       	call   c0002397 <pick_lfn>
c0003b2b:	85 c0                	test   eax,eax
c0003b2d:	74 2b                	je     c0003b5a <dir_read+0xf7>
c0003b2f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b32:	4f                   	dec    edi
c0003b33:	eb 25                	jmp    c0003b5a <dir_read+0xf7>
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	84 c0                	test   al,al
c0003b39:	75 11                	jne    c0003b4c <dir_read+0xe9>
c0003b3b:	89 d0                	mov    eax,edx
c0003b3d:	e8 32 ea ff ff       	call   c0002574 <sum_sfn>
c0003b42:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b46:	75 04                	jne    c0003b4c <dir_read+0xe9>
c0003b48:	31 f6                	xor    esi,esi
c0003b4a:	eb 35                	jmp    c0003b81 <dir_read+0x11e>
c0003b4c:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b53:	eb 2c                	jmp    c0003b81 <dir_read+0x11e>
c0003b55:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b5a:	31 d2                	xor    edx,edx
c0003b5c:	89 d8                	mov    eax,ebx
c0003b5e:	e8 96 fd ff ff       	call   c00038f9 <dir_next>
c0003b63:	89 c6                	mov    esi,eax
c0003b65:	85 c0                	test   eax,eax
c0003b67:	0f 84 14 ff ff ff    	je     c0003a81 <dir_read+0x1e>
c0003b6d:	eb 0b                	jmp    c0003b7a <dir_read+0x117>
c0003b6f:	85 f6                	test   esi,esi
c0003b71:	74 d5                	je     c0003b48 <dir_read+0xe5>
c0003b73:	eb 05                	jmp    c0003b7a <dir_read+0x117>
c0003b75:	be 04 00 00 00       	mov    esi,0x4
c0003b7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003b81:	83 c4 1c             	add    esp,0x1c
c0003b84:	89 f0                	mov    eax,esi
c0003b86:	5b                   	pop    ebx
c0003b87:	5e                   	pop    esi
c0003b88:	5f                   	pop    edi
c0003b89:	5d                   	pop    ebp
c0003b8a:	c3                   	ret    

c0003b8b <dir_remove>:
c0003b8b:	57                   	push   edi
c0003b8c:	56                   	push   esi
c0003b8d:	53                   	push   ebx
c0003b8e:	89 c3                	mov    ebx,eax
c0003b90:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003b93:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b95:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003b98:	83 fa ff             	cmp    edx,0xffffffff
c0003b9b:	74 09                	je     c0003ba6 <dir_remove+0x1b>
c0003b9d:	e8 c2 fa ff ff       	call   c0003664 <dir_sdi>
c0003ba2:	85 c0                	test   eax,eax
c0003ba4:	75 34                	jne    c0003bda <dir_remove+0x4f>
c0003ba6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ba9:	89 f0                	mov    eax,esi
c0003bab:	e8 da ea ff ff       	call   c000268a <move_window>
c0003bb0:	85 c0                	test   eax,eax
c0003bb2:	75 1c                	jne    c0003bd0 <dir_remove+0x45>
c0003bb4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bb7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003bba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bbe:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bc1:	73 17                	jae    c0003bda <dir_remove+0x4f>
c0003bc3:	31 d2                	xor    edx,edx
c0003bc5:	89 d8                	mov    eax,ebx
c0003bc7:	e8 2d fd ff ff       	call   c00038f9 <dir_next>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	74 d6                	je     c0003ba6 <dir_remove+0x1b>
c0003bd0:	83 f8 04             	cmp    eax,0x4
c0003bd3:	75 05                	jne    c0003bda <dir_remove+0x4f>
c0003bd5:	b8 02 00 00 00       	mov    eax,0x2
c0003bda:	5b                   	pop    ebx
c0003bdb:	5e                   	pop    esi
c0003bdc:	5f                   	pop    edi
c0003bdd:	c3                   	ret    

c0003bde <dir_find>:
c0003bde:	55                   	push   ebp
c0003bdf:	31 d2                	xor    edx,edx
c0003be1:	57                   	push   edi
c0003be2:	56                   	push   esi
c0003be3:	53                   	push   ebx
c0003be4:	89 c3                	mov    ebx,eax
c0003be6:	83 ec 1c             	sub    esp,0x1c
c0003be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	89 d8                	mov    eax,ebx
c0003bf1:	e8 6e fa ff ff       	call   c0003664 <dir_sdi>
c0003bf6:	89 c6                	mov    esi,eax
c0003bf8:	85 c0                	test   eax,eax
c0003bfa:	0f 85 1d 01 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c00:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c07:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003c0c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c11:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c18:	e8 6d ea ff ff       	call   c000268a <move_window>
c0003c1d:	89 c6                	mov    esi,eax
c0003c1f:	85 c0                	test   eax,eax
c0003c21:	0f 85 f6 00 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c27:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003c2a:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003c2e:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003c32:	85 c9                	test   ecx,ecx
c0003c34:	0f 84 de 00 00 00    	je     c0003d18 <dir_find+0x13a>
c0003c3a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003c3d:	89 d0                	mov    eax,edx
c0003c3f:	83 e0 3f             	and    eax,0x3f
c0003c42:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003c48:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c4b:	0f 84 a6 00 00 00    	je     c0003cf7 <dir_find+0x119>
c0003c51:	80 e2 08             	and    dl,0x8
c0003c54:	0f b6 c0             	movzx  eax,al
c0003c57:	74 0b                	je     c0003c64 <dir_find+0x86>
c0003c59:	83 f8 0f             	cmp    eax,0xf
c0003c5c:	0f 85 95 00 00 00    	jne    c0003cf7 <dir_find+0x119>
c0003c62:	eb 05                	jmp    c0003c69 <dir_find+0x8b>
c0003c64:	83 f8 0f             	cmp    eax,0xf
c0003c67:	75 62                	jne    c0003ccb <dir_find+0xed>
c0003c69:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003c6d:	0f 85 90 00 00 00    	jne    c0003d03 <dir_find+0x125>
c0003c73:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003c78:	74 17                	je     c0003c91 <dir_find+0xb3>
c0003c7a:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003c7d:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003c89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003c8f:	eb 13                	jmp    c0003ca4 <dir_find+0xc6>
c0003c91:	89 f8                	mov    eax,edi
c0003c93:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c98:	0f b6 d0             	movzx  edx,al
c0003c9b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003ca0:	39 c2                	cmp    edx,eax
c0003ca2:	75 5f                	jne    c0003d03 <dir_find+0x125>
c0003ca4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003ca8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003cad:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003cb0:	75 51                	jne    c0003d03 <dir_find+0x125>
c0003cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cb6:	89 ea                	mov    edx,ebp
c0003cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbb:	e8 37 f3 ff ff       	call   c0002ff7 <cmp_lfn>
c0003cc0:	85 c0                	test   eax,eax
c0003cc2:	74 3f                	je     c0003d03 <dir_find+0x125>
c0003cc4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003cc8:	4f                   	dec    edi
c0003cc9:	eb 38                	jmp    c0003d03 <dir_find+0x125>
c0003ccb:	89 f8                	mov    eax,edi
c0003ccd:	84 c0                	test   al,al
c0003ccf:	75 0d                	jne    c0003cde <dir_find+0x100>
c0003cd1:	89 e8                	mov    eax,ebp
c0003cd3:	e8 9c e8 ff ff       	call   c0002574 <sum_sfn>
c0003cd8:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003cdc:	74 3f                	je     c0003d1d <dir_find+0x13f>
c0003cde:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003ce2:	75 13                	jne    c0003cf7 <dir_find+0x119>
c0003ce4:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ce7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cec:	89 e8                	mov    eax,ebp
c0003cee:	e8 7c e4 ff ff       	call   c000216f <mem_cmp>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	74 26                	je     c0003d1d <dir_find+0x13f>
c0003cf7:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003cfe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 ed fb ff ff       	call   c00038f9 <dir_next>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 84 fb fe ff ff    	je     c0003c11 <dir_find+0x33>
c0003d16:	eb 05                	jmp    c0003d1d <dir_find+0x13f>
c0003d18:	be 04 00 00 00       	mov    esi,0x4
c0003d1d:	83 c4 1c             	add    esp,0x1c
c0003d20:	89 f0                	mov    eax,esi
c0003d22:	5b                   	pop    ebx
c0003d23:	5e                   	pop    esi
c0003d24:	5f                   	pop    edi
c0003d25:	5d                   	pop    ebp
c0003d26:	c3                   	ret    

c0003d27 <follow_path>:
c0003d27:	56                   	push   esi
c0003d28:	53                   	push   ebx
c0003d29:	89 c3                	mov    ebx,eax
c0003d2b:	83 ec 14             	sub    esp,0x14
c0003d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d32:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d38:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d3b:	83 fa 5c             	cmp    edx,0x5c
c0003d3e:	75 07                	jne    c0003d47 <follow_path+0x20>
c0003d40:	40                   	inc    eax
c0003d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d45:	eb ed                	jmp    c0003d34 <follow_path+0xd>
c0003d47:	83 fa 2f             	cmp    edx,0x2f
c0003d4a:	74 f4                	je     c0003d40 <follow_path+0x19>
c0003d4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d53:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d56:	77 3e                	ja     c0003d96 <follow_path+0x6f>
c0003d58:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d5c:	31 d2                	xor    edx,edx
c0003d5e:	89 d8                	mov    eax,ebx
c0003d60:	e8 ff f8 ff ff       	call   c0003664 <dir_sdi>
c0003d65:	eb 4f                	jmp    c0003db6 <follow_path+0x8f>
c0003d67:	89 d8                	mov    eax,ebx
c0003d69:	e8 70 fe ff ff       	call   c0003bde <dir_find>
c0003d6e:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003d71:	85 c0                	test   eax,eax
c0003d73:	75 32                	jne    c0003da7 <follow_path+0x80>
c0003d75:	80 e2 04             	and    dl,0x4
c0003d78:	75 3c                	jne    c0003db6 <follow_path+0x8f>
c0003d7a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003d7e:	74 31                	je     c0003db1 <follow_path+0x8a>
c0003d80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003d83:	25 ff 01 00 00       	and    eax,0x1ff
c0003d88:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003d8c:	8a 06                	mov    al,BYTE PTR [esi]
c0003d8e:	e8 7c f7 ff ff       	call   c000350f <ld_clust.isra.0>
c0003d93:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d96:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003d9a:	89 d8                	mov    eax,ebx
c0003d9c:	e8 7f ef ff ff       	call   c0002d20 <create_name>
c0003da1:	85 c0                	test   eax,eax
c0003da3:	74 c2                	je     c0003d67 <follow_path+0x40>
c0003da5:	eb 0f                	jmp    c0003db6 <follow_path+0x8f>
c0003da7:	83 f8 04             	cmp    eax,0x4
c0003daa:	75 0a                	jne    c0003db6 <follow_path+0x8f>
c0003dac:	80 e2 04             	and    dl,0x4
c0003daf:	75 05                	jne    c0003db6 <follow_path+0x8f>
c0003db1:	b8 05 00 00 00       	mov    eax,0x5
c0003db6:	83 c4 14             	add    esp,0x14
c0003db9:	5b                   	pop    ebx
c0003dba:	5e                   	pop    esi
c0003dbb:	c3                   	ret    

c0003dbc <dir_register>:
c0003dbc:	55                   	push   ebp
c0003dbd:	57                   	push   edi
c0003dbe:	56                   	push   esi
c0003dbf:	be 06 00 00 00       	mov    esi,0x6
c0003dc4:	53                   	push   ebx
c0003dc5:	83 ec 2c             	sub    esp,0x2c
c0003dc8:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003dcb:	80 e2 a0             	and    dl,0xa0
c0003dce:	0f 85 66 01 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003dd4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003dd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003dde:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003de5:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003dea:	74 06                	je     c0003df2 <dir_register+0x36>
c0003dec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003df0:	eb ef                	jmp    c0003de1 <dir_register+0x25>
c0003df2:	89 c3                	mov    ebx,eax
c0003df4:	b9 0c 00 00 00       	mov    ecx,0xc
c0003df9:	8d 40 20             	lea    eax,[eax+0x20]
c0003dfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e00:	89 c2                	mov    edx,eax
c0003e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e06:	e8 44 e3 ff ff       	call   c000214f <mem_cpy>
c0003e0b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e10:	74 48                	je     c0003e5a <dir_register+0x9e>
c0003e12:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e16:	bd 01 00 00 00       	mov    ebp,0x1
c0003e1b:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e1e:	55                   	push   ebp
c0003e1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e27:	e8 86 e6 ff ff       	call   c00024b2 <gen_numname>
c0003e2c:	58                   	pop    eax
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 aa fd ff ff       	call   c0003bde <dir_find>
c0003e34:	89 c6                	mov    esi,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	75 10                	jne    c0003e4a <dir_register+0x8e>
c0003e3a:	45                   	inc    ebp
c0003e3b:	83 fd 64             	cmp    ebp,0x64
c0003e3e:	75 db                	jne    c0003e1b <dir_register+0x5f>
c0003e40:	be 07 00 00 00       	mov    esi,0x7
c0003e45:	e9 f0 00 00 00       	jmp    c0003f3a <dir_register+0x17e>
c0003e4a:	83 f8 04             	cmp    eax,0x4
c0003e4d:	0f 85 e7 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e53:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e57:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e5a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e5f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e64:	74 13                	je     c0003e79 <dir_register+0xbd>
c0003e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e6a:	b9 0d 00 00 00       	mov    ecx,0xd
c0003e6f:	83 c0 0c             	add    eax,0xc
c0003e72:	31 d2                	xor    edx,edx
c0003e74:	f7 f1                	div    ecx
c0003e76:	8d 68 01             	lea    ebp,[eax+0x1]
c0003e79:	89 ea                	mov    edx,ebp
c0003e7b:	89 d8                	mov    eax,ebx
c0003e7d:	e8 7c fb ff ff       	call   c00039fe <dir_alloc>
c0003e82:	89 c6                	mov    esi,eax
c0003e84:	85 c0                	test   eax,eax
c0003e86:	0f 85 ae 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e8c:	4d                   	dec    ebp
c0003e8d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003e91:	74 67                	je     c0003efa <dir_register+0x13e>
c0003e93:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003e96:	89 e8                	mov    eax,ebp
c0003e98:	c1 e0 05             	shl    eax,0x5
c0003e9b:	29 c2                	sub    edx,eax
c0003e9d:	89 d8                	mov    eax,ebx
c0003e9f:	e8 c0 f7 ff ff       	call   c0003664 <dir_sdi>
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	85 c0                	test   eax,eax
c0003ea8:	0f 85 8c 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb2:	e8 bd e6 ff ff       	call   c0002574 <sum_sfn>
c0003eb7:	0f b6 e8             	movzx  ebp,al
c0003eba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ebd:	89 f8                	mov    eax,edi
c0003ebf:	e8 c6 e7 ff ff       	call   c000268a <move_window>
c0003ec4:	89 c6                	mov    esi,eax
c0003ec6:	85 c0                	test   eax,eax
c0003ec8:	75 70                	jne    c0003f3a <dir_register+0x17e>
c0003eca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003ecf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ed2:	83 ec 0c             	sub    esp,0xc
c0003ed5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ed8:	55                   	push   ebp
c0003ed9:	e8 39 e5 ff ff       	call   c0002417 <put_lfn>
c0003ede:	31 d2                	xor    edx,edx
c0003ee0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ee4:	89 d8                	mov    eax,ebx
c0003ee6:	e8 0e fa ff ff       	call   c00038f9 <dir_next>
c0003eeb:	83 c4 10             	add    esp,0x10
c0003eee:	89 c6                	mov    esi,eax
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	75 46                	jne    c0003f3a <dir_register+0x17e>
c0003ef4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003ef8:	75 c0                	jne    c0003eba <dir_register+0xfe>
c0003efa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efd:	89 f8                	mov    eax,edi
c0003eff:	e8 86 e7 ff ff       	call   c000268a <move_window>
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	85 c0                	test   eax,eax
c0003f08:	75 30                	jne    c0003f3a <dir_register+0x17e>
c0003f0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f0d:	b9 20 00 00 00       	mov    ecx,0x20
c0003f12:	31 d2                	xor    edx,edx
c0003f14:	e8 4b e2 ff ff       	call   c0002164 <mem_set>
c0003f19:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f20:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f25:	e8 25 e2 ff ff       	call   c000214f <mem_cpy>
c0003f2a:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f2d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f30:	83 e0 18             	and    eax,0x18
c0003f33:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f36:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f3a:	83 c4 2c             	add    esp,0x2c
c0003f3d:	89 f0                	mov    eax,esi
c0003f3f:	5b                   	pop    ebx
c0003f40:	5e                   	pop    esi
c0003f41:	5f                   	pop    edi
c0003f42:	5d                   	pop    ebp
c0003f43:	c3                   	ret    

c0003f44 <f_mount>:
c0003f44:	53                   	push   ebx
c0003f45:	83 ec 18             	sub    esp,0x18
c0003f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f4c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f58:	e8 37 e6 ff ff       	call   c0002594 <get_ldnumber>
c0003f5d:	89 c2                	mov    edx,eax
c0003f5f:	b8 0b 00 00 00       	mov    eax,0xb
c0003f64:	85 d2                	test   edx,edx
c0003f66:	78 39                	js     c0003fa1 <f_mount+0x5d>
c0003f68:	8b 04 95 80 7c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc8380]
c0003f6f:	85 c0                	test   eax,eax
c0003f71:	74 03                	je     c0003f76 <f_mount+0x32>
c0003f73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f7a:	85 c0                	test   eax,eax
c0003f7c:	74 03                	je     c0003f81 <f_mount+0x3d>
c0003f7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f85:	89 04 95 80 7c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc8380],eax
c0003f8c:	31 c0                	xor    eax,eax
c0003f8e:	84 db                	test   bl,bl
c0003f90:	74 0f                	je     c0003fa1 <f_mount+0x5d>
c0003f92:	31 c9                	xor    ecx,ecx
c0003f94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003f98:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003f9c:	e8 3c e8 ff ff       	call   c00027dd <mount_volume>
c0003fa1:	83 c4 18             	add    esp,0x18
c0003fa4:	5b                   	pop    ebx
c0003fa5:	c3                   	ret    

c0003fa6 <f_open>:
c0003fa6:	55                   	push   ebp
c0003fa7:	b8 09 00 00 00       	mov    eax,0x9
c0003fac:	57                   	push   edi
c0003fad:	56                   	push   esi
c0003fae:	53                   	push   ebx
c0003faf:	83 ec 5c             	sub    esp,0x5c
c0003fb2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003fb6:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003fba:	85 db                	test   ebx,ebx
c0003fbc:	0f 84 9f 02 00 00    	je     c0004261 <f_open+0x2bb>
c0003fc2:	89 fd                	mov    ebp,edi
c0003fc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fc8:	83 e5 3f             	and    ebp,0x3f
c0003fcb:	89 e8                	mov    eax,ebp
c0003fcd:	89 ee                	mov    esi,ebp
c0003fcf:	0f b6 c8             	movzx  ecx,al
c0003fd2:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003fd6:	e8 02 e8 ff ff       	call   c00027dd <mount_volume>
c0003fdb:	85 c0                	test   eax,eax
c0003fdd:	0f 85 78 02 00 00    	jne    c000425b <f_open+0x2b5>
c0003fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe7:	83 ec 0c             	sub    esp,0xc
c0003fea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003fee:	68 00 02 00 00       	push   0x200
c0003ff3:	e8 74 1f 00 00       	call   c0005f6c <ff_memalloc>
c0003ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	b8 11 00 00 00       	mov    eax,0x11
c0004004:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004009:	0f 84 52 02 00 00    	je     c0004261 <f_open+0x2bb>
c000400f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004017:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000401b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000401e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004022:	e8 00 fd ff ff       	call   c0003d27 <follow_path>
c0004027:	85 c0                	test   eax,eax
c0004029:	75 0c                	jne    c0004037 <f_open+0x91>
c000402b:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004030:	74 05                	je     c0004037 <f_open+0x91>
c0004032:	b8 06 00 00 00       	mov    eax,0x6
c0004037:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000403d:	0f 84 d5 00 00 00    	je     c0004118 <f_open+0x172>
c0004043:	85 c0                	test   eax,eax
c0004045:	74 21                	je     c0004068 <f_open+0xc2>
c0004047:	83 f8 04             	cmp    eax,0x4
c000404a:	0f 85 f0 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004050:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004054:	e8 63 fd ff ff       	call   c0003dbc <dir_register>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 85 df 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004061:	83 cd 08             	or     ebp,0x8
c0004064:	89 ee                	mov    esi,ebp
c0004066:	eb 2c                	jmp    c0004094 <f_open+0xee>
c0004068:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c000406c:	b8 07 00 00 00       	mov    eax,0x7
c0004071:	80 e2 11             	and    dl,0x11
c0004074:	0f 85 c6 01 00 00    	jne    c0004240 <f_open+0x29a>
c000407a:	b8 08 00 00 00       	mov    eax,0x8
c000407f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004085:	0f 85 b5 01 00 00    	jne    c0004240 <f_open+0x29a>
c000408b:	83 e7 08             	and    edi,0x8
c000408e:	0f 84 b1 00 00 00    	je     c0004145 <f_open+0x19f>
c0004094:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000409c:	89 ea                	mov    edx,ebp
c000409e:	8a 00                	mov    al,BYTE PTR [eax]
c00040a0:	e8 6a f4 ff ff       	call   c000350f <ld_clust.isra.0>
c00040a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00040aa:	89 c7                	mov    edi,eax
c00040ac:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040af:	e8 98 e0 ff ff       	call   c000214c <st_dword>
c00040b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040b8:	31 c9                	xor    ecx,ecx
c00040ba:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00040c6:	e8 6d f4 ff ff       	call   c0003538 <st_clust.isra.1>
c00040cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040cf:	31 d2                	xor    edx,edx
c00040d1:	83 c0 1c             	add    eax,0x1c
c00040d4:	e8 73 e0 ff ff       	call   c000214c <st_dword>
c00040d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040dd:	85 ff                	test   edi,edi
c00040df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040e3:	74 60                	je     c0004145 <f_open+0x19f>
c00040e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040e9:	31 c9                	xor    ecx,ecx
c00040eb:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c00040ee:	89 fa                	mov    edx,edi
c00040f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00040f4:	e8 72 f7 ff ff       	call   c000386b <remove_chain>
c00040f9:	85 c0                	test   eax,eax
c00040fb:	0f 85 3f 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004101:	89 ea                	mov    edx,ebp
c0004103:	4f                   	dec    edi
c0004104:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004108:	e8 7d e5 ff ff       	call   c000268a <move_window>
c000410d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004111:	85 c0                	test   eax,eax
c0004113:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004116:	eb 27                	jmp    c000413f <f_open+0x199>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 20 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004120:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004124:	b8 04 00 00 00       	mov    eax,0x4
c0004129:	f6 c2 10             	test   dl,0x10
c000412c:	0f 85 0e 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004132:	83 e7 02             	and    edi,0x2
c0004135:	74 0e                	je     c0004145 <f_open+0x19f>
c0004137:	b8 07 00 00 00       	mov    eax,0x7
c000413c:	80 e2 01             	and    dl,0x1
c000413f:	0f 85 fb 00 00 00    	jne    c0004240 <f_open+0x29a>
c0004145:	f7 c6 08 00 00 00    	test   esi,0x8
c000414b:	74 03                	je     c0004150 <f_open+0x1aa>
c000414d:	83 ce 40             	or     esi,0x40
c0004150:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004154:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004158:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000415b:	89 fa                	mov    edx,edi
c000415d:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004160:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004163:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004166:	e8 a4 f3 ff ff       	call   c000350f <ld_clust.isra.0>
c000416b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000416e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004171:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004174:	e8 b7 df ff ff       	call   c0002130 <ld_dword>
c0004179:	89 2b                	mov    DWORD PTR [ebx],ebp
c000417b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000417e:	31 d2                	xor    edx,edx
c0004180:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004184:	b9 00 02 00 00       	mov    ecx,0x200
c0004189:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000418d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004191:	89 f0                	mov    eax,esi
c0004193:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000419a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000419d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041a4:	89 f8                	mov    eax,edi
c00041a6:	e8 b9 df ff ff       	call   c0002164 <mem_set>
c00041ab:	83 e6 20             	and    esi,0x20
c00041ae:	75 07                	jne    c00041b7 <f_open+0x211>
c00041b0:	31 c0                	xor    eax,eax
c00041b2:	e9 89 00 00 00       	jmp    c0004240 <f_open+0x29a>
c00041b7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00041ba:	85 ed                	test   ebp,ebp
c00041bc:	74 f2                	je     c00041b0 <f_open+0x20a>
c00041be:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c00041c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00041c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00041c8:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00041cc:	c1 e6 09             	shl    esi,0x9
c00041cf:	39 ee                	cmp    esi,ebp
c00041d1:	73 1c                	jae    c00041ef <f_open+0x249>
c00041d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d5:	29 f5                	sub    ebp,esi
c00041d7:	e8 84 f3 ff ff       	call   c0003560 <get_fat.isra.2>
c00041dc:	89 c2                	mov    edx,eax
c00041de:	83 f8 01             	cmp    eax,0x1
c00041e1:	76 10                	jbe    c00041f3 <f_open+0x24d>
c00041e3:	83 f8 ff             	cmp    eax,0xffffffff
c00041e6:	75 e7                	jne    c00041cf <f_open+0x229>
c00041e8:	b8 01 00 00 00       	mov    eax,0x1
c00041ed:	eb 09                	jmp    c00041f8 <f_open+0x252>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	eb 05                	jmp    c00041f8 <f_open+0x252>
c00041f3:	b8 02 00 00 00       	mov    eax,0x2
c00041f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00041fb:	85 c0                	test   eax,eax
c00041fd:	75 41                	jne    c0004240 <f_open+0x29a>
c00041ff:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0004205:	74 a9                	je     c00041b0 <f_open+0x20a>
c0004207:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000420b:	89 f0                	mov    eax,esi
c000420d:	e8 68 e1 ff ff       	call   c000237a <clst2sect>
c0004212:	89 c2                	mov    edx,eax
c0004214:	b8 02 00 00 00       	mov    eax,0x2
c0004219:	85 d2                	test   edx,edx
c000421b:	74 23                	je     c0004240 <f_open+0x29a>
c000421d:	c1 ed 09             	shr    ebp,0x9
c0004220:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0004224:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004227:	6a 01                	push   0x1
c0004229:	50                   	push   eax
c000422a:	57                   	push   edi
c000422b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000422f:	50                   	push   eax
c0004230:	e8 a3 de ff ff       	call   c00020d8 <disk_read>
c0004235:	83 c4 10             	add    esp,0x10
c0004238:	85 c0                	test   eax,eax
c000423a:	0f 95 c0             	setne  al
c000423d:	0f b6 c0             	movzx  eax,al
c0004240:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004244:	83 ec 0c             	sub    esp,0xc
c0004247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000424b:	e8 34 1d 00 00       	call   c0005f84 <ff_memfree>
c0004250:	83 c4 10             	add    esp,0x10
c0004253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004257:	85 c0                	test   eax,eax
c0004259:	74 06                	je     c0004261 <f_open+0x2bb>
c000425b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004261:	83 c4 5c             	add    esp,0x5c
c0004264:	5b                   	pop    ebx
c0004265:	5e                   	pop    esi
c0004266:	5f                   	pop    edi
c0004267:	5d                   	pop    ebp
c0004268:	c3                   	ret    

c0004269 <f_read>:
c0004269:	55                   	push   ebp
c000426a:	57                   	push   edi
c000426b:	56                   	push   esi
c000426c:	53                   	push   ebx
c000426d:	83 ec 2c             	sub    esp,0x2c
c0004270:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004274:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000427e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004282:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004286:	89 d8                	mov    eax,ebx
c0004288:	e8 54 e3 ff ff       	call   c00025e1 <validate>
c000428d:	89 c5                	mov    ebp,eax
c000428f:	85 c0                	test   eax,eax
c0004291:	0f 85 c7 01 00 00    	jne    c000445e <f_read+0x1f5>
c0004297:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000429b:	85 ed                	test   ebp,ebp
c000429d:	0f 85 bb 01 00 00    	jne    c000445e <f_read+0x1f5>
c00042a3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042a7:	0f 84 ac 01 00 00    	je     c0004459 <f_read+0x1f0>
c00042ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042b0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042b7:	39 f0                	cmp    eax,esi
c00042b9:	0f 86 b0 00 00 00    	jbe    c000436f <f_read+0x106>
c00042bf:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00042c3:	e9 a7 00 00 00       	jmp    c000436f <f_read+0x106>
c00042c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cb:	a9 ff 01 00 00       	test   eax,0x1ff
c00042d0:	0f 85 56 01 00 00    	jne    c000442c <f_read+0x1c3>
c00042d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042da:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c00042de:	89 c2                	mov    edx,eax
c00042e0:	4f                   	dec    edi
c00042e1:	c1 ea 09             	shr    edx,0x9
c00042e4:	21 d7                	and    edi,edx
c00042e6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00042ea:	0f 84 8f 00 00 00    	je     c000437f <f_read+0x116>
c00042f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042f7:	89 c8                	mov    eax,ecx
c00042f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042fd:	e8 78 e0 ff ff       	call   c000237a <clst2sect>
c0004302:	85 c0                	test   eax,eax
c0004304:	0f 84 8d 00 00 00    	je     c0004397 <f_read+0x12e>
c000430a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000430e:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0004316:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004319:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000431d:	0f 86 bf 00 00 00    	jbe    c00043e2 <f_read+0x179>
c0004323:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0004327:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000432b:	c1 ee 09             	shr    esi,0x9
c000432e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004332:	01 f2                	add    edx,esi
c0004334:	39 c2                	cmp    edx,eax
c0004336:	76 06                	jbe    c000433e <f_read+0xd5>
c0004338:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000433c:	89 c6                	mov    esi,eax
c000433e:	56                   	push   esi
c000433f:	57                   	push   edi
c0004340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004344:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004348:	50                   	push   eax
c0004349:	e8 8a dd ff ff       	call   c00020d8 <disk_read>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	85 c0                	test   eax,eax
c0004353:	75 55                	jne    c00043aa <f_read+0x141>
c0004355:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004359:	75 65                	jne    c00043c0 <f_read+0x157>
c000435b:	c1 e6 09             	shl    esi,0x9
c000435e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004362:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004366:	01 30                	add    DWORD PTR [eax],esi
c0004368:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000436c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000436f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004374:	0f 85 4e ff ff ff    	jne    c00042c8 <f_read+0x5f>
c000437a:	e9 df 00 00 00       	jmp    c000445e <f_read+0x1f5>
c000437f:	85 c0                	test   eax,eax
c0004381:	75 05                	jne    c0004388 <f_read+0x11f>
c0004383:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004386:	eb 0a                	jmp    c0004392 <f_read+0x129>
c0004388:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000438d:	e8 ce f1 ff ff       	call   c0003560 <get_fat.isra.2>
c0004392:	83 f8 01             	cmp    eax,0x1
c0004395:	77 0e                	ja     c00043a5 <f_read+0x13c>
c0004397:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000439b:	bd 02 00 00 00       	mov    ebp,0x2
c00043a0:	e9 b9 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043a5:	83 f8 ff             	cmp    eax,0xffffffff
c00043a8:	75 0e                	jne    c00043b8 <f_read+0x14f>
c00043aa:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043ae:	bd 01 00 00 00       	mov    ebp,0x1
c00043b3:	e9 a6 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043b8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043bb:	e9 30 ff ff ff       	jmp    c00042f0 <f_read+0x87>
c00043c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043c3:	29 f8                	sub    eax,edi
c00043c5:	39 f0                	cmp    eax,esi
c00043c7:	73 92                	jae    c000435b <f_read+0xf2>
c00043c9:	c1 e0 09             	shl    eax,0x9
c00043cc:	8d 53 28             	lea    edx,[ebx+0x28]
c00043cf:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043d3:	b9 00 02 00 00       	mov    ecx,0x200
c00043d8:	e8 72 dd ff ff       	call   c000214f <mem_cpy>
c00043dd:	e9 79 ff ff ff       	jmp    c000435b <f_read+0xf2>
c00043e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043e5:	39 f8                	cmp    eax,edi
c00043e7:	74 40                	je     c0004429 <f_read+0x1c0>
c00043e9:	8d 73 28             	lea    esi,[ebx+0x28]
c00043ec:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f0:	74 1e                	je     c0004410 <f_read+0x1a7>
c00043f2:	6a 01                	push   0x1
c00043f4:	50                   	push   eax
c00043f5:	56                   	push   esi
c00043f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043fa:	50                   	push   eax
c00043fb:	e8 ee dc ff ff       	call   c00020ee <disk_write>
c0004400:	83 c4 10             	add    esp,0x10
c0004403:	85 c0                	test   eax,eax
c0004405:	75 a3                	jne    c00043aa <f_read+0x141>
c0004407:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000440a:	83 e0 7f             	and    eax,0x7f
c000440d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004410:	6a 01                	push   0x1
c0004412:	57                   	push   edi
c0004413:	56                   	push   esi
c0004414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004418:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000441c:	50                   	push   eax
c000441d:	e8 b6 dc ff ff       	call   c00020d8 <disk_read>
c0004422:	83 c4 10             	add    esp,0x10
c0004425:	85 c0                	test   eax,eax
c0004427:	75 81                	jne    c00043aa <f_read+0x141>
c0004429:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000442f:	ba 00 02 00 00       	mov    edx,0x200
c0004434:	25 ff 01 00 00       	and    eax,0x1ff
c0004439:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000443d:	29 c2                	sub    edx,eax
c000443f:	39 d6                	cmp    esi,edx
c0004441:	76 02                	jbe    c0004445 <f_read+0x1dc>
c0004443:	89 d6                	mov    esi,edx
c0004445:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004449:	89 f1                	mov    ecx,esi
c000444b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000444f:	e8 fb dc ff ff       	call   c000214f <mem_cpy>
c0004454:	e9 05 ff ff ff       	jmp    c000435e <f_read+0xf5>
c0004459:	bd 07 00 00 00       	mov    ebp,0x7
c000445e:	83 c4 2c             	add    esp,0x2c
c0004461:	89 e8                	mov    eax,ebp
c0004463:	5b                   	pop    ebx
c0004464:	5e                   	pop    esi
c0004465:	5f                   	pop    edi
c0004466:	5d                   	pop    ebp
c0004467:	c3                   	ret    

c0004468 <f_write>:
c0004468:	55                   	push   ebp
c0004469:	57                   	push   edi
c000446a:	56                   	push   esi
c000446b:	53                   	push   ebx
c000446c:	83 ec 2c             	sub    esp,0x2c
c000446f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000447d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004481:	89 d8                	mov    eax,ebx
c0004483:	e8 59 e1 ff ff       	call   c00025e1 <validate>
c0004488:	89 c5                	mov    ebp,eax
c000448a:	85 c0                	test   eax,eax
c000448c:	0f 85 14 02 00 00    	jne    c00046a6 <f_write+0x23e>
c0004492:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004496:	85 ed                	test   ebp,ebp
c0004498:	0f 85 08 02 00 00    	jne    c00046a6 <f_write+0x23e>
c000449e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a2:	0f 84 f9 01 00 00    	je     c00046a1 <f_write+0x239>
c00044a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044ab:	89 c7                	mov    edi,eax
c00044ad:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c00044b1:	0f 83 ef 00 00 00    	jae    c00045a6 <f_write+0x13e>
c00044b7:	f7 d0                	not    eax
c00044b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044bd:	e9 e4 00 00 00       	jmp    c00045a6 <f_write+0x13e>
c00044c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044c5:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c00044cb:	0f 85 9a 01 00 00    	jne    c000466b <f_write+0x203>
c00044d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d5:	89 d1                	mov    ecx,edx
c00044d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00044db:	c1 e9 09             	shr    ecx,0x9
c00044de:	48                   	dec    eax
c00044df:	21 c8                	and    eax,ecx
c00044e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00044e5:	0f 84 c8 00 00 00    	je     c00045b3 <f_write+0x14b>
c00044eb:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00044ef:	0f 85 22 01 00 00    	jne    c0004617 <f_write+0x1af>
c00044f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00044f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044fc:	89 c8                	mov    eax,ecx
c00044fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004502:	e8 73 de ff ff       	call   c000237a <clst2sect>
c0004507:	85 c0                	test   eax,eax
c0004509:	0f 84 d2 00 00 00    	je     c00045e1 <f_write+0x179>
c000450f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004513:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004517:	01 c7                	add    edi,eax
c0004519:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004521:	0f 86 1c 01 00 00    	jbe    c0004643 <f_write+0x1db>
c0004527:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000452b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000452f:	c1 ee 09             	shr    esi,0x9
c0004532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004536:	01 f2                	add    edx,esi
c0004538:	39 c2                	cmp    edx,eax
c000453a:	76 06                	jbe    c0004542 <f_write+0xda>
c000453c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004540:	89 c6                	mov    esi,eax
c0004542:	56                   	push   esi
c0004543:	57                   	push   edi
c0004544:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004548:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000454c:	50                   	push   eax
c000454d:	e8 9c db ff ff       	call   c00020ee <disk_write>
c0004552:	83 c4 10             	add    esp,0x10
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 97 00 00 00    	jne    c00045f4 <f_write+0x18c>
c000455d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004560:	29 fa                	sub    edx,edi
c0004562:	39 f2                	cmp    edx,esi
c0004564:	73 1d                	jae    c0004583 <f_write+0x11b>
c0004566:	8d 43 28             	lea    eax,[ebx+0x28]
c0004569:	c1 e2 09             	shl    edx,0x9
c000456c:	b9 00 02 00 00       	mov    ecx,0x200
c0004571:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004575:	e8 d5 db ff ff       	call   c000214f <mem_cpy>
c000457a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000457d:	83 e0 7f             	and    eax,0x7f
c0004580:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004583:	c1 e6 09             	shl    esi,0x9
c0004586:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000458a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000458e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004592:	01 30                	add    DWORD PTR [eax],esi
c0004594:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004597:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000459a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000459d:	39 f0                	cmp    eax,esi
c000459f:	73 02                	jae    c00045a3 <f_write+0x13b>
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045a6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045ab:	0f 85 11 ff ff ff    	jne    c00044c2 <f_write+0x5a>
c00045b1:	eb 1b                	jmp    c00045ce <f_write+0x166>
c00045b3:	85 d2                	test   edx,edx
c00045b5:	75 09                	jne    c00045c0 <f_write+0x158>
c00045b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045ba:	85 c0                	test   eax,eax
c00045bc:	75 1e                	jne    c00045dc <f_write+0x174>
c00045be:	eb 03                	jmp    c00045c3 <f_write+0x15b>
c00045c0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045c3:	89 d8                	mov    eax,ebx
c00045c5:	e8 62 f1 ff ff       	call   c000372c <create_chain>
c00045ca:	85 c0                	test   eax,eax
c00045cc:	75 0e                	jne    c00045dc <f_write+0x174>
c00045ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d1:	83 c8 40             	or     eax,0x40
c00045d4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045d7:	e9 ca 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045dc:	83 f8 01             	cmp    eax,0x1
c00045df:	75 0e                	jne    c00045ef <f_write+0x187>
c00045e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045e5:	bd 02 00 00 00       	mov    ebp,0x2
c00045ea:	e9 b7 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045ef:	83 f8 ff             	cmp    eax,0xffffffff
c00045f2:	75 0e                	jne    c0004602 <f_write+0x19a>
c00045f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045f8:	bd 01 00 00 00       	mov    ebp,0x1
c00045fd:	e9 a4 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c0004602:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004605:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004609:	0f 85 dc fe ff ff    	jne    c00044eb <f_write+0x83>
c000460f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004612:	e9 d4 fe ff ff       	jmp    c00044eb <f_write+0x83>
c0004617:	6a 01                	push   0x1
c0004619:	8d 43 28             	lea    eax,[ebx+0x28]
c000461c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000461f:	50                   	push   eax
c0004620:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004624:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004628:	50                   	push   eax
c0004629:	e8 c0 da ff ff       	call   c00020ee <disk_write>
c000462e:	83 c4 10             	add    esp,0x10
c0004631:	85 c0                	test   eax,eax
c0004633:	75 bf                	jne    c00045f4 <f_write+0x18c>
c0004635:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004638:	83 e0 7f             	and    eax,0x7f
c000463b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000463e:	e9 b2 fe ff ff       	jmp    c00044f5 <f_write+0x8d>
c0004643:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0004646:	74 20                	je     c0004668 <f_write+0x200>
c0004648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000464b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000464e:	76 18                	jbe    c0004668 <f_write+0x200>
c0004650:	6a 01                	push   0x1
c0004652:	8d 43 28             	lea    eax,[ebx+0x28]
c0004655:	57                   	push   edi
c0004656:	50                   	push   eax
c0004657:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000465b:	50                   	push   eax
c000465c:	e8 77 da ff ff       	call   c00020d8 <disk_read>
c0004661:	83 c4 10             	add    esp,0x10
c0004664:	85 c0                	test   eax,eax
c0004666:	75 8c                	jne    c00045f4 <f_write+0x18c>
c0004668:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000466b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466e:	ba 00 02 00 00       	mov    edx,0x200
c0004673:	25 ff 01 00 00       	and    eax,0x1ff
c0004678:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000467c:	29 c2                	sub    edx,eax
c000467e:	39 d6                	cmp    esi,edx
c0004680:	76 02                	jbe    c0004684 <f_write+0x21c>
c0004682:	89 d6                	mov    esi,edx
c0004684:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004688:	89 f1                	mov    ecx,esi
c000468a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000468e:	e8 bc da ff ff       	call   c000214f <mem_cpy>
c0004693:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004696:	83 c8 80             	or     eax,0xffffff80
c0004699:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000469c:	e9 e5 fe ff ff       	jmp    c0004586 <f_write+0x11e>
c00046a1:	bd 07 00 00 00       	mov    ebp,0x7
c00046a6:	83 c4 2c             	add    esp,0x2c
c00046a9:	89 e8                	mov    eax,ebp
c00046ab:	5b                   	pop    ebx
c00046ac:	5e                   	pop    esi
c00046ad:	5f                   	pop    edi
c00046ae:	5d                   	pop    ebp
c00046af:	c3                   	ret    

c00046b0 <f_sync>:
c00046b0:	56                   	push   esi
c00046b1:	53                   	push   ebx
c00046b2:	83 ec 14             	sub    esp,0x14
c00046b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	e8 1d df ff ff       	call   c00025e1 <validate>
c00046c4:	85 c0                	test   eax,eax
c00046c6:	0f 85 a3 00 00 00    	jne    c000476f <f_sync+0xbf>
c00046cc:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046cf:	f6 c2 40             	test   dl,0x40
c00046d2:	0f 84 97 00 00 00    	je     c000476f <f_sync+0xbf>
c00046d8:	80 e2 80             	and    dl,0x80
c00046db:	74 2e                	je     c000470b <f_sync+0x5b>
c00046dd:	6a 01                	push   0x1
c00046df:	8d 43 28             	lea    eax,[ebx+0x28]
c00046e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00046e5:	50                   	push   eax
c00046e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046ee:	50                   	push   eax
c00046ef:	e8 fa d9 ff ff       	call   c00020ee <disk_write>
c00046f4:	83 c4 10             	add    esp,0x10
c00046f7:	89 c2                	mov    edx,eax
c00046f9:	b8 01 00 00 00       	mov    eax,0x1
c00046fe:	85 d2                	test   edx,edx
c0004700:	75 6d                	jne    c000476f <f_sync+0xbf>
c0004702:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004705:	83 e0 7f             	and    eax,0x7f
c0004708:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000470b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000470e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004712:	e8 73 df ff ff       	call   c000268a <move_window>
c0004717:	85 c0                	test   eax,eax
c0004719:	75 54                	jne    c000476f <f_sync+0xbf>
c000471b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000471e:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004721:	89 f2                	mov    edx,esi
c0004723:	83 c8 20             	or     eax,0x20
c0004726:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004729:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000472c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000472e:	e8 05 ee ff ff       	call   c0003538 <st_clust.isra.1>
c0004733:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004736:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004739:	e8 0e da ff ff       	call   c000214c <st_dword>
c000473e:	8d 46 16             	lea    eax,[esi+0x16]
c0004741:	ba 00 00 21 50       	mov    edx,0x50210000
c0004746:	e8 01 da ff ff       	call   c000214c <st_dword>
c000474b:	31 d2                	xor    edx,edx
c000474d:	8d 46 12             	lea    eax,[esi+0x12]
c0004750:	e8 f3 d9 ff ff       	call   c0002148 <st_word>
c0004755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004759:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000475d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004761:	e8 5b e9 ff ff       	call   c00030c1 <sync_fs>
c0004766:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004769:	83 e2 bf             	and    edx,0xffffffbf
c000476c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000476f:	83 c4 14             	add    esp,0x14
c0004772:	5b                   	pop    ebx
c0004773:	5e                   	pop    esi
c0004774:	c3                   	ret    

c0004775 <f_close>:
c0004775:	53                   	push   ebx
c0004776:	83 ec 24             	sub    esp,0x24
c0004779:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000477d:	53                   	push   ebx
c000477e:	e8 2d ff ff ff       	call   c00046b0 <f_sync>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	85 c0                	test   eax,eax
c0004788:	75 15                	jne    c000479f <f_close+0x2a>
c000478a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000478e:	89 d8                	mov    eax,ebx
c0004790:	e8 4c de ff ff       	call   c00025e1 <validate>
c0004795:	85 c0                	test   eax,eax
c0004797:	75 06                	jne    c000479f <f_close+0x2a>
c0004799:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000479f:	83 c4 18             	add    esp,0x18
c00047a2:	5b                   	pop    ebx
c00047a3:	c3                   	ret    

c00047a4 <f_lseek>:
c00047a4:	55                   	push   ebp
c00047a5:	57                   	push   edi
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 2c             	sub    esp,0x2c
c00047ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b7:	89 d8                	mov    eax,ebx
c00047b9:	e8 23 de ff ff       	call   c00025e1 <validate>
c00047be:	89 c5                	mov    ebp,eax
c00047c0:	85 c0                	test   eax,eax
c00047c2:	0f 85 83 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047c8:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047cc:	85 ed                	test   ebp,ebp
c00047ce:	0f 85 77 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047d7:	39 f0                	cmp    eax,esi
c00047d9:	73 08                	jae    c00047e3 <f_lseek+0x3f>
c00047db:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047df:	75 02                	jne    c00047e3 <f_lseek+0x3f>
c00047e1:	89 c6                	mov    esi,eax
c00047e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00047e6:	85 f6                	test   esi,esi
c00047e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00047ef:	75 07                	jne    c00047f8 <f_lseek+0x54>
c00047f1:	31 f6                	xor    esi,esi
c00047f3:	e9 e2 00 00 00       	jmp    c00048da <f_lseek+0x136>
c00047f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047fc:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004800:	c1 e7 09             	shl    edi,0x9
c0004803:	85 c9                	test   ecx,ecx
c0004805:	74 28                	je     c000482f <f_lseek+0x8b>
c0004807:	49                   	dec    ecx
c0004808:	31 d2                	xor    edx,edx
c000480a:	8d 46 ff             	lea    eax,[esi-0x1]
c000480d:	f7 f7                	div    edi
c000480f:	31 d2                	xor    edx,edx
c0004811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004815:	89 c8                	mov    eax,ecx
c0004817:	f7 f7                	div    edi
c0004819:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000481d:	72 10                	jb     c000482f <f_lseek+0x8b>
c000481f:	89 f8                	mov    eax,edi
c0004821:	f7 d8                	neg    eax
c0004823:	21 c1                	and    ecx,eax
c0004825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004828:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000482b:	29 ce                	sub    esi,ecx
c000482d:	eb 3c                	jmp    c000486b <f_lseek+0xc7>
c000482f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004832:	85 c0                	test   eax,eax
c0004834:	75 32                	jne    c0004868 <f_lseek+0xc4>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	e8 ed ee ff ff       	call   c000372c <create_chain>
c000483f:	83 f8 01             	cmp    eax,0x1
c0004842:	75 0e                	jne    c0004852 <f_lseek+0xae>
c0004844:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004848:	bd 02 00 00 00       	mov    ebp,0x2
c000484d:	e9 f9 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004852:	83 f8 ff             	cmp    eax,0xffffffff
c0004855:	75 0e                	jne    c0004865 <f_lseek+0xc1>
c0004857:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000485b:	bd 01 00 00 00       	mov    ebp,0x1
c0004860:	e9 e6 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004865:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004868:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000486b:	85 c0                	test   eax,eax
c000486d:	74 82                	je     c00047f1 <f_lseek+0x4d>
c000486f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004872:	39 fe                	cmp    esi,edi
c0004874:	76 3d                	jbe    c00048b3 <f_lseek+0x10f>
c0004876:	01 fa                	add    edx,edi
c0004878:	29 fe                	sub    esi,edi
c000487a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000487d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004881:	89 c2                	mov    edx,eax
c0004883:	74 0d                	je     c0004892 <f_lseek+0xee>
c0004885:	89 d8                	mov    eax,ebx
c0004887:	e8 a0 ee ff ff       	call   c000372c <create_chain>
c000488c:	85 c0                	test   eax,eax
c000488e:	75 09                	jne    c0004899 <f_lseek+0xf5>
c0004890:	eb 1f                	jmp    c00048b1 <f_lseek+0x10d>
c0004892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004894:	e8 c7 ec ff ff       	call   c0003560 <get_fat.isra.2>
c0004899:	83 f8 ff             	cmp    eax,0xffffffff
c000489c:	74 b9                	je     c0004857 <f_lseek+0xb3>
c000489e:	83 f8 01             	cmp    eax,0x1
c00048a1:	76 a1                	jbe    c0004844 <f_lseek+0xa0>
c00048a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048a7:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048aa:	76 98                	jbe    c0004844 <f_lseek+0xa0>
c00048ac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048af:	eb be                	jmp    c000486f <f_lseek+0xcb>
c00048b1:	31 f6                	xor    esi,esi
c00048b3:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048b6:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048bc:	0f 84 2f ff ff ff    	je     c00047f1 <f_lseek+0x4d>
c00048c2:	89 c2                	mov    edx,eax
c00048c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048c8:	e8 ad da ff ff       	call   c000237a <clst2sect>
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 84 6f ff ff ff    	je     c0004844 <f_lseek+0xa0>
c00048d5:	c1 ee 09             	shr    esi,0x9
c00048d8:	01 c6                	add    esi,eax
c00048da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048e0:	76 0c                	jbe    c00048ee <f_lseek+0x14a>
c00048e2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00048e5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00048e8:	83 ca 40             	or     edx,0x40
c00048eb:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00048ee:	a9 ff 01 00 00       	test   eax,0x1ff
c00048f3:	74 56                	je     c000494b <f_lseek+0x1a7>
c00048f5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00048f8:	39 f0                	cmp    eax,esi
c00048fa:	74 4f                	je     c000494b <f_lseek+0x1a7>
c00048fc:	8d 7b 28             	lea    edi,[ebx+0x28]
c00048ff:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004903:	74 26                	je     c000492b <f_lseek+0x187>
c0004905:	6a 01                	push   0x1
c0004907:	50                   	push   eax
c0004908:	57                   	push   edi
c0004909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000490d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004911:	50                   	push   eax
c0004912:	e8 d7 d7 ff ff       	call   c00020ee <disk_write>
c0004917:	83 c4 10             	add    esp,0x10
c000491a:	85 c0                	test   eax,eax
c000491c:	0f 85 35 ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004922:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004925:	83 e0 7f             	and    eax,0x7f
c0004928:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000492b:	6a 01                	push   0x1
c000492d:	56                   	push   esi
c000492e:	57                   	push   edi
c000492f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004933:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004937:	50                   	push   eax
c0004938:	e8 9b d7 ff ff       	call   c00020d8 <disk_read>
c000493d:	83 c4 10             	add    esp,0x10
c0004940:	85 c0                	test   eax,eax
c0004942:	0f 85 0f ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004948:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000494b:	83 c4 2c             	add    esp,0x2c
c000494e:	89 e8                	mov    eax,ebp
c0004950:	5b                   	pop    ebx
c0004951:	5e                   	pop    esi
c0004952:	5f                   	pop    edi
c0004953:	5d                   	pop    ebp
c0004954:	c3                   	ret    

c0004955 <f_opendir>:
c0004955:	56                   	push   esi
c0004956:	b8 09 00 00 00       	mov    eax,0x9
c000495b:	53                   	push   ebx
c000495c:	83 ec 24             	sub    esp,0x24
c000495f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004963:	85 db                	test   ebx,ebx
c0004965:	0f 84 af 00 00 00    	je     c0004a1a <f_opendir+0xc5>
c000496b:	31 c9                	xor    ecx,ecx
c000496d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004971:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004975:	e8 63 de ff ff       	call   c00027dd <mount_volume>
c000497a:	85 c0                	test   eax,eax
c000497c:	0f 85 92 00 00 00    	jne    c0004a14 <f_opendir+0xbf>
c0004982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	89 03                	mov    DWORD PTR [ebx],eax
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 d7 15 00 00       	call   c0005f6c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	89 c6                	mov    esi,eax
c000499a:	b8 11 00 00 00       	mov    eax,0x11
c000499f:	85 f6                	test   esi,esi
c00049a1:	74 77                	je     c0004a1a <f_opendir+0xc5>
c00049a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049ae:	89 d8                	mov    eax,ebx
c00049b0:	e8 72 f3 ff ff       	call   c0003d27 <follow_path>
c00049b5:	85 c0                	test   eax,eax
c00049b7:	75 37                	jne    c00049f0 <f_opendir+0x9b>
c00049b9:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049bd:	75 1c                	jne    c00049db <f_opendir+0x86>
c00049bf:	b8 05 00 00 00       	mov    eax,0x5
c00049c4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049c8:	74 26                	je     c00049f0 <f_opendir+0x9b>
c00049ca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8a 00                	mov    al,BYTE PTR [eax]
c00049d3:	e8 37 eb ff ff       	call   c000350f <ld_clust.isra.0>
c00049d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049df:	31 d2                	xor    edx,edx
c00049e1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00049e5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00049e9:	89 d8                	mov    eax,ebx
c00049eb:	e8 74 ec ff ff       	call   c0003664 <dir_sdi>
c00049f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f4:	83 ec 0c             	sub    esp,0xc
c00049f7:	56                   	push   esi
c00049f8:	e8 87 15 00 00       	call   c0005f84 <ff_memfree>
c00049fd:	83 c4 10             	add    esp,0x10
c0004a00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a04:	83 f8 04             	cmp    eax,0x4
c0004a07:	74 06                	je     c0004a0f <f_opendir+0xba>
c0004a09:	85 c0                	test   eax,eax
c0004a0b:	74 0d                	je     c0004a1a <f_opendir+0xc5>
c0004a0d:	eb 05                	jmp    c0004a14 <f_opendir+0xbf>
c0004a0f:	b8 05 00 00 00       	mov    eax,0x5
c0004a14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a1a:	83 c4 24             	add    esp,0x24
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_closedir>:
c0004a20:	53                   	push   ebx
c0004a21:	83 ec 18             	sub    esp,0x18
c0004a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a28:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a2c:	89 d8                	mov    eax,ebx
c0004a2e:	e8 ae db ff ff       	call   c00025e1 <validate>
c0004a33:	85 c0                	test   eax,eax
c0004a35:	75 06                	jne    c0004a3d <f_closedir+0x1d>
c0004a37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a3d:	83 c4 18             	add    esp,0x18
c0004a40:	5b                   	pop    ebx
c0004a41:	c3                   	ret    

c0004a42 <f_readdir>:
c0004a42:	57                   	push   edi
c0004a43:	56                   	push   esi
c0004a44:	53                   	push   ebx
c0004a45:	83 ec 20             	sub    esp,0x20
c0004a48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a50:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a54:	89 d8                	mov    eax,ebx
c0004a56:	e8 86 db ff ff       	call   c00025e1 <validate>
c0004a5b:	85 c0                	test   eax,eax
c0004a5d:	75 6e                	jne    c0004acd <f_readdir+0x8b>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <f_readdir+0x2c>
c0004a63:	31 d2                	xor    edx,edx
c0004a65:	89 d8                	mov    eax,ebx
c0004a67:	e8 f8 eb ff ff       	call   c0003664 <dir_sdi>
c0004a6c:	eb 5f                	jmp    c0004acd <f_readdir+0x8b>
c0004a6e:	83 ec 0c             	sub    esp,0xc
c0004a71:	68 00 02 00 00       	push   0x200
c0004a76:	e8 f1 14 00 00       	call   c0005f6c <ff_memalloc>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	89 c6                	mov    esi,eax
c0004a80:	b8 11 00 00 00       	mov    eax,0x11
c0004a85:	85 f6                	test   esi,esi
c0004a87:	74 44                	je     c0004acd <f_readdir+0x8b>
c0004a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a8d:	31 d2                	xor    edx,edx
c0004a8f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a92:	89 d8                	mov    eax,ebx
c0004a94:	e8 ca ef ff ff       	call   c0003a63 <dir_read>
c0004a99:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004a9e:	75 19                	jne    c0004ab9 <f_readdir+0x77>
c0004aa0:	89 fa                	mov    edx,edi
c0004aa2:	89 d8                	mov    eax,ebx
c0004aa4:	e8 70 e8 ff ff       	call   c0003319 <get_fileinfo>
c0004aa9:	31 d2                	xor    edx,edx
c0004aab:	89 d8                	mov    eax,ebx
c0004aad:	e8 47 ee ff ff       	call   c00038f9 <dir_next>
c0004ab2:	83 f8 04             	cmp    eax,0x4
c0004ab5:	75 02                	jne    c0004ab9 <f_readdir+0x77>
c0004ab7:	31 c0                	xor    eax,eax
c0004ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abd:	83 ec 0c             	sub    esp,0xc
c0004ac0:	56                   	push   esi
c0004ac1:	e8 be 14 00 00       	call   c0005f84 <ff_memfree>
c0004ac6:	83 c4 10             	add    esp,0x10
c0004ac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004acd:	83 c4 20             	add    esp,0x20
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	c3                   	ret    

c0004ad4 <f_stat>:
c0004ad4:	57                   	push   edi
c0004ad5:	31 c9                	xor    ecx,ecx
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 30             	sub    esp,0x30
c0004adc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004ae0:	89 e2                	mov    edx,esp
c0004ae2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ae6:	e8 f2 dc ff ff       	call   c00027dd <mount_volume>
c0004aeb:	89 c3                	mov    ebx,eax
c0004aed:	85 c0                	test   eax,eax
c0004aef:	75 59                	jne    c0004b4a <f_stat+0x76>
c0004af1:	83 ec 0c             	sub    esp,0xc
c0004af4:	bb 11 00 00 00       	mov    ebx,0x11
c0004af9:	68 00 02 00 00       	push   0x200
c0004afe:	e8 69 14 00 00       	call   c0005f6c <ff_memalloc>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	89 c6                	mov    esi,eax
c0004b08:	85 c0                	test   eax,eax
c0004b0a:	74 3e                	je     c0004b4a <f_stat+0x76>
c0004b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b0f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b13:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b16:	89 e0                	mov    eax,esp
c0004b18:	e8 0a f2 ff ff       	call   c0003d27 <follow_path>
c0004b1d:	89 c3                	mov    ebx,eax
c0004b1f:	85 c0                	test   eax,eax
c0004b21:	75 1b                	jne    c0004b3e <f_stat+0x6a>
c0004b23:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b28:	75 0f                	jne    c0004b39 <f_stat+0x65>
c0004b2a:	85 ff                	test   edi,edi
c0004b2c:	74 10                	je     c0004b3e <f_stat+0x6a>
c0004b2e:	89 fa                	mov    edx,edi
c0004b30:	89 e0                	mov    eax,esp
c0004b32:	e8 e2 e7 ff ff       	call   c0003319 <get_fileinfo>
c0004b37:	eb 05                	jmp    c0004b3e <f_stat+0x6a>
c0004b39:	bb 06 00 00 00       	mov    ebx,0x6
c0004b3e:	83 ec 0c             	sub    esp,0xc
c0004b41:	56                   	push   esi
c0004b42:	e8 3d 14 00 00       	call   c0005f84 <ff_memfree>
c0004b47:	83 c4 10             	add    esp,0x10
c0004b4a:	83 c4 30             	add    esp,0x30
c0004b4d:	89 d8                	mov    eax,ebx
c0004b4f:	5b                   	pop    ebx
c0004b50:	5e                   	pop    esi
c0004b51:	5f                   	pop    edi
c0004b52:	c3                   	ret    

c0004b53 <f_getfree>:
c0004b53:	55                   	push   ebp
c0004b54:	31 c9                	xor    ecx,ecx
c0004b56:	57                   	push   edi
c0004b57:	56                   	push   esi
c0004b58:	53                   	push   ebx
c0004b59:	83 ec 2c             	sub    esp,0x2c
c0004b5c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b60:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b64:	e8 74 dc ff ff       	call   c00027dd <mount_volume>
c0004b69:	89 c7                	mov    edi,eax
c0004b6b:	85 c0                	test   eax,eax
c0004b6d:	0f 85 df 00 00 00    	jne    c0004c52 <f_getfree+0xff>
c0004b73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004b77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b7b:	89 30                	mov    DWORD PTR [eax],esi
c0004b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004b80:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004b83:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004b86:	39 d0                	cmp    eax,edx
c0004b88:	77 0b                	ja     c0004b95 <f_getfree+0x42>
c0004b8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004b8e:	89 01                	mov    DWORD PTR [ecx],eax
c0004b90:	e9 bd 00 00 00       	jmp    c0004c52 <f_getfree+0xff>
c0004b95:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004b98:	75 29                	jne    c0004bc3 <f_getfree+0x70>
c0004b9a:	bd 02 00 00 00       	mov    ebp,0x2
c0004b9f:	31 db                	xor    ebx,ebx
c0004ba1:	89 ea                	mov    edx,ebp
c0004ba3:	89 f0                	mov    eax,esi
c0004ba5:	e8 b6 e9 ff ff       	call   c0003560 <get_fat.isra.2>
c0004baa:	83 f8 ff             	cmp    eax,0xffffffff
c0004bad:	74 7d                	je     c0004c2c <f_getfree+0xd9>
c0004baf:	83 f8 01             	cmp    eax,0x1
c0004bb2:	74 7f                	je     c0004c33 <f_getfree+0xe0>
c0004bb4:	83 d3 00             	adc    ebx,0x0
c0004bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bbb:	45                   	inc    ebp
c0004bbc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004bbf:	77 e0                	ja     c0004ba1 <f_getfree+0x4e>
c0004bc1:	eb 79                	jmp    c0004c3c <f_getfree+0xe9>
c0004bc3:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004bc6:	31 db                	xor    ebx,ebx
c0004bc8:	31 f6                	xor    esi,esi
c0004bca:	85 f6                	test   esi,esi
c0004bcc:	75 18                	jne    c0004be6 <f_getfree+0x93>
c0004bce:	8d 42 01             	lea    eax,[edx+0x1]
c0004bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	e8 ac da ff ff       	call   c000268a <move_window>
c0004bde:	85 c0                	test   eax,eax
c0004be0:	75 58                	jne    c0004c3a <f_getfree+0xe7>
c0004be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004bea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bee:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004bf2:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004bf5:	75 13                	jne    c0004c0a <f_getfree+0xb7>
c0004bf7:	e8 27 d5 ff ff       	call   c0002123 <ld_word>
c0004bfc:	0f b7 c0             	movzx  eax,ax
c0004bff:	83 f8 01             	cmp    eax,0x1
c0004c02:	83 d3 00             	adc    ebx,0x0
c0004c05:	83 c6 02             	add    esi,0x2
c0004c08:	eb 13                	jmp    c0004c1d <f_getfree+0xca>
c0004c0a:	e8 21 d5 ff ff       	call   c0002130 <ld_dword>
c0004c0f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c14:	83 f8 01             	cmp    eax,0x1
c0004c17:	83 d3 00             	adc    ebx,0x0
c0004c1a:	83 c6 04             	add    esi,0x4
c0004c1d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c27:	4d                   	dec    ebp
c0004c28:	75 a0                	jne    c0004bca <f_getfree+0x77>
c0004c2a:	eb 10                	jmp    c0004c3c <f_getfree+0xe9>
c0004c2c:	bf 01 00 00 00       	mov    edi,0x1
c0004c31:	eb 09                	jmp    c0004c3c <f_getfree+0xe9>
c0004c33:	bf 02 00 00 00       	mov    edi,0x2
c0004c38:	eb 02                	jmp    c0004c3c <f_getfree+0xe9>
c0004c3a:	89 c7                	mov    edi,eax
c0004c3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c40:	89 18                	mov    DWORD PTR [eax],ebx
c0004c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c46:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c49:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004c4c:	83 ca 01             	or     edx,0x1
c0004c4f:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c52:	83 c4 2c             	add    esp,0x2c
c0004c55:	89 f8                	mov    eax,edi
c0004c57:	5b                   	pop    ebx
c0004c58:	5e                   	pop    esi
c0004c59:	5f                   	pop    edi
c0004c5a:	5d                   	pop    ebp
c0004c5b:	c3                   	ret    

c0004c5c <f_truncate>:
c0004c5c:	56                   	push   esi
c0004c5d:	53                   	push   ebx
c0004c5e:	83 ec 14             	sub    esp,0x14
c0004c61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c65:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c69:	89 d8                	mov    eax,ebx
c0004c6b:	e8 71 d9 ff ff       	call   c00025e1 <validate>
c0004c70:	89 c6                	mov    esi,eax
c0004c72:	85 c0                	test   eax,eax
c0004c74:	0f 85 c4 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c7a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c7e:	85 f6                	test   esi,esi
c0004c80:	0f 85 b8 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c86:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004c8a:	0f 84 a9 00 00 00    	je     c0004d39 <f_truncate+0xdd>
c0004c90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004c93:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004c96:	0f 83 a2 00 00 00    	jae    c0004d3e <f_truncate+0xe2>
c0004c9c:	85 c0                	test   eax,eax
c0004c9e:	75 15                	jne    c0004cb5 <f_truncate+0x59>
c0004ca0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ca3:	31 c9                	xor    ecx,ecx
c0004ca5:	89 d8                	mov    eax,ebx
c0004ca7:	e8 bf eb ff ff       	call   c000386b <remove_chain>
c0004cac:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cb3:	eb 35                	jmp    c0004cea <f_truncate+0x8e>
c0004cb5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cba:	e8 a1 e8 ff ff       	call   c0003560 <get_fat.isra.2>
c0004cbf:	89 c2                	mov    edx,eax
c0004cc1:	b8 01 00 00 00       	mov    eax,0x1
c0004cc6:	83 fa ff             	cmp    edx,0xffffffff
c0004cc9:	74 1f                	je     c0004cea <f_truncate+0x8e>
c0004ccb:	b8 02 00 00 00       	mov    eax,0x2
c0004cd0:	83 fa 01             	cmp    edx,0x1
c0004cd3:	74 15                	je     c0004cea <f_truncate+0x8e>
c0004cd5:	31 c0                	xor    eax,eax
c0004cd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cdb:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cde:	76 0a                	jbe    c0004cea <f_truncate+0x8e>
c0004ce0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ce3:	89 d8                	mov    eax,ebx
c0004ce5:	e8 81 eb ff ff       	call   c000386b <remove_chain>
c0004cea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ced:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004cf0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004cf3:	83 ca 40             	or     edx,0x40
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004cfb:	75 35                	jne    c0004d32 <f_truncate+0xd6>
c0004cfd:	80 e2 80             	and    dl,0x80
c0004d00:	74 3c                	je     c0004d3e <f_truncate+0xe2>
c0004d02:	6a 01                	push   0x1
c0004d04:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d0a:	50                   	push   eax
c0004d0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d0f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d13:	50                   	push   eax
c0004d14:	e8 d5 d3 ff ff       	call   c00020ee <disk_write>
c0004d19:	83 c4 10             	add    esp,0x10
c0004d1c:	85 c0                	test   eax,eax
c0004d1e:	75 0d                	jne    c0004d2d <f_truncate+0xd1>
c0004d20:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d23:	31 f6                	xor    esi,esi
c0004d25:	83 e0 7f             	and    eax,0x7f
c0004d28:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d2b:	eb 11                	jmp    c0004d3e <f_truncate+0xe2>
c0004d2d:	b8 01 00 00 00       	mov    eax,0x1
c0004d32:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d35:	89 c6                	mov    esi,eax
c0004d37:	eb 05                	jmp    c0004d3e <f_truncate+0xe2>
c0004d39:	be 07 00 00 00       	mov    esi,0x7
c0004d3e:	89 f0                	mov    eax,esi
c0004d40:	83 c4 14             	add    esp,0x14
c0004d43:	5b                   	pop    ebx
c0004d44:	5e                   	pop    esi
c0004d45:	c3                   	ret    

c0004d46 <f_unlink>:
c0004d46:	55                   	push   ebp
c0004d47:	b9 02 00 00 00       	mov    ecx,0x2
c0004d4c:	57                   	push   edi
c0004d4d:	56                   	push   esi
c0004d4e:	53                   	push   ebx
c0004d4f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d55:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d59:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d60:	e8 78 da ff ff       	call   c00027dd <mount_volume>
c0004d65:	85 c0                	test   eax,eax
c0004d67:	0f 85 f0 00 00 00    	jne    c0004e5d <f_unlink+0x117>
c0004d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d71:	83 ec 0c             	sub    esp,0xc
c0004d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d78:	68 00 02 00 00       	push   0x200
c0004d7d:	e8 ea 11 00 00       	call   c0005f6c <ff_memalloc>
c0004d82:	83 c4 10             	add    esp,0x10
c0004d85:	89 c3                	mov    ebx,eax
c0004d87:	b8 11 00 00 00       	mov    eax,0x11
c0004d8c:	85 db                	test   ebx,ebx
c0004d8e:	0f 84 c9 00 00 00    	je     c0004e5d <f_unlink+0x117>
c0004d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d98:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004d9f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004da2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004da6:	e8 7c ef ff ff       	call   c0003d27 <follow_path>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 96 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004db3:	b8 06 00 00 00       	mov    eax,0x6
c0004db8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dbd:	0f 85 86 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004dc3:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004dc8:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dce:	74 07                	je     c0004dd7 <f_unlink+0x91>
c0004dd0:	b8 07 00 00 00       	mov    eax,0x7
c0004dd5:	eb 72                	jmp    c0004e49 <f_unlink+0x103>
c0004dd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ddb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ddf:	8a 07                	mov    al,BYTE PTR [edi]
c0004de1:	e8 29 e7 ff ff       	call   c000350f <ld_clust.isra.0>
c0004de6:	83 e5 10             	and    ebp,0x10
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	75 0f                	jne    c0004dfc <f_unlink+0xb6>
c0004ded:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004df1:	e8 95 ed ff ff       	call   c0003b8b <dir_remove>
c0004df6:	85 c0                	test   eax,eax
c0004df8:	74 2f                	je     c0004e29 <f_unlink+0xe3>
c0004dfa:	eb 4d                	jmp    c0004e49 <f_unlink+0x103>
c0004dfc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e00:	31 d2                	xor    edx,edx
c0004e02:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e06:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e0a:	e8 55 e8 ff ff       	call   c0003664 <dir_sdi>
c0004e0f:	85 c0                	test   eax,eax
c0004e11:	75 36                	jne    c0004e49 <f_unlink+0x103>
c0004e13:	31 d2                	xor    edx,edx
c0004e15:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e19:	e8 45 ec ff ff       	call   c0003a63 <dir_read>
c0004e1e:	85 c0                	test   eax,eax
c0004e20:	74 ae                	je     c0004dd0 <f_unlink+0x8a>
c0004e22:	83 f8 04             	cmp    eax,0x4
c0004e25:	75 22                	jne    c0004e49 <f_unlink+0x103>
c0004e27:	eb c4                	jmp    c0004ded <f_unlink+0xa7>
c0004e29:	85 f6                	test   esi,esi
c0004e2b:	75 0b                	jne    c0004e38 <f_unlink+0xf2>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	e8 8b e2 ff ff       	call   c00030c1 <sync_fs>
c0004e36:	eb 11                	jmp    c0004e49 <f_unlink+0x103>
c0004e38:	31 c9                	xor    ecx,ecx
c0004e3a:	89 f2                	mov    edx,esi
c0004e3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e40:	e8 26 ea ff ff       	call   c000386b <remove_chain>
c0004e45:	85 c0                	test   eax,eax
c0004e47:	74 e4                	je     c0004e2d <f_unlink+0xe7>
c0004e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4d:	83 ec 0c             	sub    esp,0xc
c0004e50:	53                   	push   ebx
c0004e51:	e8 2e 11 00 00       	call   c0005f84 <ff_memfree>
c0004e56:	83 c4 10             	add    esp,0x10
c0004e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5d:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e63:	5b                   	pop    ebx
c0004e64:	5e                   	pop    esi
c0004e65:	5f                   	pop    edi
c0004e66:	5d                   	pop    ebp
c0004e67:	c3                   	ret    

c0004e68 <f_mkdir>:
c0004e68:	57                   	push   edi
c0004e69:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6e:	56                   	push   esi
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 50             	sub    esp,0x50
c0004e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e7b:	e8 5d d9 ff ff       	call   c00027dd <mount_volume>
c0004e80:	89 c3                	mov    ebx,eax
c0004e82:	85 c0                	test   eax,eax
c0004e84:	0f 85 70 01 00 00    	jne    c0004ffa <f_mkdir+0x192>
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	bb 11 00 00 00       	mov    ebx,0x11
c0004e93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e97:	83 ec 0c             	sub    esp,0xc
c0004e9a:	68 00 02 00 00       	push   0x200
c0004e9f:	e8 c8 10 00 00       	call   c0005f6c <ff_memalloc>
c0004ea4:	83 c4 10             	add    esp,0x10
c0004ea7:	89 c7                	mov    edi,eax
c0004ea9:	85 c0                	test   eax,eax
c0004eab:	0f 84 49 01 00 00    	je     c0004ffa <f_mkdir+0x192>
c0004eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eb5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004eb9:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ebc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec0:	e8 62 ee ff ff       	call   c0003d27 <follow_path>
c0004ec5:	89 c3                	mov    ebx,eax
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 3e                	je     c0004f09 <f_mkdir+0xa1>
c0004ecb:	83 f8 04             	cmp    eax,0x4
c0004ece:	75 3e                	jne    c0004f0e <f_mkdir+0xa6>
c0004ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed4:	31 d2                	xor    edx,edx
c0004ed6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004ede:	e8 49 e8 ff ff       	call   c000372c <create_chain>
c0004ee3:	89 c6                	mov    esi,eax
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	74 0c                	je     c0004ef5 <f_mkdir+0x8d>
c0004ee9:	bb 02 00 00 00       	mov    ebx,0x2
c0004eee:	83 f8 01             	cmp    eax,0x1
c0004ef1:	74 07                	je     c0004efa <f_mkdir+0x92>
c0004ef3:	eb 2a                	jmp    c0004f1f <f_mkdir+0xb7>
c0004ef5:	bb 07 00 00 00       	mov    ebx,0x7
c0004efa:	31 c9                	xor    ecx,ecx
c0004efc:	89 f2                	mov    edx,esi
c0004efe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f02:	e8 64 e9 ff ff       	call   c000386b <remove_chain>
c0004f07:	eb 05                	jmp    c0004f0e <f_mkdir+0xa6>
c0004f09:	bb 08 00 00 00       	mov    ebx,0x8
c0004f0e:	83 ec 0c             	sub    esp,0xc
c0004f11:	57                   	push   edi
c0004f12:	e8 6d 10 00 00       	call   c0005f84 <ff_memfree>
c0004f17:	83 c4 10             	add    esp,0x10
c0004f1a:	e9 db 00 00 00       	jmp    c0004ffa <f_mkdir+0x192>
c0004f1f:	bb 01 00 00 00       	mov    ebx,0x1
c0004f24:	83 f8 ff             	cmp    eax,0xffffffff
c0004f27:	74 d1                	je     c0004efa <f_mkdir+0x92>
c0004f29:	89 f2                	mov    edx,esi
c0004f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f2f:	e8 f1 dc ff ff       	call   c0002c25 <dir_clear>
c0004f34:	89 c3                	mov    ebx,eax
c0004f36:	85 c0                	test   eax,eax
c0004f38:	75 c0                	jne    c0004efa <f_mkdir+0x92>
c0004f3a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f43:	ba 20 00 00 00       	mov    edx,0x20
c0004f48:	83 c0 34             	add    eax,0x34
c0004f4b:	e8 14 d2 ff ff       	call   c0002164 <mem_set>
c0004f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f5d:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004f61:	83 c0 4a             	add    eax,0x4a
c0004f64:	e8 e3 d1 ff ff       	call   c000214c <st_dword>
c0004f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f6d:	89 f1                	mov    ecx,esi
c0004f6f:	8d 50 34             	lea    edx,[eax+0x34]
c0004f72:	e8 c1 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f7b:	b9 20 00 00 00       	mov    ecx,0x20
c0004f80:	8d 50 34             	lea    edx,[eax+0x34]
c0004f83:	83 c0 54             	add    eax,0x54
c0004f86:	e8 c4 d1 ff ff       	call   c000214f <mem_cpy>
c0004f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004f93:	8d 50 54             	lea    edx,[eax+0x54]
c0004f96:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004f9a:	e8 99 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fa3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fab:	e8 0c ee ff ff       	call   c0003dbc <dir_register>
c0004fb0:	89 c3                	mov    ebx,eax
c0004fb2:	85 c0                	test   eax,eax
c0004fb4:	0f 85 40 ff ff ff    	jne    c0004efa <f_mkdir+0x92>
c0004fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fbe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fc3:	83 c0 16             	add    eax,0x16
c0004fc6:	e8 81 d1 ff ff       	call   c000214c <st_dword>
c0004fcb:	89 f1                	mov    ecx,esi
c0004fcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fd5:	e8 5e e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004fda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fde:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fe6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fee:	e8 ce e0 ff ff       	call   c00030c1 <sync_fs>
c0004ff3:	89 c3                	mov    ebx,eax
c0004ff5:	e9 14 ff ff ff       	jmp    c0004f0e <f_mkdir+0xa6>
c0004ffa:	83 c4 50             	add    esp,0x50
c0004ffd:	89 d8                	mov    eax,ebx
c0004fff:	5b                   	pop    ebx
c0005000:	5e                   	pop    esi
c0005001:	5f                   	pop    edi
c0005002:	c3                   	ret    

c0005003 <f_rename>:
c0005003:	57                   	push   edi
c0005004:	56                   	push   esi
c0005005:	53                   	push   ebx
c0005006:	81 ec a0 00 00 00    	sub    esp,0xa0
c000500c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0005013:	e8 7c d5 ff ff       	call   c0002594 <get_ldnumber>
c0005018:	b9 02 00 00 00       	mov    ecx,0x2
c000501d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005021:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005028:	e8 b0 d7 ff ff       	call   c00027dd <mount_volume>
c000502d:	85 c0                	test   eax,eax
c000502f:	0f 85 7c 01 00 00    	jne    c00051b1 <f_rename+0x1ae>
c0005035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005039:	83 ec 0c             	sub    esp,0xc
c000503c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0005040:	68 00 02 00 00       	push   0x200
c0005045:	e8 22 0f 00 00       	call   c0005f6c <ff_memalloc>
c000504a:	83 c4 10             	add    esp,0x10
c000504d:	89 c6                	mov    esi,eax
c000504f:	b8 11 00 00 00       	mov    eax,0x11
c0005054:	85 f6                	test   esi,esi
c0005056:	0f 84 55 01 00 00    	je     c00051b1 <f_rename+0x1ae>
c000505c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005060:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005067:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000506a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000506e:	e8 b4 ec ff ff       	call   c0003d27 <follow_path>
c0005073:	85 c0                	test   eax,eax
c0005075:	0f 85 22 01 00 00    	jne    c000519d <f_rename+0x19a>
c000507b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000507f:	b8 06 00 00 00       	mov    eax,0x6
c0005084:	80 e2 a0             	and    dl,0xa0
c0005087:	0f 85 10 01 00 00    	jne    c000519d <f_rename+0x19a>
c000508d:	b9 20 00 00 00       	mov    ecx,0x20
c0005092:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005096:	8d 44 24 20          	lea    eax,[esp+0x20]
c000509a:	e8 b0 d0 ff ff       	call   c000214f <mem_cpy>
c000509f:	b9 30 00 00 00       	mov    ecx,0x30
c00050a4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050a8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050ac:	e8 9e d0 ff ff       	call   c000214f <mem_cpy>
c00050b1:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050b8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050bc:	e8 66 ec ff ff       	call   c0003d27 <follow_path>
c00050c1:	85 c0                	test   eax,eax
c00050c3:	75 20                	jne    c00050e5 <f_rename+0xe2>
c00050c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050c9:	b8 08 00 00 00       	mov    eax,0x8
c00050ce:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050d2:	0f 85 c5 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050d8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050dc:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050e3:	eb 03                	jmp    c00050e8 <f_rename+0xe5>
c00050e5:	83 f8 04             	cmp    eax,0x4
c00050e8:	0f 85 af 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ee:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050f2:	e8 c5 ec ff ff       	call   c0003dbc <dir_register>
c00050f7:	85 c0                	test   eax,eax
c00050f9:	0f 85 9e 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ff:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005106:	b9 13 00 00 00       	mov    ecx,0x13
c000510b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000510e:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005112:	e8 38 d0 ff ff       	call   c000214f <mem_cpy>
c0005117:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c000511b:	a8 10                	test   al,0x10
c000511d:	75 03                	jne    c0005122 <f_rename+0x11f>
c000511f:	83 c8 20             	or     eax,0x20
c0005122:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005129:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000512d:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0005131:	74 54                	je     c0005187 <f_rename+0x184>
c0005133:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005137:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c000513b:	74 4a                	je     c0005187 <f_rename+0x184>
c000513d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005141:	89 da                	mov    edx,ebx
c0005143:	8a 07                	mov    al,BYTE PTR [edi]
c0005145:	e8 c5 e3 ff ff       	call   c000350f <ld_clust.isra.0>
c000514a:	89 c2                	mov    edx,eax
c000514c:	89 f8                	mov    eax,edi
c000514e:	e8 27 d2 ff ff       	call   c000237a <clst2sect>
c0005153:	89 c2                	mov    edx,eax
c0005155:	b8 02 00 00 00       	mov    eax,0x2
c000515a:	85 d2                	test   edx,edx
c000515c:	74 3f                	je     c000519d <f_rename+0x19a>
c000515e:	89 f8                	mov    eax,edi
c0005160:	e8 25 d5 ff ff       	call   c000268a <move_window>
c0005165:	85 c0                	test   eax,eax
c0005167:	75 34                	jne    c000519d <f_rename+0x19a>
c0005169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516d:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005171:	75 14                	jne    c0005187 <f_rename+0x184>
c0005173:	8d 50 54             	lea    edx,[eax+0x54]
c0005176:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000517a:	e8 b9 e3 ff ff       	call   c0003538 <st_clust.isra.1>
c000517f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005183:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005187:	8d 44 24 40          	lea    eax,[esp+0x40]
c000518b:	e8 fb e9 ff ff       	call   c0003b8b <dir_remove>
c0005190:	85 c0                	test   eax,eax
c0005192:	75 09                	jne    c000519d <f_rename+0x19a>
c0005194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005198:	e8 24 df ff ff       	call   c00030c1 <sync_fs>
c000519d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	56                   	push   esi
c00051a5:	e8 da 0d 00 00       	call   c0005f84 <ff_memfree>
c00051aa:	83 c4 10             	add    esp,0x10
c00051ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b1:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051b7:	5b                   	pop    ebx
c00051b8:	5e                   	pop    esi
c00051b9:	5f                   	pop    edi
c00051ba:	c3                   	ret    

c00051bb <f_chmod>:
c00051bb:	57                   	push   edi
c00051bc:	b9 02 00 00 00       	mov    ecx,0x2
c00051c1:	56                   	push   esi
c00051c2:	53                   	push   ebx
c00051c3:	83 ec 50             	sub    esp,0x50
c00051c6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ca:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051d6:	e8 02 d6 ff ff       	call   c00027dd <mount_volume>
c00051db:	85 c0                	test   eax,eax
c00051dd:	0f 85 81 00 00 00    	jne    c0005264 <f_chmod+0xa9>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	83 ec 0c             	sub    esp,0xc
c00051ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00051ee:	68 00 02 00 00       	push   0x200
c00051f3:	e8 74 0d 00 00       	call   c0005f6c <ff_memalloc>
c00051f8:	83 c4 10             	add    esp,0x10
c00051fb:	89 c6                	mov    esi,eax
c00051fd:	b8 11 00 00 00       	mov    eax,0x11
c0005202:	85 f6                	test   esi,esi
c0005204:	74 5e                	je     c0005264 <f_chmod+0xa9>
c0005206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000520e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005211:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005215:	e8 0d eb ff ff       	call   c0003d27 <follow_path>
c000521a:	85 c0                	test   eax,eax
c000521c:	75 32                	jne    c0005250 <f_chmod+0x95>
c000521e:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005222:	b8 06 00 00 00       	mov    eax,0x6
c0005227:	80 e2 a0             	and    dl,0xa0
c000522a:	75 24                	jne    c0005250 <f_chmod+0x95>
c000522c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005230:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005233:	31 d7                	xor    edi,edx
c0005235:	21 fb                	and    ebx,edi
c0005237:	83 e3 27             	and    ebx,0x27
c000523a:	31 d3                	xor    ebx,edx
c000523c:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000523f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005243:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000524b:	e8 71 de ff ff       	call   c00030c1 <sync_fs>
c0005250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005254:	83 ec 0c             	sub    esp,0xc
c0005257:	56                   	push   esi
c0005258:	e8 27 0d 00 00       	call   c0005f84 <ff_memfree>
c000525d:	83 c4 10             	add    esp,0x10
c0005260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005264:	83 c4 50             	add    esp,0x50
c0005267:	5b                   	pop    ebx
c0005268:	5e                   	pop    esi
c0005269:	5f                   	pop    edi
c000526a:	c3                   	ret    

c000526b <f_utime>:
c000526b:	56                   	push   esi
c000526c:	b9 02 00 00 00       	mov    ecx,0x2
c0005271:	53                   	push   ebx
c0005272:	83 ec 54             	sub    esp,0x54
c0005275:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005279:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000527d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005281:	e8 57 d5 ff ff       	call   c00027dd <mount_volume>
c0005286:	85 c0                	test   eax,eax
c0005288:	0f 85 87 00 00 00    	jne    c0005315 <f_utime+0xaa>
c000528e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005292:	83 ec 0c             	sub    esp,0xc
c0005295:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005299:	68 00 02 00 00       	push   0x200
c000529e:	e8 c9 0c 00 00       	call   c0005f6c <ff_memalloc>
c00052a3:	83 c4 10             	add    esp,0x10
c00052a6:	89 c3                	mov    ebx,eax
c00052a8:	b8 11 00 00 00       	mov    eax,0x11
c00052ad:	85 db                	test   ebx,ebx
c00052af:	74 64                	je     c0005315 <f_utime+0xaa>
c00052b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052b9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052c0:	e8 62 ea ff ff       	call   c0003d27 <follow_path>
c00052c5:	85 c0                	test   eax,eax
c00052c7:	75 38                	jne    c0005301 <f_utime+0x96>
c00052c9:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052cd:	b8 06 00 00 00       	mov    eax,0x6
c00052d2:	80 e2 a0             	and    dl,0xa0
c00052d5:	75 2a                	jne    c0005301 <f_utime+0x96>
c00052d7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052db:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052df:	c1 e2 10             	shl    edx,0x10
c00052e2:	09 c2                	or     edx,eax
c00052e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052e8:	83 c0 16             	add    eax,0x16
c00052eb:	e8 5c ce ff ff       	call   c000214c <st_dword>
c00052f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00052f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052fc:	e8 c0 dd ff ff       	call   c00030c1 <sync_fs>
c0005301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	53                   	push   ebx
c0005309:	e8 76 0c 00 00       	call   c0005f84 <ff_memfree>
c000530e:	83 c4 10             	add    esp,0x10
c0005311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005315:	83 c4 54             	add    esp,0x54
c0005318:	5b                   	pop    ebx
c0005319:	5e                   	pop    esi
c000531a:	c3                   	ret    

c000531b <f_getlabel>:
c000531b:	55                   	push   ebp
c000531c:	31 c9                	xor    ecx,ecx
c000531e:	57                   	push   edi
c000531f:	56                   	push   esi
c0005320:	53                   	push   ebx
c0005321:	83 ec 5c             	sub    esp,0x5c
c0005324:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005328:	8d 44 24 70          	lea    eax,[esp+0x70]
c000532c:	e8 ac d4 ff ff       	call   c00027dd <mount_volume>
c0005331:	89 c6                	mov    esi,eax
c0005333:	85 c0                	test   eax,eax
c0005335:	0f 85 27 01 00 00    	jne    c0005462 <f_getlabel+0x147>
c000533b:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0005340:	0f 84 d0 00 00 00    	je     c0005416 <f_getlabel+0xfb>
c0005346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000534a:	31 d2                	xor    edx,edx
c000534c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005350:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005358:	8d 44 24 20          	lea    eax,[esp+0x20]
c000535c:	e8 03 e3 ff ff       	call   c0003664 <dir_sdi>
c0005361:	85 c0                	test   eax,eax
c0005363:	0f 85 a1 00 00 00    	jne    c000540a <f_getlabel+0xef>
c0005369:	ba 01 00 00 00       	mov    edx,0x1
c000536e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005372:	e8 ec e6 ff ff       	call   c0003a63 <dir_read>
c0005377:	85 c0                	test   eax,eax
c0005379:	0f 85 8b 00 00 00    	jne    c000540a <f_getlabel+0xef>
c000537f:	31 db                	xor    ebx,ebx
c0005381:	31 c9                	xor    ecx,ecx
c0005383:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005387:	8d 79 01             	lea    edi,[ecx+0x1]
c000538a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000538f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005398:	e8 06 ce ff ff       	call   c00021a3 <dbc_1st>
c000539d:	85 c0                	test   eax,eax
c000539f:	74 16                	je     c00053b7 <f_getlabel+0x9c>
c00053a1:	83 ff 0b             	cmp    edi,0xb
c00053a4:	74 11                	je     c00053b7 <f_getlabel+0x9c>
c00053a6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c00053ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00053af:	8d 79 02             	lea    edi,[ecx+0x2]
c00053b2:	c1 e0 08             	shl    eax,0x8
c00053b5:	09 c2                	or     edx,eax
c00053b7:	0f b7 d2             	movzx  edx,dx
c00053ba:	50                   	push   eax
c00053bb:	50                   	push   eax
c00053bc:	68 b5 01 00 00       	push   0x1b5
c00053c1:	52                   	push   edx
c00053c2:	e8 75 0c 00 00       	call   c000603c <ff_oem2uni>
c00053c7:	83 c4 10             	add    esp,0x10
c00053ca:	0f b7 c0             	movzx  eax,ax
c00053cd:	85 c0                	test   eax,eax
c00053cf:	74 22                	je     c00053f3 <f_getlabel+0xd8>
c00053d1:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00053d5:	b9 04 00 00 00       	mov    ecx,0x4
c00053da:	01 da                	add    edx,ebx
c00053dc:	e8 a0 ce ff ff       	call   c0002281 <put_utf>
c00053e1:	0f b6 c0             	movzx  eax,al
c00053e4:	85 c0                	test   eax,eax
c00053e6:	74 0b                	je     c00053f3 <f_getlabel+0xd8>
c00053e8:	01 c3                	add    ebx,eax
c00053ea:	83 ff 0b             	cmp    edi,0xb
c00053ed:	74 06                	je     c00053f5 <f_getlabel+0xda>
c00053ef:	89 f9                	mov    ecx,edi
c00053f1:	eb 90                	jmp    c0005383 <f_getlabel+0x68>
c00053f3:	31 db                	xor    ebx,ebx
c00053f5:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00053f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00053fc:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005400:	74 14                	je     c0005416 <f_getlabel+0xfb>
c0005402:	4b                   	dec    ebx
c0005403:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0005406:	74 f1                	je     c00053f9 <f_getlabel+0xde>
c0005408:	eb 0c                	jmp    c0005416 <f_getlabel+0xfb>
c000540a:	83 f8 04             	cmp    eax,0x4
c000540d:	75 51                	jne    c0005460 <f_getlabel+0x145>
c000540f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005416:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000541b:	74 45                	je     c0005462 <f_getlabel+0x147>
c000541d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005421:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005424:	e8 61 d2 ff ff       	call   c000268a <move_window>
c0005429:	89 c6                	mov    esi,eax
c000542b:	85 c0                	test   eax,eax
c000542d:	75 33                	jne    c0005462 <f_getlabel+0x147>
c000542f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005433:	b8 43 00 00 00       	mov    eax,0x43
c0005438:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000543b:	83 f9 03             	cmp    ecx,0x3
c000543e:	74 0f                	je     c000544f <f_getlabel+0x134>
c0005440:	31 c0                	xor    eax,eax
c0005442:	83 f9 04             	cmp    ecx,0x4
c0005445:	0f 94 c0             	sete   al
c0005448:	48                   	dec    eax
c0005449:	83 e0 c3             	and    eax,0xffffffc3
c000544c:	83 c0 64             	add    eax,0x64
c000544f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005453:	e8 d8 cc ff ff       	call   c0002130 <ld_dword>
c0005458:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000545c:	89 07                	mov    DWORD PTR [edi],eax
c000545e:	eb 02                	jmp    c0005462 <f_getlabel+0x147>
c0005460:	89 c6                	mov    esi,eax
c0005462:	83 c4 5c             	add    esp,0x5c
c0005465:	89 f0                	mov    eax,esi
c0005467:	5b                   	pop    ebx
c0005468:	5e                   	pop    esi
c0005469:	5f                   	pop    edi
c000546a:	5d                   	pop    ebp
c000546b:	c3                   	ret    

c000546c <f_setlabel>:
c000546c:	57                   	push   edi
c000546d:	b9 02 00 00 00       	mov    ecx,0x2
c0005472:	56                   	push   esi
c0005473:	53                   	push   ebx
c0005474:	83 ec 50             	sub    esp,0x50
c0005477:	8d 54 24 04          	lea    edx,[esp+0x4]
c000547b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000547f:	e8 59 d3 ff ff       	call   c00027dd <mount_volume>
c0005484:	89 c6                	mov    esi,eax
c0005486:	85 c0                	test   eax,eax
c0005488:	0f 85 65 01 00 00    	jne    c00055f3 <f_setlabel+0x187>
c000548e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005493:	ba 20 00 00 00       	mov    edx,0x20
c0005498:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000549c:	31 db                	xor    ebx,ebx
c000549e:	e8 c1 cc ff ff       	call   c0002164 <mem_set>
c00054a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054a7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054aa:	76 5d                	jbe    c0005509 <f_setlabel+0x9d>
c00054ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054b0:	e8 f4 cc ff ff       	call   c00021a9 <tchar2uni>
c00054b5:	3d ff ff 00 00       	cmp    eax,0xffff
c00054ba:	76 0a                	jbe    c00054c6 <f_setlabel+0x5a>
c00054bc:	be 06 00 00 00       	mov    esi,0x6
c00054c1:	e9 2d 01 00 00       	jmp    c00055f3 <f_setlabel+0x187>
c00054c6:	83 ec 0c             	sub    esp,0xc
c00054c9:	50                   	push   eax
c00054ca:	e8 e5 0b 00 00       	call   c00060b4 <ff_wtoupper>
c00054cf:	5a                   	pop    edx
c00054d0:	59                   	pop    ecx
c00054d1:	68 b5 01 00 00       	push   0x1b5
c00054d6:	50                   	push   eax
c00054d7:	e8 c0 0a 00 00       	call   c0005f9c <ff_uni2oem>
c00054dc:	83 c4 10             	add    esp,0x10
c00054df:	0f b7 f0             	movzx  esi,ax
c00054e2:	89 f7                	mov    edi,esi
c00054e4:	85 f6                	test   esi,esi
c00054e6:	74 d4                	je     c00054bc <f_setlabel+0x50>
c00054e8:	89 f2                	mov    edx,esi
c00054ea:	b8 10 fc 02 c0       	mov    eax,0xc002fc10
c00054ef:	e8 9e cc ff ff       	call   c0002192 <chk_chr>
c00054f4:	85 c0                	test   eax,eax
c00054f6:	75 c4                	jne    c00054bc <f_setlabel+0x50>
c00054f8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00054fe:	0f 87 c9 00 00 00    	ja     c00055cd <f_setlabel+0x161>
c0005504:	e9 e0 00 00 00       	jmp    c00055e9 <f_setlabel+0x17d>
c0005509:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000550e:	74 ac                	je     c00054bc <f_setlabel+0x50>
c0005510:	85 db                	test   ebx,ebx
c0005512:	74 0e                	je     c0005522 <f_setlabel+0xb6>
c0005514:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005517:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c000551c:	75 04                	jne    c0005522 <f_setlabel+0xb6>
c000551e:	89 c3                	mov    ebx,eax
c0005520:	eb ee                	jmp    c0005510 <f_setlabel+0xa4>
c0005522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005526:	31 d2                	xor    edx,edx
c0005528:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000552c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005534:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005538:	e8 27 e1 ff ff       	call   c0003664 <dir_sdi>
c000553d:	89 c6                	mov    esi,eax
c000553f:	85 c0                	test   eax,eax
c0005541:	0f 85 ac 00 00 00    	jne    c00055f3 <f_setlabel+0x187>
c0005547:	ba 01 00 00 00       	mov    edx,0x1
c000554c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005550:	e8 0e e5 ff ff       	call   c0003a63 <dir_read>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 18                	jne    c0005571 <f_setlabel+0x105>
c0005559:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000555d:	85 db                	test   ebx,ebx
c000555f:	74 0b                	je     c000556c <f_setlabel+0x100>
c0005561:	b9 0b 00 00 00       	mov    ecx,0xb
c0005566:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000556a:	eb 47                	jmp    c00055b3 <f_setlabel+0x147>
c000556c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000556f:	eb 47                	jmp    c00055b8 <f_setlabel+0x14c>
c0005571:	83 f8 04             	cmp    eax,0x4
c0005574:	75 53                	jne    c00055c9 <f_setlabel+0x15d>
c0005576:	85 db                	test   ebx,ebx
c0005578:	74 79                	je     c00055f3 <f_setlabel+0x187>
c000557a:	ba 01 00 00 00       	mov    edx,0x1
c000557f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005583:	e8 76 e4 ff ff       	call   c00039fe <dir_alloc>
c0005588:	89 c6                	mov    esi,eax
c000558a:	85 c0                	test   eax,eax
c000558c:	75 65                	jne    c00055f3 <f_setlabel+0x187>
c000558e:	b9 20 00 00 00       	mov    ecx,0x20
c0005593:	31 d2                	xor    edx,edx
c0005595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005599:	e8 c6 cb ff ff       	call   c0002164 <mem_set>
c000559e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055a2:	b9 0b 00 00 00       	mov    ecx,0xb
c00055a7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ab:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b3:	e8 97 cb ff ff       	call   c000214f <mem_cpy>
c00055b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055c4:	e8 f8 da ff ff       	call   c00030c1 <sync_fs>
c00055c9:	89 c6                	mov    esi,eax
c00055cb:	eb 26                	jmp    c00055f3 <f_setlabel+0x187>
c00055cd:	83 fb 09             	cmp    ebx,0x9
c00055d0:	0f 87 e6 fe ff ff    	ja     c00054bc <f_setlabel+0x50>
c00055d6:	89 f0                	mov    eax,esi
c00055d8:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055dc:	43                   	inc    ebx
c00055dd:	89 f8                	mov    eax,edi
c00055df:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00055e3:	43                   	inc    ebx
c00055e4:	e9 ba fe ff ff       	jmp    c00054a3 <f_setlabel+0x37>
c00055e9:	83 fb 0a             	cmp    ebx,0xa
c00055ec:	76 ef                	jbe    c00055dd <f_setlabel+0x171>
c00055ee:	e9 c9 fe ff ff       	jmp    c00054bc <f_setlabel+0x50>
c00055f3:	83 c4 50             	add    esp,0x50
c00055f6:	89 f0                	mov    eax,esi
c00055f8:	5b                   	pop    ebx
c00055f9:	5e                   	pop    esi
c00055fa:	5f                   	pop    edi
c00055fb:	c3                   	ret    

c00055fc <f_expand>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	53                   	push   ebx
c0005600:	83 ec 2c             	sub    esp,0x2c
c0005603:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005607:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000560b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000560f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005613:	89 d8                	mov    eax,ebx
c0005615:	e8 c7 cf ff ff       	call   c00025e1 <validate>
c000561a:	89 c6                	mov    esi,eax
c000561c:	85 c0                	test   eax,eax
c000561e:	0f 85 3b 01 00 00    	jne    c000575f <f_expand+0x163>
c0005624:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005628:	85 f6                	test   esi,esi
c000562a:	0f 85 2f 01 00 00    	jne    c000575f <f_expand+0x163>
c0005630:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005635:	75 0a                	jne    c0005641 <f_expand+0x45>
c0005637:	be 07 00 00 00       	mov    esi,0x7
c000563c:	e9 1e 01 00 00       	jmp    c000575f <f_expand+0x163>
c0005641:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005645:	75 f0                	jne    c0005637 <f_expand+0x3b>
c0005647:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000564b:	74 ea                	je     c0005637 <f_expand+0x3b>
c000564d:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005651:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005655:	c1 e1 09             	shl    ecx,0x9
c0005658:	8d 41 ff             	lea    eax,[ecx-0x1]
c000565b:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000565f:	0f 95 c0             	setne  al
c0005662:	31 d2                	xor    edx,edx
c0005664:	0f b6 c0             	movzx  eax,al
c0005667:	89 c7                	mov    edi,eax
c0005669:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000566d:	f7 f1                	div    ecx
c000566f:	01 f8                	add    eax,edi
c0005671:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005674:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005678:	83 ff 01             	cmp    edi,0x1
c000567b:	76 05                	jbe    c0005682 <f_expand+0x86>
c000567d:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005680:	77 05                	ja     c0005687 <f_expand+0x8b>
c0005682:	bf 02 00 00 00       	mov    edi,0x2
c0005687:	89 3c 24             	mov    DWORD PTR [esp],edi
c000568a:	89 fd                	mov    ebp,edi
c000568c:	31 c9                	xor    ecx,ecx
c000568e:	89 ea                	mov    edx,ebp
c0005690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005696:	45                   	inc    ebp
c0005697:	e8 c4 de ff ff       	call   c0003560 <get_fat.isra.2>
c000569c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056a4:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056a7:	77 05                	ja     c00056ae <f_expand+0xb2>
c00056a9:	bd 02 00 00 00       	mov    ebp,0x2
c00056ae:	83 f8 01             	cmp    eax,0x1
c00056b1:	74 20                	je     c00056d3 <f_expand+0xd7>
c00056b3:	83 f8 ff             	cmp    eax,0xffffffff
c00056b6:	74 25                	je     c00056dd <f_expand+0xe1>
c00056b8:	85 c0                	test   eax,eax
c00056ba:	75 09                	jne    c00056c5 <f_expand+0xc9>
c00056bc:	41                   	inc    ecx
c00056bd:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056c1:	75 07                	jne    c00056ca <f_expand+0xce>
c00056c3:	eb 1f                	jmp    c00056e4 <f_expand+0xe8>
c00056c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056c8:	31 c9                	xor    ecx,ecx
c00056ca:	39 fd                	cmp    ebp,edi
c00056cc:	75 c0                	jne    c000568e <f_expand+0x92>
c00056ce:	e9 64 ff ff ff       	jmp    c0005637 <f_expand+0x3b>
c00056d3:	be 02 00 00 00       	mov    esi,0x2
c00056d8:	e9 82 00 00 00       	jmp    c000575f <f_expand+0x163>
c00056dd:	be 01 00 00 00       	mov    esi,0x1
c00056e2:	eb 7b                	jmp    c000575f <f_expand+0x163>
c00056e4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00056e9:	74 2b                	je     c0005716 <f_expand+0x11a>
c00056eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00056ee:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00056f2:	85 ed                	test   ebp,ebp
c00056f4:	74 24                	je     c000571a <f_expand+0x11e>
c00056f6:	83 c9 ff             	or     ecx,0xffffffff
c00056f9:	83 fd 01             	cmp    ebp,0x1
c00056fc:	74 03                	je     c0005701 <f_expand+0x105>
c00056fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005701:	89 fa                	mov    edx,edi
c0005703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005707:	e8 c2 d3 ff ff       	call   c0002ace <put_fat>
c000570c:	85 c0                	test   eax,eax
c000570e:	75 4d                	jne    c000575d <f_expand+0x161>
c0005710:	89 f8                	mov    eax,edi
c0005712:	4d                   	dec    ebp
c0005713:	47                   	inc    edi
c0005714:	eb dc                	jmp    c00056f2 <f_expand+0xf6>
c0005716:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005719:	48                   	dec    eax
c000571a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000571e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005723:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005726:	74 37                	je     c000575f <f_expand+0x163>
c0005728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000572b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000572e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005732:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005735:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005738:	83 c8 40             	or     eax,0x40
c000573b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000573e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005741:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005744:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005747:	39 c8                	cmp    eax,ecx
c0005749:	77 14                	ja     c000575f <f_expand+0x163>
c000574b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000574f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005752:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005755:	83 c8 01             	or     eax,0x1
c0005758:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000575b:	eb 02                	jmp    c000575f <f_expand+0x163>
c000575d:	89 c6                	mov    esi,eax
c000575f:	83 c4 2c             	add    esp,0x2c
c0005762:	89 f0                	mov    eax,esi
c0005764:	5b                   	pop    ebx
c0005765:	5e                   	pop    esi
c0005766:	5f                   	pop    edi
c0005767:	5d                   	pop    ebp
c0005768:	c3                   	ret    

c0005769 <f_mkfs>:
c0005769:	55                   	push   ebp
c000576a:	57                   	push   edi
c000576b:	56                   	push   esi
c000576c:	be 0b 00 00 00       	mov    esi,0xb
c0005771:	53                   	push   ebx
c0005772:	83 ec 5c             	sub    esp,0x5c
c0005775:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005779:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000577d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005781:	e8 0e ce ff ff       	call   c0002594 <get_ldnumber>
c0005786:	85 c0                	test   eax,eax
c0005788:	0f 88 d1 07 00 00    	js     c0005f5f <f_mkfs+0x7f6>
c000578e:	8b 14 85 80 7c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8380]
c0005795:	85 d2                	test   edx,edx
c0005797:	74 03                	je     c000579c <f_mkfs+0x33>
c0005799:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000579c:	85 db                	test   ebx,ebx
c000579e:	75 05                	jne    c00057a5 <f_mkfs+0x3c>
c00057a0:	bb 00 fc 02 c0       	mov    ebx,0xc002fc00
c00057a5:	83 ec 0c             	sub    esp,0xc
c00057a8:	0f b6 c0             	movzx  eax,al
c00057ab:	be 03 00 00 00       	mov    esi,0x3
c00057b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057b8:	e8 18 c9 ff ff       	call   c00020d5 <disk_initialize>
c00057bd:	83 c4 10             	add    esp,0x10
c00057c0:	a8 01                	test   al,0x1
c00057c2:	0f 85 97 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057c8:	be 0a 00 00 00       	mov    esi,0xa
c00057cd:	a8 04                	test   al,0x4
c00057cf:	0f 85 8a 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057dc:	85 c0                	test   eax,eax
c00057de:	75 20                	jne    c0005800 <f_mkfs+0x97>
c00057e0:	51                   	push   ecx
c00057e1:	8d 44 24 44          	lea    eax,[esp+0x44]
c00057e5:	50                   	push   eax
c00057e6:	6a 03                	push   0x3
c00057e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057ec:	e8 13 c9 ff ff       	call   c0002104 <disk_ioctl>
c00057f1:	83 c4 10             	add    esp,0x10
c00057f4:	85 c0                	test   eax,eax
c00057f6:	74 08                	je     c0005800 <f_mkfs+0x97>
c00057f8:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005800:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005804:	8d 42 ff             	lea    eax,[edx-0x1]
c0005807:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000580c:	77 04                	ja     c0005812 <f_mkfs+0xa9>
c000580e:	85 c2                	test   edx,eax
c0005810:	74 08                	je     c000581a <f_mkfs+0xb1>
c0005812:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000581d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005825:	48                   	dec    eax
c0005826:	3c 01                	cmp    al,0x1
c0005828:	76 05                	jbe    c000582f <f_mkfs+0xc6>
c000582a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000582f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005836:	48                   	dec    eax
c0005837:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000583c:	77 07                	ja     c0005845 <f_mkfs+0xdc>
c000583e:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005843:	74 08                	je     c000584d <f_mkfs+0xe4>
c0005845:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c000584d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005850:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005856:	77 07                	ja     c000585f <f_mkfs+0xf6>
c0005858:	8d 47 ff             	lea    eax,[edi-0x1]
c000585b:	85 f8                	test   eax,edi
c000585d:	74 02                	je     c0005861 <f_mkfs+0xf8>
c000585f:	31 ff                	xor    edi,edi
c0005861:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005869:	77 0a                	ja     c0005875 <f_mkfs+0x10c>
c000586b:	be 11 00 00 00       	mov    esi,0x11
c0005870:	e9 ea 06 00 00       	jmp    c0005f5f <f_mkfs+0x7f6>
c0005875:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005877:	85 ed                	test   ebp,ebp
c0005879:	89 eb                	mov    ebx,ebp
c000587b:	75 1e                	jne    c000589b <f_mkfs+0x132>
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005887:	25 00 fe ff ff       	and    eax,0xfffffe00
c000588c:	50                   	push   eax
c000588d:	e8 da 06 00 00       	call   c0005f6c <ff_memalloc>
c0005892:	83 c4 10             	add    esp,0x10
c0005895:	89 c3                	mov    ebx,eax
c0005897:	85 c0                	test   eax,eax
c0005899:	74 d0                	je     c000586b <f_mkfs+0x102>
c000589b:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058a3:	52                   	push   edx
c00058a4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058a8:	50                   	push   eax
c00058a9:	6a 01                	push   0x1
c00058ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058af:	e8 50 c8 ff ff       	call   c0002104 <disk_ioctl>
c00058b4:	83 c4 10             	add    esp,0x10
c00058b7:	85 c0                	test   eax,eax
c00058b9:	0f 85 49 06 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c00058bf:	89 f0                	mov    eax,esi
c00058c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00058c9:	83 e0 08             	and    eax,0x8
c00058cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00058d0:	75 18                	jne    c00058ea <f_mkfs+0x181>
c00058d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058d6:	83 f8 3f             	cmp    eax,0x3f
c00058d9:	76 0f                	jbe    c00058ea <f_mkfs+0x181>
c00058db:	83 e8 3f             	sub    eax,0x3f
c00058de:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00058e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00058ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00058f2:	83 f8 7f             	cmp    eax,0x7f
c00058f5:	0f 86 5b 02 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c00058fb:	b9 80 00 00 00       	mov    ecx,0x80
c0005900:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005906:	77 05                	ja     c000590d <f_mkfs+0x1a4>
c0005908:	c1 ef 09             	shr    edi,0x9
c000590b:	89 f9                	mov    ecx,edi
c000590d:	89 f0                	mov    eax,esi
c000590f:	89 f7                	mov    edi,esi
c0005911:	83 e0 01             	and    eax,0x1
c0005914:	83 e7 02             	and    edi,0x2
c0005917:	0f b6 c0             	movzx  eax,al
c000591a:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000591e:	74 0a                	je     c000592a <f_mkfs+0x1c1>
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 84 4f 01 00 00    	je     c0005a77 <f_mkfs+0x30e>
c0005928:	eb 37                	jmp    c0005961 <f_mkfs+0x1f8>
c000592a:	be 13 00 00 00       	mov    esi,0x13
c000592f:	85 c0                	test   eax,eax
c0005931:	75 2e                	jne    c0005961 <f_mkfs+0x1f8>
c0005933:	e9 e7 05 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005938:	83 f8 02             	cmp    eax,0x2
c000593b:	0f 85 0d 02 00 00    	jne    c0005b4e <f_mkfs+0x3e5>
c0005941:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005947:	0f 86 e4 01 00 00    	jbe    c0005b31 <f_mkfs+0x3c8>
c000594d:	85 c9                	test   ecx,ecx
c000594f:	0f 85 dc 05 00 00    	jne    c0005f31 <f_mkfs+0x7c8>
c0005955:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005958:	83 f9 40             	cmp    ecx,0x40
c000595b:	0f 87 e0 05 00 00    	ja     c0005f41 <f_mkfs+0x7d8>
c0005961:	89 cf                	mov    edi,ecx
c0005963:	85 c9                	test   ecx,ecx
c0005965:	75 1c                	jne    c0005983 <f_mkfs+0x21a>
c0005967:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000596b:	b8 e0 fb 02 c0       	mov    eax,0xc002fbe0
c0005970:	c1 ee 0c             	shr    esi,0xc
c0005973:	bf 01 00 00 00       	mov    edi,0x1
c0005978:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000597b:	85 d2                	test   edx,edx
c000597d:	0f 85 63 01 00 00    	jne    c0005ae6 <f_mkfs+0x37d>
c0005983:	31 d2                	xor    edx,edx
c0005985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005989:	f7 f7                	div    edi
c000598b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005990:	0f 86 62 01 00 00    	jbe    c0005af8 <f_mkfs+0x38f>
c0005996:	83 c0 02             	add    eax,0x2
c0005999:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000599e:	01 c0                	add    eax,eax
c00059a0:	05 ff 01 00 00       	add    eax,0x1ff
c00059a5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059ad:	c1 e8 09             	shr    eax,0x9
c00059b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059b8:	c1 e0 05             	shl    eax,0x5
c00059bb:	c1 e8 09             	shr    eax,0x9
c00059be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059c2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00059cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059cf:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00059d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00059d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059db:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00059e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00059e4:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00059e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00059ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00059f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00059f4:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00059f8:	f7 d8                	neg    eax
c00059fa:	21 c6                	and    esi,eax
c00059fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a01:	29 d6                	sub    esi,edx
c0005a03:	83 f8 03             	cmp    eax,0x3
c0005a06:	0f 85 ff 00 00 00    	jne    c0005b0b <f_mkfs+0x3a2>
c0005a0c:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a10:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a14:	89 f8                	mov    eax,edi
c0005a16:	c1 e0 04             	shl    eax,0x4
c0005a19:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005a1d:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a21:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a25:	0f 82 2b 01 00 00    	jb     c0005b56 <f_mkfs+0x3ed>
c0005a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a33:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a37:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c0005a3c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a40:	29 d0                	sub    eax,edx
c0005a42:	31 d2                	xor    edx,edx
c0005a44:	f7 f7                	div    edi
c0005a46:	89 c6                	mov    esi,eax
c0005a48:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4d:	83 f8 03             	cmp    eax,0x3
c0005a50:	0f 85 e2 fe ff ff    	jne    c0005938 <f_mkfs+0x1cf>
c0005a56:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a5c:	0f 87 03 01 00 00    	ja     c0005b65 <f_mkfs+0x3fc>
c0005a62:	85 c9                	test   ecx,ecx
c0005a64:	0f 85 ec 00 00 00    	jne    c0005b56 <f_mkfs+0x3ed>
c0005a6a:	83 ff 01             	cmp    edi,0x1
c0005a6d:	0f 86 e3 00 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c0005a73:	d1 ef                	shr    edi,1
c0005a75:	89 f9                	mov    ecx,edi
c0005a77:	89 ce                	mov    esi,ecx
c0005a79:	85 c9                	test   ecx,ecx
c0005a7b:	75 25                	jne    c0005aa2 <f_mkfs+0x339>
c0005a7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005a81:	b8 f0 fb 02 c0       	mov    eax,0xc002fbf0
c0005a86:	c1 ee 11             	shr    esi,0x11
c0005a89:	b9 01 00 00 00       	mov    ecx,0x1
c0005a8e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005a91:	85 d2                	test   edx,edx
c0005a93:	74 0b                	je     c0005aa0 <f_mkfs+0x337>
c0005a95:	83 c0 02             	add    eax,0x2
c0005a98:	39 f2                	cmp    edx,esi
c0005a9a:	77 04                	ja     c0005aa0 <f_mkfs+0x337>
c0005a9c:	01 c9                	add    ecx,ecx
c0005a9e:	eb ee                	jmp    c0005a8e <f_mkfs+0x325>
c0005aa0:	31 f6                	xor    esi,esi
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa8:	f7 f1                	div    ecx
c0005aaa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005ab1:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005ab6:	c1 ea 09             	shr    edx,0x9
c0005ab9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005abe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005ac2:	0f 87 8e 00 00 00    	ja     c0005b56 <f_mkfs+0x3ed>
c0005ac8:	89 cf                	mov    edi,ecx
c0005aca:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005ad2:	89 f1                	mov    ecx,esi
c0005ad4:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005adc:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005ae1:	e9 dc fe ff ff       	jmp    c00059c2 <f_mkfs+0x259>
c0005ae6:	83 c0 02             	add    eax,0x2
c0005ae9:	39 f2                	cmp    edx,esi
c0005aeb:	0f 87 92 fe ff ff    	ja     c0005983 <f_mkfs+0x21a>
c0005af1:	01 ff                	add    edi,edi
c0005af3:	e9 80 fe ff ff       	jmp    c0005978 <f_mkfs+0x20f>
c0005af8:	8d 04 40             	lea    eax,[eax+eax*2]
c0005afb:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b00:	40                   	inc    eax
c0005b01:	d1 e8                	shr    eax,1
c0005b03:	83 c0 03             	add    eax,0x3
c0005b06:	e9 95 fe ff ff       	jmp    c00059a0 <f_mkfs+0x237>
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	89 f0                	mov    eax,esi
c0005b0f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b13:	85 d2                	test   edx,edx
c0005b15:	74 09                	je     c0005b20 <f_mkfs+0x3b7>
c0005b17:	4e                   	dec    esi
c0005b18:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b1c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b20:	89 f0                	mov    eax,esi
c0005b22:	31 d2                	xor    edx,edx
c0005b24:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b28:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b2c:	e9 e3 fe ff ff       	jmp    c0005a14 <f_mkfs+0x2ab>
c0005b31:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b37:	77 2c                	ja     c0005b65 <f_mkfs+0x3fc>
c0005b39:	85 c9                	test   ecx,ecx
c0005b3b:	75 19                	jne    c0005b56 <f_mkfs+0x3ed>
c0005b3d:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b40:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b46:	0f 86 15 fe ff ff    	jbe    c0005961 <f_mkfs+0x1f8>
c0005b4c:	eb 08                	jmp    c0005b56 <f_mkfs+0x3ed>
c0005b4e:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b54:	76 0a                	jbe    c0005b60 <f_mkfs+0x3f7>
c0005b56:	be 0e 00 00 00       	mov    esi,0xe
c0005b5b:	e9 bf 03 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005b60:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b65:	31 d2                	xor    edx,edx
c0005b67:	b9 00 02 00 00       	mov    ecx,0x200
c0005b6c:	89 d8                	mov    eax,ebx
c0005b6e:	e8 f1 c5 ff ff       	call   c0002164 <mem_set>
c0005b73:	b9 0b 00 00 00       	mov    ecx,0xb
c0005b78:	ba 8e fb 02 c0       	mov    edx,0xc002fb8e
c0005b7d:	89 d8                	mov    eax,ebx
c0005b7f:	e8 cb c5 ff ff       	call   c000214f <mem_cpy>
c0005b84:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005b87:	ba 00 02 00 00       	mov    edx,0x200
c0005b8c:	e8 b7 c5 ff ff       	call   c0002148 <st_word>
c0005b91:	89 f8                	mov    eax,edi
c0005b93:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005b98:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005b9b:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005b9e:	e8 a5 c5 ff ff       	call   c0002148 <st_word>
c0005ba3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005ba7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005baa:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005baf:	83 f8 03             	cmp    eax,0x3
c0005bb2:	75 08                	jne    c0005bbc <f_mkfs+0x453>
c0005bb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005bc0:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bc3:	e8 80 c5 ff ff       	call   c0002148 <st_word>
c0005bc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005bcc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005bd2:	77 0a                	ja     c0005bde <f_mkfs+0x475>
c0005bd4:	8d 43 13             	lea    eax,[ebx+0x13]
c0005bd7:	e8 6c c5 ff ff       	call   c0002148 <st_word>
c0005bdc:	eb 08                	jmp    c0005be6 <f_mkfs+0x47d>
c0005bde:	8d 43 20             	lea    eax,[ebx+0x20]
c0005be1:	e8 66 c5 ff ff       	call   c000214c <st_dword>
c0005be6:	8d 43 18             	lea    eax,[ebx+0x18]
c0005be9:	ba 3f 00 00 00       	mov    edx,0x3f
c0005bee:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005bf2:	e8 51 c5 ff ff       	call   c0002148 <st_word>
c0005bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005bfa:	ba ff 00 00 00       	mov    edx,0xff
c0005bff:	e8 44 c5 ff ff       	call   c0002148 <st_word>
c0005c04:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c0b:	e8 3c c5 ff ff       	call   c000214c <st_dword>
c0005c10:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c15:	83 f8 03             	cmp    eax,0x3
c0005c18:	75 57                	jne    c0005c71 <f_mkfs+0x508>
c0005c1a:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c1d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c22:	e8 25 c5 ff ff       	call   c000214c <st_dword>
c0005c27:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c2e:	e8 19 c5 ff ff       	call   c000214c <st_dword>
c0005c33:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c36:	ba 02 00 00 00       	mov    edx,0x2
c0005c3b:	e8 0c c5 ff ff       	call   c000214c <st_dword>
c0005c40:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c43:	ba 01 00 00 00       	mov    edx,0x1
c0005c48:	e8 fb c4 ff ff       	call   c0002148 <st_word>
c0005c4d:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c50:	ba 06 00 00 00       	mov    edx,0x6
c0005c55:	e8 ee c4 ff ff       	call   c0002148 <st_word>
c0005c5a:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005c5e:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005c62:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c65:	b9 13 00 00 00       	mov    ecx,0x13
c0005c6a:	ba 9a fb 02 c0       	mov    edx,0xc002fb9a
c0005c6f:	eb 2f                	jmp    c0005ca0 <f_mkfs+0x537>
c0005c71:	8d 43 27             	lea    eax,[ebx+0x27]
c0005c74:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c79:	e8 ce c4 ff ff       	call   c000214c <st_dword>
c0005c7e:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005c83:	8d 43 16             	lea    eax,[ebx+0x16]
c0005c86:	e8 bd c4 ff ff       	call   c0002148 <st_word>
c0005c8b:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005c8f:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005c93:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005c96:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9b:	ba ae fb 02 c0       	mov    edx,0xc002fbae
c0005ca0:	e8 aa c4 ff ff       	call   c000214f <mem_cpy>
c0005ca5:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005cab:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	e8 8f c4 ff ff       	call   c0002148 <st_word>
c0005cb9:	6a 01                	push   0x1
c0005cbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbf:	53                   	push   ebx
c0005cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cc4:	e8 25 c4 ff ff       	call   c00020ee <disk_write>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	85 c0                	test   eax,eax
c0005cce:	0f 85 34 02 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005cd4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cd9:	83 f8 03             	cmp    eax,0x3
c0005cdc:	0f 85 98 00 00 00    	jne    c0005d7a <f_mkfs+0x611>
c0005ce2:	6a 01                	push   0x1
c0005ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005ce8:	83 c0 06             	add    eax,0x6
c0005ceb:	50                   	push   eax
c0005cec:	53                   	push   ebx
c0005ced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cf1:	e8 f8 c3 ff ff       	call   c00020ee <disk_write>
c0005cf6:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfb:	31 d2                	xor    edx,edx
c0005cfd:	89 d8                	mov    eax,ebx
c0005cff:	e8 60 c4 ff ff       	call   c0002164 <mem_set>
c0005d04:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d09:	89 d8                	mov    eax,ebx
c0005d0b:	e8 3c c4 ff ff       	call   c000214c <st_dword>
c0005d10:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d16:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d1b:	e8 2c c4 ff ff       	call   c000214c <st_dword>
c0005d20:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d23:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d29:	e8 1e c4 ff ff       	call   c000214c <st_dword>
c0005d2e:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d34:	ba 02 00 00 00       	mov    edx,0x2
c0005d39:	e8 0e c4 ff ff       	call   c000214c <st_dword>
c0005d3e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d43:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d49:	e8 fa c3 ff ff       	call   c0002148 <st_word>
c0005d4e:	6a 01                	push   0x1
c0005d50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005d54:	83 c0 07             	add    eax,0x7
c0005d57:	50                   	push   eax
c0005d58:	53                   	push   ebx
c0005d59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d5d:	e8 8c c3 ff ff       	call   c00020ee <disk_write>
c0005d62:	83 c4 20             	add    esp,0x20
c0005d65:	6a 01                	push   0x1
c0005d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d6b:	40                   	inc    eax
c0005d6c:	50                   	push   eax
c0005d6d:	53                   	push   ebx
c0005d6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d72:	e8 77 c3 ff ff       	call   c00020ee <disk_write>
c0005d77:	83 c4 10             	add    esp,0x10
c0005d7a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005d7e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005d82:	c1 e8 09             	shr    eax,0x9
c0005d85:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005d8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d8f:	31 d2                	xor    edx,edx
c0005d91:	89 d8                	mov    eax,ebx
c0005d93:	e8 cc c3 ff ff       	call   c0002164 <mem_set>
c0005d98:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d9d:	31 c9                	xor    ecx,ecx
c0005d9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005da7:	83 f8 01             	cmp    eax,0x1
c0005daa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005dae:	0f 94 c1             	sete   cl
c0005db1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005db5:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005db9:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005dc1:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005dc9:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dce:	75 21                	jne    c0005df1 <f_mkfs+0x688>
c0005dd0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dd5:	89 d8                	mov    eax,ebx
c0005dd7:	e8 70 c3 ff ff       	call   c000214c <st_dword>
c0005ddc:	8d 43 04             	lea    eax,[ebx+0x4]
c0005ddf:	83 ca ff             	or     edx,0xffffffff
c0005de2:	e8 65 c3 ff ff       	call   c000214c <st_dword>
c0005de7:	8d 43 08             	lea    eax,[ebx+0x8]
c0005dea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005def:	eb 06                	jmp    c0005df7 <f_mkfs+0x68e>
c0005df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 50 c3 ff ff       	call   c000214c <st_dword>
c0005dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005e04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005e0c:	39 ce                	cmp    esi,ecx
c0005e0e:	76 02                	jbe    c0005e12 <f_mkfs+0x6a9>
c0005e10:	89 ce                	mov    esi,ecx
c0005e12:	56                   	push   esi
c0005e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e17:	53                   	push   ebx
c0005e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e1c:	e8 cd c2 ff ff       	call   c00020ee <disk_write>
c0005e21:	83 c4 10             	add    esp,0x10
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 85 dc 00 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	b9 00 02 00 00       	mov    ecx,0x200
c0005e33:	89 d8                	mov    eax,ebx
c0005e35:	e8 2a c3 ff ff       	call   c0002164 <mem_set>
c0005e3a:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e3e:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005e42:	75 c0                	jne    c0005e04 <f_mkfs+0x69b>
c0005e44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e48:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005e50:	40                   	inc    eax
c0005e51:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e55:	0f 87 6e ff ff ff    	ja     c0005dc9 <f_mkfs+0x660>
c0005e5b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e60:	83 f8 03             	cmp    eax,0x3
c0005e63:	74 04                	je     c0005e69 <f_mkfs+0x700>
c0005e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005e69:	89 fe                	mov    esi,edi
c0005e6b:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005e6f:	76 04                	jbe    c0005e75 <f_mkfs+0x70c>
c0005e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e75:	56                   	push   esi
c0005e76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e7a:	53                   	push   ebx
c0005e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e7f:	e8 6a c2 ff ff       	call   c00020ee <disk_write>
c0005e84:	83 c4 10             	add    esp,0x10
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 7d                	jne    c0005f08 <f_mkfs+0x79f>
c0005e8b:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e8f:	29 f7                	sub    edi,esi
c0005e91:	75 d6                	jne    c0005e69 <f_mkfs+0x700>
c0005e93:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e98:	b9 0c 00 00 00       	mov    ecx,0xc
c0005e9d:	83 f8 03             	cmp    eax,0x3
c0005ea0:	74 1e                	je     c0005ec0 <f_mkfs+0x757>
c0005ea2:	b9 06 00 00 00       	mov    ecx,0x6
c0005ea7:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005eaf:	77 0f                	ja     c0005ec0 <f_mkfs+0x757>
c0005eb1:	b9 04 00 00 00       	mov    ecx,0x4
c0005eb6:	83 f8 02             	cmp    eax,0x2
c0005eb9:	74 05                	je     c0005ec0 <f_mkfs+0x757>
c0005ebb:	b9 01 00 00 00       	mov    ecx,0x1
c0005ec0:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ec5:	75 2a                	jne    c0005ef1 <f_mkfs+0x788>
c0005ec7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005ecb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005ed3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005ed7:	83 ec 0c             	sub    esp,0xc
c0005eda:	53                   	push   ebx
c0005edb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005edf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee3:	e8 89 d2 ff ff       	call   c0003171 <create_partition>
c0005ee8:	83 c4 10             	add    esp,0x10
c0005eeb:	89 c6                	mov    esi,eax
c0005eed:	85 c0                	test   eax,eax
c0005eef:	75 2e                	jne    c0005f1f <f_mkfs+0x7b6>
c0005ef1:	31 f6                	xor    esi,esi
c0005ef3:	50                   	push   eax
c0005ef4:	6a 00                	push   0x0
c0005ef6:	6a 00                	push   0x0
c0005ef8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005efc:	e8 03 c2 ff ff       	call   c0002104 <disk_ioctl>
c0005f01:	83 c4 10             	add    esp,0x10
c0005f04:	85 c0                	test   eax,eax
c0005f06:	74 17                	je     c0005f1f <f_mkfs+0x7b6>
c0005f08:	85 ed                	test   ebp,ebp
c0005f0a:	75 0c                	jne    c0005f18 <f_mkfs+0x7af>
c0005f0c:	83 ec 0c             	sub    esp,0xc
c0005f0f:	53                   	push   ebx
c0005f10:	e8 6f 00 00 00       	call   c0005f84 <ff_memfree>
c0005f15:	83 c4 10             	add    esp,0x10
c0005f18:	be 01 00 00 00       	mov    esi,0x1
c0005f1d:	eb 40                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f1f:	85 ed                	test   ebp,ebp
c0005f21:	75 3c                	jne    c0005f5f <f_mkfs+0x7f6>
c0005f23:	83 ec 0c             	sub    esp,0xc
c0005f26:	53                   	push   ebx
c0005f27:	e8 58 00 00 00       	call   c0005f84 <ff_memfree>
c0005f2c:	83 c4 10             	add    esp,0x10
c0005f2f:	eb 2e                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f31:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f36:	0f 85 3b fb ff ff    	jne    c0005a77 <f_mkfs+0x30e>
c0005f3c:	e9 15 fc ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f41:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f46:	0f 85 31 fb ff ff    	jne    c0005a7d <f_mkfs+0x314>
c0005f4c:	89 cf                	mov    edi,ecx
c0005f4e:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f54:	0f 86 29 fa ff ff    	jbe    c0005983 <f_mkfs+0x21a>
c0005f5a:	e9 f7 fb ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f5f:	83 c4 5c             	add    esp,0x5c
c0005f62:	89 f0                	mov    eax,esi
c0005f64:	5b                   	pop    ebx
c0005f65:	5e                   	pop    esi
c0005f66:	5f                   	pop    edi
c0005f67:	5d                   	pop    ebp
c0005f68:	c3                   	ret    
c0005f69:	66 90                	xchg   ax,ax
c0005f6b:	90                   	nop

c0005f6c <ff_memalloc>:
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	e8 3c 06 01 00       	call   c00165b7 <malloc>
c0005f7b:	83 c4 10             	add    esp,0x10
c0005f7e:	83 c4 0c             	add    esp,0xc
c0005f81:	c3                   	ret    
c0005f82:	66 90                	xchg   ax,ax

c0005f84 <ff_memfree>:
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	83 ec 0c             	sub    esp,0xc
c0005f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8e:	e8 34 06 01 00       	call   c00165c7 <free>
c0005f93:	83 c4 10             	add    esp,0x10
c0005f96:	90                   	nop
c0005f97:	83 c4 0c             	add    esp,0xc
c0005f9a:	c3                   	ret    
c0005f9b:	90                   	nop

c0005f9c <ff_uni2oem>:
c0005f9c:	83 ec 14             	sub    esp,0x14
c0005f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fae:	c7 44 24 0c e0 ff 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ffe0
c0005fb6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fbb:	77 0b                	ja     c0005fc8 <ff_uni2oem+0x2c>
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005fc6:	eb 68                	jmp    c0006030 <ff_uni2oem+0x94>
c0005fc8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005fd0:	77 5e                	ja     c0006030 <ff_uni2oem+0x94>
c0005fd2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005fd6:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005fdb:	75 53                	jne    c0006030 <ff_uni2oem+0x94>
c0005fdd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fe4:	eb 12                	jmp    c0005ff8 <ff_uni2oem+0x5c>
c0005fe6:	66 90                	xchg   ax,ax
c0005fe8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005fed:	83 c0 01             	add    eax,0x1
c0005ff0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ffd:	83 f8 7f             	cmp    eax,0x7f
c0006000:	77 1e                	ja     c0006020 <ff_uni2oem+0x84>
c0006002:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006007:	01 c0                	add    eax,eax
c0006009:	89 c2                	mov    edx,eax
c000600b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000600f:	01 d0                	add    eax,edx
c0006011:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006014:	0f b7 c0             	movzx  eax,ax
c0006017:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000601b:	75 cb                	jne    c0005fe8 <ff_uni2oem+0x4c>
c000601d:	8d 76 00             	lea    esi,[esi+0x0]
c0006020:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006025:	83 e8 80             	sub    eax,0xffffff80
c0006028:	0f b6 c0             	movzx  eax,al
c000602b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006030:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006035:	83 c4 14             	add    esp,0x14
c0006038:	c3                   	ret    
c0006039:	8d 76 00             	lea    esi,[esi+0x0]

c000603c <ff_oem2uni>:
c000603c:	83 ec 18             	sub    esp,0x18
c000603f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006047:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000604c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006050:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0006057:	c7 44 24 10 e0 ff 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ffe0
c000605f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006064:	83 f8 7f             	cmp    eax,0x7f
c0006067:	77 0b                	ja     c0006074 <ff_oem2uni+0x38>
c0006069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000606d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0006072:	eb 34                	jmp    c00060a8 <ff_oem2uni+0x6c>
c0006074:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006078:	3d b5 01 00 00       	cmp    eax,0x1b5
c000607d:	75 29                	jne    c00060a8 <ff_oem2uni+0x6c>
c000607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006084:	3d ff 00 00 00       	cmp    eax,0xff
c0006089:	77 1d                	ja     c00060a8 <ff_oem2uni+0x6c>
c000608b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006090:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0006095:	01 c0                	add    eax,eax
c0006097:	89 c2                	mov    edx,eax
c0006099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000609d:	01 d0                	add    eax,edx
c000609f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060ad:	83 c4 18             	add    esp,0x18
c00060b0:	c3                   	ret    
c00060b1:	8d 76 00             	lea    esi,[esi+0x0]

c00060b4 <ff_wtoupper>:
c00060b4:	83 ec 10             	sub    esp,0x10
c00060b7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060bf:	0f 87 ab 01 00 00    	ja     c0006270 <ff_wtoupper+0x1bc>
c00060c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060c9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060ce:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d3:	3d ff 0f 00 00       	cmp    eax,0xfff
c00060d8:	77 0a                	ja     c00060e4 <ff_wtoupper+0x30>
c00060da:	b8 e0 fd 02 c0       	mov    eax,0xc002fde0
c00060df:	eb 0b                	jmp    c00060ec <ff_wtoupper+0x38>
c00060e1:	8d 76 00             	lea    esi,[esi+0x0]
c00060e4:	b8 20 fd 02 c0       	mov    eax,0xc002fd20
c00060e9:	8d 76 00             	lea    esi,[esi+0x0]
c00060ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f4:	8d 50 02             	lea    edx,[eax+0x2]
c00060f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0006103:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006108:	85 c0                	test   eax,eax
c000610a:	0f 84 54 01 00 00    	je     c0006264 <ff_wtoupper+0x1b0>
c0006110:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006115:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000611a:	39 c2                	cmp    edx,eax
c000611c:	0f 82 42 01 00 00    	jb     c0006264 <ff_wtoupper+0x1b0>
c0006122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006126:	8d 50 02             	lea    edx,[eax+0x2]
c0006129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000612d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006130:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006135:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000613a:	c1 e8 08             	shr    eax,0x8
c000613d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006142:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0006147:	0f b6 c0             	movzx  eax,al
c000614a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000614f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006154:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006159:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000615e:	01 ca                	add    edx,ecx
c0006160:	39 d0                	cmp    eax,edx
c0006162:	0f 8d d8 00 00 00    	jge    c0006240 <ff_wtoupper+0x18c>
c0006168:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000616d:	83 f8 08             	cmp    eax,0x8
c0006170:	0f 87 ea 00 00 00    	ja     c0006260 <ff_wtoupper+0x1ac>
c0006176:	8b 04 85 e0 fc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0320]
c000617d:	ff e0                	jmp    eax
c000617f:	90                   	nop
c0006180:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006185:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000618a:	29 c2                	sub    edx,eax
c000618c:	89 d0                	mov    eax,edx
c000618e:	01 c0                	add    eax,eax
c0006190:	89 c2                	mov    edx,eax
c0006192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006196:	01 d0                	add    eax,edx
c0006198:	66 8b 00             	mov    ax,WORD PTR [eax]
c000619b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061a0:	e9 97 00 00 00       	jmp    c000623c <ff_wtoupper+0x188>
c00061a5:	8d 76 00             	lea    esi,[esi+0x0]
c00061a8:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b1:	89 d1                	mov    ecx,edx
c00061b3:	29 c1                	sub    ecx,eax
c00061b5:	89 c8                	mov    eax,ecx
c00061b7:	83 e0 01             	and    eax,0x1
c00061ba:	89 c2                	mov    edx,eax
c00061bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061c1:	29 d0                	sub    eax,edx
c00061c3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c8:	eb 72                	jmp    c000623c <ff_wtoupper+0x188>
c00061ca:	66 90                	xchg   ax,ax
c00061cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061d1:	83 e8 10             	sub    eax,0x10
c00061d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061d9:	eb 61                	jmp    c000623c <ff_wtoupper+0x188>
c00061db:	90                   	nop
c00061dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e1:	83 e8 20             	sub    eax,0x20
c00061e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061e9:	eb 51                	jmp    c000623c <ff_wtoupper+0x188>
c00061eb:	90                   	nop
c00061ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f1:	83 e8 30             	sub    eax,0x30
c00061f4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061f9:	eb 41                	jmp    c000623c <ff_wtoupper+0x188>
c00061fb:	90                   	nop
c00061fc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006201:	83 e8 1a             	sub    eax,0x1a
c0006204:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006209:	eb 31                	jmp    c000623c <ff_wtoupper+0x188>
c000620b:	90                   	nop
c000620c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006211:	83 c0 08             	add    eax,0x8
c0006214:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006219:	eb 21                	jmp    c000623c <ff_wtoupper+0x188>
c000621b:	90                   	nop
c000621c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006221:	83 e8 50             	sub    eax,0x50
c0006224:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006229:	eb 11                	jmp    c000623c <ff_wtoupper+0x188>
c000622b:	90                   	nop
c000622c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006231:	2d 60 1c 00 00       	sub    eax,0x1c60
c0006236:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623b:	90                   	nop
c000623c:	eb 22                	jmp    c0006260 <ff_wtoupper+0x1ac>
c000623e:	66 90                	xchg   ax,ax
c0006240:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 85 a3 fe ff ff    	jne    c00060f0 <ff_wtoupper+0x3c>
c000624d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006252:	01 c0                	add    eax,eax
c0006254:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006258:	e9 93 fe ff ff       	jmp    c00060f0 <ff_wtoupper+0x3c>
c000625d:	8d 76 00             	lea    esi,[esi+0x0]
c0006260:	90                   	nop
c0006261:	8d 76 00             	lea    esi,[esi+0x0]
c0006264:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006269:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000626d:	8d 76 00             	lea    esi,[esi+0x0]
c0006270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006274:	83 c4 10             	add    esp,0x10
c0006277:	c3                   	ret    

c0006278 <utf2ucs>:
c0006278:	57                   	push   edi
c0006279:	31 c9                	xor    ecx,ecx
c000627b:	56                   	push   esi
c000627c:	89 d7                	mov    edi,edx
c000627e:	53                   	push   ebx
c000627f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006283:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006287:	89 de                	mov    esi,ebx
c0006289:	c1 fe 08             	sar    esi,0x8
c000628c:	89 f2                	mov    edx,esi
c000628e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006291:	41                   	inc    ecx
c0006292:	85 db                	test   ebx,ebx
c0006294:	75 e9                	jne    c000627f <utf2ucs+0x7>
c0006296:	5b                   	pop    ebx
c0006297:	5e                   	pop    esi
c0006298:	5f                   	pop    edi
c0006299:	c3                   	ret    

c000629a <ucs2utfn>:
c000629a:	83 e1 fe             	and    ecx,0xfffffffe
c000629d:	01 d1                	add    ecx,edx
c000629f:	39 d1                	cmp    ecx,edx
c00062a1:	75 04                	jne    c00062a7 <ucs2utfn+0xd>
c00062a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062a6:	c3                   	ret    
c00062a7:	57                   	push   edi
c00062a8:	56                   	push   esi
c00062a9:	53                   	push   ebx
c00062aa:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062ad:	83 c2 02             	add    edx,0x2
c00062b0:	89 de                	mov    esi,ebx
c00062b2:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062b6:	c1 e6 08             	shl    esi,0x8
c00062b9:	09 f3                	or     ebx,esi
c00062bb:	83 fb 3b             	cmp    ebx,0x3b
c00062be:	74 50                	je     c0006310 <ucs2utfn+0x76>
c00062c0:	83 fb 7f             	cmp    ebx,0x7f
c00062c3:	7f 05                	jg     c00062ca <ucs2utfn+0x30>
c00062c5:	88 18                	mov    BYTE PTR [eax],bl
c00062c7:	40                   	inc    eax
c00062c8:	eb 42                	jmp    c000630c <ucs2utfn+0x72>
c00062ca:	89 de                	mov    esi,ebx
c00062cc:	89 df                	mov    edi,ebx
c00062ce:	c1 fe 06             	sar    esi,0x6
c00062d1:	83 e7 3f             	and    edi,0x3f
c00062d4:	83 cf 80             	or     edi,0xffffff80
c00062d7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00062dd:	7f 12                	jg     c00062f1 <ucs2utfn+0x57>
c00062df:	83 ce c0             	or     esi,0xffffffc0
c00062e2:	83 c0 02             	add    eax,0x2
c00062e5:	89 f3                	mov    ebx,esi
c00062e7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00062ea:	89 fb                	mov    ebx,edi
c00062ec:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00062ef:	eb 1b                	jmp    c000630c <ucs2utfn+0x72>
c00062f1:	c1 fb 0c             	sar    ebx,0xc
c00062f4:	83 e6 3f             	and    esi,0x3f
c00062f7:	83 cb e0             	or     ebx,0xffffffe0
c00062fa:	83 ce 80             	or     esi,0xffffff80
c00062fd:	88 18                	mov    BYTE PTR [eax],bl
c00062ff:	89 f3                	mov    ebx,esi
c0006301:	83 c0 03             	add    eax,0x3
c0006304:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006307:	89 fb                	mov    ebx,edi
c0006309:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000630c:	39 d1                	cmp    ecx,edx
c000630e:	75 9a                	jne    c00062aa <ucs2utfn+0x10>
c0006310:	5b                   	pop    ebx
c0006311:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006314:	5e                   	pop    esi
c0006315:	5f                   	pop    edi
c0006316:	c3                   	ret    

c0006317 <isjoliet>:
c0006317:	31 d2                	xor    edx,edx
c0006319:	80 38 25             	cmp    BYTE PTR [eax],0x25
c000631c:	75 26                	jne    c0006344 <isjoliet+0x2d>
c000631e:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006322:	75 20                	jne    c0006344 <isjoliet+0x2d>
c0006324:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006328:	ba 02 00 00 00       	mov    edx,0x2
c000632d:	83 f8 43             	cmp    eax,0x43
c0006330:	74 12                	je     c0006344 <isjoliet+0x2d>
c0006332:	ba 03 00 00 00       	mov    edx,0x3
c0006337:	83 f8 45             	cmp    eax,0x45
c000633a:	74 08                	je     c0006344 <isjoliet+0x2d>
c000633c:	31 d2                	xor    edx,edx
c000633e:	83 f8 40             	cmp    eax,0x40
c0006341:	0f 94 c2             	sete   dl
c0006344:	89 d0                	mov    eax,edx
c0006346:	c3                   	ret    

c0006347 <htohl_32>:
c0006347:	8b 00                	mov    eax,DWORD PTR [eax]
c0006349:	c3                   	ret    

c000634a <iso_733>:
c000634a:	eb fb                	jmp    c0006347 <htohl_32>

c000634c <bgrad_cache>:
c000634c:	83 fa 0e             	cmp    edx,0xe
c000634f:	77 16                	ja     c0006367 <bgrad_cache+0x1b>
c0006351:	53                   	push   ebx
c0006352:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006355:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006359:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000635c:	42                   	inc    edx
c000635d:	83 fa 0f             	cmp    edx,0xf
c0006360:	75 f3                	jne    c0006355 <bgrad_cache+0x9>
c0006362:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006365:	5b                   	pop    ebx
c0006366:	c3                   	ret    
c0006367:	c3                   	ret    

c0006368 <ucscompare>:
c0006368:	55                   	push   ebp
c0006369:	57                   	push   edi
c000636a:	89 c7                	mov    edi,eax
c000636c:	56                   	push   esi
c000636d:	89 d6                	mov    esi,edx
c000636f:	53                   	push   ebx
c0006370:	31 d2                	xor    edx,edx
c0006372:	83 ec 1c             	sub    esp,0x1c
c0006375:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006379:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000637e:	c1 e3 08             	shl    ebx,0x8
c0006381:	09 c3                	or     ebx,eax
c0006383:	39 ca                	cmp    edx,ecx
c0006385:	7d 42                	jge    c00063c9 <ucscompare+0x61>
c0006387:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000638b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006390:	c1 e0 08             	shl    eax,0x8
c0006393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006397:	09 e8                	or     eax,ebp
c0006399:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000639d:	83 f8 3b             	cmp    eax,0x3b
c00063a0:	74 27                	je     c00063c9 <ucscompare+0x61>
c00063a2:	83 ec 0c             	sub    esp,0xc
c00063a5:	50                   	push   eax
c00063a6:	e8 a5 a5 ff ff       	call   c0000950 <tolower>
c00063ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063ae:	89 c5                	mov    ebp,eax
c00063b0:	e8 9b a5 ff ff       	call   c0000950 <tolower>
c00063b5:	83 c4 10             	add    esp,0x10
c00063b8:	39 c5                	cmp    ebp,eax
c00063ba:	75 20                	jne    c00063dc <ucscompare+0x74>
c00063bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063c4:	83 c2 02             	add    edx,0x2
c00063c7:	eb ac                	jmp    c0006375 <ucscompare+0xd>
c00063c9:	85 db                	test   ebx,ebx
c00063cb:	0f 95 c2             	setne  dl
c00063ce:	31 c0                	xor    eax,eax
c00063d0:	83 fb 2f             	cmp    ebx,0x2f
c00063d3:	0f 95 c0             	setne  al
c00063d6:	21 d0                	and    eax,edx
c00063d8:	f7 d8                	neg    eax
c00063da:	eb 03                	jmp    c00063df <ucscompare+0x77>
c00063dc:	83 c8 ff             	or     eax,0xffffffff
c00063df:	83 c4 1c             	add    esp,0x1c
c00063e2:	5b                   	pop    ebx
c00063e3:	5e                   	pop    esi
c00063e4:	5f                   	pop    edi
c00063e5:	5d                   	pop    ebp
c00063e6:	c3                   	ret    

c00063e7 <fncompare>:
c00063e7:	55                   	push   ebp
c00063e8:	57                   	push   edi
c00063e9:	89 c7                	mov    edi,eax
c00063eb:	56                   	push   esi
c00063ec:	89 ce                	mov    esi,ecx
c00063ee:	53                   	push   ebx
c00063ef:	31 db                	xor    ebx,ebx
c00063f1:	83 ec 1c             	sub    esp,0x1c
c00063f4:	39 d3                	cmp    ebx,edx
c00063f6:	7d 45                	jge    c000643d <fncompare+0x56>
c00063f8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00063fc:	83 f8 3b             	cmp    eax,0x3b
c00063ff:	74 3c                	je     c000643d <fncompare+0x56>
c0006401:	83 f8 2e             	cmp    eax,0x2e
c0006404:	75 0e                	jne    c0006414 <fncompare+0x2d>
c0006406:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006409:	39 d9                	cmp    ecx,ebx
c000640b:	74 30                	je     c000643d <fncompare+0x56>
c000640d:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006412:	74 29                	je     c000643d <fncompare+0x56>
c0006414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006418:	83 ec 0c             	sub    esp,0xc
c000641b:	50                   	push   eax
c000641c:	e8 2f a5 ff ff       	call   c0000950 <tolower>
c0006421:	89 c5                	mov    ebp,eax
c0006423:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006427:	89 04 24             	mov    DWORD PTR [esp],eax
c000642a:	e8 21 a5 ff ff       	call   c0000950 <tolower>
c000642f:	83 c4 10             	add    esp,0x10
c0006432:	39 c5                	cmp    ebp,eax
c0006434:	75 1e                	jne    c0006454 <fncompare+0x6d>
c0006436:	43                   	inc    ebx
c0006437:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000643b:	eb b7                	jmp    c00063f4 <fncompare+0xd>
c000643d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	0f 95 c1             	setne  cl
c0006446:	31 c0                	xor    eax,eax
c0006448:	83 fa 2f             	cmp    edx,0x2f
c000644b:	0f 95 c0             	setne  al
c000644e:	21 c8                	and    eax,ecx
c0006450:	f7 d8                	neg    eax
c0006452:	eb 03                	jmp    c0006457 <fncompare+0x70>
c0006454:	83 c8 ff             	or     eax,0xffffffff
c0006457:	83 c4 1c             	add    esp,0x1c
c000645a:	5b                   	pop    ebx
c000645b:	5e                   	pop    esi
c000645c:	5f                   	pop    edi
c000645d:	5d                   	pop    ebp
c000645e:	c3                   	ret    

c000645f <bclear_cache>:
c000645f:	83 ec 18             	sub    esp,0x18
c0006462:	68 e0 00 03 c0       	push   0xc00300e0
c0006467:	e8 bc 34 02 00       	call   c0029928 <iso_kprintf>
c000646c:	83 c4 10             	add    esp,0x10
c000646f:	31 c0                	xor    eax,eax
c0006471:	8b 14 85 20 70 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8fe0]
c0006478:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000647e:	8b 14 85 80 70 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8f80]
c0006485:	40                   	inc    eax
c0006486:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000648c:	83 f8 10             	cmp    eax,0x10
c000648f:	75 e0                	jne    c0006471 <bclear_cache+0x12>
c0006491:	83 c4 0c             	add    esp,0xc
c0006494:	c3                   	ret    

c0006495 <bclear>:
c0006495:	eb c8                	jmp    c000645f <bclear_cache>

c0006497 <iso_break_all>:
c0006497:	83 ec 18             	sub    esp,0x18
c000649a:	68 ee 00 03 c0       	push   0xc00300ee
c000649f:	e8 84 34 02 00       	call   c0029928 <iso_kprintf>
c00064a4:	83 c4 10             	add    esp,0x10
c00064a7:	31 c0                	xor    eax,eax
c00064a9:	c7 80 b0 7d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc8250],0x1
c00064b3:	05 94 00 00 00       	add    eax,0x94
c00064b8:	3d 40 09 00 00       	cmp    eax,0x940
c00064bd:	75 ea                	jne    c00064a9 <iso_break_all+0x12>
c00064bf:	83 c4 0c             	add    esp,0xc
c00064c2:	c3                   	ret    

c00064c3 <isoReadDiscSector>:
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	0f be 05 60 70 03 c0 	movsx  eax,BYTE PTR ds:0xc0037060
c00064cd:	50                   	push   eax
c00064ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064da:	e8 ed 33 02 00       	call   c00298cc <isoReadDiscSectorHelper>
c00064df:	83 c4 1c             	add    esp,0x1c
c00064e2:	c3                   	ret    

c00064e3 <bread_cache>:
c00064e3:	55                   	push   ebp
c00064e4:	57                   	push   edi
c00064e5:	89 d7                	mov    edi,edx
c00064e7:	56                   	push   esi
c00064e8:	ba 0f 00 00 00       	mov    edx,0xf
c00064ed:	53                   	push   ebx
c00064ee:	89 c6                	mov    esi,eax
c00064f0:	83 ec 0c             	sub    esp,0xc
c00064f3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00064f6:	39 38                	cmp    DWORD PTR [eax],edi
c00064f8:	74 3c                	je     c0006536 <bread_cache+0x53>
c00064fa:	4a                   	dec    edx
c00064fb:	83 fa ff             	cmp    edx,0xffffffff
c00064fe:	75 f3                	jne    c00064f3 <bread_cache+0x10>
c0006500:	31 db                	xor    ebx,ebx
c0006502:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006505:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006508:	74 08                	je     c0006512 <bread_cache+0x2f>
c000650a:	43                   	inc    ebx
c000650b:	83 fb 10             	cmp    ebx,0x10
c000650e:	75 f2                	jne    c0006502 <bread_cache+0x1f>
c0006510:	31 db                	xor    ebx,ebx
c0006512:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006515:	50                   	push   eax
c0006516:	6a 01                	push   0x1
c0006518:	57                   	push   edi
c0006519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000651c:	83 c0 04             	add    eax,0x4
c000651f:	50                   	push   eax
c0006520:	e8 9e ff ff ff       	call   c00064c3 <isoReadDiscSector>
c0006525:	83 c4 10             	add    esp,0x10
c0006528:	83 c9 ff             	or     ecx,0xffffffff
c000652b:	85 c0                	test   eax,eax
c000652d:	78 13                	js     c0006542 <bread_cache+0x5f>
c000652f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006532:	89 da                	mov    edx,ebx
c0006534:	89 38                	mov    DWORD PTR [eax],edi
c0006536:	89 f0                	mov    eax,esi
c0006538:	e8 0f fe ff ff       	call   c000634c <bgrad_cache>
c000653d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006542:	83 c4 0c             	add    esp,0xc
c0006545:	89 c8                	mov    eax,ecx
c0006547:	5b                   	pop    ebx
c0006548:	5e                   	pop    esi
c0006549:	5f                   	pop    edi
c000654a:	5d                   	pop    ebp
c000654b:	c3                   	ret    

c000654c <biread>:
c000654c:	89 c2                	mov    edx,eax
c000654e:	b8 80 70 03 c0       	mov    eax,0xc0037080
c0006553:	eb 8e                	jmp    c00064e3 <bread_cache>

c0006555 <bdread>:
c0006555:	89 c2                	mov    edx,eax
c0006557:	b8 20 70 03 c0       	mov    eax,0xc0037020
c000655c:	eb 85                	jmp    c00064e3 <bread_cache>

c000655e <strnicmp>:
c000655e:	55                   	push   ebp
c000655f:	57                   	push   edi
c0006560:	31 ff                	xor    edi,edi
c0006562:	56                   	push   esi
c0006563:	53                   	push   ebx
c0006564:	83 ec 0c             	sub    esp,0xc
c0006567:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000656b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000656f:	74 43                	je     c00065b4 <strnicmp+0x56>
c0006571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006575:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006579:	85 c0                	test   eax,eax
c000657b:	74 37                	je     c00065b4 <strnicmp+0x56>
c000657d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006581:	85 d2                	test   edx,edx
c0006583:	74 2f                	je     c00065b4 <strnicmp+0x56>
c0006585:	39 d0                	cmp    eax,edx
c0006587:	8d 6f 01             	lea    ebp,[edi+0x1]
c000658a:	75 04                	jne    c0006590 <strnicmp+0x32>
c000658c:	89 ef                	mov    edi,ebp
c000658e:	eb db                	jmp    c000656b <strnicmp+0xd>
c0006590:	83 ec 0c             	sub    esp,0xc
c0006593:	50                   	push   eax
c0006594:	e8 b7 a3 ff ff       	call   c0000950 <tolower>
c0006599:	89 c3                	mov    ebx,eax
c000659b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000659f:	89 ef                	mov    edi,ebp
c00065a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065a4:	e8 a7 a3 ff ff       	call   c0000950 <tolower>
c00065a9:	83 c4 10             	add    esp,0x10
c00065ac:	29 c3                	sub    ebx,eax
c00065ae:	89 d8                	mov    eax,ebx
c00065b0:	74 b9                	je     c000656b <strnicmp+0xd>
c00065b2:	eb 02                	jmp    c00065b6 <strnicmp+0x58>
c00065b4:	31 c0                	xor    eax,eax
c00065b6:	83 c4 0c             	add    esp,0xc
c00065b9:	5b                   	pop    ebx
c00065ba:	5e                   	pop    esi
c00065bb:	5f                   	pop    edi
c00065bc:	5d                   	pop    ebp
c00065bd:	c3                   	ret    

c00065be <find_object>:
c00065be:	55                   	push   ebp
c00065bf:	57                   	push   edi
c00065c0:	89 c7                	mov    edi,eax
c00065c2:	56                   	push   esi
c00065c3:	53                   	push   ebx
c00065c4:	89 d3                	mov    ebx,edx
c00065c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00065d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065db:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c00065e2:	74 0b                	je     c00065ef <find_object+0x31>
c00065e4:	89 fa                	mov    edx,edi
c00065e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065ea:	e8 89 fc ff ff       	call   c0006278 <utf2ucs>
c00065ef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00065f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00065f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00065fb:	7e 11                	jle    c000660e <find_object+0x50>
c00065fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006601:	e8 46 ff ff ff       	call   c000654c <biread>
c0006606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000660a:	85 c0                	test   eax,eax
c000660c:	79 07                	jns    c0006615 <find_object+0x57>
c000660e:	31 db                	xor    ebx,ebx
c0006610:	e9 56 01 00 00       	jmp    c000676b <find_object+0x1ad>
c0006615:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006625:	8b 04 85 80 70 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8f80]
c000662c:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006630:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006633:	85 f6                	test   esi,esi
c0006635:	75 0e                	jne    c0006645 <find_object+0x87>
c0006637:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000663b:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006643:	eb b1                	jmp    c00065f6 <find_object+0x38>
c0006645:	8b 2d 94 86 03 c0    	mov    ebp,DWORD PTR ds:0xc0038694
c000664b:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c000664f:	85 ed                	test   ebp,ebp
c0006651:	89 c8                	mov    eax,ecx
c0006653:	74 2b                	je     c0006680 <find_object+0xc2>
c0006655:	8d 43 21             	lea    eax,[ebx+0x21]
c0006658:	8d 54 24 20          	lea    edx,[esp+0x20]
c000665c:	e8 07 fd ff ff       	call   c0006368 <ucscompare>
c0006661:	85 c0                	test   eax,eax
c0006663:	0f 84 bf 00 00 00    	je     c0006728 <find_object+0x16a>
c0006669:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000666c:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006670:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006678:	0f 8e da 00 00 00    	jle    c0006758 <find_object+0x19a>
c000667e:	eb b7                	jmp    c0006637 <find_object+0x79>
c0006680:	29 ce                	sub    esi,ecx
c0006682:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006686:	a8 01                	test   al,0x1
c0006688:	74 05                	je     c000668f <find_object+0xd1>
c000668a:	83 ee 21             	sub    esi,0x21
c000668d:	eb 5a                	jmp    c00066e9 <find_object+0x12b>
c000668f:	42                   	inc    edx
c0006690:	83 ee 22             	sub    esi,0x22
c0006693:	eb 54                	jmp    c00066e9 <find_object+0x12b>
c0006695:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006698:	48                   	dec    eax
c0006699:	3c 01                	cmp    al,0x1
c000669b:	77 51                	ja     c00066ee <find_object+0x130>
c000669d:	50                   	push   eax
c000669e:	6a 02                	push   0x2
c00066a0:	68 fd 00 03 c0       	push   0xc00300fd
c00066a5:	52                   	push   edx
c00066a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00066aa:	e8 31 a1 ff ff       	call   c00007e0 <strncmp>
c00066af:	83 c4 10             	add    esp,0x10
c00066b2:	85 c0                	test   eax,eax
c00066b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066b8:	75 27                	jne    c00066e1 <find_object+0x123>
c00066ba:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066be:	8d 68 fb             	lea    ebp,[eax-0x5]
c00066c1:	50                   	push   eax
c00066c2:	8d 42 05             	lea    eax,[edx+0x5]
c00066c5:	55                   	push   ebp
c00066c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00066ca:	50                   	push   eax
c00066cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066cf:	50                   	push   eax
c00066d0:	e8 ab 9f ff ff       	call   c0000680 <strncpy>
c00066d5:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c00066da:	83 c4 10             	add    esp,0x10
c00066dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066e1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066e5:	29 c6                	sub    esi,eax
c00066e7:	01 c2                	add    edx,eax
c00066e9:	83 fe 03             	cmp    esi,0x3
c00066ec:	7f a7                	jg     c0006695 <find_object+0xd7>
c00066ee:	85 ed                	test   ebp,ebp
c00066f0:	7e 40                	jle    c0006732 <find_object+0x174>
c00066f2:	51                   	push   ecx
c00066f3:	51                   	push   ecx
c00066f4:	6a 2f                	push   0x2f
c00066f6:	57                   	push   edi
c00066f7:	e8 a4 a0 ff ff       	call   c00007a0 <strchr>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	85 c0                	test   eax,eax
c0006701:	74 04                	je     c0006707 <find_object+0x149>
c0006703:	29 f8                	sub    eax,edi
c0006705:	eb 0c                	jmp    c0006713 <find_object+0x155>
c0006707:	83 ec 0c             	sub    esp,0xc
c000670a:	57                   	push   edi
c000670b:	e8 60 9e ff ff       	call   c0000570 <strlen>
c0006710:	83 c4 10             	add    esp,0x10
c0006713:	52                   	push   edx
c0006714:	50                   	push   eax
c0006715:	57                   	push   edi
c0006716:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000671a:	50                   	push   eax
c000671b:	e8 3e fe ff ff       	call   c000655e <strnicmp>
c0006720:	83 c4 10             	add    esp,0x10
c0006723:	e9 39 ff ff ff       	jmp    c0006661 <find_object+0xa3>
c0006728:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000672c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006730:	eb 1e                	jmp    c0006750 <find_object+0x192>
c0006732:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006736:	8d 43 21             	lea    eax,[ebx+0x21]
c0006739:	89 f9                	mov    ecx,edi
c000673b:	e8 a7 fc ff ff       	call   c00063e7 <fncompare>
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 21 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006748:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000674c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006750:	0f 85 13 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006756:	eb 13                	jmp    c000676b <find_object+0x1ad>
c0006758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000675c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006760:	0f 8f b7 fe ff ff    	jg     c000661d <find_object+0x5f>
c0006766:	e9 cc fe ff ff       	jmp    c0006637 <find_object+0x79>
c000676b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006771:	89 d8                	mov    eax,ebx
c0006773:	5b                   	pop    ebx
c0006774:	5e                   	pop    esi
c0006775:	5f                   	pop    edi
c0006776:	5d                   	pop    ebp
c0006777:	c3                   	ret    

c0006778 <find_object_path>:
c0006778:	55                   	push   ebp
c0006779:	57                   	push   edi
c000677a:	89 d7                	mov    edi,edx
c000677c:	56                   	push   esi
c000677d:	89 c6                	mov    esi,eax
c000677f:	53                   	push   ebx
c0006780:	89 cb                	mov    ebx,ecx
c0006782:	83 ec 0c             	sub    esp,0xc
c0006785:	50                   	push   eax
c0006786:	50                   	push   eax
c0006787:	6a 2f                	push   0x2f
c0006789:	56                   	push   esi
c000678a:	e8 11 a0 ff ff       	call   c00007a0 <strchr>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	89 c5                	mov    ebp,eax
c0006794:	85 c0                	test   eax,eax
c0006796:	74 3a                	je     c00067d2 <find_object_path+0x5a>
c0006798:	39 ee                	cmp    esi,ebp
c000679a:	74 31                	je     c00067cd <find_object_path+0x55>
c000679c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000679f:	e8 a6 fb ff ff       	call   c000634a <iso_733>
c00067a4:	89 c2                	mov    edx,eax
c00067a6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067a9:	e8 9c fb ff ff       	call   c000634a <iso_733>
c00067ae:	83 ec 0c             	sub    esp,0xc
c00067b1:	89 c1                	mov    ecx,eax
c00067b3:	52                   	push   edx
c00067b4:	89 f0                	mov    eax,esi
c00067b6:	ba 01 00 00 00       	mov    edx,0x1
c00067bb:	e8 fe fd ff ff       	call   c00065be <find_object>
c00067c0:	83 c4 10             	add    esp,0x10
c00067c3:	89 c3                	mov    ebx,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	75 04                	jne    c00067cd <find_object_path+0x55>
c00067c9:	31 db                	xor    ebx,ebx
c00067cb:	eb 36                	jmp    c0006803 <find_object_path+0x8b>
c00067cd:	8d 75 01             	lea    esi,[ebp+0x1]
c00067d0:	eb b3                	jmp    c0006785 <find_object_path+0xd>
c00067d2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067d5:	74 28                	je     c00067ff <find_object_path+0x87>
c00067d7:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067da:	e8 6b fb ff ff       	call   c000634a <iso_733>
c00067df:	89 c2                	mov    edx,eax
c00067e1:	8d 43 02             	lea    eax,[ebx+0x2]
c00067e4:	e8 61 fb ff ff       	call   c000634a <iso_733>
c00067e9:	83 ec 0c             	sub    esp,0xc
c00067ec:	89 c1                	mov    ecx,eax
c00067ee:	52                   	push   edx
c00067ef:	89 f0                	mov    eax,esi
c00067f1:	89 fa                	mov    edx,edi
c00067f3:	e8 c6 fd ff ff       	call   c00065be <find_object>
c00067f8:	83 c4 10             	add    esp,0x10
c00067fb:	89 c3                	mov    ebx,eax
c00067fd:	eb 04                	jmp    c0006803 <find_object_path+0x8b>
c00067ff:	85 ff                	test   edi,edi
c0006801:	74 c6                	je     c00067c9 <find_object_path+0x51>
c0006803:	83 c4 0c             	add    esp,0xc
c0006806:	89 d8                	mov    eax,ebx
c0006808:	5b                   	pop    ebx
c0006809:	5e                   	pop    esi
c000680a:	5f                   	pop    edi
c000680b:	5d                   	pop    ebp
c000680c:	c3                   	ret    

c000680d <stricmp>:
c000680d:	57                   	push   edi
c000680e:	56                   	push   esi
c000680f:	31 f6                	xor    esi,esi
c0006811:	53                   	push   ebx
c0006812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006816:	83 ec 0c             	sub    esp,0xc
c0006819:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c000681d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006821:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006825:	50                   	push   eax
c0006826:	e8 05 a1 ff ff       	call   c0000930 <toupper>
c000682b:	89 04 24             	mov    DWORD PTR [esp],eax
c000682e:	e8 1d a1 ff ff       	call   c0000950 <tolower>
c0006833:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006836:	89 c3                	mov    ebx,eax
c0006838:	e8 f3 a0 ff ff       	call   c0000930 <toupper>
c000683d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006840:	e8 0b a1 ff ff       	call   c0000950 <tolower>
c0006845:	83 c4 10             	add    esp,0x10
c0006848:	39 c3                	cmp    ebx,eax
c000684a:	75 05                	jne    c0006851 <stricmp+0x44>
c000684c:	46                   	inc    esi
c000684d:	85 db                	test   ebx,ebx
c000684f:	75 c1                	jne    c0006812 <stricmp+0x5>
c0006851:	29 c3                	sub    ebx,eax
c0006853:	89 d8                	mov    eax,ebx
c0006855:	5b                   	pop    ebx
c0006856:	5e                   	pop    esi
c0006857:	5f                   	pop    edi
c0006858:	c3                   	ret    

c0006859 <iso_open>:
c0006859:	57                   	push   edi
c000685a:	31 c0                	xor    eax,eax
c000685c:	56                   	push   esi
c000685d:	b9 60 86 03 c0       	mov    ecx,0xc0038660
c0006862:	53                   	push   ebx
c0006863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006868:	0f 95 c0             	setne  al
c000686b:	89 c2                	mov    edx,eax
c000686d:	89 c6                	mov    esi,eax
c000686f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006873:	e8 00 ff ff ff       	call   c0006778 <find_object_path>
c0006878:	83 ca ff             	or     edx,0xffffffff
c000687b:	85 c0                	test   eax,eax
c000687d:	74 5e                	je     c00068dd <iso_open+0x84>
c000687f:	89 c1                	mov    ecx,eax
c0006881:	31 d2                	xor    edx,edx
c0006883:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006889:	83 bf 20 7d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc82e0],0x0
c0006890:	75 42                	jne    c00068d4 <iso_open+0x7b>
c0006892:	8d 41 02             	lea    eax,[ecx+0x2]
c0006895:	c7 87 20 7d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc82e0],0xffffffff
c000689f:	e8 a6 fa ff ff       	call   c000634a <iso_733>
c00068a4:	89 b7 24 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82dc],esi
c00068aa:	89 87 20 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82e0],eax
c00068b0:	c7 87 28 7d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc82d8],0x0
c00068ba:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068bd:	e8 88 fa ff ff       	call   c000634a <iso_733>
c00068c2:	c7 87 b0 7d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc8250],0x0
c00068cc:	89 87 2c 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82d4],eax
c00068d2:	eb 09                	jmp    c00068dd <iso_open+0x84>
c00068d4:	42                   	inc    edx
c00068d5:	83 fa 10             	cmp    edx,0x10
c00068d8:	75 a9                	jne    c0006883 <iso_open+0x2a>
c00068da:	83 ca ff             	or     edx,0xffffffff
c00068dd:	5b                   	pop    ebx
c00068de:	89 d0                	mov    eax,edx
c00068e0:	5e                   	pop    esi
c00068e1:	5f                   	pop    edi
c00068e2:	c3                   	ret    

c00068e3 <iso_close>:
c00068e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e7:	83 f8 0f             	cmp    eax,0xf
c00068ea:	7f 10                	jg     c00068fc <iso_close+0x19>
c00068ec:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00068f2:	c7 80 20 7d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc82e0],0x0
c00068fc:	e9 5e fb ff ff       	jmp    c000645f <bclear_cache>

c0006901 <iso_read>:
c0006901:	55                   	push   ebp
c0006902:	57                   	push   edi
c0006903:	56                   	push   esi
c0006904:	53                   	push   ebx
c0006905:	83 ec 1c             	sub    esp,0x1c
c0006908:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000690c:	83 fd 0f             	cmp    ebp,0xf
c000690f:	7e 0a                	jle    c000691b <iso_read+0x1a>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	89 c2                	mov    edx,eax
c0006916:	e9 f4 00 00 00       	jmp    c0006a0f <iso_read+0x10e>
c000691b:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006921:	83 bd 20 7d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc82e0],0x0
c0006928:	74 e7                	je     c0006911 <iso_read+0x10>
c000692a:	8b 95 b0 7d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc8250]
c0006930:	85 d2                	test   edx,edx
c0006932:	75 dd                	jne    c0006911 <iso_read+0x10>
c0006934:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006939:	0f 84 cd 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000693f:	8b 85 28 7d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc82d8]
c0006945:	8b 8d 2c 7d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc82d4]
c000694b:	29 c1                	sub    ecx,eax
c000694d:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006951:	76 04                	jbe    c0006957 <iso_read+0x56>
c0006953:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006957:	85 c9                	test   ecx,ecx
c0006959:	0f 84 ad 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000695f:	89 c6                	mov    esi,eax
c0006961:	bb 00 08 00 00       	mov    ebx,0x800
c0006966:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000696c:	c1 e8 0b             	shr    eax,0xb
c000696f:	29 f3                	sub    ebx,esi
c0006971:	03 85 20 7d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc82e0]
c0006977:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000697d:	7e 3f                	jle    c00069be <iso_read+0xbd>
c000697f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006985:	75 37                	jne    c00069be <iso_read+0xbd>
c0006987:	be 20 00 00 00       	mov    esi,0x20
c000698c:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006992:	7f 05                	jg     c0006999 <iso_read+0x98>
c0006994:	89 ce                	mov    esi,ecx
c0006996:	c1 fe 0b             	sar    esi,0xb
c0006999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000699d:	89 f3                	mov    ebx,esi
c000699f:	c1 e3 0b             	shl    ebx,0xb
c00069a2:	52                   	push   edx
c00069a3:	56                   	push   esi
c00069a4:	50                   	push   eax
c00069a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069a9:	e8 15 fb ff ff       	call   c00064c3 <isoReadDiscSector>
c00069ae:	83 c4 10             	add    esp,0x10
c00069b1:	85 c0                	test   eax,eax
c00069b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069b7:	7f 3e                	jg     c00069f7 <iso_read+0xf6>
c00069b9:	e9 53 ff ff ff       	jmp    c0006911 <iso_read+0x10>
c00069be:	39 cb                	cmp    ebx,ecx
c00069c0:	7e 02                	jle    c00069c4 <iso_read+0xc3>
c00069c2:	89 cb                	mov    ebx,ecx
c00069c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069c8:	e8 88 fb ff ff       	call   c0006555 <bdread>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	0f 88 3c ff ff ff    	js     c0006911 <iso_read+0x10>
c00069d5:	8b 0c 85 20 70 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc8fe0]
c00069dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069e0:	8b 85 28 7d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc82d8]
c00069e6:	25 ff 07 00 00       	and    eax,0x7ff
c00069eb:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00069ef:	89 d9                	mov    ecx,ebx
c00069f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00069f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069f7:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00069fb:	01 9d 28 7d 03 c0    	add    DWORD PTR [ebp-0x3ffc82d8],ebx
c0006a01:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a05:	01 da                	add    edx,ebx
c0006a07:	e9 28 ff ff ff       	jmp    c0006934 <iso_read+0x33>
c0006a0c:	89 d0                	mov    eax,edx
c0006a0e:	99                   	cdq    
c0006a0f:	83 c4 1c             	add    esp,0x1c
c0006a12:	5b                   	pop    ebx
c0006a13:	5e                   	pop    esi
c0006a14:	5f                   	pop    edi
c0006a15:	5d                   	pop    ebp
c0006a16:	c3                   	ret    

c0006a17 <iso_seek>:
c0006a17:	55                   	push   ebp
c0006a18:	83 c8 ff             	or     eax,0xffffffff
c0006a1b:	57                   	push   edi
c0006a1c:	89 c2                	mov    edx,eax
c0006a1e:	56                   	push   esi
c0006a1f:	53                   	push   ebx
c0006a20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a2c:	83 fe 0f             	cmp    esi,0xf
c0006a2f:	7f 65                	jg     c0006a96 <iso_seek+0x7f>
c0006a31:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a37:	8d 8d 20 7d 03 c0    	lea    ecx,[ebp-0x3ffc82e0]
c0006a3d:	83 bd 20 7d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc82e0],0x0
c0006a44:	74 50                	je     c0006a96 <iso_seek+0x7f>
c0006a46:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a4d:	75 47                	jne    c0006a96 <iso_seek+0x7f>
c0006a4f:	83 fb 01             	cmp    ebx,0x1
c0006a52:	74 0e                	je     c0006a62 <iso_seek+0x4b>
c0006a54:	83 fb 02             	cmp    ebx,0x2
c0006a57:	74 0e                	je     c0006a67 <iso_seek+0x50>
c0006a59:	85 db                	test   ebx,ebx
c0006a5b:	75 39                	jne    c0006a96 <iso_seek+0x7f>
c0006a5d:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a60:	eb 0d                	jmp    c0006a6f <iso_seek+0x58>
c0006a62:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a65:	eb 08                	jmp    c0006a6f <iso_seek+0x58>
c0006a67:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a6a:	01 f8                	add    eax,edi
c0006a6c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a6f:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a75:	8b 88 2c 7d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc82d4]
c0006a7b:	05 20 7d 03 c0       	add    eax,0xc0037d20
c0006a80:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a83:	76 03                	jbe    c0006a88 <iso_seek+0x71>
c0006a85:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a88:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006a8e:	8b 82 28 7d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc82d8]
c0006a94:	31 d2                	xor    edx,edx
c0006a96:	5b                   	pop    ebx
c0006a97:	5e                   	pop    esi
c0006a98:	5f                   	pop    edi
c0006a99:	5d                   	pop    ebp
c0006a9a:	c3                   	ret    

c0006a9b <iso_tell>:
c0006a9b:	83 c8 ff             	or     eax,0xffffffff
c0006a9e:	53                   	push   ebx
c0006a9f:	89 c2                	mov    edx,eax
c0006aa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006aa5:	83 f9 0f             	cmp    ecx,0xf
c0006aa8:	7f 20                	jg     c0006aca <iso_tell+0x2f>
c0006aaa:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ab0:	83 bb 20 7d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc82e0],0x0
c0006ab7:	74 11                	je     c0006aca <iso_tell+0x2f>
c0006ab9:	83 bb b0 7d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc8250],0x0
c0006ac0:	75 08                	jne    c0006aca <iso_tell+0x2f>
c0006ac2:	8b 83 28 7d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc82d8]
c0006ac8:	31 d2                	xor    edx,edx
c0006aca:	5b                   	pop    ebx
c0006acb:	c3                   	ret    

c0006acc <iso_total>:
c0006acc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ad0:	83 c8 ff             	or     eax,0xffffffff
c0006ad3:	83 fa 0f             	cmp    edx,0xf
c0006ad6:	7f 1e                	jg     c0006af6 <iso_total+0x2a>
c0006ad8:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006ade:	83 ba 20 7d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc82e0],0x0
c0006ae5:	74 0f                	je     c0006af6 <iso_total+0x2a>
c0006ae7:	83 ba b0 7d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc8250],0x0
c0006aee:	75 06                	jne    c0006af6 <iso_total+0x2a>
c0006af0:	8b 82 2c 7d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc82d4]
c0006af6:	c3                   	ret    

c0006af7 <fn_postprocess>:
c0006af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006afb:	89 d0                	mov    eax,edx
c0006afd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b00:	83 f9 3b             	cmp    ecx,0x3b
c0006b03:	74 07                	je     c0006b0c <fn_postprocess+0x15>
c0006b05:	85 c9                	test   ecx,ecx
c0006b07:	74 03                	je     c0006b0c <fn_postprocess+0x15>
c0006b09:	40                   	inc    eax
c0006b0a:	eb f1                	jmp    c0006afd <fn_postprocess+0x6>
c0006b0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b0f:	39 d0                	cmp    eax,edx
c0006b11:	76 0a                	jbe    c0006b1d <fn_postprocess+0x26>
c0006b13:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b17:	75 04                	jne    c0006b1d <fn_postprocess+0x26>
c0006b19:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b1d:	c3                   	ret    

c0006b1e <iso_readdir>:
c0006b1e:	55                   	push   ebp
c0006b1f:	57                   	push   edi
c0006b20:	56                   	push   esi
c0006b21:	53                   	push   ebx
c0006b22:	83 ec 1c             	sub    esp,0x1c
c0006b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b29:	83 fb 0f             	cmp    ebx,0xf
c0006b2c:	7f 28                	jg     c0006b56 <iso_readdir+0x38>
c0006b2e:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b34:	8d b8 20 7d 03 c0    	lea    edi,[eax-0x3ffc82e0]
c0006b3a:	83 b8 20 7d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc82e0],0x0
c0006b41:	74 13                	je     c0006b56 <iso_readdir+0x38>
c0006b43:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b47:	74 0d                	je     c0006b56 <iso_readdir+0x38>
c0006b49:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b50:	0f 84 b1 00 00 00    	je     c0006c07 <iso_readdir+0xe9>
c0006b56:	83 ec 0c             	sub    esp,0xc
c0006b59:	68 00 01 03 c0       	push   0xc0030100
c0006b5e:	e8 c5 2d 02 00       	call   c0029928 <iso_kprintf>
c0006b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b66:	e8 d9 2d 02 00       	call   c0029944 <iso_kprintfd>
c0006b6b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b71:	c7 04 24 05 01 03 c0 	mov    DWORD PTR [esp],0xc0030105
c0006b78:	e8 ab 2d 02 00       	call   c0029928 <iso_kprintf>
c0006b7d:	5d                   	pop    ebp
c0006b7e:	ff b3 20 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc82e0]
c0006b84:	e8 bb 2d 02 00       	call   c0029944 <iso_kprintfd>
c0006b89:	c7 04 24 0b 01 03 c0 	mov    DWORD PTR [esp],0xc003010b
c0006b90:	e8 93 2d 02 00       	call   c0029928 <iso_kprintf>
c0006b95:	58                   	pop    eax
c0006b96:	ff b3 24 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc82dc]
c0006b9c:	e8 a3 2d 02 00       	call   c0029944 <iso_kprintfd>
c0006ba1:	c7 04 24 11 01 03 c0 	mov    DWORD PTR [esp],0xc0030111
c0006ba8:	e8 7b 2d 02 00       	call   c0029928 <iso_kprintf>
c0006bad:	58                   	pop    eax
c0006bae:	ff b3 b0 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc8250]
c0006bb4:	e8 8b 2d 02 00       	call   c0029944 <iso_kprintfd>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	eb 42                	jmp    c0006c00 <iso_readdir+0xe2>
c0006bbe:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bc1:	8b 34 85 80 70 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8f80]
c0006bc8:	89 d1                	mov    ecx,edx
c0006bca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006bd0:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006bd4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bd7:	75 35                	jne    c0006c0e <iso_readdir+0xf0>
c0006bd9:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bdf:	81 c2 00 08 00 00    	add    edx,0x800
c0006be5:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006be8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006beb:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006bee:	73 1e                	jae    c0006c0e <iso_readdir+0xf0>
c0006bf0:	c1 ea 0b             	shr    edx,0xb
c0006bf3:	8b 07                	mov    eax,DWORD PTR [edi]
c0006bf5:	01 d0                	add    eax,edx
c0006bf7:	e8 50 f9 ff ff       	call   c000654c <biread>
c0006bfc:	85 c0                	test   eax,eax
c0006bfe:	79 be                	jns    c0006bbe <iso_readdir+0xa0>
c0006c00:	31 c0                	xor    eax,eax
c0006c02:	e9 66 01 00 00       	jmp    c0006d6d <iso_readdir+0x24f>
c0006c07:	31 f6                	xor    esi,esi
c0006c09:	83 c8 ff             	or     eax,0xffffffff
c0006c0c:	eb da                	jmp    c0006be8 <iso_readdir+0xca>
c0006c0e:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c14:	8b ba 28 7d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc82d8]
c0006c1a:	81 c2 20 7d 03 c0    	add    edx,0xc0037d20
c0006c20:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c23:	73 db                	jae    c0006c00 <iso_readdir+0xe2>
c0006c25:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c29:	75 34                	jne    c0006c5f <iso_readdir+0x141>
c0006c2b:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c2f:	75 2e                	jne    c0006c5f <iso_readdir+0x141>
c0006c31:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c34:	8b 34 85 80 70 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8f80]
c0006c3b:	01 f9                	add    ecx,edi
c0006c3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c40:	89 c8                	mov    eax,ecx
c0006c42:	25 ff 07 00 00       	and    eax,0x7ff
c0006c47:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c4c:	01 c8                	add    eax,ecx
c0006c4e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c51:	25 ff 07 00 00       	and    eax,0x7ff
c0006c56:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c5a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c5d:	74 a1                	je     c0006c00 <iso_readdir+0xe2>
c0006c5f:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006c65:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c69:	8d 56 21             	lea    edx,[esi+0x21]
c0006c6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c70:	8d a8 38 7d 03 c0    	lea    ebp,[eax-0x3ffc82c8]
c0006c76:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006c7d:	74 0c                	je     c0006c8b <iso_readdir+0x16d>
c0006c7f:	89 e8                	mov    eax,ebp
c0006c81:	e8 14 f6 ff ff       	call   c000629a <ucs2utfn>
c0006c86:	e9 a6 00 00 00       	jmp    c0006d31 <iso_readdir+0x213>
c0006c8b:	57                   	push   edi
c0006c8c:	51                   	push   ecx
c0006c8d:	52                   	push   edx
c0006c8e:	55                   	push   ebp
c0006c8f:	e8 ec 99 ff ff       	call   c0000680 <strncpy>
c0006c94:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006c98:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006c9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006ca1:	c6 84 01 38 7d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc82c8],0x0
c0006ca9:	e8 49 fe ff ff       	call   c0006af7 <fn_postprocess>
c0006cae:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cb2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cb5:	83 c4 10             	add    esp,0x10
c0006cb8:	29 d0                	sub    eax,edx
c0006cba:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006cbe:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006cc2:	74 05                	je     c0006cc9 <iso_readdir+0x1ab>
c0006cc4:	83 e8 21             	sub    eax,0x21
c0006cc7:	eb 04                	jmp    c0006ccd <iso_readdir+0x1af>
c0006cc9:	47                   	inc    edi
c0006cca:	83 e8 22             	sub    eax,0x22
c0006ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006cd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cdb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006ce0:	7e 4f                	jle    c0006d31 <iso_readdir+0x213>
c0006ce2:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006ce5:	48                   	dec    eax
c0006ce6:	3c 01                	cmp    al,0x1
c0006ce8:	77 47                	ja     c0006d31 <iso_readdir+0x213>
c0006cea:	52                   	push   edx
c0006ceb:	6a 02                	push   0x2
c0006ced:	68 fd 00 03 c0       	push   0xc00300fd
c0006cf2:	57                   	push   edi
c0006cf3:	e8 e8 9a ff ff       	call   c00007e0 <strncmp>
c0006cf8:	83 c4 10             	add    esp,0x10
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 26                	jne    c0006d25 <iso_readdir+0x207>
c0006cff:	50                   	push   eax
c0006d00:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d04:	83 e8 05             	sub    eax,0x5
c0006d07:	50                   	push   eax
c0006d08:	8d 47 05             	lea    eax,[edi+0x5]
c0006d0b:	50                   	push   eax
c0006d0c:	55                   	push   ebp
c0006d0d:	e8 6e 99 ff ff       	call   c0000680 <strncpy>
c0006d12:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006d16:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d1a:	83 c4 10             	add    esp,0x10
c0006d1d:	c6 84 08 33 7d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc82cd],0x0
c0006d25:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d29:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d2d:	01 c7                	add    edi,eax
c0006d2f:	eb aa                	jmp    c0006cdb <iso_readdir+0x1bd>
c0006d31:	83 c8 ff             	or     eax,0xffffffff
c0006d34:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d38:	89 c2                	mov    edx,eax
c0006d3a:	75 0a                	jne    c0006d46 <iso_readdir+0x228>
c0006d3c:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d3f:	e8 06 f6 ff ff       	call   c000634a <iso_733>
c0006d44:	31 d2                	xor    edx,edx
c0006d46:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d4c:	89 83 30 7d 03 c0    	mov    DWORD PTR [ebx-0x3ffc82d0],eax
c0006d52:	89 93 34 7d 03 c0    	mov    DWORD PTR [ebx-0x3ffc82cc],edx
c0006d58:	81 c3 20 7d 03 c0    	add    ebx,0xc0037d20
c0006d5e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d61:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d68:	05 30 7d 03 c0       	add    eax,0xc0037d30
c0006d6d:	83 c4 1c             	add    esp,0x1c
c0006d70:	5b                   	pop    ebx
c0006d71:	5e                   	pop    esi
c0006d72:	5f                   	pop    edi
c0006d73:	5d                   	pop    ebp
c0006d74:	c3                   	ret    

c0006d75 <iso_reset>:
c0006d75:	83 ec 18             	sub    esp,0x18
c0006d78:	68 1a 01 03 c0       	push   0xc003011a
c0006d7d:	e8 a6 2b 02 00       	call   c0029928 <iso_kprintf>
c0006d82:	e8 10 f7 ff ff       	call   c0006497 <iso_break_all>
c0006d87:	e8 09 f7 ff ff       	call   c0006495 <bclear>
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	83 c4 1c             	add    esp,0x1c
c0006d91:	c3                   	ret    

c0006d92 <init_percd>:
c0006d92:	57                   	push   edi
c0006d93:	56                   	push   esi
c0006d94:	53                   	push   ebx
c0006d95:	bb 01 00 00 00       	mov    ebx,0x1
c0006d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9e:	a2 60 70 03 c0       	mov    ds:0xc0037060,al
c0006da3:	e8 cd ff ff ff       	call   c0006d75 <iso_reset>
c0006da8:	c7 05 94 86 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038694,0x0
c0006db2:	a1 8c 86 03 c0       	mov    eax,ds:0xc003868c
c0006db7:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dbb:	e8 8c f7 ff ff       	call   c000654c <biread>
c0006dc0:	89 c6                	mov    esi,eax
c0006dc2:	85 c0                	test   eax,eax
c0006dc4:	0f 88 ba 00 00 00    	js     c0006e84 <init_percd+0xf2>
c0006dca:	8b 04 85 80 70 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8f80]
c0006dd1:	83 c0 04             	add    eax,0x4
c0006dd4:	52                   	push   edx
c0006dd5:	6a 06                	push   0x6
c0006dd7:	68 25 01 03 c0       	push   0xc0030125
c0006ddc:	50                   	push   eax
c0006ddd:	e8 9e 95 ff ff       	call   c0000380 <memcmp>
c0006de2:	83 c4 10             	add    esp,0x10
c0006de5:	85 c0                	test   eax,eax
c0006de7:	74 08                	je     c0006df1 <init_percd+0x5f>
c0006de9:	43                   	inc    ebx
c0006dea:	83 fb 04             	cmp    ebx,0x4
c0006ded:	75 c3                	jne    c0006db2 <init_percd+0x20>
c0006def:	eb 1a                	jmp    c0006e0b <init_percd+0x79>
c0006df1:	8b 04 b5 80 70 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc8f80]
c0006df8:	83 c0 5c             	add    eax,0x5c
c0006dfb:	e8 17 f5 ff ff       	call   c0006317 <isjoliet>
c0006e00:	a3 94 86 03 c0       	mov    ds:0xc0038694,eax
c0006e05:	85 c0                	test   eax,eax
c0006e07:	74 e0                	je     c0006de9 <init_percd+0x57>
c0006e09:	eb 3e                	jmp    c0006e49 <init_percd+0xb7>
c0006e0b:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006e12:	75 35                	jne    c0006e49 <init_percd+0xb7>
c0006e14:	a1 8c 86 03 c0       	mov    eax,ds:0xc003868c
c0006e19:	83 c0 10             	add    eax,0x10
c0006e1c:	e8 2b f7 ff ff       	call   c000654c <biread>
c0006e21:	89 c6                	mov    esi,eax
c0006e23:	85 c0                	test   eax,eax
c0006e25:	78 5f                	js     c0006e86 <init_percd+0xf4>
c0006e27:	83 cb ff             	or     ebx,0xffffffff
c0006e2a:	50                   	push   eax
c0006e2b:	8b 04 b5 80 70 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc8f80]
c0006e32:	6a 06                	push   0x6
c0006e34:	83 c0 04             	add    eax,0x4
c0006e37:	68 2c 01 03 c0       	push   0xc003012c
c0006e3c:	50                   	push   eax
c0006e3d:	e8 3e 95 ff ff       	call   c0000380 <memcmp>
c0006e42:	83 c4 10             	add    esp,0x10
c0006e45:	85 c0                	test   eax,eax
c0006e47:	75 3d                	jne    c0006e86 <init_percd+0xf4>
c0006e49:	8b 34 b5 80 70 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc8f80]
c0006e50:	bf 60 86 03 c0       	mov    edi,0xc0038660
c0006e55:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e5b:	b9 22 00 00 00       	mov    ecx,0x22
c0006e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e62:	b8 62 86 03 c0       	mov    eax,0xc0038662
c0006e67:	31 db                	xor    ebx,ebx
c0006e69:	e8 dc f4 ff ff       	call   c000634a <iso_733>
c0006e6e:	a3 88 86 03 c0       	mov    ds:0xc0038688,eax
c0006e73:	b8 6a 86 03 c0       	mov    eax,0xc003866a
c0006e78:	e8 cd f4 ff ff       	call   c000634a <iso_733>
c0006e7d:	a3 84 86 03 c0       	mov    ds:0xc0038684,eax
c0006e82:	eb 02                	jmp    c0006e86 <init_percd+0xf4>
c0006e84:	89 c3                	mov    ebx,eax
c0006e86:	89 d8                	mov    eax,ebx
c0006e88:	5b                   	pop    ebx
c0006e89:	5e                   	pop    esi
c0006e8a:	5f                   	pop    edi
c0006e8b:	c3                   	ret    

c0006e8c <iso_ioctl>:
c0006e8c:	83 ec 18             	sub    esp,0x18
c0006e8f:	68 33 01 03 c0       	push   0xc0030133
c0006e94:	e8 8f 2a 02 00       	call   c0029928 <iso_kprintf>
c0006e99:	e8 d7 fe ff ff       	call   c0006d75 <iso_reset>
c0006e9e:	31 c0                	xor    eax,eax
c0006ea0:	83 c4 1c             	add    esp,0x1c
c0006ea3:	c3                   	ret    

c0006ea4 <fs_iso9660_init>:
c0006ea4:	53                   	push   ebx
c0006ea5:	31 db                	xor    ebx,ebx
c0006ea7:	83 ec 14             	sub    esp,0x14
c0006eaa:	68 3e 01 03 c0       	push   0xc003013e
c0006eaf:	e8 74 2a 02 00       	call   c0029928 <iso_kprintf>
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	68 40 09 00 00       	push   0x940
c0006ebc:	6a 00                	push   0x0
c0006ebe:	68 20 7d 03 c0       	push   0xc0037d20
c0006ec3:	e8 28 96 ff ff       	call   c00004f0 <memset>
c0006ec8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ecf:	c7 05 20 7d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0037d20,0xffffffff
c0006ed9:	e8 d9 f6 00 00       	call   c00165b7 <malloc>
c0006ede:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ee5:	a3 90 86 03 c0       	mov    ds:0xc0038690,eax
c0006eea:	e8 c8 f6 00 00       	call   c00165b7 <malloc>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	a3 00 7d 03 c0       	mov    ds:0xc0037d00,eax
c0006ef7:	83 ec 0c             	sub    esp,0xc
c0006efa:	68 04 08 00 00       	push   0x804
c0006eff:	e8 b3 f6 00 00       	call   c00165b7 <malloc>
c0006f04:	89 04 9d 80 70 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc8f80],eax
c0006f0b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f11:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f18:	e8 9a f6 00 00       	call   c00165b7 <malloc>
c0006f1d:	83 c4 10             	add    esp,0x10
c0006f20:	89 04 9d 20 70 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc8fe0],eax
c0006f27:	43                   	inc    ebx
c0006f28:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2e:	83 fb 10             	cmp    ebx,0x10
c0006f31:	75 c4                	jne    c0006ef7 <fs_iso9660_init+0x53>
c0006f33:	31 c0                	xor    eax,eax
c0006f35:	83 c4 08             	add    esp,0x8
c0006f38:	5b                   	pop    ebx
c0006f39:	c3                   	ret    

c0006f3a <fs_iso9660_shutdown>:
c0006f3a:	53                   	push   ebx
c0006f3b:	31 db                	xor    ebx,ebx
c0006f3d:	83 ec 08             	sub    esp,0x8
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	ff 34 9d 80 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc8f80]
c0006f4a:	e8 78 f6 00 00       	call   c00165c7 <free>
c0006f4f:	58                   	pop    eax
c0006f50:	ff 34 9d 20 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc8fe0]
c0006f57:	43                   	inc    ebx
c0006f58:	e8 6a f6 00 00       	call   c00165c7 <free>
c0006f5d:	83 c4 10             	add    esp,0x10
c0006f60:	83 fb 10             	cmp    ebx,0x10
c0006f63:	75 db                	jne    c0006f40 <fs_iso9660_shutdown+0x6>
c0006f65:	a1 90 86 03 c0       	mov    eax,ds:0xc0038690
c0006f6a:	85 c0                	test   eax,eax
c0006f6c:	74 0c                	je     c0006f7a <fs_iso9660_shutdown+0x40>
c0006f6e:	83 ec 0c             	sub    esp,0xc
c0006f71:	50                   	push   eax
c0006f72:	e8 50 f6 00 00       	call   c00165c7 <free>
c0006f77:	83 c4 10             	add    esp,0x10
c0006f7a:	a1 00 7d 03 c0       	mov    eax,ds:0xc0037d00
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	74 0c                	je     c0006f8f <fs_iso9660_shutdown+0x55>
c0006f83:	83 ec 0c             	sub    esp,0xc
c0006f86:	50                   	push   eax
c0006f87:	e8 3b f6 00 00       	call   c00165c7 <free>
c0006f8c:	83 c4 10             	add    esp,0x10
c0006f8f:	c7 05 00 7d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037d00,0x0
c0006f99:	c7 05 90 86 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038690,0x0
c0006fa3:	31 c0                	xor    eax,eax
c0006fa5:	83 c4 08             	add    esp,0x8
c0006fa8:	5b                   	pop    ebx
c0006fa9:	c3                   	ret    
c0006faa:	66 90                	xchg   ax,ax

c0006fac <lwip_init>:
c0006fac:	83 ec 0c             	sub    esp,0xc
c0006faf:	e8 48 2c 00 00       	call   c0009bfc <stats_init>
c0006fb4:	e8 e3 9d ff ff       	call   c0000d9c <sys_init>
c0006fb9:	e8 ae 01 00 00       	call   c000716c <mem_init>
c0006fbe:	e8 05 0a 00 00       	call   c00079c8 <memp_init>
c0006fc3:	e8 e8 0c 00 00       	call   c0007cb0 <netif_init>
c0006fc8:	e8 6f 9c ff ff       	call   c0000c3c <lwip_socket_init>
c0006fcd:	e8 76 9d 00 00       	call   c0010d48 <sys_timeouts_init>
c0006fd2:	90                   	nop
c0006fd3:	83 c4 0c             	add    esp,0xc
c0006fd6:	c3                   	ret    
c0006fd7:	90                   	nop

c0006fd8 <plug_holes>:
c0006fd8:	83 ec 1c             	sub    esp,0x1c
c0006fdb:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0006fe0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe4:	73 16                	jae    c0006ffc <plug_holes+0x24>
c0006fe6:	83 ec 08             	sub    esp,0x8
c0006fe9:	68 4f 01 03 c0       	push   0xc003014f
c0006fee:	68 66 01 03 c0       	push   0xc0030166
c0006ff3:	e8 d0 8e 01 00       	call   c001fec8 <CPrintf>
c0006ff8:	83 c4 10             	add    esp,0x10
c0006ffb:	90                   	nop
c0006ffc:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007001:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007005:	72 15                	jb     c000701c <plug_holes+0x44>
c0007007:	83 ec 08             	sub    esp,0x8
c000700a:	68 73 01 03 c0       	push   0xc0030173
c000700f:	68 66 01 03 c0       	push   0xc0030166
c0007014:	e8 af 8e 01 00       	call   c001fec8 <CPrintf>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007020:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007023:	0f b6 c0             	movzx  eax,al
c0007026:	85 c0                	test   eax,eax
c0007028:	74 16                	je     c0007040 <plug_holes+0x68>
c000702a:	83 ec 08             	sub    esp,0x8
c000702d:	68 8d 01 03 c0       	push   0xc003018d
c0007032:	68 66 01 03 c0       	push   0xc0030166
c0007037:	e8 8c 8e 01 00       	call   c001fec8 <CPrintf>
c000703c:	83 c4 10             	add    esp,0x10
c000703f:	90                   	nop
c0007040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007044:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007047:	0f b7 c0             	movzx  eax,ax
c000704a:	3d 40 06 00 00       	cmp    eax,0x640
c000704f:	76 17                	jbe    c0007068 <plug_holes+0x90>
c0007051:	83 ec 08             	sub    esp,0x8
c0007054:	68 20 02 03 c0       	push   0xc0030220
c0007059:	68 66 01 03 c0       	push   0xc0030166
c000705e:	e8 65 8e 01 00       	call   c001fec8 <CPrintf>
c0007063:	83 c4 10             	add    esp,0x10
c0007066:	66 90                	xchg   ax,ax
c0007068:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007072:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007075:	0f b7 c0             	movzx  eax,ax
c0007078:	01 d0                	add    eax,edx
c000707a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007082:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007086:	74 64                	je     c00070ec <plug_holes+0x114>
c0007088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000708c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000708f:	0f b6 c0             	movzx  eax,al
c0007092:	85 c0                	test   eax,eax
c0007094:	75 56                	jne    c00070ec <plug_holes+0x114>
c0007096:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c000709b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000709f:	74 4b                	je     c00070ec <plug_holes+0x114>
c00070a1:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00070a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070aa:	75 0c                	jne    c00070b8 <plug_holes+0xe0>
c00070ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070b0:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070c3:	66 89 02             	mov    WORD PTR [edx],ax
c00070c6:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00070cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070cf:	29 c2                	sub    edx,eax
c00070d1:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c00070d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070de:	0f b7 c0             	movzx  eax,ax
c00070e1:	01 c1                	add    ecx,eax
c00070e3:	89 d0                	mov    eax,edx
c00070e5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c00070e9:	8d 76 00             	lea    esi,[esi+0x0]
c00070ec:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00070f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00070fa:	0f b7 c0             	movzx  eax,ax
c00070fd:	01 d0                	add    eax,edx
c00070ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007107:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000710b:	74 57                	je     c0007164 <plug_holes+0x18c>
c000710d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 49                	jne    c0007164 <plug_holes+0x18c>
c000711b:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007120:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007124:	75 0a                	jne    c0007130 <plug_holes+0x158>
c0007126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000712a:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c000712f:	90                   	nop
c0007130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007134:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007137:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713b:	66 89 02             	mov    WORD PTR [edx],ax
c000713e:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007147:	29 c2                	sub    edx,eax
c0007149:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c000714f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007153:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007156:	0f b7 c0             	movzx  eax,ax
c0007159:	01 c1                	add    ecx,eax
c000715b:	89 d0                	mov    eax,edx
c000715d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0007161:	8d 76 00             	lea    esi,[esi+0x0]
c0007164:	90                   	nop
c0007165:	83 c4 1c             	add    esp,0x1c
c0007168:	c3                   	ret    
c0007169:	8d 76 00             	lea    esi,[esi+0x0]

c000716c <mem_init>:
c000716c:	83 ec 1c             	sub    esp,0x1c
c000716f:	c7 05 a4 86 03 c0 c0 70 03 c0 	mov    DWORD PTR ds:0xc00386a4,0xc00370c0
c0007179:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c000717e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007186:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000718b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007199:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000719d:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00071a2:	05 40 06 00 00       	add    eax,0x640
c00071a7:	a3 a0 86 03 c0       	mov    ds:0xc00386a0,eax
c00071ac:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071b1:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071b5:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071ba:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071bf:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071c4:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071ca:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00071cf:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00071d4:	66 c7 05 c8 77 03 c0 40 06 	mov    WORD PTR ds:0xc00377c8,0x640
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	6a 01                	push   0x1
c00071e2:	68 98 86 03 c0       	push   0xc0038698
c00071e7:	e8 80 9a ff ff       	call   c0000c6c <sys_sem_new>
c00071ec:	83 c4 10             	add    esp,0x10
c00071ef:	0f be c0             	movsx  eax,al
c00071f2:	85 c0                	test   eax,eax
c00071f4:	74 16                	je     c000720c <mem_init+0xa0>
c00071f6:	83 ec 08             	sub    esp,0x8
c00071f9:	68 a8 01 03 c0       	push   0xc00301a8
c00071fe:	68 66 01 03 c0       	push   0xc0030166
c0007203:	e8 c0 8c 01 00       	call   c001fec8 <CPrintf>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	90                   	nop
c000720d:	83 c4 1c             	add    esp,0x1c
c0007210:	c3                   	ret    
c0007211:	8d 76 00             	lea    esi,[esi+0x0]

c0007214 <mem_free>:
c0007214:	83 ec 1c             	sub    esp,0x1c
c0007217:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000721c:	0f 84 0e 01 00 00    	je     c0007330 <mem_free+0x11c>
c0007222:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007227:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000722b:	72 0b                	jb     c0007238 <mem_free+0x24>
c000722d:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007232:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007236:	72 18                	jb     c0007250 <mem_free+0x3c>
c0007238:	83 ec 08             	sub    esp,0x8
c000723b:	68 c3 01 03 c0       	push   0xc00301c3
c0007240:	68 66 01 03 c0       	push   0xc0030166
c0007245:	e8 7e 8c 01 00       	call   c001fec8 <CPrintf>
c000724a:	83 c4 10             	add    esp,0x10
c000724d:	8d 76 00             	lea    esi,[esi+0x0]
c0007250:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007255:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007259:	72 0d                	jb     c0007268 <mem_free+0x54>
c000725b:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007260:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007264:	72 22                	jb     c0007288 <mem_free+0x74>
c0007266:	66 90                	xchg   ax,ax
c0007268:	e8 4b 8c 01 00       	call   c001feb8 <CLockScheduler>
c000726d:	66 a1 d0 77 03 c0    	mov    ax,ds:0xc00377d0
c0007273:	83 c0 01             	add    eax,0x1
c0007276:	66 a3 d0 77 03 c0    	mov    ds:0xc00377d0,ax
c000727c:	e8 1b 8c 01 00       	call   c001fe9c <CUnlockScheduler>
c0007281:	e9 ae 00 00 00       	jmp    c0007334 <mem_free+0x120>
c0007286:	66 90                	xchg   ax,ax
c0007288:	83 ec 08             	sub    esp,0x8
c000728b:	6a 00                	push   0x0
c000728d:	68 98 86 03 c0       	push   0xc0038698
c0007292:	e8 2d 9a ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007297:	83 c4 10             	add    esp,0x10
c000729a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000729e:	83 e8 06             	sub    eax,0x6
c00072a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072a9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ac:	0f b6 c0             	movzx  eax,al
c00072af:	85 c0                	test   eax,eax
c00072b1:	75 15                	jne    c00072c8 <mem_free+0xb4>
c00072b3:	83 ec 08             	sub    esp,0x8
c00072b6:	68 da 01 03 c0       	push   0xc00301da
c00072bb:	68 66 01 03 c0       	push   0xc0030166
c00072c0:	e8 03 8c 01 00       	call   c001fec8 <CPrintf>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072d0:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00072d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072d9:	73 09                	jae    c00072e4 <mem_free+0xd0>
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00072e4:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00072ea:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00072f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072f4:	29 d1                	sub    ecx,edx
c00072f6:	89 ca                	mov    edx,ecx
c00072f8:	89 d1                	mov    ecx,edx
c00072fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072fe:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007301:	29 d1                	sub    ecx,edx
c0007303:	89 ca                	mov    edx,ecx
c0007305:	01 d0                	add    eax,edx
c0007307:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000730d:	83 ec 0c             	sub    esp,0xc
c0007310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007314:	e8 bf fc ff ff       	call   c0006fd8 <plug_holes>
c0007319:	83 c4 10             	add    esp,0x10
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 98 86 03 c0       	push   0xc0038698
c0007324:	e8 83 99 ff ff       	call   c0000cac <sys_sem_signal>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	eb 06                	jmp    c0007334 <mem_free+0x120>
c000732e:	66 90                	xchg   ax,ax
c0007330:	90                   	nop
c0007331:	8d 76 00             	lea    esi,[esi+0x0]
c0007334:	83 c4 1c             	add    esp,0x1c
c0007337:	c3                   	ret    

c0007338 <mem_trim>:
c0007338:	83 ec 2c             	sub    esp,0x2c
c000733b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000733f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007344:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007349:	83 f8 0b             	cmp    eax,0xb
c000734c:	77 0a                	ja     c0007358 <mem_trim+0x20>
c000734e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007355:	8d 76 00             	lea    esi,[esi+0x0]
c0007358:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000735d:	3d 40 06 00 00       	cmp    eax,0x640
c0007362:	76 0c                	jbe    c0007370 <mem_trim+0x38>
c0007364:	b8 00 00 00 00       	mov    eax,0x0
c0007369:	e9 d6 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c000736e:	66 90                	xchg   ax,ax
c0007370:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007375:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007379:	72 0d                	jb     c0007388 <mem_trim+0x50>
c000737b:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007380:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007384:	72 1a                	jb     c00073a0 <mem_trim+0x68>
c0007386:	66 90                	xchg   ax,ax
c0007388:	83 ec 08             	sub    esp,0x8
c000738b:	68 ee 01 03 c0       	push   0xc00301ee
c0007390:	68 66 01 03 c0       	push   0xc0030166
c0007395:	e8 2e 8b 01 00       	call   c001fec8 <CPrintf>
c000739a:	83 c4 10             	add    esp,0x10
c000739d:	8d 76 00             	lea    esi,[esi+0x0]
c00073a0:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00073a5:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073a9:	72 0d                	jb     c00073b8 <mem_trim+0x80>
c00073ab:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00073b0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073b4:	72 26                	jb     c00073dc <mem_trim+0xa4>
c00073b6:	66 90                	xchg   ax,ax
c00073b8:	e8 fb 8a 01 00       	call   c001feb8 <CLockScheduler>
c00073bd:	66 a1 d0 77 03 c0    	mov    ax,ds:0xc00377d0
c00073c3:	83 c0 01             	add    eax,0x1
c00073c6:	66 a3 d0 77 03 c0    	mov    ds:0xc00377d0,ax
c00073cc:	e8 cb 8a 01 00       	call   c001fe9c <CUnlockScheduler>
c00073d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073d5:	e9 6a 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c00073da:	66 90                	xchg   ax,ax
c00073dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073e0:	83 e8 06             	sub    eax,0x6
c00073e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073e7:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00073ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00073f0:	29 c2                	sub    edx,eax
c00073f2:	89 d0                	mov    eax,edx
c00073f4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00073f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073fd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007400:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007405:	89 d1                	mov    ecx,edx
c0007407:	29 c1                	sub    ecx,eax
c0007409:	89 c8                	mov    eax,ecx
c000740b:	83 e8 06             	sub    eax,0x6
c000740e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0007413:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007418:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000741d:	39 c2                	cmp    edx,eax
c000741f:	76 17                	jbe    c0007438 <mem_trim+0x100>
c0007421:	83 ec 08             	sub    esp,0x8
c0007424:	68 4c 02 03 c0       	push   0xc003024c
c0007429:	68 66 01 03 c0       	push   0xc0030166
c000742e:	e8 95 8a 01 00       	call   c001fec8 <CPrintf>
c0007433:	83 c4 10             	add    esp,0x10
c0007436:	66 90                	xchg   ax,ax
c0007438:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000743d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007442:	39 c2                	cmp    edx,eax
c0007444:	76 0a                	jbe    c0007450 <mem_trim+0x118>
c0007446:	b8 00 00 00 00       	mov    eax,0x0
c000744b:	e9 f4 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	75 0a                	jne    c0007468 <mem_trim+0x130>
c000745e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007462:	e9 dd 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007467:	90                   	nop
c0007468:	83 ec 08             	sub    esp,0x8
c000746b:	6a 00                	push   0x0
c000746d:	68 98 86 03 c0       	push   0xc0038698
c0007472:	e8 4d 98 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007477:	83 c4 10             	add    esp,0x10
c000747a:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007484:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007487:	0f b7 c0             	movzx  eax,ax
c000748a:	01 d0                	add    eax,edx
c000748c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007490:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007494:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007497:	0f b6 c0             	movzx  eax,al
c000749a:	85 c0                	test   eax,eax
c000749c:	0f 85 c6 00 00 00    	jne    c0007568 <mem_trim+0x230>
c00074a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074a6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074a9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074ae:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b7:	01 d0                	add    eax,edx
c00074b9:	83 c0 06             	add    eax,0x6
c00074bc:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074c1:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00074c6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074ca:	75 14                	jne    c00074e0 <mem_trim+0x1a8>
c00074cc:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00074d2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074d7:	01 d0                	add    eax,edx
c00074d9:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00074de:	66 90                	xchg   ax,ax
c00074e0:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00074e6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074eb:	01 d0                	add    eax,edx
c00074ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074f5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074fd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0007502:	66 89 02             	mov    WORD PTR [edx],ax
c0007505:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007509:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000750e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751a:	66 89 02             	mov    WORD PTR [edx],ax
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007524:	0f b7 c0             	movzx  eax,ax
c0007527:	3d 40 06 00 00       	cmp    eax,0x640
c000752c:	74 1a                	je     c0007548 <mem_trim+0x210>
c000752e:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007538:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753b:	0f b7 c0             	movzx  eax,ax
c000753e:	01 c2                	add    edx,eax
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007548:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000754e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007556:	29 d1                	sub    ecx,edx
c0007558:	89 ca                	mov    edx,ecx
c000755a:	01 d0                	add    eax,edx
c000755c:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c0007562:	e9 c9 00 00 00       	jmp    c0007630 <mem_trim+0x2f8>
c0007567:	90                   	nop
c0007568:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000756d:	8d 50 12             	lea    edx,[eax+0x12]
c0007570:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007575:	39 c2                	cmp    edx,eax
c0007577:	0f 87 b3 00 00 00    	ja     c0007630 <mem_trim+0x2f8>
c000757d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007586:	01 d0                	add    eax,edx
c0007588:	83 c0 06             	add    eax,0x6
c000758b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007590:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007596:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000759b:	01 d0                	add    eax,edx
c000759d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075a1:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00075a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075aa:	73 0c                	jae    c00075b8 <mem_trim+0x280>
c00075ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075b0:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00075b5:	8d 76 00             	lea    esi,[esi+0x0]
c00075b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e3:	66 89 02             	mov    WORD PTR [edx],ax
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075ed:	0f b7 c0             	movzx  eax,ax
c00075f0:	3d 40 06 00 00       	cmp    eax,0x640
c00075f5:	74 1d                	je     c0007614 <mem_trim+0x2dc>
c00075f7:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00075fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007601:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	01 c2                	add    edx,eax
c0007609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007611:	8d 76 00             	lea    esi,[esi+0x0]
c0007614:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000761a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000761e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007622:	29 d1                	sub    ecx,edx
c0007624:	89 ca                	mov    edx,ecx
c0007626:	01 d0                	add    eax,edx
c0007628:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000762e:	66 90                	xchg   ax,ax
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	68 98 86 03 c0       	push   0xc0038698
c0007638:	e8 6f 96 ff ff       	call   c0000cac <sys_sem_signal>
c000763d:	83 c4 10             	add    esp,0x10
c0007640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007644:	83 c4 2c             	add    esp,0x2c
c0007647:	c3                   	ret    

c0007648 <mem_malloc>:
c0007648:	53                   	push   ebx
c0007649:	83 ec 28             	sub    esp,0x28
c000764c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007650:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007655:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000765a:	85 c0                	test   eax,eax
c000765c:	75 0a                	jne    c0007668 <mem_malloc+0x20>
c000765e:	b8 00 00 00 00       	mov    eax,0x0
c0007663:	e9 f4 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007668:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000766d:	83 f8 0b             	cmp    eax,0xb
c0007670:	77 0a                	ja     c000767c <mem_malloc+0x34>
c0007672:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007679:	8d 76 00             	lea    esi,[esi+0x0]
c000767c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007681:	3d 40 06 00 00       	cmp    eax,0x640
c0007686:	76 0c                	jbe    c0007694 <mem_malloc+0x4c>
c0007688:	b8 00 00 00 00       	mov    eax,0x0
c000768d:	e9 ca 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007692:	66 90                	xchg   ax,ax
c0007694:	83 ec 08             	sub    esp,0x8
c0007697:	6a 00                	push   0x0
c0007699:	68 98 86 03 c0       	push   0xc0038698
c000769e:	e8 21 96 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00076a3:	83 c4 10             	add    esp,0x10
c00076a6:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c00076ac:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00076b1:	29 c2                	sub    edx,eax
c00076b3:	89 d0                	mov    eax,edx
c00076b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076ba:	e9 5d 02 00 00       	jmp    c000791c <mem_malloc+0x2d4>
c00076bf:	90                   	nop
c00076c0:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00076c6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076cb:	01 d0                	add    eax,edx
c00076cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	0f 85 21 02 00 00    	jne    c0007904 <mem_malloc+0x2bc>
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ea:	0f b7 d0             	movzx  edx,ax
c00076ed:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076f2:	29 c2                	sub    edx,eax
c00076f4:	89 d0                	mov    eax,edx
c00076f6:	8d 50 fa             	lea    edx,[eax-0x6]
c00076f9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00076fe:	39 c2                	cmp    edx,eax
c0007700:	0f 82 fe 01 00 00    	jb     c0007904 <mem_malloc+0x2bc>
c0007706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000770d:	0f b7 d0             	movzx  edx,ax
c0007710:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007715:	29 c2                	sub    edx,eax
c0007717:	89 d0                	mov    eax,edx
c0007719:	8d 50 fa             	lea    edx,[eax-0x6]
c000771c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007721:	83 c0 12             	add    eax,0x12
c0007724:	39 c2                	cmp    edx,eax
c0007726:	0f 82 c4 00 00 00    	jb     c00077f0 <mem_malloc+0x1a8>
c000772c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007735:	01 d0                	add    eax,edx
c0007737:	83 c0 06             	add    eax,0x6
c000773a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000773f:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000774a:	01 d0                	add    eax,edx
c000774c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007754:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000775c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000775f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007763:	66 89 02             	mov    WORD PTR [edx],ax
c0007766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000776a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000776f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007777:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000777c:	66 89 02             	mov    WORD PTR [edx],ax
c000777f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007783:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000778b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000778e:	0f b7 c0             	movzx  eax,ax
c0007791:	3d 40 06 00 00       	cmp    eax,0x640
c0007796:	74 1c                	je     c00077b4 <mem_malloc+0x16c>
c0007798:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a5:	0f b7 c0             	movzx  eax,ax
c00077a8:	01 c2                	add    edx,eax
c00077aa:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077af:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077b3:	90                   	nop
c00077b4:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077be:	01 d0                	add    eax,edx
c00077c0:	83 c0 06             	add    eax,0x6
c00077c3:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c00077c9:	66 8b 15 cc 77 03 c0 	mov    dx,WORD PTR ds:0xc00377cc
c00077d0:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077d6:	0f b7 d2             	movzx  edx,dx
c00077d9:	0f b7 c0             	movzx  eax,ax
c00077dc:	39 c2                	cmp    edx,eax
c00077de:	73 60                	jae    c0007840 <mem_malloc+0x1f8>
c00077e0:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077e6:	66 a3 cc 77 03 c0    	mov    ds:0xc00377cc,ax
c00077ec:	eb 52                	jmp    c0007840 <mem_malloc+0x1f8>
c00077ee:	66 90                	xchg   ax,ax
c00077f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00077f4:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00077f8:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007802:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007805:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c000780b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000780f:	29 cb                	sub    ebx,ecx
c0007811:	89 d9                	mov    ecx,ebx
c0007813:	29 ca                	sub    edx,ecx
c0007815:	01 d0                	add    eax,edx
c0007817:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000781d:	66 8b 15 cc 77 03 c0 	mov    dx,WORD PTR ds:0xc00377cc
c0007824:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000782a:	0f b7 d2             	movzx  edx,dx
c000782d:	0f b7 c0             	movzx  eax,ax
c0007830:	39 c2                	cmp    edx,eax
c0007832:	73 0c                	jae    c0007840 <mem_malloc+0x1f8>
c0007834:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c000783a:	66 a3 cc 77 03 c0    	mov    ds:0xc00377cc,ax
c0007840:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007845:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007849:	75 71                	jne    c00078bc <mem_malloc+0x274>
c000784b:	eb 1b                	jmp    c0007868 <mem_malloc+0x220>
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007856:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c000785b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000785e:	0f b7 c0             	movzx  eax,ax
c0007861:	01 d0                	add    eax,edx
c0007863:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c0007868:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c000786d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007870:	0f b6 c0             	movzx  eax,al
c0007873:	85 c0                	test   eax,eax
c0007875:	74 11                	je     c0007888 <mem_malloc+0x240>
c0007877:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c000787d:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007882:	39 c2                	cmp    edx,eax
c0007884:	75 ca                	jne    c0007850 <mem_malloc+0x208>
c0007886:	66 90                	xchg   ax,ax
c0007888:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c000788e:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007893:	39 c2                	cmp    edx,eax
c0007895:	74 25                	je     c00078bc <mem_malloc+0x274>
c0007897:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c000789c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000789f:	0f b6 c0             	movzx  eax,al
c00078a2:	85 c0                	test   eax,eax
c00078a4:	74 16                	je     c00078bc <mem_malloc+0x274>
c00078a6:	83 ec 08             	sub    esp,0x8
c00078a9:	68 05 02 03 c0       	push   0xc0030205
c00078ae:	68 66 01 03 c0       	push   0xc0030166
c00078b3:	e8 10 86 01 00       	call   c001fec8 <CPrintf>
c00078b8:	83 c4 10             	add    esp,0x10
c00078bb:	90                   	nop
c00078bc:	83 ec 0c             	sub    esp,0xc
c00078bf:	68 98 86 03 c0       	push   0xc0038698
c00078c4:	e8 e3 93 ff ff       	call   c0000cac <sys_sem_signal>
c00078c9:	83 c4 10             	add    esp,0x10
c00078cc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d5:	01 d0                	add    eax,edx
c00078d7:	8d 50 06             	lea    edx,[eax+0x6]
c00078da:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00078df:	39 c2                	cmp    edx,eax
c00078e1:	76 15                	jbe    c00078f8 <mem_malloc+0x2b0>
c00078e3:	83 ec 08             	sub    esp,0x8
c00078e6:	68 6c 02 03 c0       	push   0xc003026c
c00078eb:	68 66 01 03 c0       	push   0xc0030166
c00078f0:	e8 d3 85 01 00       	call   c001fec8 <CPrintf>
c00078f5:	83 c4 10             	add    esp,0x10
c00078f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078fc:	83 c0 06             	add    eax,0x6
c00078ff:	eb 5b                	jmp    c000795c <mem_malloc+0x314>
c0007901:	8d 76 00             	lea    esi,[esi+0x0]
c0007904:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000790a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000790f:	01 d0                	add    eax,edx
c0007911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007914:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007921:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007926:	b9 40 06 00 00       	mov    ecx,0x640
c000792b:	29 d1                	sub    ecx,edx
c000792d:	89 ca                	mov    edx,ecx
c000792f:	39 d0                	cmp    eax,edx
c0007931:	0f 8c 89 fd ff ff    	jl     c00076c0 <mem_malloc+0x78>
c0007937:	66 a1 ce 77 03 c0    	mov    ax,ds:0xc00377ce
c000793d:	83 c0 01             	add    eax,0x1
c0007940:	66 a3 ce 77 03 c0    	mov    ds:0xc00377ce,ax
c0007946:	83 ec 0c             	sub    esp,0xc
c0007949:	68 98 86 03 c0       	push   0xc0038698
c000794e:	e8 59 93 ff ff       	call   c0000cac <sys_sem_signal>
c0007953:	83 c4 10             	add    esp,0x10
c0007956:	b8 00 00 00 00       	mov    eax,0x0
c000795b:	90                   	nop
c000795c:	83 c4 28             	add    esp,0x28
c000795f:	5b                   	pop    ebx
c0007960:	c3                   	ret    
c0007961:	8d 76 00             	lea    esi,[esi+0x0]

c0007964 <mem_calloc>:
c0007964:	83 ec 2c             	sub    esp,0x2c
c0007967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000796f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007974:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007979:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000797d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007981:	0f af c2             	imul   eax,edx
c0007984:	0f b7 c0             	movzx  eax,ax
c0007987:	83 ec 0c             	sub    esp,0xc
c000798a:	50                   	push   eax
c000798b:	e8 b8 fc ff ff       	call   c0007648 <mem_malloc>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007997:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000799c:	74 22                	je     c00079c0 <mem_calloc+0x5c>
c000799e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079a3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079a8:	0f af c2             	imul   eax,edx
c00079ab:	83 ec 04             	sub    esp,0x4
c00079ae:	50                   	push   eax
c00079af:	6a 00                	push   0x0
c00079b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b5:	e8 36 8b ff ff       	call   c00004f0 <memset>
c00079ba:	83 c4 10             	add    esp,0x10
c00079bd:	8d 76 00             	lea    esi,[esi+0x0]
c00079c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079c4:	83 c4 2c             	add    esp,0x2c
c00079c7:	c3                   	ret    

c00079c8 <memp_init>:
c00079c8:	83 ec 10             	sub    esp,0x10
c00079cb:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079d2:	eb 78                	jmp    c0007a4c <memp_init+0x84>
c00079d4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079d9:	89 d0                	mov    eax,edx
c00079db:	c1 e0 02             	shl    eax,0x2
c00079de:	01 d0                	add    eax,edx
c00079e0:	01 c0                	add    eax,eax
c00079e2:	05 d4 77 03 c0       	add    eax,0xc00377d4
c00079e7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00079ec:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f1:	89 d0                	mov    eax,edx
c00079f3:	c1 e0 02             	shl    eax,0x2
c00079f6:	01 d0                	add    eax,edx
c00079f8:	01 c0                	add    eax,eax
c00079fa:	05 d6 77 03 c0       	add    eax,0xc00377d6
c00079ff:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a04:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a09:	89 d0                	mov    eax,edx
c0007a0b:	c1 e0 02             	shl    eax,0x2
c0007a0e:	01 d0                	add    eax,edx
c0007a10:	01 c0                	add    eax,eax
c0007a12:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007a17:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a1c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a21:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c0007a26:	66 8b 94 00 bc 02 03 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffcfd44]
c0007a2e:	89 c8                	mov    eax,ecx
c0007a30:	c1 e0 02             	shl    eax,0x2
c0007a33:	01 c8                	add    eax,ecx
c0007a35:	01 c0                	add    eax,eax
c0007a37:	05 d2 77 03 c0       	add    eax,0xc00377d2
c0007a3c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a3f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a44:	83 c0 01             	add    eax,0x1
c0007a47:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a4c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a51:	83 f8 0d             	cmp    eax,0xd
c0007a54:	0f 86 7a ff ff ff    	jbe    c00079d4 <memp_init+0xc>
c0007a5a:	c7 44 24 0c c0 86 03 c0 	mov    DWORD PTR [esp+0xc],0xc00386c0
c0007a62:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a69:	e9 8a 00 00 00       	jmp    c0007af8 <memp_init+0x130>
c0007a6e:	66 90                	xchg   ax,ax
c0007a70:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a75:	c7 04 85 60 b8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc47a0],0x0
c0007a80:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007a87:	eb 47                	jmp    c0007ad0 <memp_init+0x108>
c0007a89:	8d 76 00             	lea    esi,[esi+0x0]
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	8b 14 85 60 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc47a0]
c0007a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a9c:	89 10                	mov    DWORD PTR [eax],edx
c0007a9e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aa7:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007aae:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ab3:	66 8b 84 00 d8 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd28]
c0007abb:	0f b7 c0             	movzx  eax,ax
c0007abe:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac6:	83 c0 01             	add    eax,0x1
c0007ac9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ace:	66 90                	xchg   ax,ax
c0007ad0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ad5:	66 8b 84 00 bc 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd44]
c0007add:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007ae2:	0f b7 c0             	movzx  eax,ax
c0007ae5:	39 c2                	cmp    edx,eax
c0007ae7:	72 a3                	jb     c0007a8c <memp_init+0xc4>
c0007ae9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007aee:	83 c0 01             	add    eax,0x1
c0007af1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007af6:	66 90                	xchg   ax,ax
c0007af8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007afd:	83 f8 0d             	cmp    eax,0xd
c0007b00:	0f 86 6a ff ff ff    	jbe    c0007a70 <memp_init+0xa8>
c0007b06:	90                   	nop
c0007b07:	83 c4 10             	add    esp,0x10
c0007b0a:	c3                   	ret    
c0007b0b:	90                   	nop

c0007b0c <memp_malloc>:
c0007b0c:	83 ec 1c             	sub    esp,0x1c
c0007b0f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b14:	76 22                	jbe    c0007b38 <memp_malloc+0x2c>
c0007b16:	83 ec 08             	sub    esp,0x8
c0007b19:	68 9c 02 03 c0       	push   0xc003029c
c0007b1e:	68 66 01 03 c0       	push   0xc0030166
c0007b23:	e8 a0 83 01 00       	call   c001fec8 <CPrintf>
c0007b28:	83 c4 10             	add    esp,0x10
c0007b2b:	b8 00 00 00 00       	mov    eax,0x0
c0007b30:	e9 ff 00 00 00       	jmp    c0007c34 <memp_malloc+0x128>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	e8 7b 83 01 00       	call   c001feb8 <CLockScheduler>
c0007b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b41:	8b 04 85 60 b8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc47a0]
c0007b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b51:	0f 84 a1 00 00 00    	je     c0007bf8 <memp_malloc+0xec>
c0007b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b61:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b6c:	89 d0                	mov    eax,edx
c0007b6e:	c1 e0 02             	shl    eax,0x2
c0007b71:	01 d0                	add    eax,edx
c0007b73:	01 c0                	add    eax,eax
c0007b75:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007b7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b7d:	83 c0 01             	add    eax,0x1
c0007b80:	89 c2                	mov    edx,eax
c0007b82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b86:	89 c8                	mov    eax,ecx
c0007b88:	c1 e0 02             	shl    eax,0x2
c0007b8b:	01 c8                	add    eax,ecx
c0007b8d:	01 c0                	add    eax,eax
c0007b8f:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007b94:	66 89 10             	mov    WORD PTR [eax],dx
c0007b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b9b:	89 d0                	mov    eax,edx
c0007b9d:	c1 e0 02             	shl    eax,0x2
c0007ba0:	01 d0                	add    eax,edx
c0007ba2:	01 c0                	add    eax,eax
c0007ba4:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007ba9:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bb0:	89 c8                	mov    eax,ecx
c0007bb2:	c1 e0 02             	shl    eax,0x2
c0007bb5:	01 c8                	add    eax,ecx
c0007bb7:	01 c0                	add    eax,eax
c0007bb9:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bbe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bc1:	0f b7 d2             	movzx  edx,dx
c0007bc4:	0f b7 c0             	movzx  eax,ax
c0007bc7:	39 c2                	cmp    edx,eax
c0007bc9:	73 5d                	jae    c0007c28 <memp_malloc+0x11c>
c0007bcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcf:	89 d0                	mov    eax,edx
c0007bd1:	c1 e0 02             	shl    eax,0x2
c0007bd4:	01 d0                	add    eax,edx
c0007bd6:	01 c0                	add    eax,eax
c0007bd8:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bdd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007be0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007be4:	89 c8                	mov    eax,ecx
c0007be6:	c1 e0 02             	shl    eax,0x2
c0007be9:	01 c8                	add    eax,ecx
c0007beb:	01 c0                	add    eax,eax
c0007bed:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007bf2:	66 89 10             	mov    WORD PTR [eax],dx
c0007bf5:	eb 31                	jmp    c0007c28 <memp_malloc+0x11c>
c0007bf7:	90                   	nop
c0007bf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bfc:	89 d0                	mov    eax,edx
c0007bfe:	c1 e0 02             	shl    eax,0x2
c0007c01:	01 d0                	add    eax,edx
c0007c03:	01 c0                	add    eax,eax
c0007c05:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007c0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c0d:	83 c0 01             	add    eax,0x1
c0007c10:	89 c2                	mov    edx,eax
c0007c12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c16:	89 c8                	mov    eax,ecx
c0007c18:	c1 e0 02             	shl    eax,0x2
c0007c1b:	01 c8                	add    eax,ecx
c0007c1d:	01 c0                	add    eax,eax
c0007c1f:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007c24:	66 89 10             	mov    WORD PTR [eax],dx
c0007c27:	90                   	nop
c0007c28:	e8 6f 82 01 00       	call   c001fe9c <CUnlockScheduler>
c0007c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c31:	8d 76 00             	lea    esi,[esi+0x0]
c0007c34:	83 c4 1c             	add    esp,0x1c
c0007c37:	c3                   	ret    

c0007c38 <memp_free>:
c0007c38:	83 ec 1c             	sub    esp,0x1c
c0007c3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c40:	74 66                	je     c0007ca8 <memp_free+0x70>
c0007c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c4a:	e8 69 82 01 00       	call   c001feb8 <CLockScheduler>
c0007c4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c53:	89 d0                	mov    eax,edx
c0007c55:	c1 e0 02             	shl    eax,0x2
c0007c58:	01 d0                	add    eax,edx
c0007c5a:	01 c0                	add    eax,eax
c0007c5c:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007c61:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c64:	83 e8 01             	sub    eax,0x1
c0007c67:	89 c2                	mov    edx,eax
c0007c69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c6d:	89 c8                	mov    eax,ecx
c0007c6f:	c1 e0 02             	shl    eax,0x2
c0007c72:	01 c8                	add    eax,ecx
c0007c74:	01 c0                	add    eax,eax
c0007c76:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007c7b:	66 89 10             	mov    WORD PTR [eax],dx
c0007c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c82:	8b 14 85 60 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc47a0]
c0007c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c8d:	89 10                	mov    DWORD PTR [eax],edx
c0007c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c97:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007c9e:	e8 f9 81 01 00       	call   c001fe9c <CUnlockScheduler>
c0007ca3:	eb 07                	jmp    c0007cac <memp_free+0x74>
c0007ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca8:	90                   	nop
c0007ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cac:	83 c4 1c             	add    esp,0x1c
c0007caf:	c3                   	ret    

c0007cb0 <netif_init>:
c0007cb0:	90                   	nop
c0007cb1:	c3                   	ret    
c0007cb2:	66 90                	xchg   ax,ax

c0007cb4 <netif_find>:
c0007cb4:	83 ec 10             	sub    esp,0x10
c0007cb7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cbc:	75 0a                	jne    c0007cc8 <netif_find+0x14>
c0007cbe:	b8 00 00 00 00       	mov    eax,0x0
c0007cc3:	e9 80 00 00 00       	jmp    c0007d48 <netif_find+0x94>
c0007cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ccc:	83 c0 02             	add    eax,0x2
c0007ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0007cd1:	83 e8 30             	sub    eax,0x30
c0007cd4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cd8:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0007cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ce1:	eb 59                	jmp    c0007d3c <netif_find+0x88>
c0007ce3:	90                   	nop
c0007ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007ceb:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007cf0:	0f b6 c0             	movzx  eax,al
c0007cf3:	39 c2                	cmp    edx,eax
c0007cf5:	75 39                	jne    c0007d30 <netif_find+0x7c>
c0007cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cfb:	8a 10                	mov    dl,BYTE PTR [eax]
c0007cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d01:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d04:	0f be d2             	movsx  edx,dl
c0007d07:	0f be c0             	movsx  eax,al
c0007d0a:	39 c2                	cmp    edx,eax
c0007d0c:	75 22                	jne    c0007d30 <netif_find+0x7c>
c0007d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d12:	83 c0 01             	add    eax,0x1
c0007d15:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1b:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d1e:	0f be d2             	movsx  edx,dl
c0007d21:	0f be c0             	movsx  eax,al
c0007d24:	39 c2                	cmp    edx,eax
c0007d26:	75 08                	jne    c0007d30 <netif_find+0x7c>
c0007d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d2c:	eb 1a                	jmp    c0007d48 <netif_find+0x94>
c0007d2e:	66 90                	xchg   ax,ax
c0007d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d3a:	66 90                	xchg   ax,ax
c0007d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d41:	75 a1                	jne    c0007ce4 <netif_find+0x30>
c0007d43:	b8 00 00 00 00       	mov    eax,0x0
c0007d48:	83 c4 10             	add    esp,0x10
c0007d4b:	c3                   	ret    

c0007d4c <netif_set_ipaddr>:
c0007d4c:	83 ec 1c             	sub    esp,0x1c
c0007d4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d5c:	39 c2                	cmp    edx,eax
c0007d5e:	0f 84 bc 00 00 00    	je     c0007e20 <netif_set_ipaddr+0xd4>
c0007d64:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0007d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d6d:	eb 45                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007d6f:	90                   	nop
c0007d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d74:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d7d:	39 c2                	cmp    edx,eax
c0007d7f:	75 27                	jne    c0007da8 <netif_set_ipaddr+0x5c>
c0007d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007d93:	e8 7c 36 00 00       	call   c000b414 <tcp_abort>
c0007d98:	83 c4 10             	add    esp,0x10
c0007d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007da3:	eb 0f                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007da5:	8d 76 00             	lea    esi,[esi+0x0]
c0007da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007db3:	90                   	nop
c0007db4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007db9:	75 b5                	jne    c0007d70 <netif_set_ipaddr+0x24>
c0007dbb:	a1 78 78 03 c0       	mov    eax,ds:0xc0037878
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	eb 52                	jmp    c0007e18 <netif_set_ipaddr+0xcc>
c0007dc6:	66 90                	xchg   ax,ax
c0007dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dcc:	85 c0                	test   eax,eax
c0007dce:	74 3c                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	74 32                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0007de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007de7:	39 c2                	cmp    edx,eax
c0007de9:	75 21                	jne    c0007e0c <netif_set_ipaddr+0xc0>
c0007deb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007df0:	74 0a                	je     c0007dfc <netif_set_ipaddr+0xb0>
c0007df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df8:	eb 0a                	jmp    c0007e04 <netif_set_ipaddr+0xb8>
c0007dfa:	66 90                	xchg   ax,ax
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	8d 76 00             	lea    esi,[esi+0x0]
c0007e04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e08:	89 02                	mov    DWORD PTR [edx],eax
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e17:	90                   	nop
c0007e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e1d:	75 a9                	jne    c0007dc8 <netif_set_ipaddr+0x7c>
c0007e1f:	90                   	nop
c0007e20:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e25:	74 09                	je     c0007e30 <netif_set_ipaddr+0xe4>
c0007e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e2d:	eb 09                	jmp    c0007e38 <netif_set_ipaddr+0xec>
c0007e2f:	90                   	nop
c0007e30:	b8 00 00 00 00       	mov    eax,0x0
c0007e35:	8d 76 00             	lea    esi,[esi+0x0]
c0007e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e3f:	90                   	nop
c0007e40:	83 c4 1c             	add    esp,0x1c
c0007e43:	c3                   	ret    

c0007e44 <netif_set_gw>:
c0007e44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e49:	74 09                	je     c0007e54 <netif_set_gw+0x10>
c0007e4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e51:	eb 09                	jmp    c0007e5c <netif_set_gw+0x18>
c0007e53:	90                   	nop
c0007e54:	b8 00 00 00 00       	mov    eax,0x0
c0007e59:	8d 76 00             	lea    esi,[esi+0x0]
c0007e5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e60:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e63:	90                   	nop
c0007e64:	c3                   	ret    
c0007e65:	8d 76 00             	lea    esi,[esi+0x0]

c0007e68 <netif_set_netmask>:
c0007e68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e6d:	74 09                	je     c0007e78 <netif_set_netmask+0x10>
c0007e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e75:	eb 09                	jmp    c0007e80 <netif_set_netmask+0x18>
c0007e77:	90                   	nop
c0007e78:	b8 00 00 00 00       	mov    eax,0x0
c0007e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e84:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007e87:	90                   	nop
c0007e88:	c3                   	ret    
c0007e89:	8d 76 00             	lea    esi,[esi+0x0]

c0007e8c <netif_set_addr>:
c0007e8c:	83 ec 0c             	sub    esp,0xc
c0007e8f:	83 ec 08             	sub    esp,0x8
c0007e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e9a:	e8 ad fe ff ff       	call   c0007d4c <netif_set_ipaddr>
c0007e9f:	83 c4 10             	add    esp,0x10
c0007ea2:	83 ec 08             	sub    esp,0x8
c0007ea5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ead:	e8 b6 ff ff ff       	call   c0007e68 <netif_set_netmask>
c0007eb2:	83 c4 10             	add    esp,0x10
c0007eb5:	83 ec 08             	sub    esp,0x8
c0007eb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec0:	e8 7f ff ff ff       	call   c0007e44 <netif_set_gw>
c0007ec5:	83 c4 10             	add    esp,0x10
c0007ec8:	90                   	nop
c0007ec9:	83 c4 0c             	add    esp,0xc
c0007ecc:	c3                   	ret    
c0007ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0007ed0 <netif_add>:
c0007ed0:	83 ec 0c             	sub    esp,0xc
c0007ed3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ed8:	75 16                	jne    c0007ef0 <netif_add+0x20>
c0007eda:	83 ec 08             	sub    esp,0x8
c0007edd:	68 f4 02 03 c0       	push   0xc00302f4
c0007ee2:	68 66 01 03 c0       	push   0xc0030166
c0007ee7:	e8 dc 7f 01 00       	call   c001fec8 <CPrintf>
c0007eec:	83 c4 10             	add    esp,0x10
c0007eef:	90                   	nop
c0007ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f15:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f21:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f24:	a0 98 b8 03 c0       	mov    al,ds:0xc003b898
c0007f29:	8d 50 01             	lea    edx,[eax+0x1]
c0007f2c:	88 15 98 b8 03 c0    	mov    BYTE PTR ds:0xc003b898,dl
c0007f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f36:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f54:	e8 33 ff ff ff       	call   c0007e8c <netif_set_addr>
c0007f59:	83 c4 10             	add    esp,0x10
c0007f5c:	83 ec 0c             	sub    esp,0xc
c0007f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f67:	ff d0                	call   eax
c0007f69:	83 c4 10             	add    esp,0x10
c0007f6c:	0f be c0             	movsx  eax,al
c0007f6f:	85 c0                	test   eax,eax
c0007f71:	74 09                	je     c0007f7c <netif_add+0xac>
c0007f73:	b8 00 00 00 00       	mov    eax,0x0
c0007f78:	eb 1e                	jmp    c0007f98 <netif_add+0xc8>
c0007f7a:	66 90                	xchg   ax,ax
c0007f7c:	8b 15 10 77 03 c0    	mov    edx,DWORD PTR ds:0xc0037710
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	89 10                	mov    DWORD PTR [eax],edx
c0007f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8c:	a3 10 77 03 c0       	mov    ds:0xc0037710,eax
c0007f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f95:	8d 76 00             	lea    esi,[esi+0x0]
c0007f98:	83 c4 0c             	add    esp,0xc
c0007f9b:	c3                   	ret    

c0007f9c <netif_set_default>:
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	a3 14 77 03 c0       	mov    ds:0xc0037714,eax
c0007fa5:	90                   	nop
c0007fa6:	c3                   	ret    
c0007fa7:	90                   	nop

c0007fa8 <netif_set_up>:
c0007fa8:	83 ec 0c             	sub    esp,0xc
c0007fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007faf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb2:	0f b6 c0             	movzx  eax,al
c0007fb5:	83 e0 01             	and    eax,0x1
c0007fb8:	75 4a                	jne    c0008004 <netif_set_up+0x5c>
c0007fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fbe:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc1:	83 c8 01             	or     eax,0x1
c0007fc4:	88 c2                	mov    dl,al
c0007fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fca:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fd1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fd4:	0f b6 c0             	movzx  eax,al
c0007fd7:	83 e0 10             	and    eax,0x10
c0007fda:	74 28                	je     c0008004 <netif_set_up+0x5c>
c0007fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fe3:	0f b6 c0             	movzx  eax,al
c0007fe6:	83 e0 20             	and    eax,0x20
c0007fe9:	74 19                	je     c0008004 <netif_set_up+0x5c>
c0007feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fef:	83 c0 04             	add    eax,0x4
c0007ff2:	83 ec 08             	sub    esp,0x8
c0007ff5:	50                   	push   eax
c0007ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ffa:	e8 bd a5 00 00       	call   c00125bc <etharp_request>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	66 90                	xchg   ax,ax
c0008004:	90                   	nop
c0008005:	83 c4 0c             	add    esp,0xc
c0008008:	c3                   	ret    
c0008009:	8d 76 00             	lea    esi,[esi+0x0]

c000800c <netif_set_down>:
c000800c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008010:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008013:	0f b6 c0             	movzx  eax,al
c0008016:	83 e0 01             	and    eax,0x1
c0008019:	74 15                	je     c0008030 <netif_set_down+0x24>
c000801b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000801f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008022:	83 e0 fe             	and    eax,0xfffffffe
c0008025:	88 c2                	mov    dl,al
c0008027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802b:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000802e:	66 90                	xchg   ax,ax
c0008030:	90                   	nop
c0008031:	c3                   	ret    
c0008032:	66 90                	xchg   ax,ax

c0008034 <netif_remove>:
c0008034:	83 ec 10             	sub    esp,0x10
c0008037:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000803c:	0f 84 92 00 00 00    	je     c00080d4 <netif_remove+0xa0>
c0008042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008046:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008049:	83 e0 01             	and    eax,0x1
c000804c:	0f b6 c0             	movzx  eax,al
c000804f:	85 c0                	test   eax,eax
c0008051:	74 0d                	je     c0008060 <netif_remove+0x2c>
c0008053:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008057:	e8 b0 ff ff ff       	call   c000800c <netif_set_down>
c000805c:	83 c4 04             	add    esp,0x4
c000805f:	90                   	nop
c0008060:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0008065:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008069:	75 0d                	jne    c0008078 <netif_remove+0x44>
c000806b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000806f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008071:	a3 10 77 03 c0       	mov    ds:0xc0037710,eax
c0008076:	eb 44                	jmp    c00080bc <netif_remove+0x88>
c0008078:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c000807d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008081:	eb 29                	jmp    c00080ac <netif_remove+0x78>
c0008083:	90                   	nop
c0008084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008088:	8b 00                	mov    eax,DWORD PTR [eax]
c000808a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000808e:	75 10                	jne    c00080a0 <netif_remove+0x6c>
c0008090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008094:	8b 10                	mov    edx,DWORD PTR [eax]
c0008096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000809a:	89 10                	mov    DWORD PTR [eax],edx
c000809c:	eb 16                	jmp    c00080b4 <netif_remove+0x80>
c000809e:	66 90                	xchg   ax,ax
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	66 90                	xchg   ax,ax
c00080ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b1:	75 d1                	jne    c0008084 <netif_remove+0x50>
c00080b3:	90                   	nop
c00080b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b9:	74 1d                	je     c00080d8 <netif_remove+0xa4>
c00080bb:	90                   	nop
c00080bc:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00080c1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080c5:	75 15                	jne    c00080dc <netif_remove+0xa8>
c00080c7:	6a 00                	push   0x0
c00080c9:	e8 ce fe ff ff       	call   c0007f9c <netif_set_default>
c00080ce:	83 c4 04             	add    esp,0x4
c00080d1:	eb 09                	jmp    c00080dc <netif_remove+0xa8>
c00080d3:	90                   	nop
c00080d4:	90                   	nop
c00080d5:	eb 05                	jmp    c00080dc <netif_remove+0xa8>
c00080d7:	90                   	nop
c00080d8:	90                   	nop
c00080d9:	8d 76 00             	lea    esi,[esi+0x0]
c00080dc:	83 c4 10             	add    esp,0x10
c00080df:	c3                   	ret    

c00080e0 <netif_set_link_up>:
c00080e0:	83 ec 0c             	sub    esp,0xc
c00080e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080ea:	0f b6 c0             	movzx  eax,al
c00080ed:	83 e0 10             	and    eax,0x10
c00080f0:	75 4a                	jne    c000813c <netif_set_link_up+0x5c>
c00080f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080f9:	83 c8 10             	or     eax,0x10
c00080fc:	88 c2                	mov    dl,al
c00080fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008102:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008109:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000810c:	0f b6 c0             	movzx  eax,al
c000810f:	83 e0 01             	and    eax,0x1
c0008112:	74 28                	je     c000813c <netif_set_link_up+0x5c>
c0008114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008118:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000811b:	0f b6 c0             	movzx  eax,al
c000811e:	83 e0 20             	and    eax,0x20
c0008121:	74 19                	je     c000813c <netif_set_link_up+0x5c>
c0008123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008127:	83 c0 04             	add    eax,0x4
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	50                   	push   eax
c000812e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008132:	e8 85 a4 00 00       	call   c00125bc <etharp_request>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	66 90                	xchg   ax,ax
c000813c:	90                   	nop
c000813d:	83 c4 0c             	add    esp,0xc
c0008140:	c3                   	ret    
c0008141:	8d 76 00             	lea    esi,[esi+0x0]

c0008144 <netif_set_link_down>:
c0008144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008148:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000814b:	0f b6 c0             	movzx  eax,al
c000814e:	83 e0 10             	and    eax,0x10
c0008151:	74 15                	je     c0008168 <netif_set_link_down+0x24>
c0008153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008157:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000815a:	83 e0 ef             	and    eax,0xffffffef
c000815d:	88 c2                	mov    dl,al
c000815f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008163:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008166:	66 90                	xchg   ax,ax
c0008168:	90                   	nop
c0008169:	c3                   	ret    
c000816a:	66 90                	xchg   ax,ax

c000816c <pbuf_free_ooseq>:
c000816c:	83 ec 1c             	sub    esp,0x1c
c000816f:	e8 44 7d 01 00       	call   c001feb8 <CLockScheduler>
c0008174:	c6 05 99 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b899,0x0
c000817b:	e8 1c 7d 01 00       	call   c001fe9c <CUnlockScheduler>
c0008180:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0008185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008189:	eb 41                	jmp    c00081cc <pbuf_free_ooseq+0x60>
c000818b:	90                   	nop
c000818c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008190:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008196:	85 c0                	test   eax,eax
c0008198:	74 26                	je     c00081c0 <pbuf_free_ooseq+0x54>
c000819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000819e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	50                   	push   eax
c00081a8:	e8 03 20 00 00       	call   c000a1b0 <tcp_segs_free>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081b4:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081be:	eb 14                	jmp    c00081d4 <pbuf_free_ooseq+0x68>
c00081c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081cb:	90                   	nop
c00081cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081d1:	75 b9                	jne    c000818c <pbuf_free_ooseq+0x20>
c00081d3:	90                   	nop
c00081d4:	83 c4 1c             	add    esp,0x1c
c00081d7:	c3                   	ret    

c00081d8 <pbuf_pool_is_empty>:
c00081d8:	83 ec 1c             	sub    esp,0x1c
c00081db:	e8 d8 7c 01 00       	call   c001feb8 <CLockScheduler>
c00081e0:	a0 99 b8 03 c0       	mov    al,ds:0xc003b899
c00081e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00081e9:	c6 05 99 b8 03 c0 01 	mov    BYTE PTR ds:0xc003b899,0x1
c00081f0:	e8 a7 7c 01 00       	call   c001fe9c <CUnlockScheduler>
c00081f5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00081fa:	85 c0                	test   eax,eax
c00081fc:	75 2e                	jne    c000822c <pbuf_pool_is_empty+0x54>
c00081fe:	83 ec 04             	sub    esp,0x4
c0008201:	6a 00                	push   0x0
c0008203:	6a 00                	push   0x0
c0008205:	68 6c 81 00 c0       	push   0xc000816c
c000820a:	e8 45 8a ff ff       	call   c0000c54 <tcpip_callback_with_block>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	0f be c0             	movsx  eax,al
c0008215:	85 c0                	test   eax,eax
c0008217:	74 13                	je     c000822c <pbuf_pool_is_empty+0x54>
c0008219:	e8 9a 7c 01 00       	call   c001feb8 <CLockScheduler>
c000821e:	c6 05 99 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b899,0x0
c0008225:	e8 72 7c 01 00       	call   c001fe9c <CUnlockScheduler>
c000822a:	66 90                	xchg   ax,ax
c000822c:	90                   	nop
c000822d:	83 c4 1c             	add    esp,0x1c
c0008230:	c3                   	ret    
c0008231:	8d 76 00             	lea    esi,[esi+0x0]

c0008234 <pbuf_alloced_custom>:
c0008234:	83 ec 2c             	sub    esp,0x2c
c0008237:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000823b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000823f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008244:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008249:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008250:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008255:	74 29                	je     c0008280 <pbuf_alloced_custom+0x4c>
c0008257:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000825c:	74 12                	je     c0008270 <pbuf_alloced_custom+0x3c>
c000825e:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008263:	74 2b                	je     c0008290 <pbuf_alloced_custom+0x5c>
c0008265:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000826a:	74 54                	je     c00082c0 <pbuf_alloced_custom+0x8c>
c000826c:	eb 32                	jmp    c00082a0 <pbuf_alloced_custom+0x6c>
c000826e:	66 90                	xchg   ax,ax
c0008270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008275:	83 c0 14             	add    eax,0x14
c0008278:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008285:	83 c0 14             	add    eax,0x14
c0008288:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000828d:	8d 76 00             	lea    esi,[esi+0x0]
c0008290:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008295:	83 c0 0e             	add    eax,0xe
c0008298:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000829d:	eb 25                	jmp    c00082c4 <pbuf_alloced_custom+0x90>
c000829f:	90                   	nop
c00082a0:	83 ec 08             	sub    esp,0x8
c00082a3:	68 0c 03 03 c0       	push   0xc003030c
c00082a8:	68 66 01 03 c0       	push   0xc0030166
c00082ad:	e8 16 7c 01 00       	call   c001fec8 <CPrintf>
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	b8 00 00 00 00       	mov    eax,0x0
c00082ba:	e9 95 00 00 00       	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082bf:	90                   	nop
c00082c0:	90                   	nop
c00082c1:	8d 76 00             	lea    esi,[esi+0x0]
c00082c4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082c9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ce:	01 c2                	add    edx,eax
c00082d0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082d5:	39 c2                	cmp    edx,eax
c00082d7:	7d 07                	jge    c00082e0 <pbuf_alloced_custom+0xac>
c00082d9:	b8 00 00 00 00       	mov    eax,0x0
c00082de:	eb 74                	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00082e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00082ea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082ef:	74 17                	je     c0008308 <pbuf_alloced_custom+0xd4>
c00082f1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fa:	01 c2                	add    edx,eax
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008303:	eb 0f                	jmp    c0008314 <pbuf_alloced_custom+0xe0>
c0008305:	8d 76 00             	lea    esi,[esi+0x0]
c0008308:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000830c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008313:	90                   	nop
c0008314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008318:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c000831c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008324:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000832c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000832f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008333:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000833b:	88 c2                	mov    dl,al
c000833d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008341:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000834e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008352:	66 90                	xchg   ax,ax
c0008354:	83 c4 2c             	add    esp,0x2c
c0008357:	c3                   	ret    

c0008358 <pbuf_header>:
c0008358:	83 ec 2c             	sub    esp,0x2c
c000835b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000835f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008364:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008369:	75 15                	jne    c0008380 <pbuf_header+0x28>
c000836b:	83 ec 08             	sub    esp,0x8
c000836e:	68 96 05 03 c0       	push   0xc0030596
c0008373:	68 66 01 03 c0       	push   0xc0030166
c0008378:	e8 4b 7b 01 00       	call   c001fec8 <CPrintf>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008385:	85 c0                	test   eax,eax
c0008387:	74 07                	je     c0008390 <pbuf_header+0x38>
c0008389:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000838e:	75 08                	jne    c0008398 <pbuf_header+0x40>
c0008390:	b0 00                	mov    al,0x0
c0008392:	e9 59 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008397:	90                   	nop
c0008398:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000839d:	85 c0                	test   eax,eax
c000839f:	79 3b                	jns    c00083dc <pbuf_header+0x84>
c00083a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a5:	f7 d8                	neg    eax
c00083a7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083b4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083b9:	0f b7 c0             	movzx  eax,ax
c00083bc:	39 c2                	cmp    edx,eax
c00083be:	76 28                	jbe    c00083e8 <pbuf_header+0x90>
c00083c0:	83 ec 08             	sub    esp,0x8
c00083c3:	68 e7 04 03 c0       	push   0xc00304e7
c00083c8:	68 66 01 03 c0       	push   0xc0030166
c00083cd:	e8 f6 7a 01 00       	call   c001fec8 <CPrintf>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	b0 01                	mov    al,0x1
c00083d7:	e9 14 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c00083dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083e5:	8d 76 00             	lea    esi,[esi+0x0]
c00083e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083ef:	0f b6 c0             	movzx  eax,al
c00083f2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00083f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00083fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008402:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008407:	85 c0                	test   eax,eax
c0008409:	74 0d                	je     c0008418 <pbuf_header+0xc0>
c000840b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008410:	83 f8 03             	cmp    eax,0x3
c0008413:	75 3f                	jne    c0008454 <pbuf_header+0xfc>
c0008415:	8d 76 00             	lea    esi,[esi+0x0]
c0008418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841f:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008424:	f7 da                	neg    edx
c0008426:	01 c2                	add    edx,eax
c0008428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000842c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008436:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000843a:	83 c2 10             	add    edx,0x10
c000843d:	39 d0                	cmp    eax,edx
c000843f:	73 7f                	jae    c00084c0 <pbuf_header+0x168>
c0008441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008449:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844c:	b0 01                	mov    al,0x1
c000844e:	e9 9d 00 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008453:	90                   	nop
c0008454:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008459:	83 f8 02             	cmp    eax,0x2
c000845c:	74 0a                	je     c0008468 <pbuf_header+0x110>
c000845e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008463:	83 f8 01             	cmp    eax,0x1
c0008466:	75 3c                	jne    c00084a4 <pbuf_header+0x14c>
c0008468:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000846d:	85 c0                	test   eax,eax
c000846f:	79 2f                	jns    c00084a0 <pbuf_header+0x148>
c0008471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008475:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008479:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000847e:	0f b7 c0             	movzx  eax,ax
c0008481:	39 c2                	cmp    edx,eax
c0008483:	77 1b                	ja     c00084a0 <pbuf_header+0x148>
c0008485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000848c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008491:	f7 da                	neg    edx
c0008493:	01 c2                	add    edx,eax
c0008495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000849c:	eb 22                	jmp    c00084c0 <pbuf_header+0x168>
c000849e:	66 90                	xchg   ax,ax
c00084a0:	b0 01                	mov    al,0x1
c00084a2:	eb 4c                	jmp    c00084f0 <pbuf_header+0x198>
c00084a4:	83 ec 08             	sub    esp,0x8
c00084a7:	68 05 05 03 c0       	push   0xc0030505
c00084ac:	68 66 01 03 c0       	push   0xc0030166
c00084b1:	e8 12 7a 01 00       	call   c001fec8 <CPrintf>
c00084b6:	83 c4 10             	add    esp,0x10
c00084b9:	b0 01                	mov    al,0x1
c00084bb:	eb 33                	jmp    c00084f0 <pbuf_header+0x198>
c00084bd:	8d 76 00             	lea    esi,[esi+0x0]
c00084c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084c4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084cc:	01 d0                	add    eax,edx
c00084ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d2:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00084d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084da:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e1:	01 d0                	add    eax,edx
c00084e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00084eb:	b0 00                	mov    al,0x0
c00084ed:	8d 76 00             	lea    esi,[esi+0x0]
c00084f0:	83 c4 2c             	add    esp,0x2c
c00084f3:	c3                   	ret    

c00084f4 <pbuf_free>:
c00084f4:	83 ec 1c             	sub    esp,0x1c
c00084f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00084fc:	75 26                	jne    c0008524 <pbuf_free+0x30>
c00084fe:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008503:	75 17                	jne    c000851c <pbuf_free+0x28>
c0008505:	83 ec 08             	sub    esp,0x8
c0008508:	68 96 05 03 c0       	push   0xc0030596
c000850d:	68 66 01 03 c0       	push   0xc0030166
c0008512:	e8 b1 79 01 00       	call   c001fec8 <CPrintf>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	66 90                	xchg   ax,ax
c000851c:	b0 00                	mov    al,0x0
c000851e:	e9 a5 01 00 00       	jmp    c00086c8 <pbuf_free+0x1d4>
c0008523:	90                   	nop
c0008524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008528:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000852b:	0f b6 c0             	movzx  eax,al
c000852e:	85 c0                	test   eax,eax
c0008530:	74 42                	je     c0008574 <pbuf_free+0x80>
c0008532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008536:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008539:	0f b6 c0             	movzx  eax,al
c000853c:	83 f8 01             	cmp    eax,0x1
c000853f:	74 33                	je     c0008574 <pbuf_free+0x80>
c0008541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008545:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008548:	0f b6 c0             	movzx  eax,al
c000854b:	83 f8 02             	cmp    eax,0x2
c000854e:	74 24                	je     c0008574 <pbuf_free+0x80>
c0008550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008554:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008557:	0f b6 c0             	movzx  eax,al
c000855a:	83 f8 03             	cmp    eax,0x3
c000855d:	74 15                	je     c0008574 <pbuf_free+0x80>
c000855f:	83 ec 08             	sub    esp,0x8
c0008562:	68 13 05 03 c0       	push   0xc0030513
c0008567:	68 66 01 03 c0       	push   0xc0030166
c000856c:	e8 57 79 01 00       	call   c001fec8 <CPrintf>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008579:	e9 3a 01 00 00       	jmp    c00086b8 <pbuf_free+0x1c4>
c000857e:	66 90                	xchg   ax,ax
c0008580:	e8 33 79 01 00       	call   c001feb8 <CLockScheduler>
c0008585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008589:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000858d:	0f b7 c0             	movzx  eax,ax
c0008590:	85 c0                	test   eax,eax
c0008592:	75 18                	jne    c00085ac <pbuf_free+0xb8>
c0008594:	83 ec 08             	sub    esp,0x8
c0008597:	68 28 05 03 c0       	push   0xc0030528
c000859c:	68 66 01 03 c0       	push   0xc0030166
c00085a1:	e8 22 79 01 00       	call   c001fec8 <CPrintf>
c00085a6:	83 c4 10             	add    esp,0x10
c00085a9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085b0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085b4:	83 e8 01             	sub    eax,0x1
c00085b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085bb:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c00085bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085c3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085cc:	e8 cb 78 01 00       	call   c001fe9c <CUnlockScheduler>
c00085d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085d6:	85 c0                	test   eax,eax
c00085d8:	0f 85 d2 00 00 00    	jne    c00086b0 <pbuf_free+0x1bc>
c00085de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00085e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00085ef:	0f b6 c0             	movzx  eax,al
c00085f2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085fb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085fe:	0f b6 c0             	movzx  eax,al
c0008601:	83 e0 02             	and    eax,0x2
c0008604:	74 3a                	je     c0008640 <pbuf_free+0x14c>
c0008606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860a:	89 04 24             	mov    DWORD PTR [esp],eax
c000860d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008610:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008613:	85 c0                	test   eax,eax
c0008615:	75 15                	jne    c000862c <pbuf_free+0x138>
c0008617:	83 ec 08             	sub    esp,0x8
c000861a:	68 30 03 03 c0       	push   0xc0030330
c000861f:	68 66 01 03 c0       	push   0xc0030166
c0008624:	e8 9f 78 01 00       	call   c001fec8 <CPrintf>
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000862f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008632:	83 ec 0c             	sub    esp,0xc
c0008635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008639:	ff d0                	call   eax
c000863b:	83 c4 10             	add    esp,0x10
c000863e:	eb 58                	jmp    c0008698 <pbuf_free+0x1a4>
c0008640:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008645:	83 f8 03             	cmp    eax,0x3
c0008648:	75 16                	jne    c0008660 <pbuf_free+0x16c>
c000864a:	83 ec 08             	sub    esp,0x8
c000864d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008651:	6a 0d                	push   0xd
c0008653:	e8 e0 f5 ff ff       	call   c0007c38 <memp_free>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	eb 3b                	jmp    c0008698 <pbuf_free+0x1a4>
c000865d:	8d 76 00             	lea    esi,[esi+0x0]
c0008660:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008665:	83 f8 01             	cmp    eax,0x1
c0008668:	74 0a                	je     c0008674 <pbuf_free+0x180>
c000866a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000866f:	83 f8 02             	cmp    eax,0x2
c0008672:	75 14                	jne    c0008688 <pbuf_free+0x194>
c0008674:	83 ec 08             	sub    esp,0x8
c0008677:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000867b:	6a 0c                	push   0xc
c000867d:	e8 b6 f5 ff ff       	call   c0007c38 <memp_free>
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	eb 11                	jmp    c0008698 <pbuf_free+0x1a4>
c0008687:	90                   	nop
c0008688:	83 ec 0c             	sub    esp,0xc
c000868b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000868f:	e8 80 eb ff ff       	call   c0007214 <mem_free>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	90                   	nop
c0008698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000869c:	83 c0 01             	add    eax,0x1
c000869f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ab:	eb 0b                	jmp    c00086b8 <pbuf_free+0x1c4>
c00086ad:	8d 76 00             	lea    esi,[esi+0x0]
c00086b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086b8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086bd:	0f 85 bd fe ff ff    	jne    c0008580 <pbuf_free+0x8c>
c00086c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c7:	90                   	nop
c00086c8:	83 c4 1c             	add    esp,0x1c
c00086cb:	c3                   	ret    

c00086cc <pbuf_alloc>:
c00086cc:	83 ec 3c             	sub    esp,0x3c
c00086cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086d8:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00086df:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00086e4:	74 2a                	je     c0008710 <pbuf_alloc+0x44>
c00086e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00086eb:	74 13                	je     c0008700 <pbuf_alloc+0x34>
c00086ed:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00086f2:	74 2c                	je     c0008720 <pbuf_alloc+0x54>
c00086f4:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00086f9:	74 55                	je     c0008750 <pbuf_alloc+0x84>
c00086fb:	eb 33                	jmp    c0008730 <pbuf_alloc+0x64>
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]
c0008700:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008705:	83 c0 14             	add    eax,0x14
c0008708:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000870d:	8d 76 00             	lea    esi,[esi+0x0]
c0008710:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008715:	83 c0 14             	add    eax,0x14
c0008718:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000871d:	8d 76 00             	lea    esi,[esi+0x0]
c0008720:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008725:	83 c0 0e             	add    eax,0xe
c0008728:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000872d:	eb 25                	jmp    c0008754 <pbuf_alloc+0x88>
c000872f:	90                   	nop
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	68 3e 05 03 c0       	push   0xc003053e
c0008738:	68 66 01 03 c0       	push   0xc0030166
c000873d:	e8 86 77 01 00       	call   c001fec8 <CPrintf>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	b8 00 00 00 00       	mov    eax,0x0
c000874a:	e9 71 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000874f:	90                   	nop
c0008750:	90                   	nop
c0008751:	8d 76 00             	lea    esi,[esi+0x0]
c0008754:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008759:	77 11                	ja     c000876c <pbuf_alloc+0xa0>
c000875b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008760:	0f 85 c6 02 00 00    	jne    c0008a2c <pbuf_alloc+0x360>
c0008766:	e9 41 02 00 00       	jmp    c00089ac <pbuf_alloc+0x2e0>
c000876b:	90                   	nop
c000876c:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008771:	0f 85 15 03 00 00    	jne    c0008a8c <pbuf_alloc+0x3c0>
c0008777:	83 ec 0c             	sub    esp,0xc
c000877a:	6a 0d                	push   0xd
c000877c:	e8 8b f3 ff ff       	call   c0007b0c <memp_malloc>
c0008781:	83 c4 10             	add    esp,0x10
c0008784:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008788:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000878d:	75 11                	jne    c00087a0 <pbuf_alloc+0xd4>
c000878f:	e8 44 fa ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c0008794:	b8 00 00 00 00       	mov    eax,0x0
c0008799:	e9 22 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000879e:	66 90                	xchg   ax,ax
c00087a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087a4:	88 c2                	mov    dl,al
c00087a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087aa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087b7:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087bc:	8d 50 10             	lea    edx,[eax+0x10]
c00087bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c3:	01 c2                	add    edx,eax
c00087c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087d8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087dd:	ba 4e 02 00 00       	mov    edx,0x24e
c00087e2:	29 c2                	sub    edx,eax
c00087e4:	89 d0                	mov    eax,edx
c00087e6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00087eb:	39 d0                	cmp    eax,edx
c00087ed:	7e 05                	jle    c00087f4 <pbuf_alloc+0x128>
c00087ef:	89 d0                	mov    eax,edx
c00087f1:	8d 76 00             	lea    esi,[esi+0x0]
c00087f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087f8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008800:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008807:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000880b:	0f b7 c0             	movzx  eax,ax
c000880e:	01 c2                	add    edx,eax
c0008810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008814:	05 5e 02 00 00       	add    eax,0x25e
c0008819:	39 c2                	cmp    edx,eax
c000881b:	76 17                	jbe    c0008834 <pbuf_alloc+0x168>
c000881d:	83 ec 08             	sub    esp,0x8
c0008820:	68 54 03 03 c0       	push   0xc0030354
c0008825:	68 66 01 03 c0       	push   0xc0030166
c000882a:	e8 99 76 01 00       	call   c001fec8 <CPrintf>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	66 90                	xchg   ax,ax
c0008834:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008839:	ba 4e 02 00 00       	mov    edx,0x24e
c000883e:	29 c2                	sub    edx,eax
c0008840:	89 d0                	mov    eax,edx
c0008842:	85 c0                	test   eax,eax
c0008844:	7f 16                	jg     c000885c <pbuf_alloc+0x190>
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	68 88 03 03 c0       	push   0xc0030388
c000884e:	68 66 01 03 c0       	push   0xc0030166
c0008853:	e8 70 76 01 00       	call   c001fec8 <CPrintf>
c0008858:	83 c4 10             	add    esp,0x10
c000885b:	90                   	nop
c000885c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008860:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000886e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008877:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000887b:	0f b7 c0             	movzx  eax,ax
c000887e:	29 c2                	sub    edx,eax
c0008880:	89 d0                	mov    eax,edx
c0008882:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008886:	e9 11 01 00 00       	jmp    c000899c <pbuf_alloc+0x2d0>
c000888b:	90                   	nop
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	6a 0d                	push   0xd
c0008891:	e8 76 f2 ff ff       	call   c0007b0c <memp_malloc>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000889d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088a2:	75 20                	jne    c00088c4 <pbuf_alloc+0x1f8>
c00088a4:	e8 2f f9 ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c00088a9:	83 ec 0c             	sub    esp,0xc
c00088ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088b0:	e8 3f fc ff ff       	call   c00084f4 <pbuf_free>
c00088b5:	83 c4 10             	add    esp,0x10
c00088b8:	b8 00 00 00 00       	mov    eax,0x0
c00088bd:	e9 fe 01 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00088c2:	66 90                	xchg   ax,ax
c00088c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088c8:	88 c2                	mov    dl,al
c00088ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088d5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00088e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00088eb:	89 10                	mov    DWORD PTR [eax],edx
c00088ed:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00088f5:	7e 15                	jle    c000890c <pbuf_alloc+0x240>
c00088f7:	83 ec 08             	sub    esp,0x8
c00088fa:	68 59 05 03 c0       	push   0xc0030559
c00088ff:	68 66 01 03 c0       	push   0xc0030166
c0008904:	e8 bf 75 01 00       	call   c001fec8 <CPrintf>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008914:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000891c:	0f b7 d0             	movzx  edx,ax
c000891f:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008925:	76 05                	jbe    c000892c <pbuf_alloc+0x260>
c0008927:	b8 4e 02 00 00       	mov    eax,0x24e
c000892c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008930:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008938:	8d 50 10             	lea    edx,[eax+0x10]
c000893b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008946:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008949:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008951:	0f b7 c0             	movzx  eax,ax
c0008954:	01 c2                	add    edx,eax
c0008956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000895a:	05 5e 02 00 00       	add    eax,0x25e
c000895f:	39 c2                	cmp    edx,eax
c0008961:	76 15                	jbe    c0008978 <pbuf_alloc+0x2ac>
c0008963:	83 ec 08             	sub    esp,0x8
c0008966:	68 54 03 03 c0       	push   0xc0030354
c000896b:	68 66 01 03 c0       	push   0xc0030166
c0008970:	e8 53 75 01 00       	call   c001fec8 <CPrintf>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008986:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000898a:	0f b7 c0             	movzx  eax,ax
c000898d:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008995:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008999:	8d 76 00             	lea    esi,[esi+0x0]
c000899c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089a1:	0f 8f e5 fe ff ff    	jg     c000888c <pbuf_alloc+0x1c0>
c00089a7:	e9 fc 00 00 00       	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c00089ac:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089b5:	01 d0                	add    eax,edx
c00089b7:	83 c0 10             	add    eax,0x10
c00089ba:	0f b7 c0             	movzx  eax,ax
c00089bd:	83 ec 0c             	sub    esp,0xc
c00089c0:	50                   	push   eax
c00089c1:	e8 82 ec ff ff       	call   c0007648 <mem_malloc>
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089cd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089d2:	75 0c                	jne    c00089e0 <pbuf_alloc+0x314>
c00089d4:	b8 00 00 00 00       	mov    eax,0x0
c00089d9:	e9 e2 00 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00089de:	66 90                	xchg   ax,ax
c00089e0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00089e5:	8d 50 10             	lea    edx,[eax+0x10]
c00089e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089ec:	01 c2                	add    edx,eax
c00089ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00089f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00089f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089fd:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a0c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a1e:	88 c2                	mov    dl,al
c0008a20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a24:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a27:	eb 7f                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a29:	8d 76 00             	lea    esi,[esi+0x0]
c0008a2c:	83 ec 0c             	sub    esp,0xc
c0008a2f:	6a 0c                	push   0xc
c0008a31:	e8 d6 f0 ff ff       	call   c0007b0c <memp_malloc>
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a3d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a42:	75 08                	jne    c0008a4c <pbuf_alloc+0x380>
c0008a44:	b8 00 00 00 00       	mov    eax,0x0
c0008a49:	eb 75                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008a4b:	90                   	nop
c0008a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a5f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a6e:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a80:	88 c2                	mov    dl,al
c0008a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a86:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a89:	eb 1d                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a8b:	90                   	nop
c0008a8c:	83 ec 08             	sub    esp,0x8
c0008a8f:	68 6d 05 03 c0       	push   0xc003056d
c0008a94:	68 66 01 03 c0       	push   0xc0030166
c0008a99:	e8 2a 74 01 00       	call   c001fec8 <CPrintf>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	b8 00 00 00 00       	mov    eax,0x0
c0008aa6:	eb 18                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008aa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aac:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ab6:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008aba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abe:	66 90                	xchg   ax,ax
c0008ac0:	83 c4 3c             	add    esp,0x3c
c0008ac3:	c3                   	ret    

c0008ac4 <pbuf_realloc>:
c0008ac4:	83 ec 2c             	sub    esp,0x2c
c0008ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008acb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008ad0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ad5:	75 15                	jne    c0008aec <pbuf_realloc+0x28>
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	68 88 05 03 c0       	push   0xc0030588
c0008adf:	68 66 01 03 c0       	push   0xc0030166
c0008ae4:	e8 df 73 01 00       	call   c001fec8 <CPrintf>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008af3:	0f b6 c0             	movzx  eax,al
c0008af6:	83 f8 03             	cmp    eax,0x3
c0008af9:	74 41                	je     c0008b3c <pbuf_realloc+0x78>
c0008afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008aff:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b02:	0f b6 c0             	movzx  eax,al
c0008b05:	83 f8 01             	cmp    eax,0x1
c0008b08:	74 32                	je     c0008b3c <pbuf_realloc+0x78>
c0008b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b11:	0f b6 c0             	movzx  eax,al
c0008b14:	85 c0                	test   eax,eax
c0008b16:	74 24                	je     c0008b3c <pbuf_realloc+0x78>
c0008b18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b1c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b1f:	0f b6 c0             	movzx  eax,al
c0008b22:	83 f8 02             	cmp    eax,0x2
c0008b25:	74 15                	je     c0008b3c <pbuf_realloc+0x78>
c0008b27:	83 ec 08             	sub    esp,0x8
c0008b2a:	68 a0 05 03 c0       	push   0xc00305a0
c0008b2f:	68 66 01 03 c0       	push   0xc0030166
c0008b34:	e8 8f 73 01 00       	call   c001fec8 <CPrintf>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b43:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b48:	0f b7 c0             	movzx  eax,ax
c0008b4b:	39 c2                	cmp    edx,eax
c0008b4d:	0f 83 6d 01 00 00    	jae    c0008cc0 <pbuf_realloc+0x1fc>
c0008b53:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b5f:	0f b7 c0             	movzx  eax,ax
c0008b62:	29 c2                	sub    edx,eax
c0008b64:	89 d0                	mov    eax,edx
c0008b66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b7b:	eb 77                	jmp    c0008bf4 <pbuf_realloc+0x130>
c0008b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b88:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b8d:	89 d1                	mov    ecx,edx
c0008b8f:	29 c1                	sub    ecx,eax
c0008b91:	89 c8                	mov    eax,ecx
c0008b93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b98:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008ba0:	7e 16                	jle    c0008bb8 <pbuf_realloc+0xf4>
c0008ba2:	83 ec 08             	sub    esp,0x8
c0008ba5:	68 bb 05 03 c0       	push   0xc00305bb
c0008baa:	68 66 01 03 c0       	push   0xc0030166
c0008baf:	e8 14 73 01 00       	call   c001fec8 <CPrintf>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	90                   	nop
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008bc3:	01 d0                	add    eax,edx
c0008bc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008bc9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bd7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008bdc:	75 16                	jne    c0008bf4 <pbuf_realloc+0x130>
c0008bde:	83 ec 08             	sub    esp,0x8
c0008be1:	68 cc 05 03 c0       	push   0xc00305cc
c0008be6:	68 66 01 03 c0       	push   0xc0030166
c0008beb:	e8 d8 72 01 00       	call   c001fec8 <CPrintf>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	90                   	nop
c0008bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bfc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c01:	0f b7 c0             	movzx  eax,ax
c0008c04:	39 c2                	cmp    edx,eax
c0008c06:	0f 87 74 ff ff ff    	ja     c0008b80 <pbuf_realloc+0xbc>
c0008c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c10:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c13:	0f b6 c0             	movzx  eax,al
c0008c16:	85 c0                	test   eax,eax
c0008c18:	75 5e                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c22:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c27:	0f b7 c0             	movzx  eax,ax
c0008c2a:	39 c2                	cmp    edx,eax
c0008c2c:	74 4a                	je     c0008c78 <pbuf_realloc+0x1b4>
c0008c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c39:	89 c2                	mov    edx,eax
c0008c3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c40:	01 d0                	add    eax,edx
c0008c42:	0f b7 c0             	movzx  eax,ax
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	50                   	push   eax
c0008c49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c4d:	e8 e6 e6 ff ff       	call   c0007338 <mem_trim>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c59:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c5e:	75 18                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c60:	83 ec 08             	sub    esp,0x8
c0008c63:	68 e4 05 03 c0       	push   0xc00305e4
c0008c68:	68 66 01 03 c0       	push   0xc0030166
c0008c6d:	e8 56 72 01 00       	call   c001fec8 <CPrintf>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	8d 76 00             	lea    esi,[esi+0x0]
c0008c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c7c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c81:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c89:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c9b:	85 c0                	test   eax,eax
c0008c9d:	74 15                	je     c0008cb4 <pbuf_realloc+0x1f0>
c0008c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca5:	83 ec 0c             	sub    esp,0xc
c0008ca8:	50                   	push   eax
c0008ca9:	e8 46 f8 ff ff       	call   c00084f4 <pbuf_free>
c0008cae:	83 c4 10             	add    esp,0x10
c0008cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008cbe:	eb 04                	jmp    c0008cc4 <pbuf_realloc+0x200>
c0008cc0:	90                   	nop
c0008cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cc4:	83 c4 2c             	add    esp,0x2c
c0008cc7:	c3                   	ret    

c0008cc8 <pbuf_clen>:
c0008cc8:	83 ec 10             	sub    esp,0x10
c0008ccb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cd0:	eb 1a                	jmp    c0008cec <pbuf_clen+0x24>
c0008cd2:	66 90                	xchg   ax,ax
c0008cd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cd8:	83 c0 01             	add    eax,0x1
c0008cdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008cf1:	75 e1                	jne    c0008cd4 <pbuf_clen+0xc>
c0008cf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cf7:	83 c4 10             	add    esp,0x10
c0008cfa:	c3                   	ret    
c0008cfb:	90                   	nop

c0008cfc <pbuf_ref>:
c0008cfc:	83 ec 0c             	sub    esp,0xc
c0008cff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d04:	74 1e                	je     c0008d24 <pbuf_ref+0x28>
c0008d06:	e8 ad 71 01 00       	call   c001feb8 <CLockScheduler>
c0008d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d13:	83 c0 01             	add    eax,0x1
c0008d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1a:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008d1e:	e8 79 71 01 00       	call   c001fe9c <CUnlockScheduler>
c0008d23:	90                   	nop
c0008d24:	90                   	nop
c0008d25:	83 c4 0c             	add    esp,0xc
c0008d28:	c3                   	ret    
c0008d29:	8d 76 00             	lea    esi,[esi+0x0]

c0008d2c <pbuf_cat>:
c0008d2c:	83 ec 1c             	sub    esp,0x1c
c0008d2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d34:	74 0a                	je     c0008d40 <pbuf_cat+0x14>
c0008d36:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d3b:	75 1f                	jne    c0008d5c <pbuf_cat+0x30>
c0008d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d40:	83 ec 08             	sub    esp,0x8
c0008d43:	68 bc 03 03 c0       	push   0xc00303bc
c0008d48:	68 66 01 03 c0       	push   0xc0030166
c0008d4d:	e8 76 71 01 00       	call   c001fec8 <CPrintf>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	e9 ae 00 00 00       	jmp    c0008e08 <pbuf_cat+0xdc>
c0008d5a:	66 90                	xchg   ax,ax
c0008d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d64:	eb 26                	jmp    c0008d8c <pbuf_cat+0x60>
c0008d66:	66 90                	xchg   ax,ax
c0008d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d76:	01 d0                	add    eax,edx
c0008d78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008d7c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d8a:	66 90                	xchg   ax,ax
c0008d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d92:	85 c0                	test   eax,eax
c0008d94:	75 d2                	jne    c0008d68 <pbuf_cat+0x3c>
c0008d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008da5:	0f b7 d2             	movzx  edx,dx
c0008da8:	0f b7 c0             	movzx  eax,ax
c0008dab:	39 c2                	cmp    edx,eax
c0008dad:	74 15                	je     c0008dc4 <pbuf_cat+0x98>
c0008daf:	83 ec 08             	sub    esp,0x8
c0008db2:	68 f4 03 03 c0       	push   0xc00303f4
c0008db7:	68 66 01 03 c0       	push   0xc0030166
c0008dbc:	e8 07 71 01 00       	call   c001fec8 <CPrintf>
c0008dc1:	83 c4 10             	add    esp,0x10
c0008dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dca:	85 c0                	test   eax,eax
c0008dcc:	74 16                	je     c0008de4 <pbuf_cat+0xb8>
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	68 00 06 03 c0       	push   0xc0030600
c0008dd6:	68 66 01 03 c0       	push   0xc0030166
c0008ddb:	e8 e8 70 01 00       	call   c001fec8 <CPrintf>
c0008de0:	83 c4 10             	add    esp,0x10
c0008de3:	90                   	nop
c0008de4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008de8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008def:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008df2:	01 d0                	add    eax,edx
c0008df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008df8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e04:	89 10                	mov    DWORD PTR [eax],edx
c0008e06:	66 90                	xchg   ax,ax
c0008e08:	83 c4 1c             	add    esp,0x1c
c0008e0b:	c3                   	ret    

c0008e0c <pbuf_chain>:
c0008e0c:	83 ec 0c             	sub    esp,0xc
c0008e0f:	83 ec 08             	sub    esp,0x8
c0008e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e1a:	e8 0d ff ff ff       	call   c0008d2c <pbuf_cat>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e29:	e8 ce fe ff ff       	call   c0008cfc <pbuf_ref>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	90                   	nop
c0008e32:	83 c4 0c             	add    esp,0xc
c0008e35:	c3                   	ret    
c0008e36:	66 90                	xchg   ax,ax

c0008e38 <pbuf_dechain>:
c0008e38:	83 ec 1c             	sub    esp,0x1c
c0008e3b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e4f:	0f 84 8b 00 00 00    	je     c0008ee0 <pbuf_dechain+0xa8>
c0008e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e5c:	0f b7 d0             	movzx  edx,ax
c0008e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e66:	0f b7 c8             	movzx  ecx,ax
c0008e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	29 c1                	sub    ecx,eax
c0008e76:	89 c8                	mov    eax,ecx
c0008e78:	39 c2                	cmp    edx,eax
c0008e7a:	74 18                	je     c0008e94 <pbuf_dechain+0x5c>
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	68 24 04 03 c0       	push   0xc0030424
c0008e84:	68 66 01 03 c0       	push   0xc0030166
c0008e89:	e8 3a 70 01 00       	call   c001fec8 <CPrintf>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	8d 76 00             	lea    esi,[esi+0x0]
c0008e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e9f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ea3:	89 d1                	mov    ecx,edx
c0008ea5:	29 c1                	sub    ecx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ead:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008ec7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	e8 1d f6 ff ff       	call   c00084f4 <pbuf_free>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ede:	66 90                	xchg   ax,ax
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eeb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008eef:	0f b7 d2             	movzx  edx,dx
c0008ef2:	0f b7 c0             	movzx  eax,ax
c0008ef5:	39 c2                	cmp    edx,eax
c0008ef7:	74 17                	je     c0008f10 <pbuf_dechain+0xd8>
c0008ef9:	83 ec 08             	sub    esp,0x8
c0008efc:	68 10 06 03 c0       	push   0xc0030610
c0008f01:	68 66 01 03 c0       	push   0xc0030166
c0008f06:	e8 bd 6f 01 00       	call   c001fec8 <CPrintf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	66 90                	xchg   ax,ax
c0008f10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f15:	85 c0                	test   eax,eax
c0008f17:	75 07                	jne    c0008f20 <pbuf_dechain+0xe8>
c0008f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f1d:	eb 09                	jmp    c0008f28 <pbuf_dechain+0xf0>
c0008f1f:	90                   	nop
c0008f20:	b8 00 00 00 00       	mov    eax,0x0
c0008f25:	8d 76 00             	lea    esi,[esi+0x0]
c0008f28:	83 c4 1c             	add    esp,0x1c
c0008f2b:	c3                   	ret    

c0008f2c <pbuf_copy>:
c0008f2c:	53                   	push   ebx
c0008f2d:	83 ec 18             	sub    esp,0x18
c0008f30:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f37:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f3e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f43:	74 1f                	je     c0008f64 <pbuf_copy+0x38>
c0008f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f4a:	74 18                	je     c0008f64 <pbuf_copy+0x38>
c0008f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f5a:	0f b7 d2             	movzx  edx,dx
c0008f5d:	0f b7 c0             	movzx  eax,ax
c0008f60:	39 c2                	cmp    edx,eax
c0008f62:	73 1c                	jae    c0008f80 <pbuf_copy+0x54>
c0008f64:	83 ec 08             	sub    esp,0x8
c0008f67:	68 48 04 03 c0       	push   0xc0030448
c0008f6c:	68 66 01 03 c0       	push   0xc0030166
c0008f71:	e8 52 6f 01 00       	call   c001fec8 <CPrintf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	b0 f2                	mov    al,0xf2
c0008f7b:	e9 0c 02 00 00       	jmp    c000918c <pbuf_copy+0x260>
c0008f80:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f85:	75 15                	jne    c0008f9c <pbuf_copy+0x70>
c0008f87:	83 ec 08             	sub    esp,0x8
c0008f8a:	68 25 06 03 c0       	push   0xc0030625
c0008f8f:	68 66 01 03 c0       	push   0xc0030166
c0008f94:	e8 2f 6f 01 00       	call   c001fec8 <CPrintf>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fa0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fa4:	0f b7 d0             	movzx  edx,ax
c0008fa7:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fac:	89 d1                	mov    ecx,edx
c0008fae:	29 c1                	sub    ecx,eax
c0008fb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fb8:	0f b7 d0             	movzx  edx,ax
c0008fbb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fc0:	29 c2                	sub    edx,eax
c0008fc2:	89 d0                	mov    eax,edx
c0008fc4:	39 c1                	cmp    ecx,eax
c0008fc6:	7c 1c                	jl     c0008fe4 <pbuf_copy+0xb8>
c0008fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fcc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd4:	89 d3                	mov    ebx,edx
c0008fd6:	29 c3                	sub    ebx,eax
c0008fd8:	89 d8                	mov    eax,ebx
c0008fda:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008fdf:	eb 1b                	jmp    c0008ffc <pbuf_copy+0xd0>
c0008fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008ff1:	89 d3                	mov    ebx,edx
c0008ff3:	29 c3                	sub    ebx,eax
c0008ff5:	89 d8                	mov    eax,ebx
c0008ff7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008ffc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0009001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009005:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009008:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000900d:	01 d1                	add    ecx,edx
c000900f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009013:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009016:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000901b:	01 da                	add    edx,ebx
c000901d:	83 ec 04             	sub    esp,0x4
c0009020:	50                   	push   eax
c0009021:	51                   	push   ecx
c0009022:	52                   	push   edx
c0009023:	e8 52 73 ff ff       	call   c000037a <memcpy>
c0009028:	83 c4 10             	add    esp,0x10
c000902b:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0009030:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009035:	01 d0                	add    eax,edx
c0009037:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000903c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009040:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009045:	01 d0                	add    eax,edx
c0009047:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000904c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009050:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009054:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009059:	0f b7 c0             	movzx  eax,ax
c000905c:	39 c2                	cmp    edx,eax
c000905e:	76 18                	jbe    c0009078 <pbuf_copy+0x14c>
c0009060:	83 ec 08             	sub    esp,0x8
c0009063:	68 32 06 03 c0       	push   0xc0030632
c0009068:	68 66 01 03 c0       	push   0xc0030166
c000906d:	e8 56 6e 01 00       	call   c001fec8 <CPrintf>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	8d 76 00             	lea    esi,[esi+0x0]
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	75 14                	jne    c00090a0 <pbuf_copy+0x174>
c000908c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009097:	8b 00                	mov    eax,DWORD PTR [eax]
c0009099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000909d:	8d 76 00             	lea    esi,[esi+0x0]
c00090a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090a8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090ad:	0f b7 c0             	movzx  eax,ax
c00090b0:	39 c2                	cmp    edx,eax
c00090b2:	76 18                	jbe    c00090cc <pbuf_copy+0x1a0>
c00090b4:	83 ec 08             	sub    esp,0x8
c00090b7:	68 49 06 03 c0       	push   0xc0030649
c00090bc:	68 66 01 03 c0       	push   0xc0030166
c00090c1:	e8 02 6e 01 00       	call   c001fec8 <CPrintf>
c00090c6:	83 c4 10             	add    esp,0x10
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	72 14                	jb     c00090f4 <pbuf_copy+0x1c8>
c00090e0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00090e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00090f1:	8d 76 00             	lea    esi,[esi+0x0]
c00090f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00090f9:	74 3d                	je     c0009138 <pbuf_copy+0x20c>
c00090fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090ff:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000910a:	0f b7 d2             	movzx  edx,dx
c000910d:	0f b7 c0             	movzx  eax,ax
c0009110:	39 c2                	cmp    edx,eax
c0009112:	75 24                	jne    c0009138 <pbuf_copy+0x20c>
c0009114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009118:	8b 00                	mov    eax,DWORD PTR [eax]
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1a                	je     c0009138 <pbuf_copy+0x20c>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	68 78 04 03 c0       	push   0xc0030478
c0009126:	68 66 01 03 c0       	push   0xc0030166
c000912b:	e8 98 6d 01 00       	call   c001fec8 <CPrintf>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	b0 fa                	mov    al,0xfa
c0009135:	eb 55                	jmp    c000918c <pbuf_copy+0x260>
c0009137:	90                   	nop
c0009138:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000913d:	74 3d                	je     c000917c <pbuf_copy+0x250>
c000913f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009143:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000914b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000914e:	0f b7 d2             	movzx  edx,dx
c0009151:	0f b7 c0             	movzx  eax,ax
c0009154:	39 c2                	cmp    edx,eax
c0009156:	75 24                	jne    c000917c <pbuf_copy+0x250>
c0009158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000915c:	8b 00                	mov    eax,DWORD PTR [eax]
c000915e:	85 c0                	test   eax,eax
c0009160:	74 1a                	je     c000917c <pbuf_copy+0x250>
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	68 78 04 03 c0       	push   0xc0030478
c000916a:	68 66 01 03 c0       	push   0xc0030166
c000916f:	e8 54 6d 01 00       	call   c001fec8 <CPrintf>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	b0 fa                	mov    al,0xfa
c0009179:	eb 11                	jmp    c000918c <pbuf_copy+0x260>
c000917b:	90                   	nop
c000917c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009181:	0f 85 f9 fd ff ff    	jne    c0008f80 <pbuf_copy+0x54>
c0009187:	b0 00                	mov    al,0x0
c0009189:	8d 76 00             	lea    esi,[esi+0x0]
c000918c:	83 c4 18             	add    esp,0x18
c000918f:	5b                   	pop    ebx
c0009190:	c3                   	ret    
c0009191:	8d 76 00             	lea    esi,[esi+0x0]

c0009194 <pbuf_copy_partial>:
c0009194:	53                   	push   ebx
c0009195:	83 ec 28             	sub    esp,0x28
c0009198:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000919c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091a0:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091aa:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091b1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091b6:	75 20                	jne    c00091d8 <pbuf_copy_partial+0x44>
c00091b8:	83 ec 08             	sub    esp,0x8
c00091bb:	68 a4 04 03 c0       	push   0xc00304a4
c00091c0:	68 66 01 03 c0       	push   0xc0030166
c00091c5:	e8 fe 6c 01 00       	call   c001fec8 <CPrintf>
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	b8 00 00 00 00       	mov    eax,0x0
c00091d2:	e9 59 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091d7:	90                   	nop
c00091d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091dd:	75 21                	jne    c0009200 <pbuf_copy_partial+0x6c>
c00091df:	83 ec 08             	sub    esp,0x8
c00091e2:	68 c4 04 03 c0       	push   0xc00304c4
c00091e7:	68 66 01 03 c0       	push   0xc0030166
c00091ec:	e8 d7 6c 01 00       	call   c001fec8 <CPrintf>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	b8 00 00 00 00       	mov    eax,0x0
c00091f9:	e9 32 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091fe:	66 90                	xchg   ax,ax
c0009200:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009207:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000920c:	74 0a                	je     c0009218 <pbuf_copy_partial+0x84>
c000920e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009213:	75 0f                	jne    c0009224 <pbuf_copy_partial+0x90>
c0009215:	8d 76 00             	lea    esi,[esi+0x0]
c0009218:	b8 00 00 00 00       	mov    eax,0x0
c000921d:	e9 0e 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c0009222:	66 90                	xchg   ax,ax
c0009224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009228:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000922c:	e9 e3 00 00 00       	jmp    c0009314 <pbuf_copy_partial+0x180>
c0009231:	8d 76 00             	lea    esi,[esi+0x0]
c0009234:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009239:	85 c0                	test   eax,eax
c000923b:	74 33                	je     c0009270 <pbuf_copy_partial+0xdc>
c000923d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009241:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009245:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000924a:	0f b7 c0             	movzx  eax,ax
c000924d:	39 c2                	cmp    edx,eax
c000924f:	72 1f                	jb     c0009270 <pbuf_copy_partial+0xdc>
c0009251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009255:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000925d:	89 d3                	mov    ebx,edx
c000925f:	29 c3                	sub    ebx,eax
c0009261:	89 d8                	mov    eax,ebx
c0009263:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009268:	e9 9b 00 00 00       	jmp    c0009308 <pbuf_copy_partial+0x174>
c000926d:	8d 76 00             	lea    esi,[esi+0x0]
c0009270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009274:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927c:	89 d1                	mov    ecx,edx
c000927e:	29 c1                	sub    ecx,eax
c0009280:	89 c8                	mov    eax,ecx
c0009282:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009287:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000928c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009291:	39 c2                	cmp    edx,eax
c0009293:	76 0b                	jbe    c00092a0 <pbuf_copy_partial+0x10c>
c0009295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009299:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000929e:	66 90                	xchg   ax,ax
c00092a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092b1:	01 d1                	add    ecx,edx
c00092b3:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092bc:	01 da                	add    edx,ebx
c00092be:	83 ec 04             	sub    esp,0x4
c00092c1:	50                   	push   eax
c00092c2:	51                   	push   ecx
c00092c3:	52                   	push   edx
c00092c4:	e8 b1 70 ff ff       	call   c000037a <memcpy>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092d5:	01 d0                	add    eax,edx
c00092d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092dc:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00092e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00092f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092f4:	89 d3                	mov    ebx,edx
c00092f6:	29 c3                	sub    ebx,eax
c00092f8:	89 d8                	mov    eax,ebx
c00092fa:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00092ff:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009306:	66 90                	xchg   ax,ax
c0009308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930c:	8b 00                	mov    eax,DWORD PTR [eax]
c000930e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009312:	66 90                	xchg   ax,ax
c0009314:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009319:	85 c0                	test   eax,eax
c000931b:	74 0b                	je     c0009328 <pbuf_copy_partial+0x194>
c000931d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009322:	0f 85 0c ff ff ff    	jne    c0009234 <pbuf_copy_partial+0xa0>
c0009328:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000932d:	8d 76 00             	lea    esi,[esi+0x0]
c0009330:	83 c4 28             	add    esp,0x28
c0009333:	5b                   	pop    ebx
c0009334:	c3                   	ret    
c0009335:	8d 76 00             	lea    esi,[esi+0x0]

c0009338 <pbuf_take>:
c0009338:	83 ec 2c             	sub    esp,0x2c
c000933b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000933f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009348:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000934d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009354:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009359:	75 1d                	jne    c0009378 <pbuf_take+0x40>
c000935b:	83 ec 08             	sub    esp,0x8
c000935e:	68 64 06 03 c0       	push   0xc0030664
c0009363:	68 66 01 03 c0       	push   0xc0030166
c0009368:	e8 5b 6b 01 00       	call   c001fec8 <CPrintf>
c000936d:	83 c4 10             	add    esp,0x10
c0009370:	b0 00                	mov    al,0x0
c0009372:	e9 3d 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c0009377:	90                   	nop
c0009378:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000937d:	75 1d                	jne    c000939c <pbuf_take+0x64>
c000937f:	83 ec 08             	sub    esp,0x8
c0009382:	68 7b 06 03 c0       	push   0xc003067b
c0009387:	68 66 01 03 c0       	push   0xc0030166
c000938c:	e8 37 6b 01 00       	call   c001fec8 <CPrintf>
c0009391:	83 c4 10             	add    esp,0x10
c0009394:	b0 00                	mov    al,0x0
c0009396:	e9 19 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c000939b:	90                   	nop
c000939c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093a1:	74 1d                	je     c00093c0 <pbuf_take+0x88>
c00093a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a8:	74 16                	je     c00093c0 <pbuf_take+0x88>
c00093aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093b6:	0f b7 c0             	movzx  eax,ax
c00093b9:	39 c2                	cmp    edx,eax
c00093bb:	76 0b                	jbe    c00093c8 <pbuf_take+0x90>
c00093bd:	8d 76 00             	lea    esi,[esi+0x0]
c00093c0:	b0 f2                	mov    al,0xf2
c00093c2:	e9 ed 00 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093d0:	e9 9f 00 00 00       	jmp    c0009474 <pbuf_take+0x13c>
c00093d5:	8d 76 00             	lea    esi,[esi+0x0]
c00093d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00093dd:	75 15                	jne    c00093f4 <pbuf_take+0xbc>
c00093df:	83 ec 08             	sub    esp,0x8
c00093e2:	68 96 06 03 c0       	push   0xc0030696
c00093e7:	68 66 01 03 c0       	push   0xc0030166
c00093ec:	e8 d7 6a 01 00       	call   c001fec8 <CPrintf>
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093f8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00093fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009401:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009405:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000940a:	0f b7 c0             	movzx  eax,ax
c000940d:	39 c2                	cmp    edx,eax
c000940f:	76 0f                	jbe    c0009420 <pbuf_take+0xe8>
c0009411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009415:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009419:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000941e:	66 90                	xchg   ax,ax
c0009420:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009425:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000942a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000942e:	01 c1                	add    ecx,eax
c0009430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009437:	83 ec 04             	sub    esp,0x4
c000943a:	52                   	push   edx
c000943b:	51                   	push   ecx
c000943c:	50                   	push   eax
c000943d:	e8 38 6f ff ff       	call   c000037a <memcpy>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009449:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000944e:	89 d1                	mov    ecx,edx
c0009450:	29 c1                	sub    ecx,eax
c0009452:	89 c8                	mov    eax,ecx
c0009454:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009459:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000945e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009463:	01 d0                	add    eax,edx
c0009465:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000946a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009474:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009479:	85 c0                	test   eax,eax
c000947b:	0f 85 57 ff ff ff    	jne    c00093d8 <pbuf_take+0xa0>
c0009481:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009486:	85 c0                	test   eax,eax
c0009488:	75 0e                	jne    c0009498 <pbuf_take+0x160>
c000948a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000948f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009494:	39 c2                	cmp    edx,eax
c0009496:	74 18                	je     c00094b0 <pbuf_take+0x178>
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	68 ae 06 03 c0       	push   0xc00306ae
c00094a0:	68 66 01 03 c0       	push   0xc0030166
c00094a5:	e8 1e 6a 01 00       	call   c001fec8 <CPrintf>
c00094aa:	83 c4 10             	add    esp,0x10
c00094ad:	8d 76 00             	lea    esi,[esi+0x0]
c00094b0:	b0 00                	mov    al,0x0
c00094b2:	66 90                	xchg   ax,ax
c00094b4:	83 c4 2c             	add    esp,0x2c
c00094b7:	c3                   	ret    

c00094b8 <pbuf_coalesce>:
c00094b8:	83 ec 1c             	sub    esp,0x1c
c00094bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 07                	jne    c00094cc <pbuf_coalesce+0x14>
c00094c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c9:	eb 7d                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094cb:	90                   	nop
c00094cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094d3:	0f b7 c0             	movzx  eax,ax
c00094d6:	83 ec 04             	sub    esp,0x4
c00094d9:	6a 00                	push   0x0
c00094db:	50                   	push   eax
c00094dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00094e0:	e8 e7 f1 ff ff       	call   c00086cc <pbuf_alloc>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00094f1:	75 09                	jne    c00094fc <pbuf_coalesce+0x44>
c00094f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f7:	eb 4f                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094f9:	8d 76 00             	lea    esi,[esi+0x0]
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009503:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009507:	e8 20 fa ff ff       	call   c0008f2c <pbuf_copy>
c000950c:	83 c4 10             	add    esp,0x10
c000950f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009513:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009518:	85 c0                	test   eax,eax
c000951a:	74 18                	je     c0009534 <pbuf_coalesce+0x7c>
c000951c:	83 ec 08             	sub    esp,0x8
c000951f:	68 c4 06 03 c0       	push   0xc00306c4
c0009524:	68 66 01 03 c0       	push   0xc0030166
c0009529:	e8 9a 69 01 00       	call   c001fec8 <CPrintf>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	8d 76 00             	lea    esi,[esi+0x0]
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000953b:	e8 b4 ef ff ff       	call   c00084f4 <pbuf_free>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009547:	90                   	nop
c0009548:	83 c4 1c             	add    esp,0x1c
c000954b:	c3                   	ret    

c000954c <pbuf_get_at>:
c000954c:	83 ec 14             	sub    esp,0x14
c000954f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009553:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009557:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000955a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000955f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009567:	eb 27                	jmp    c0009590 <pbuf_get_at+0x44>
c0009569:	8d 76 00             	lea    esi,[esi+0x0]
c000956c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009570:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009574:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009579:	89 d1                	mov    ecx,edx
c000957b:	29 c1                	sub    ecx,eax
c000957d:	89 c8                	mov    eax,ecx
c000957f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009588:	8b 00                	mov    eax,DWORD PTR [eax]
c000958a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000958e:	66 90                	xchg   ax,ax
c0009590:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009595:	74 15                	je     c00095ac <pbuf_get_at+0x60>
c0009597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000959f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095a4:	0f b7 c0             	movzx  eax,ax
c00095a7:	39 c2                	cmp    edx,eax
c00095a9:	73 c1                	jae    c000956c <pbuf_get_at+0x20>
c00095ab:	90                   	nop
c00095ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095b1:	74 29                	je     c00095dc <pbuf_get_at+0x90>
c00095b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095bb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095c0:	0f b7 c0             	movzx  eax,ax
c00095c3:	39 c2                	cmp    edx,eax
c00095c5:	73 15                	jae    c00095dc <pbuf_get_at+0x90>
c00095c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095ce:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095d3:	01 d0                	add    eax,edx
c00095d5:	8a 00                	mov    al,BYTE PTR [eax]
c00095d7:	eb 07                	jmp    c00095e0 <pbuf_get_at+0x94>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	b0 00                	mov    al,0x0
c00095de:	66 90                	xchg   ax,ax
c00095e0:	83 c4 14             	add    esp,0x14
c00095e3:	c3                   	ret    

c00095e4 <pbuf_memcmp>:
c00095e4:	83 ec 18             	sub    esp,0x18
c00095e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00095eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095ef:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095f4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009601:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009609:	eb 25                	jmp    c0009630 <pbuf_memcmp+0x4c>
c000960b:	90                   	nop
c000960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	89 d1                	mov    ecx,edx
c000961b:	29 c1                	sub    ecx,eax
c000961d:	89 c8                	mov    eax,ecx
c000961f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	8b 00                	mov    eax,DWORD PTR [eax]
c000962a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000962e:	66 90                	xchg   ax,ax
c0009630:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009635:	74 15                	je     c000964c <pbuf_memcmp+0x68>
c0009637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000963f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009644:	0f b7 c0             	movzx  eax,ax
c0009647:	39 c2                	cmp    edx,eax
c0009649:	73 c1                	jae    c000960c <pbuf_memcmp+0x28>
c000964b:	90                   	nop
c000964c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009651:	0f 84 8d 00 00 00    	je     c00096e4 <pbuf_memcmp+0x100>
c0009657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000965b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000965f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	39 c2                	cmp    edx,eax
c0009669:	73 79                	jae    c00096e4 <pbuf_memcmp+0x100>
c000966b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009672:	eb 5c                	jmp    c00096d0 <pbuf_memcmp+0xec>
c0009674:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009679:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000967e:	01 d0                	add    eax,edx
c0009680:	0f b7 c0             	movzx  eax,ax
c0009683:	50                   	push   eax
c0009684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009688:	e8 bf fe ff ff       	call   c000954c <pbuf_get_at>
c000968d:	83 c4 08             	add    esp,0x8
c0009690:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009694:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969d:	01 d0                	add    eax,edx
c000969f:	8a 00                	mov    al,BYTE PTR [eax]
c00096a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096a5:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096af:	39 c2                	cmp    edx,eax
c00096b1:	74 0d                	je     c00096c0 <pbuf_memcmp+0xdc>
c00096b3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096b8:	83 c0 01             	add    eax,0x1
c00096bb:	eb 2f                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096bd:	8d 76 00             	lea    esi,[esi+0x0]
c00096c0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096c5:	83 c0 01             	add    eax,0x1
c00096c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096cd:	8d 76 00             	lea    esi,[esi+0x0]
c00096d0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00096d9:	39 c2                	cmp    edx,eax
c00096db:	72 97                	jb     c0009674 <pbuf_memcmp+0x90>
c00096dd:	b8 00 00 00 00       	mov    eax,0x0
c00096e2:	eb 08                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	83 c4 18             	add    esp,0x18
c00096ef:	c3                   	ret    

c00096f0 <pbuf_memfind>:
c00096f0:	83 ec 18             	sub    esp,0x18
c00096f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00096f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096fb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009700:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009708:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000970b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000970f:	89 d1                	mov    ecx,edx
c0009711:	29 c1                	sub    ecx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000971a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009729:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c000972d:	01 ca                	add    edx,ecx
c000972f:	39 d0                	cmp    eax,edx
c0009731:	7c 65                	jl     c0009798 <pbuf_memfind+0xa8>
c0009733:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009736:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000973b:	eb 4b                	jmp    c0009788 <pbuf_memfind+0x98>
c000973d:	8d 76 00             	lea    esi,[esi+0x0]
c0009740:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000974a:	52                   	push   edx
c000974b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974f:	50                   	push   eax
c0009750:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009754:	e8 8b fe ff ff       	call   c00095e4 <pbuf_memcmp>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009761:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009766:	85 c0                	test   eax,eax
c0009768:	75 0a                	jne    c0009774 <pbuf_memfind+0x84>
c000976a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000976f:	eb 2f                	jmp    c00097a0 <pbuf_memfind+0xb0>
c0009771:	8d 76 00             	lea    esi,[esi+0x0]
c0009774:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009779:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000977e:	01 d0                	add    eax,edx
c0009780:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009785:	8d 76 00             	lea    esi,[esi+0x0]
c0009788:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000978d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009792:	39 c2                	cmp    edx,eax
c0009794:	76 aa                	jbe    c0009740 <pbuf_memfind+0x50>
c0009796:	66 90                	xchg   ax,ax
c0009798:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	83 c4 18             	add    esp,0x18
c00097a3:	c3                   	ret    

c00097a4 <pbuf_strstr>:
c00097a4:	83 ec 1c             	sub    esp,0x1c
c00097a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097ac:	74 1e                	je     c00097cc <pbuf_strstr+0x28>
c00097ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097b2:	8a 00                	mov    al,BYTE PTR [eax]
c00097b4:	0f be c0             	movsx  eax,al
c00097b7:	85 c0                	test   eax,eax
c00097b9:	74 11                	je     c00097cc <pbuf_strstr+0x28>
c00097bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097c2:	0f b7 c0             	movzx  eax,ax
c00097c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00097ca:	75 08                	jne    c00097d4 <pbuf_strstr+0x30>
c00097cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097d1:	eb 41                	jmp    c0009814 <pbuf_strstr+0x70>
c00097d3:	90                   	nop
c00097d4:	83 ec 0c             	sub    esp,0xc
c00097d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097db:	e8 90 6d ff ff       	call   c0000570 <strlen>
c00097e0:	83 c4 10             	add    esp,0x10
c00097e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097e7:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00097ef:	76 07                	jbe    c00097f8 <pbuf_strstr+0x54>
c00097f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097f6:	eb 1c                	jmp    c0009814 <pbuf_strstr+0x70>
c00097f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097fc:	0f b7 c0             	movzx  eax,ax
c00097ff:	6a 00                	push   0x0
c0009801:	50                   	push   eax
c0009802:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000980a:	e8 e1 fe ff ff       	call   c00096f0 <pbuf_memfind>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	66 90                	xchg   ax,ax
c0009814:	83 c4 1c             	add    esp,0x1c
c0009817:	c3                   	ret    

c0009818 <raw_input>:
c0009818:	83 ec 2c             	sub    esp,0x2c
c000981b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000982b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009832:	0f b6 c0             	movzx  eax,al
c0009835:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000983a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009842:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000984b:	e9 b8 00 00 00       	jmp    c0009908 <raw_input+0xf0>
c0009850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009854:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009857:	0f b6 d0             	movzx  edx,al
c000985a:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000985f:	39 c2                	cmp    edx,eax
c0009861:	0f 85 8d 00 00 00    	jne    c00098f4 <raw_input+0xdc>
c0009867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000986b:	85 c0                	test   eax,eax
c000986d:	74 19                	je     c0009888 <raw_input+0x70>
c000986f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009873:	8b 00                	mov    eax,DWORD PTR [eax]
c0009875:	85 c0                	test   eax,eax
c0009877:	74 0f                	je     c0009888 <raw_input+0x70>
c0009879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000987d:	8b 10                	mov    edx,DWORD PTR [eax]
c000987f:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0009884:	39 c2                	cmp    edx,eax
c0009886:	75 6c                	jne    c00098f4 <raw_input+0xdc>
c0009888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000988c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000988f:	85 c0                	test   eax,eax
c0009891:	74 61                	je     c00098f4 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000989a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098a1:	68 90 78 03 c0       	push   0xc0037890
c00098a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ae:	52                   	push   edx
c00098af:	ff d0                	call   eax
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	0f b6 c0             	movzx  eax,al
c00098b7:	85 c0                	test   eax,eax
c00098b9:	74 39                	je     c00098f4 <raw_input+0xdc>
c00098bb:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098c3:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098cd:	74 25                	je     c00098f4 <raw_input+0xdc>
c00098cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098dd:	8b 15 9c b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b89c
c00098e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ee:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c00098f3:	90                   	nop
c00098f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009907:	90                   	nop
c0009908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000990d:	85 c0                	test   eax,eax
c000990f:	75 0b                	jne    c000991c <raw_input+0x104>
c0009911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009916:	0f 85 34 ff ff ff    	jne    c0009850 <raw_input+0x38>
c000991c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <raw_bind>:
c0009924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009929:	74 09                	je     c0009934 <raw_bind+0x10>
c000992b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009931:	eb 09                	jmp    c000993c <raw_bind+0x18>
c0009933:	90                   	nop
c0009934:	b8 00 00 00 00       	mov    eax,0x0
c0009939:	8d 76 00             	lea    esi,[esi+0x0]
c000993c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009940:	89 02                	mov    DWORD PTR [edx],eax
c0009942:	b0 00                	mov    al,0x0
c0009944:	c3                   	ret    
c0009945:	8d 76 00             	lea    esi,[esi+0x0]

c0009948 <raw_connect>:
c0009948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000994d:	74 09                	je     c0009958 <raw_connect+0x10>
c000994f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009953:	8b 00                	mov    eax,DWORD PTR [eax]
c0009955:	eb 09                	jmp    c0009960 <raw_connect+0x18>
c0009957:	90                   	nop
c0009958:	b8 00 00 00 00       	mov    eax,0x0
c000995d:	8d 76 00             	lea    esi,[esi+0x0]
c0009960:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009964:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009967:	b0 00                	mov    al,0x0
c0009969:	c3                   	ret    
c000996a:	66 90                	xchg   ax,ax

c000996c <raw_recv>:
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009982:	90                   	nop
c0009983:	c3                   	ret    

c0009984 <raw_sendto>:
c0009984:	83 ec 1c             	sub    esp,0x1c
c0009987:	83 ec 08             	sub    esp,0x8
c000998a:	6a 14                	push   0x14
c000998c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009990:	e8 c3 e9 ff ff       	call   c0008358 <pbuf_header>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	0f b6 c0             	movzx  eax,al
c000999b:	85 c0                	test   eax,eax
c000999d:	74 49                	je     c00099e8 <raw_sendto+0x64>
c000999f:	83 ec 04             	sub    esp,0x4
c00099a2:	6a 00                	push   0x0
c00099a4:	6a 00                	push   0x0
c00099a6:	6a 01                	push   0x1
c00099a8:	e8 1f ed ff ff       	call   c00086cc <pbuf_alloc>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099b9:	75 09                	jne    c00099c4 <raw_sendto+0x40>
c00099bb:	b0 ff                	mov    al,0xff
c00099bd:	e9 2a 01 00 00       	jmp    c0009aec <raw_sendto+0x168>
c00099c2:	66 90                	xchg   ax,ax
c00099c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099cb:	0f b7 c0             	movzx  eax,ax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	74 52                	je     c0009a24 <raw_sendto+0xa0>
c00099d2:	83 ec 08             	sub    esp,0x8
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099dd:	e8 2a f4 ff ff       	call   c0008e0c <pbuf_chain>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	eb 3d                	jmp    c0009a24 <raw_sendto+0xa0>
c00099e7:	90                   	nop
c00099e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099f0:	83 ec 08             	sub    esp,0x8
c00099f3:	6a ec                	push   0xffffffec
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	e8 5a e9 ff ff       	call   c0008358 <pbuf_header>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	0f b6 c0             	movzx  eax,al
c0009a04:	85 c0                	test   eax,eax
c0009a06:	74 1c                	je     c0009a24 <raw_sendto+0xa0>
c0009a08:	83 ec 08             	sub    esp,0x8
c0009a0b:	68 d8 06 03 c0       	push   0xc00306d8
c0009a10:	68 66 01 03 c0       	push   0xc0030166
c0009a15:	e8 ae 64 01 00       	call   c001fec8 <CPrintf>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	b0 ff                	mov    al,0xff
c0009a1f:	e9 c8 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a2b:	e8 6c 9d 00 00       	call   c001379c <ip_route>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a3c:	75 22                	jne    c0009a60 <raw_sendto+0xdc>
c0009a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a42:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a46:	74 10                	je     c0009a58 <raw_sendto+0xd4>
c0009a48:	83 ec 0c             	sub    esp,0xc
c0009a4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4f:	e8 a0 ea ff ff       	call   c00084f4 <pbuf_free>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	90                   	nop
c0009a58:	b0 fc                	mov    al,0xfc
c0009a5a:	e9 8d 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a5f:	90                   	nop
c0009a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a64:	85 c0                	test   eax,eax
c0009a66:	74 0c                	je     c0009a74 <raw_sendto+0xf0>
c0009a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	85 c0                	test   eax,eax
c0009a70:	75 12                	jne    c0009a84 <raw_sendto+0x100>
c0009a72:	66 90                	xchg   ax,ax
c0009a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a78:	83 c0 04             	add    eax,0x4
c0009a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a7f:	eb 0b                	jmp    c0009a8c <raw_sendto+0x108>
c0009a81:	8d 76 00             	lea    esi,[esi+0x0]
c0009a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009a93:	0f b6 c8             	movzx  ecx,al
c0009a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a9a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009a9d:	0f b6 d0             	movzx  edx,al
c0009aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009aa4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009aa7:	0f b6 c0             	movzx  eax,al
c0009aaa:	83 ec 04             	sub    esp,0x4
c0009aad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009ab1:	51                   	push   ecx
c0009ab2:	52                   	push   edx
c0009ab3:	50                   	push   eax
c0009ab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009abc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac0:	e8 af a1 00 00       	call   c0013c74 <ip_output_if>
c0009ac5:	83 c4 20             	add    esp,0x20
c0009ac8:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009ad4:	74 12                	je     c0009ae8 <raw_sendto+0x164>
c0009ad6:	83 ec 0c             	sub    esp,0xc
c0009ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009add:	e8 12 ea ff ff       	call   c00084f4 <pbuf_free>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ae8:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009aec:	83 c4 1c             	add    esp,0x1c
c0009aef:	c3                   	ret    

c0009af0 <raw_send>:
c0009af0:	83 ec 0c             	sub    esp,0xc
c0009af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009af7:	83 c0 04             	add    eax,0x4
c0009afa:	83 ec 04             	sub    esp,0x4
c0009afd:	50                   	push   eax
c0009afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b06:	e8 79 fe ff ff       	call   c0009984 <raw_sendto>
c0009b0b:	83 c4 10             	add    esp,0x10
c0009b0e:	83 c4 0c             	add    esp,0xc
c0009b11:	c3                   	ret    
c0009b12:	66 90                	xchg   ax,ax

c0009b14 <raw_remove>:
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b20:	75 12                	jne    c0009b34 <raw_remove+0x20>
c0009b22:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b2a:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c0009b2f:	eb 4b                	jmp    c0009b7c <raw_remove+0x68>
c0009b31:	8d 76 00             	lea    esi,[esi+0x0]
c0009b34:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b3d:	eb 35                	jmp    c0009b74 <raw_remove+0x60>
c0009b3f:	90                   	nop
c0009b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b47:	85 c0                	test   eax,eax
c0009b49:	74 1d                	je     c0009b68 <raw_remove+0x54>
c0009b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b52:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b56:	75 10                	jne    c0009b68 <raw_remove+0x54>
c0009b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b66:	66 90                	xchg   ax,ax
c0009b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b73:	90                   	nop
c0009b74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009b79:	75 c5                	jne    c0009b40 <raw_remove+0x2c>
c0009b7b:	90                   	nop
c0009b7c:	83 ec 08             	sub    esp,0x8
c0009b7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009b83:	6a 00                	push   0x0
c0009b85:	e8 ae e0 ff ff       	call   c0007c38 <memp_free>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	90                   	nop
c0009b8e:	83 c4 1c             	add    esp,0x1c
c0009b91:	c3                   	ret    
c0009b92:	66 90                	xchg   ax,ax

c0009b94 <raw_new>:
c0009b94:	83 ec 2c             	sub    esp,0x2c
c0009b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b9f:	83 ec 0c             	sub    esp,0xc
c0009ba2:	6a 00                	push   0x0
c0009ba4:	e8 63 df ff ff       	call   c0007b0c <memp_malloc>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bb0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009bb5:	74 3d                	je     c0009bf4 <raw_new+0x60>
c0009bb7:	83 ec 04             	sub    esp,0x4
c0009bba:	6a 1c                	push   0x1c
c0009bbc:	6a 00                	push   0x0
c0009bbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bc2:	e8 29 69 ff ff       	call   c00004f0 <memset>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bd2:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd9:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009bdd:	8b 15 9c b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b89c
c0009be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bee:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c0009bf3:	90                   	nop
c0009bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf8:	83 c4 2c             	add    esp,0x2c
c0009bfb:	c3                   	ret    

c0009bfc <stats_init>:
c0009bfc:	90                   	nop
c0009bfd:	c3                   	ret    
c0009bfe:	66 90                	xchg   ax,ax

c0009c00 <sys_msleep>:
c0009c00:	83 ec 1c             	sub    esp,0x1c
c0009c03:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c08:	74 46                	je     c0009c50 <sys_msleep+0x50>
c0009c0a:	83 ec 08             	sub    esp,0x8
c0009c0d:	6a 00                	push   0x0
c0009c0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c13:	50                   	push   eax
c0009c14:	e8 53 70 ff ff       	call   c0000c6c <sys_sem_new>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c20:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c25:	85 c0                	test   eax,eax
c0009c27:	75 27                	jne    c0009c50 <sys_msleep+0x50>
c0009c29:	83 ec 08             	sub    esp,0x8
c0009c2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c34:	50                   	push   eax
c0009c35:	e8 8a 70 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	83 ec 0c             	sub    esp,0xc
c0009c40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c44:	50                   	push   eax
c0009c45:	e8 4a 70 ff ff       	call   c0000c94 <sys_sem_free>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c50:	90                   	nop
c0009c51:	83 c4 1c             	add    esp,0x1c
c0009c54:	c3                   	ret    
c0009c55:	66 90                	xchg   ax,ax
c0009c57:	90                   	nop

c0009c58 <tcp_accept_null>:
c0009c58:	83 ec 04             	sub    esp,0x4
c0009c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5f:	88 04 24             	mov    BYTE PTR [esp],al
c0009c62:	b0 f6                	mov    al,0xf6
c0009c64:	83 c4 04             	add    esp,0x4
c0009c67:	c3                   	ret    

c0009c68 <tcp_listen_with_backlog>:
c0009c68:	83 ec 2c             	sub    esp,0x2c
c0009c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c7a:	85 c0                	test   eax,eax
c0009c7c:	74 22                	je     c0009ca0 <tcp_listen_with_backlog+0x38>
c0009c7e:	83 ec 08             	sub    esp,0x8
c0009c81:	68 00 07 03 c0       	push   0xc0030700
c0009c86:	68 66 01 03 c0       	push   0xc0030166
c0009c8b:	e8 38 62 01 00       	call   c001fec8 <CPrintf>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	b8 00 00 00 00       	mov    eax,0x0
c0009c98:	e9 77 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0009ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca7:	83 f8 01             	cmp    eax,0x1
c0009caa:	75 0c                	jne    c0009cb8 <tcp_listen_with_backlog+0x50>
c0009cac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb0:	e9 5f 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	6a 03                	push   0x3
c0009cbd:	e8 4a de ff ff       	call   c0007b0c <memp_malloc>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cc9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cce:	75 0c                	jne    c0009cdc <tcp_listen_with_backlog+0x74>
c0009cd0:	b8 00 00 00 00       	mov    eax,0x0
c0009cd5:	e9 3a 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cda:	66 90                	xchg   ax,ax
c0009cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ce7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009cea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009cf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cf5:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfd:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d08:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d0f:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d16:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d1d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d24:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d27:	83 c8 02             	or     eax,0x2
c0009d2a:	88 c2                	mov    dl,al
c0009d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d30:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3e:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d45:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d4c:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d59:	89 10                	mov    DWORD PTR [eax],edx
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d62:	0f b7 c0             	movzx  eax,ax
c0009d65:	85 c0                	test   eax,eax
c0009d67:	74 6f                	je     c0009dd8 <tcp_listen_with_backlog+0x170>
c0009d69:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d6e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d72:	75 10                	jne    c0009d84 <tcp_listen_with_backlog+0x11c>
c0009d74:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d7c:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c0009d81:	eb 49                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009d83:	90                   	nop
c0009d84:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d89:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c0009d8e:	eb 30                	jmp    c0009dc0 <tcp_listen_with_backlog+0x158>
c0009d90:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009d95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d98:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9c:	75 12                	jne    c0009db0 <tcp_listen_with_backlog+0x148>
c0009d9e:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009da3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009da7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009daa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dad:	eb 1d                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009db8:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c0009dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0009dc0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009dc5:	85 c0                	test   eax,eax
c0009dc7:	75 c7                	jne    c0009d90 <tcp_listen_with_backlog+0x128>
c0009dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009dd7:	90                   	nop
c0009dd8:	83 ec 08             	sub    esp,0x8
c0009ddb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009ddf:	6a 02                	push   0x2
c0009de1:	e8 52 de ff ff       	call   c0007c38 <memp_free>
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ded:	c7 40 1c 58 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c58
c0009df4:	8b 15 78 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037878
c0009dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e05:	a3 78 78 03 c0       	mov    ds:0xc0037878,eax
c0009e0a:	e8 a5 6e 00 00       	call   c0010cb4 <tcp_timer_needed>
c0009e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e13:	90                   	nop
c0009e14:	83 c4 2c             	add    esp,0x2c
c0009e17:	c3                   	ret    

c0009e18 <tcp_update_rcv_ann_wnd>:
c0009e18:	83 ec 1c             	sub    esp,0x1c
c0009e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e1f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e29:	0f b7 c0             	movzx  eax,ax
c0009e2c:	01 d0                	add    eax,edx
c0009e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e36:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e40:	0f b7 c8             	movzx  ecx,ax
c0009e43:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e49:	76 05                	jbe    c0009e50 <tcp_update_rcv_ann_wnd+0x38>
c0009e4b:	b8 30 04 00 00       	mov    eax,0x430
c0009e50:	0f b7 c0             	movzx  eax,ax
c0009e53:	01 c2                	add    edx,eax
c0009e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e59:	29 d0                	sub    eax,edx
c0009e5b:	78 23                	js     c0009e80 <tcp_update_rcv_ann_wnd+0x68>
c0009e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009e68:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e70:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e77:	29 c2                	sub    edx,eax
c0009e79:	89 d0                	mov    eax,edx
c0009e7b:	eb 73                	jmp    c0009ef0 <tcp_update_rcv_ann_wnd+0xd8>
c0009e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0009e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e84:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e8e:	29 c2                	sub    edx,eax
c0009e90:	89 d0                	mov    eax,edx
c0009e92:	85 c0                	test   eax,eax
c0009e94:	7e 0e                	jle    c0009ea4 <tcp_update_rcv_ann_wnd+0x8c>
c0009e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ea0:	eb 46                	jmp    c0009ee8 <tcp_update_rcv_ann_wnd+0xd0>
c0009ea2:	66 90                	xchg   ax,ax
c0009ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eaf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009eb2:	29 c2                	sub    edx,eax
c0009eb4:	89 d0                	mov    eax,edx
c0009eb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eba:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009ec2:	76 18                	jbe    c0009edc <tcp_update_rcv_ann_wnd+0xc4>
c0009ec4:	83 ec 08             	sub    esp,0x8
c0009ec7:	68 34 09 03 c0       	push   0xc0030934
c0009ecc:	68 66 01 03 c0       	push   0xc0030166
c0009ed1:	e8 f2 5f 01 00       	call   c001fec8 <CPrintf>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0009edc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009ee4:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	8d 76 00             	lea    esi,[esi+0x0]
c0009ef0:	83 c4 1c             	add    esp,0x1c
c0009ef3:	c3                   	ret    

c0009ef4 <tcp_recved>:
c0009ef4:	83 ec 2c             	sub    esp,0x2c
c0009ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009efb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f00:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f0c:	0f b7 c0             	movzx  eax,ax
c0009f0f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f14:	29 c1                	sub    ecx,eax
c0009f16:	89 c8                	mov    eax,ecx
c0009f18:	39 c2                	cmp    edx,eax
c0009f1a:	7e 18                	jle    c0009f34 <tcp_recved+0x40>
c0009f1c:	83 ec 08             	sub    esp,0x8
c0009f1f:	68 24 07 03 c0       	push   0xc0030724
c0009f24:	68 66 01 03 c0       	push   0xc0030166
c0009f29:	e8 9a 5f 01 00       	call   c001fec8 <CPrintf>
c0009f2e:	83 c4 10             	add    esp,0x10
c0009f31:	8d 76 00             	lea    esi,[esi+0x0]
c0009f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f3f:	01 d0                	add    eax,edx
c0009f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f45:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f50:	0f b7 c0             	movzx  eax,ax
c0009f53:	3d 60 08 00 00       	cmp    eax,0x860
c0009f58:	76 0a                	jbe    c0009f64 <tcp_recved+0x70>
c0009f5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5e:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f64:	83 ec 0c             	sub    esp,0xc
c0009f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f6b:	e8 a8 fe ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f77:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009f7f:	7e 23                	jle    c0009fa4 <tcp_recved+0xb0>
c0009f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f85:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009f88:	83 c8 02             	or     eax,0x2
c0009f8b:	88 c2                	mov    dl,al
c0009f8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f91:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009f94:	83 ec 0c             	sub    esp,0xc
c0009f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9b:	e8 84 60 00 00       	call   c0010024 <tcp_output>
c0009fa0:	83 c4 10             	add    esp,0x10
c0009fa3:	90                   	nop
c0009fa4:	90                   	nop
c0009fa5:	83 c4 2c             	add    esp,0x2c
c0009fa8:	c3                   	ret    
c0009fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0009fac <tcp_new_port>:
c0009fac:	83 ec 10             	sub    esp,0x10
c0009faf:	90                   	nop
c0009fb0:	66 a1 c0 43 03 c0    	mov    ax,ds:0xc00343c0
c0009fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0009fb9:	66 89 15 c0 43 03 c0 	mov    WORD PTR ds:0xc00343c0,dx
c0009fc0:	0f b7 c0             	movzx  eax,ax
c0009fc3:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fc8:	75 0a                	jne    c0009fd4 <tcp_new_port+0x28>
c0009fca:	66 c7 05 c0 43 03 c0 00 c0 	mov    WORD PTR ds:0xc00343c0,0xc000
c0009fd3:	90                   	nop
c0009fd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009fdc:	eb 4a                	jmp    c000a028 <tcp_new_port+0x7c>
c0009fde:	66 90                	xchg   ax,ax
c0009fe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe4:	8b 04 85 40 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5c0]
c0009feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ff1:	eb 29                	jmp    c000a01c <tcp_new_port+0x70>
c0009ff3:	90                   	nop
c0009ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ff8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ffb:	66 a1 c0 43 03 c0    	mov    ax,ds:0xc00343c0
c000a001:	0f b7 d2             	movzx  edx,dx
c000a004:	0f b7 c0             	movzx  eax,ax
c000a007:	39 c2                	cmp    edx,eax
c000a009:	75 05                	jne    c000a010 <tcp_new_port+0x64>
c000a00b:	eb a3                	jmp    c0009fb0 <tcp_new_port+0x4>
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a014:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a01b:	90                   	nop
c000a01c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a021:	75 d1                	jne    c0009ff4 <tcp_new_port+0x48>
c000a023:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a028:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a02d:	7e b1                	jle    c0009fe0 <tcp_new_port+0x34>
c000a02f:	66 a1 c0 43 03 c0    	mov    ax,ds:0xc00343c0
c000a035:	83 c4 10             	add    esp,0x10
c000a038:	c3                   	ret    
c000a039:	8d 76 00             	lea    esi,[esi+0x0]

c000a03c <tcp_bind>:
c000a03c:	83 ec 2c             	sub    esp,0x2c
c000a03f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a043:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a048:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a057:	85 c0                	test   eax,eax
c000a059:	74 1d                	je     c000a078 <tcp_bind+0x3c>
c000a05b:	83 ec 08             	sub    esp,0x8
c000a05e:	68 48 07 03 c0       	push   0xc0030748
c000a063:	68 66 01 03 c0       	push   0xc0030166
c000a068:	e8 5b 5e 01 00       	call   c001fec8 <CPrintf>
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	b0 fa                	mov    al,0xfa
c000a072:	e9 f1 00 00 00       	jmp    c000a168 <tcp_bind+0x12c>
c000a077:	90                   	nop
c000a078:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a07d:	85 c0                	test   eax,eax
c000a07f:	75 0b                	jne    c000a08c <tcp_bind+0x50>
c000a081:	e8 26 ff ff ff       	call   c0009fac <tcp_new_port>
c000a086:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a08b:	90                   	nop
c000a08c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a094:	eb 7a                	jmp    c000a110 <tcp_bind+0xd4>
c000a096:	66 90                	xchg   ax,ax
c000a098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a09c:	8b 04 85 40 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5c0]
c000a0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0a9:	eb 59                	jmp    c000a104 <tcp_bind+0xc8>
c000a0ab:	90                   	nop
c000a0ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0b3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0b8:	0f b7 c0             	movzx  eax,ax
c000a0bb:	39 c2                	cmp    edx,eax
c000a0bd:	75 39                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c3:	85 c0                	test   eax,eax
c000a0c5:	74 2d                	je     c000a0f4 <tcp_bind+0xb8>
c000a0c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0cd:	85 c0                	test   eax,eax
c000a0cf:	74 23                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a0d6:	74 1c                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0de:	85 c0                	test   eax,eax
c000a0e0:	74 12                	je     c000a0f4 <tcp_bind+0xb8>
c000a0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ee:	39 c2                	cmp    edx,eax
c000a0f0:	75 06                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0f2:	66 90                	xchg   ax,ax
c000a0f4:	b0 f8                	mov    al,0xf8
c000a0f6:	eb 70                	jmp    c000a168 <tcp_bind+0x12c>
c000a0f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a103:	90                   	nop
c000a104:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a109:	75 a1                	jne    c000a0ac <tcp_bind+0x70>
c000a10b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a114:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a118:	0f 8c 7a ff ff ff    	jl     c000a098 <tcp_bind+0x5c>
c000a11e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a123:	74 17                	je     c000a13c <tcp_bind+0x100>
c000a125:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a129:	8b 00                	mov    eax,DWORD PTR [eax]
c000a12b:	85 c0                	test   eax,eax
c000a12d:	74 0d                	je     c000a13c <tcp_bind+0x100>
c000a12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a133:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a137:	8b 12                	mov    edx,DWORD PTR [edx]
c000a139:	89 10                	mov    DWORD PTR [eax],edx
c000a13b:	90                   	nop
c000a13c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a144:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000a148:	8b 15 80 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037880
c000a14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000a15e:	e8 51 6b 00 00       	call   c0010cb4 <tcp_timer_needed>
c000a163:	b0 00                	mov    al,0x0
c000a165:	8d 76 00             	lea    esi,[esi+0x0]
c000a168:	83 c4 2c             	add    esp,0x2c
c000a16b:	c3                   	ret    

c000a16c <tcp_seg_free>:
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a174:	74 32                	je     c000a1a8 <tcp_seg_free+0x3c>
c000a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	74 13                	je     c000a194 <tcp_seg_free+0x28>
c000a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a188:	83 ec 0c             	sub    esp,0xc
c000a18b:	50                   	push   eax
c000a18c:	e8 63 e3 ff ff       	call   c00084f4 <pbuf_free>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a19b:	6a 04                	push   0x4
c000a19d:	e8 96 da ff ff       	call   c0007c38 <memp_free>
c000a1a2:	83 c4 10             	add    esp,0x10
c000a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1a8:	90                   	nop
c000a1a9:	83 c4 0c             	add    esp,0xc
c000a1ac:	c3                   	ret    
c000a1ad:	8d 76 00             	lea    esi,[esi+0x0]

c000a1b0 <tcp_segs_free>:
c000a1b0:	83 ec 1c             	sub    esp,0x1c
c000a1b3:	eb 27                	jmp    c000a1dc <tcp_segs_free+0x2c>
c000a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c9:	e8 9e ff ff ff       	call   c000a16c <tcp_seg_free>
c000a1ce:	83 c4 10             	add    esp,0x10
c000a1d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a1e1:	75 d5                	jne    c000a1b8 <tcp_segs_free+0x8>
c000a1e3:	90                   	nop
c000a1e4:	83 c4 1c             	add    esp,0x1c
c000a1e7:	c3                   	ret    

c000a1e8 <tcp_setprio>:
c000a1e8:	83 ec 04             	sub    esp,0x4
c000a1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1ef:	88 04 24             	mov    BYTE PTR [esp],al
c000a1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a1f6:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a1f9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a1fc:	90                   	nop
c000a1fd:	83 c4 04             	add    esp,0x4
c000a200:	c3                   	ret    
c000a201:	8d 76 00             	lea    esi,[esi+0x0]

c000a204 <tcp_seg_copy>:
c000a204:	83 ec 1c             	sub    esp,0x1c
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	6a 04                	push   0x4
c000a20c:	e8 fb d8 ff ff       	call   c0007b0c <memp_malloc>
c000a211:	83 c4 10             	add    esp,0x10
c000a214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a218:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a21d:	75 09                	jne    c000a228 <tcp_seg_copy+0x24>
c000a21f:	b8 00 00 00 00       	mov    eax,0x0
c000a224:	eb 2e                	jmp    c000a254 <tcp_seg_copy+0x50>
c000a226:	66 90                	xchg   ax,ax
c000a228:	83 ec 04             	sub    esp,0x4
c000a22b:	6a 10                	push   0x10
c000a22d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a235:	e8 40 61 ff ff       	call   c000037a <memcpy>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a241:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a244:	83 ec 0c             	sub    esp,0xc
c000a247:	50                   	push   eax
c000a248:	e8 af ea ff ff       	call   c0008cfc <pbuf_ref>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a254:	83 c4 1c             	add    esp,0x1c
c000a257:	c3                   	ret    

c000a258 <tcp_arg>:
c000a258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a25c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a260:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a263:	90                   	nop
c000a264:	c3                   	ret    
c000a265:	8d 76 00             	lea    esi,[esi+0x0]

c000a268 <tcp_recv>:
c000a268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a26c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a270:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a276:	90                   	nop
c000a277:	c3                   	ret    

c000a278 <tcp_sent>:
c000a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a27c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a280:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a286:	90                   	nop
c000a287:	c3                   	ret    

c000a288 <tcp_err>:
c000a288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a290:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a296:	90                   	nop
c000a297:	c3                   	ret    

c000a298 <tcp_accept>:
c000a298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2a3:	90                   	nop
c000a2a4:	c3                   	ret    
c000a2a5:	8d 76 00             	lea    esi,[esi+0x0]

c000a2a8 <tcp_poll>:
c000a2a8:	83 ec 04             	sub    esp,0x4
c000a2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2af:	88 04 24             	mov    BYTE PTR [esp],al
c000a2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ba:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2c4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2c7:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2ca:	90                   	nop
c000a2cb:	83 c4 04             	add    esp,0x4
c000a2ce:	c3                   	ret    
c000a2cf:	90                   	nop

c000a2d0 <tcp_pcb_purge>:
c000a2d0:	83 ec 0c             	sub    esp,0xc
c000a2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2da:	85 c0                	test   eax,eax
c000a2dc:	0f 84 ca 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2e9:	83 f8 0a             	cmp    eax,0xa
c000a2ec:	0f 84 ba 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2f9:	83 f8 01             	cmp    eax,0x1
c000a2fc:	0f 84 aa 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a306:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a30c:	85 c0                	test   eax,eax
c000a30e:	74 24                	je     c000a334 <tcp_pcb_purge+0x64>
c000a310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a314:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	50                   	push   eax
c000a31e:	e8 d1 e1 ff ff       	call   c00084f4 <pbuf_free>
c000a323:	83 c4 10             	add    esp,0x10
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a338:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a33e:	83 ec 0c             	sub    esp,0xc
c000a341:	50                   	push   eax
c000a342:	e8 69 fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a347:	83 c4 10             	add    esp,0x10
c000a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34e:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a366:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	50                   	push   eax
c000a36d:	e8 3e fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a372:	83 c4 10             	add    esp,0x10
c000a375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a379:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a37c:	83 ec 0c             	sub    esp,0xc
c000a37f:	50                   	push   eax
c000a380:	e8 2b fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a38c:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39e:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a5:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3ab:	90                   	nop
c000a3ac:	90                   	nop
c000a3ad:	83 c4 0c             	add    esp,0xc
c000a3b0:	c3                   	ret    
c000a3b1:	8d 76 00             	lea    esi,[esi+0x0]

c000a3b4 <tcp_slowtmr>:
c000a3b4:	57                   	push   edi
c000a3b5:	56                   	push   esi
c000a3b6:	53                   	push   ebx
c000a3b7:	83 ec 20             	sub    esp,0x20
c000a3ba:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3bf:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000a3c4:	83 c0 01             	add    eax,0x1
c000a3c7:	a3 74 78 03 c0       	mov    ds:0xc0037874,eax
c000a3cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a3d4:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3dd:	e9 16 06 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a3e2:	66 90                	xchg   ax,ax
c000a3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a3eb:	85 c0                	test   eax,eax
c000a3ed:	75 15                	jne    c000a404 <tcp_slowtmr+0x50>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	68 70 07 03 c0       	push   0xc0030770
c000a3f7:	68 66 01 03 c0       	push   0xc0030166
c000a3fc:	e8 c7 5a 01 00       	call   c001fec8 <CPrintf>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a40b:	83 f8 01             	cmp    eax,0x1
c000a40e:	75 18                	jne    c000a428 <tcp_slowtmr+0x74>
c000a410:	83 ec 08             	sub    esp,0x8
c000a413:	68 9c 07 03 c0       	push   0xc003079c
c000a418:	68 66 01 03 c0       	push   0xc0030166
c000a41d:	e8 a6 5a 01 00       	call   c001fec8 <CPrintf>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	8d 76 00             	lea    esi,[esi+0x0]
c000a428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a42f:	83 f8 0a             	cmp    eax,0xa
c000a432:	75 18                	jne    c000a44c <tcp_slowtmr+0x98>
c000a434:	83 ec 08             	sub    esp,0x8
c000a437:	68 c8 07 03 c0       	push   0xc00307c8
c000a43c:	68 66 01 03 c0       	push   0xc0030166
c000a441:	e8 82 5a 01 00       	call   c001fec8 <CPrintf>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	8d 76 00             	lea    esi,[esi+0x0]
c000a44c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a451:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45d:	83 f8 02             	cmp    eax,0x2
c000a460:	75 22                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a466:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	83 f8 06             	cmp    eax,0x6
c000a46f:	75 13                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a471:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a475:	83 c0 01             	add    eax,0x1
c000a478:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a47c:	e9 df 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a481:	8d 76 00             	lea    esi,[esi+0x0]
c000a484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a488:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a48b:	0f b6 c0             	movzx  eax,al
c000a48e:	83 f8 0c             	cmp    eax,0xc
c000a491:	75 11                	jne    c000a4a4 <tcp_slowtmr+0xf0>
c000a493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a497:	83 c0 01             	add    eax,0x1
c000a49a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a49e:	e9 bd 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a4a3:	90                   	nop
c000a4a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a8:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4ae:	0f b6 c0             	movzx  eax,al
c000a4b1:	85 c0                	test   eax,eax
c000a4b3:	0f 84 8f 00 00 00    	je     c000a548 <tcp_slowtmr+0x194>
c000a4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bd:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e4:	0f b6 c0             	movzx  eax,al
c000a4e7:	83 e8 01             	sub    eax,0x1
c000a4ea:	8a 80 50 0a 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf5b0]
c000a4f0:	0f b6 c0             	movzx  eax,al
c000a4f3:	39 c2                	cmp    edx,eax
c000a4f5:	0f 82 65 01 00 00    	jb     c000a660 <tcp_slowtmr+0x2ac>
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a513:	0f b6 c0             	movzx  eax,al
c000a516:	83 f8 06             	cmp    eax,0x6
c000a519:	77 19                	ja     c000a534 <tcp_slowtmr+0x180>
c000a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a525:	83 c0 01             	add    eax,0x1
c000a528:	88 c2                	mov    dl,al
c000a52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52e:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a53b:	e8 e8 63 00 00       	call   c0010928 <tcp_zero_window_probe>
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	e9 18 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a54c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a550:	98                   	cwde   
c000a551:	85 c0                	test   eax,eax
c000a553:	78 13                	js     c000a568 <tcp_slowtmr+0x1b4>
c000a555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a559:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a55d:	83 c0 01             	add    eax,0x1
c000a560:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a564:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a56f:	85 c0                	test   eax,eax
c000a571:	0f 84 e9 00 00 00    	je     c000a660 <tcp_slowtmr+0x2ac>
c000a577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57b:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a57f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a583:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a586:	0f bf d2             	movsx  edx,dx
c000a589:	98                   	cwde   
c000a58a:	39 c2                	cmp    edx,eax
c000a58c:	0f 8c ce 00 00 00    	jl     c000a660 <tcp_slowtmr+0x2ac>
c000a592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a599:	83 f8 02             	cmp    eax,0x2
c000a59c:	74 3a                	je     c000a5d8 <tcp_slowtmr+0x224>
c000a59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a2:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5a5:	98                   	cwde   
c000a5a6:	c1 f8 03             	sar    eax,0x3
c000a5a9:	0f bf d0             	movsx  edx,ax
c000a5ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5b4:	98                   	cwde   
c000a5b5:	01 c2                	add    edx,eax
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5be:	0f b6 c0             	movzx  eax,al
c000a5c1:	8a 80 58 0a 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf5a8]
c000a5c7:	0f b6 c0             	movzx  eax,al
c000a5ca:	88 c1                	mov    cl,al
c000a5cc:	d3 e2                	shl    edx,cl
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5d4:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dc:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e6:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a5e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ed:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a5f1:	0f b7 d8             	movzx  ebx,ax
c000a5f4:	0f b7 ca             	movzx  ecx,dx
c000a5f7:	39 cb                	cmp    ebx,ecx
c000a5f9:	76 05                	jbe    c000a600 <tcp_slowtmr+0x24c>
c000a5fb:	89 d0                	mov    eax,edx
c000a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a600:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a605:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a60a:	d1 e8                	shr    eax,1
c000a60c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a610:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a61b:	0f b7 d0             	movzx  edx,ax
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a625:	0f b7 c0             	movzx  eax,ax
c000a628:	01 c0                	add    eax,eax
c000a62a:	39 c2                	cmp    edx,eax
c000a62c:	7d 12                	jge    c000a640 <tcp_slowtmr+0x28c>
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a635:	d1 e0                	shl    eax,1
c000a637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a63b:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a63f:	90                   	nop
c000a640:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a644:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a64b:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a64f:	83 ec 0c             	sub    esp,0xc
c000a652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a656:	e8 c9 5f 00 00       	call   c0010624 <tcp_rexmit_rto>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	66 90                	xchg   ax,ax
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a667:	83 f8 06             	cmp    eax,0x6
c000a66a:	75 24                	jne    c000a690 <tcp_slowtmr+0x2dc>
c000a66c:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a676:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a679:	29 c2                	sub    edx,eax
c000a67b:	89 d0                	mov    eax,edx
c000a67d:	83 f8 28             	cmp    eax,0x28
c000a680:	76 0e                	jbe    c000a690 <tcp_slowtmr+0x2dc>
c000a682:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a686:	83 c0 01             	add    eax,0x1
c000a689:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a68d:	8d 76 00             	lea    esi,[esi+0x0]
c000a690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a694:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a697:	0f b6 c0             	movzx  eax,al
c000a69a:	83 e0 08             	and    eax,0x8
c000a69d:	0f 84 e1 00 00 00    	je     c000a784 <tcp_slowtmr+0x3d0>
c000a6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6aa:	83 f8 04             	cmp    eax,0x4
c000a6ad:	74 11                	je     c000a6c0 <tcp_slowtmr+0x30c>
c000a6af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b6:	83 f8 07             	cmp    eax,0x7
c000a6b9:	0f 85 c5 00 00 00    	jne    c000a784 <tcp_slowtmr+0x3d0>
c000a6bf:	90                   	nop
c000a6c0:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a6c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6cd:	89 d1                	mov    ecx,edx
c000a6cf:	29 c1                	sub    ecx,eax
c000a6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d5:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a6db:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a6e0:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a6e5:	f7 e2                	mul    edx
c000a6e7:	89 d0                	mov    eax,edx
c000a6e9:	c1 e8 05             	shr    eax,0x5
c000a6ec:	39 c1                	cmp    ecx,eax
c000a6ee:	76 18                	jbe    c000a708 <tcp_slowtmr+0x354>
c000a6f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6f4:	83 c0 01             	add    eax,0x1
c000a6f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6fb:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a6ff:	83 c0 01             	add    eax,0x1
c000a702:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a706:	eb 7c                	jmp    c000a784 <tcp_slowtmr+0x3d0>
c000a708:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a712:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a715:	89 d3                	mov    ebx,edx
c000a717:	29 c3                	sub    ebx,eax
c000a719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a71d:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a727:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a72d:	0f b6 d0             	movzx  edx,al
c000a730:	89 d0                	mov    eax,edx
c000a732:	c1 e0 03             	shl    eax,0x3
c000a735:	01 d0                	add    eax,edx
c000a737:	c1 e0 03             	shl    eax,0x3
c000a73a:	01 d0                	add    eax,edx
c000a73c:	c1 e0 02             	shl    eax,0x2
c000a73f:	01 d0                	add    eax,edx
c000a741:	c1 e0 05             	shl    eax,0x5
c000a744:	29 d0                	sub    eax,edx
c000a746:	c1 e0 03             	shl    eax,0x3
c000a749:	01 c8                	add    eax,ecx
c000a74b:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a750:	f7 e2                	mul    edx
c000a752:	89 d0                	mov    eax,edx
c000a754:	c1 e8 05             	shr    eax,0x5
c000a757:	39 c3                	cmp    ebx,eax
c000a759:	76 29                	jbe    c000a784 <tcp_slowtmr+0x3d0>
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a762:	e8 f9 60 00 00       	call   c0010860 <tcp_keepalive>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76e:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a774:	83 c0 01             	add    eax,0x1
c000a777:	88 c2                	mov    dl,al
c000a779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a77d:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a783:	90                   	nop
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a78e:	85 c0                	test   eax,eax
c000a790:	74 4e                	je     c000a7e0 <tcp_slowtmr+0x42c>
c000a792:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a79f:	89 d1                	mov    ecx,edx
c000a7a1:	29 c1                	sub    ecx,eax
c000a7a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a7:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7aa:	0f bf d0             	movsx  edx,ax
c000a7ad:	89 d0                	mov    eax,edx
c000a7af:	01 c0                	add    eax,eax
c000a7b1:	01 d0                	add    eax,edx
c000a7b3:	01 c0                	add    eax,eax
c000a7b5:	39 c1                	cmp    ecx,eax
c000a7b7:	72 27                	jb     c000a7e0 <tcp_slowtmr+0x42c>
c000a7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7bd:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7c3:	83 ec 0c             	sub    esp,0xc
c000a7c6:	50                   	push   eax
c000a7c7:	e8 e4 f9 ff ff       	call   c000a1b0 <tcp_segs_free>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7e7:	83 f8 03             	cmp    eax,0x3
c000a7ea:	75 24                	jne    c000a810 <tcp_slowtmr+0x45c>
c000a7ec:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7f6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7f9:	29 c2                	sub    edx,eax
c000a7fb:	89 d0                	mov    eax,edx
c000a7fd:	83 f8 28             	cmp    eax,0x28
c000a800:	76 0e                	jbe    c000a810 <tcp_slowtmr+0x45c>
c000a802:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a806:	83 c0 01             	add    eax,0x1
c000a809:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a814:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a817:	83 f8 09             	cmp    eax,0x9
c000a81a:	75 24                	jne    c000a840 <tcp_slowtmr+0x48c>
c000a81c:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a826:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a829:	29 c2                	sub    edx,eax
c000a82b:	89 d0                	mov    eax,edx
c000a82d:	3d f0 00 00 00       	cmp    eax,0xf0
c000a832:	76 0c                	jbe    c000a840 <tcp_slowtmr+0x48c>
c000a834:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a838:	83 c0 01             	add    eax,0x1
c000a83b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a83f:	90                   	nop
c000a840:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a845:	85 c0                	test   eax,eax
c000a847:	0f 84 13 01 00 00    	je     c000a960 <tcp_slowtmr+0x5ac>
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a854:	e8 77 fa ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a861:	74 31                	je     c000a894 <tcp_slowtmr+0x4e0>
c000a863:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a868:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a86c:	75 16                	jne    c000a884 <tcp_slowtmr+0x4d0>
c000a86e:	83 ec 08             	sub    esp,0x8
c000a871:	68 f8 07 03 c0       	push   0xc00307f8
c000a876:	68 66 01 03 c0       	push   0xc0030166
c000a87b:	e8 48 56 01 00       	call   c001fec8 <CPrintf>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	90                   	nop
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a88b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a88f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a892:	eb 2c                	jmp    c000a8c0 <tcp_slowtmr+0x50c>
c000a894:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a899:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a89d:	74 15                	je     c000a8b4 <tcp_slowtmr+0x500>
c000a89f:	83 ec 08             	sub    esp,0x8
c000a8a2:	68 24 08 03 c0       	push   0xc0030824
c000a8a7:	68 66 01 03 c0       	push   0xc0030166
c000a8ac:	e8 17 56 01 00       	call   c001fec8 <CPrintf>
c000a8b1:	83 c4 10             	add    esp,0x10
c000a8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8bb:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000a8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8ca:	85 c0                	test   eax,eax
c000a8cc:	74 1e                	je     c000a8ec <tcp_slowtmr+0x538>
c000a8ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d2:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8dc:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	6a f6                	push   0xfffffff6
c000a8e4:	52                   	push   edx
c000a8e5:	ff d0                	call   eax
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	66 90                	xchg   ax,ax
c000a8ec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a8f1:	85 c0                	test   eax,eax
c000a8f3:	74 3f                	je     c000a934 <tcp_slowtmr+0x580>
c000a8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f9:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a8fd:	0f b7 f0             	movzx  esi,ax
c000a900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a907:	0f b7 d8             	movzx  ebx,ax
c000a90a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90e:	8d 78 04             	lea    edi,[eax+0x4]
c000a911:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a919:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a923:	83 ec 08             	sub    esp,0x8
c000a926:	56                   	push   esi
c000a927:	53                   	push   ebx
c000a928:	57                   	push   edi
c000a929:	51                   	push   ecx
c000a92a:	52                   	push   edx
c000a92b:	50                   	push   eax
c000a92c:	e8 7f 5b 00 00       	call   c00104b0 <tcp_rst>
c000a931:	83 c4 20             	add    esp,0x20
c000a934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a947:	83 ec 08             	sub    esp,0x8
c000a94a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a94e:	6a 02                	push   0x2
c000a950:	e8 e3 d2 ff ff       	call   c0007c38 <memp_free>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	e9 9b 00 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a95d:	8d 76 00             	lea    esi,[esi+0x0]
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a977:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a97a:	83 c0 01             	add    eax,0x1
c000a97d:	88 c2                	mov    dl,al
c000a97f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a983:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a98a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a98d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a991:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a994:	0f b6 d2             	movzx  edx,dl
c000a997:	0f b6 c0             	movzx  eax,al
c000a99a:	39 c2                	cmp    edx,eax
c000a99c:	72 5a                	jb     c000a9f8 <tcp_slowtmr+0x644>
c000a99e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9aa:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9b0:	85 c0                	test   eax,eax
c000a9b2:	74 24                	je     c000a9d8 <tcp_slowtmr+0x624>
c000a9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b8:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9c2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9c5:	83 ec 08             	sub    esp,0x8
c000a9c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9cc:	52                   	push   edx
c000a9cd:	ff d0                	call   eax
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a9d6:	eb 08                	jmp    c000a9e0 <tcp_slowtmr+0x62c>
c000a9d8:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9e0:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	75 0f                	jne    c000a9f8 <tcp_slowtmr+0x644>
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9f0:	e8 2f 56 00 00       	call   c0010024 <tcp_output>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9fd:	0f 85 e1 f9 ff ff    	jne    c000a3e4 <tcp_slowtmr+0x30>
c000aa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa0b:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aa10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa14:	e9 0b 01 00 00       	jmp    c000ab24 <tcp_slowtmr+0x770>
c000aa19:	8d 76 00             	lea    esi,[esi+0x0]
c000aa1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa23:	83 f8 0a             	cmp    eax,0xa
c000aa26:	74 18                	je     c000aa40 <tcp_slowtmr+0x68c>
c000aa28:	83 ec 08             	sub    esp,0x8
c000aa2b:	68 50 08 03 c0       	push   0xc0030850
c000aa30:	68 66 01 03 c0       	push   0xc0030166
c000aa35:	e8 8e 54 01 00       	call   c001fec8 <CPrintf>
c000aa3a:	83 c4 10             	add    esp,0x10
c000aa3d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa40:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa45:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000aa4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa52:	29 c2                	sub    edx,eax
c000aa54:	89 d0                	mov    eax,edx
c000aa56:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa5b:	76 0b                	jbe    c000aa68 <tcp_slowtmr+0x6b4>
c000aa5d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa61:	83 c0 01             	add    eax,0x1
c000aa64:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa68:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa6d:	85 c0                	test   eax,eax
c000aa6f:	0f 84 9b 00 00 00    	je     c000ab10 <tcp_slowtmr+0x75c>
c000aa75:	83 ec 0c             	sub    esp,0xc
c000aa78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7c:	e8 4f f8 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aa89:	74 31                	je     c000aabc <tcp_slowtmr+0x708>
c000aa8b:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aa90:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aa94:	75 16                	jne    c000aaac <tcp_slowtmr+0x6f8>
c000aa96:	83 ec 08             	sub    esp,0x8
c000aa99:	68 80 08 03 c0       	push   0xc0030880
c000aa9e:	68 66 01 03 c0       	push   0xc0030166
c000aaa3:	e8 20 54 01 00       	call   c001fec8 <CPrintf>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	90                   	nop
c000aaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aab0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aab7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaba:	eb 2c                	jmp    c000aae8 <tcp_slowtmr+0x734>
c000aabc:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aac1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac5:	74 15                	je     c000aadc <tcp_slowtmr+0x728>
c000aac7:	83 ec 08             	sub    esp,0x8
c000aaca:	68 a8 08 03 c0       	push   0xc00308a8
c000aacf:	68 66 01 03 c0       	push   0xc0030166
c000aad4:	e8 ef 53 01 00       	call   c001fec8 <CPrintf>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aae0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aae3:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000aae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab02:	6a 02                	push   0x2
c000ab04:	e8 2f d1 ff ff       	call   c0007c38 <memp_free>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	eb 16                	jmp    c000ab24 <tcp_slowtmr+0x770>
c000ab0e:	66 90                	xchg   ax,ax
c000ab10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab23:	90                   	nop
c000ab24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab29:	0f 85 ed fe ff ff    	jne    c000aa1c <tcp_slowtmr+0x668>
c000ab2f:	90                   	nop
c000ab30:	83 c4 20             	add    esp,0x20
c000ab33:	5b                   	pop    ebx
c000ab34:	5e                   	pop    esi
c000ab35:	5f                   	pop    edi
c000ab36:	c3                   	ret    
c000ab37:	90                   	nop

c000ab38 <tcp_pcb_remove>:
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab41:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab45:	75 11                	jne    c000ab58 <tcp_pcb_remove+0x20>
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab4d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	89 10                	mov    DWORD PTR [eax],edx
c000ab56:	eb 4c                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab5e:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ab63:	eb 33                	jmp    c000ab98 <tcp_pcb_remove+0x60>
c000ab65:	8d 76 00             	lea    esi,[esi+0x0]
c000ab68:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab70:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab74:	75 12                	jne    c000ab88 <tcp_pcb_remove+0x50>
c000ab76:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab85:	eb 1d                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab87:	90                   	nop
c000ab88:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab90:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab9d:	85 c0                	test   eax,eax
c000ab9f:	75 c7                	jne    c000ab68 <tcp_pcb_remove+0x30>
c000aba1:	8d 76 00             	lea    esi,[esi+0x0]
c000aba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abaf:	83 ec 0c             	sub    esp,0xc
c000abb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abb6:	e8 15 f7 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abc5:	83 f8 0a             	cmp    eax,0xa
c000abc8:	74 3e                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abd1:	83 f8 01             	cmp    eax,0x1
c000abd4:	74 32                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abdd:	0f b6 c0             	movzx  eax,al
c000abe0:	83 e0 01             	and    eax,0x1
c000abe3:	74 23                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abec:	83 c8 02             	or     eax,0x2
c000abef:	88 c2                	mov    dl,al
c000abf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abf5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000abf8:	83 ec 0c             	sub    esp,0xc
c000abfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abff:	e8 20 54 00 00       	call   c0010024 <tcp_output>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac0f:	83 f8 01             	cmp    eax,0x1
c000ac12:	74 64                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac18:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac1b:	85 c0                	test   eax,eax
c000ac1d:	74 15                	je     c000ac34 <tcp_pcb_remove+0xfc>
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	68 4e 09 03 c0       	push   0xc003094e
c000ac27:	68 66 01 03 c0       	push   0xc0030166
c000ac2c:	e8 97 52 01 00       	call   c001fec8 <CPrintf>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac3b:	85 c0                	test   eax,eax
c000ac3d:	74 15                	je     c000ac54 <tcp_pcb_remove+0x11c>
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	68 66 09 03 c0       	push   0xc0030966
c000ac47:	68 66 01 03 c0       	push   0xc0030166
c000ac4c:	e8 77 52 01 00       	call   c001fec8 <CPrintf>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac58:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac5e:	85 c0                	test   eax,eax
c000ac60:	74 16                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac62:	83 ec 08             	sub    esp,0x8
c000ac65:	68 7f 09 03 c0       	push   0xc003097f
c000ac6a:	68 66 01 03 c0       	push   0xc0030166
c000ac6f:	e8 54 52 01 00       	call   c001fec8 <CPrintf>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac7c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ac83:	90                   	nop
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <tcp_close_shutdown>:
c000ac88:	57                   	push   edi
c000ac89:	56                   	push   esi
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 20             	sub    esp,0x20
c000ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ac96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ac9b:	85 c0                	test   eax,eax
c000ac9d:	0f 84 41 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000aca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acaa:	83 f8 01             	cmp    eax,0x1
c000acad:	0f 84 31 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acb7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	75 17                	jne    c000acd8 <tcp_close_shutdown+0x50>
c000acc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acc8:	0f b7 c0             	movzx  eax,ax
c000accb:	3d 60 08 00 00       	cmp    eax,0x860
c000acd0:	0f 84 0e 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acd6:	66 90                	xchg   ax,ax
c000acd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acdc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000acdf:	0f b6 c0             	movzx  eax,al
c000ace2:	83 e0 10             	and    eax,0x10
c000ace5:	75 15                	jne    c000acfc <tcp_close_shutdown+0x74>
c000ace7:	83 ec 08             	sub    esp,0x8
c000acea:	68 96 09 03 c0       	push   0xc0030996
c000acef:	68 66 01 03 c0       	push   0xc0030166
c000acf4:	e8 cf 51 01 00       	call   c001fec8 <CPrintf>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad00:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad04:	0f b7 f0             	movzx  esi,ax
c000ad07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad0e:	0f b7 d8             	movzx  ebx,ax
c000ad11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad15:	8d 78 04             	lea    edi,[eax+0x4]
c000ad18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad20:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad27:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad2a:	83 ec 08             	sub    esp,0x8
c000ad2d:	56                   	push   esi
c000ad2e:	53                   	push   ebx
c000ad2f:	57                   	push   edi
c000ad30:	51                   	push   ecx
c000ad31:	52                   	push   edx
c000ad32:	50                   	push   eax
c000ad33:	e8 78 57 00 00       	call   c00104b0 <tcp_rst>
c000ad38:	83 c4 20             	add    esp,0x20
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad42:	e8 89 f5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad4f:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad53:	75 0f                	jne    c000ad64 <tcp_close_shutdown+0xdc>
c000ad55:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad5d:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000ad62:	eb 48                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad64:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad69:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ad6e:	eb 30                	jmp    c000ada0 <tcp_close_shutdown+0x118>
c000ad70:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ad75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad78:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7c:	75 12                	jne    c000ad90 <tcp_close_shutdown+0x108>
c000ad7e:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ad83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ad87:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ad8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad8d:	eb 1d                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad8f:	90                   	nop
c000ad90:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ad95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad98:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ada0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ada5:	85 c0                	test   eax,eax
c000ada7:	75 c7                	jne    c000ad70 <tcp_close_shutdown+0xe8>
c000ada9:	8d 76 00             	lea    esi,[esi+0x0]
c000adac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adb0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000adb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adbb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adc2:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000adc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adcc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add3:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000add8:	e8 d7 5e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000addd:	b0 00                	mov    al,0x0
c000addf:	e9 f4 01 00 00       	jmp    c000afd8 <tcp_close_shutdown+0x350>
c000ade4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000adeb:	83 f8 07             	cmp    eax,0x7
c000adee:	0f 87 a4 01 00 00    	ja     c000af98 <tcp_close_shutdown+0x310>
c000adf4:	8b 04 85 20 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf5e0]
c000adfb:	ff e0                	jmp    eax
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae0c:	0f b7 c0             	movzx  eax,ax
c000ae0f:	85 c0                	test   eax,eax
c000ae11:	74 71                	je     c000ae84 <tcp_close_shutdown+0x1fc>
c000ae13:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae1c:	75 12                	jne    c000ae30 <tcp_close_shutdown+0x1a8>
c000ae1e:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae26:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000ae2b:	eb 4b                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae35:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ae3a:	eb 30                	jmp    c000ae6c <tcp_close_shutdown+0x1e4>
c000ae3c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1d4>
c000ae4a:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae53:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae59:	eb 1d                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae5b:	90                   	nop
c000ae5c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae64:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ae69:	8d 76 00             	lea    esi,[esi+0x0]
c000ae6c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae71:	85 c0                	test   eax,eax
c000ae73:	75 c7                	jne    c000ae3c <tcp_close_shutdown+0x1b4>
c000ae75:	8d 76 00             	lea    esi,[esi+0x0]
c000ae78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae7c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ae83:	90                   	nop
c000ae84:	83 ec 08             	sub    esp,0x8
c000ae87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ae8b:	6a 02                	push   0x2
c000ae8d:	e8 a6 cd ff ff       	call   c0007c38 <memp_free>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae9d:	e9 12 01 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb0:	68 78 78 03 c0       	push   0xc0037878
c000aeb5:	e8 7e fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	83 ec 08             	sub    esp,0x8
c000aec0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aec4:	6a 03                	push   0x3
c000aec6:	e8 6d cd ff ff       	call   c0007c38 <memp_free>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aed6:	e9 d9 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aedb:	90                   	nop
c000aedc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aee1:	83 ec 08             	sub    esp,0x8
c000aee4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aee8:	68 70 78 03 c0       	push   0xc0037870
c000aeed:	e8 46 fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 ec 08             	sub    esp,0x8
c000aef8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aefc:	6a 02                	push   0x2
c000aefe:	e8 35 cd ff ff       	call   c0007c38 <memp_free>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af0e:	e9 a1 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000af13:	90                   	nop
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af1b:	e8 54 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af27:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af2c:	85 c0                	test   eax,eax
c000af2e:	75 78                	jne    c000afa8 <tcp_close_shutdown+0x320>
c000af30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af34:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af3b:	eb 6b                	jmp    c000afa8 <tcp_close_shutdown+0x320>
c000af3d:	8d 76 00             	lea    esi,[esi+0x0]
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 28 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 50                	jne    c000afac <tcp_close_shutdown+0x324>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 43                	jmp    c000afac <tcp_close_shutdown+0x324>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 fc 4c 00 00       	call   c000fc74 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 28                	jne    c000afb0 <tcp_close_shutdown+0x328>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000af93:	eb 1b                	jmp    c000afb0 <tcp_close_shutdown+0x328>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af9d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afa5:	eb 0d                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afa7:	90                   	nop
c000afa8:	90                   	nop
c000afa9:	eb 09                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afab:	90                   	nop
c000afac:	90                   	nop
c000afad:	eb 05                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afaf:	90                   	nop
c000afb0:	90                   	nop
c000afb1:	8d 76 00             	lea    esi,[esi+0x0]
c000afb4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afb9:	74 19                	je     c000afd4 <tcp_close_shutdown+0x34c>
c000afbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afc0:	85 c0                	test   eax,eax
c000afc2:	75 10                	jne    c000afd4 <tcp_close_shutdown+0x34c>
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afcb:	e8 54 50 00 00       	call   c0010024 <tcp_output>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	90                   	nop
c000afd4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	5b                   	pop    ebx
c000afdc:	5e                   	pop    esi
c000afdd:	5f                   	pop    edi
c000afde:	c3                   	ret    
c000afdf:	90                   	nop

c000afe0 <tcp_close>:
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afea:	83 f8 01             	cmp    eax,0x1
c000afed:	74 15                	je     c000b004 <tcp_close+0x24>
c000afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aff6:	83 c8 10             	or     eax,0x10
c000aff9:	88 c2                	mov    dl,al
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b002:	66 90                	xchg   ax,ax
c000b004:	83 ec 08             	sub    esp,0x8
c000b007:	6a 01                	push   0x1
c000b009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00d:	e8 76 fc ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	83 c4 0c             	add    esp,0xc
c000b018:	c3                   	ret    
c000b019:	8d 76 00             	lea    esi,[esi+0x0]

c000b01c <tcp_recv_null>:
c000b01c:	83 ec 1c             	sub    esp,0x1c
c000b01f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b027:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b02c:	74 2e                	je     c000b05c <tcp_recv_null+0x40>
c000b02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b035:	0f b7 c0             	movzx  eax,ax
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	50                   	push   eax
c000b03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b040:	e8 af ee ff ff       	call   c0009ef4 <tcp_recved>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b04f:	e8 a0 d4 ff ff       	call   c00084f4 <pbuf_free>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 1f                	jmp    c000b078 <tcp_recv_null+0x5c>
c000b059:	8d 76 00             	lea    esi,[esi+0x0]
c000b05c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b061:	85 c0                	test   eax,eax
c000b063:	75 13                	jne    c000b078 <tcp_recv_null+0x5c>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 6f ff ff ff       	call   c000afe0 <tcp_close>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	eb 06                	jmp    c000b07c <tcp_recv_null+0x60>
c000b076:	66 90                	xchg   ax,ax
c000b078:	b0 00                	mov    al,0x0
c000b07a:	66 90                	xchg   ax,ax
c000b07c:	83 c4 1c             	add    esp,0x1c
c000b07f:	c3                   	ret    

c000b080 <tcp_fasttmr>:
c000b080:	83 ec 1c             	sub    esp,0x1c
c000b083:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000b088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b08c:	e9 03 01 00 00       	jmp    c000b194 <tcp_fasttmr+0x114>
c000b091:	8d 76 00             	lea    esi,[esi+0x0]
c000b094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b098:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b09b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0a9:	85 c0                	test   eax,eax
c000b0ab:	0f 84 8f 00 00 00    	je     c000b140 <tcp_fasttmr+0xc0>
c000b0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0b5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0bb:	85 c0                	test   eax,eax
c000b0bd:	74 31                	je     c000b0f0 <tcp_fasttmr+0x70>
c000b0bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c3:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0cd:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0d7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b0da:	6a 00                	push   0x0
c000b0dc:	51                   	push   ecx
c000b0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e1:	52                   	push   edx
c000b0e2:	ff d0                	call   eax
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b0eb:	eb 23                	jmp    c000b110 <tcp_fasttmr+0x90>
c000b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0f4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0fa:	6a 00                	push   0x0
c000b0fc:	50                   	push   eax
c000b0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b101:	6a 00                	push   0x0
c000b103:	e8 14 ff ff ff       	call   c000b01c <tcp_recv_null>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b10f:	90                   	nop
c000b110:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b115:	85 c0                	test   eax,eax
c000b117:	75 13                	jne    c000b12c <tcp_fasttmr+0xac>
c000b119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b11d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b127:	eb 17                	jmp    c000b140 <tcp_fasttmr+0xc0>
c000b129:	8d 76 00             	lea    esi,[esi+0x0]
c000b12c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b131:	83 f8 f6             	cmp    eax,0xfffffff6
c000b134:	75 0a                	jne    c000b140 <tcp_fasttmr+0xc0>
c000b136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b13e:	66 90                	xchg   ax,ax
c000b140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b145:	74 45                	je     c000b18c <tcp_fasttmr+0x10c>
c000b147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b14b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b14e:	0f b6 c0             	movzx  eax,al
c000b151:	83 e0 01             	and    eax,0x1
c000b154:	74 36                	je     c000b18c <tcp_fasttmr+0x10c>
c000b156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b15a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b15d:	83 c8 02             	or     eax,0x2
c000b160:	88 c2                	mov    dl,al
c000b162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b166:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b169:	83 ec 0c             	sub    esp,0xc
c000b16c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b170:	e8 af 4e 00 00       	call   c0010024 <tcp_output>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b17c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17f:	83 e0 fc             	and    eax,0xfffffffc
c000b182:	88 c2                	mov    dl,al
c000b184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b188:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b18b:	90                   	nop
c000b18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b199:	0f 85 f5 fe ff ff    	jne    c000b094 <tcp_fasttmr+0x14>
c000b19f:	90                   	nop
c000b1a0:	83 c4 1c             	add    esp,0x1c
c000b1a3:	c3                   	ret    

c000b1a4 <tcp_tmr>:
c000b1a4:	83 ec 0c             	sub    esp,0xc
c000b1a7:	e8 d4 fe ff ff       	call   c000b080 <tcp_fasttmr>
c000b1ac:	a0 a0 b8 03 c0       	mov    al,ds:0xc003b8a0
c000b1b1:	83 c0 01             	add    eax,0x1
c000b1b4:	a2 a0 b8 03 c0       	mov    ds:0xc003b8a0,al
c000b1b9:	a0 a0 b8 03 c0       	mov    al,ds:0xc003b8a0
c000b1be:	0f b6 c0             	movzx  eax,al
c000b1c1:	83 e0 01             	and    eax,0x1
c000b1c4:	74 06                	je     c000b1cc <tcp_tmr+0x28>
c000b1c6:	e8 e9 f1 ff ff       	call   c000a3b4 <tcp_slowtmr>
c000b1cb:	90                   	nop
c000b1cc:	90                   	nop
c000b1cd:	83 c4 0c             	add    esp,0xc
c000b1d0:	c3                   	ret    
c000b1d1:	8d 76 00             	lea    esi,[esi+0x0]

c000b1d4 <tcp_shutdown>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b1de:	83 f8 01             	cmp    eax,0x1
c000b1e1:	75 09                	jne    c000b1ec <tcp_shutdown+0x18>
c000b1e3:	b0 f3                	mov    al,0xf3
c000b1e5:	e9 92 00 00 00       	jmp    c000b27c <tcp_shutdown+0xa8>
c000b1ea:	66 90                	xchg   ax,ax
c000b1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b1f1:	74 49                	je     c000b23c <tcp_shutdown+0x68>
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b1fd:	85 c0                	test   eax,eax
c000b1ff:	74 27                	je     c000b228 <tcp_shutdown+0x54>
c000b201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b205:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	50                   	push   eax
c000b20f:	e8 e0 d2 ff ff       	call   c00084f4 <pbuf_free>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21b:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b225:	8d 76 00             	lea    esi,[esi+0x0]
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b22f:	83 c8 10             	or     eax,0x10
c000b232:	88 c2                	mov    dl,al
c000b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b238:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b23b:	90                   	nop
c000b23c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b241:	74 2d                	je     c000b270 <tcp_shutdown+0x9c>
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b24a:	83 f8 03             	cmp    eax,0x3
c000b24d:	72 25                	jb     c000b274 <tcp_shutdown+0xa0>
c000b24f:	83 f8 04             	cmp    eax,0x4
c000b252:	76 08                	jbe    c000b25c <tcp_shutdown+0x88>
c000b254:	83 f8 07             	cmp    eax,0x7
c000b257:	75 1b                	jne    c000b274 <tcp_shutdown+0xa0>
c000b259:	8d 76 00             	lea    esi,[esi+0x0]
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	6a 00                	push   0x0
c000b261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b265:	e8 1e fa ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	eb 0d                	jmp    c000b27c <tcp_shutdown+0xa8>
c000b26f:	90                   	nop
c000b270:	90                   	nop
c000b271:	eb 05                	jmp    c000b278 <tcp_shutdown+0xa4>
c000b273:	90                   	nop
c000b274:	90                   	nop
c000b275:	8d 76 00             	lea    esi,[esi+0x0]
c000b278:	b0 00                	mov    al,0x0
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 c4 0c             	add    esp,0xc
c000b27f:	c3                   	ret    

c000b280 <tcp_abandon>:
c000b280:	83 ec 2c             	sub    esp,0x2c
c000b283:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b287:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b28a:	83 f8 01             	cmp    eax,0x1
c000b28d:	75 15                	jne    c000b2a4 <tcp_abandon+0x24>
c000b28f:	83 ec 08             	sub    esp,0x8
c000b292:	68 d0 08 03 c0       	push   0xc00308d0
c000b297:	68 66 01 03 c0       	push   0xc0030166
c000b29c:	e8 27 4c 01 00       	call   c001fec8 <CPrintf>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2ab:	83 f8 0a             	cmp    eax,0xa
c000b2ae:	75 2c                	jne    c000b2dc <tcp_abandon+0x5c>
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2b7:	68 84 78 03 c0       	push   0xc0037884
c000b2bc:	e8 77 f8 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 ec 08             	sub    esp,0x8
c000b2c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2cb:	6a 02                	push   0x2
c000b2cd:	e8 66 c9 ff ff       	call   c0007c38 <memp_free>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	e9 32 01 00 00       	jmp    c000b40c <tcp_abandon+0x18c>
c000b2da:	66 90                	xchg   ax,ax
c000b2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2e0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b2e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b2ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b30e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b31b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b324:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b332:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b339:	83 ec 08             	sub    esp,0x8
c000b33c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b340:	68 70 78 03 c0       	push   0xc0037870
c000b345:	e8 ee f7 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b351:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b354:	85 c0                	test   eax,eax
c000b356:	74 14                	je     c000b36c <tcp_abandon+0xec>
c000b358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	50                   	push   eax
c000b363:	e8 48 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	90                   	nop
c000b36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b370:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b373:	85 c0                	test   eax,eax
c000b375:	74 15                	je     c000b38c <tcp_abandon+0x10c>
c000b377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	50                   	push   eax
c000b382:	e8 29 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	66 90                	xchg   ax,ax
c000b38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b390:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b396:	85 c0                	test   eax,eax
c000b398:	74 16                	je     c000b3b0 <tcp_abandon+0x130>
c000b39a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 03 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	83 ec 08             	sub    esp,0x8
c000b3b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3b7:	6a 02                	push   0x2
c000b3b9:	e8 7a c8 ff ff       	call   c0007c38 <memp_free>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3c6:	74 14                	je     c000b3dc <tcp_abandon+0x15c>
c000b3c8:	83 ec 08             	sub    esp,0x8
c000b3cb:	6a f6                	push   0xfffffff6
c000b3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d5:	ff d0                	call   eax
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	66 90                	xchg   ax,ax
c000b3dc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b3e1:	74 29                	je     c000b40c <tcp_abandon+0x18c>
c000b3e3:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b3e8:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b3ed:	83 ec 08             	sub    esp,0x8
c000b3f0:	52                   	push   edx
c000b3f1:	50                   	push   eax
c000b3f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3f6:	50                   	push   eax
c000b3f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3fb:	50                   	push   eax
c000b3fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b400:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b404:	e8 a7 50 00 00       	call   c00104b0 <tcp_rst>
c000b409:	83 c4 20             	add    esp,0x20
c000b40c:	90                   	nop
c000b40d:	83 c4 2c             	add    esp,0x2c
c000b410:	c3                   	ret    
c000b411:	8d 76 00             	lea    esi,[esi+0x0]

c000b414 <tcp_abort>:
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	83 ec 08             	sub    esp,0x8
c000b41a:	6a 01                	push   0x1
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 5b fe ff ff       	call   c000b280 <tcp_abandon>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	90                   	nop
c000b429:	83 c4 0c             	add    esp,0xc
c000b42c:	c3                   	ret    
c000b42d:	8d 76 00             	lea    esi,[esi+0x0]

c000b430 <tcp_kill_prio>:
c000b430:	83 ec 2c             	sub    esp,0x2c
c000b433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b43b:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b440:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b448:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b450:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000b455:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b459:	eb 75                	jmp    c000b4d0 <tcp_kill_prio+0xa0>
c000b45b:	90                   	nop
c000b45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b460:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b463:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b468:	0f b6 c0             	movzx  eax,al
c000b46b:	39 c2                	cmp    edx,eax
c000b46d:	72 55                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b473:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b476:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b47b:	0f b6 c0             	movzx  eax,al
c000b47e:	39 c2                	cmp    edx,eax
c000b480:	72 42                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b482:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b48f:	29 c2                	sub    edx,eax
c000b491:	89 d0                	mov    eax,edx
c000b493:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b497:	77 2b                	ja     c000b4c4 <tcp_kill_prio+0x94>
c000b499:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4a6:	29 c2                	sub    edx,eax
c000b4a8:	89 d0                	mov    eax,edx
c000b4aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4bd:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4cf:	90                   	nop
c000b4d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4d5:	75 85                	jne    c000b45c <tcp_kill_prio+0x2c>
c000b4d7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b4dc:	74 12                	je     c000b4f0 <tcp_kill_prio+0xc0>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b4e5:	e8 2a ff ff ff       	call   c000b414 <tcp_abort>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	90                   	nop
c000b4f1:	83 c4 2c             	add    esp,0x2c
c000b4f4:	c3                   	ret    
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b4f8 <tcp_kill_timewait>:
c000b4f8:	83 ec 1c             	sub    esp,0x1c
c000b4fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b50b:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000b510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b514:	eb 42                	jmp    c000b558 <tcp_kill_timewait+0x60>
c000b516:	66 90                	xchg   ax,ax
c000b518:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b522:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b525:	29 c2                	sub    edx,eax
c000b527:	89 d0                	mov    eax,edx
c000b529:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b52d:	77 1d                	ja     c000b54c <tcp_kill_timewait+0x54>
c000b52f:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b539:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b53c:	29 c2                	sub    edx,eax
c000b53e:	89 d0                	mov    eax,edx
c000b540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b550:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b557:	90                   	nop
c000b558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b55d:	75 b9                	jne    c000b518 <tcp_kill_timewait+0x20>
c000b55f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b564:	74 12                	je     c000b578 <tcp_kill_timewait+0x80>
c000b566:	83 ec 0c             	sub    esp,0xc
c000b569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56d:	e8 a2 fe ff ff       	call   c000b414 <tcp_abort>
c000b572:	83 c4 10             	add    esp,0x10
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	90                   	nop
c000b579:	83 c4 1c             	add    esp,0x1c
c000b57c:	c3                   	ret    
c000b57d:	8d 76 00             	lea    esi,[esi+0x0]

c000b580 <tcp_next_iss>:
c000b580:	8b 15 bc 43 03 c0    	mov    edx,DWORD PTR ds:0xc00343bc
c000b586:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000b58b:	01 d0                	add    eax,edx
c000b58d:	a3 bc 43 03 c0       	mov    ds:0xc00343bc,eax
c000b592:	a1 bc 43 03 c0       	mov    eax,ds:0xc00343bc
c000b597:	c3                   	ret    

c000b598 <tcp_alloc>:
c000b598:	83 ec 2c             	sub    esp,0x2c
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	6a 02                	push   0x2
c000b5a8:	e8 5f c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5b9:	75 6d                	jne    c000b628 <tcp_alloc+0x90>
c000b5bb:	e8 38 ff ff ff       	call   c000b4f8 <tcp_kill_timewait>
c000b5c0:	83 ec 0c             	sub    esp,0xc
c000b5c3:	6a 02                	push   0x2
c000b5c5:	e8 42 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5d6:	75 38                	jne    c000b610 <tcp_alloc+0x78>
c000b5d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b5dd:	83 ec 0c             	sub    esp,0xc
c000b5e0:	50                   	push   eax
c000b5e1:	e8 4a fe ff ff       	call   c000b430 <tcp_kill_prio>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	6a 02                	push   0x2
c000b5ee:	e8 19 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5ff:	74 0f                	je     c000b610 <tcp_alloc+0x78>
c000b601:	66 a1 ec 77 03 c0    	mov    ax,ds:0xc00377ec
c000b607:	83 e8 01             	sub    eax,0x1
c000b60a:	66 a3 ec 77 03 c0    	mov    ds:0xc00377ec,ax
c000b610:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b615:	74 11                	je     c000b628 <tcp_alloc+0x90>
c000b617:	66 a1 ec 77 03 c0    	mov    ax,ds:0xc00377ec
c000b61d:	83 e8 01             	sub    eax,0x1
c000b620:	66 a3 ec 77 03 c0    	mov    ds:0xc00377ec,ax
c000b626:	66 90                	xchg   ax,ax
c000b628:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62d:	0f 84 09 01 00 00    	je     c000b73c <tcp_alloc+0x1a4>
c000b633:	83 ec 04             	sub    esp,0x4
c000b636:	68 a8 00 00 00       	push   0xa8
c000b63b:	6a 00                	push   0x0
c000b63d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b641:	e8 aa 4e ff ff       	call   c00004f0 <memset>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b64d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b651:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b658:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b65e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b662:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b66c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b676:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b67c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b680:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b688:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b68c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b690:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b69a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a4:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ae:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b8:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c2:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6c8:	e8 b3 fe ff ff       	call   c000b580 <tcp_next_iss>
c000b6cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6d9:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b6dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6e4:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6ef:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6fa:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6fd:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b707:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b70a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b716:	c7 80 8c 00 00 00 1c b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b01c
c000b720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b724:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b72e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b732:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b739:	8d 76 00             	lea    esi,[esi+0x0]
c000b73c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b740:	83 c4 2c             	add    esp,0x2c
c000b743:	c3                   	ret    

c000b744 <tcp_new>:
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 40                	push   0x40
c000b74c:	e8 47 fe ff ff       	call   c000b598 <tcp_alloc>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <tcp_eff_send_mss>:
c000b758:	53                   	push   ebx
c000b759:	83 ec 28             	sub    esp,0x28
c000b75c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b760:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b76c:	e8 2b 80 00 00       	call   c001379c <ip_route>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b778:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b77d:	74 3d                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b786:	0f b7 c0             	movzx  eax,ax
c000b789:	85 c0                	test   eax,eax
c000b78b:	74 2f                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b791:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b794:	83 e8 28             	sub    eax,0x28
c000b797:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b79c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7a0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7a5:	0f b7 d8             	movzx  ebx,ax
c000b7a8:	0f b7 ca             	movzx  ecx,dx
c000b7ab:	39 cb                	cmp    ebx,ecx
c000b7ad:	76 05                	jbe    c000b7b4 <tcp_eff_send_mss+0x5c>
c000b7af:	89 d0                	mov    eax,edx
c000b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b4:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7c0:	83 c4 28             	add    esp,0x28
c000b7c3:	5b                   	pop    ebx
c000b7c4:	c3                   	ret    
c000b7c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b7c8 <tcp_connect>:
c000b7c8:	83 ec 2c             	sub    esp,0x2c
c000b7cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b7db:	85 c0                	test   eax,eax
c000b7dd:	74 1d                	je     c000b7fc <tcp_connect+0x34>
c000b7df:	83 ec 08             	sub    esp,0x8
c000b7e2:	68 04 09 03 c0       	push   0xc0030904
c000b7e7:	68 66 01 03 c0       	push   0xc0030166
c000b7ec:	e8 d7 46 01 00       	call   c001fec8 <CPrintf>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	b0 f7                	mov    al,0xf7
c000b7f6:	e9 39 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b7fb:	90                   	nop
c000b7fc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b801:	74 25                	je     c000b828 <tcp_connect+0x60>
c000b803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b807:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b80b:	8b 12                	mov    edx,DWORD PTR [edx]
c000b80d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b810:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b818:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b81c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b820:	85 c0                	test   eax,eax
c000b822:	74 18                	je     c000b83c <tcp_connect+0x74>
c000b824:	eb 0a                	jmp    c000b830 <tcp_connect+0x68>
c000b826:	66 90                	xchg   ax,ax
c000b828:	b0 fa                	mov    al,0xfa
c000b82a:	e9 05 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b82f:	90                   	nop
c000b830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b834:	8b 00                	mov    eax,DWORD PTR [eax]
c000b836:	85 c0                	test   eax,eax
c000b838:	75 3a                	jne    c000b874 <tcp_connect+0xac>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	83 c0 04             	add    eax,0x4
c000b843:	83 ec 0c             	sub    esp,0xc
c000b846:	50                   	push   eax
c000b847:	e8 50 7f 00 00       	call   c001379c <ip_route>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b853:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b858:	75 0a                	jne    c000b864 <tcp_connect+0x9c>
c000b85a:	b0 fc                	mov    al,0xfc
c000b85c:	e9 d3 01 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b868:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86f:	89 10                	mov    DWORD PTR [eax],edx
c000b871:	8d 76 00             	lea    esi,[esi+0x0]
c000b874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b887:	0f b7 c0             	movzx  eax,ax
c000b88a:	85 c0                	test   eax,eax
c000b88c:	75 0e                	jne    c000b89c <tcp_connect+0xd4>
c000b88e:	e8 19 e7 ff ff       	call   c0009fac <tcp_new_port>
c000b893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b897:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b89b:	90                   	nop
c000b89c:	e8 df fc ff ff       	call   c000b580 <tcp_next_iss>
c000b8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8b8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8bf:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8cd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d4:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8db:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e5:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8ef:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b8f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8fd:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b907:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b914:	0f b7 c0             	movzx  eax,ax
c000b917:	83 ec 08             	sub    esp,0x8
c000b91a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b91e:	50                   	push   eax
c000b91f:	e8 34 fe ff ff       	call   c000b758 <tcp_eff_send_mss>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b92b:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b933:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b93d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b940:	89 c2                	mov    edx,eax
c000b942:	c1 e2 02             	shl    edx,0x2
c000b945:	01 d0                	add    eax,edx
c000b947:	d1 e0                	shl    eax,1
c000b949:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b94d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b955:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b959:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b95f:	83 ec 08             	sub    esp,0x8
c000b962:	6a 02                	push   0x2
c000b964:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b968:	e8 1b 40 00 00       	call   c000f988 <tcp_enqueue_flags>
c000b96d:	83 c4 10             	add    esp,0x10
c000b970:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b974:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b979:	85 c0                	test   eax,eax
c000b97b:	0f 85 af 00 00 00    	jne    c000ba30 <tcp_connect+0x268>
c000b981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b985:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b98c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b991:	85 c0                	test   eax,eax
c000b993:	74 6f                	je     c000ba04 <tcp_connect+0x23c>
c000b995:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b99a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b99e:	75 10                	jne    c000b9b0 <tcp_connect+0x1e8>
c000b9a0:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9a8:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000b9ad:	eb 49                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9af:	90                   	nop
c000b9b0:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9b5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000b9ba:	eb 30                	jmp    c000b9ec <tcp_connect+0x224>
c000b9bc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9c8:	75 12                	jne    c000b9dc <tcp_connect+0x214>
c000b9ca:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b9d3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b9d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b9d9:	eb 1d                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9db:	90                   	nop
c000b9dc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9e4:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9f1:	85 c0                	test   eax,eax
c000b9f3:	75 c7                	jne    c000b9bc <tcp_connect+0x1f4>
c000b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba03:	90                   	nop
c000ba04:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000ba0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba15:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000ba1a:	e8 95 52 00 00       	call   c0010cb4 <tcp_timer_needed>
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba26:	e8 f9 45 00 00       	call   c0010024 <tcp_output>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	66 90                	xchg   ax,ax
c000ba30:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba34:	83 c4 2c             	add    esp,0x2c
c000ba37:	c3                   	ret    

c000ba38 <tcp_debug_state_str>:
c000ba38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3c:	8b 04 85 80 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf580]
c000ba43:	c3                   	ret    

c000ba44 <tcp_timewait_input>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	83 e0 04             	and    eax,0x4
c000ba53:	74 07                	je     c000ba5c <tcp_timewait_input+0x18>
c000ba55:	b0 00                	mov    al,0x0
c000ba57:	e9 e8 00 00 00       	jmp    c000bb44 <tcp_timewait_input+0x100>
c000ba5c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	83 e0 02             	and    eax,0x2
c000ba67:	0f 84 83 00 00 00    	je     c000baf0 <tcp_timewait_input+0xac>
c000ba6d:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ba7a:	29 c2                	sub    edx,eax
c000ba7c:	89 d0                	mov    eax,edx
c000ba7e:	0f 88 88 00 00 00    	js     c000bb0c <tcp_timewait_input+0xc8>
c000ba84:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ba98:	0f b7 c0             	movzx  eax,ax
c000ba9b:	01 c8                	add    eax,ecx
c000ba9d:	29 c2                	sub    edx,eax
c000ba9f:	89 d0                	mov    eax,edx
c000baa1:	85 c0                	test   eax,eax
c000baa3:	7f 67                	jg     c000bb0c <tcp_timewait_input+0xc8>
c000baa5:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000baaa:	66 8b 00             	mov    ax,WORD PTR [eax]
c000baad:	0f b7 c8             	movzx  ecx,ax
c000bab0:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bab5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000bab9:	0f b7 d0             	movzx  edx,ax
c000babc:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bac2:	0f b7 d8             	movzx  ebx,ax
c000bac5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000baca:	01 c3                	add    ebx,eax
c000bacc:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bad1:	83 ec 08             	sub    esp,0x8
c000bad4:	51                   	push   ecx
c000bad5:	52                   	push   edx
c000bad6:	68 90 78 03 c0       	push   0xc0037890
c000badb:	68 98 78 03 c0       	push   0xc0037898
c000bae0:	53                   	push   ebx
c000bae1:	50                   	push   eax
c000bae2:	e8 c9 49 00 00       	call   c00104b0 <tcp_rst>
c000bae7:	83 c4 20             	add    esp,0x20
c000baea:	b0 00                	mov    al,0x0
c000baec:	eb 56                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000baee:	66 90                	xchg   ax,ax
c000baf0:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000baf5:	0f b6 c0             	movzx  eax,al
c000baf8:	83 e0 01             	and    eax,0x1
c000bafb:	74 0f                	je     c000bb0c <tcp_timewait_input+0xc8>
c000bafd:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb0a:	66 90                	xchg   ax,ax
c000bb0c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bb12:	0f b7 c0             	movzx  eax,ax
c000bb15:	85 c0                	test   eax,eax
c000bb17:	74 27                	je     c000bb40 <tcp_timewait_input+0xfc>
c000bb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb20:	83 c8 02             	or     eax,0x2
c000bb23:	88 c2                	mov    dl,al
c000bb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb29:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb2c:	83 ec 0c             	sub    esp,0xc
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	e8 ec 44 00 00       	call   c0010024 <tcp_output>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	eb 07                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000bb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb40:	b0 00                	mov    al,0x0
c000bb42:	66 90                	xchg   ax,ax
c000bb44:	83 c4 08             	add    esp,0x8
c000bb47:	5b                   	pop    ebx
c000bb48:	c3                   	ret    
c000bb49:	8d 76 00             	lea    esi,[esi+0x0]

c000bb4c <tcp_oos_insert_segment>:
c000bb4c:	53                   	push   ebx
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb57:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb5b:	0f b7 c0             	movzx  eax,ax
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	50                   	push   eax
c000bb62:	e8 81 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	0f b7 c0             	movzx  eax,ax
c000bb6d:	83 e0 01             	and    eax,0x1
c000bb70:	0f 84 8e 00 00 00    	je     c000bc04 <tcp_oos_insert_segment+0xb8>
c000bb76:	83 ec 0c             	sub    esp,0xc
c000bb79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bb7d:	e8 2e e6 ff ff       	call   c000a1b0 <tcp_segs_free>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bb8d:	e9 16 01 00 00       	jmp    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bb92:	66 90                	xchg   ax,ax
c000bb94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb9b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb9f:	0f b7 c0             	movzx  eax,ax
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	50                   	push   eax
c000bba6:	e8 3d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	0f b7 c0             	movzx  eax,ax
c000bbb1:	83 e0 01             	and    eax,0x1
c000bbb4:	74 2a                	je     c000bbe0 <tcp_oos_insert_segment+0x94>
c000bbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbbd:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbc1:	83 ec 0c             	sub    esp,0xc
c000bbc4:	6a 01                	push   0x1
c000bbc6:	e8 1d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	89 c1                	mov    ecx,eax
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000bbd7:	89 d8                	mov    eax,ebx
c000bbd9:	09 c8                	or     eax,ecx
c000bbdb:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000bbdf:	90                   	nop
c000bbe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbec:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf9:	e8 6e e5 ff ff       	call   c000a16c <tcp_seg_free>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	8d 76 00             	lea    esi,[esi+0x0]
c000bc04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc09:	74 35                	je     c000bc40 <tcp_oos_insert_segment+0xf4>
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc12:	0f b7 d0             	movzx  edx,ax
c000bc15:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	01 d0                	add    eax,edx
c000bc33:	29 c1                	sub    ecx,eax
c000bc35:	89 c8                	mov    eax,ecx
c000bc37:	0f 89 57 ff ff ff    	jns    c000bb94 <tcp_oos_insert_segment+0x48>
c000bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc45:	74 61                	je     c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc4e:	0f b7 d0             	movzx  edx,ax
c000bc51:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc56:	01 c2                	add    edx,eax
c000bc58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc62:	29 c2                	sub    edx,eax
c000bc64:	89 d0                	mov    eax,edx
c000bc66:	85 c0                	test   eax,eax
c000bc68:	7e 3e                	jle    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc74:	89 c2                	mov    edx,eax
c000bc76:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc7b:	89 d3                	mov    ebx,edx
c000bc7d:	29 c3                	sub    ebx,eax
c000bc7f:	89 d8                	mov    eax,ebx
c000bc81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc85:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000bc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc90:	0f b7 d0             	movzx  edx,ax
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc9a:	83 ec 08             	sub    esp,0x8
c000bc9d:	52                   	push   edx
c000bc9e:	50                   	push   eax
c000bc9f:	e8 20 ce ff ff       	call   c0008ac4 <pbuf_realloc>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	90                   	nop
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	90                   	nop
c000bcb3:	83 c4 18             	add    esp,0x18
c000bcb6:	5b                   	pop    ebx
c000bcb7:	c3                   	ret    

c000bcb8 <tcp_receive>:
c000bcb8:	57                   	push   edi
c000bcb9:	56                   	push   esi
c000bcba:	53                   	push   ebx
c000bcbb:	83 ec 30             	sub    esp,0x30
c000bcbe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcc6:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000bccb:	0f b6 c0             	movzx  eax,al
c000bcce:	83 e0 10             	and    eax,0x10
c000bcd1:	0f 84 e5 07 00 00    	je     c000c4bc <tcp_receive+0x804>
c000bcd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdb:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bcde:	0f b7 d0             	movzx  edx,ax
c000bce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce5:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bce8:	01 d0                	add    eax,edx
c000bcea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bcee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf2:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bcf5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bcfa:	29 c2                	sub    edx,eax
c000bcfc:	89 d0                	mov    eax,edx
c000bcfe:	78 50                	js     c000bd50 <tcp_receive+0x98>
c000bd00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd04:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd07:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bd0c:	39 c2                	cmp    edx,eax
c000bd0e:	75 14                	jne    c000bd24 <tcp_receive+0x6c>
c000bd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd14:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd17:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bd1c:	29 c2                	sub    edx,eax
c000bd1e:	89 d0                	mov    eax,edx
c000bd20:	78 2e                	js     c000bd50 <tcp_receive+0x98>
c000bd22:	66 90                	xchg   ax,ax
c000bd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd28:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd2b:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bd30:	39 c2                	cmp    edx,eax
c000bd32:	75 74                	jne    c000bda8 <tcp_receive+0xf0>
c000bd34:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bd39:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd41:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd44:	0f b7 d2             	movzx  edx,dx
c000bd47:	0f b7 c0             	movzx  eax,ax
c000bd4a:	39 c2                	cmp    edx,eax
c000bd4c:	76 5a                	jbe    c000bda8 <tcp_receive+0xf0>
c000bd4e:	66 90                	xchg   ax,ax
c000bd50:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bd55:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bd59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd5d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bd61:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bd6e:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bd74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd78:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bd7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd82:	0f b7 c0             	movzx  eax,ax
c000bd85:	85 c0                	test   eax,eax
c000bd87:	74 1f                	je     c000bda8 <tcp_receive+0xf0>
c000bd89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bd93:	0f b6 c0             	movzx  eax,al
c000bd96:	85 c0                	test   eax,eax
c000bd98:	74 0e                	je     c000bda8 <tcp_receive+0xf0>
c000bd9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9e:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bda5:	8d 76 00             	lea    esi,[esi+0x0]
c000bda8:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bdae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb2:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdb5:	29 c2                	sub    edx,eax
c000bdb7:	89 d0                	mov    eax,edx
c000bdb9:	85 c0                	test   eax,eax
c000bdbb:	0f 8f ff 00 00 00    	jg     c000bec0 <tcp_receive+0x208>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bdcb:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bdd1:	0f b7 c0             	movzx  eax,ax
c000bdd4:	85 c0                	test   eax,eax
c000bdd6:	0f 85 cc 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdea:	0f b7 c0             	movzx  eax,ax
c000bded:	01 d0                	add    eax,edx
c000bdef:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bdf3:	0f 85 af 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be01:	98                   	cwde   
c000be02:	85 c0                	test   eax,eax
c000be04:	0f 88 9e 00 00 00    	js     c000bea8 <tcp_receive+0x1f0>
c000be0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be11:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000be16:	39 c2                	cmp    edx,eax
c000be18:	0f 85 8a 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000be1e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be2d:	83 c0 01             	add    eax,0x1
c000be30:	88 c2                	mov    dl,al
c000be32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be36:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be40:	0f b6 c0             	movzx  eax,al
c000be43:	83 f8 03             	cmp    eax,0x3
c000be46:	76 40                	jbe    c000be88 <tcp_receive+0x1d0>
c000be48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be57:	01 d0                	add    eax,edx
c000be59:	89 c2                	mov    edx,eax
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be63:	0f b7 d2             	movzx  edx,dx
c000be66:	0f b7 c0             	movzx  eax,ax
c000be69:	39 c2                	cmp    edx,eax
c000be6b:	76 3b                	jbe    c000bea8 <tcp_receive+0x1f0>
c000be6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be71:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7c:	01 d0                	add    eax,edx
c000be7e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be82:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be86:	eb 20                	jmp    c000bea8 <tcp_receive+0x1f0>
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be8f:	0f b6 c0             	movzx  eax,al
c000be92:	83 f8 03             	cmp    eax,0x3
c000be95:	75 11                	jne    c000bea8 <tcp_receive+0x1f0>
c000be97:	83 ec 0c             	sub    esp,0xc
c000be9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be9e:	e8 d9 48 00 00       	call   c001077c <tcp_rexmit_fast>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bead:	0f 85 99 04 00 00    	jne    c000c34c <tcp_receive+0x694>
c000beb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb7:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bebb:	e9 8c 04 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000bec0:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bec6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beca:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000becd:	29 c2                	sub    edx,eax
c000becf:	89 d0                	mov    eax,edx
c000bed1:	83 e8 01             	sub    eax,0x1
c000bed4:	0f 88 4a 03 00 00    	js     c000c224 <tcp_receive+0x56c>
c000beda:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bee7:	29 c2                	sub    edx,eax
c000bee9:	89 d0                	mov    eax,edx
c000beeb:	85 c0                	test   eax,eax
c000beed:	0f 8f 31 03 00 00    	jg     c000c224 <tcp_receive+0x56c>
c000bef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 e0 04             	and    eax,0x4
c000bf00:	74 22                	je     c000bf24 <tcp_receive+0x26c>
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf09:	83 e0 fb             	and    eax,0xfffffffb
c000bf0c:	88 c2                	mov    dl,al
c000bf0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf12:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bf1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf20:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf33:	98                   	cwde   
c000bf34:	c1 f8 03             	sar    eax,0x3
c000bf37:	89 c2                	mov    edx,eax
c000bf39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf41:	01 d0                	add    eax,edx
c000bf43:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf47:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bf4b:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bf50:	89 c2                	mov    edx,eax
c000bf52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf56:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf59:	89 d7                	mov    edi,edx
c000bf5b:	29 c7                	sub    edi,eax
c000bf5d:	89 f8                	mov    eax,edi
c000bf5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf63:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6b:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bf6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf73:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf76:	01 d0                	add    eax,edx
c000bf78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf7c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bf80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf84:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bf88:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bf8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf92:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bf95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf9c:	83 f8 03             	cmp    eax,0x3
c000bf9f:	0f 86 db 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb1:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bfb4:	0f b7 d2             	movzx  edx,dx
c000bfb7:	0f b7 c0             	movzx  eax,ax
c000bfba:	39 c2                	cmp    edx,eax
c000bfbc:	73 4a                	jae    c000c008 <tcp_receive+0x350>
c000bfbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc2:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfcd:	01 d0                	add    eax,edx
c000bfcf:	89 c2                	mov    edx,eax
c000bfd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bfd9:	0f b7 d2             	movzx  edx,dx
c000bfdc:	0f b7 c0             	movzx  eax,ax
c000bfdf:	39 c2                	cmp    edx,eax
c000bfe1:	0f 86 99 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bff6:	01 d0                	add    eax,edx
c000bff8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bffc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c000:	e9 7b 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c017:	0f b7 d0             	movzx  edx,ax
c000c01a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c021:	0f b7 c0             	movzx  eax,ax
c000c024:	0f af d0             	imul   edx,eax
c000c027:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c02f:	0f b7 d8             	movzx  ebx,ax
c000c032:	89 d0                	mov    eax,edx
c000c034:	89 c2                	mov    edx,eax
c000c036:	c1 fa 1f             	sar    edx,0x1f
c000c039:	f7 fb                	idiv   ebx
c000c03b:	01 c8                	add    eax,ecx
c000c03d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c046:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c04a:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c04f:	0f b7 c0             	movzx  eax,ax
c000c052:	39 c2                	cmp    edx,eax
c000c054:	0f 86 26 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000c05a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c05e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000c063:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c067:	e9 14 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c06c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c070:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c073:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c077:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c07b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c07e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c08b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c08e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c095:	83 ec 0c             	sub    esp,0xc
c000c098:	50                   	push   eax
c000c099:	e8 2a cc ff ff       	call   c0008cc8 <pbuf_clen>
c000c09e:	83 c4 10             	add    esp,0x10
c000c0a1:	0f b6 c0             	movzx  eax,al
c000c0a4:	0f b7 d3             	movzx  edx,bx
c000c0a7:	0f b7 c0             	movzx  eax,ax
c000c0aa:	39 c2                	cmp    edx,eax
c000c0ac:	73 16                	jae    c000c0c4 <tcp_receive+0x40c>
c000c0ae:	83 ec 08             	sub    esp,0x8
c000c0b1:	68 ac 0a 03 c0       	push   0xc0030aac
c000c0b6:	68 66 01 03 c0       	push   0xc0030166
c000c0bb:	e8 08 3e 01 00       	call   c001fec8 <CPrintf>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0cb:	0f b7 c0             	movzx  eax,ax
c000c0ce:	85 c0                	test   eax,eax
c000c0d0:	74 36                	je     c000c108 <tcp_receive+0x450>
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0d9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0dd:	0f b7 c0             	movzx  eax,ax
c000c0e0:	83 ec 0c             	sub    esp,0xc
c000c0e3:	50                   	push   eax
c000c0e4:	e8 ff 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c0e9:	83 c4 10             	add    esp,0x10
c000c0ec:	0f b7 c0             	movzx  eax,ax
c000c0ef:	83 e0 01             	and    eax,0x1
c000c0f2:	74 14                	je     c000c108 <tcp_receive+0x450>
c000c0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0fb:	83 e8 01             	sub    eax,0x1
c000c0fe:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c102:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c106:	66 90                	xchg   ax,ax
c000c108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	50                   	push   eax
c000c113:	e8 b0 cb ff ff       	call   c0008cc8 <pbuf_clen>
c000c118:	83 c4 10             	add    esp,0x10
c000c11b:	88 c1                	mov    cl,al
c000c11d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c121:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c124:	0f b6 c1             	movzx  eax,cl
c000c127:	89 d7                	mov    edi,edx
c000c129:	29 c7                	sub    edi,eax
c000c12b:	89 f8                	mov    eax,edi
c000c12d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c131:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c13c:	e8 2b e0 ff ff       	call   c000a16c <tcp_seg_free>
c000c141:	83 c4 10             	add    esp,0x10
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c14b:	0f b7 c0             	movzx  eax,ax
c000c14e:	85 c0                	test   eax,eax
c000c150:	74 2e                	je     c000c180 <tcp_receive+0x4c8>
c000c152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c156:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c159:	85 c0                	test   eax,eax
c000c15b:	75 23                	jne    c000c180 <tcp_receive+0x4c8>
c000c15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c161:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c164:	85 c0                	test   eax,eax
c000c166:	75 18                	jne    c000c180 <tcp_receive+0x4c8>
c000c168:	83 ec 08             	sub    esp,0x8
c000c16b:	68 d4 0a 03 c0       	push   0xc0030ad4
c000c170:	68 66 01 03 c0       	push   0xc0030166
c000c175:	e8 4e 3d 01 00       	call   c001fec8 <CPrintf>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	8d 76 00             	lea    esi,[esi+0x0]
c000c180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c184:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c187:	85 c0                	test   eax,eax
c000c189:	74 69                	je     c000c1f4 <tcp_receive+0x53c>
c000c18b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c192:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	50                   	push   eax
c000c19c:	e8 6b 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1a1:	83 c4 10             	add    esp,0x10
c000c1a4:	89 c3                	mov    ebx,eax
c000c1a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1aa:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1b0:	0f b7 f0             	movzx  esi,ax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1bd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1c1:	0f b7 c0             	movzx  eax,ax
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	50                   	push   eax
c000c1c8:	e8 1b 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	0f b7 c0             	movzx  eax,ax
c000c1d3:	83 e0 03             	and    eax,0x3
c000c1d6:	0f 95 c0             	setne  al
c000c1d9:	0f b6 c0             	movzx  eax,al
c000c1dc:	01 f0                	add    eax,esi
c000c1de:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c1e1:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000c1e6:	29 c2                	sub    edx,eax
c000c1e8:	89 d0                	mov    eax,edx
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	0f 8e 7a fe ff ff    	jle    c000c06c <tcp_receive+0x3b4>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 0d                	jne    c000c20c <tcp_receive+0x554>
c000c1ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c203:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c209:	eb 0d                	jmp    c000c218 <tcp_receive+0x560>
c000c20b:	90                   	nop
c000c20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c210:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c216:	66 90                	xchg   ax,ax
c000c218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c21c:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c220:	eb 0e                	jmp    c000c230 <tcp_receive+0x578>
c000c222:	66 90                	xchg   ax,ax
c000c224:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c228:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c22e:	66 90                	xchg   ax,ax
c000c230:	e9 17 01 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000c235:	8d 76 00             	lea    esi,[esi+0x0]
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c23f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c24a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c250:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c257:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c261:	83 ec 0c             	sub    esp,0xc
c000c264:	50                   	push   eax
c000c265:	e8 5e ca ff ff       	call   c0008cc8 <pbuf_clen>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	0f b6 c0             	movzx  eax,al
c000c270:	0f b7 d3             	movzx  edx,bx
c000c273:	0f b7 c0             	movzx  eax,ax
c000c276:	39 c2                	cmp    edx,eax
c000c278:	73 16                	jae    c000c290 <tcp_receive+0x5d8>
c000c27a:	83 ec 08             	sub    esp,0x8
c000c27d:	68 ac 0a 03 c0       	push   0xc0030aac
c000c282:	68 66 01 03 c0       	push   0xc0030166
c000c287:	e8 3c 3c 01 00       	call   c001fec8 <CPrintf>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c297:	0f b7 c0             	movzx  eax,ax
c000c29a:	85 c0                	test   eax,eax
c000c29c:	74 36                	je     c000c2d4 <tcp_receive+0x61c>
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2a5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2a9:	0f b7 c0             	movzx  eax,ax
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	50                   	push   eax
c000c2b0:	e8 33 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	0f b7 c0             	movzx  eax,ax
c000c2bb:	83 e0 01             	and    eax,0x1
c000c2be:	74 14                	je     c000c2d4 <tcp_receive+0x61c>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2c7:	83 e8 01             	sub    eax,0x1
c000c2ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2ce:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	50                   	push   eax
c000c2df:	e8 e4 c9 ff ff       	call   c0008cc8 <pbuf_clen>
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	88 c1                	mov    cl,al
c000c2e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ed:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c2f0:	0f b6 c1             	movzx  eax,cl
c000c2f3:	89 d6                	mov    esi,edx
c000c2f5:	29 c6                	sub    esi,eax
c000c2f7:	89 f0                	mov    eax,esi
c000c2f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2fd:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c308:	e8 5f de ff ff       	call   c000a16c <tcp_seg_free>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c317:	0f b7 c0             	movzx  eax,ax
c000c31a:	85 c0                	test   eax,eax
c000c31c:	74 2e                	je     c000c34c <tcp_receive+0x694>
c000c31e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c322:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c325:	85 c0                	test   eax,eax
c000c327:	75 23                	jne    c000c34c <tcp_receive+0x694>
c000c329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c32d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c330:	85 c0                	test   eax,eax
c000c332:	75 18                	jne    c000c34c <tcp_receive+0x694>
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	68 d4 0a 03 c0       	push   0xc0030ad4
c000c33c:	68 66 01 03 c0       	push   0xc0030166
c000c341:	e8 82 3b 01 00       	call   c001fec8 <CPrintf>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	8d 76 00             	lea    esi,[esi+0x0]
c000c34c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c350:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c353:	85 c0                	test   eax,eax
c000c355:	74 7d                	je     c000c3d4 <tcp_receive+0x71c>
c000c357:	8b 1d b0 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8b0
c000c35d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c361:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	50                   	push   eax
c000c36e:	e8 99 48 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	89 c6                	mov    esi,eax
c000c378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c37c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c37f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c382:	0f b7 f8             	movzx  edi,ax
c000c385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c389:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c393:	0f b7 c0             	movzx  eax,ax
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	50                   	push   eax
c000c39a:	e8 49 48 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	0f b7 c0             	movzx  eax,ax
c000c3a5:	83 e0 03             	and    eax,0x3
c000c3a8:	0f 95 c0             	setne  al
c000c3ab:	0f b6 c0             	movzx  eax,al
c000c3ae:	01 f8                	add    eax,edi
c000c3b0:	01 f0                	add    eax,esi
c000c3b2:	29 c3                	sub    ebx,eax
c000c3b4:	89 d8                	mov    eax,ebx
c000c3b6:	78 1c                	js     c000c3d4 <tcp_receive+0x71c>
c000c3b8:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000c3be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c2:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c3c5:	29 c2                	sub    edx,eax
c000c3c7:	89 d0                	mov    eax,edx
c000c3c9:	85 c0                	test   eax,eax
c000c3cb:	0f 8e 67 fe ff ff    	jle    c000c238 <tcp_receive+0x580>
c000c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c3db:	85 c0                	test   eax,eax
c000c3dd:	0f 84 d9 00 00 00    	je     c000c4bc <tcp_receive+0x804>
c000c3e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3e7:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c3ea:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000c3ef:	29 c2                	sub    edx,eax
c000c3f1:	89 d0                	mov    eax,edx
c000c3f3:	0f 89 c3 00 00 00    	jns    c000c4bc <tcp_receive+0x804>
c000c3f9:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000c3fe:	89 c2                	mov    edx,eax
c000c400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c404:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c407:	89 d7                	mov    edi,edx
c000c409:	29 c7                	sub    edi,eax
c000c40b:	89 f8                	mov    eax,edi
c000c40d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c412:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c41e:	98                   	cwde   
c000c41f:	c1 f8 03             	sar    eax,0x3
c000c422:	89 d6                	mov    esi,edx
c000c424:	29 c6                	sub    esi,eax
c000c426:	89 f0                	mov    eax,esi
c000c428:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c431:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c434:	89 c2                	mov    edx,eax
c000c436:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c43b:	01 d0                	add    eax,edx
c000c43d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c441:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c445:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c44a:	85 c0                	test   eax,eax
c000c44c:	79 0e                	jns    c000c45c <tcp_receive+0x7a4>
c000c44e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c453:	f7 d8                	neg    eax
c000c455:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c45a:	66 90                	xchg   ax,ax
c000c45c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c461:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c465:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c469:	98                   	cwde   
c000c46a:	c1 f8 02             	sar    eax,0x2
c000c46d:	89 d7                	mov    edi,edx
c000c46f:	29 c7                	sub    edi,eax
c000c471:	89 f8                	mov    eax,edi
c000c473:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c480:	89 c2                	mov    edx,eax
c000c482:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c487:	01 d0                	add    eax,edx
c000c489:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c48d:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c495:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c498:	98                   	cwde   
c000c499:	c1 f8 03             	sar    eax,0x3
c000c49c:	89 c2                	mov    edx,eax
c000c49e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a2:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4a6:	01 d0                	add    eax,edx
c000c4a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4ac:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c4b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b4:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c4bb:	90                   	nop
c000c4bc:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c4c2:	0f b7 c0             	movzx  eax,ax
c000c4c5:	85 c0                	test   eax,eax
c000c4c7:	0f 84 2f 0e 00 00    	je     c000d2fc <tcp_receive+0x1644>
c000c4cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4d4:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c4d9:	29 c2                	sub    edx,eax
c000c4db:	89 d0                	mov    eax,edx
c000c4dd:	83 e8 01             	sub    eax,0x1
c000c4e0:	0f 88 c6 01 00 00    	js     c000c6ac <tcp_receive+0x9f4>
c000c4e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ed:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c4f3:	0f b7 c8             	movzx  ecx,ax
c000c4f6:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c4fb:	01 c8                	add    eax,ecx
c000c4fd:	29 c2                	sub    edx,eax
c000c4ff:	89 d0                	mov    eax,edx
c000c501:	83 c0 01             	add    eax,0x1
c000c504:	85 c0                	test   eax,eax
c000c506:	0f 8f a0 01 00 00    	jg     c000c6ac <tcp_receive+0x9f4>
c000c50c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c510:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c513:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c518:	29 c2                	sub    edx,eax
c000c51a:	89 d0                	mov    eax,edx
c000c51c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c520:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c525:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c529:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c52e:	85 c0                	test   eax,eax
c000c530:	75 16                	jne    c000c548 <tcp_receive+0x890>
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 d1 0c 03 c0       	push   0xc0030cd1
c000c53a:	68 66 01 03 c0       	push   0xc0030166
c000c53f:	e8 84 39 01 00       	call   c001fec8 <CPrintf>
c000c544:	83 c4 10             	add    esp,0x10
c000c547:	90                   	nop
c000c548:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c550:	7e 16                	jle    c000c568 <tcp_receive+0x8b0>
c000c552:	83 ec 08             	sub    esp,0x8
c000c555:	68 e1 0c 03 c0       	push   0xc0030ce1
c000c55a:	68 66 01 03 c0       	push   0xc0030166
c000c55f:	e8 64 39 01 00       	call   c001fec8 <CPrintf>
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	90                   	nop
c000c568:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c56d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c571:	0f b7 c0             	movzx  eax,ax
c000c574:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c578:	0f 8e b6 00 00 00    	jle    c000c634 <tcp_receive+0x97c>
c000c57e:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c583:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c586:	0f b7 c0             	movzx  eax,ax
c000c589:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c58d:	7e 15                	jle    c000c5a4 <tcp_receive+0x8ec>
c000c58f:	83 ec 08             	sub    esp,0x8
c000c592:	68 f0 0c 03 c0       	push   0xc0030cf0
c000c597:	68 66 01 03 c0       	push   0xc0030166
c000c59c:	e8 27 39 01 00       	call   c001fec8 <CPrintf>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5b0:	29 d0                	sub    eax,edx
c000c5b2:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5b7:	eb 33                	jmp    c000c5ec <tcp_receive+0x934>
c000c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5c0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5c4:	0f b7 c0             	movzx  eax,ax
c000c5c7:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c5cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c5e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5eb:	90                   	nop
c000c5ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5fb:	7f bf                	jg     c000c5bc <tcp_receive+0x904>
c000c5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c601:	f7 d8                	neg    eax
c000c603:	98                   	cwde   
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	50                   	push   eax
c000c608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c60c:	e8 47 bd ff ff       	call   c0008358 <pbuf_header>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	0f b6 c0             	movzx  eax,al
c000c617:	85 c0                	test   eax,eax
c000c619:	74 51                	je     c000c66c <tcp_receive+0x9b4>
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	68 00 0d 03 c0       	push   0xc0030d00
c000c623:	68 66 01 03 c0       	push   0xc0030166
c000c628:	e8 9b 38 01 00       	call   c001fec8 <CPrintf>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	eb 3a                	jmp    c000c66c <tcp_receive+0x9b4>
c000c632:	66 90                	xchg   ax,ax
c000c634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c638:	f7 d8                	neg    eax
c000c63a:	0f bf d0             	movsx  edx,ax
c000c63d:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c642:	83 ec 08             	sub    esp,0x8
c000c645:	52                   	push   edx
c000c646:	50                   	push   eax
c000c647:	e8 0c bd ff ff       	call   c0008358 <pbuf_header>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	0f b6 c0             	movzx  eax,al
c000c652:	85 c0                	test   eax,eax
c000c654:	74 16                	je     c000c66c <tcp_receive+0x9b4>
c000c656:	83 ec 08             	sub    esp,0x8
c000c659:	68 00 0d 03 c0       	push   0xc0030d00
c000c65e:	68 66 01 03 c0       	push   0xc0030166
c000c663:	e8 60 38 01 00       	call   c001fec8 <CPrintf>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	90                   	nop
c000c66c:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c671:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c677:	89 d1                	mov    ecx,edx
c000c679:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c67d:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c680:	89 ce                	mov    esi,ecx
c000c682:	29 d6                	sub    esi,edx
c000c684:	89 f2                	mov    edx,esi
c000c686:	01 d0                	add    eax,edx
c000c688:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c68e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c692:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c695:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000c69a:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c69f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6a8:	eb 2a                	jmp    c000c6d4 <tcp_receive+0xa1c>
c000c6aa:	66 90                	xchg   ax,ax
c000c6ac:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6b9:	29 c2                	sub    edx,eax
c000c6bb:	89 d0                	mov    eax,edx
c000c6bd:	79 15                	jns    c000c6d4 <tcp_receive+0xa1c>
c000c6bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c6c6:	83 c8 02             	or     eax,0x2
c000c6c9:	88 c2                	mov    dl,al
c000c6cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c6d2:	66 90                	xchg   ax,ax
c000c6d4:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6e1:	29 c2                	sub    edx,eax
c000c6e3:	89 d0                	mov    eax,edx
c000c6e5:	0f 88 fd 0b 00 00    	js     c000d2e8 <tcp_receive+0x1630>
c000c6eb:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c6f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6ff:	0f b7 c0             	movzx  eax,ax
c000c702:	01 c8                	add    eax,ecx
c000c704:	29 c2                	sub    edx,eax
c000c706:	89 d0                	mov    eax,edx
c000c708:	83 c0 01             	add    eax,0x1
c000c70b:	85 c0                	test   eax,eax
c000c70d:	0f 8f d5 0b 00 00    	jg     c000d2e8 <tcp_receive+0x1630>
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c71a:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c71f:	39 c2                	cmp    edx,eax
c000c721:	0f 85 1d 07 00 00    	jne    c000ce44 <tcp_receive+0x118c>
c000c727:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c72d:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c732:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c736:	0f b7 c0             	movzx  eax,ax
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 a6 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	0f b7 c0             	movzx  eax,ax
c000c748:	83 e0 03             	and    eax,0x3
c000c74b:	0f 95 c0             	setne  al
c000c74e:	0f b6 c0             	movzx  eax,al
c000c751:	01 d8                	add    eax,ebx
c000c753:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c759:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c760:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c766:	0f b7 d2             	movzx  edx,dx
c000c769:	0f b7 c0             	movzx  eax,ax
c000c76c:	39 c2                	cmp    edx,eax
c000c76e:	0f 83 2c 01 00 00    	jae    c000c8a0 <tcp_receive+0xbe8>
c000c774:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c779:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77d:	0f b7 c0             	movzx  eax,ax
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	50                   	push   eax
c000c784:	e8 5f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	0f b7 c0             	movzx  eax,ax
c000c78f:	83 e0 01             	and    eax,0x1
c000c792:	74 44                	je     c000c7d8 <tcp_receive+0xb20>
c000c794:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c799:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c79d:	80 e4 c0             	and    ah,0xc0
c000c7a0:	89 c3                	mov    ebx,eax
c000c7a2:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7a7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ab:	0f b7 c0             	movzx  eax,ax
c000c7ae:	83 ec 0c             	sub    esp,0xc
c000c7b1:	50                   	push   eax
c000c7b2:	e8 31 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7b7:	83 c4 10             	add    esp,0x10
c000c7ba:	0f b7 c0             	movzx  eax,ax
c000c7bd:	83 e0 3e             	and    eax,0x3e
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	50                   	push   eax
c000c7c4:	e8 1f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	09 d8                	or     eax,ebx
c000c7ce:	8b 15 cc b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8cc
c000c7d4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c7df:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c7e5:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7ea:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ee:	0f b7 c0             	movzx  eax,ax
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	50                   	push   eax
c000c7f5:	e8 ee 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	0f b7 c0             	movzx  eax,ax
c000c800:	83 e0 02             	and    eax,0x2
c000c803:	74 0f                	je     c000c814 <tcp_receive+0xb5c>
c000c805:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c80a:	83 e8 01             	sub    eax,0x1
c000c80d:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c813:	90                   	nop
c000c814:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c819:	0f b7 d0             	movzx  edx,ax
c000c81c:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c821:	83 ec 08             	sub    esp,0x8
c000c824:	52                   	push   edx
c000c825:	50                   	push   eax
c000c826:	e8 99 c2 ff ff       	call   c0008ac4 <pbuf_realloc>
c000c82b:	83 c4 10             	add    esp,0x10
c000c82e:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c834:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c839:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	50                   	push   eax
c000c844:	e8 9f 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	0f b7 c0             	movzx  eax,ax
c000c84f:	83 e0 03             	and    eax,0x3
c000c852:	0f 95 c0             	setne  al
c000c855:	0f b6 c0             	movzx  eax,al
c000c858:	01 d8                	add    eax,ebx
c000c85a:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c860:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c866:	0f b7 d0             	movzx  edx,ax
c000c869:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c875:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c878:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c87c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	01 d0                	add    eax,edx
c000c884:	39 c1                	cmp    ecx,eax
c000c886:	74 18                	je     c000c8a0 <tcp_receive+0xbe8>
c000c888:	83 ec 08             	sub    esp,0x8
c000c88b:	68 f4 0a 03 c0       	push   0xc0030af4
c000c890:	68 66 01 03 c0       	push   0xc0030166
c000c895:	e8 2e 36 01 00       	call   c001fec8 <CPrintf>
c000c89a:	83 c4 10             	add    esp,0x10
c000c89d:	8d 76 00             	lea    esi,[esi+0x0]
c000c8a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8a4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8aa:	85 c0                	test   eax,eax
c000c8ac:	0f 84 7e 02 00 00    	je     c000cb30 <tcp_receive+0xe78>
c000c8b2:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c8b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8bb:	0f b7 c0             	movzx  eax,ax
c000c8be:	83 ec 0c             	sub    esp,0xc
c000c8c1:	50                   	push   eax
c000c8c2:	e8 21 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	0f b7 c0             	movzx  eax,ax
c000c8cd:	83 e0 01             	and    eax,0x1
c000c8d0:	74 4a                	je     c000c91c <tcp_receive+0xc64>
c000c8d2:	eb 34                	jmp    c000c908 <tcp_receive+0xc50>
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c8e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8e6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8ff:	e8 68 d8 ff ff       	call   c000a16c <tcp_seg_free>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	90                   	nop
c000c908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c90c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c912:	85 c0                	test   eax,eax
c000c914:	75 be                	jne    c000c8d4 <tcp_receive+0xc1c>
c000c916:	e9 15 02 00 00       	jmp    c000cb30 <tcp_receive+0xe78>
c000c91b:	90                   	nop
c000c91c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c920:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c926:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c92a:	e9 bd 00 00 00       	jmp    c000c9ec <tcp_receive+0xd34>
c000c92f:	90                   	nop
c000c930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 a1 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 01             	and    eax,0x1
c000c950:	74 76                	je     c000c9c8 <tcp_receive+0xd10>
c000c952:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c957:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c95b:	0f b7 c0             	movzx  eax,ax
c000c95e:	83 ec 0c             	sub    esp,0xc
c000c961:	50                   	push   eax
c000c962:	e8 81 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	0f b7 c0             	movzx  eax,ax
c000c96d:	83 e0 02             	and    eax,0x2
c000c970:	75 56                	jne    c000c9c8 <tcp_receive+0xd10>
c000c972:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c977:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	6a 01                	push   0x1
c000c980:	e8 63 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	8b 15 cc b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8cc
c000c98e:	09 d8                	or     eax,ebx
c000c990:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c994:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c99a:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c99f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a3:	0f b7 c0             	movzx  eax,ax
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	50                   	push   eax
c000c9aa:	e8 39 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9af:	83 c4 10             	add    esp,0x10
c000c9b2:	0f b7 c0             	movzx  eax,ax
c000c9b5:	83 e0 03             	and    eax,0x3
c000c9b8:	0f 95 c0             	setne  al
c000c9bb:	0f b6 c0             	movzx  eax,al
c000c9be:	01 d8                	add    eax,ebx
c000c9c0:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9da:	83 ec 0c             	sub    esp,0xc
c000c9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e1:	e8 86 d7 ff ff       	call   c000a16c <tcp_seg_free>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c9ec:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c9f1:	74 31                	je     c000ca24 <tcp_receive+0xd6c>
c000c9f3:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c9f9:	0f b7 d0             	movzx  edx,ax
c000c9fc:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca01:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca15:	0f b7 c0             	movzx  eax,ax
c000ca18:	01 d0                	add    eax,edx
c000ca1a:	29 c1                	sub    ecx,eax
c000ca1c:	89 c8                	mov    eax,ecx
c000ca1e:	0f 89 0c ff ff ff    	jns    c000c930 <tcp_receive+0xc78>
c000ca24:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca29:	0f 84 f1 00 00 00    	je     c000cb20 <tcp_receive+0xe68>
c000ca2f:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000ca35:	0f b7 d0             	movzx  edx,ax
c000ca38:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca3d:	01 c2                	add    edx,eax
c000ca3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca49:	29 c2                	sub    edx,eax
c000ca4b:	89 d0                	mov    eax,edx
c000ca4d:	85 c0                	test   eax,eax
c000ca4f:	0f 8e cb 00 00 00    	jle    c000cb20 <tcp_receive+0xe68>
c000ca55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca5f:	89 c2                	mov    edx,eax
c000ca61:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca66:	89 d7                	mov    edi,edx
c000ca68:	29 c7                	sub    edi,eax
c000ca6a:	89 f8                	mov    eax,edi
c000ca6c:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000ca72:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000ca77:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca7b:	0f b7 c0             	movzx  eax,ax
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	50                   	push   eax
c000ca82:	e8 61 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca87:	83 c4 10             	add    esp,0x10
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	83 e0 02             	and    eax,0x2
c000ca90:	74 0e                	je     c000caa0 <tcp_receive+0xde8>
c000ca92:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000ca97:	83 e8 01             	sub    eax,0x1
c000ca9a:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000caa0:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000caa5:	0f b7 d0             	movzx  edx,ax
c000caa8:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000caad:	83 ec 08             	sub    esp,0x8
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 0d c0 ff ff       	call   c0008ac4 <pbuf_realloc>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000cac0:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cac5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	50                   	push   eax
c000cad0:	e8 13 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	0f b7 c0             	movzx  eax,ax
c000cadb:	83 e0 03             	and    eax,0x3
c000cade:	0f 95 c0             	setne  al
c000cae1:	0f b6 c0             	movzx  eax,al
c000cae4:	01 d8                	add    eax,ebx
c000cae6:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000caec:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000caf2:	0f b7 d0             	movzx  edx,ax
c000caf5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cafa:	01 c2                	add    edx,eax
c000cafc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb06:	39 c2                	cmp    edx,eax
c000cb08:	74 16                	je     c000cb20 <tcp_receive+0xe68>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 2c 0b 03 c0       	push   0xc0030b2c
c000cb12:	68 66 01 03 c0       	push   0xc0030166
c000cb17:	e8 ac 33 01 00       	call   c001fec8 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb28:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb2e:	66 90                	xchg   ax,ax
c000cb30:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb36:	0f b7 d0             	movzx  edx,ax
c000cb39:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cb3e:	01 c2                	add    edx,eax
c000cb40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb44:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb4b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb4e:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb54:	0f b7 d2             	movzx  edx,dx
c000cb57:	0f b7 c0             	movzx  eax,ax
c000cb5a:	39 c2                	cmp    edx,eax
c000cb5c:	73 16                	jae    c000cb74 <tcp_receive+0xebc>
c000cb5e:	83 ec 08             	sub    esp,0x8
c000cb61:	68 68 0b 03 c0       	push   0xc0030b68
c000cb66:	68 66 01 03 c0       	push   0xc0030166
c000cb6b:	e8 58 33 01 00       	call   c001fec8 <CPrintf>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	90                   	nop
c000cb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb78:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb7b:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb81:	89 d6                	mov    esi,edx
c000cb83:	29 c6                	sub    esi,eax
c000cb85:	89 f0                	mov    eax,esi
c000cb87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb8b:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb8f:	83 ec 0c             	sub    esp,0xc
c000cb92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb96:	e8 7d d2 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000cba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cba6:	0f b7 c0             	movzx  eax,ax
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 17                	je     c000cbc4 <tcp_receive+0xf0c>
c000cbad:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000cbb2:	a3 a4 b8 03 c0       	mov    ds:0xc003b8a4,eax
c000cbb7:	c7 05 c4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c4,0x0
c000cbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc4:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cbc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcd:	0f b7 c0             	movzx  eax,ax
c000cbd0:	83 ec 0c             	sub    esp,0xc
c000cbd3:	50                   	push   eax
c000cbd4:	e8 0f 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	0f b7 c0             	movzx  eax,ax
c000cbdf:	83 e0 01             	and    eax,0x1
c000cbe2:	0f 84 d8 01 00 00    	je     c000cdc0 <tcp_receive+0x1108>
c000cbe8:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000cbed:	83 c8 20             	or     eax,0x20
c000cbf0:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000cbf5:	e9 c6 01 00 00       	jmp    c000cdc0 <tcp_receive+0x1108>
c000cbfa:	66 90                	xchg   ax,ax
c000cbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc00:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc1a:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc26:	0f b7 d8             	movzx  ebx,ax
c000cc29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc30:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc34:	0f b7 c0             	movzx  eax,ax
c000cc37:	83 ec 0c             	sub    esp,0xc
c000cc3a:	50                   	push   eax
c000cc3b:	e8 a8 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	0f b7 c0             	movzx  eax,ax
c000cc46:	83 e0 03             	and    eax,0x3
c000cc49:	0f 95 c0             	setne  al
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc59:	01 c2                	add    edx,eax
c000cc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cc62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc66:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cc69:	0f b7 d8             	movzx  ebx,ax
c000cc6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc73:	0f b7 f0             	movzx  esi,ax
c000cc76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc81:	0f b7 c0             	movzx  eax,ax
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	50                   	push   eax
c000cc88:	e8 5b 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	0f b7 c0             	movzx  eax,ax
c000cc93:	83 e0 03             	and    eax,0x3
c000cc96:	0f 95 c0             	setne  al
c000cc99:	0f b6 c0             	movzx  eax,al
c000cc9c:	01 f0                	add    eax,esi
c000cc9e:	39 c3                	cmp    ebx,eax
c000cca0:	7d 16                	jge    c000ccb8 <tcp_receive+0x1000>
c000cca2:	83 ec 08             	sub    esp,0x8
c000cca5:	68 88 0b 03 c0       	push   0xc0030b88
c000ccaa:	68 66 01 03 c0       	push   0xc0030166
c000ccaf:	e8 14 32 01 00       	call   c001fec8 <CPrintf>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	90                   	nop
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 d8             	movzx  ebx,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 0f 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cceb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccf2:	29 d0                	sub    eax,edx
c000ccf4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ccf8:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd03:	e8 10 d1 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd15:	0f b7 c0             	movzx  eax,ax
c000cd18:	85 c0                	test   eax,eax
c000cd1a:	74 3c                	je     c000cd58 <tcp_receive+0x10a0>
c000cd1c:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000cd21:	85 c0                	test   eax,eax
c000cd23:	74 1b                	je     c000cd40 <tcp_receive+0x1088>
c000cd25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd29:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd2c:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	52                   	push   edx
c000cd35:	50                   	push   eax
c000cd36:	e8 f1 bf ff ff       	call   c0008d2c <pbuf_cat>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	eb 0c                	jmp    c000cd4c <tcp_receive+0x1094>
c000cd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd47:	a3 a4 b8 03 c0       	mov    ds:0xc003b8a4,eax
c000cd4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cd57:	90                   	nop
c000cd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd5f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	83 ec 0c             	sub    esp,0xc
c000cd69:	50                   	push   eax
c000cd6a:	e8 79 3e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	0f b7 c0             	movzx  eax,ax
c000cd75:	83 e0 01             	and    eax,0x1
c000cd78:	74 26                	je     c000cda0 <tcp_receive+0x10e8>
c000cd7a:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000cd7f:	83 c8 20             	or     eax,0x20
c000cd82:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000cd87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cd8e:	83 f8 04             	cmp    eax,0x4
c000cd91:	75 0d                	jne    c000cda0 <tcp_receive+0x10e8>
c000cd93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd97:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cd9e:	66 90                	xchg   ax,ax
c000cda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cda6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdaa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb7:	e8 b0 d3 ff ff       	call   c000a16c <tcp_seg_free>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	90                   	nop
c000cdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdca:	85 c0                	test   eax,eax
c000cdcc:	74 22                	je     c000cdf0 <tcp_receive+0x1138>
c000cdce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cddb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cde5:	39 c2                	cmp    edx,eax
c000cde7:	0f 84 0f fe ff ff    	je     c000cbfc <tcp_receive+0xf44>
c000cded:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cdf7:	0f b6 c0             	movzx  eax,al
c000cdfa:	83 e0 01             	and    eax,0x1
c000cdfd:	74 2d                	je     c000ce2c <tcp_receive+0x1174>
c000cdff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce06:	83 e0 fe             	and    eax,0xfffffffe
c000ce09:	88 c2                	mov    dl,al
c000ce0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce0f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce16:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce19:	83 c8 02             	or     eax,0x2
c000ce1c:	88 c2                	mov    dl,al
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce25:	e9 22 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce2a:	66 90                	xchg   ax,ax
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce33:	83 c8 01             	or     eax,0x1
c000ce36:	88 c2                	mov    dl,al
c000ce38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce3c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce3f:	e9 08 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce4b:	e8 c4 2e 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce57:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce5d:	85 c0                	test   eax,eax
c000ce5f:	75 23                	jne    c000ce84 <tcp_receive+0x11cc>
c000ce61:	83 ec 0c             	sub    esp,0xc
c000ce64:	68 c0 b8 03 c0       	push   0xc003b8c0
c000ce69:	e8 96 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 c2                	mov    edx,eax
c000ce73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce77:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce7d:	e9 ca 04 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce82:	66 90                	xchg   ax,ax
c000ce84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ce8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce90:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce9a:	e9 21 04 00 00       	jmp    c000d2c0 <tcp_receive+0x1608>
c000ce9f:	90                   	nop
c000cea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cea7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceaa:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ceaf:	39 c2                	cmp    edx,eax
c000ceb1:	75 75                	jne    c000cf28 <tcp_receive+0x1270>
c000ceb3:	8b 15 c8 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8c8
c000ceb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 d2             	movzx  edx,dx
c000cec3:	0f b7 c0             	movzx  eax,ax
c000cec6:	39 c2                	cmp    edx,eax
c000cec8:	0f 86 02 04 00 00    	jbe    c000d2d0 <tcp_receive+0x1618>
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	68 c0 b8 03 c0       	push   0xc003b8c0
c000ced6:	e8 29 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cee2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cee7:	0f 84 e7 03 00 00    	je     c000d2d4 <tcp_receive+0x161c>
c000ceed:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cef2:	74 0c                	je     c000cf00 <tcp_receive+0x1248>
c000cef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cefc:	89 10                	mov    DWORD PTR [eax],edx
c000cefe:	eb 10                	jmp    c000cf10 <tcp_receive+0x1258>
c000cf00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf08:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf0e:	66 90                	xchg   ax,ax
c000cf10:	83 ec 08             	sub    esp,0x8
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1b:	e8 2c ec ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf20:	83 c4 10             	add    esp,0x10
c000cf23:	e9 ac 03 00 00       	jmp    c000d2d4 <tcp_receive+0x161c>
c000cf28:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf2d:	75 61                	jne    c000cf90 <tcp_receive+0x12d8>
c000cf2f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cf35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf3f:	29 c2                	sub    edx,eax
c000cf41:	89 d0                	mov    eax,edx
c000cf43:	0f 89 27 01 00 00    	jns    c000d070 <tcp_receive+0x13b8>
c000cf49:	83 ec 0c             	sub    esp,0xc
c000cf4c:	68 c0 b8 03 c0       	push   0xc003b8c0
c000cf51:	e8 ae d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf62:	0f 84 70 03 00 00    	je     c000d2d8 <tcp_receive+0x1620>
c000cf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf76:	83 ec 08             	sub    esp,0x8
c000cf79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf81:	e8 c6 eb ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	e9 4a 03 00 00       	jmp    c000d2d8 <tcp_receive+0x1620>
c000cf8e:	66 90                	xchg   ax,ax
c000cf90:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cf96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa0:	29 c2                	sub    edx,eax
c000cfa2:	89 d0                	mov    eax,edx
c000cfa4:	83 e8 01             	sub    eax,0x1
c000cfa7:	0f 88 c3 00 00 00    	js     c000d070 <tcp_receive+0x13b8>
c000cfad:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cfb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfbd:	29 c2                	sub    edx,eax
c000cfbf:	89 d0                	mov    eax,edx
c000cfc1:	83 c0 01             	add    eax,0x1
c000cfc4:	85 c0                	test   eax,eax
c000cfc6:	0f 8f a4 00 00 00    	jg     c000d070 <tcp_receive+0x13b8>
c000cfcc:	83 ec 0c             	sub    esp,0xc
c000cfcf:	68 c0 b8 03 c0       	push   0xc003b8c0
c000cfd4:	e8 2b d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfe5:	0f 84 f1 02 00 00    	je     c000d2dc <tcp_receive+0x1624>
c000cfeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cffc:	0f b7 c0             	movzx  eax,ax
c000cfff:	01 c2                	add    edx,eax
c000d001:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d006:	29 c2                	sub    edx,eax
c000d008:	89 d0                	mov    eax,edx
c000d00a:	85 c0                	test   eax,eax
c000d00c:	7e 3e                	jle    c000d04c <tcp_receive+0x1394>
c000d00e:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d013:	89 c2                	mov    edx,eax
c000d015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d01f:	89 d7                	mov    edi,edx
c000d021:	29 c7                	sub    edi,eax
c000d023:	89 f8                	mov    eax,edi
c000d025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d029:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d02d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d034:	0f b7 d0             	movzx  edx,ax
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d03e:	83 ec 08             	sub    esp,0x8
c000d041:	52                   	push   edx
c000d042:	50                   	push   eax
c000d043:	e8 7c ba ff ff       	call   c0008ac4 <pbuf_realloc>
c000d048:	83 c4 10             	add    esp,0x10
c000d04b:	90                   	nop
c000d04c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d054:	89 10                	mov    DWORD PTR [eax],edx
c000d056:	83 ec 08             	sub    esp,0x8
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d061:	e8 e6 ea ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	e9 6e 02 00 00       	jmp    c000d2dc <tcp_receive+0x1624>
c000d06e:	66 90                	xchg   ax,ax
c000d070:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d074:	8b 00                	mov    eax,DWORD PTR [eax]
c000d076:	85 c0                	test   eax,eax
c000d078:	0f 85 2e 02 00 00    	jne    c000d2ac <tcp_receive+0x15f4>
c000d07e:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	29 c2                	sub    edx,eax
c000d090:	89 d0                	mov    eax,edx
c000d092:	85 c0                	test   eax,eax
c000d094:	0f 8e 12 02 00 00    	jle    c000d2ac <tcp_receive+0x15f4>
c000d09a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	50                   	push   eax
c000d0ac:	e8 37 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	0f b7 c0             	movzx  eax,ax
c000d0b7:	83 e0 01             	and    eax,0x1
c000d0ba:	0f 85 20 02 00 00    	jne    c000d2e0 <tcp_receive+0x1628>
c000d0c0:	83 ec 0c             	sub    esp,0xc
c000d0c3:	68 c0 b8 03 c0       	push   0xc003b8c0
c000d0c8:	e8 37 d1 ff ff       	call   c000a204 <tcp_seg_copy>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	89 c2                	mov    edx,eax
c000d0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d6:	89 10                	mov    DWORD PTR [eax],edx
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0de:	85 c0                	test   eax,eax
c000d0e0:	0f 84 fe 01 00 00    	je     c000d2e4 <tcp_receive+0x162c>
c000d0e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d0f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0f7:	0f b7 c0             	movzx  eax,ax
c000d0fa:	01 c2                	add    edx,eax
c000d0fc:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d101:	29 c2                	sub    edx,eax
c000d103:	89 d0                	mov    eax,edx
c000d105:	85 c0                	test   eax,eax
c000d107:	7e 3f                	jle    c000d148 <tcp_receive+0x1490>
c000d109:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d10e:	89 c2                	mov    edx,eax
c000d110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d114:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d11a:	89 d6                	mov    esi,edx
c000d11c:	29 c6                	sub    esi,eax
c000d11e:	89 f0                	mov    eax,esi
c000d120:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d124:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d12f:	0f b7 d0             	movzx  edx,ax
c000d132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d139:	83 ec 08             	sub    esp,0x8
c000d13c:	52                   	push   edx
c000d13d:	50                   	push   eax
c000d13e:	e8 81 b9 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	66 90                	xchg   ax,ax
c000d148:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d14e:	0f b7 d0             	movzx  edx,ax
c000d151:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d15d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d164:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	01 d0                	add    eax,edx
c000d16c:	39 c1                	cmp    ecx,eax
c000d16e:	0f 86 70 01 00 00    	jbe    c000d2e4 <tcp_receive+0x162c>
c000d174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d178:	8b 00                	mov    eax,DWORD PTR [eax]
c000d17a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d17d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	50                   	push   eax
c000d188:	e8 5b 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	0f b7 c0             	movzx  eax,ax
c000d193:	83 e0 01             	and    eax,0x1
c000d196:	74 50                	je     c000d1e8 <tcp_receive+0x1530>
c000d198:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d19c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d19e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1a5:	80 e4 c0             	and    ah,0xc0
c000d1a8:	89 c3                	mov    ebx,eax
c000d1aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1b3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1b7:	0f b7 c0             	movzx  eax,ax
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	50                   	push   eax
c000d1be:	e8 25 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	83 e0 3e             	and    eax,0x3e
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	50                   	push   eax
c000d1d0:	e8 13 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	09 d8                	or     eax,ebx
c000d1da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d1de:	8b 12                	mov    edx,DWORD PTR [edx]
c000d1e0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d1e3:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d1e7:	90                   	nop
c000d1e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1ef:	89 c2                	mov    edx,eax
c000d1f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f8:	01 d0                	add    eax,edx
c000d1fa:	89 c3                	mov    ebx,eax
c000d1fc:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d201:	89 c1                	mov    ecx,eax
c000d203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d207:	8b 10                	mov    edx,DWORD PTR [eax]
c000d209:	89 d8                	mov    eax,ebx
c000d20b:	29 c8                	sub    eax,ecx
c000d20d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d211:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d215:	8b 00                	mov    eax,DWORD PTR [eax]
c000d217:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d21a:	0f b7 d0             	movzx  edx,ax
c000d21d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d221:	8b 00                	mov    eax,DWORD PTR [eax]
c000d223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d226:	83 ec 08             	sub    esp,0x8
c000d229:	52                   	push   edx
c000d22a:	50                   	push   eax
c000d22b:	e8 94 b8 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d237:	8b 00                	mov    eax,DWORD PTR [eax]
c000d239:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d23c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d240:	8b 00                	mov    eax,DWORD PTR [eax]
c000d242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d245:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d249:	0f b7 c0             	movzx  eax,ax
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	50                   	push   eax
c000d250:	e8 93 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	0f b7 c0             	movzx  eax,ax
c000d25b:	83 e0 03             	and    eax,0x3
c000d25e:	0f 95 c0             	setne  al
c000d261:	0f b6 c0             	movzx  eax,al
c000d264:	01 d8                	add    eax,ebx
c000d266:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000d26c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d272:	0f b7 d0             	movzx  edx,ax
c000d275:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d27a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d281:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d284:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d288:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d28b:	0f b7 c0             	movzx  eax,ax
c000d28e:	01 d0                	add    eax,edx
c000d290:	39 c1                	cmp    ecx,eax
c000d292:	74 50                	je     c000d2e4 <tcp_receive+0x162c>
c000d294:	83 ec 08             	sub    esp,0x8
c000d297:	68 f4 0a 03 c0       	push   0xc0030af4
c000d29c:	68 66 01 03 c0       	push   0xc0030166
c000d2a1:	e8 22 2c 01 00       	call   c001fec8 <CPrintf>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	eb 39                	jmp    c000d2e4 <tcp_receive+0x162c>
c000d2ab:	90                   	nop
c000d2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d2c5:	0f 85 d5 fb ff ff    	jne    c000cea0 <tcp_receive+0x11e8>
c000d2cb:	eb 7f                	jmp    c000d34c <tcp_receive+0x1694>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	90                   	nop
c000d2d1:	eb 79                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d3:	90                   	nop
c000d2d4:	90                   	nop
c000d2d5:	eb 75                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d7:	90                   	nop
c000d2d8:	90                   	nop
c000d2d9:	eb 71                	jmp    c000d34c <tcp_receive+0x1694>
c000d2db:	90                   	nop
c000d2dc:	90                   	nop
c000d2dd:	eb 6d                	jmp    c000d34c <tcp_receive+0x1694>
c000d2df:	90                   	nop
c000d2e0:	90                   	nop
c000d2e1:	eb 69                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e3:	90                   	nop
c000d2e4:	90                   	nop
c000d2e5:	eb 65                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e7:	90                   	nop
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2ef:	e8 20 2a 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	eb 53                	jmp    c000d34c <tcp_receive+0x1694>
c000d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2fc:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d306:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d309:	29 c2                	sub    edx,eax
c000d30b:	89 d0                	mov    eax,edx
c000d30d:	78 25                	js     c000d334 <tcp_receive+0x167c>
c000d30f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d315:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d319:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d31c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d320:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d323:	0f b7 c0             	movzx  eax,ax
c000d326:	01 c8                	add    eax,ecx
c000d328:	29 c2                	sub    edx,eax
c000d32a:	89 d0                	mov    eax,edx
c000d32c:	83 c0 01             	add    eax,0x1
c000d32f:	85 c0                	test   eax,eax
c000d331:	7e 19                	jle    c000d34c <tcp_receive+0x1694>
c000d333:	90                   	nop
c000d334:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d338:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d33b:	83 c8 02             	or     eax,0x2
c000d33e:	88 c2                	mov    dl,al
c000d340:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d344:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d347:	eb 03                	jmp    c000d34c <tcp_receive+0x1694>
c000d349:	8d 76 00             	lea    esi,[esi+0x0]
c000d34c:	90                   	nop
c000d34d:	83 c4 30             	add    esp,0x30
c000d350:	5b                   	pop    ebx
c000d351:	5e                   	pop    esi
c000d352:	5f                   	pop    edi
c000d353:	c3                   	ret    

c000d354 <tcp_parseopt>:
c000d354:	83 ec 1c             	sub    esp,0x1c
c000d357:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d35c:	83 c0 14             	add    eax,0x14
c000d35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d363:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d368:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d36c:	0f b7 c0             	movzx  eax,ax
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	50                   	push   eax
c000d373:	e8 70 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	0f b7 c0             	movzx  eax,ax
c000d37e:	c1 e8 0c             	shr    eax,0xc
c000d381:	0f b7 c0             	movzx  eax,ax
c000d384:	83 f8 05             	cmp    eax,0x5
c000d387:	0f 86 6f 01 00 00    	jbe    c000d4fc <tcp_parseopt+0x1a8>
c000d38d:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d392:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d396:	0f b7 c0             	movzx  eax,ax
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 46 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	0f b7 c0             	movzx  eax,ax
c000d3a8:	c1 e8 0c             	shr    eax,0xc
c000d3ab:	83 e8 05             	sub    eax,0x5
c000d3ae:	c1 e0 02             	shl    eax,0x2
c000d3b1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d3b6:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d3bd:	e9 1e 01 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d3c2:	66 90                	xchg   ax,ax
c000d3c4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3cd:	01 d0                	add    eax,edx
c000d3cf:	8a 00                	mov    al,BYTE PTR [eax]
c000d3d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d3d5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d3da:	83 f8 01             	cmp    eax,0x1
c000d3dd:	74 15                	je     c000d3f4 <tcp_parseopt+0xa0>
c000d3df:	83 f8 02             	cmp    eax,0x2
c000d3e2:	74 24                	je     c000d408 <tcp_parseopt+0xb4>
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 85 bc 00 00 00    	jne    c000d4a8 <tcp_parseopt+0x154>
c000d3ec:	e9 0b 01 00 00       	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d3f9:	83 c0 01             	add    eax,0x1
c000d3fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d401:	e9 da 00 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d406:	66 90                	xchg   ax,ax
c000d408:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d40d:	8d 50 01             	lea    edx,[eax+0x1]
c000d410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d414:	01 d0                	add    eax,edx
c000d416:	8a 00                	mov    al,BYTE PTR [eax]
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	83 f8 04             	cmp    eax,0x4
c000d41e:	0f 85 d0 00 00 00    	jne    c000d4f4 <tcp_parseopt+0x1a0>
c000d424:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d429:	8d 50 03             	lea    edx,[eax+0x3]
c000d42c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d431:	39 c2                	cmp    edx,eax
c000d433:	0f 8d bb 00 00 00    	jge    c000d4f4 <tcp_parseopt+0x1a0>
c000d439:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d43e:	8d 50 02             	lea    edx,[eax+0x2]
c000d441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d445:	01 d0                	add    eax,edx
c000d447:	8a 00                	mov    al,BYTE PTR [eax]
c000d449:	0f b6 c0             	movzx  eax,al
c000d44c:	c1 e0 08             	shl    eax,0x8
c000d44f:	89 c2                	mov    edx,eax
c000d451:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d456:	8d 48 03             	lea    ecx,[eax+0x3]
c000d459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d45d:	01 c8                	add    eax,ecx
c000d45f:	8a 00                	mov    al,BYTE PTR [eax]
c000d461:	0f b6 c0             	movzx  eax,al
c000d464:	09 d0                	or     eax,edx
c000d466:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d46b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d470:	3d 18 02 00 00       	cmp    eax,0x218
c000d475:	77 11                	ja     c000d488 <tcp_parseopt+0x134>
c000d477:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 08                	je     c000d488 <tcp_parseopt+0x134>
c000d480:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d485:	eb 09                	jmp    c000d490 <tcp_parseopt+0x13c>
c000d487:	90                   	nop
c000d488:	b8 18 02 00 00       	mov    eax,0x218
c000d48d:	8d 76 00             	lea    esi,[esi+0x0]
c000d490:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d494:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d498:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d49d:	83 c0 04             	add    eax,0x4
c000d4a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4a5:	eb 39                	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d4a7:	90                   	nop
c000d4a8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4ad:	8d 50 01             	lea    edx,[eax+0x1]
c000d4b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b4:	01 d0                	add    eax,edx
c000d4b6:	8a 00                	mov    al,BYTE PTR [eax]
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	85 c0                	test   eax,eax
c000d4bd:	74 39                	je     c000d4f8 <tcp_parseopt+0x1a4>
c000d4bf:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4cb:	01 d0                	add    eax,edx
c000d4cd:	8a 00                	mov    al,BYTE PTR [eax]
c000d4cf:	0f b6 c0             	movzx  eax,al
c000d4d2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d4d7:	01 d0                	add    eax,edx
c000d4d9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4de:	66 90                	xchg   ax,ax
c000d4e0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d4e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d4ea:	39 c2                	cmp    edx,eax
c000d4ec:	0f 82 d2 fe ff ff    	jb     c000d3c4 <tcp_parseopt+0x70>
c000d4f2:	eb 08                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f4:	90                   	nop
c000d4f5:	eb 05                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f7:	90                   	nop
c000d4f8:	90                   	nop
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	83 c4 1c             	add    esp,0x1c
c000d4ff:	c3                   	ret    

c000d500 <tcp_listen_input>:
c000d500:	53                   	push   ebx
c000d501:	83 ec 18             	sub    esp,0x18
c000d504:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	83 e0 10             	and    eax,0x10
c000d50f:	74 4f                	je     c000d560 <tcp_listen_input+0x60>
c000d511:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d516:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d519:	0f b7 c8             	movzx  ecx,ax
c000d51c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d521:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d525:	0f b7 d0             	movzx  edx,ax
c000d528:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d52e:	0f b7 d8             	movzx  ebx,ax
c000d531:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d536:	01 c3                	add    ebx,eax
c000d538:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d53d:	83 c0 01             	add    eax,0x1
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	51                   	push   ecx
c000d544:	52                   	push   edx
c000d545:	68 90 78 03 c0       	push   0xc0037890
c000d54a:	68 98 78 03 c0       	push   0xc0037898
c000d54f:	53                   	push   ebx
c000d550:	50                   	push   eax
c000d551:	e8 5a 2f 00 00       	call   c00104b0 <tcp_rst>
c000d556:	83 c4 20             	add    esp,0x20
c000d559:	e9 a2 01 00 00       	jmp    c000d700 <tcp_listen_input+0x200>
c000d55e:	66 90                	xchg   ax,ax
c000d560:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 02             	and    eax,0x2
c000d56b:	0f 84 8f 01 00 00    	je     c000d700 <tcp_listen_input+0x200>
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d578:	0f b6 c0             	movzx  eax,al
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	50                   	push   eax
c000d57f:	e8 14 e0 ff ff       	call   c000b598 <tcp_alloc>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d58b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d590:	75 16                	jne    c000d5a8 <tcp_listen_input+0xa8>
c000d592:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000d598:	83 c0 01             	add    eax,0x1
c000d59b:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000d5a1:	b0 ff                	mov    al,0xff
c000d5a3:	e9 5c 01 00 00       	jmp    c000d704 <tcp_listen_input+0x204>
c000d5a8:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c000d5ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5b2:	89 10                	mov    DWORD PTR [eax],edx
c000d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5bf:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d5c3:	8b 15 90 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037890
c000d5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d5d0:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d5d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5dc:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e4:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d5eb:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d5f0:	8d 50 01             	lea    edx,[eax+0x1]
c000d5f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5f7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d605:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d608:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d60d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d615:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d624:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d628:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d62d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d634:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d642:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d649:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d650:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d657:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d65a:	83 e0 8c             	and    eax,0xffffff8c
c000d65d:	88 c2                	mov    dl,al
c000d65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d663:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d666:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000d66c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d670:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d677:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000d67c:	e8 33 36 00 00       	call   c0010cb4 <tcp_timer_needed>
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d688:	e8 c7 fc ff ff       	call   c000d354 <tcp_parseopt>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	8d 50 04             	lea    edx,[eax+0x4]
c000d697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d69b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d69e:	0f b7 c0             	movzx  eax,ax
c000d6a1:	83 ec 08             	sub    esp,0x8
c000d6a4:	52                   	push   edx
c000d6a5:	50                   	push   eax
c000d6a6:	e8 ad e0 ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b2:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6b6:	83 ec 08             	sub    esp,0x8
c000d6b9:	6a 12                	push   0x12
c000d6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6bf:	e8 c4 22 00 00       	call   c000f988 <tcp_enqueue_flags>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d6cb:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d6d0:	85 c0                	test   eax,eax
c000d6d2:	74 18                	je     c000d6ec <tcp_listen_input+0x1ec>
c000d6d4:	83 ec 08             	sub    esp,0x8
c000d6d7:	6a 00                	push   0x0
c000d6d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6dd:	e8 9e db ff ff       	call   c000b280 <tcp_abandon>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d6e9:	eb 19                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6eb:	90                   	nop
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6f3:	e8 2c 29 00 00       	call   c0010024 <tcp_output>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	eb 07                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d700:	b0 00                	mov    al,0x0
c000d702:	66 90                	xchg   ax,ax
c000d704:	83 c4 18             	add    esp,0x18
c000d707:	5b                   	pop    ebx
c000d708:	c3                   	ret    
c000d709:	8d 76 00             	lea    esi,[esi+0x0]

c000d70c <tcp_process>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 18             	sub    esp,0x18
c000d710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d715:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d71a:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d71f:	0f b6 c0             	movzx  eax,al
c000d722:	83 e0 04             	and    eax,0x4
c000d725:	0f 84 bd 00 00 00    	je     c000d7e8 <tcp_process+0xdc>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d732:	83 f8 02             	cmp    eax,0x2
c000d735:	75 19                	jne    c000d750 <tcp_process+0x44>
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d73e:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d743:	39 c2                	cmp    edx,eax
c000d745:	75 45                	jne    c000d78c <tcp_process+0x80>
c000d747:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d74c:	eb 3e                	jmp    c000d78c <tcp_process+0x80>
c000d74e:	66 90                	xchg   ax,ax
c000d750:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d75d:	29 c2                	sub    edx,eax
c000d75f:	89 d0                	mov    eax,edx
c000d761:	78 29                	js     c000d78c <tcp_process+0x80>
c000d763:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d774:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	01 c8                	add    eax,ecx
c000d77c:	29 c2                	sub    edx,eax
c000d77e:	89 d0                	mov    eax,edx
c000d780:	85 c0                	test   eax,eax
c000d782:	7f 08                	jg     c000d78c <tcp_process+0x80>
c000d784:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d789:	8d 76 00             	lea    esi,[esi+0x0]
c000d78c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d791:	85 c0                	test   eax,eax
c000d793:	74 4b                	je     c000d7e0 <tcp_process+0xd4>
c000d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d799:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d79c:	85 c0                	test   eax,eax
c000d79e:	75 18                	jne    c000d7b8 <tcp_process+0xac>
c000d7a0:	83 ec 08             	sub    esp,0x8
c000d7a3:	68 b0 0b 03 c0       	push   0xc0030bb0
c000d7a8:	68 66 01 03 c0       	push   0xc0030166
c000d7ad:	e8 16 27 01 00       	call   c001fec8 <CPrintf>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7b8:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000d7bd:	83 c8 08             	or     eax,0x8
c000d7c0:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d7cc:	83 e0 fe             	and    eax,0xfffffffe
c000d7cf:	88 c2                	mov    dl,al
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d7d8:	b0 f5                	mov    al,0xf5
c000d7da:	e9 bd 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7df:	90                   	nop
c000d7e0:	b0 00                	mov    al,0x0
c000d7e2:	e9 b5 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7e7:	90                   	nop
c000d7e8:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d7ed:	0f b6 c0             	movzx  eax,al
c000d7f0:	83 e0 02             	and    eax,0x2
c000d7f3:	74 33                	je     c000d828 <tcp_process+0x11c>
c000d7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d7fc:	83 f8 02             	cmp    eax,0x2
c000d7ff:	74 27                	je     c000d828 <tcp_process+0x11c>
c000d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d808:	83 f8 03             	cmp    eax,0x3
c000d80b:	74 1b                	je     c000d828 <tcp_process+0x11c>
c000d80d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d811:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d814:	83 c8 02             	or     eax,0x2
c000d817:	88 c2                	mov    dl,al
c000d819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d820:	b0 00                	mov    al,0x0
c000d822:	e9 75 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d827:	90                   	nop
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d82f:	0f b6 c0             	movzx  eax,al
c000d832:	83 e0 10             	and    eax,0x10
c000d835:	75 0d                	jne    c000d844 <tcp_process+0x138>
c000d837:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000d83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d841:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d848:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d856:	e8 f9 fa ff ff       	call   c000d354 <tcp_parseopt>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d865:	83 f8 09             	cmp    eax,0x9
c000d868:	0f 87 0a 08 00 00    	ja     c000e078 <tcp_process+0x96c>
c000d86e:	8b 04 85 58 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2a8]
c000d875:	ff e0                	jmp    eax
c000d877:	90                   	nop
c000d878:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d87d:	0f b6 c0             	movzx  eax,al
c000d880:	83 e0 10             	and    eax,0x10
c000d883:	0f 84 ff 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d889:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d88e:	0f b6 c0             	movzx  eax,al
c000d891:	83 e0 02             	and    eax,0x2
c000d894:	0f 84 ee 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d8a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a7:	83 ec 0c             	sub    esp,0xc
c000d8aa:	50                   	push   eax
c000d8ab:	e8 5c 33 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8b6:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d8bb:	39 c2                	cmp    edx,eax
c000d8bd:	0f 85 c5 01 00 00    	jne    c000da88 <tcp_process+0x37c>
c000d8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c7:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d8cb:	83 c0 01             	add    eax,0x1
c000d8ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8d2:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d8d6:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d8db:	8d 50 01             	lea    edx,[eax+0x1]
c000d8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d8f3:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fd:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d900:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d905:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d90d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d911:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d916:	8d 50 ff             	lea    edx,[eax-0x1]
c000d919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91d:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92f:	8d 50 04             	lea    edx,[eax+0x4]
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d939:	0f b7 c0             	movzx  eax,ax
c000d93c:	83 ec 08             	sub    esp,0x8
c000d93f:	52                   	push   edx
c000d940:	50                   	push   eax
c000d941:	e8 12 de ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d94d:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d958:	89 c2                	mov    edx,eax
c000d95a:	c1 e2 02             	shl    edx,0x2
c000d95d:	01 d0                	add    eax,edx
c000d95f:	d1 e0                	shl    eax,1
c000d961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d965:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d971:	0f b7 c0             	movzx  eax,ax
c000d974:	83 f8 01             	cmp    eax,0x1
c000d977:	75 0b                	jne    c000d984 <tcp_process+0x278>
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d980:	d1 e0                	shl    eax,1
c000d982:	eb 08                	jmp    c000d98c <tcp_process+0x280>
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98b:	90                   	nop
c000d98c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d990:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d998:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d99b:	0f b7 c0             	movzx  eax,ax
c000d99e:	85 c0                	test   eax,eax
c000d9a0:	75 16                	jne    c000d9b8 <tcp_process+0x2ac>
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	68 13 0d 03 c0       	push   0xc0030d13
c000d9aa:	68 66 01 03 c0       	push   0xc0030166
c000d9af:	e8 14 25 01 00       	call   c001fec8 <CPrintf>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	90                   	nop
c000d9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d9bf:	83 e8 01             	sub    eax,0x1
c000d9c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9c6:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9e9:	85 c0                	test   eax,eax
c000d9eb:	75 0f                	jne    c000d9fc <tcp_process+0x2f0>
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d9f7:	eb 17                	jmp    c000da10 <tcp_process+0x304>
c000d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da00:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da0e:	66 90                	xchg   ax,ax
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da17:	e8 50 c7 ff ff       	call   c000a16c <tcp_seg_free>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da23:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da29:	85 c0                	test   eax,eax
c000da2b:	74 27                	je     c000da54 <tcp_process+0x348>
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da3b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da3e:	83 ec 04             	sub    esp,0x4
c000da41:	6a 00                	push   0x0
c000da43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da47:	52                   	push   edx
c000da48:	ff d0                	call   eax
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da51:	eb 09                	jmp    c000da5c <tcp_process+0x350>
c000da53:	90                   	nop
c000da54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000da59:	8d 76 00             	lea    esi,[esi+0x0]
c000da5c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da61:	83 f8 f6             	cmp    eax,0xfffffff6
c000da64:	75 0a                	jne    c000da70 <tcp_process+0x364>
c000da66:	b0 f6                	mov    al,0xf6
c000da68:	e9 2f 06 00 00       	jmp    c000e09c <tcp_process+0x990>
c000da6d:	8d 76 00             	lea    esi,[esi+0x0]
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da77:	83 c8 02             	or     eax,0x2
c000da7a:	88 c2                	mov    dl,al
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da83:	e9 f4 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000da88:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000da8d:	0f b6 c0             	movzx  eax,al
c000da90:	83 e0 10             	and    eax,0x10
c000da93:	0f 84 e3 05 00 00    	je     c000e07c <tcp_process+0x970>
c000da99:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000da9e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000daa1:	0f b7 c8             	movzx  ecx,ax
c000daa4:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000daa9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000daad:	0f b7 d0             	movzx  edx,ax
c000dab0:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000dab6:	0f b7 d8             	movzx  ebx,ax
c000dab9:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dabe:	01 c3                	add    ebx,eax
c000dac0:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dac5:	83 ec 08             	sub    esp,0x8
c000dac8:	51                   	push   ecx
c000dac9:	52                   	push   edx
c000daca:	68 90 78 03 c0       	push   0xc0037890
c000dacf:	68 98 78 03 c0       	push   0xc0037898
c000dad4:	53                   	push   ebx
c000dad5:	50                   	push   eax
c000dad6:	e8 d5 29 00 00       	call   c00104b0 <tcp_rst>
c000dadb:	83 c4 20             	add    esp,0x20
c000dade:	e9 99 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000dae3:	90                   	nop
c000dae4:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dae9:	0f b6 c0             	movzx  eax,al
c000daec:	83 e0 10             	and    eax,0x10
c000daef:	0f 84 a7 01 00 00    	je     c000dc9c <tcp_process+0x590>
c000daf5:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daff:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db02:	29 c2                	sub    edx,eax
c000db04:	89 d0                	mov    eax,edx
c000db06:	83 e8 01             	sub    eax,0x1
c000db09:	0f 88 41 01 00 00    	js     c000dc50 <tcp_process+0x544>
c000db0f:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db1c:	29 c2                	sub    edx,eax
c000db1e:	89 d0                	mov    eax,edx
c000db20:	85 c0                	test   eax,eax
c000db22:	0f 8f 28 01 00 00    	jg     c000dc50 <tcp_process+0x544>
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db3a:	85 c0                	test   eax,eax
c000db3c:	75 16                	jne    c000db54 <tcp_process+0x448>
c000db3e:	83 ec 08             	sub    esp,0x8
c000db41:	68 29 0d 03 c0       	push   0xc0030d29
c000db46:	68 66 01 03 c0       	push   0xc0030166
c000db4b:	e8 78 23 01 00       	call   c001fec8 <CPrintf>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db5b:	85 c0                	test   eax,eax
c000db5d:	74 25                	je     c000db84 <tcp_process+0x478>
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db6a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000db6d:	83 ec 04             	sub    esp,0x4
c000db70:	6a 00                	push   0x0
c000db72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db76:	52                   	push   edx
c000db77:	ff d0                	call   eax
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000db80:	eb 0a                	jmp    c000db8c <tcp_process+0x480>
c000db82:	66 90                	xchg   ax,ax
c000db84:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db91:	85 c0                	test   eax,eax
c000db93:	74 23                	je     c000dbb8 <tcp_process+0x4ac>
c000db95:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db9a:	83 f8 f6             	cmp    eax,0xfffffff6
c000db9d:	74 11                	je     c000dbb0 <tcp_process+0x4a4>
c000db9f:	83 ec 0c             	sub    esp,0xc
c000dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dba6:	e8 69 d8 ff ff       	call   c000b414 <tcp_abort>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	66 90                	xchg   ax,ax
c000dbb0:	b0 f6                	mov    al,0xf6
c000dbb2:	e9 e5 04 00 00       	jmp    c000e09c <tcp_process+0x990>
c000dbb7:	90                   	nop
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dbc0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dbc5:	83 ec 0c             	sub    esp,0xc
c000dbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcc:	e8 e7 e0 ff ff       	call   c000bcb8 <tcp_receive>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbdb:	0f b7 c0             	movzx  eax,ax
c000dbde:	85 c0                	test   eax,eax
c000dbe0:	74 12                	je     c000dbf4 <tcp_process+0x4e8>
c000dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbe9:	83 e8 01             	sub    eax,0x1
c000dbec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbf0:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000dbf4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dbf9:	83 f8 01             	cmp    eax,0x1
c000dbfc:	75 0e                	jne    c000dc0c <tcp_process+0x500>
c000dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc05:	d1 e0                	shl    eax,1
c000dc07:	eb 0b                	jmp    c000dc14 <tcp_process+0x508>
c000dc09:	8d 76 00             	lea    esi,[esi+0x0]
c000dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc13:	90                   	nop
c000dc14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc18:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc1c:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dc21:	0f b6 c0             	movzx  eax,al
c000dc24:	83 e0 20             	and    eax,0x20
c000dc27:	0f 84 ab 00 00 00    	je     c000dcd8 <tcp_process+0x5cc>
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc34:	83 c8 02             	or     eax,0x2
c000dc37:	88 c2                	mov    dl,al
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc4b:	e9 88 00 00 00       	jmp    c000dcd8 <tcp_process+0x5cc>
c000dc50:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000dc55:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dc58:	0f b7 c8             	movzx  ecx,ax
c000dc5b:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000dc60:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dc64:	0f b7 d0             	movzx  edx,ax
c000dc67:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000dc6d:	0f b7 d8             	movzx  ebx,ax
c000dc70:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dc75:	01 c3                	add    ebx,eax
c000dc77:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dc7c:	83 ec 08             	sub    esp,0x8
c000dc7f:	51                   	push   ecx
c000dc80:	52                   	push   edx
c000dc81:	68 90 78 03 c0       	push   0xc0037890
c000dc86:	68 98 78 03 c0       	push   0xc0037898
c000dc8b:	53                   	push   ebx
c000dc8c:	50                   	push   eax
c000dc8d:	e8 1e 28 00 00       	call   c00104b0 <tcp_rst>
c000dc92:	83 c4 20             	add    esp,0x20
c000dc95:	e9 e6 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dca1:	0f b6 c0             	movzx  eax,al
c000dca4:	83 e0 02             	and    eax,0x2
c000dca7:	0f 84 d3 03 00 00    	je     c000e080 <tcp_process+0x974>
c000dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c000dcb7:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dcbc:	39 c2                	cmp    edx,eax
c000dcbe:	0f 85 bc 03 00 00    	jne    c000e080 <tcp_process+0x974>
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dccb:	e8 e4 29 00 00       	call   c00106b4 <tcp_rexmit>
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	e9 a8 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcd8:	90                   	nop
c000dcd9:	e9 a2 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dce7:	e8 cc df ff ff       	call   c000bcb8 <tcp_receive>
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dcf4:	0f b6 c0             	movzx  eax,al
c000dcf7:	83 e0 20             	and    eax,0x20
c000dcfa:	0f 84 84 03 00 00    	je     c000e084 <tcp_process+0x978>
c000dd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd07:	83 c8 02             	or     eax,0x2
c000dd0a:	88 c2                	mov    dl,al
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd17:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd1e:	e9 61 03 00 00       	jmp    c000e084 <tcp_process+0x978>
c000dd23:	90                   	nop
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd2b:	e8 88 df ff ff       	call   c000bcb8 <tcp_receive>
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dd38:	0f b6 c0             	movzx  eax,al
c000dd3b:	83 e0 20             	and    eax,0x20
c000dd3e:	0f 84 08 01 00 00    	je     c000de4c <tcp_process+0x740>
c000dd44:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dd49:	0f b6 c0             	movzx  eax,al
c000dd4c:	83 e0 10             	and    eax,0x10
c000dd4f:	0f 84 d3 00 00 00    	je     c000de28 <tcp_process+0x71c>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd5c:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dd61:	39 c2                	cmp    edx,eax
c000dd63:	0f 85 bf 00 00 00    	jne    c000de28 <tcp_process+0x71c>
c000dd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd70:	83 c8 02             	or     eax,0x2
c000dd73:	88 c2                	mov    dl,al
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd83:	e8 48 c5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dd90:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd94:	75 12                	jne    c000dda8 <tcp_process+0x69c>
c000dd96:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dd9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd9e:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000dda3:	eb 4b                	jmp    c000ddf0 <tcp_process+0x6e4>
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ddad:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ddb2:	eb 30                	jmp    c000dde4 <tcp_process+0x6d8>
c000ddb4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ddb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddc0:	75 12                	jne    c000ddd4 <tcp_process+0x6c8>
c000ddc2:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ddc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddcb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddd1:	eb 1d                	jmp    c000ddf0 <tcp_process+0x6e4>
c000ddd3:	90                   	nop
c000ddd4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ddd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dddc:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dde9:	85 c0                	test   eax,eax
c000ddeb:	75 c7                	jne    c000ddb4 <tcp_process+0x6a8>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddff:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de06:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de17:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000de1c:	e8 93 2e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000de21:	e9 62 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de26:	66 90                	xchg   ax,ax
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de2f:	83 c8 02             	or     eax,0x2
c000de32:	88 c2                	mov    dl,al
c000de34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de38:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000de3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000de46:	e9 3d 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de4b:	90                   	nop
c000de4c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000de51:	0f b6 c0             	movzx  eax,al
c000de54:	83 e0 10             	and    eax,0x10
c000de57:	0f 84 2b 02 00 00    	je     c000e088 <tcp_process+0x97c>
c000de5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de61:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de64:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000de69:	39 c2                	cmp    edx,eax
c000de6b:	0f 85 17 02 00 00    	jne    c000e088 <tcp_process+0x97c>
c000de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de75:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000de7c:	e9 07 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	e8 28 de ff ff       	call   c000bcb8 <tcp_receive>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000de98:	0f b6 c0             	movzx  eax,al
c000de9b:	83 e0 20             	and    eax,0x20
c000de9e:	0f 84 e8 01 00 00    	je     c000e08c <tcp_process+0x980>
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000deab:	83 c8 02             	or     eax,0x2
c000deae:	88 c2                	mov    dl,al
c000deb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deb7:	83 ec 0c             	sub    esp,0xc
c000deba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000debe:	e8 0d c4 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000decb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000decf:	75 0f                	jne    c000dee0 <tcp_process+0x7d4>
c000ded1:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ded6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded9:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000dede:	eb 48                	jmp    c000df28 <tcp_process+0x81c>
c000dee0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dee5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000deea:	eb 30                	jmp    c000df1c <tcp_process+0x810>
c000deec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000def1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000def4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000def8:	75 12                	jne    c000df0c <tcp_process+0x800>
c000defa:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000deff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df03:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df09:	eb 1d                	jmp    c000df28 <tcp_process+0x81c>
c000df0b:	90                   	nop
c000df0c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df14:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000df19:	8d 76 00             	lea    esi,[esi+0x0]
c000df1c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df21:	85 c0                	test   eax,eax
c000df23:	75 c7                	jne    c000deec <tcp_process+0x7e0>
c000df25:	8d 76 00             	lea    esi,[esi+0x0]
c000df28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df37:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df3e:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000df44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df4f:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000df54:	e8 5b 2d 00 00       	call   c0010cb4 <tcp_timer_needed>
c000df59:	e9 2e 01 00 00       	jmp    c000e08c <tcp_process+0x980>
c000df5e:	66 90                	xchg   ax,ax
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df67:	e8 4c dd ff ff       	call   c000bcb8 <tcp_receive>
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000df74:	0f b6 c0             	movzx  eax,al
c000df77:	83 e0 10             	and    eax,0x10
c000df7a:	0f 84 10 01 00 00    	je     c000e090 <tcp_process+0x984>
c000df80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df84:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df87:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000df8c:	39 c2                	cmp    edx,eax
c000df8e:	0f 85 fc 00 00 00    	jne    c000e090 <tcp_process+0x984>
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df9b:	e8 30 c3 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dfa8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfac:	75 12                	jne    c000dfc0 <tcp_process+0x8b4>
c000dfae:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dfb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfb6:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000dfbb:	eb 4b                	jmp    c000e008 <tcp_process+0x8fc>
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000dfc5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000dfca:	eb 30                	jmp    c000dffc <tcp_process+0x8f0>
c000dfcc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dfd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfd4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfd8:	75 12                	jne    c000dfec <tcp_process+0x8e0>
c000dfda:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dfdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfe3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dfe6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfe9:	eb 1d                	jmp    c000e008 <tcp_process+0x8fc>
c000dfeb:	90                   	nop
c000dfec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000dff1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dff4:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000dff9:	8d 76 00             	lea    esi,[esi+0x0]
c000dffc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000e001:	85 c0                	test   eax,eax
c000e003:	75 c7                	jne    c000dfcc <tcp_process+0x8c0>
c000e005:	8d 76 00             	lea    esi,[esi+0x0]
c000e008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e017:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e01e:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000e024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e028:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e02f:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000e034:	e8 7b 2c 00 00       	call   c0010cb4 <tcp_timer_needed>
c000e039:	eb 55                	jmp    c000e090 <tcp_process+0x984>
c000e03b:	90                   	nop
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e043:	e8 70 dc ff ff       	call   c000bcb8 <tcp_receive>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e050:	0f b6 c0             	movzx  eax,al
c000e053:	83 e0 10             	and    eax,0x10
c000e056:	74 3c                	je     c000e094 <tcp_process+0x988>
c000e058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e05c:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e05f:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000e064:	39 c2                	cmp    edx,eax
c000e066:	75 2c                	jne    c000e094 <tcp_process+0x988>
c000e068:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e06d:	83 c8 10             	or     eax,0x10
c000e070:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000e075:	eb 1d                	jmp    c000e094 <tcp_process+0x988>
c000e077:	90                   	nop
c000e078:	90                   	nop
c000e079:	eb 1d                	jmp    c000e098 <tcp_process+0x98c>
c000e07b:	90                   	nop
c000e07c:	90                   	nop
c000e07d:	eb 19                	jmp    c000e098 <tcp_process+0x98c>
c000e07f:	90                   	nop
c000e080:	90                   	nop
c000e081:	eb 15                	jmp    c000e098 <tcp_process+0x98c>
c000e083:	90                   	nop
c000e084:	90                   	nop
c000e085:	eb 11                	jmp    c000e098 <tcp_process+0x98c>
c000e087:	90                   	nop
c000e088:	90                   	nop
c000e089:	eb 0d                	jmp    c000e098 <tcp_process+0x98c>
c000e08b:	90                   	nop
c000e08c:	90                   	nop
c000e08d:	eb 09                	jmp    c000e098 <tcp_process+0x98c>
c000e08f:	90                   	nop
c000e090:	90                   	nop
c000e091:	eb 05                	jmp    c000e098 <tcp_process+0x98c>
c000e093:	90                   	nop
c000e094:	90                   	nop
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	b0 00                	mov    al,0x0
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	83 c4 18             	add    esp,0x18
c000e09f:	5b                   	pop    ebx
c000e0a0:	c3                   	ret    
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e0a4 <tcp_input>:
c000e0a4:	53                   	push   ebx
c000e0a5:	83 ec 18             	sub    esp,0x18
c000e0a8:	66 a1 b2 77 03 c0    	mov    ax,ds:0xc00377b2
c000e0ae:	83 c0 01             	add    eax,0x1
c000e0b1:	66 a3 b2 77 03 c0    	mov    ds:0xc00377b2,ax
c000e0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0be:	a3 b8 b8 03 c0       	mov    ds:0xc003b8b8,eax
c000e0c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c7:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e0ca:	a1 b8 b8 03 c0       	mov    eax,ds:0xc003b8b8
c000e0cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0d2:	0f b7 c0             	movzx  eax,ax
c000e0d5:	83 ec 0c             	sub    esp,0xc
c000e0d8:	50                   	push   eax
c000e0d9:	e8 0a 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0de:	83 c4 10             	add    esp,0x10
c000e0e1:	0f b7 c0             	movzx  eax,ax
c000e0e4:	c1 e8 08             	shr    eax,0x8
c000e0e7:	0f b7 c0             	movzx  eax,ax
c000e0ea:	83 e0 0f             	and    eax,0xf
c000e0ed:	c1 e0 02             	shl    eax,0x2
c000e0f0:	01 d8                	add    eax,ebx
c000e0f2:	a3 bc b8 03 c0       	mov    ds:0xc003b8bc,eax
c000e0f7:	a1 b8 b8 03 c0       	mov    eax,ds:0xc003b8b8
c000e0fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0ff:	0f b7 c0             	movzx  eax,ax
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	50                   	push   eax
c000e106:	e8 dd 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	0f b7 c0             	movzx  eax,ax
c000e111:	c1 e8 08             	shr    eax,0x8
c000e114:	83 e0 0f             	and    eax,0xf
c000e117:	c1 e0 02             	shl    eax,0x2
c000e11a:	f7 d8                	neg    eax
c000e11c:	98                   	cwde   
c000e11d:	83 ec 08             	sub    esp,0x8
c000e120:	50                   	push   eax
c000e121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e125:	e8 2e a2 ff ff       	call   c0008358 <pbuf_header>
c000e12a:	83 c4 10             	add    esp,0x10
c000e12d:	0f b6 c0             	movzx  eax,al
c000e130:	85 c0                	test   eax,eax
c000e132:	75 10                	jne    c000e144 <tcp_input+0xa0>
c000e134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e138:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e13b:	0f b7 c0             	movzx  eax,ax
c000e13e:	83 f8 13             	cmp    eax,0x13
c000e141:	77 35                	ja     c000e178 <tcp_input+0xd4>
c000e143:	90                   	nop
c000e144:	66 a1 ba 77 03 c0    	mov    ax,ds:0xc00377ba
c000e14a:	83 c0 01             	add    eax,0x1
c000e14d:	66 a3 ba 77 03 c0    	mov    ds:0xc00377ba,ax
c000e153:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e159:	83 c0 01             	add    eax,0x1
c000e15c:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e162:	83 ec 0c             	sub    esp,0xc
c000e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e169:	e8 86 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	e9 fa 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e176:	66 90                	xchg   ax,ax
c000e178:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e17d:	83 ec 08             	sub    esp,0x8
c000e180:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e184:	50                   	push   eax
c000e185:	e8 5e 5e 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	0f b6 c0             	movzx  eax,al
c000e190:	85 c0                	test   eax,eax
c000e192:	75 14                	jne    c000e1a8 <tcp_input+0x104>
c000e194:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e199:	25 f0 00 00 00       	and    eax,0xf0
c000e19e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e1a3:	75 37                	jne    c000e1dc <tcp_input+0x138>
c000e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a8:	66 a1 c0 77 03 c0    	mov    ax,ds:0xc00377c0
c000e1ae:	83 c0 01             	add    eax,0x1
c000e1b1:	66 a3 c0 77 03 c0    	mov    ds:0xc00377c0,ax
c000e1b7:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e1bd:	83 c0 01             	add    eax,0x1
c000e1c0:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e1c6:	83 ec 0c             	sub    esp,0xc
c000e1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1cd:	e8 22 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	e9 96 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e1da:	66 90                	xchg   ax,ax
c000e1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1e3:	0f b7 c0             	movzx  eax,ax
c000e1e6:	83 ec 0c             	sub    esp,0xc
c000e1e9:	50                   	push   eax
c000e1ea:	6a 06                	push   0x6
c000e1ec:	68 98 78 03 c0       	push   0xc0037898
c000e1f1:	68 90 78 03 c0       	push   0xc0037890
c000e1f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e1fa:	e8 11 51 00 00       	call   c0013310 <inet_chksum_pseudo>
c000e1ff:	83 c4 20             	add    esp,0x20
c000e202:	0f b7 c0             	movzx  eax,ax
c000e205:	85 c0                	test   eax,eax
c000e207:	74 33                	je     c000e23c <tcp_input+0x198>
c000e209:	66 a1 b8 77 03 c0    	mov    ax,ds:0xc00377b8
c000e20f:	83 c0 01             	add    eax,0x1
c000e212:	66 a3 b8 77 03 c0    	mov    ds:0xc00377b8,ax
c000e218:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e227:	83 ec 0c             	sub    esp,0xc
c000e22a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e22e:	e8 c1 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e233:	83 c4 10             	add    esp,0x10
c000e236:	e9 35 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e23b:	90                   	nop
c000e23c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e241:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e245:	0f b7 c0             	movzx  eax,ax
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	50                   	push   eax
c000e24c:	e8 97 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	0f b7 c0             	movzx  eax,ax
c000e257:	c1 e8 0c             	shr    eax,0xc
c000e25a:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e25e:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e263:	ba 00 00 00 00       	mov    edx,0x0
c000e268:	89 d1                	mov    ecx,edx
c000e26a:	29 c1                	sub    ecx,eax
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	c1 e0 02             	shl    eax,0x2
c000e271:	98                   	cwde   
c000e272:	83 ec 08             	sub    esp,0x8
c000e275:	50                   	push   eax
c000e276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e27a:	e8 d9 a0 ff ff       	call   c0008358 <pbuf_header>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	0f b6 c0             	movzx  eax,al
c000e285:	85 c0                	test   eax,eax
c000e287:	74 33                	je     c000e2bc <tcp_input+0x218>
c000e289:	66 a1 ba 77 03 c0    	mov    ax,ds:0xc00377ba
c000e28f:	83 c0 01             	add    eax,0x1
c000e292:	66 a3 ba 77 03 c0    	mov    ds:0xc00377ba,ax
c000e298:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e29e:	83 c0 01             	add    eax,0x1
c000e2a1:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ae:	e8 41 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	e9 b5 08 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e2bb:	90                   	nop
c000e2bc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e2c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	50                   	push   eax
c000e2d1:	e8 12 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	66 89 03             	mov    WORD PTR [ebx],ax
c000e2dc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e2e1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2e5:	0f b7 c0             	movzx  eax,ax
c000e2e8:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e2ee:	83 ec 0c             	sub    esp,0xc
c000e2f1:	50                   	push   eax
c000e2f2:	e8 f1 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e2fe:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e306:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	50                   	push   eax
c000e310:	e8 f7 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e31b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e31e:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000e323:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e32b:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	e8 d2 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e343:	a3 b0 b8 03 c0       	mov    ds:0xc003b8b0,eax
c000e348:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e34d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e351:	0f b7 c0             	movzx  eax,ax
c000e354:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	50                   	push   eax
c000e35e:	e8 85 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e36a:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e36f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e373:	0f b7 c0             	movzx  eax,ax
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	50                   	push   eax
c000e37a:	e8 69 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 e0 3f             	and    eax,0x3f
c000e385:	a2 ac b8 03 c0       	mov    ds:0xc003b8ac,al
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e391:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e396:	0f b6 c0             	movzx  eax,al
c000e399:	83 e0 03             	and    eax,0x3
c000e39c:	0f 95 c0             	setne  al
c000e39f:	0f b6 c0             	movzx  eax,al
c000e3a2:	01 d0                	add    eax,edx
c000e3a4:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000e3aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3b2:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000e3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bb:	e9 50 01 00 00       	jmp    c000e510 <tcp_input+0x46c>
c000e3c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	75 15                	jne    c000e3e0 <tcp_input+0x33c>
c000e3cb:	83 ec 08             	sub    esp,0x8
c000e3ce:	68 d0 0b 03 c0       	push   0xc0030bd0
c000e3d3:	68 66 01 03 c0       	push   0xc0030166
c000e3d8:	e8 eb 1a 01 00       	call   c001fec8 <CPrintf>
c000e3dd:	83 c4 10             	add    esp,0x10
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3e7:	83 f8 0a             	cmp    eax,0xa
c000e3ea:	75 18                	jne    c000e404 <tcp_input+0x360>
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	68 f8 0b 03 c0       	push   0xc0030bf8
c000e3f4:	68 66 01 03 c0       	push   0xc0030166
c000e3f9:	e8 ca 1a 01 00       	call   c001fec8 <CPrintf>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e40b:	83 f8 01             	cmp    eax,0x1
c000e40e:	75 18                	jne    c000e428 <tcp_input+0x384>
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	68 24 0c 03 c0       	push   0xc0030c24
c000e418:	68 66 01 03 c0       	push   0xc0030166
c000e41d:	e8 a6 1a 01 00       	call   c001fec8 <CPrintf>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	8d 76 00             	lea    esi,[esi+0x0]
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e430:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e435:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e438:	0f b7 d2             	movzx  edx,dx
c000e43b:	0f b7 c0             	movzx  eax,ax
c000e43e:	39 c2                	cmp    edx,eax
c000e440:	0f 85 b6 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e44d:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e452:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e456:	0f b7 d2             	movzx  edx,dx
c000e459:	0f b7 c0             	movzx  eax,ax
c000e45c:	39 c2                	cmp    edx,eax
c000e45e:	0f 85 98 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c000e470:	39 c2                	cmp    edx,eax
c000e472:	0f 85 84 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e47c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e47e:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e483:	39 c2                	cmp    edx,eax
c000e485:	75 75                	jne    c000e4fc <tcp_input+0x458>
c000e487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e48b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e48e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e492:	75 18                	jne    c000e4ac <tcp_input+0x408>
c000e494:	83 ec 08             	sub    esp,0x8
c000e497:	68 4c 0c 03 c0       	push   0xc0030c4c
c000e49c:	68 66 01 03 c0       	push   0xc0030166
c000e4a1:	e8 22 1a 01 00       	call   c001fec8 <CPrintf>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4b1:	74 25                	je     c000e4d8 <tcp_input+0x434>
c000e4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4c1:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000e4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d2:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000e4d7:	90                   	nop
c000e4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4df:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e4e3:	75 3b                	jne    c000e520 <tcp_input+0x47c>
c000e4e5:	83 ec 08             	sub    esp,0x8
c000e4e8:	68 78 0c 03 c0       	push   0xc0030c78
c000e4ed:	68 66 01 03 c0       	push   0xc0030166
c000e4f2:	e8 d1 19 01 00       	call   c001fec8 <CPrintf>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	eb 24                	jmp    c000e520 <tcp_input+0x47c>
c000e4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e50f:	90                   	nop
c000e510:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e515:	0f 85 a5 fe ff ff    	jne    c000e3c0 <tcp_input+0x31c>
c000e51b:	eb 07                	jmp    c000e524 <tcp_input+0x480>
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	90                   	nop
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e529:	0f 85 89 01 00 00    	jne    c000e6b8 <tcp_input+0x614>
c000e52f:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000e534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e538:	e9 ab 00 00 00       	jmp    c000e5e8 <tcp_input+0x544>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e544:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e547:	83 f8 0a             	cmp    eax,0xa
c000e54a:	74 18                	je     c000e564 <tcp_input+0x4c0>
c000e54c:	83 ec 08             	sub    esp,0x8
c000e54f:	68 a4 0c 03 c0       	push   0xc0030ca4
c000e554:	68 66 01 03 c0       	push   0xc0030166
c000e559:	e8 6a 19 01 00       	call   c001fec8 <CPrintf>
c000e55e:	83 c4 10             	add    esp,0x10
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e568:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e56c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e571:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e574:	0f b7 d2             	movzx  edx,dx
c000e577:	0f b7 c0             	movzx  eax,ax
c000e57a:	39 c2                	cmp    edx,eax
c000e57c:	75 5e                	jne    c000e5dc <tcp_input+0x538>
c000e57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e585:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e58a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e58e:	0f b7 d2             	movzx  edx,dx
c000e591:	0f b7 c0             	movzx  eax,ax
c000e594:	39 c2                	cmp    edx,eax
c000e596:	75 44                	jne    c000e5dc <tcp_input+0x538>
c000e598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e59c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e59f:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c000e5a4:	39 c2                	cmp    edx,eax
c000e5a6:	75 34                	jne    c000e5dc <tcp_input+0x538>
c000e5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ae:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e5b3:	39 c2                	cmp    edx,eax
c000e5b5:	75 25                	jne    c000e5dc <tcp_input+0x538>
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5be:	e8 81 d4 ff ff       	call   c000ba44 <tcp_timewait_input>
c000e5c3:	83 c4 10             	add    esp,0x10
c000e5c6:	83 ec 0c             	sub    esp,0xc
c000e5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5cd:	e8 22 9f ff ff       	call   c00084f4 <pbuf_free>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	e9 96 05 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e7:	90                   	nop
c000e5e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5ed:	0f 85 4d ff ff ff    	jne    c000e540 <tcp_input+0x49c>
c000e5f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5fb:	a1 78 78 03 c0       	mov    eax,ds:0xc0037878
c000e600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e604:	eb 52                	jmp    c000e658 <tcp_input+0x5b4>
c000e606:	66 90                	xchg   ax,ax
c000e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e60c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e60f:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e614:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e618:	0f b7 d2             	movzx  edx,dx
c000e61b:	0f b7 c0             	movzx  eax,ax
c000e61e:	39 c2                	cmp    edx,eax
c000e620:	75 22                	jne    c000e644 <tcp_input+0x5a0>
c000e622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e626:	8b 10                	mov    edx,DWORD PTR [eax]
c000e628:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e62d:	39 c2                	cmp    edx,eax
c000e62f:	74 2f                	je     c000e660 <tcp_input+0x5bc>
c000e631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e635:	85 c0                	test   eax,eax
c000e637:	74 27                	je     c000e660 <tcp_input+0x5bc>
c000e639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e63d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e63f:	85 c0                	test   eax,eax
c000e641:	74 1d                	je     c000e660 <tcp_input+0x5bc>
c000e643:	90                   	nop
c000e644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e65d:	75 a9                	jne    c000e608 <tcp_input+0x564>
c000e65f:	90                   	nop
c000e660:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e665:	74 51                	je     c000e6b8 <tcp_input+0x614>
c000e667:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e66c:	74 26                	je     c000e694 <tcp_input+0x5f0>
c000e66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e675:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e67c:	8b 15 78 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037878
c000e682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e68d:	a3 78 78 03 c0       	mov    ds:0xc0037878,eax
c000e692:	66 90                	xchg   ax,ax
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e69b:	e8 60 ee ff ff       	call   c000d500 <tcp_listen_input>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 ec 0c             	sub    esp,0xc
c000e6a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6aa:	e8 45 9e ff ff       	call   c00084f4 <pbuf_free>
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	e9 b9 04 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e6b7:	90                   	nop
c000e6b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e6bd:	0f 84 19 04 00 00    	je     c000eadc <tcp_input+0xa38>
c000e6c3:	c7 05 c0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c0,0x0
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d4:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000e6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6de:	a3 c4 b8 03 c0       	mov    ds:0xc003b8c4,eax
c000e6e3:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e6e8:	a3 cc b8 03 c0       	mov    ds:0xc003b8cc,eax
c000e6ed:	c7 05 a4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8a4,0x0
c000e6f7:	c6 05 a8 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b8a8,0x0
c000e6fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e702:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e708:	85 c0                	test   eax,eax
c000e70a:	0f 84 b4 00 00 00    	je     c000e7c4 <tcp_input+0x720>
c000e710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e714:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e71a:	85 c0                	test   eax,eax
c000e71c:	74 2e                	je     c000e74c <tcp_input+0x6a8>
c000e71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e722:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e72c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e736:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e739:	6a 00                	push   0x0
c000e73b:	51                   	push   ecx
c000e73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e740:	52                   	push   edx
c000e741:	ff d0                	call   eax
c000e743:	83 c4 10             	add    esp,0x10
c000e746:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e74a:	eb 20                	jmp    c000e76c <tcp_input+0x6c8>
c000e74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e750:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e756:	6a 00                	push   0x0
c000e758:	50                   	push   eax
c000e759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e75d:	6a 00                	push   0x0
c000e75f:	e8 b8 c8 ff ff       	call   c000b01c <tcp_recv_null>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e76b:	90                   	nop
c000e76c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e771:	85 c0                	test   eax,eax
c000e773:	75 13                	jne    c000e788 <tcp_input+0x6e4>
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e783:	eb 3f                	jmp    c000e7c4 <tcp_input+0x720>
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e78d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e790:	74 0e                	je     c000e7a0 <tcp_input+0x6fc>
c000e792:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000e798:	0f b7 c0             	movzx  eax,ax
c000e79b:	85 c0                	test   eax,eax
c000e79d:	74 25                	je     c000e7c4 <tcp_input+0x720>
c000e79f:	90                   	nop
c000e7a0:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e7a6:	83 c0 01             	add    eax,0x1
c000e7a9:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7b6:	e8 39 9d ff ff       	call   c00084f4 <pbuf_free>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	e9 ad 03 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e7c3:	90                   	nop
c000e7c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c8:	a3 88 78 03 c0       	mov    ds:0xc0037888,eax
c000e7cd:	83 ec 0c             	sub    esp,0xc
c000e7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d4:	e8 33 ef ff ff       	call   c000d70c <tcp_process>
c000e7d9:	83 c4 10             	add    esp,0x10
c000e7dc:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7e0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7e8:	0f 84 9a 02 00 00    	je     c000ea88 <tcp_input+0x9e4>
c000e7ee:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e7f3:	0f b6 c0             	movzx  eax,al
c000e7f6:	83 e0 08             	and    eax,0x8
c000e7f9:	74 59                	je     c000e854 <tcp_input+0x7b0>
c000e7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ff:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e805:	85 c0                	test   eax,eax
c000e807:	74 1f                	je     c000e828 <tcp_input+0x784>
c000e809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e817:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e81a:	83 ec 08             	sub    esp,0x8
c000e81d:	6a f5                	push   0xfffffff5
c000e81f:	52                   	push   edx
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	8d 76 00             	lea    esi,[esi+0x0]
c000e828:	83 ec 08             	sub    esp,0x8
c000e82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82f:	68 70 78 03 c0       	push   0xc0037870
c000e834:	e8 ff c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e843:	6a 02                	push   0x2
c000e845:	e8 ee 93 ff ff       	call   c0007c38 <memp_free>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	e9 46 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e852:	66 90                	xchg   ax,ax
c000e854:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e859:	0f b6 c0             	movzx  eax,al
c000e85c:	83 e0 10             	and    eax,0x10
c000e85f:	74 2b                	je     c000e88c <tcp_input+0x7e8>
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e868:	68 70 78 03 c0       	push   0xc0037870
c000e86d:	e8 c6 c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87c:	6a 02                	push   0x2
c000e87e:	e8 b5 93 ff ff       	call   c0007c38 <memp_free>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	e9 0d 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e88b:	90                   	nop
c000e88c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e895:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e898:	0f b7 c0             	movzx  eax,ax
c000e89b:	85 c0                	test   eax,eax
c000e89d:	74 55                	je     c000e8f4 <tcp_input+0x850>
c000e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a3:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e8a9:	85 c0                	test   eax,eax
c000e8ab:	74 2f                	je     c000e8dc <tcp_input+0x838>
c000e8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8b1:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e8b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8bb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e8be:	0f b7 c8             	movzx  ecx,ax
c000e8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e8c8:	83 ec 04             	sub    esp,0x4
c000e8cb:	51                   	push   ecx
c000e8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d0:	50                   	push   eax
c000e8d1:	ff d2                	call   edx
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8da:	eb 08                	jmp    c000e8e4 <tcp_input+0x840>
c000e8dc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8e9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8ec:	0f 84 9a 01 00 00    	je     c000ea8c <tcp_input+0x9e8>
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	0f 84 f3 00 00 00    	je     c000e9f4 <tcp_input+0x950>
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 15                	je     c000e924 <tcp_input+0x880>
c000e90f:	83 ec 08             	sub    esp,0x8
c000e912:	68 3d 0d 03 c0       	push   0xc0030d3d
c000e917:	68 66 01 03 c0       	push   0xc0030166
c000e91c:	e8 a7 15 01 00       	call   c001fec8 <CPrintf>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e928:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e92b:	0f b6 c0             	movzx  eax,al
c000e92e:	83 e0 10             	and    eax,0x10
c000e931:	74 25                	je     c000e958 <tcp_input+0x8b4>
c000e933:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	50                   	push   eax
c000e93c:	e8 b3 9b ff ff       	call   c00084f4 <pbuf_free>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	e8 c4 ca ff ff       	call   c000b414 <tcp_abort>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	e9 40 01 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e958:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e95d:	0f b6 c0             	movzx  eax,al
c000e960:	83 e0 08             	and    eax,0x8
c000e963:	74 13                	je     c000e978 <tcp_input+0x8d4>
c000e965:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e96a:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e96d:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e972:	83 ca 01             	or     edx,0x1
c000e975:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e97c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e982:	85 c0                	test   eax,eax
c000e984:	74 2a                	je     c000e9b0 <tcp_input+0x90c>
c000e986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e98a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e990:	8b 0d a4 b8 03 c0    	mov    ecx,DWORD PTR ds:0xc003b8a4
c000e996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e99a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e99d:	6a 00                	push   0x0
c000e99f:	51                   	push   ecx
c000e9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9a4:	52                   	push   edx
c000e9a5:	ff d0                	call   eax
c000e9a7:	83 c4 10             	add    esp,0x10
c000e9aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ae:	eb 1c                	jmp    c000e9cc <tcp_input+0x928>
c000e9b0:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e9b5:	6a 00                	push   0x0
c000e9b7:	50                   	push   eax
c000e9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9bc:	6a 00                	push   0x0
c000e9be:	e8 59 c6 ff ff       	call   c000b01c <tcp_recv_null>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ca:	66 90                	xchg   ax,ax
c000e9cc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9d1:	83 f8 f6             	cmp    eax,0xfffffff6
c000e9d4:	0f 84 b6 00 00 00    	je     c000ea90 <tcp_input+0x9ec>
c000e9da:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9df:	85 c0                	test   eax,eax
c000e9e1:	74 11                	je     c000e9f4 <tcp_input+0x950>
c000e9e3:	8b 15 a4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8a4
c000e9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ed:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e9f3:	90                   	nop
c000e9f4:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e9f9:	0f b6 c0             	movzx  eax,al
c000e9fc:	83 e0 20             	and    eax,0x20
c000e9ff:	74 6b                	je     c000ea6c <tcp_input+0x9c8>
c000ea01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea05:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea08:	0f b7 c0             	movzx  eax,ax
c000ea0b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea10:	74 12                	je     c000ea24 <tcp_input+0x980>
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea19:	83 c0 01             	add    eax,0x1
c000ea1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea20:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ea24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea28:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea2e:	85 c0                	test   eax,eax
c000ea30:	74 26                	je     c000ea58 <tcp_input+0x9b4>
c000ea32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea36:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea40:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea43:	6a 00                	push   0x0
c000ea45:	6a 00                	push   0x0
c000ea47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea4b:	52                   	push   edx
c000ea4c:	ff d0                	call   eax
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea55:	eb 09                	jmp    c000ea60 <tcp_input+0x9bc>
c000ea57:	90                   	nop
c000ea58:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ea5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea60:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea65:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea68:	74 2a                	je     c000ea94 <tcp_input+0x9f0>
c000ea6a:	66 90                	xchg   ax,ax
c000ea6c:	c7 05 88 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037888,0x0
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea7d:	e8 a2 15 00 00       	call   c0010024 <tcp_output>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	eb 11                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea87:	90                   	nop
c000ea88:	90                   	nop
c000ea89:	eb 0d                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8b:	90                   	nop
c000ea8c:	90                   	nop
c000ea8d:	eb 09                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8f:	90                   	nop
c000ea90:	90                   	nop
c000ea91:	eb 05                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea93:	90                   	nop
c000ea94:	90                   	nop
c000ea95:	8d 76 00             	lea    esi,[esi+0x0]
c000ea98:	c7 05 88 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037888,0x0
c000eaa2:	c7 05 a4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8a4,0x0
c000eaac:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000eab1:	85 c0                	test   eax,eax
c000eab3:	0f 84 b7 00 00 00    	je     c000eb70 <tcp_input+0xacc>
c000eab9:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	50                   	push   eax
c000eac2:	e8 2d 9a ff ff       	call   c00084f4 <pbuf_free>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	c7 05 c4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c4,0x0
c000ead4:	e9 97 00 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]
c000eadc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eae1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eae5:	0f b7 c0             	movzx  eax,ax
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	50                   	push   eax
c000eaec:	e8 f7 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eaf1:	83 c4 10             	add    esp,0x10
c000eaf4:	0f b7 c0             	movzx  eax,ax
c000eaf7:	83 e0 04             	and    eax,0x4
c000eafa:	75 64                	jne    c000eb60 <tcp_input+0xabc>
c000eafc:	66 a1 c0 77 03 c0    	mov    ax,ds:0xc00377c0
c000eb02:	83 c0 01             	add    eax,0x1
c000eb05:	66 a3 c0 77 03 c0    	mov    ds:0xc00377c0,ax
c000eb0b:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000eb11:	83 c0 01             	add    eax,0x1
c000eb14:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000eb1a:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb1f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb22:	0f b7 c8             	movzx  ecx,ax
c000eb25:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb2a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eb2e:	0f b7 d0             	movzx  edx,ax
c000eb31:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000eb37:	0f b7 d8             	movzx  ebx,ax
c000eb3a:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000eb3f:	01 c3                	add    ebx,eax
c000eb41:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000eb46:	83 ec 08             	sub    esp,0x8
c000eb49:	51                   	push   ecx
c000eb4a:	52                   	push   edx
c000eb4b:	68 90 78 03 c0       	push   0xc0037890
c000eb50:	68 98 78 03 c0       	push   0xc0037898
c000eb55:	53                   	push   ebx
c000eb56:	50                   	push   eax
c000eb57:	e8 54 19 00 00       	call   c00104b0 <tcp_rst>
c000eb5c:	83 c4 20             	add    esp,0x20
c000eb5f:	90                   	nop
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb67:	e8 88 99 ff ff       	call   c00084f4 <pbuf_free>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	90                   	nop
c000eb70:	83 c4 18             	add    esp,0x18
c000eb73:	5b                   	pop    ebx
c000eb74:	c3                   	ret    
c000eb75:	66 90                	xchg   ax,ax
c000eb77:	90                   	nop

c000eb78 <tcp_output_alloc_header>:
c000eb78:	83 ec 2c             	sub    esp,0x2c
c000eb7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb83:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000eb88:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eb8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb95:	01 d0                	add    eax,edx
c000eb97:	83 c0 14             	add    eax,0x14
c000eb9a:	0f b7 c0             	movzx  eax,ax
c000eb9d:	83 ec 04             	sub    esp,0x4
c000eba0:	6a 00                	push   0x0
c000eba2:	50                   	push   eax
c000eba3:	6a 01                	push   0x1
c000eba5:	e8 22 9b ff ff       	call   c00086cc <pbuf_alloc>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebb1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ebb6:	0f 84 10 01 00 00    	je     c000eccc <tcp_output_alloc_header+0x154>
c000ebbc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ebc1:	8d 50 13             	lea    edx,[eax+0x13]
c000ebc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ebcc:	0f b7 c0             	movzx  eax,ax
c000ebcf:	39 c2                	cmp    edx,eax
c000ebd1:	7c 15                	jl     c000ebe8 <tcp_output_alloc_header+0x70>
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	68 80 0d 03 c0       	push   0xc0030d80
c000ebdb:	68 66 01 03 c0       	push   0xc0030166
c000ebe0:	e8 e3 12 01 00       	call   c001fec8 <CPrintf>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ebfa:	0f b7 c0             	movzx  eax,ax
c000ebfd:	83 ec 0c             	sub    esp,0xc
c000ec00:	50                   	push   eax
c000ec01:	e8 e2 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec0d:	66 89 02             	mov    WORD PTR [edx],ax
c000ec10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec14:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec18:	0f b7 c0             	movzx  eax,ax
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	50                   	push   eax
c000ec1f:	e8 c4 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec2b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ec37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ec41:	83 ec 0c             	sub    esp,0xc
c000ec44:	50                   	push   eax
c000ec45:	e8 c2 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	89 c2                	mov    edx,eax
c000ec4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec56:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec5b:	c1 e8 02             	shr    eax,0x2
c000ec5e:	83 c0 05             	add    eax,0x5
c000ec61:	c1 e0 0c             	shl    eax,0xc
c000ec64:	83 c8 10             	or     eax,0x10
c000ec67:	0f b7 c0             	movzx  eax,ax
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	50                   	push   eax
c000ec6e:	e8 75 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec7a:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ec7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec82:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ec86:	0f b7 c0             	movzx  eax,ax
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	50                   	push   eax
c000ec8d:	e8 56 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec92:	83 c4 10             	add    esp,0x10
c000ec95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec99:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ec9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca1:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ecb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ecc0:	0f b7 c0             	movzx  eax,ax
c000ecc3:	01 c2                	add    edx,eax
c000ecc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ecd0:	83 c4 2c             	add    esp,0x2c
c000ecd3:	c3                   	ret    

c000ecd4 <tcp_create_segment>:
c000ecd4:	53                   	push   ebx
c000ecd5:	83 ec 28             	sub    esp,0x28
c000ecd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ece0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ece4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ece8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eced:	c1 e0 02             	shl    eax,0x2
c000ecf0:	83 e0 04             	and    eax,0x4
c000ecf3:	88 c2                	mov    dl,al
c000ecf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ecfa:	83 e0 02             	and    eax,0x2
c000ecfd:	74 05                	je     c000ed04 <tcp_create_segment+0x30>
c000ecff:	b0 0c                	mov    al,0xc
c000ed01:	eb 05                	jmp    c000ed08 <tcp_create_segment+0x34>
c000ed03:	90                   	nop
c000ed04:	b0 00                	mov    al,0x0
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	01 d0                	add    eax,edx
c000ed0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	6a 04                	push   0x4
c000ed13:	e8 f4 8d ff ff       	call   c0007b0c <memp_malloc>
c000ed18:	83 c4 10             	add    esp,0x10
c000ed1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed24:	75 1a                	jne    c000ed40 <tcp_create_segment+0x6c>
c000ed26:	83 ec 0c             	sub    esp,0xc
c000ed29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed2d:	e8 c2 97 ff ff       	call   c00084f4 <pbuf_free>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	b8 00 00 00 00       	mov    eax,0x0
c000ed3a:	e9 31 01 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000ed3f:	90                   	nop
c000ed40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed44:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ed48:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ed4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ed60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed64:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ed67:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed6c:	89 d1                	mov    ecx,edx
c000ed6e:	29 c1                	sub    ecx,eax
c000ed70:	89 c8                	mov    eax,ecx
c000ed72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed76:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	6a 14                	push   0x14
c000ed7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed83:	e8 d0 95 ff ff       	call   c0008358 <pbuf_header>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	0f b6 c0             	movzx  eax,al
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	74 2a                	je     c000edbc <tcp_create_segment+0xe8>
c000ed92:	66 a1 c4 77 03 c0    	mov    ax,ds:0xc00377c4
c000ed98:	83 c0 01             	add    eax,0x1
c000ed9b:	66 a3 c4 77 03 c0    	mov    ds:0xc00377c4,ax
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eda8:	e8 bf b3 ff ff       	call   c000a16c <tcp_seg_free>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	b8 00 00 00 00       	mov    eax,0x0
c000edb5:	e9 b6 00 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000edba:	66 90                	xchg   ax,ax
c000edbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000edd4:	0f b7 c0             	movzx  eax,ax
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	50                   	push   eax
c000ede2:	e8 01 1e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	66 89 03             	mov    WORD PTR [ebx],ax
c000eded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf1:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000edf5:	0f b7 c0             	movzx  eax,ax
c000edf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edff:	83 ec 0c             	sub    esp,0xc
c000ee02:	50                   	push   eax
c000ee03:	e8 e0 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee13:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee16:	83 ec 0c             	sub    esp,0xc
c000ee19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee1d:	e8 ea 1d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ee28:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee2d:	c1 e8 02             	shr    eax,0x2
c000ee30:	0f b6 c0             	movzx  eax,al
c000ee33:	83 c0 05             	add    eax,0x5
c000ee36:	c1 e0 0c             	shl    eax,0xc
c000ee39:	89 c2                	mov    edx,eax
c000ee3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ee40:	09 d0                	or     eax,edx
c000ee42:	0f b7 c0             	movzx  eax,ax
c000ee45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	50                   	push   eax
c000ee50:	e8 93 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ee63:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ee69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee70:	83 c4 28             	add    esp,0x28
c000ee73:	5b                   	pop    ebx
c000ee74:	c3                   	ret    
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]

c000ee78 <tcp_pbuf_prealloc>:
c000ee78:	53                   	push   ebx
c000ee79:	83 ec 28             	sub    esp,0x28
c000ee7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee84:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee88:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ee8c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ee91:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ee96:	88 d8                	mov    al,bl
c000ee98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee9c:	88 c8                	mov    al,cl
c000ee9e:	88 04 24             	mov    BYTE PTR [esp],al
c000eea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eea5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000eeaa:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eeaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eeb4:	39 c2                	cmp    edx,eax
c000eeb6:	73 64                	jae    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000eebd:	83 e0 02             	and    eax,0x2
c000eec0:	75 2e                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eec2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eec9:	0f b6 c0             	movzx  eax,al
c000eecc:	83 e0 40             	and    eax,0x40
c000eecf:	75 4b                	jne    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eed1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eed5:	85 c0                	test   eax,eax
c000eed7:	74 17                	je     c000eef0 <tcp_pbuf_prealloc+0x78>
c000eed9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eedd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eee0:	85 c0                	test   eax,eax
c000eee2:	75 0c                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eee8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eeeb:	85 c0                	test   eax,eax
c000eeed:	74 2d                	je     c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeef:	90                   	nop
c000eef0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eef5:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000eefb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef00:	39 c2                	cmp    edx,eax
c000ef02:	7d 0c                	jge    c000ef10 <tcp_pbuf_prealloc+0x98>
c000ef04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef08:	05 18 02 00 00       	add    eax,0x218
c000ef0d:	eb 05                	jmp    c000ef14 <tcp_pbuf_prealloc+0x9c>
c000ef0f:	90                   	nop
c000ef10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef14:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ef21:	83 ec 04             	sub    esp,0x4
c000ef24:	6a 00                	push   0x0
c000ef26:	50                   	push   eax
c000ef27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef2b:	e8 9c 97 ff ff       	call   c00086cc <pbuf_alloc>
c000ef30:	83 c4 10             	add    esp,0x10
c000ef33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef37:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef3c:	75 0a                	jne    c000ef48 <tcp_pbuf_prealloc+0xd0>
c000ef3e:	b8 00 00 00 00       	mov    eax,0x0
c000ef43:	eb 5b                	jmp    c000efa0 <tcp_pbuf_prealloc+0x128>
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef4e:	85 c0                	test   eax,eax
c000ef50:	74 16                	je     c000ef68 <tcp_pbuf_prealloc+0xf0>
c000ef52:	83 ec 08             	sub    esp,0x8
c000ef55:	68 04 10 03 c0       	push   0xc0031004
c000ef5a:	68 66 01 03 c0       	push   0xc0030166
c000ef5f:	e8 64 0f 01 00       	call   c001fec8 <CPrintf>
c000ef64:	83 c4 10             	add    esp,0x10
c000ef67:	90                   	nop
c000ef68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ef70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef74:	89 d1                	mov    ecx,edx
c000ef76:	29 c1                	sub    ecx,eax
c000ef78:	89 c8                	mov    eax,ecx
c000ef7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef7e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef89:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ef8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef98:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ef9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efa0:	83 c4 28             	add    esp,0x28
c000efa3:	5b                   	pop    ebx
c000efa4:	c3                   	ret    
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]

c000efa8 <tcp_write_checks>:
c000efa8:	83 ec 1c             	sub    esp,0x1c
c000efab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000efb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efbb:	83 f8 04             	cmp    eax,0x4
c000efbe:	74 2c                	je     c000efec <tcp_write_checks+0x44>
c000efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efc7:	83 f8 07             	cmp    eax,0x7
c000efca:	74 20                	je     c000efec <tcp_write_checks+0x44>
c000efcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efd3:	83 f8 02             	cmp    eax,0x2
c000efd6:	74 14                	je     c000efec <tcp_write_checks+0x44>
c000efd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efdf:	83 f8 03             	cmp    eax,0x3
c000efe2:	74 08                	je     c000efec <tcp_write_checks+0x44>
c000efe4:	b0 f3                	mov    al,0xf3
c000efe6:	e9 f9 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000efeb:	90                   	nop
c000efec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eff1:	85 c0                	test   eax,eax
c000eff3:	75 07                	jne    c000effc <tcp_write_checks+0x54>
c000eff5:	b0 00                	mov    al,0x0
c000eff7:	e9 e8 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000effc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f000:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f004:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f009:	0f b7 c0             	movzx  eax,ax
c000f00c:	39 c2                	cmp    edx,eax
c000f00e:	76 1c                	jbe    c000f02c <tcp_write_checks+0x84>
c000f010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f014:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f017:	83 c8 80             	or     eax,0xffffff80
c000f01a:	88 c2                	mov    dl,al
c000f01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f020:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f023:	b0 ff                	mov    al,0xff
c000f025:	e9 ba 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f02a:	66 90                	xchg   ax,ax
c000f02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f030:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f033:	0f b7 c0             	movzx  eax,ax
c000f036:	83 f8 01             	cmp    eax,0x1
c000f039:	77 11                	ja     c000f04c <tcp_write_checks+0xa4>
c000f03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f042:	0f b7 c0             	movzx  eax,ax
c000f045:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f04a:	76 28                	jbe    c000f074 <tcp_write_checks+0xcc>
c000f04c:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f052:	83 c0 01             	add    eax,0x1
c000f055:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f05f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f062:	83 c8 80             	or     eax,0xffffff80
c000f065:	88 c2                	mov    dl,al
c000f067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f06e:	b0 ff                	mov    al,0xff
c000f070:	eb 72                	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f078:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f07b:	0f b7 c0             	movzx  eax,ax
c000f07e:	85 c0                	test   eax,eax
c000f080:	74 2e                	je     c000f0b0 <tcp_write_checks+0x108>
c000f082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f086:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f089:	85 c0                	test   eax,eax
c000f08b:	75 53                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f08d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f091:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f094:	85 c0                	test   eax,eax
c000f096:	75 48                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f098:	83 ec 08             	sub    esp,0x8
c000f09b:	68 b0 0d 03 c0       	push   0xc0030db0
c000f0a0:	68 66 01 03 c0       	push   0xc0030166
c000f0a5:	e8 1e 0e 01 00       	call   c001fec8 <CPrintf>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	eb 31                	jmp    c000f0e0 <tcp_write_checks+0x138>
c000f0af:	90                   	nop
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 0d                	jne    c000f0c8 <tcp_write_checks+0x120>
c000f0bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0bf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0c2:	85 c0                	test   eax,eax
c000f0c4:	74 1a                	je     c000f0e0 <tcp_write_checks+0x138>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 ec 08             	sub    esp,0x8
c000f0cb:	68 ec 0d 03 c0       	push   0xc0030dec
c000f0d0:	68 66 01 03 c0       	push   0xc0030166
c000f0d5:	e8 ee 0d 01 00       	call   c001fec8 <CPrintf>
c000f0da:	83 c4 10             	add    esp,0x10
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	b0 00                	mov    al,0x0
c000f0e2:	66 90                	xchg   ax,ax
c000f0e4:	83 c4 1c             	add    esp,0x1c
c000f0e7:	c3                   	ret    

c000f0e8 <tcp_write>:
c000f0e8:	56                   	push   esi
c000f0e9:	53                   	push   ebx
c000f0ea:	83 ec 54             	sub    esp,0x54
c000f0ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f0f1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f0f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0fa:	88 d0                	mov    al,dl
c000f0fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f100:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f108:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f110:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f118:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f120:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f128:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f12f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f134:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f139:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f140:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f147:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f14c:	75 1e                	jne    c000f16c <tcp_write+0x84>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 20 0e 03 c0       	push   0xc0030e20
c000f156:	68 66 01 03 c0       	push   0xc0030166
c000f15b:	e8 68 0d 01 00       	call   c001fec8 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	b0 f2                	mov    al,0xf2
c000f165:	e9 16 08 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f16a:	66 90                	xchg   ax,ax
c000f16c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f171:	83 ec 08             	sub    esp,0x8
c000f174:	50                   	push   eax
c000f175:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f179:	e8 2a fe ff ff       	call   c000efa8 <tcp_write_checks>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f185:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f18a:	85 c0                	test   eax,eax
c000f18c:	74 0a                	je     c000f198 <tcp_write+0xb0>
c000f18e:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f192:	e9 e9 07 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f197:	90                   	nop
c000f198:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f19c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f19f:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1a8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ab:	85 c0                	test   eax,eax
c000f1ad:	0f 84 79 02 00 00    	je     c000f42c <tcp_write+0x344>
c000f1b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1b7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1be:	eb 0c                	jmp    c000f1cc <tcp_write+0xe4>
c000f1c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1ca:	66 90                	xchg   ax,ax
c000f1cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d2:	85 c0                	test   eax,eax
c000f1d4:	75 ea                	jne    c000f1c0 <tcp_write+0xd8>
c000f1d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1da:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1dd:	0f b6 c0             	movzx  eax,al
c000f1e0:	c1 e0 02             	shl    eax,0x2
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	89 c2                	mov    edx,eax
c000f1e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1ec:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1ef:	0f b6 c0             	movzx  eax,al
c000f1f2:	83 e0 02             	and    eax,0x2
c000f1f5:	74 09                	je     c000f200 <tcp_write+0x118>
c000f1f7:	b8 0c 00 00 00       	mov    eax,0xc
c000f1fc:	eb 0a                	jmp    c000f208 <tcp_write+0x120>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	b8 00 00 00 00       	mov    eax,0x0
c000f205:	8d 76 00             	lea    esi,[esi+0x0]
c000f208:	01 d0                	add    eax,edx
c000f20a:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f20f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f216:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f21a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f21d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f222:	01 ca                	add    edx,ecx
c000f224:	29 d0                	sub    eax,edx
c000f226:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f22b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f233:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f238:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f23d:	0f b7 c0             	movzx  eax,ax
c000f240:	85 c0                	test   eax,eax
c000f242:	0f 84 84 00 00 00    	je     c000f2cc <tcp_write+0x1e4>
c000f248:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f24d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f252:	39 c2                	cmp    edx,eax
c000f254:	76 16                	jbe    c000f26c <tcp_write+0x184>
c000f256:	83 ec 08             	sub    esp,0x8
c000f259:	68 54 0e 03 c0       	push   0xc0030e54
c000f25e:	68 66 01 03 c0       	push   0xc0030166
c000f263:	e8 60 0c 01 00       	call   c001fec8 <CPrintf>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	90                   	nop
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f274:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f27d:	0f b7 d8             	movzx  ebx,ax
c000f280:	0f b7 ca             	movzx  ecx,dx
c000f283:	39 cb                	cmp    ebx,ecx
c000f285:	76 05                	jbe    c000f28c <tcp_write+0x1a4>
c000f287:	89 d0                	mov    eax,edx
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f291:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f296:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f29b:	01 d0                	add    eax,edx
c000f29d:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f2a2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f2a7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2ac:	89 d6                	mov    esi,edx
c000f2ae:	29 c6                	sub    esi,eax
c000f2b0:	89 f0                	mov    eax,esi
c000f2b2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2b7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f2bb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2c0:	89 d6                	mov    esi,edx
c000f2c2:	29 c6                	sub    esi,eax
c000f2c4:	89 f0                	mov    eax,esi
c000f2c6:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2cb:	90                   	nop
c000f2cc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2d1:	0f b7 c0             	movzx  eax,ax
c000f2d4:	85 c0                	test   eax,eax
c000f2d6:	74 24                	je     c000f2fc <tcp_write+0x214>
c000f2d8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2dd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f2e2:	39 c2                	cmp    edx,eax
c000f2e4:	74 16                	je     c000f2fc <tcp_write+0x214>
c000f2e6:	83 ec 08             	sub    esp,0x8
c000f2e9:	68 18 10 03 c0       	push   0xc0031018
c000f2ee:	68 66 01 03 c0       	push   0xc0030166
c000f2f3:	e8 d0 0b 01 00       	call   c001fec8 <CPrintf>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	90                   	nop
c000f2fc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f301:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f306:	39 c2                	cmp    edx,eax
c000f308:	0f 83 ce 03 00 00    	jae    c000f6dc <tcp_write+0x5f4>
c000f30e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f313:	85 c0                	test   eax,eax
c000f315:	0f 84 c1 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f31b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f31f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f322:	0f b7 c0             	movzx  eax,ax
c000f325:	85 c0                	test   eax,eax
c000f327:	0f 84 af 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f32d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f332:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f337:	29 c2                	sub    edx,eax
c000f339:	89 d0                	mov    eax,edx
c000f33b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f340:	39 d0                	cmp    eax,edx
c000f342:	7e 04                	jle    c000f348 <tcp_write+0x260>
c000f344:	89 d0                	mov    eax,edx
c000f346:	66 90                	xchg   ax,ax
c000f348:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f34d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f351:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f355:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f35a:	83 e0 01             	and    eax,0x1
c000f35d:	74 61                	je     c000f3c0 <tcp_write+0x2d8>
c000f35f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f364:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f369:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f36e:	83 ec 04             	sub    esp,0x4
c000f371:	6a 01                	push   0x1
c000f373:	51                   	push   ecx
c000f374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f378:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f37c:	51                   	push   ecx
c000f37d:	52                   	push   edx
c000f37e:	50                   	push   eax
c000f37f:	6a 03                	push   0x3
c000f381:	e8 f2 fa ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f38d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f392:	0f 84 44 05 00 00    	je     c000f8dc <tcp_write+0x7f4>
c000f398:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f39d:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f3a2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3a6:	01 c1                	add    ecx,eax
c000f3a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	52                   	push   edx
c000f3b3:	51                   	push   ecx
c000f3b4:	50                   	push   eax
c000f3b5:	e8 c0 0f ff ff       	call   c000037a <memcpy>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	eb 39                	jmp    c000f3f8 <tcp_write+0x310>
c000f3bf:	90                   	nop
c000f3c0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3c5:	83 ec 04             	sub    esp,0x4
c000f3c8:	6a 01                	push   0x1
c000f3ca:	50                   	push   eax
c000f3cb:	6a 03                	push   0x3
c000f3cd:	e8 fa 92 ff ff       	call   c00086cc <pbuf_alloc>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3d9:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f3de:	0f 84 fc 04 00 00    	je     c000f8e0 <tcp_write+0x7f8>
c000f3e4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3e9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3ed:	01 c2                	add    edx,eax
c000f3ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f3fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f401:	01 d0                	add    eax,edx
c000f403:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f408:	83 ec 0c             	sub    esp,0xc
c000f40b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f40f:	e8 b4 98 ff ff       	call   c0008cc8 <pbuf_clen>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	0f b6 c0             	movzx  eax,al
c000f41a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f41e:	01 d0                	add    eax,edx
c000f420:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f425:	e9 b2 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f430:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f434:	0f b7 c0             	movzx  eax,ax
c000f437:	85 c0                	test   eax,eax
c000f439:	0f 84 9d 02 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f43f:	83 ec 08             	sub    esp,0x8
c000f442:	68 74 0e 03 c0       	push   0xc0030e74
c000f447:	68 66 01 03 c0       	push   0xc0030166
c000f44c:	e8 77 0a 01 00       	call   c001fec8 <CPrintf>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	e9 83 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f460:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f465:	89 d6                	mov    esi,edx
c000f467:	29 c6                	sub    esi,eax
c000f469:	89 f0                	mov    eax,esi
c000f46b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f470:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f474:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f477:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f47c:	89 d3                	mov    ebx,edx
c000f47e:	29 c3                	sub    ebx,eax
c000f480:	89 d8                	mov    eax,ebx
c000f482:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f48b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f490:	0f b7 d8             	movzx  ebx,ax
c000f493:	0f b7 ca             	movzx  ecx,dx
c000f496:	39 cb                	cmp    ebx,ecx
c000f498:	76 02                	jbe    c000f49c <tcp_write+0x3b4>
c000f49a:	89 d0                	mov    eax,edx
c000f49c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f4a1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f4a6:	83 e0 01             	and    eax,0x1
c000f4a9:	0f 84 b1 00 00 00    	je     c000f560 <tcp_write+0x478>
c000f4af:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4b4:	0f 94 c0             	sete   al
c000f4b7:	0f b6 f0             	movzx  esi,al
c000f4ba:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f4bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4c6:	0f b7 c8             	movzx  ecx,ax
c000f4c9:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4ce:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f4d3:	01 d0                	add    eax,edx
c000f4d5:	0f b7 c0             	movzx  eax,ax
c000f4d8:	83 ec 04             	sub    esp,0x4
c000f4db:	56                   	push   esi
c000f4dc:	53                   	push   ebx
c000f4dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4e1:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f4e5:	52                   	push   edx
c000f4e6:	51                   	push   ecx
c000f4e7:	50                   	push   eax
c000f4e8:	6a 00                	push   0x0
c000f4ea:	e8 89 f9 ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4fb:	0f 84 e3 03 00 00    	je     c000f8e4 <tcp_write+0x7fc>
c000f501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f505:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f509:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f50e:	0f b7 c0             	movzx  eax,ax
c000f511:	39 c2                	cmp    edx,eax
c000f513:	76 17                	jbe    c000f52c <tcp_write+0x444>
c000f515:	83 ec 08             	sub    esp,0x8
c000f518:	68 a4 0e 03 c0       	push   0xc0030ea4
c000f51d:	68 66 01 03 c0       	push   0xc0030166
c000f522:	e8 a1 09 01 00       	call   c001fec8 <CPrintf>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f531:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f536:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f53a:	01 d1                	add    ecx,edx
c000f53c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f540:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f543:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f548:	01 da                	add    edx,ebx
c000f54a:	83 ec 04             	sub    esp,0x4
c000f54d:	50                   	push   eax
c000f54e:	51                   	push   ecx
c000f54f:	52                   	push   edx
c000f550:	e8 25 0e ff ff       	call   c000037a <memcpy>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	e9 a7 00 00 00       	jmp    c000f604 <tcp_write+0x51c>
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f565:	0f b7 c0             	movzx  eax,ax
c000f568:	85 c0                	test   eax,eax
c000f56a:	74 18                	je     c000f584 <tcp_write+0x49c>
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	68 36 10 03 c0       	push   0xc0031036
c000f574:	68 66 01 03 c0       	push   0xc0030166
c000f579:	e8 4a 09 01 00       	call   c001fec8 <CPrintf>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	8d 76 00             	lea    esi,[esi+0x0]
c000f584:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	6a 01                	push   0x1
c000f58e:	50                   	push   eax
c000f58f:	6a 00                	push   0x0
c000f591:	e8 36 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f59d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f5a2:	0f 84 40 03 00 00    	je     c000f8e8 <tcp_write+0x800>
c000f5a8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5ad:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5b1:	01 c2                	add    edx,eax
c000f5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f5ba:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f5bf:	83 ec 04             	sub    esp,0x4
c000f5c2:	6a 00                	push   0x0
c000f5c4:	50                   	push   eax
c000f5c5:	6a 00                	push   0x0
c000f5c7:	e8 00 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5d3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f5d8:	75 16                	jne    c000f5f0 <tcp_write+0x508>
c000f5da:	83 ec 0c             	sub    esp,0xc
c000f5dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5e1:	e8 0e 8f ff ff       	call   c00084f4 <pbuf_free>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	e9 02 03 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f5ee:	66 90                	xchg   ax,ax
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5fb:	e8 2c 97 ff ff       	call   c0008d2c <pbuf_cat>
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	90                   	nop
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f60b:	e8 b8 96 ff ff       	call   c0008cc8 <pbuf_clen>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	0f b6 c0             	movzx  eax,al
c000f616:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f61a:	01 d0                	add    eax,edx
c000f61c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f621:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	77 0d                	ja     c000f638 <tcp_write+0x550>
c000f62b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f630:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f635:	76 15                	jbe    c000f64c <tcp_write+0x564>
c000f637:	90                   	nop
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f63f:	e8 b0 8e ff ff       	call   c00084f4 <pbuf_free>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	e9 a4 02 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f64c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f651:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f655:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f658:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f65d:	01 ca                	add    edx,ecx
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	50                   	push   eax
c000f663:	52                   	push   edx
c000f664:	6a 00                	push   0x0
c000f666:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f66a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f66e:	e8 61 f6 ff ff       	call   c000ecd4 <tcp_create_segment>
c000f673:	83 c4 20             	add    esp,0x20
c000f676:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f67a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f67f:	0f 84 67 02 00 00    	je     c000f8ec <tcp_write+0x804>
c000f685:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f68a:	75 0c                	jne    c000f698 <tcp_write+0x5b0>
c000f68c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f690:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f694:	eb 2a                	jmp    c000f6c0 <tcp_write+0x5d8>
c000f696:	66 90                	xchg   ax,ax
c000f698:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f69d:	75 15                	jne    c000f6b4 <tcp_write+0x5cc>
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	68 44 10 03 c0       	push   0xc0031044
c000f6a7:	68 66 01 03 c0       	push   0xc0030166
c000f6ac:	e8 17 08 01 00       	call   c001fec8 <CPrintf>
c000f6b1:	83 c4 10             	add    esp,0x10
c000f6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f6bc:	89 10                	mov    DWORD PTR [eax],edx
c000f6be:	66 90                	xchg   ax,ax
c000f6c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f6c8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f6cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f6d2:	01 d0                	add    eax,edx
c000f6d4:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f6e6:	39 c2                	cmp    edx,eax
c000f6e8:	0f 82 6e fd ff ff    	jb     c000f45c <tcp_write+0x374>
c000f6ee:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	0f 84 9d 00 00 00    	je     c000f798 <tcp_write+0x6b0>
c000f6fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f702:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f706:	eb 70                	jmp    c000f778 <tcp_write+0x690>
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f70f:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f714:	01 d0                	add    eax,edx
c000f716:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f71a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8b 00                	mov    eax,DWORD PTR [eax]
c000f724:	85 c0                	test   eax,eax
c000f726:	75 44                	jne    c000f76c <tcp_write+0x684>
c000f728:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f72d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f731:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f73c:	0f b7 c0             	movzx  eax,ax
c000f73f:	01 c8                	add    eax,ecx
c000f741:	83 ec 04             	sub    esp,0x4
c000f744:	52                   	push   edx
c000f745:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f749:	50                   	push   eax
c000f74a:	e8 2b 0c ff ff       	call   c000037a <memcpy>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f75a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f75f:	01 d0                	add    eax,edx
c000f761:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f765:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f770:	8b 00                	mov    eax,DWORD PTR [eax]
c000f772:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f776:	66 90                	xchg   ax,ax
c000f778:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f77d:	75 89                	jne    c000f708 <tcp_write+0x620>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f786:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f78b:	01 d0                	add    eax,edx
c000f78d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f791:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f795:	8d 76 00             	lea    esi,[esi+0x0]
c000f798:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f79d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f7a1:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f7a5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f7aa:	74 4c                	je     c000f7f8 <tcp_write+0x710>
c000f7ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7b1:	75 15                	jne    c000f7c8 <tcp_write+0x6e0>
c000f7b3:	83 ec 08             	sub    esp,0x8
c000f7b6:	68 e4 0e 03 c0       	push   0xc0030ee4
c000f7bb:	68 66 01 03 c0       	push   0xc0030166
c000f7c0:	e8 03 07 01 00       	call   c001fec8 <CPrintf>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f7d6:	50                   	push   eax
c000f7d7:	e8 50 95 ff ff       	call   c0008d2c <pbuf_cat>
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f7e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f7ed:	01 d0                	add    eax,edx
c000f7ef:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f7f3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f7f7:	90                   	nop
c000f7f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7fd:	75 0d                	jne    c000f80c <tcp_write+0x724>
c000f7ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f807:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f80a:	eb 0c                	jmp    c000f818 <tcp_write+0x730>
c000f80c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f810:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f814:	89 10                	mov    DWORD PTR [eax],edx
c000f816:	66 90                	xchg   ax,ax
c000f818:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f81c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f81f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f824:	01 c2                	add    edx,eax
c000f826:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f82d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f831:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f839:	89 d6                	mov    esi,edx
c000f83b:	29 c6                	sub    esi,eax
c000f83d:	89 f0                	mov    eax,esi
c000f83f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f843:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f847:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f84b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f84f:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f853:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f857:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f85a:	0f b7 c0             	movzx  eax,ax
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 2b                	je     c000f88c <tcp_write+0x7a4>
c000f861:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f865:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f868:	85 c0                	test   eax,eax
c000f86a:	75 20                	jne    c000f88c <tcp_write+0x7a4>
c000f86c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f870:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f873:	85 c0                	test   eax,eax
c000f875:	75 15                	jne    c000f88c <tcp_write+0x7a4>
c000f877:	83 ec 08             	sub    esp,0x8
c000f87a:	68 55 10 03 c0       	push   0xc0031055
c000f87f:	68 66 01 03 c0       	push   0xc0030166
c000f884:	e8 3f 06 01 00       	call   c001fec8 <CPrintf>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f891:	74 41                	je     c000f8d4 <tcp_write+0x7ec>
c000f893:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f89a:	85 c0                	test   eax,eax
c000f89c:	74 36                	je     c000f8d4 <tcp_write+0x7ec>
c000f89e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f8a3:	83 e0 02             	and    eax,0x2
c000f8a6:	75 2c                	jne    c000f8d4 <tcp_write+0x7ec>
c000f8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8af:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	6a 08                	push   0x8
c000f8b8:	e8 2b 13 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	89 c1                	mov    ecx,eax
c000f8c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	09 c8                	or     eax,ecx
c000f8cd:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	b0 00                	mov    al,0x0
c000f8d6:	e9 a5 00 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	eb 11                	jmp    c000f8f0 <tcp_write+0x808>
c000f8df:	90                   	nop
c000f8e0:	90                   	nop
c000f8e1:	eb 0d                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e3:	90                   	nop
c000f8e4:	90                   	nop
c000f8e5:	eb 09                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e7:	90                   	nop
c000f8e8:	90                   	nop
c000f8e9:	eb 05                	jmp    c000f8f0 <tcp_write+0x808>
c000f8eb:	90                   	nop
c000f8ec:	90                   	nop
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f7:	83 c8 80             	or     eax,0xffffff80
c000f8fa:	88 c2                	mov    dl,al
c000f8fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f900:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f903:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f909:	83 c0 01             	add    eax,0x1
c000f90c:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f912:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f917:	74 0f                	je     c000f928 <tcp_write+0x840>
c000f919:	83 ec 0c             	sub    esp,0xc
c000f91c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f920:	e8 cf 8b ff ff       	call   c00084f4 <pbuf_free>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f92d:	74 11                	je     c000f940 <tcp_write+0x858>
c000f92f:	83 ec 0c             	sub    esp,0xc
c000f932:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f936:	e8 75 a8 ff ff       	call   c000a1b0 <tcp_segs_free>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	66 90                	xchg   ax,ax
c000f940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f944:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f947:	0f b7 c0             	movzx  eax,ax
c000f94a:	85 c0                	test   eax,eax
c000f94c:	74 2e                	je     c000f97c <tcp_write+0x894>
c000f94e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f952:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f955:	85 c0                	test   eax,eax
c000f957:	75 23                	jne    c000f97c <tcp_write+0x894>
c000f959:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f95d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f960:	85 c0                	test   eax,eax
c000f962:	75 18                	jne    c000f97c <tcp_write+0x894>
c000f964:	83 ec 08             	sub    esp,0x8
c000f967:	68 55 10 03 c0       	push   0xc0031055
c000f96c:	68 66 01 03 c0       	push   0xc0030166
c000f971:	e8 52 05 01 00       	call   c001fec8 <CPrintf>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	b0 ff                	mov    al,0xff
c000f97e:	66 90                	xchg   ax,ax
c000f980:	83 c4 54             	add    esp,0x54
c000f983:	5b                   	pop    ebx
c000f984:	5e                   	pop    esi
c000f985:	c3                   	ret    
c000f986:	66 90                	xchg   ax,ax

c000f988 <tcp_enqueue_flags>:
c000f988:	83 ec 3c             	sub    esp,0x3c
c000f98b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f98f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f993:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f998:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f99d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9a2:	83 e0 03             	and    eax,0x3
c000f9a5:	75 15                	jne    c000f9bc <tcp_enqueue_flags+0x34>
c000f9a7:	83 ec 08             	sub    esp,0x8
c000f9aa:	68 1c 0f 03 c0       	push   0xc0030f1c
c000f9af:	68 66 01 03 c0       	push   0xc0030166
c000f9b4:	e8 0f 05 01 00       	call   c001fec8 <CPrintf>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9c3:	0f b7 c0             	movzx  eax,ax
c000f9c6:	83 f8 01             	cmp    eax,0x1
c000f9c9:	77 11                	ja     c000f9dc <tcp_enqueue_flags+0x54>
c000f9cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d2:	0f b7 c0             	movzx  eax,ax
c000f9d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f9da:	76 2c                	jbe    c000fa08 <tcp_enqueue_flags+0x80>
c000f9dc:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f9e2:	83 c0 01             	add    eax,0x1
c000f9e5:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f9eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9f2:	83 c8 80             	or     eax,0xffffff80
c000f9f5:	88 c2                	mov    dl,al
c000f9f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9fe:	b0 ff                	mov    al,0xff
c000fa00:	e9 6b 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa0d:	83 e0 02             	and    eax,0x2
c000fa10:	74 06                	je     c000fa18 <tcp_enqueue_flags+0x90>
c000fa12:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000fa17:	90                   	nop
c000fa18:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa1d:	c1 e0 02             	shl    eax,0x2
c000fa20:	83 e0 04             	and    eax,0x4
c000fa23:	88 c2                	mov    dl,al
c000fa25:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa2a:	83 e0 02             	and    eax,0x2
c000fa2d:	74 05                	je     c000fa34 <tcp_enqueue_flags+0xac>
c000fa2f:	b0 0c                	mov    al,0xc
c000fa31:	eb 05                	jmp    c000fa38 <tcp_enqueue_flags+0xb0>
c000fa33:	90                   	nop
c000fa34:	b0 00                	mov    al,0x0
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	01 d0                	add    eax,edx
c000fa3a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000fa3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa42:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa46:	0f b7 c0             	movzx  eax,ax
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	75 17                	jne    c000fa64 <tcp_enqueue_flags+0xdc>
c000fa4d:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fa53:	83 c0 01             	add    eax,0x1
c000fa56:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fa5c:	b0 ff                	mov    al,0xff
c000fa5e:	e9 0d 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa63:	90                   	nop
c000fa64:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fa69:	83 ec 04             	sub    esp,0x4
c000fa6c:	6a 00                	push   0x0
c000fa6e:	50                   	push   eax
c000fa6f:	6a 00                	push   0x0
c000fa71:	e8 56 8c ff ff       	call   c00086cc <pbuf_alloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fa7d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fa82:	75 2c                	jne    c000fab0 <tcp_enqueue_flags+0x128>
c000fa84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa88:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa8b:	83 c8 80             	or     eax,0xffffff80
c000fa8e:	88 c2                	mov    dl,al
c000fa90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa94:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa97:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fa9d:	83 c0 01             	add    eax,0x1
c000faa0:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000faa6:	b0 ff                	mov    al,0xff
c000faa8:	e9 c3 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000faad:	8d 76 00             	lea    esi,[esi+0x0]
c000fab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fab8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fabd:	0f b7 d2             	movzx  edx,dx
c000fac0:	0f b7 c0             	movzx  eax,ax
c000fac3:	39 c2                	cmp    edx,eax
c000fac5:	73 15                	jae    c000fadc <tcp_enqueue_flags+0x154>
c000fac7:	83 ec 08             	sub    esp,0x8
c000faca:	68 74 0f 03 c0       	push   0xc0030f74
c000facf:	68 66 01 03 c0       	push   0xc0030166
c000fad4:	e8 ef 03 01 00       	call   c001fec8 <CPrintf>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faed:	83 ec 0c             	sub    esp,0xc
c000faf0:	51                   	push   ecx
c000faf1:	52                   	push   edx
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000faf7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fafb:	e8 d4 f1 ff ff       	call   c000ecd4 <tcp_create_segment>
c000fb00:	83 c4 20             	add    esp,0x20
c000fb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb0c:	75 2a                	jne    c000fb38 <tcp_enqueue_flags+0x1b0>
c000fb0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb15:	83 c8 80             	or     eax,0xffffff80
c000fb18:	88 c2                	mov    dl,al
c000fb1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb21:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fb27:	83 c0 01             	add    eax,0x1
c000fb2a:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fb30:	b0 ff                	mov    al,0xff
c000fb32:	e9 39 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fb37:	90                   	nop
c000fb38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb3f:	0f b7 c0             	movzx  eax,ax
c000fb42:	85 c0                	test   eax,eax
c000fb44:	74 16                	je     c000fb5c <tcp_enqueue_flags+0x1d4>
c000fb46:	83 ec 08             	sub    esp,0x8
c000fb49:	68 b0 0f 03 c0       	push   0xc0030fb0
c000fb4e:	68 66 01 03 c0       	push   0xc0030166
c000fb53:	e8 70 03 01 00       	call   c001fec8 <CPrintf>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	90                   	nop
c000fb5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb63:	85 c0                	test   eax,eax
c000fb65:	75 0d                	jne    c000fb74 <tcp_enqueue_flags+0x1ec>
c000fb67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fb6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fb72:	eb 30                	jmp    c000fba4 <tcp_enqueue_flags+0x21c>
c000fb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb7f:	eb 0f                	jmp    c000fb90 <tcp_enqueue_flags+0x208>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb8e:	66 90                	xchg   ax,ax
c000fb90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb96:	85 c0                	test   eax,eax
c000fb98:	75 ea                	jne    c000fb84 <tcp_enqueue_flags+0x1fc>
c000fb9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fba2:	89 10                	mov    DWORD PTR [eax],edx
c000fba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fba8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fbae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbb3:	83 e0 02             	and    eax,0x2
c000fbb6:	75 0c                	jne    c000fbc4 <tcp_enqueue_flags+0x23c>
c000fbb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbbd:	83 e0 01             	and    eax,0x1
c000fbc0:	74 26                	je     c000fbe8 <tcp_enqueue_flags+0x260>
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbc8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fbcb:	8d 50 01             	lea    edx,[eax+0x1]
c000fbce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fbdd:	83 e8 01             	sub    eax,0x1
c000fbe0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fbe4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fbe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbed:	83 e0 01             	and    eax,0x1
c000fbf0:	74 16                	je     c000fc08 <tcp_enqueue_flags+0x280>
c000fbf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbf9:	83 c8 20             	or     eax,0x20
c000fbfc:	88 c2                	mov    dl,al
c000fbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc02:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc0f:	83 ec 0c             	sub    esp,0xc
c000fc12:	50                   	push   eax
c000fc13:	e8 b0 90 ff ff       	call   c0008cc8 <pbuf_clen>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	88 c1                	mov    cl,al
c000fc1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc21:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fc24:	0f b6 c1             	movzx  eax,cl
c000fc27:	01 d0                	add    eax,edx
c000fc29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fc2d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fc31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc35:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fc38:	0f b7 c0             	movzx  eax,ax
c000fc3b:	85 c0                	test   eax,eax
c000fc3d:	74 2d                	je     c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc43:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fc46:	85 c0                	test   eax,eax
c000fc48:	75 22                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc4e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc51:	85 c0                	test   eax,eax
c000fc53:	75 17                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc55:	83 ec 08             	sub    esp,0x8
c000fc58:	68 dc 0f 03 c0       	push   0xc0030fdc
c000fc5d:	68 66 01 03 c0       	push   0xc0030166
c000fc62:	e8 61 02 01 00       	call   c001fec8 <CPrintf>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	66 90                	xchg   ax,ax
c000fc6c:	b0 00                	mov    al,0x0
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	83 c4 3c             	add    esp,0x3c
c000fc73:	c3                   	ret    

c000fc74 <tcp_send_fin>:
c000fc74:	53                   	push   ebx
c000fc75:	83 ec 18             	sub    esp,0x18
c000fc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc7f:	85 c0                	test   eax,eax
c000fc81:	74 75                	je     c000fcf8 <tcp_send_fin+0x84>
c000fc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc87:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc8e:	eb 0c                	jmp    c000fc9c <tcp_send_fin+0x28>
c000fc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc9a:	66 90                	xchg   ax,ax
c000fc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca2:	85 c0                	test   eax,eax
c000fca4:	75 ea                	jne    c000fc90 <tcp_send_fin+0x1c>
c000fca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fcb1:	0f b7 c0             	movzx  eax,ax
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	50                   	push   eax
c000fcb8:	e8 2b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	0f b7 c0             	movzx  eax,ax
c000fcc3:	83 e0 07             	and    eax,0x7
c000fcc6:	75 30                	jne    c000fcf8 <tcp_send_fin+0x84>
c000fcc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fccf:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	6a 01                	push   0x1
c000fcd8:	e8 0b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	89 c1                	mov    ecx,eax
c000fce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fce9:	89 d8                	mov    eax,ebx
c000fceb:	09 c8                	or     eax,ecx
c000fced:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fcf1:	b0 00                	mov    al,0x0
c000fcf3:	eb 17                	jmp    c000fd0c <tcp_send_fin+0x98>
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	83 ec 08             	sub    esp,0x8
c000fcfb:	6a 01                	push   0x1
c000fcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd01:	e8 82 fc ff ff       	call   c000f988 <tcp_enqueue_flags>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]
c000fd0c:	83 c4 18             	add    esp,0x18
c000fd0f:	5b                   	pop    ebx
c000fd10:	c3                   	ret    
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]

c000fd14 <tcp_send_empty_ack>:
c000fd14:	53                   	push   ebx
c000fd15:	83 ec 18             	sub    esp,0x18
c000fd18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	50                   	push   eax
c000fd28:	e8 df 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	89 c2                	mov    edx,eax
c000fd32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd37:	52                   	push   edx
c000fd38:	6a 00                	push   0x0
c000fd3a:	50                   	push   eax
c000fd3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd3f:	e8 34 ee ff ff       	call   c000eb78 <tcp_output_alloc_header>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd50:	75 0a                	jne    c000fd5c <tcp_send_empty_ack+0x48>
c000fd52:	b0 fe                	mov    al,0xfe
c000fd54:	e9 97 00 00 00       	jmp    c000fdf0 <tcp_send_empty_ack+0xdc>
c000fd59:	8d 76 00             	lea    esi,[esi+0x0]
c000fd5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd6e:	83 e0 fc             	and    eax,0xfffffffc
c000fd71:	88 c2                	mov    dl,al
c000fd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd81:	0f b7 d0             	movzx  edx,ax
c000fd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	52                   	push   edx
c000fd93:	6a 06                	push   0x6
c000fd95:	51                   	push   ecx
c000fd96:	50                   	push   eax
c000fd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd9b:	e8 70 35 00 00       	call   c0013310 <inet_chksum_pseudo>
c000fda0:	83 c4 20             	add    esp,0x20
c000fda3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fda7:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fdab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdaf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fdb2:	0f b6 c8             	movzx  ecx,al
c000fdb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fdbc:	0f b6 d0             	movzx  edx,al
c000fdbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc3:	8d 58 04             	lea    ebx,[eax+0x4]
c000fdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdca:	83 ec 08             	sub    esp,0x8
c000fdcd:	6a 06                	push   0x6
c000fdcf:	51                   	push   ecx
c000fdd0:	52                   	push   edx
c000fdd1:	53                   	push   ebx
c000fdd2:	50                   	push   eax
c000fdd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd7:	e8 68 41 00 00       	call   c0013f44 <ip_output>
c000fddc:	83 c4 20             	add    esp,0x20
c000fddf:	83 ec 0c             	sub    esp,0xc
c000fde2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fde6:	e8 09 87 ff ff       	call   c00084f4 <pbuf_free>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	b0 00                	mov    al,0x0
c000fdf0:	83 c4 18             	add    esp,0x18
c000fdf3:	5b                   	pop    ebx
c000fdf4:	c3                   	ret    
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]

c000fdf8 <tcp_output_segment>:
c000fdf8:	56                   	push   esi
c000fdf9:	53                   	push   ebx
c000fdfa:	83 ec 14             	sub    esp,0x14
c000fdfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe01:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe08:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	50                   	push   eax
c000fe0f:	e8 f8 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fe1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe1e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe22:	0f b7 c0             	movzx  eax,ax
c000fe25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe29:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	50                   	push   eax
c000fe30:	e8 b3 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fe3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe4b:	0f b7 c0             	movzx  eax,ax
c000fe4e:	01 c2                	add    edx,eax
c000fe50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe54:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe5e:	83 c0 14             	add    eax,0x14
c000fe61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe6c:	0f b6 c0             	movzx  eax,al
c000fe6f:	83 e0 01             	and    eax,0x1
c000fe72:	74 10                	je     c000fe84 <tcp_output_segment+0x8c>
c000fe74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe78:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fe7e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fe83:	90                   	nop
c000fe84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe88:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fe8c:	98                   	cwde   
c000fe8d:	83 f8 ff             	cmp    eax,0xffffffff
c000fe90:	75 0a                	jne    c000fe9c <tcp_output_segment+0xa4>
c000fe92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe96:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fe9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea0:	85 c0                	test   eax,eax
c000fea2:	74 0c                	je     c000feb0 <tcp_output_segment+0xb8>
c000fea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaa:	85 c0                	test   eax,eax
c000feac:	75 32                	jne    c000fee0 <tcp_output_segment+0xe8>
c000feae:	66 90                	xchg   ax,ax
c000feb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feb4:	83 c0 04             	add    eax,0x4
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	50                   	push   eax
c000febb:	e8 dc 38 00 00       	call   c001379c <ip_route>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fec7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fecc:	0f 84 46 01 00 00    	je     c0010018 <tcp_output_segment+0x220>
c000fed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fed6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fed9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fedd:	89 10                	mov    DWORD PTR [eax],edx
c000fedf:	90                   	nop
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	75 2d                	jne    c000ff18 <tcp_output_segment+0x120>
c000feeb:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000fef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fefc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	50                   	push   eax
c000ff06:	e8 01 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	89 c2                	mov    edx,eax
c000ff10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff14:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ff17:	90                   	nop
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff29:	29 c2                	sub    edx,eax
c000ff2b:	89 d0                	mov    eax,edx
c000ff2d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff39:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ff3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff41:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff44:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff49:	89 d6                	mov    esi,edx
c000ff4b:	29 c6                	sub    esi,eax
c000ff4d:	89 f0                	mov    eax,esi
c000ff4f:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000ff53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff5a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff61:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff64:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff69:	89 d6                	mov    esi,edx
c000ff6b:	29 c6                	sub    esi,eax
c000ff6d:	89 f0                	mov    eax,esi
c000ff6f:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000ff73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ff7e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ff81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ff91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff9b:	0f b7 c8             	movzx  ecx,ax
c000ff9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa2:	8d 70 04             	lea    esi,[eax+0x4]
c000ffa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ffb4:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	51                   	push   ecx
c000ffbb:	6a 06                	push   0x6
c000ffbd:	56                   	push   esi
c000ffbe:	52                   	push   edx
c000ffbf:	50                   	push   eax
c000ffc0:	e8 4b 33 00 00       	call   c0013310 <inet_chksum_pseudo>
c000ffc5:	83 c4 20             	add    esp,0x20
c000ffc8:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000ffcc:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c000ffd2:	83 c0 01             	add    eax,0x1
c000ffd5:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c000ffdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffdf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000ffe2:	0f b6 d8             	movzx  ebx,al
c000ffe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffe9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ffec:	0f b6 c8             	movzx  ecx,al
c000ffef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff3:	8d 70 04             	lea    esi,[eax+0x4]
c000fff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010001:	83 ec 08             	sub    esp,0x8
c0010004:	6a 06                	push   0x6
c0010006:	53                   	push   ebx
c0010007:	51                   	push   ecx
c0010008:	56                   	push   esi
c0010009:	52                   	push   edx
c001000a:	50                   	push   eax
c001000b:	e8 34 3f 00 00       	call   c0013f44 <ip_output>
c0010010:	83 c4 20             	add    esp,0x20
c0010013:	eb 07                	jmp    c001001c <tcp_output_segment+0x224>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	90                   	nop
c0010019:	8d 76 00             	lea    esi,[esi+0x0]
c001001c:	83 c4 14             	add    esp,0x14
c001001f:	5b                   	pop    ebx
c0010020:	5e                   	pop    esi
c0010021:	c3                   	ret    
c0010022:	66 90                	xchg   ax,ax

c0010024 <tcp_output>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 24             	sub    esp,0x24
c0010029:	a1 88 78 03 c0       	mov    eax,ds:0xc0037888
c001002e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0010032:	75 08                	jne    c001003c <tcp_output+0x18>
c0010034:	b0 00                	mov    al,0x0
c0010036:	e9 6d 04 00 00       	jmp    c00104a8 <tcp_output+0x484>
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010044:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010048:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c001004b:	0f b7 d8             	movzx  ebx,ax
c001004e:	0f b7 ca             	movzx  ecx,dx
c0010051:	39 cb                	cmp    ebx,ecx
c0010053:	76 03                	jbe    c0010058 <tcp_output+0x34>
c0010055:	89 d0                	mov    eax,edx
c0010057:	90                   	nop
c0010058:	0f b7 c0             	movzx  eax,ax
c001005b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010063:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001006a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010071:	0f b6 c0             	movzx  eax,al
c0010074:	83 e0 02             	and    eax,0x2
c0010077:	74 4f                	je     c00100c8 <tcp_output+0xa4>
c0010079:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001007e:	74 34                	je     c00100b4 <tcp_output+0x90>
c0010080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010087:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	50                   	push   eax
c001008e:	e8 79 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010093:	83 c4 10             	add    esp,0x10
c0010096:	89 c2                	mov    edx,eax
c0010098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001009c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001009f:	29 c2                	sub    edx,eax
c00100a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a8:	0f b7 c0             	movzx  eax,ax
c00100ab:	01 d0                	add    eax,edx
c00100ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00100b1:	73 15                	jae    c00100c8 <tcp_output+0xa4>
c00100b3:	90                   	nop
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100bb:	e8 54 fc ff ff       	call   c000fd14 <tcp_send_empty_ack>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	e9 e0 03 00 00       	jmp    c00104a8 <tcp_output+0x484>
c00100c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00100cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00100d8:	0f 84 ea 02 00 00    	je     c00103c8 <tcp_output+0x3a4>
c00100de:	eb 0c                	jmp    c00100ec <tcp_output+0xc8>
c00100e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ea:	66 90                	xchg   ax,ax
c00100ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f2:	85 c0                	test   eax,eax
c00100f4:	75 ea                	jne    c00100e0 <tcp_output+0xbc>
c00100f6:	e9 cd 02 00 00       	jmp    c00103c8 <tcp_output+0x3a4>
c00100fb:	90                   	nop
c00100fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010103:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010107:	0f b7 c0             	movzx  eax,ax
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	50                   	push   eax
c001010e:	e8 d5 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	0f b7 c0             	movzx  eax,ax
c0010119:	83 e0 04             	and    eax,0x4
c001011c:	74 16                	je     c0010134 <tcp_output+0x110>
c001011e:	83 ec 08             	sub    esp,0x8
c0010121:	68 73 10 03 c0       	push   0xc0031073
c0010126:	68 66 01 03 c0       	push   0xc0030166
c001012b:	e8 98 fd 00 00       	call   c001fec8 <CPrintf>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	90                   	nop
c0010134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001013b:	85 c0                	test   eax,eax
c001013d:	74 45                	je     c0010184 <tcp_output+0x160>
c001013f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010143:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010146:	0f b6 c0             	movzx  eax,al
c0010149:	83 e0 44             	and    eax,0x44
c001014c:	75 36                	jne    c0010184 <tcp_output+0x160>
c001014e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010152:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010155:	85 c0                	test   eax,eax
c0010157:	74 33                	je     c001018c <tcp_output+0x168>
c0010159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001015d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	85 c0                	test   eax,eax
c0010164:	75 1e                	jne    c0010184 <tcp_output+0x160>
c0010166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001016d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010177:	0f b7 d2             	movzx  edx,dx
c001017a:	0f b7 c0             	movzx  eax,ax
c001017d:	39 c2                	cmp    edx,eax
c001017f:	72 0b                	jb     c001018c <tcp_output+0x168>
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	b8 01 00 00 00       	mov    eax,0x1
c0010189:	eb 09                	jmp    c0010194 <tcp_output+0x170>
c001018b:	90                   	nop
c001018c:	b8 00 00 00 00       	mov    eax,0x0
c0010191:	8d 76 00             	lea    esi,[esi+0x0]
c0010194:	85 c0                	test   eax,eax
c0010196:	75 18                	jne    c00101b0 <tcp_output+0x18c>
c0010198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001019f:	0f b6 c0             	movzx  eax,al
c00101a2:	25 a0 00 00 00       	and    eax,0xa0
c00101a7:	0f 84 5b 02 00 00    	je     c0010408 <tcp_output+0x3e4>
c00101ad:	8d 76 00             	lea    esi,[esi+0x0]
c00101b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ba:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00101bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00101c4:	83 f8 02             	cmp    eax,0x2
c00101c7:	74 3f                	je     c0010208 <tcp_output+0x1e4>
c00101c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101d0:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	6a 10                	push   0x10
c00101d9:	e8 0a 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 c1                	mov    ecx,eax
c00101e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	09 c8                	or     eax,ecx
c00101ee:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00101f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101f9:	83 e0 fc             	and    eax,0xfffffffc
c00101fc:	88 c2                	mov    dl,al
c00101fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010202:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	83 ec 08             	sub    esp,0x8
c001020b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001020f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010213:	e8 e0 fb ff ff       	call   c000fdf8 <tcp_output_segment>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	50                   	push   eax
c0010229:	e8 de 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	89 c3                	mov    ebx,eax
c0010233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001023a:	0f b7 f0             	movzx  esi,ax
c001023d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010241:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010244:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010248:	0f b7 c0             	movzx  eax,ax
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	50                   	push   eax
c001024f:	e8 94 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	0f b7 c0             	movzx  eax,ax
c001025a:	83 e0 03             	and    eax,0x3
c001025d:	0f 95 c0             	setne  al
c0010260:	0f b6 c0             	movzx  eax,al
c0010263:	01 f0                	add    eax,esi
c0010265:	01 d8                	add    eax,ebx
c0010267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001026b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001026f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010272:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010276:	79 0c                	jns    c0010284 <tcp_output+0x260>
c0010278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001027c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010280:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010283:	90                   	nop
c0010284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001028b:	0f b7 d8             	movzx  ebx,ax
c001028e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010292:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010295:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010299:	0f b7 c0             	movzx  eax,ax
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	50                   	push   eax
c00102a0:	e8 43 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	0f b7 c0             	movzx  eax,ax
c00102ab:	83 e0 03             	and    eax,0x3
c00102ae:	0f 95 c0             	setne  al
c00102b1:	0f b6 c0             	movzx  eax,al
c00102b4:	01 d8                	add    eax,ebx
c00102b6:	85 c0                	test   eax,eax
c00102b8:	0f 8e ee 00 00 00    	jle    c00103ac <tcp_output+0x388>
c00102be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00102cf:	85 c0                	test   eax,eax
c00102d1:	75 19                	jne    c00102ec <tcp_output+0x2c8>
c00102d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102db:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00102de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e6:	e9 d1 00 00 00       	jmp    c00103bc <tcp_output+0x398>
c00102eb:	90                   	nop
c00102ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 0d 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	89 c3                	mov    ebx,eax
c0010304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010308:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001030b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	50                   	push   eax
c0010312:	e8 f5 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	29 c3                	sub    ebx,eax
c001031c:	89 d8                	mov    eax,ebx
c001031e:	79 74                	jns    c0010394 <tcp_output+0x370>
c0010320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010324:	83 c0 7c             	add    eax,0x7c
c0010327:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032b:	eb 0f                	jmp    c001033c <tcp_output+0x318>
c001032d:	8d 76 00             	lea    esi,[esi+0x0]
c0010330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010334:	8b 00                	mov    eax,DWORD PTR [eax]
c0010336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001033a:	66 90                	xchg   ax,ax
c001033c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010340:	8b 00                	mov    eax,DWORD PTR [eax]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 36                	je     c001037c <tcp_output+0x358>
c0010346:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034a:	8b 00                	mov    eax,DWORD PTR [eax]
c001034c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001034f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	50                   	push   eax
c0010356:	e8 b1 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	89 c3                	mov    ebx,eax
c0010360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	50                   	push   eax
c001036e:	e8 99 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010373:	83 c4 10             	add    esp,0x10
c0010376:	29 c3                	sub    ebx,eax
c0010378:	89 d8                	mov    eax,ebx
c001037a:	78 b4                	js     c0010330 <tcp_output+0x30c>
c001037c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010380:	8b 10                	mov    edx,DWORD PTR [eax]
c0010382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010386:	89 10                	mov    DWORD PTR [eax],edx
c0010388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010390:	89 10                	mov    DWORD PTR [eax],edx
c0010392:	eb 28                	jmp    c00103bc <tcp_output+0x398>
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001039c:	89 10                	mov    DWORD PTR [eax],edx
c001039e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00103a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00103a8:	eb 12                	jmp    c00103bc <tcp_output+0x398>
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103b3:	e8 b4 9d ff ff       	call   c000a16c <tcp_seg_free>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	90                   	nop
c00103bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00103c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103c7:	90                   	nop
c00103c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103cd:	74 3d                	je     c001040c <tcp_output+0x3e8>
c00103cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	50                   	push   eax
c00103dd:	e8 2a 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 c2                	mov    edx,eax
c00103e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103eb:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00103ee:	29 c2                	sub    edx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103f7:	0f b7 c0             	movzx  eax,ax
c00103fa:	01 d0                	add    eax,edx
c00103fc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010400:	0f 83 f6 fc ff ff    	jae    c00100fc <tcp_output+0xd8>
c0010406:	eb 04                	jmp    c001040c <tcp_output+0x3e8>
c0010408:	90                   	nop
c0010409:	8d 76 00             	lea    esi,[esi+0x0]
c001040c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010410:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010413:	85 c0                	test   eax,eax
c0010415:	75 0d                	jne    c0010424 <tcp_output+0x400>
c0010417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001041b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010421:	8d 76 00             	lea    esi,[esi+0x0]
c0010424:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010429:	74 65                	je     c0010490 <tcp_output+0x46c>
c001042b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001042f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010435:	0f b6 c0             	movzx  eax,al
c0010438:	85 c0                	test   eax,eax
c001043a:	75 54                	jne    c0010490 <tcp_output+0x46c>
c001043c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010440:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010443:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	50                   	push   eax
c001044a:	e8 bd 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	89 c2                	mov    edx,eax
c0010454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010458:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001045b:	29 c2                	sub    edx,eax
c001045d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010464:	0f b7 c0             	movzx  eax,ax
c0010467:	01 c2                	add    edx,eax
c0010469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001046d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010470:	0f b7 c0             	movzx  eax,ax
c0010473:	39 c2                	cmp    edx,eax
c0010475:	76 19                	jbe    c0010490 <tcp_output+0x46c>
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010489:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010494:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010497:	83 e0 7f             	and    eax,0x7f
c001049a:	88 c2                	mov    dl,al
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00104a3:	b0 00                	mov    al,0x0
c00104a5:	8d 76 00             	lea    esi,[esi+0x0]
c00104a8:	83 c4 24             	add    esp,0x24
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	c3                   	ret    
c00104ae:	66 90                	xchg   ax,ax

c00104b0 <tcp_rst>:
c00104b0:	83 ec 2c             	sub    esp,0x2c
c00104b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00104b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104bb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00104c0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	6a 00                	push   0x0
c00104ca:	6a 14                	push   0x14
c00104cc:	6a 01                	push   0x1
c00104ce:	e8 f9 81 ff ff       	call   c00086cc <pbuf_alloc>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00104da:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104df:	0f 84 37 01 00 00    	je     c001061c <tcp_rst+0x16c>
c00104e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104e9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00104ed:	0f b7 c0             	movzx  eax,ax
c00104f0:	83 f8 13             	cmp    eax,0x13
c00104f3:	77 17                	ja     c001050c <tcp_rst+0x5c>
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	68 80 0d 03 c0       	push   0xc0030d80
c00104fd:	68 66 01 03 c0       	push   0xc0030166
c0010502:	e8 c1 f9 00 00       	call   c001fec8 <CPrintf>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	66 90                	xchg   ax,ax
c001050c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010517:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	50                   	push   eax
c0010520:	e8 c3 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001052c:	66 89 02             	mov    WORD PTR [edx],ax
c001052f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	50                   	push   eax
c0010538:	e8 ab 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001054f:	e8 b8 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	89 c2                	mov    edx,eax
c0010559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001055d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010567:	e8 a0 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	89 c2                	mov    edx,eax
c0010571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010575:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 14 50 00 00       	push   0x5014
c0010580:	e8 63 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001058c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010594:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001059a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001059e:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00105a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105a8:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00105ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00105b5:	0f b7 c0             	movzx  eax,ax
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	50                   	push   eax
c00105bc:	6a 06                	push   0x6
c00105be:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00105ca:	e8 41 2d 00 00       	call   c0013310 <inet_chksum_pseudo>
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105d6:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00105da:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c00105e0:	83 c0 01             	add    eax,0x1
c00105e3:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c00105e9:	83 ec 08             	sub    esp,0x8
c00105ec:	6a 06                	push   0x6
c00105ee:	6a 00                	push   0x0
c00105f0:	68 ff 00 00 00       	push   0xff
c00105f5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010601:	e8 3e 39 00 00       	call   c0013f44 <ip_output>
c0010606:	83 c4 20             	add    esp,0x20
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010610:	e8 df 7e ff ff       	call   c00084f4 <pbuf_free>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	eb 06                	jmp    c0010620 <tcp_rst+0x170>
c001061a:	66 90                	xchg   ax,ax
c001061c:	90                   	nop
c001061d:	8d 76 00             	lea    esi,[esi+0x0]
c0010620:	83 c4 2c             	add    esp,0x2c
c0010623:	c3                   	ret    

c0010624 <tcp_rexmit_rto>:
c0010624:	83 ec 1c             	sub    esp,0x1c
c0010627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001062b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001062e:	85 c0                	test   eax,eax
c0010630:	74 7a                	je     c00106ac <tcp_rexmit_rto+0x88>
c0010632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010636:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063d:	eb 0d                	jmp    c001064c <tcp_rexmit_rto+0x28>
c001063f:	90                   	nop
c0010640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010644:	8b 00                	mov    eax,DWORD PTR [eax]
c0010646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001064a:	66 90                	xchg   ax,ax
c001064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010650:	8b 00                	mov    eax,DWORD PTR [eax]
c0010652:	85 c0                	test   eax,eax
c0010654:	75 ea                	jne    c0010640 <tcp_rexmit_rto+0x1c>
c0010656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065a:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c001065d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010661:	89 10                	mov    DWORD PTR [eax],edx
c0010663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010667:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001066a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c001067c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010680:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010683:	83 c0 01             	add    eax,0x1
c0010686:	88 c2                	mov    dl,al
c0010688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001068c:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001068f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010693:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106a1:	e8 7e f9 ff ff       	call   c0010024 <tcp_output>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	eb 05                	jmp    c00106b0 <tcp_rexmit_rto+0x8c>
c00106ab:	90                   	nop
c00106ac:	90                   	nop
c00106ad:	8d 76 00             	lea    esi,[esi+0x0]
c00106b0:	83 c4 1c             	add    esp,0x1c
c00106b3:	c3                   	ret    

c00106b4 <tcp_rexmit>:
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 18             	sub    esp,0x18
c00106b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106bc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106bf:	85 c0                	test   eax,eax
c00106c1:	0f 84 a9 00 00 00    	je     c0010770 <tcp_rexmit+0xbc>
c00106c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00106d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106dc:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00106df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106e3:	83 c0 78             	add    eax,0x78
c00106e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ea:	eb 0c                	jmp    c00106f8 <tcp_rexmit+0x44>
c00106ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	66 90                	xchg   ax,ax
c00106f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106fe:	85 c0                	test   eax,eax
c0010700:	74 36                	je     c0010738 <tcp_rexmit+0x84>
c0010702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010706:	8b 00                	mov    eax,DWORD PTR [eax]
c0010708:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001070b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	50                   	push   eax
c0010712:	e8 f5 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	89 c3                	mov    ebx,eax
c001071c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	50                   	push   eax
c001072a:	e8 dd 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	29 c3                	sub    ebx,eax
c0010734:	89 d8                	mov    eax,ebx
c0010736:	78 b4                	js     c00106ec <tcp_rexmit+0x38>
c0010738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001073c:	8b 10                	mov    edx,DWORD PTR [eax]
c001073e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010742:	89 10                	mov    DWORD PTR [eax],edx
c0010744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 10                	mov    DWORD PTR [eax],edx
c001074e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010752:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010755:	83 c0 01             	add    eax,0x1
c0010758:	88 c2                	mov    dl,al
c001075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075e:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010765:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001076c:	eb 06                	jmp    c0010774 <tcp_rexmit+0xc0>
c001076e:	66 90                	xchg   ax,ax
c0010770:	90                   	nop
c0010771:	8d 76 00             	lea    esi,[esi+0x0]
c0010774:	83 c4 18             	add    esp,0x18
c0010777:	5b                   	pop    ebx
c0010778:	c3                   	ret    
c0010779:	8d 76 00             	lea    esi,[esi+0x0]

c001077c <tcp_rexmit_fast>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010783:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010786:	85 c0                	test   eax,eax
c0010788:	0f 84 ca 00 00 00    	je     c0010858 <tcp_rexmit_fast+0xdc>
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010795:	0f b6 c0             	movzx  eax,al
c0010798:	83 e0 04             	and    eax,0x4
c001079b:	0f 85 b7 00 00 00    	jne    c0010858 <tcp_rexmit_fast+0xdc>
c00107a1:	83 ec 0c             	sub    esp,0xc
c00107a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a8:	e8 07 ff ff ff       	call   c00106b4 <tcp_rexmit>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00107b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bc:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107bf:	0f b7 d2             	movzx  edx,dx
c00107c2:	0f b7 c0             	movzx  eax,ax
c00107c5:	39 c2                	cmp    edx,eax
c00107c7:	76 17                	jbe    c00107e0 <tcp_rexmit_fast+0x64>
c00107c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107d0:	0f b7 c0             	movzx  eax,ax
c00107d3:	d1 e8                	shr    eax,1
c00107d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d9:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107dd:	eb 19                	jmp    c00107f8 <tcp_rexmit_fast+0x7c>
c00107df:	90                   	nop
c00107e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	d1 e8                	shr    eax,1
c00107ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f1:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107f5:	8d 76 00             	lea    esi,[esi+0x0]
c00107f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fc:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00107ff:	0f b7 d0             	movzx  edx,ax
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010809:	0f b7 c0             	movzx  eax,ax
c001080c:	01 c0                	add    eax,eax
c001080e:	39 c2                	cmp    edx,eax
c0010810:	7d 12                	jge    c0010824 <tcp_rexmit_fast+0xa8>
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010819:	d1 e0                	shl    eax,1
c001081b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001081f:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010823:	90                   	nop
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010832:	89 c1                	mov    ecx,eax
c0010834:	d1 e1                	shl    ecx,1
c0010836:	01 c8                	add    eax,ecx
c0010838:	01 d0                	add    eax,edx
c001083a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001083e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010849:	83 c8 04             	or     eax,0x4
c001084c:	88 c2                	mov    dl,al
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010855:	8d 76 00             	lea    esi,[esi+0x0]
c0010858:	90                   	nop
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	8d 76 00             	lea    esi,[esi+0x0]

c0010860 <tcp_keepalive>:
c0010860:	83 ec 1c             	sub    esp,0x1c
c0010863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010867:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001086a:	83 e8 01             	sub    eax,0x1
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	50                   	push   eax
c0010871:	e8 96 03 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	50                   	push   eax
c001087a:	6a 00                	push   0x0
c001087c:	6a 00                	push   0x0
c001087e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010882:	e8 f1 e2 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c0010887:	83 c4 10             	add    esp,0x10
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010893:	0f 84 87 00 00 00    	je     c0010920 <tcp_keepalive+0xc0>
c0010899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001089d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108ab:	0f b7 d0             	movzx  edx,ax
c00108ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	52                   	push   edx
c00108bd:	6a 06                	push   0x6
c00108bf:	51                   	push   ecx
c00108c0:	50                   	push   eax
c00108c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00108c5:	e8 46 2a 00 00       	call   c0013310 <inet_chksum_pseudo>
c00108ca:	83 c4 20             	add    esp,0x20
c00108cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d1:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00108d5:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c00108db:	83 c0 01             	add    eax,0x1
c00108de:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c00108e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108e8:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00108eb:	0f b6 d0             	movzx  edx,al
c00108ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f9:	83 ec 08             	sub    esp,0x8
c00108fc:	6a 06                	push   0x6
c00108fe:	6a 00                	push   0x0
c0010900:	52                   	push   edx
c0010901:	51                   	push   ecx
c0010902:	50                   	push   eax
c0010903:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010907:	e8 38 36 00 00       	call   c0013f44 <ip_output>
c001090c:	83 c4 20             	add    esp,0x20
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010916:	e8 d9 7b ff ff       	call   c00084f4 <pbuf_free>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	eb 04                	jmp    c0010924 <tcp_keepalive+0xc4>
c0010920:	90                   	nop
c0010921:	8d 76 00             	lea    esi,[esi+0x0]
c0010924:	83 c4 1c             	add    esp,0x1c
c0010927:	c3                   	ret    

c0010928 <tcp_zero_window_probe>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 28             	sub    esp,0x28
c001092c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010930:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001093c:	75 0e                	jne    c001094c <tcp_zero_window_probe+0x24>
c001093e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010942:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010945:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010949:	8d 76 00             	lea    esi,[esi+0x0]
c001094c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010951:	0f 84 95 01 00 00    	je     c0010aec <tcp_zero_window_probe+0x1c4>
c0010957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010962:	0f b7 c0             	movzx  eax,ax
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	50                   	push   eax
c0010969:	e8 7a 02 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	0f b7 c0             	movzx  eax,ax
c0010974:	83 e0 01             	and    eax,0x1
c0010977:	74 17                	je     c0010990 <tcp_zero_window_probe+0x68>
c0010979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001097d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010980:	0f b7 c0             	movzx  eax,ax
c0010983:	85 c0                	test   eax,eax
c0010985:	75 09                	jne    c0010990 <tcp_zero_window_probe+0x68>
c0010987:	b8 01 00 00 00       	mov    eax,0x1
c001098c:	eb 0a                	jmp    c0010998 <tcp_zero_window_probe+0x70>
c001098e:	66 90                	xchg   ax,ax
c0010990:	b8 00 00 00 00       	mov    eax,0x0
c0010995:	8d 76 00             	lea    esi,[esi+0x0]
c0010998:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001099c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109a1:	85 c0                	test   eax,eax
c00109a3:	0f 94 c0             	sete   al
c00109a6:	0f b6 c0             	movzx  eax,al
c00109a9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00109ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109b8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00109bd:	52                   	push   edx
c00109be:	50                   	push   eax
c00109bf:	6a 00                	push   0x0
c00109c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00109c5:	e8 ae e1 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00109d6:	0f 84 14 01 00 00    	je     c0010af0 <tcp_zero_window_probe+0x1c8>
c00109dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109ec:	85 c0                	test   eax,eax
c00109ee:	74 28                	je     c0010a18 <tcp_zero_window_probe+0xf0>
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00109f8:	80 e4 c0             	and    ah,0xc0
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	6a 11                	push   0x11
c0010a02:	e8 e1 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	09 d8                	or     eax,ebx
c0010a0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a10:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010a14:	eb 5a                	jmp    c0010a70 <tcp_zero_window_probe+0x148>
c0010a16:	66 90                	xchg   ax,ax
c0010a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a2d:	83 c0 14             	add    eax,0x14
c0010a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a38:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a3c:	0f b7 c0             	movzx  eax,ax
c0010a3f:	83 ec 0c             	sub    esp,0xc
c0010a42:	50                   	push   eax
c0010a43:	e8 a0 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	0f b7 c0             	movzx  eax,ax
c0010a4e:	c1 e8 0c             	shr    eax,0xc
c0010a51:	c1 e0 02             	shl    eax,0x2
c0010a54:	0f b7 d0             	movzx  edx,ax
c0010a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5e:	52                   	push   edx
c0010a5f:	6a 01                	push   0x1
c0010a61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a65:	50                   	push   eax
c0010a66:	e8 29 87 ff ff       	call   c0009194 <pbuf_copy_partial>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	66 90                	xchg   ax,ax
c0010a70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a77:	0f b7 d0             	movzx  edx,ax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	52                   	push   edx
c0010a89:	6a 06                	push   0x6
c0010a8b:	51                   	push   ecx
c0010a8c:	50                   	push   eax
c0010a8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010a91:	e8 7a 28 00 00       	call   c0013310 <inet_chksum_pseudo>
c0010a96:	83 c4 20             	add    esp,0x20
c0010a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a9d:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010aa1:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c0010aa7:	83 c0 01             	add    eax,0x1
c0010aaa:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c0010ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ab4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010ab7:	0f b6 d0             	movzx  edx,al
c0010aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010abe:	8d 48 04             	lea    ecx,[eax+0x4]
c0010ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	6a 06                	push   0x6
c0010aca:	6a 00                	push   0x0
c0010acc:	52                   	push   edx
c0010acd:	51                   	push   ecx
c0010ace:	50                   	push   eax
c0010acf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010ad3:	e8 6c 34 00 00       	call   c0013f44 <ip_output>
c0010ad8:	83 c4 20             	add    esp,0x20
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ae2:	e8 0d 7a ff ff       	call   c00084f4 <pbuf_free>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	eb 08                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aec:	90                   	nop
c0010aed:	eb 05                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aef:	90                   	nop
c0010af0:	90                   	nop
c0010af1:	8d 76 00             	lea    esi,[esi+0x0]
c0010af4:	83 c4 28             	add    esp,0x28
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	66 90                	xchg   ax,ax
c0010afb:	90                   	nop

c0010afc <sys_timeout>:
c0010afc:	83 ec 1c             	sub    esp,0x1c
c0010aff:	83 ec 0c             	sub    esp,0xc
c0010b02:	6a 0b                	push   0xb
c0010b04:	e8 03 70 ff ff       	call   c0007b0c <memp_malloc>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b15:	75 25                	jne    c0010b3c <sys_timeout+0x40>
c0010b17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b1c:	0f 85 3e 01 00 00    	jne    c0010c60 <sys_timeout+0x164>
c0010b22:	83 ec 08             	sub    esp,0x8
c0010b25:	68 8c 10 03 c0       	push   0xc003108c
c0010b2a:	68 66 01 03 c0       	push   0xc0030166
c0010b2f:	e8 94 f3 00 00       	call   c001fec8 <CPrintf>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	e9 24 01 00 00       	jmp    c0010c60 <sys_timeout+0x164>
c0010b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	75 10                	jne    c0010b80 <sys_timeout+0x84>
c0010b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b74:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010b79:	e9 e6 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010b7e:	66 90                	xchg   ax,ax
c0010b80:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b8c:	73 2e                	jae    c0010bbc <sys_timeout+0xc0>
c0010b8e:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b93:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b96:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010b9b:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba2:	8b 15 d4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8d4
c0010ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bac:	89 10                	mov    DWORD PTR [eax],edx
c0010bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb2:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010bb7:	e9 a8 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010bbc:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bc5:	e9 86 00 00 00       	jmp    c0010c50 <sys_timeout+0x154>
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bda:	29 c2                	sub    edx,eax
c0010bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	74 17                	je     c0010c04 <sys_timeout+0x108>
c0010bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bf3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfd:	39 c2                	cmp    edx,eax
c0010bff:	76 43                	jbe    c0010c44 <sys_timeout+0x148>
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0a:	85 c0                	test   eax,eax
c0010c0c:	74 1e                	je     c0010c2c <sys_timeout+0x130>
c0010c0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c14:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c24:	29 d1                	sub    ecx,edx
c0010c26:	89 ca                	mov    edx,ecx
c0010c28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c2b:	90                   	nop
c0010c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c36:	89 10                	mov    DWORD PTR [eax],edx
c0010c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c40:	89 10                	mov    DWORD PTR [eax],edx
c0010c42:	eb 20                	jmp    c0010c64 <sys_timeout+0x168>
c0010c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c4e:	66 90                	xchg   ax,ax
c0010c50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c55:	0f 85 71 ff ff ff    	jne    c0010bcc <sys_timeout+0xd0>
c0010c5b:	eb 07                	jmp    c0010c64 <sys_timeout+0x168>
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c60:	90                   	nop
c0010c61:	8d 76 00             	lea    esi,[esi+0x0]
c0010c64:	83 c4 1c             	add    esp,0x1c
c0010c67:	c3                   	ret    

c0010c68 <tcpip_tcp_timer>:
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	e8 34 a5 ff ff       	call   c000b1a4 <tcp_tmr>
c0010c70:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0010c75:	85 c0                	test   eax,eax
c0010c77:	75 0b                	jne    c0010c84 <tcpip_tcp_timer+0x1c>
c0010c79:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	74 1e                	je     c0010ca0 <tcpip_tcp_timer+0x38>
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 00                	push   0x0
c0010c89:	68 68 0c 01 c0       	push   0xc0010c68
c0010c8e:	68 fa 00 00 00       	push   0xfa
c0010c93:	e8 64 fe ff ff       	call   c0010afc <sys_timeout>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	eb 0f                	jmp    c0010cac <tcpip_tcp_timer+0x44>
c0010c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca0:	c7 05 d0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8d0,0x0
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	83 c4 0c             	add    esp,0xc
c0010cb0:	c3                   	ret    
c0010cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0010cb4 <tcp_timer_needed>:
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	a1 d0 b8 03 c0       	mov    eax,ds:0xc003b8d0
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	75 38                	jne    c0010cf8 <tcp_timer_needed+0x44>
c0010cc0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0010cc5:	85 c0                	test   eax,eax
c0010cc7:	75 0b                	jne    c0010cd4 <tcp_timer_needed+0x20>
c0010cc9:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c0010cce:	85 c0                	test   eax,eax
c0010cd0:	74 26                	je     c0010cf8 <tcp_timer_needed+0x44>
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	c7 05 d0 b8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003b8d0,0x1
c0010cde:	83 ec 04             	sub    esp,0x4
c0010ce1:	6a 00                	push   0x0
c0010ce3:	68 68 0c 01 c0       	push   0xc0010c68
c0010ce8:	68 fa 00 00 00       	push   0xfa
c0010ced:	e8 0a fe ff ff       	call   c0010afc <sys_timeout>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf8:	90                   	nop
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	c3                   	ret    
c0010cfd:	8d 76 00             	lea    esi,[esi+0x0]

c0010d00 <ip_reass_timer>:
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	e8 f0 3a 00 00       	call   c00147f8 <ip_reass_tmr>
c0010d08:	83 ec 04             	sub    esp,0x4
c0010d0b:	6a 00                	push   0x0
c0010d0d:	68 00 0d 01 c0       	push   0xc0010d00
c0010d12:	68 e8 03 00 00       	push   0x3e8
c0010d17:	e8 e0 fd ff ff       	call   c0010afc <sys_timeout>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	90                   	nop
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	c3                   	ret    

c0010d24 <arp_timer>:
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	e8 60 0d 00 00       	call   c0011a8c <etharp_tmr>
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 24 0d 01 c0       	push   0xc0010d24
c0010d36:	68 88 13 00 00       	push   0x1388
c0010d3b:	e8 bc fd ff ff       	call   c0010afc <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	90                   	nop
c0010d44:	83 c4 0c             	add    esp,0xc
c0010d47:	c3                   	ret    

c0010d48 <sys_timeouts_init>:
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	83 ec 04             	sub    esp,0x4
c0010d4e:	6a 00                	push   0x0
c0010d50:	68 00 0d 01 c0       	push   0xc0010d00
c0010d55:	68 e8 03 00 00       	push   0x3e8
c0010d5a:	e8 9d fd ff ff       	call   c0010afc <sys_timeout>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 04             	sub    esp,0x4
c0010d65:	6a 00                	push   0x0
c0010d67:	68 24 0d 01 c0       	push   0xc0010d24
c0010d6c:	68 88 13 00 00       	push   0x1388
c0010d71:	e8 86 fd ff ff       	call   c0010afc <sys_timeout>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	90                   	nop
c0010d7a:	83 c4 0c             	add    esp,0xc
c0010d7d:	c3                   	ret    
c0010d7e:	66 90                	xchg   ax,ax

c0010d80 <sys_untimeout>:
c0010d80:	83 ec 1c             	sub    esp,0x1c
c0010d83:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010d88:	85 c0                	test   eax,eax
c0010d8a:	0f 84 b4 00 00 00    	je     c0010e44 <sys_untimeout+0xc4>
c0010d90:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da1:	e9 8e 00 00 00       	jmp    c0010e34 <sys_untimeout+0xb4>
c0010da6:	66 90                	xchg   ax,ax
c0010da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010daf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010db3:	75 6b                	jne    c0010e20 <sys_untimeout+0xa0>
c0010db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010db9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dbc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010dc0:	75 5e                	jne    c0010e20 <sys_untimeout+0xa0>
c0010dc2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010dc7:	75 0f                	jne    c0010dd8 <sys_untimeout+0x58>
c0010dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dcf:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010dd4:	eb 0e                	jmp    c0010de4 <sys_untimeout+0x64>
c0010dd6:	66 90                	xchg   ax,ax
c0010dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de2:	89 10                	mov    DWORD PTR [eax],edx
c0010de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dea:	85 c0                	test   eax,eax
c0010dec:	74 1e                	je     c0010e0c <sys_untimeout+0x8c>
c0010dee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010df4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010df7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dfb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e04:	01 ca                	add    edx,ecx
c0010e06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e09:	8d 76 00             	lea    esi,[esi+0x0]
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e13:	6a 0b                	push   0xb
c0010e15:	e8 1e 6e ff ff       	call   c0007c38 <memp_free>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	eb 29                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e1f:	90                   	nop
c0010e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e32:	66 90                	xchg   ax,ax
c0010e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e39:	0f 85 69 ff ff ff    	jne    c0010da8 <sys_untimeout+0x28>
c0010e3f:	90                   	nop
c0010e40:	eb 06                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	90                   	nop
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	83 c4 1c             	add    esp,0x1c
c0010e4b:	c3                   	ret    

c0010e4c <sys_timeouts_mbox_fetch>:
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	90                   	nop
c0010e50:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1f                	jne    c0010e78 <sys_timeouts_mbox_fetch+0x2c>
c0010e59:	83 ec 04             	sub    esp,0x4
c0010e5c:	6a 00                	push   0x0
c0010e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e66:	e8 c1 fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e72:	e9 cd 00 00 00       	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010e77:	90                   	nop
c0010e78:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	85 c0                	test   eax,eax
c0010e82:	74 24                	je     c0010ea8 <sys_timeouts_mbox_fetch+0x5c>
c0010e84:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	83 ec 04             	sub    esp,0x4
c0010e8f:	50                   	push   eax
c0010e90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e98:	e8 8f fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea4:	eb 0a                	jmp    c0010eb0 <sys_timeouts_mbox_fetch+0x64>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010eb0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010eb5:	75 5d                	jne    c0010f14 <sys_timeouts_mbox_fetch+0xc8>
c0010eb7:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec6:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee7:	6a 0b                	push   0xb
c0010ee9:	e8 4a 6d ff ff       	call   c0007c38 <memp_free>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010ef6:	0f 84 54 ff ff ff    	je     c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f07:	ff d0                	call   eax
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	e9 3f ff ff ff       	jmp    c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]
c0010f14:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010f20:	73 16                	jae    c0010f38 <sys_timeouts_mbox_fetch+0xec>
c0010f22:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f2a:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f2f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f36:	eb 0c                	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010f38:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f44:	90                   	nop
c0010f45:	83 c4 1c             	add    esp,0x1c
c0010f48:	c3                   	ret    
c0010f49:	66 90                	xchg   ax,ax
c0010f4b:	90                   	nop

c0010f4c <udp_input>:
c0010f4c:	53                   	push   ebx
c0010f4d:	83 ec 28             	sub    esp,0x28
c0010f50:	66 a1 9a 77 03 c0    	mov    ax,ds:0xc003779a
c0010f56:	83 c0 01             	add    eax,0x1
c0010f59:	66 a3 9a 77 03 c0    	mov    ds:0xc003779a,ax
c0010f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f71:	0f b7 d8             	movzx  ebx,ax
c0010f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f78:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f7b:	0f b7 c0             	movzx  eax,ax
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 61 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	0f b7 c0             	movzx  eax,ax
c0010f8d:	c1 e8 08             	shr    eax,0x8
c0010f90:	0f b7 c0             	movzx  eax,ax
c0010f93:	83 e0 0f             	and    eax,0xf
c0010f96:	83 c0 02             	add    eax,0x2
c0010f99:	c1 e0 02             	shl    eax,0x2
c0010f9c:	39 c3                	cmp    ebx,eax
c0010f9e:	7c 3c                	jl     c0010fdc <udp_input+0x90>
c0010fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010fa7:	0f b7 c0             	movzx  eax,ax
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	50                   	push   eax
c0010fae:	e8 35 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	0f b7 c0             	movzx  eax,ax
c0010fb9:	c1 e8 08             	shr    eax,0x8
c0010fbc:	83 e0 0f             	and    eax,0xf
c0010fbf:	c1 e0 02             	shl    eax,0x2
c0010fc2:	f7 d8                	neg    eax
c0010fc4:	98                   	cwde   
c0010fc5:	83 ec 08             	sub    esp,0x8
c0010fc8:	50                   	push   eax
c0010fc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fcd:	e8 86 73 ff ff       	call   c0008358 <pbuf_header>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	0f b6 c0             	movzx  eax,al
c0010fd8:	85 c0                	test   eax,eax
c0010fda:	74 34                	je     c0011010 <udp_input+0xc4>
c0010fdc:	66 a1 a2 77 03 c0    	mov    ax,ds:0xc00377a2
c0010fe2:	83 c0 01             	add    eax,0x1
c0010fe5:	66 a3 a2 77 03 c0    	mov    ds:0xc00377a2,ax
c0010feb:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0010ff1:	83 c0 01             	add    eax,0x1
c0010ff4:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011001:	e8 ee 74 ff ff       	call   c00084f4 <pbuf_free>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	e9 aa 03 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001100e:	66 90                	xchg   ax,ax
c0011010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001101b:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0011020:	83 ec 08             	sub    esp,0x8
c0011023:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011027:	50                   	push   eax
c0011028:	e8 bb 2f 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0011034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011038:	66 8b 00             	mov    ax,WORD PTR [eax]
c001103b:	0f b7 c0             	movzx  eax,ax
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	50                   	push   eax
c0011042:	e8 a1 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001104f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011053:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011057:	0f b7 c0             	movzx  eax,ax
c001105a:	83 ec 0c             	sub    esp,0xc
c001105d:	50                   	push   eax
c001105e:	e8 85 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001106b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011073:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011078:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011080:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011089:	e9 0a 01 00 00       	jmp    c0011198 <udp_input+0x24c>
c001108e:	66 90                	xchg   ax,ax
c0011090:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011099:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001109d:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00110a2:	0f b7 c0             	movzx  eax,ax
c00110a5:	39 c2                	cmp    edx,eax
c00110a7:	75 57                	jne    c0011100 <udp_input+0x1b4>
c00110a9:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110ae:	85 c0                	test   eax,eax
c00110b0:	75 12                	jne    c00110c4 <udp_input+0x178>
c00110b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 22                	je     c00110dc <udp_input+0x190>
c00110ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110be:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 18                	je     c00110dc <udp_input+0x190>
c00110c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00110ca:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00110cf:	39 c2                	cmp    edx,eax
c00110d1:	74 09                	je     c00110dc <udp_input+0x190>
c00110d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110d8:	85 c0                	test   eax,eax
c00110da:	74 24                	je     c0011100 <udp_input+0x1b4>
c00110dc:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c00110e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110e6:	75 18                	jne    c0011100 <udp_input+0x1b4>
c00110e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ec:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00110ef:	0f b6 c0             	movzx  eax,al
c00110f2:	83 e0 04             	and    eax,0x4
c00110f5:	75 09                	jne    c0011100 <udp_input+0x1b4>
c00110f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ff:	90                   	nop
c0011100:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011105:	85 c0                	test   eax,eax
c0011107:	74 7b                	je     c0011184 <udp_input+0x238>
c0011109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011110:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011115:	0f b7 c0             	movzx  eax,ax
c0011118:	39 c2                	cmp    edx,eax
c001111a:	75 68                	jne    c0011184 <udp_input+0x238>
c001111c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011120:	83 c0 04             	add    eax,0x4
c0011123:	74 1b                	je     c0011140 <udp_input+0x1f4>
c0011125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112c:	85 c0                	test   eax,eax
c001112e:	74 10                	je     c0011140 <udp_input+0x1f4>
c0011130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011137:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c001113c:	39 c2                	cmp    edx,eax
c001113e:	75 44                	jne    c0011184 <udp_input+0x238>
c0011140:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011145:	74 29                	je     c0011170 <udp_input+0x224>
c0011147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001114b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001114e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011155:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c001115b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c001116b:	eb 37                	jmp    c00111a4 <udp_input+0x258>
c001116d:	8d 76 00             	lea    esi,[esi+0x0]
c0011170:	66 a1 ae 77 03 c0    	mov    ax,ds:0xc00377ae
c0011176:	83 c0 01             	add    eax,0x1
c0011179:	66 a3 ae 77 03 c0    	mov    ds:0xc00377ae,ax
c001117f:	eb 23                	jmp    c00111a4 <udp_input+0x258>
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011193:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011197:	90                   	nop
c0011198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001119d:	0f 85 ed fe ff ff    	jne    c0011090 <udp_input+0x144>
c00111a3:	90                   	nop
c00111a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111a9:	75 09                	jne    c00111b4 <udp_input+0x268>
c00111ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111b3:	90                   	nop
c00111b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b9:	75 15                	jne    c00111d0 <udp_input+0x284>
c00111bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111c2:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00111c7:	39 c2                	cmp    edx,eax
c00111c9:	0f 85 d9 01 00 00    	jne    c00113a8 <udp_input+0x45c>
c00111cf:	90                   	nop
c00111d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111d4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00111d8:	0f b7 c0             	movzx  eax,ax
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 61                	je     c0011240 <udp_input+0x2f4>
c00111df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00111e6:	0f b7 c0             	movzx  eax,ax
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	50                   	push   eax
c00111ed:	6a 11                	push   0x11
c00111ef:	68 98 78 03 c0       	push   0xc0037898
c00111f4:	68 90 78 03 c0       	push   0xc0037890
c00111f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111fd:	e8 0e 21 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011202:	83 c4 20             	add    esp,0x20
c0011205:	0f b7 c0             	movzx  eax,ax
c0011208:	85 c0                	test   eax,eax
c001120a:	74 34                	je     c0011240 <udp_input+0x2f4>
c001120c:	66 a1 a0 77 03 c0    	mov    ax,ds:0xc00377a0
c0011212:	83 c0 01             	add    eax,0x1
c0011215:	66 a3 a0 77 03 c0    	mov    ds:0xc00377a0,ax
c001121b:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0011221:	83 c0 01             	add    eax,0x1
c0011224:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011231:	e8 be 72 ff ff       	call   c00084f4 <pbuf_free>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	e9 7a 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001123e:	66 90                	xchg   ax,ax
c0011240:	83 ec 08             	sub    esp,0x8
c0011243:	6a f8                	push   0xfffffff8
c0011245:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011249:	e8 0a 71 ff ff       	call   c0008358 <pbuf_header>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	0f b6 c0             	movzx  eax,al
c0011254:	85 c0                	test   eax,eax
c0011256:	74 38                	je     c0011290 <udp_input+0x344>
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	68 c9 10 03 c0       	push   0xc00310c9
c0011260:	68 66 01 03 c0       	push   0xc0030166
c0011265:	e8 5e ec 00 00       	call   c001fec8 <CPrintf>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0011273:	83 c0 01             	add    eax,0x1
c0011276:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c001127c:	83 ec 0c             	sub    esp,0xc
c001127f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011283:	e8 6c 72 ff ff       	call   c00084f4 <pbuf_free>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	e9 28 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c0011290:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011295:	74 51                	je     c00112e8 <udp_input+0x39c>
c0011297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001129b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001129e:	85 c0                	test   eax,eax
c00112a0:	74 32                	je     c00112d4 <udp_input+0x388>
c00112a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112a6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00112a9:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00112ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00112b2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	51                   	push   ecx
c00112b9:	68 90 78 03 c0       	push   0xc0037890
c00112be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00112c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00112c6:	52                   	push   edx
c00112c7:	ff d0                	call   eax
c00112c9:	83 c4 20             	add    esp,0x20
c00112cc:	e9 e7 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112d1:	8d 76 00             	lea    esi,[esi+0x0]
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112db:	e8 14 72 ff ff       	call   c00084f4 <pbuf_free>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	e9 d0 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112e8:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00112ed:	85 c0                	test   eax,eax
c00112ef:	0f 85 83 00 00 00    	jne    c0011378 <udp_input+0x42c>
c00112f5:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00112fa:	25 f0 00 00 00       	and    eax,0xf0
c00112ff:	3d e0 00 00 00       	cmp    eax,0xe0
c0011304:	74 72                	je     c0011378 <udp_input+0x42c>
c0011306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001130a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001130d:	0f b7 c0             	movzx  eax,ax
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 cf f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	0f b7 c0             	movzx  eax,ax
c001131f:	c1 e8 08             	shr    eax,0x8
c0011322:	0f b7 c0             	movzx  eax,ax
c0011325:	83 e0 0f             	and    eax,0xf
c0011328:	83 c0 02             	add    eax,0x2
c001132b:	c1 e0 02             	shl    eax,0x2
c001132e:	98                   	cwde   
c001132f:	83 ec 08             	sub    esp,0x8
c0011332:	50                   	push   eax
c0011333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011337:	e8 1c 70 ff ff       	call   c0008358 <pbuf_header>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001134a:	74 18                	je     c0011364 <udp_input+0x418>
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	68 dd 10 03 c0       	push   0xc00310dd
c0011354:	68 66 01 03 c0       	push   0xc0030166
c0011359:	e8 6a eb 00 00       	call   c001fec8 <CPrintf>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	6a 03                	push   0x3
c0011369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001136d:	e8 5e 1e 00 00       	call   c00131d0 <icmp_dest_unreach>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	8d 76 00             	lea    esi,[esi+0x0]
c0011378:	66 a1 a8 77 03 c0    	mov    ax,ds:0xc00377a8
c001137e:	83 c0 01             	add    eax,0x1
c0011381:	66 a3 a8 77 03 c0    	mov    ds:0xc00377a8,ax
c0011387:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c001138d:	83 c0 01             	add    eax,0x1
c0011390:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001139d:	e8 52 71 ff ff       	call   c00084f4 <pbuf_free>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb 11                	jmp    c00113b8 <udp_input+0x46c>
c00113a7:	90                   	nop
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113af:	e8 40 71 ff ff       	call   c00084f4 <pbuf_free>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	90                   	nop
c00113b8:	90                   	nop
c00113b9:	83 c4 28             	add    esp,0x28
c00113bc:	5b                   	pop    ebx
c00113bd:	c3                   	ret    
c00113be:	66 90                	xchg   ax,ax

c00113c0 <udp_bind>:
c00113c0:	83 ec 2c             	sub    esp,0x2c
c00113c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00113c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113cc:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00113d1:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00113d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113da:	e9 8d 00 00 00       	jmp    c001146c <udp_bind+0xac>
c00113df:	90                   	nop
c00113e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113e4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00113e8:	75 26                	jne    c0011410 <udp_bind+0x50>
c00113ea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00113ef:	85 c0                	test   eax,eax
c00113f1:	74 15                	je     c0011408 <udp_bind+0x48>
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	68 f1 10 03 c0       	push   0xc00310f1
c00113fb:	68 66 01 03 c0       	push   0xc0030166
c0011400:	e8 c3 ea 00 00       	call   c001fec8 <CPrintf>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001140d:	eb 51                	jmp    c0011460 <udp_bind+0xa0>
c001140f:	90                   	nop
c0011410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011414:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011418:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001141d:	0f b7 c0             	movzx  eax,ax
c0011420:	39 c2                	cmp    edx,eax
c0011422:	75 3c                	jne    c0011460 <udp_bind+0xa0>
c0011424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011428:	85 c0                	test   eax,eax
c001142a:	74 2c                	je     c0011458 <udp_bind+0x98>
c001142c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011430:	8b 00                	mov    eax,DWORD PTR [eax]
c0011432:	85 c0                	test   eax,eax
c0011434:	74 22                	je     c0011458 <udp_bind+0x98>
c0011436:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001143b:	74 1b                	je     c0011458 <udp_bind+0x98>
c001143d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011441:	8b 00                	mov    eax,DWORD PTR [eax]
c0011443:	85 c0                	test   eax,eax
c0011445:	74 11                	je     c0011458 <udp_bind+0x98>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	8b 10                	mov    edx,DWORD PTR [eax]
c001144d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011451:	8b 00                	mov    eax,DWORD PTR [eax]
c0011453:	39 c2                	cmp    edx,eax
c0011455:	75 09                	jne    c0011460 <udp_bind+0xa0>
c0011457:	90                   	nop
c0011458:	b0 f8                	mov    al,0xf8
c001145a:	e9 dd 00 00 00       	jmp    c001153c <udp_bind+0x17c>
c001145f:	90                   	nop
c0011460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011464:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146b:	90                   	nop
c001146c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011471:	0f 85 69 ff ff ff    	jne    c00113e0 <udp_bind+0x20>
c0011477:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001147c:	74 0a                	je     c0011488 <udp_bind+0xc8>
c001147e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011482:	8b 00                	mov    eax,DWORD PTR [eax]
c0011484:	eb 0a                	jmp    c0011490 <udp_bind+0xd0>
c0011486:	66 90                	xchg   ax,ax
c0011488:	b8 00 00 00 00       	mov    eax,0x0
c001148d:	8d 76 00             	lea    esi,[esi+0x0]
c0011490:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011494:	89 02                	mov    DWORD PTR [edx],eax
c0011496:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001149b:	85 c0                	test   eax,eax
c001149d:	75 6d                	jne    c001150c <udp_bind+0x14c>
c001149f:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00114a6:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00114ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114af:	eb 3b                	jmp    c00114ec <udp_bind+0x12c>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114bc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c1:	0f b7 c0             	movzx  eax,ax
c00114c4:	39 c2                	cmp    edx,eax
c00114c6:	75 18                	jne    c00114e0 <udp_bind+0x120>
c00114c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114cc:	83 c0 01             	add    eax,0x1
c00114cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00114d4:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00114d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114dd:	eb 0d                	jmp    c00114ec <udp_bind+0x12c>
c00114df:	90                   	nop
c00114e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114eb:	90                   	nop
c00114ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114f1:	74 0d                	je     c0011500 <udp_bind+0x140>
c00114f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00114fd:	75 b5                	jne    c00114b4 <udp_bind+0xf4>
c00114ff:	90                   	nop
c0011500:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011505:	74 05                	je     c001150c <udp_bind+0x14c>
c0011507:	b0 f8                	mov    al,0xf8
c0011509:	eb 31                	jmp    c001153c <udp_bind+0x17c>
c001150b:	90                   	nop
c001150c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011514:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011518:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001151d:	85 c0                	test   eax,eax
c001151f:	75 17                	jne    c0011538 <udp_bind+0x178>
c0011521:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c0011527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001152b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001152e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011532:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c0011537:	90                   	nop
c0011538:	b0 00                	mov    al,0x0
c001153a:	66 90                	xchg   ax,ax
c001153c:	83 c4 2c             	add    esp,0x2c
c001153f:	c3                   	ret    

c0011540 <udp_sendto_if>:
c0011540:	83 ec 2c             	sub    esp,0x2c
c0011543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011547:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001154c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011550:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011554:	0f b7 c0             	movzx  eax,ax
c0011557:	85 c0                	test   eax,eax
c0011559:	75 39                	jne    c0011594 <udp_sendto_if+0x54>
c001155b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001155f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011563:	0f b7 d0             	movzx  edx,ax
c0011566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001156a:	83 ec 04             	sub    esp,0x4
c001156d:	52                   	push   edx
c001156e:	50                   	push   eax
c001156f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011573:	e8 48 fe ff ff       	call   c00113c0 <udp_bind>
c0011578:	83 c4 10             	add    esp,0x10
c001157b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001157f:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011584:	85 c0                	test   eax,eax
c0011586:	74 0c                	je     c0011594 <udp_sendto_if+0x54>
c0011588:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001158c:	e9 2b 02 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	6a 08                	push   0x8
c0011599:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001159d:	e8 b6 6d ff ff       	call   c0008358 <pbuf_header>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 48                	je     c00115f4 <udp_sendto_if+0xb4>
c00115ac:	83 ec 04             	sub    esp,0x4
c00115af:	6a 00                	push   0x0
c00115b1:	6a 08                	push   0x8
c00115b3:	6a 01                	push   0x1
c00115b5:	e8 12 71 ff ff       	call   c00086cc <pbuf_alloc>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00115c6:	75 08                	jne    c00115d0 <udp_sendto_if+0x90>
c00115c8:	b0 ff                	mov    al,0xff
c00115ca:	e9 ed 01 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00115cf:	90                   	nop
c00115d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115d7:	0f b7 c0             	movzx  eax,ax
c00115da:	85 c0                	test   eax,eax
c00115dc:	74 1e                	je     c00115fc <udp_sendto_if+0xbc>
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115e9:	e8 1e 78 ff ff       	call   c0008e0c <pbuf_chain>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	eb 09                	jmp    c00115fc <udp_sendto_if+0xbc>
c00115f3:	90                   	nop
c00115f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011600:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011604:	0f b7 c0             	movzx  eax,ax
c0011607:	83 f8 07             	cmp    eax,0x7
c001160a:	77 18                	ja     c0011624 <udp_sendto_if+0xe4>
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 00 11 03 c0       	push   0xc0031100
c0011614:	68 66 01 03 c0       	push   0xc0030166
c0011619:	e8 aa e8 00 00       	call   c001fec8 <CPrintf>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	8d 76 00             	lea    esi,[esi+0x0]
c0011624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001162f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011633:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011637:	0f b7 c0             	movzx  eax,ax
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 a5 f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001164a:	66 89 02             	mov    WORD PTR [edx],ax
c001164d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 8d f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011662:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0011666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	85 c0                	test   eax,eax
c0011676:	74 0c                	je     c0011684 <udp_sendto_if+0x144>
c0011678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167c:	8b 00                	mov    eax,DWORD PTR [eax]
c001167e:	85 c0                	test   eax,eax
c0011680:	75 12                	jne    c0011694 <udp_sendto_if+0x154>
c0011682:	66 90                	xchg   ax,ax
c0011684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011688:	83 c0 04             	add    eax,0x4
c001168b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001168f:	eb 47                	jmp    c00116d8 <udp_sendto_if+0x198>
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011698:	8b 10                	mov    edx,DWORD PTR [eax]
c001169a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	39 c2                	cmp    edx,eax
c00116a3:	74 2b                	je     c00116d0 <udp_sendto_if+0x190>
c00116a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116ad:	74 19                	je     c00116c8 <udp_sendto_if+0x188>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b6:	e8 39 6e ff ff       	call   c00084f4 <pbuf_free>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c6:	66 90                	xchg   ax,ax
c00116c8:	b0 fa                	mov    al,0xfa
c00116ca:	e9 ed 00 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00116cf:	90                   	nop
c00116d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 fd f4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00116f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116fa:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	83 e0 01             	and    eax,0x1
c0011703:	75 4b                	jne    c0011750 <udp_sendto_if+0x210>
c0011705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011709:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001170c:	0f b7 c0             	movzx  eax,ax
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	50                   	push   eax
c0011713:	6a 11                	push   0x11
c0011715:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011719:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001171d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011721:	e8 ea 1b 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011726:	83 c4 20             	add    esp,0x20
c0011729:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001172e:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011733:	85 c0                	test   eax,eax
c0011735:	75 09                	jne    c0011740 <udp_sendto_if+0x200>
c0011737:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c001173e:	66 90                	xchg   ax,ax
c0011740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011744:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011749:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001174d:	8d 76 00             	lea    esi,[esi+0x0]
c0011750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011754:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011757:	0f b6 d0             	movzx  edx,al
c001175a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011761:	0f b6 c0             	movzx  eax,al
c0011764:	83 ec 04             	sub    esp,0x4
c0011767:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001176b:	6a 11                	push   0x11
c001176d:	52                   	push   edx
c001176e:	50                   	push   eax
c001176f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001177b:	e8 f4 24 00 00       	call   c0013c74 <ip_output_if>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001178b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001178f:	74 17                	je     c00117a8 <udp_sendto_if+0x268>
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011798:	e8 57 6d ff ff       	call   c00084f4 <pbuf_free>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117a8:	66 a1 98 77 03 c0    	mov    ax,ds:0xc0037798
c00117ae:	83 c0 01             	add    eax,0x1
c00117b1:	66 a3 98 77 03 c0    	mov    ds:0xc0037798,ax
c00117b7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00117bb:	90                   	nop
c00117bc:	83 c4 2c             	add    esp,0x2c
c00117bf:	c3                   	ret    

c00117c0 <udp_sendto>:
c00117c0:	83 ec 2c             	sub    esp,0x2c
c00117c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00117d3:	e8 c4 1f 00 00       	call   c001379c <ip_route>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00117e4:	75 16                	jne    c00117fc <udp_sendto+0x3c>
c00117e6:	66 a1 a6 77 03 c0    	mov    ax,ds:0xc00377a6
c00117ec:	83 c0 01             	add    eax,0x1
c00117ef:	66 a3 a6 77 03 c0    	mov    ds:0xc00377a6,ax
c00117f5:	b0 fc                	mov    al,0xfc
c00117f7:	eb 27                	jmp    c0011820 <udp_sendto+0x60>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011808:	50                   	push   eax
c0011809:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001180d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011815:	e8 26 fd ff ff       	call   c0011540 <udp_sendto_if>
c001181a:	83 c4 20             	add    esp,0x20
c001181d:	8d 76 00             	lea    esi,[esi+0x0]
c0011820:	83 c4 2c             	add    esp,0x2c
c0011823:	c3                   	ret    

c0011824 <udp_send>:
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001182e:	0f b7 c0             	movzx  eax,ax
c0011831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011835:	83 c2 04             	add    edx,0x4
c0011838:	50                   	push   eax
c0011839:	52                   	push   edx
c001183a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011842:	e8 79 ff ff ff       	call   c00117c0 <udp_sendto>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	83 c4 0c             	add    esp,0xc
c001184d:	c3                   	ret    
c001184e:	66 90                	xchg   ax,ax

c0011850 <udp_connect>:
c0011850:	83 ec 2c             	sub    esp,0x2c
c0011853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011857:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001185c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011860:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011864:	0f b7 c0             	movzx  eax,ax
c0011867:	85 c0                	test   eax,eax
c0011869:	75 39                	jne    c00118a4 <udp_connect+0x54>
c001186b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011873:	0f b7 d0             	movzx  edx,ax
c0011876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187a:	83 ec 04             	sub    esp,0x4
c001187d:	52                   	push   edx
c001187e:	50                   	push   eax
c001187f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011883:	e8 38 fb ff ff       	call   c00113c0 <udp_bind>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001188f:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <udp_connect+0x54>
c0011898:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001189c:	e9 8b 00 00 00       	jmp    c001192c <udp_connect+0xdc>
c00118a1:	8d 76 00             	lea    esi,[esi+0x0]
c00118a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00118a9:	74 09                	je     c00118b4 <udp_connect+0x64>
c00118ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118af:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b1:	eb 09                	jmp    c00118bc <udp_connect+0x6c>
c00118b3:	90                   	nop
c00118b4:	b8 00 00 00 00       	mov    eax,0x0
c00118b9:	8d 76 00             	lea    esi,[esi+0x0]
c00118bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00118c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cb:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00118cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00118d6:	83 c8 04             	or     eax,0x4
c00118d9:	88 c2                	mov    dl,al
c00118db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118df:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00118e2:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c00118e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118eb:	eb 1f                	jmp    c001190c <udp_connect+0xbc>
c00118ed:	8d 76 00             	lea    esi,[esi+0x0]
c00118f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00118f8:	75 06                	jne    c0011900 <udp_connect+0xb0>
c00118fa:	b0 00                	mov    al,0x0
c00118fc:	eb 2e                	jmp    c001192c <udp_connect+0xdc>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001190b:	90                   	nop
c001190c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011911:	75 dd                	jne    c00118f0 <udp_connect+0xa0>
c0011913:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c0011919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011924:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c0011929:	b0 00                	mov    al,0x0
c001192b:	90                   	nop
c001192c:	83 c4 2c             	add    esp,0x2c
c001192f:	c3                   	ret    

c0011930 <udp_disconnect>:
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001193b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011949:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001194c:	83 e0 fb             	and    eax,0xfffffffb
c001194f:	88 c2                	mov    dl,al
c0011951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011955:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011958:	90                   	nop
c0011959:	c3                   	ret    
c001195a:	66 90                	xchg   ax,ax

c001195c <udp_recv>:
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011964:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001196f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011972:	90                   	nop
c0011973:	c3                   	ret    

c0011974 <udp_remove>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c001197c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011980:	75 12                	jne    c0011994 <udp_remove+0x20>
c0011982:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011987:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001198a:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c001198f:	eb 4b                	jmp    c00119dc <udp_remove+0x68>
c0011991:	8d 76 00             	lea    esi,[esi+0x0]
c0011994:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199d:	eb 35                	jmp    c00119d4 <udp_remove+0x60>
c001199f:	90                   	nop
c00119a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119a7:	85 c0                	test   eax,eax
c00119a9:	74 1d                	je     c00119c8 <udp_remove+0x54>
c00119ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00119b6:	75 10                	jne    c00119c8 <udp_remove+0x54>
c00119b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00119bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119c6:	66 90                	xchg   ax,ax
c00119c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119d3:	90                   	nop
c00119d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00119d9:	75 c5                	jne    c00119a0 <udp_remove+0x2c>
c00119db:	90                   	nop
c00119dc:	83 ec 08             	sub    esp,0x8
c00119df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119e3:	6a 01                	push   0x1
c00119e5:	e8 4e 62 ff ff       	call   c0007c38 <memp_free>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	90                   	nop
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	c3                   	ret    
c00119f2:	66 90                	xchg   ax,ax

c00119f4 <udp_new>:
c00119f4:	83 ec 1c             	sub    esp,0x1c
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	6a 01                	push   0x1
c00119fc:	e8 0b 61 ff ff       	call   c0007b0c <memp_malloc>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a0d:	74 1d                	je     c0011a2c <udp_new+0x38>
c0011a0f:	83 ec 04             	sub    esp,0x4
c0011a12:	6a 20                	push   0x20
c0011a14:	6a 00                	push   0x0
c0011a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a1a:	e8 d1 ea fe ff       	call   c00004f0 <memset>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a26:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011a2a:	66 90                	xchg   ax,ax
c0011a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a30:	83 c4 1c             	add    esp,0x1c
c0011a33:	c3                   	ret    

c0011a34 <free_entry>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a3b:	c1 e0 04             	shl    eax,0x4
c0011a3e:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 2f                	je     c0011a78 <free_entry+0x44>
c0011a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4d:	c1 e0 04             	shl    eax,0x4
c0011a50:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	50                   	push   eax
c0011a5b:	e8 94 6a ff ff       	call   c00084f4 <pbuf_free>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a67:	c1 e0 04             	shl    eax,0x4
c0011a6a:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a75:	8d 76 00             	lea    esi,[esi+0x0]
c0011a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7c:	c1 e0 04             	shl    eax,0x4
c0011a7f:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011a84:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011a87:	90                   	nop
c0011a88:	83 c4 0c             	add    esp,0xc
c0011a8b:	c3                   	ret    

c0011a8c <etharp_tmr>:
c0011a8c:	83 ec 1c             	sub    esp,0x1c
c0011a8f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a94:	e9 a7 00 00 00       	jmp    c0011b40 <etharp_tmr+0xb4>
c0011a99:	8d 76 00             	lea    esi,[esi+0x0]
c0011a9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011aa1:	c1 e0 04             	shl    eax,0x4
c0011aa4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011aa9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011aaf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011ab4:	85 c0                	test   eax,eax
c0011ab6:	74 7c                	je     c0011b34 <etharp_tmr+0xa8>
c0011ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011abd:	89 c2                	mov    edx,eax
c0011abf:	c1 e2 04             	shl    edx,0x4
c0011ac2:	81 c2 0f b9 03 c0    	add    edx,0xc003b90f
c0011ac8:	8a 12                	mov    dl,BYTE PTR [edx]
c0011aca:	83 c2 01             	add    edx,0x1
c0011acd:	c1 e0 04             	shl    eax,0x4
c0011ad0:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011ad5:	88 10                	mov    BYTE PTR [eax],dl
c0011ad7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae6:	0f b6 c0             	movzx  eax,al
c0011ae9:	3d ef 00 00 00       	cmp    eax,0xef
c0011aee:	77 30                	ja     c0011b20 <etharp_tmr+0x94>
c0011af0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011af5:	c1 e0 04             	shl    eax,0x4
c0011af8:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011afd:	8a 00                	mov    al,BYTE PTR [eax]
c0011aff:	0f b6 c0             	movzx  eax,al
c0011b02:	83 f8 01             	cmp    eax,0x1
c0011b05:	75 2d                	jne    c0011b34 <etharp_tmr+0xa8>
c0011b07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b0c:	c1 e0 04             	shl    eax,0x4
c0011b0f:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011b14:	8a 00                	mov    al,BYTE PTR [eax]
c0011b16:	0f b6 c0             	movzx  eax,al
c0011b19:	83 f8 01             	cmp    eax,0x1
c0011b1c:	76 16                	jbe    c0011b34 <etharp_tmr+0xa8>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	50                   	push   eax
c0011b29:	e8 06 ff ff ff       	call   c0011a34 <free_entry>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	8d 76 00             	lea    esi,[esi+0x0]
c0011b34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b38:	83 c0 01             	add    eax,0x1
c0011b3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b3f:	90                   	nop
c0011b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b45:	83 f8 09             	cmp    eax,0x9
c0011b48:	0f 86 4e ff ff ff    	jbe    c0011a9c <etharp_tmr+0x10>
c0011b4e:	90                   	nop
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <find_entry>:
c0011b54:	83 ec 2c             	sub    esp,0x2c
c0011b57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011b5f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011b64:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011b69:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011b6e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b73:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011b78:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011b7d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011b82:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011b87:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b8c:	e9 7f 01 00 00       	jmp    c0011d10 <find_entry+0x1bc>
c0011b91:	8d 76 00             	lea    esi,[esi+0x0]
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ba7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bac:	83 f8 0a             	cmp    eax,0xa
c0011baf:	75 17                	jne    c0011bc8 <find_entry+0x74>
c0011bb1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bb6:	85 c0                	test   eax,eax
c0011bb8:	75 0e                	jne    c0011bc8 <find_entry+0x74>
c0011bba:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bbe:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011bc2:	e9 3d 01 00 00       	jmp    c0011d04 <find_entry+0x1b0>
c0011bc7:	90                   	nop
c0011bc8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	0f 84 2f 01 00 00    	je     c0011d04 <find_entry+0x1b0>
c0011bd5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bda:	83 f8 01             	cmp    eax,0x1
c0011bdd:	74 21                	je     c0011c00 <find_entry+0xac>
c0011bdf:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be4:	83 f8 02             	cmp    eax,0x2
c0011be7:	74 17                	je     c0011c00 <find_entry+0xac>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 30 11 03 c0       	push   0xc0031130
c0011bf1:	68 66 01 03 c0       	push   0xc0030166
c0011bf6:	e8 cd e2 00 00       	call   c001fec8 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	66 90                	xchg   ax,ax
c0011c00:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c05:	74 25                	je     c0011c2c <find_entry+0xd8>
c0011c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c12:	c1 e0 04             	shl    eax,0x4
c0011c15:	05 04 b9 03 c0       	add    eax,0xc003b904
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	39 c2                	cmp    edx,eax
c0011c1e:	75 0c                	jne    c0011c2c <find_entry+0xd8>
c0011c20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c24:	e9 53 02 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011c29:	8d 76 00             	lea    esi,[esi+0x0]
c0011c2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c31:	83 f8 01             	cmp    eax,0x1
c0011c34:	0f 85 8a 00 00 00    	jne    c0011cc4 <find_entry+0x170>
c0011c3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c3f:	c1 e0 04             	shl    eax,0x4
c0011c42:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	74 3f                	je     c0011c8c <find_entry+0x138>
c0011c4d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c52:	c1 e0 04             	shl    eax,0x4
c0011c55:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c5c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011c61:	0f b6 c0             	movzx  eax,al
c0011c64:	39 c2                	cmp    edx,eax
c0011c66:	0f 87 98 00 00 00    	ja     c0011d04 <find_entry+0x1b0>
c0011c6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c70:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011c74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c79:	c1 e0 04             	shl    eax,0x4
c0011c7c:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011c81:	8a 00                	mov    al,BYTE PTR [eax]
c0011c83:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011c87:	eb 7b                	jmp    c0011d04 <find_entry+0x1b0>
c0011c89:	8d 76 00             	lea    esi,[esi+0x0]
c0011c8c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c91:	c1 e0 04             	shl    eax,0x4
c0011c94:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011c99:	8a 00                	mov    al,BYTE PTR [eax]
c0011c9b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	39 c2                	cmp    edx,eax
c0011ca5:	77 5d                	ja     c0011d04 <find_entry+0x1b0>
c0011ca7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011caf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cb4:	c1 e0 04             	shl    eax,0x4
c0011cb7:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cbe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011cc2:	eb 40                	jmp    c0011d04 <find_entry+0x1b0>
c0011cc4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cc9:	83 f8 02             	cmp    eax,0x2
c0011ccc:	75 36                	jne    c0011d04 <find_entry+0x1b0>
c0011cce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd3:	c1 e0 04             	shl    eax,0x4
c0011cd6:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0011cdd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	39 c2                	cmp    edx,eax
c0011ce7:	77 1b                	ja     c0011d04 <find_entry+0x1b0>
c0011ce9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ced:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011cf1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cf6:	c1 e0 04             	shl    eax,0x4
c0011cf9:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0011d00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011d04:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d08:	83 c0 01             	add    eax,0x1
c0011d0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d0f:	90                   	nop
c0011d10:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d15:	83 f8 09             	cmp    eax,0x9
c0011d18:	0f 86 76 fe ff ff    	jbe    c0011b94 <find_entry+0x40>
c0011d1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d23:	83 e0 02             	and    eax,0x2
c0011d26:	75 14                	jne    c0011d3c <find_entry+0x1e8>
c0011d28:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d2d:	83 f8 0a             	cmp    eax,0xa
c0011d30:	75 12                	jne    c0011d44 <find_entry+0x1f0>
c0011d32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d37:	83 e0 01             	and    eax,0x1
c0011d3a:	75 08                	jne    c0011d44 <find_entry+0x1f0>
c0011d3c:	b0 ff                	mov    al,0xff
c0011d3e:	e9 39 01 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011d43:	90                   	nop
c0011d44:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d49:	83 f8 09             	cmp    eax,0x9
c0011d4c:	7f 0e                	jg     c0011d5c <find_entry+0x208>
c0011d4e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011d52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d56:	e9 a1 00 00 00       	jmp    c0011dfc <find_entry+0x2a8>
c0011d5b:	90                   	nop
c0011d5c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011d61:	83 f8 09             	cmp    eax,0x9
c0011d64:	7f 32                	jg     c0011d98 <find_entry+0x244>
c0011d66:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011d6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d73:	c1 e0 04             	shl    eax,0x4
c0011d76:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	85 c0                	test   eax,eax
c0011d7f:	74 47                	je     c0011dc8 <find_entry+0x274>
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	68 a9 12 03 c0       	push   0xc00312a9
c0011d89:	68 66 01 03 c0       	push   0xc0030166
c0011d8e:	e8 35 e1 00 00       	call   c001fec8 <CPrintf>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	eb 30                	jmp    c0011dc8 <find_entry+0x274>
c0011d98:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d9d:	83 f8 09             	cmp    eax,0x9
c0011da0:	7f 0a                	jg     c0011dac <find_entry+0x258>
c0011da2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011da6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011daa:	eb 1c                	jmp    c0011dc8 <find_entry+0x274>
c0011dac:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011db1:	83 f8 09             	cmp    eax,0x9
c0011db4:	7f 0a                	jg     c0011dc0 <find_entry+0x26c>
c0011db6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011dba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbe:	eb 08                	jmp    c0011dc8 <find_entry+0x274>
c0011dc0:	b0 ff                	mov    al,0xff
c0011dc2:	e9 b5 00 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011dc7:	90                   	nop
c0011dc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dcd:	83 f8 09             	cmp    eax,0x9
c0011dd0:	76 16                	jbe    c0011de8 <find_entry+0x294>
c0011dd2:	83 ec 08             	sub    esp,0x8
c0011dd5:	68 c0 12 03 c0       	push   0xc00312c0
c0011dda:	68 66 01 03 c0       	push   0xc0030166
c0011ddf:	e8 e4 e0 00 00       	call   c001fec8 <CPrintf>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	50                   	push   eax
c0011df1:	e8 3e fc ff ff       	call   c0011a34 <free_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dfc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e01:	83 f8 09             	cmp    eax,0x9
c0011e04:	76 16                	jbe    c0011e1c <find_entry+0x2c8>
c0011e06:	83 ec 08             	sub    esp,0x8
c0011e09:	68 c0 12 03 c0       	push   0xc00312c0
c0011e0e:	68 66 01 03 c0       	push   0xc0030166
c0011e13:	e8 b0 e0 00 00       	call   c001fec8 <CPrintf>
c0011e18:	83 c4 10             	add    esp,0x10
c0011e1b:	90                   	nop
c0011e1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e21:	c1 e0 04             	shl    eax,0x4
c0011e24:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011e29:	8a 00                	mov    al,BYTE PTR [eax]
c0011e2b:	0f b6 c0             	movzx  eax,al
c0011e2e:	85 c0                	test   eax,eax
c0011e30:	74 16                	je     c0011e48 <find_entry+0x2f4>
c0011e32:	83 ec 08             	sub    esp,0x8
c0011e35:	68 70 11 03 c0       	push   0xc0031170
c0011e3a:	68 66 01 03 c0       	push   0xc0030166
c0011e3f:	e8 84 e0 00 00       	call   c001fec8 <CPrintf>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	90                   	nop
c0011e48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011e4d:	74 19                	je     c0011e68 <find_entry+0x314>
c0011e4f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5a:	c1 e2 04             	shl    edx,0x4
c0011e5d:	81 c2 04 b9 03 c0    	add    edx,0xc003b904
c0011e63:	89 02                	mov    DWORD PTR [edx],eax
c0011e65:	8d 76 00             	lea    esi,[esi+0x0]
c0011e68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e6d:	c1 e0 04             	shl    eax,0x4
c0011e70:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011e75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e78:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011e7c:	83 c4 2c             	add    esp,0x2c
c0011e7f:	c3                   	ret    

c0011e80 <etharp_send_ip>:
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e92:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e95:	0f b6 c0             	movzx  eax,al
c0011e98:	83 f8 06             	cmp    eax,0x6
c0011e9b:	74 17                	je     c0011eb4 <etharp_send_ip+0x34>
c0011e9d:	83 ec 08             	sub    esp,0x8
c0011ea0:	68 9c 11 03 c0       	push   0xc003119c
c0011ea5:	68 66 01 03 c0       	push   0xc0030166
c0011eaa:	e8 19 e0 00 00       	call   c001fec8 <CPrintf>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	66 90                	xchg   ax,ax
c0011eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb8:	83 ec 04             	sub    esp,0x4
c0011ebb:	6a 06                	push   0x6
c0011ebd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ec1:	50                   	push   eax
c0011ec2:	e8 b3 e4 fe ff       	call   c000037a <memcpy>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ece:	83 c0 06             	add    eax,0x6
c0011ed1:	83 ec 04             	sub    esp,0x4
c0011ed4:	6a 06                	push   0x6
c0011ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011eda:	50                   	push   eax
c0011edb:	e8 9a e4 fe ff       	call   c000037a <memcpy>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ef4:	83 ec 08             	sub    esp,0x8
c0011ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011eff:	ff d0                	call   eax
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	83 c4 1c             	add    esp,0x1c
c0011f07:	c3                   	ret    

c0011f08 <update_arp_entry>:
c0011f08:	83 ec 2c             	sub    esp,0x2c
c0011f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f17:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	83 f8 06             	cmp    eax,0x6
c0011f20:	74 16                	je     c0011f38 <update_arp_entry+0x30>
c0011f22:	83 ec 08             	sub    esp,0x8
c0011f25:	68 e0 11 03 c0       	push   0xc00311e0
c0011f2a:	68 66 01 03 c0       	push   0xc0030166
c0011f2f:	e8 94 df 00 00       	call   c001fec8 <CPrintf>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	90                   	nop
c0011f38:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011f3d:	74 39                	je     c0011f78 <update_arp_entry+0x70>
c0011f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f45:	85 c0                	test   eax,eax
c0011f47:	74 2f                	je     c0011f78 <update_arp_entry+0x70>
c0011f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f4f:	83 ec 08             	sub    esp,0x8
c0011f52:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f56:	50                   	push   eax
c0011f57:	e8 8c 20 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	0f b6 c0             	movzx  eax,al
c0011f62:	85 c0                	test   eax,eax
c0011f64:	75 12                	jne    c0011f78 <update_arp_entry+0x70>
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6c:	25 f0 00 00 00       	and    eax,0xf0
c0011f71:	3d e0 00 00 00       	cmp    eax,0xe0
c0011f76:	75 08                	jne    c0011f80 <update_arp_entry+0x78>
c0011f78:	b0 f2                	mov    al,0xf2
c0011f7a:	e9 d9 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011f7f:	90                   	nop
c0011f80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	50                   	push   eax
c0011f89:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f8d:	e8 c2 fb ff ff       	call   c0011b54 <find_entry>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011f99:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f9e:	85 c0                	test   eax,eax
c0011fa0:	79 0a                	jns    c0011fac <update_arp_entry+0xa4>
c0011fa2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011fa6:	e9 ad 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011fab:	90                   	nop
c0011fac:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fb1:	c1 e0 04             	shl    eax,0x4
c0011fb4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011fb9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011fbc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fc1:	c1 e0 04             	shl    eax,0x4
c0011fc4:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011fc9:	83 c0 08             	add    eax,0x8
c0011fcc:	83 ec 04             	sub    esp,0x4
c0011fcf:	6a 06                	push   0x6
c0011fd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011fd5:	50                   	push   eax
c0011fd6:	e8 9f e3 fe ff       	call   c000037a <memcpy>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fe3:	c1 e0 04             	shl    eax,0x4
c0011fe6:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011feb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fee:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ff3:	c1 e0 04             	shl    eax,0x4
c0011ff6:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffd:	85 c0                	test   eax,eax
c0011fff:	74 53                	je     c0012054 <update_arp_entry+0x14c>
c0012001:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012006:	c1 e0 04             	shl    eax,0x4
c0012009:	05 00 b9 03 c0       	add    eax,0xc003b900
c001200e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012014:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012019:	c1 e0 04             	shl    eax,0x4
c001201c:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012021:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202b:	83 c0 23             	add    eax,0x23
c001202e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012032:	50                   	push   eax
c0012033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001203b:	e8 40 fe ff ff       	call   c0011e80 <etharp_send_ip>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001204a:	e8 a5 64 ff ff       	call   c00084f4 <pbuf_free>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	66 90                	xchg   ax,ax
c0012054:	b0 00                	mov    al,0x0
c0012056:	66 90                	xchg   ax,ax
c0012058:	83 c4 2c             	add    esp,0x2c
c001205b:	c3                   	ret    

c001205c <etharp_find_addr>:
c001205c:	83 ec 1c             	sub    esp,0x1c
c001205f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012064:	74 0a                	je     c0012070 <etharp_find_addr+0x14>
c0012066:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001206b:	75 1b                	jne    c0012088 <etharp_find_addr+0x2c>
c001206d:	8d 76 00             	lea    esi,[esi+0x0]
c0012070:	83 ec 08             	sub    esp,0x8
c0012073:	68 08 12 03 c0       	push   0xc0031208
c0012078:	68 66 01 03 c0       	push   0xc0030166
c001207d:	e8 46 de 00 00       	call   c001fec8 <CPrintf>
c0012082:	83 c4 10             	add    esp,0x10
c0012085:	8d 76 00             	lea    esi,[esi+0x0]
c0012088:	83 ec 08             	sub    esp,0x8
c001208b:	6a 02                	push   0x2
c001208d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012091:	e8 be fa ff ff       	call   c0011b54 <find_entry>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001209d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120a2:	85 c0                	test   eax,eax
c00120a4:	78 4a                	js     c00120f0 <etharp_find_addr+0x94>
c00120a6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120ab:	c1 e0 04             	shl    eax,0x4
c00120ae:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00120b3:	8a 00                	mov    al,BYTE PTR [eax]
c00120b5:	0f b6 c0             	movzx  eax,al
c00120b8:	83 f8 02             	cmp    eax,0x2
c00120bb:	75 33                	jne    c00120f0 <etharp_find_addr+0x94>
c00120bd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120c2:	c1 e0 04             	shl    eax,0x4
c00120c5:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120ca:	8d 50 08             	lea    edx,[eax+0x8]
c00120cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120d1:	89 10                	mov    DWORD PTR [eax],edx
c00120d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120d8:	c1 e0 04             	shl    eax,0x4
c00120db:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120e0:	8d 50 04             	lea    edx,[eax+0x4]
c00120e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120e7:	89 10                	mov    DWORD PTR [eax],edx
c00120e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00120ed:	eb 05                	jmp    c00120f4 <etharp_find_addr+0x98>
c00120ef:	90                   	nop
c00120f0:	b0 ff                	mov    al,0xff
c00120f2:	66 90                	xchg   ax,ax
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c3                   	ret    

c00120f8 <etharp_arp_input>:
c00120f8:	83 ec 2c             	sub    esp,0x2c
c00120fb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012100:	75 1a                	jne    c001211c <etharp_arp_input+0x24>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	68 d3 12 03 c0       	push   0xc00312d3
c001210a:	68 66 01 03 c0       	push   0xc0030166
c001210f:	e8 b4 dd 00 00       	call   c001fec8 <CPrintf>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	e9 d0 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001211c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012120:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012124:	0f b7 c0             	movzx  eax,ax
c0012127:	83 f8 29             	cmp    eax,0x29
c001212a:	77 34                	ja     c0012160 <etharp_arp_input+0x68>
c001212c:	66 a1 42 77 03 c0    	mov    ax,ds:0xc0037742
c0012132:	83 c0 01             	add    eax,0x1
c0012135:	66 a3 42 77 03 c0    	mov    ds:0xc0037742,ax
c001213b:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012141:	83 c0 01             	add    eax,0x1
c0012144:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012151:	e8 9e 63 ff ff       	call   c00084f4 <pbuf_free>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	e9 8e 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001215e:	66 90                	xchg   ax,ax
c0012160:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001216b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001216f:	83 c0 0e             	add    eax,0xe
c0012172:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001217d:	0f b7 c0             	movzx  eax,ax
c0012180:	3d 00 01 00 00       	cmp    eax,0x100
c0012185:	75 31                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001218e:	0f b6 c0             	movzx  eax,al
c0012191:	83 f8 06             	cmp    eax,0x6
c0012194:	75 22                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001219a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c001219d:	0f b6 c0             	movzx  eax,al
c00121a0:	83 f8 04             	cmp    eax,0x4
c00121a3:	75 13                	jne    c00121b8 <etharp_arp_input+0xc0>
c00121a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00121ad:	0f b7 c0             	movzx  eax,ax
c00121b0:	83 f8 08             	cmp    eax,0x8
c00121b3:	74 37                	je     c00121ec <etharp_arp_input+0xf4>
c00121b5:	8d 76 00             	lea    esi,[esi+0x0]
c00121b8:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c00121be:	83 c0 01             	add    eax,0x1
c00121c1:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c00121c7:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c00121cd:	83 c0 01             	add    eax,0x1
c00121d0:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121dd:	e8 12 63 ff ff       	call   c00084f4 <pbuf_free>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e9 02 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	66 a1 3a 77 03 c0    	mov    ax,ds:0xc003773a
c00121f2:	83 c0 01             	add    eax,0x1
c00121f5:	66 a3 3a 77 03 c0    	mov    ds:0xc003773a,ax
c00121fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ff:	83 c0 0e             	add    eax,0xe
c0012202:	83 ec 04             	sub    esp,0x4
c0012205:	6a 04                	push   0x4
c0012207:	50                   	push   eax
c0012208:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012219:	83 c0 18             	add    eax,0x18
c001221c:	83 ec 04             	sub    esp,0x4
c001221f:	6a 04                	push   0x4
c0012221:	50                   	push   eax
c0012222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012226:	50                   	push   eax
c0012227:	e8 4e e1 fe ff       	call   c000037a <memcpy>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012233:	83 c0 04             	add    eax,0x4
c0012236:	74 0c                	je     c0012244 <etharp_arp_input+0x14c>
c0012238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223f:	85 c0                	test   eax,eax
c0012241:	75 09                	jne    c001224c <etharp_arp_input+0x154>
c0012243:	90                   	nop
c0012244:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012249:	eb 15                	jmp    c0012260 <etharp_arp_input+0x168>
c001224b:	90                   	nop
c001224c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012257:	39 c2                	cmp    edx,eax
c0012259:	0f 94 c0             	sete   al
c001225c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012260:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012265:	85 c0                	test   eax,eax
c0012267:	74 07                	je     c0012270 <etharp_arp_input+0x178>
c0012269:	b8 01 00 00 00       	mov    eax,0x1
c001226e:	eb 08                	jmp    c0012278 <etharp_arp_input+0x180>
c0012270:	b8 02 00 00 00       	mov    eax,0x2
c0012275:	8d 76 00             	lea    esi,[esi+0x0]
c0012278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001227c:	83 c2 08             	add    edx,0x8
c001227f:	50                   	push   eax
c0012280:	52                   	push   edx
c0012281:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012285:	50                   	push   eax
c0012286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001228a:	e8 79 fc ff ff       	call   c0011f08 <update_arp_entry>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001229a:	0f b7 c0             	movzx  eax,ax
c001229d:	3d 00 01 00 00       	cmp    eax,0x100
c00122a2:	74 10                	je     c00122b4 <etharp_arp_input+0x1bc>
c00122a4:	3d 00 02 00 00       	cmp    eax,0x200
c00122a9:	0f 84 29 01 00 00    	je     c00123d8 <etharp_arp_input+0x2e0>
c00122af:	e9 10 01 00 00       	jmp    c00123c4 <etharp_arp_input+0x2cc>
c00122b4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 84 f7 00 00 00    	je     c00123b8 <etharp_arp_input+0x2c0>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	6a 02                	push   0x2
c00122c6:	e8 1d e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122d2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122da:	8d 50 0e             	lea    edx,[eax+0xe]
c00122dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122e1:	83 c0 18             	add    eax,0x18
c00122e4:	83 ec 04             	sub    esp,0x4
c00122e7:	6a 04                	push   0x4
c00122e9:	52                   	push   edx
c00122ea:	50                   	push   eax
c00122eb:	e8 8a e0 fe ff       	call   c000037a <memcpy>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8d 50 04             	lea    edx,[eax+0x4]
c00122fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122fe:	83 c0 0e             	add    eax,0xe
c0012301:	83 ec 04             	sub    esp,0x4
c0012304:	6a 04                	push   0x4
c0012306:	52                   	push   edx
c0012307:	50                   	push   eax
c0012308:	e8 6d e0 fe ff       	call   c000037a <memcpy>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012317:	0f b6 c0             	movzx  eax,al
c001231a:	83 f8 06             	cmp    eax,0x6
c001231d:	74 15                	je     c0012334 <etharp_arp_input+0x23c>
c001231f:	83 ec 08             	sub    esp,0x8
c0012322:	68 9c 11 03 c0       	push   0xc003119c
c0012327:	68 66 01 03 c0       	push   0xc0030166
c001232c:	e8 97 db 00 00       	call   c001fec8 <CPrintf>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012338:	8d 50 08             	lea    edx,[eax+0x8]
c001233b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001233f:	83 c0 12             	add    eax,0x12
c0012342:	83 ec 04             	sub    esp,0x4
c0012345:	6a 06                	push   0x6
c0012347:	52                   	push   edx
c0012348:	50                   	push   eax
c0012349:	e8 2c e0 fe ff       	call   c000037a <memcpy>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012355:	8d 50 08             	lea    edx,[eax+0x8]
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	83 ec 04             	sub    esp,0x4
c001235f:	6a 06                	push   0x6
c0012361:	52                   	push   edx
c0012362:	50                   	push   eax
c0012363:	e8 12 e0 fe ff       	call   c000037a <memcpy>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001236f:	83 c0 08             	add    eax,0x8
c0012372:	83 ec 04             	sub    esp,0x4
c0012375:	6a 06                	push   0x6
c0012377:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237b:	50                   	push   eax
c001237c:	e8 f9 df fe ff       	call   c000037a <memcpy>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012388:	83 c0 06             	add    eax,0x6
c001238b:	83 ec 04             	sub    esp,0x4
c001238e:	6a 06                	push   0x6
c0012390:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012394:	50                   	push   eax
c0012395:	e8 e0 df fe ff       	call   c000037a <memcpy>
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123a4:	83 ec 08             	sub    esp,0x8
c00123a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123af:	ff d0                	call   eax
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	eb 26                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123b6:	66 90                	xchg   ax,ax
c00123b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123bc:	83 c0 04             	add    eax,0x4
c00123bf:	eb 1b                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123c1:	8d 76 00             	lea    esi,[esi+0x0]
c00123c4:	66 a1 4c 77 03 c0    	mov    ax,ds:0xc003774c
c00123ca:	83 c0 01             	add    eax,0x1
c00123cd:	66 a3 4c 77 03 c0    	mov    ds:0xc003774c,ax
c00123d3:	eb 07                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	90                   	nop
c00123d9:	8d 76 00             	lea    esi,[esi+0x0]
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e3:	e8 0c 61 ff ff       	call   c00084f4 <pbuf_free>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	90                   	nop
c00123ec:	83 c4 2c             	add    esp,0x2c
c00123ef:	c3                   	ret    

c00123f0 <etharp_raw>:
c00123f0:	83 ec 2c             	sub    esp,0x2c
c00123f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00123f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00123fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012401:	83 ec 04             	sub    esp,0x4
c0012404:	6a 00                	push   0x0
c0012406:	6a 2a                	push   0x2a
c0012408:	6a 03                	push   0x3
c001240a:	e8 bd 62 ff ff       	call   c00086cc <pbuf_alloc>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012416:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001241b:	75 17                	jne    c0012434 <etharp_raw+0x44>
c001241d:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c0012423:	83 c0 01             	add    eax,0x1
c0012426:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c001242c:	b0 ff                	mov    al,0xff
c001242e:	e9 85 01 00 00       	jmp    c00125b8 <etharp_raw+0x1c8>
c0012433:	90                   	nop
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001243c:	0f b7 c0             	movzx  eax,ax
c001243f:	83 f8 29             	cmp    eax,0x29
c0012442:	77 18                	ja     c001245c <etharp_raw+0x6c>
c0012444:	83 ec 08             	sub    esp,0x8
c0012447:	68 2c 12 03 c0       	push   0xc003122c
c001244c:	68 66 01 03 c0       	push   0xc0030166
c0012451:	e8 72 da 00 00       	call   c001fec8 <CPrintf>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	8d 76 00             	lea    esi,[esi+0x0]
c001245c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001246b:	83 c0 0e             	add    eax,0xe
c001246e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012472:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	50                   	push   eax
c001247b:	e8 68 e7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012480:	83 c4 10             	add    esp,0x10
c0012483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012487:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012492:	0f b6 c0             	movzx  eax,al
c0012495:	83 f8 06             	cmp    eax,0x6
c0012498:	74 16                	je     c00124b0 <etharp_raw+0xc0>
c001249a:	83 ec 08             	sub    esp,0x8
c001249d:	68 9c 11 03 c0       	push   0xc003119c
c00124a2:	68 66 01 03 c0       	push   0xc0030166
c00124a7:	e8 1c da 00 00       	call   c001fec8 <CPrintf>
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	90                   	nop
c00124b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b4:	83 c0 08             	add    eax,0x8
c00124b7:	83 ec 04             	sub    esp,0x4
c00124ba:	6a 06                	push   0x6
c00124bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124c0:	50                   	push   eax
c00124c1:	e8 b4 de fe ff       	call   c000037a <memcpy>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	83 c0 12             	add    eax,0x12
c00124d0:	83 ec 04             	sub    esp,0x4
c00124d3:	6a 06                	push   0x6
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	50                   	push   eax
c00124da:	e8 9b de fe ff       	call   c000037a <memcpy>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124e6:	83 ec 04             	sub    esp,0x4
c00124e9:	6a 06                	push   0x6
c00124eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ef:	50                   	push   eax
c00124f0:	e8 85 de fe ff       	call   c000037a <memcpy>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124fc:	83 c0 06             	add    eax,0x6
c00124ff:	83 ec 04             	sub    esp,0x4
c0012502:	6a 06                	push   0x6
c0012504:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012508:	50                   	push   eax
c0012509:	e8 6c de fe ff       	call   c000037a <memcpy>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012515:	83 c0 0e             	add    eax,0xe
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	6a 04                	push   0x4
c001251d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012521:	50                   	push   eax
c0012522:	e8 53 de fe ff       	call   c000037a <memcpy>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001252e:	83 c0 18             	add    eax,0x18
c0012531:	83 ec 04             	sub    esp,0x4
c0012534:	6a 04                	push   0x4
c0012536:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001253a:	50                   	push   eax
c001253b:	e8 3a de fe ff       	call   c000037a <memcpy>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012547:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c001254c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012550:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255a:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012562:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001256a:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012574:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012582:	ff d0                	call   eax
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001258b:	66 a1 38 77 03 c0    	mov    ax,ds:0xc0037738
c0012591:	83 c0 01             	add    eax,0x1
c0012594:	66 a3 38 77 03 c0    	mov    ds:0xc0037738,ax
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125a1:	e8 4e 5f ff ff       	call   c00084f4 <pbuf_free>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125b5:	8d 76 00             	lea    esi,[esi+0x0]
c00125b8:	83 c4 2c             	add    esp,0x2c
c00125bb:	c3                   	ret    

c00125bc <etharp_request>:
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c3:	8d 48 04             	lea    ecx,[eax+0x4]
c00125c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ca:	8d 50 23             	lea    edx,[eax+0x23]
c00125cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d1:	83 c0 23             	add    eax,0x23
c00125d4:	6a 01                	push   0x1
c00125d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125da:	68 fc 12 03 c0       	push   0xc00312fc
c00125df:	51                   	push   ecx
c00125e0:	52                   	push   edx
c00125e1:	68 04 13 03 c0       	push   0xc0031304
c00125e6:	50                   	push   eax
c00125e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125eb:	e8 00 fe ff ff       	call   c00123f0 <etharp_raw>
c00125f0:	83 c4 20             	add    esp,0x20
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	c3                   	ret    
c00125f7:	90                   	nop

c00125f8 <etharp_query>:
c00125f8:	83 ec 2c             	sub    esp,0x2c
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	83 c0 23             	add    eax,0x23
c0012602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012606:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001260b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001260f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012618:	50                   	push   eax
c0012619:	e8 ca 19 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	0f b6 c0             	movzx  eax,al
c0012624:	85 c0                	test   eax,eax
c0012626:	75 24                	jne    c001264c <etharp_query+0x54>
c0012628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001262c:	8b 00                	mov    eax,DWORD PTR [eax]
c001262e:	25 f0 00 00 00       	and    eax,0xf0
c0012633:	3d e0 00 00 00       	cmp    eax,0xe0
c0012638:	74 12                	je     c001264c <etharp_query+0x54>
c001263a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001263f:	74 0b                	je     c001264c <etharp_query+0x54>
c0012641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012645:	8b 00                	mov    eax,DWORD PTR [eax]
c0012647:	85 c0                	test   eax,eax
c0012649:	75 09                	jne    c0012654 <etharp_query+0x5c>
c001264b:	90                   	nop
c001264c:	b0 f2                	mov    al,0xf2
c001264e:	e9 dd 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012653:	90                   	nop
c0012654:	83 ec 08             	sub    esp,0x8
c0012657:	6a 01                	push   0x1
c0012659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001265d:	e8 f2 f4 ff ff       	call   c0011b54 <find_entry>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012669:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001266e:	85 c0                	test   eax,eax
c0012670:	79 22                	jns    c0012694 <etharp_query+0x9c>
c0012672:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012677:	74 0f                	je     c0012688 <etharp_query+0x90>
c0012679:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c001267f:	83 c0 01             	add    eax,0x1
c0012682:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c0012688:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001268c:	e9 9f 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012691:	8d 76 00             	lea    esi,[esi+0x0]
c0012694:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012699:	c1 e0 04             	shl    eax,0x4
c001269c:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126a1:	8a 00                	mov    al,BYTE PTR [eax]
c00126a3:	0f b6 c0             	movzx  eax,al
c00126a6:	85 c0                	test   eax,eax
c00126a8:	75 12                	jne    c00126bc <etharp_query+0xc4>
c00126aa:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126af:	c1 e0 04             	shl    eax,0x4
c00126b2:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126b7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00126ba:	66 90                	xchg   ax,ax
c00126bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126c1:	c1 e0 04             	shl    eax,0x4
c00126c4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126c9:	8a 00                	mov    al,BYTE PTR [eax]
c00126cb:	0f b6 c0             	movzx  eax,al
c00126ce:	83 f8 01             	cmp    eax,0x1
c00126d1:	74 2d                	je     c0012700 <etharp_query+0x108>
c00126d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126d8:	c1 e0 04             	shl    eax,0x4
c00126db:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00126e0:	8a 00                	mov    al,BYTE PTR [eax]
c00126e2:	0f b6 c0             	movzx  eax,al
c00126e5:	83 f8 02             	cmp    eax,0x2
c00126e8:	74 16                	je     c0012700 <etharp_query+0x108>
c00126ea:	83 ec 08             	sub    esp,0x8
c00126ed:	68 60 12 03 c0       	push   0xc0031260
c00126f2:	68 66 01 03 c0       	push   0xc0030166
c00126f7:	e8 cc d7 00 00       	call   c001fec8 <CPrintf>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	90                   	nop
c0012700:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012705:	c1 e0 04             	shl    eax,0x4
c0012708:	05 0e b9 03 c0       	add    eax,0xc003b90e
c001270d:	8a 00                	mov    al,BYTE PTR [eax]
c001270f:	0f b6 c0             	movzx  eax,al
c0012712:	83 f8 01             	cmp    eax,0x1
c0012715:	74 09                	je     c0012720 <etharp_query+0x128>
c0012717:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001271c:	75 2a                	jne    c0012748 <etharp_query+0x150>
c001271e:	66 90                	xchg   ax,ax
c0012720:	83 ec 08             	sub    esp,0x8
c0012723:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012727:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001272b:	e8 8c fe ff ff       	call   c00125bc <etharp_request>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012737:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001273c:	75 0a                	jne    c0012748 <etharp_query+0x150>
c001273e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012742:	e9 e9 01 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012747:	90                   	nop
c0012748:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001274d:	75 15                	jne    c0012764 <etharp_query+0x16c>
c001274f:	83 ec 08             	sub    esp,0x8
c0012752:	68 da 05 03 c0       	push   0xc00305da
c0012757:	68 66 01 03 c0       	push   0xc0030166
c001275c:	e8 67 d7 00 00       	call   c001fec8 <CPrintf>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012771:	8a 00                	mov    al,BYTE PTR [eax]
c0012773:	0f b6 c0             	movzx  eax,al
c0012776:	83 f8 02             	cmp    eax,0x2
c0012779:	75 39                	jne    c00127b4 <etharp_query+0x1bc>
c001277b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001277f:	a2 e0 b8 03 c0       	mov    ds:0xc003b8e0,al
c0012784:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012789:	c1 e0 04             	shl    eax,0x4
c001278c:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012791:	83 c0 08             	add    eax,0x8
c0012794:	50                   	push   eax
c0012795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012799:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001279d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127a1:	e8 da f6 ff ff       	call   c0011e80 <etharp_send_ip>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127ad:	e9 7a 01 00 00       	jmp    c001292c <etharp_query+0x334>
c00127b2:	66 90                	xchg   ax,ax
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	0f 85 5d 01 00 00    	jne    c001292c <etharp_query+0x334>
c00127cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127df:	eb 63                	jmp    c0012844 <etharp_query+0x24c>
c00127e1:	8d 76 00             	lea    esi,[esi+0x0]
c00127e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00127ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127f3:	0f b7 d2             	movzx  edx,dx
c00127f6:	0f b7 c0             	movzx  eax,ax
c00127f9:	39 c2                	cmp    edx,eax
c00127fb:	75 1f                	jne    c001281c <etharp_query+0x224>
c00127fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012801:	8b 00                	mov    eax,DWORD PTR [eax]
c0012803:	85 c0                	test   eax,eax
c0012805:	74 15                	je     c001281c <etharp_query+0x224>
c0012807:	83 ec 08             	sub    esp,0x8
c001280a:	68 e1 12 03 c0       	push   0xc00312e1
c001280f:	68 66 01 03 c0       	push   0xc0030166
c0012814:	e8 af d6 00 00       	call   c001fec8 <CPrintf>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012820:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012823:	0f b6 c0             	movzx  eax,al
c0012826:	83 f8 01             	cmp    eax,0x1
c0012829:	74 0d                	je     c0012838 <etharp_query+0x240>
c001282b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012833:	eb 17                	jmp    c001284c <etharp_query+0x254>
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001283c:	8b 00                	mov    eax,DWORD PTR [eax]
c001283e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012842:	66 90                	xchg   ax,ax
c0012844:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012849:	75 99                	jne    c00127e4 <etharp_query+0x1ec>
c001284b:	90                   	nop
c001284c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012851:	74 59                	je     c00128ac <etharp_query+0x2b4>
c0012853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001285a:	0f b7 c0             	movzx  eax,ax
c001285d:	83 ec 04             	sub    esp,0x4
c0012860:	6a 00                	push   0x0
c0012862:	50                   	push   eax
c0012863:	6a 03                	push   0x3
c0012865:	e8 62 5e ff ff       	call   c00086cc <pbuf_alloc>
c001286a:	83 c4 10             	add    esp,0x10
c001286d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012871:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012876:	74 4c                	je     c00128c4 <etharp_query+0x2cc>
c0012878:	83 ec 08             	sub    esp,0x8
c001287b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001287f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012883:	e8 a4 66 ff ff       	call   c0008f2c <pbuf_copy>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	0f be c0             	movsx  eax,al
c001288e:	85 c0                	test   eax,eax
c0012890:	74 32                	je     c00128c4 <etharp_query+0x2cc>
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012899:	e8 56 5c ff ff       	call   c00084f4 <pbuf_free>
c001289e:	83 c4 10             	add    esp,0x10
c00128a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128a9:	eb 19                	jmp    c00128c4 <etharp_query+0x2cc>
c00128ab:	90                   	nop
c00128ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128bb:	e8 3c 64 ff ff       	call   c0008cfc <pbuf_ref>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	90                   	nop
c00128c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128c9:	74 4d                	je     c0012918 <etharp_query+0x320>
c00128cb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128d0:	c1 e0 04             	shl    eax,0x4
c00128d3:	05 00 b9 03 c0       	add    eax,0xc003b900
c00128d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128da:	85 c0                	test   eax,eax
c00128dc:	74 1e                	je     c00128fc <etharp_query+0x304>
c00128de:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128e3:	c1 e0 04             	shl    eax,0x4
c00128e6:	05 00 b9 03 c0       	add    eax,0xc003b900
c00128eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 fe 5b ff ff       	call   c00084f4 <pbuf_free>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	8d 76 00             	lea    esi,[esi+0x0]
c00128fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012901:	c1 e0 04             	shl    eax,0x4
c0012904:	8d 90 00 b9 03 c0    	lea    edx,[eax-0x3ffc4700]
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	89 02                	mov    DWORD PTR [edx],eax
c0012910:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012915:	eb 15                	jmp    c001292c <etharp_query+0x334>
c0012917:	90                   	nop
c0012918:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c001291e:	83 c0 01             	add    eax,0x1
c0012921:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c0012927:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001292c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012930:	83 c4 2c             	add    esp,0x2c
c0012933:	c3                   	ret    

c0012934 <etharp_output>:
c0012934:	83 ec 1c             	sub    esp,0x1c
c0012937:	83 ec 08             	sub    esp,0x8
c001293a:	6a 0e                	push   0xe
c001293c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012940:	e8 13 5a ff ff       	call   c0008358 <pbuf_header>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	0f b6 c0             	movzx  eax,al
c001294b:	85 c0                	test   eax,eax
c001294d:	74 19                	je     c0012968 <etharp_output+0x34>
c001294f:	66 a1 2a 77 03 c0    	mov    ax,ds:0xc003772a
c0012955:	83 c0 01             	add    eax,0x1
c0012958:	66 a3 2a 77 03 c0    	mov    ds:0xc003772a,ax
c001295e:	b0 fe                	mov    al,0xfe
c0012960:	e9 8b 01 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012965:	8d 76 00             	lea    esi,[esi+0x0]
c0012968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012974:	8b 00                	mov    eax,DWORD PTR [eax]
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297d:	50                   	push   eax
c001297e:	e8 65 16 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	0f b6 c0             	movzx  eax,al
c0012989:	85 c0                	test   eax,eax
c001298b:	74 0f                	je     c001299c <etharp_output+0x68>
c001298d:	c7 44 24 0c 04 13 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031304
c0012995:	e9 3a 01 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c001299a:	66 90                	xchg   ax,ax
c001299c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a2:	25 f0 00 00 00       	and    eax,0xf0
c00129a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00129ac:	75 42                	jne    c00129f0 <etharp_output+0xbc>
c00129ae:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00129b3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00129b8:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00129bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129c1:	83 c0 01             	add    eax,0x1
c00129c4:	8a 00                	mov    al,BYTE PTR [eax]
c00129c6:	83 e0 7f             	and    eax,0x7f
c00129c9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00129cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129d1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00129d4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00129d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129dc:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c00129df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00129e3:	8d 44 24 06          	lea    eax,[esp+0x6]
c00129e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129eb:	e9 e4 00 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129fd:	31 c2                	xor    edx,eax
c00129ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a06:	21 d0                	and    eax,edx
c0012a08:	74 3a                	je     c0012a44 <etharp_output+0x110>
c0012a0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a10:	0f b7 c0             	movzx  eax,ax
c0012a13:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012a18:	74 2a                	je     c0012a44 <etharp_output+0x110>
c0012a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a1e:	83 c0 0c             	add    eax,0xc
c0012a21:	74 19                	je     c0012a3c <etharp_output+0x108>
c0012a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	74 0e                	je     c0012a3c <etharp_output+0x108>
c0012a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a32:	83 c0 0c             	add    eax,0xc
c0012a35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a39:	eb 09                	jmp    c0012a44 <etharp_output+0x110>
c0012a3b:	90                   	nop
c0012a3c:	b0 fc                	mov    al,0xfc
c0012a3e:	e9 ad 00 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012a43:	90                   	nop
c0012a44:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012a49:	0f b6 c0             	movzx  eax,al
c0012a4c:	c1 e0 04             	shl    eax,0x4
c0012a4f:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012a54:	8a 00                	mov    al,BYTE PTR [eax]
c0012a56:	0f b6 c0             	movzx  eax,al
c0012a59:	83 f8 02             	cmp    eax,0x2
c0012a5c:	75 5a                	jne    c0012ab8 <etharp_output+0x184>
c0012a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a64:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012a69:	0f b6 c0             	movzx  eax,al
c0012a6c:	c1 e0 04             	shl    eax,0x4
c0012a6f:	05 04 b9 03 c0       	add    eax,0xc003b904
c0012a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a76:	39 c2                	cmp    edx,eax
c0012a78:	75 3e                	jne    c0012ab8 <etharp_output+0x184>
c0012a7a:	66 a1 4e 77 03 c0    	mov    ax,ds:0xc003774e
c0012a80:	83 c0 01             	add    eax,0x1
c0012a83:	66 a3 4e 77 03 c0    	mov    ds:0xc003774e,ax
c0012a89:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012a8e:	0f b6 c0             	movzx  eax,al
c0012a91:	c1 e0 04             	shl    eax,0x4
c0012a94:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012a99:	8d 50 08             	lea    edx,[eax+0x8]
c0012a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa0:	83 c0 23             	add    eax,0x23
c0012aa3:	52                   	push   edx
c0012aa4:	50                   	push   eax
c0012aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aad:	e8 ce f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	eb 39                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ab7:	90                   	nop
c0012ab8:	83 ec 04             	sub    esp,0x4
c0012abb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012abf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ac7:	e8 2c fb ff ff       	call   c00125f8 <etharp_query>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	eb 1f                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad8:	83 c0 23             	add    eax,0x23
c0012adb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012adf:	50                   	push   eax
c0012ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae8:	e8 93 f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 c4 1c             	add    esp,0x1c
c0012af3:	c3                   	ret    

c0012af4 <ethernet_input>:
c0012af4:	83 ec 1c             	sub    esp,0x1c
c0012af7:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b02:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012b06:	0f b7 c0             	movzx  eax,ax
c0012b09:	83 f8 0e             	cmp    eax,0xe
c0012b0c:	77 26                	ja     c0012b34 <ethernet_input+0x40>
c0012b0e:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c0012b14:	83 c0 01             	add    eax,0x1
c0012b17:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012b1d:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012b23:	83 c0 01             	add    eax,0x1
c0012b26:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012b2c:	e9 ef 00 00 00       	jmp    c0012c20 <ethernet_input+0x12c>
c0012b31:	8d 76 00             	lea    esi,[esi+0x0]
c0012b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012b47:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012b4c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012b51:	83 f8 08             	cmp    eax,0x8
c0012b54:	74 0e                	je     c0012b64 <ethernet_input+0x70>
c0012b56:	3d 08 06 00 00       	cmp    eax,0x608
c0012b5b:	74 6b                	je     c0012bc8 <ethernet_input+0xd4>
c0012b5d:	e9 92 00 00 00       	jmp    c0012bf4 <ethernet_input+0x100>
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b68:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012b6b:	0f b6 c0             	movzx  eax,al
c0012b6e:	83 e0 20             	and    eax,0x20
c0012b71:	0f 84 a1 00 00 00    	je     c0012c18 <ethernet_input+0x124>
c0012b77:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012b7c:	f7 d8                	neg    eax
c0012b7e:	98                   	cwde   
c0012b7f:	83 ec 08             	sub    esp,0x8
c0012b82:	50                   	push   eax
c0012b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b87:	e8 cc 57 ff ff       	call   c0008358 <pbuf_header>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	0f b6 c0             	movzx  eax,al
c0012b92:	85 c0                	test   eax,eax
c0012b94:	74 1a                	je     c0012bb0 <ethernet_input+0xbc>
c0012b96:	83 ec 08             	sub    esp,0x8
c0012b99:	68 88 12 03 c0       	push   0xc0031288
c0012b9e:	68 66 01 03 c0       	push   0xc0030166
c0012ba3:	e8 20 d3 00 00       	call   c001fec8 <CPrintf>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	eb 73                	jmp    c0012c20 <ethernet_input+0x12c>
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 ec 08             	sub    esp,0x8
c0012bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bbb:	e8 70 0c 00 00       	call   c0013830 <ip_input>
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	eb 4f                	jmp    c0012c14 <ethernet_input+0x120>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012bcf:	0f b6 c0             	movzx  eax,al
c0012bd2:	83 e0 20             	and    eax,0x20
c0012bd5:	74 45                	je     c0012c1c <ethernet_input+0x128>
c0012bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bdb:	83 c0 23             	add    eax,0x23
c0012bde:	83 ec 04             	sub    esp,0x4
c0012be1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012be5:	50                   	push   eax
c0012be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012bea:	e8 09 f5 ff ff       	call   c00120f8 <etharp_arp_input>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	eb 20                	jmp    c0012c14 <ethernet_input+0x120>
c0012bf4:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c0012bfa:	83 c0 01             	add    eax,0x1
c0012bfd:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012c03:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012c09:	83 c0 01             	add    eax,0x1
c0012c0c:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012c12:	eb 0c                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c14:	b0 00                	mov    al,0x0
c0012c16:	eb 1c                	jmp    c0012c34 <ethernet_input+0x140>
c0012c18:	90                   	nop
c0012c19:	eb 05                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c1b:	90                   	nop
c0012c1c:	90                   	nop
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c27:	e8 c8 58 ff ff       	call   c00084f4 <pbuf_free>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	b0 00                	mov    al,0x0
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	83 c4 1c             	add    esp,0x1c
c0012c37:	c3                   	ret    

c0012c38 <icmp_input>:
c0012c38:	83 ec 2c             	sub    esp,0x2c
c0012c3b:	66 a1 82 77 03 c0    	mov    ax,ds:0xc0037782
c0012c41:	83 c0 01             	add    eax,0x1
c0012c44:	66 a3 82 77 03 c0    	mov    ds:0xc0037782,ax
c0012c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012c5c:	0f b7 c0             	movzx  eax,ax
c0012c5f:	83 ec 0c             	sub    esp,0xc
c0012c62:	50                   	push   eax
c0012c63:	e8 80 df fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	0f b7 c0             	movzx  eax,ax
c0012c6e:	c1 e8 08             	shr    eax,0x8
c0012c71:	83 e0 0f             	and    eax,0xf
c0012c74:	c1 e0 02             	shl    eax,0x2
c0012c77:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012c7c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c81:	f7 d8                	neg    eax
c0012c83:	98                   	cwde   
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	50                   	push   eax
c0012c88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8c:	e8 c7 56 ff ff       	call   c0008358 <pbuf_header>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	0f b6 c0             	movzx  eax,al
c0012c97:	85 c0                	test   eax,eax
c0012c99:	0f 85 a9 03 00 00    	jne    c0013048 <icmp_input+0x410>
c0012c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ca6:	0f b7 c0             	movzx  eax,ax
c0012ca9:	83 f8 03             	cmp    eax,0x3
c0012cac:	0f 86 96 03 00 00    	jbe    c0013048 <icmp_input+0x410>
c0012cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0012cbb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cbf:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012cc4:	85 c0                	test   eax,eax
c0012cc6:	0f 84 64 03 00 00    	je     c0013030 <icmp_input+0x3f8>
c0012ccc:	83 f8 08             	cmp    eax,0x8
c0012ccf:	0f 85 3b 03 00 00    	jne    c0013010 <icmp_input+0x3d8>
c0012cd5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012cdd:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0012ce2:	25 f0 00 00 00       	and    eax,0xf0
c0012ce7:	3d e0 00 00 00       	cmp    eax,0xe0
c0012cec:	75 0a                	jne    c0012cf8 <icmp_input+0xc0>
c0012cee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012cf6:	66 90                	xchg   ax,ax
c0012cf8:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d04:	50                   	push   eax
c0012d05:	e8 de 12 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	0f b6 c0             	movzx  eax,al
c0012d10:	85 c0                	test   eax,eax
c0012d12:	74 08                	je     c0012d1c <icmp_input+0xe4>
c0012d14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012d21:	75 25                	jne    c0012d48 <icmp_input+0x110>
c0012d23:	66 a1 94 77 03 c0    	mov    ax,ds:0xc0037794
c0012d29:	83 c0 01             	add    eax,0x1
c0012d2c:	66 a3 94 77 03 c0    	mov    ds:0xc0037794,ax
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d39:	e8 b6 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	e9 4e 03 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d46:	66 90                	xchg   ax,ax
c0012d48:	90                   	nop
c0012d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d50:	0f b7 c0             	movzx  eax,ax
c0012d53:	83 f8 07             	cmp    eax,0x7
c0012d56:	0f 86 f0 02 00 00    	jbe    c001304c <icmp_input+0x414>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d63:	e8 50 09 00 00       	call   c00136b8 <inet_chksum_pbuf>
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	0f b7 c0             	movzx  eax,ax
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	74 26                	je     c0012d98 <icmp_input+0x160>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d79:	e8 76 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	66 a1 88 77 03 c0    	mov    ax,ds:0xc0037788
c0012d87:	83 c0 01             	add    eax,0x1
c0012d8a:	66 a3 88 77 03 c0    	mov    ds:0xc0037788,ax
c0012d90:	e9 ff 02 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	83 ec 08             	sub    esp,0x8
c0012d9b:	6a 22                	push   0x22
c0012d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012da1:	e8 b2 55 ff ff       	call   c0008358 <pbuf_header>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	0f b6 c0             	movzx  eax,al
c0012dac:	85 c0                	test   eax,eax
c0012dae:	0f 84 24 01 00 00    	je     c0012ed8 <icmp_input+0x2a0>
c0012db4:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012db9:	83 ec 08             	sub    esp,0x8
c0012dbc:	50                   	push   eax
c0012dbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012dc1:	e8 92 55 ff ff       	call   c0008358 <pbuf_header>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	0f b6 c0             	movzx  eax,al
c0012dcc:	85 c0                	test   eax,eax
c0012dce:	74 1c                	je     c0012dec <icmp_input+0x1b4>
c0012dd0:	83 ec 08             	sub    esp,0x8
c0012dd3:	68 0c 13 03 c0       	push   0xc003130c
c0012dd8:	68 66 01 03 c0       	push   0xc0030166
c0012ddd:	e8 e6 d0 00 00       	call   c001fec8 <CPrintf>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	e9 8a 02 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012df3:	0f b7 c0             	movzx  eax,ax
c0012df6:	83 ec 04             	sub    esp,0x4
c0012df9:	6a 00                	push   0x0
c0012dfb:	50                   	push   eax
c0012dfc:	6a 02                	push   0x2
c0012dfe:	e8 c9 58 ff ff       	call   c00086cc <pbuf_alloc>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e0a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012e0f:	0f 84 5b 02 00 00    	je     c0013070 <icmp_input+0x438>
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e1d:	0f b7 c0             	movzx  eax,ax
c0012e20:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012e25:	83 c2 08             	add    edx,0x8
c0012e28:	39 d0                	cmp    eax,edx
c0012e2a:	73 18                	jae    c0012e44 <icmp_input+0x20c>
c0012e2c:	83 ec 08             	sub    esp,0x8
c0012e2f:	68 40 13 03 c0       	push   0xc0031340
c0012e34:	68 66 01 03 c0       	push   0xc0030166
c0012e39:	e8 8a d0 00 00       	call   c001fec8 <CPrintf>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8d 76 00             	lea    esi,[esi+0x0]
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4f:	e8 d8 60 ff ff       	call   c0008f2c <pbuf_copy>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	0f be c0             	movsx  eax,al
c0012e5a:	85 c0                	test   eax,eax
c0012e5c:	74 1a                	je     c0012e78 <icmp_input+0x240>
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 78 13 03 c0       	push   0xc0031378
c0012e66:	68 66 01 03 c0       	push   0xc0030166
c0012e6b:	e8 58 d0 00 00       	call   c001fec8 <CPrintf>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	e9 fc 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e83:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012e88:	f7 d8                	neg    eax
c0012e8a:	98                   	cwde   
c0012e8b:	83 ec 08             	sub    esp,0x8
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 c0 54 ff ff       	call   c0008358 <pbuf_header>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	0f b6 c0             	movzx  eax,al
c0012e9e:	85 c0                	test   eax,eax
c0012ea0:	74 1a                	je     c0012ebc <icmp_input+0x284>
c0012ea2:	83 ec 08             	sub    esp,0x8
c0012ea5:	68 a0 13 03 c0       	push   0xc00313a0
c0012eaa:	68 66 01 03 c0       	push   0xc0030166
c0012eaf:	e8 14 d0 00 00       	call   c001fec8 <CPrintf>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	e9 b8 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ec3:	e8 2c 56 ff ff       	call   c00084f4 <pbuf_free>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ed3:	eb 37                	jmp    c0012f0c <icmp_input+0x2d4>
c0012ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a de                	push   0xffffffde
c0012edd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee1:	e8 72 54 ff ff       	call   c0008358 <pbuf_header>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	0f b6 c0             	movzx  eax,al
c0012eec:	85 c0                	test   eax,eax
c0012eee:	74 1c                	je     c0012f0c <icmp_input+0x2d4>
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	68 a0 13 03 c0       	push   0xc00313a0
c0012ef8:	68 66 01 03 c0       	push   0xc0030166
c0012efd:	e8 c6 cf 00 00       	call   c001fec8 <CPrintf>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	e9 6a 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f17:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c0012f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f24:	8b 15 90 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037890
c0012f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f3c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f40:	0f b7 c0             	movzx  eax,ax
c0012f43:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012f48:	76 16                	jbe    c0012f60 <icmp_input+0x328>
c0012f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f4e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f52:	83 c0 09             	add    eax,0x9
c0012f55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f59:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f5d:	eb 15                	jmp    c0012f74 <icmp_input+0x33c>
c0012f5f:	90                   	nop
c0012f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f68:	83 c0 08             	add    eax,0x8
c0012f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f6f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f73:	90                   	nop
c0012f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f78:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f80:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012f86:	83 ec 08             	sub    esp,0x8
c0012f89:	6a 14                	push   0x14
c0012f8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f8f:	e8 fc 06 00 00       	call   c0013690 <inet_chksum>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f9b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012f9f:	66 a1 80 77 03 c0    	mov    ax,ds:0xc0037780
c0012fa5:	83 c0 01             	add    eax,0x1
c0012fa8:	66 a3 80 77 03 c0    	mov    ds:0xc0037780,ax
c0012fae:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012fb3:	83 ec 08             	sub    esp,0x8
c0012fb6:	50                   	push   eax
c0012fb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fbb:	e8 98 53 ff ff       	call   c0008358 <pbuf_header>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	0f b6 c0             	movzx  eax,al
c0012fc6:	85 c0                	test   eax,eax
c0012fc8:	74 1a                	je     c0012fe4 <icmp_input+0x3ac>
c0012fca:	83 ec 08             	sub    esp,0x8
c0012fcd:	68 88 12 03 c0       	push   0xc0031288
c0012fd2:	68 66 01 03 c0       	push   0xc0030166
c0012fd7:	e8 ec ce 00 00       	call   c001fec8 <CPrintf>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	eb 53                	jmp    c0013034 <icmp_input+0x3fc>
c0012fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe4:	83 ec 04             	sub    esp,0x4
c0012fe7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012feb:	6a 01                	push   0x1
c0012fed:	6a 00                	push   0x0
c0012fef:	68 ff 00 00 00       	push   0xff
c0012ff4:	6a 00                	push   0x0
c0012ff6:	68 98 78 03 c0       	push   0xc0037898
c0012ffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fff:	e8 70 0c 00 00       	call   c0013c74 <ip_output_if>
c0013004:	83 c4 20             	add    esp,0x20
c0013007:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001300b:	eb 27                	jmp    c0013034 <icmp_input+0x3fc>
c001300d:	8d 76 00             	lea    esi,[esi+0x0]
c0013010:	66 a1 90 77 03 c0    	mov    ax,ds:0xc0037790
c0013016:	83 c0 01             	add    eax,0x1
c0013019:	66 a3 90 77 03 c0    	mov    ds:0xc0037790,ax
c001301f:	66 a1 86 77 03 c0    	mov    ax,ds:0xc0037786
c0013025:	83 c0 01             	add    eax,0x1
c0013028:	66 a3 86 77 03 c0    	mov    ds:0xc0037786,ax
c001302e:	eb 04                	jmp    c0013034 <icmp_input+0x3fc>
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001303b:	e8 b4 54 ff ff       	call   c00084f4 <pbuf_free>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	eb 4f                	jmp    c0013094 <icmp_input+0x45c>
c0013045:	8d 76 00             	lea    esi,[esi+0x0]
c0013048:	90                   	nop
c0013049:	eb 05                	jmp    c0013050 <icmp_input+0x418>
c001304b:	90                   	nop
c001304c:	90                   	nop
c001304d:	8d 76 00             	lea    esi,[esi+0x0]
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013057:	e8 98 54 ff ff       	call   c00084f4 <pbuf_free>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	66 a1 8a 77 03 c0    	mov    ax,ds:0xc003778a
c0013065:	83 c0 01             	add    eax,0x1
c0013068:	66 a3 8a 77 03 c0    	mov    ds:0xc003778a,ax
c001306e:	eb 24                	jmp    c0013094 <icmp_input+0x45c>
c0013070:	90                   	nop
c0013071:	8d 76 00             	lea    esi,[esi+0x0]
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001307b:	e8 74 54 ff ff       	call   c00084f4 <pbuf_free>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	66 a1 94 77 03 c0    	mov    ax,ds:0xc0037794
c0013089:	83 c0 01             	add    eax,0x1
c001308c:	66 a3 94 77 03 c0    	mov    ds:0xc0037794,ax
c0013092:	90                   	nop
c0013093:	90                   	nop
c0013094:	83 c4 2c             	add    esp,0x2c
c0013097:	c3                   	ret    

c0013098 <icmp_send_response>:
c0013098:	83 ec 2c             	sub    esp,0x2c
c001309b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001309f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130a7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00130ab:	83 ec 04             	sub    esp,0x4
c00130ae:	6a 00                	push   0x0
c00130b0:	6a 24                	push   0x24
c00130b2:	6a 01                	push   0x1
c00130b4:	e8 13 56 ff ff       	call   c00086cc <pbuf_alloc>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00130c5:	0f 84 fd 00 00 00    	je     c00131c8 <icmp_send_response+0x130>
c00130cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130cf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130d3:	0f b7 c0             	movzx  eax,ax
c00130d6:	83 f8 23             	cmp    eax,0x23
c00130d9:	77 15                	ja     c00130f0 <icmp_send_response+0x58>
c00130db:	83 ec 08             	sub    esp,0x8
c00130de:	68 d4 13 03 c0       	push   0xc00313d4
c00130e3:	68 66 01 03 c0       	push   0xc0030166
c00130e8:	e8 db cd 00 00       	call   c001fec8 <CPrintf>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013102:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001310e:	88 10                	mov    BYTE PTR [eax],dl
c0013110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013114:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0013118:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001311b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013129:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001312f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013133:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013136:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001313a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001313d:	83 c2 08             	add    edx,0x8
c0013140:	83 ec 04             	sub    esp,0x4
c0013143:	6a 1c                	push   0x1c
c0013145:	50                   	push   eax
c0013146:	52                   	push   edx
c0013147:	e8 2e d2 fe ff       	call   c000037a <memcpy>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013153:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001315d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013161:	0f b7 c0             	movzx  eax,ax
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	50                   	push   eax
c0013168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316c:	e8 1f 05 00 00       	call   c0013690 <inet_chksum>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013178:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001317c:	66 a1 80 77 03 c0    	mov    ax,ds:0xc0037780
c0013182:	83 c0 01             	add    eax,0x1
c0013185:	66 a3 80 77 03 c0    	mov    ds:0xc0037780,ax
c001318b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001318f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013196:	83 ec 08             	sub    esp,0x8
c0013199:	6a 01                	push   0x1
c001319b:	6a 00                	push   0x0
c001319d:	68 ff 00 00 00       	push   0xff
c00131a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00131a6:	50                   	push   eax
c00131a7:	6a 00                	push   0x0
c00131a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00131ad:	e8 92 0d 00 00       	call   c0013f44 <ip_output>
c00131b2:	83 c4 20             	add    esp,0x20
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00131bc:	e8 33 53 ff ff       	call   c00084f4 <pbuf_free>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	eb 06                	jmp    c00131cc <icmp_send_response+0x134>
c00131c6:	66 90                	xchg   ax,ax
c00131c8:	90                   	nop
c00131c9:	8d 76 00             	lea    esi,[esi+0x0]
c00131cc:	83 c4 2c             	add    esp,0x2c
c00131cf:	c3                   	ret    

c00131d0 <icmp_dest_unreach>:
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d7:	0f b6 c0             	movzx  eax,al
c00131da:	83 ec 04             	sub    esp,0x4
c00131dd:	50                   	push   eax
c00131de:	6a 03                	push   0x3
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 af fe ff ff       	call   c0013098 <icmp_send_response>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	90                   	nop
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	c3                   	ret    
c00131f1:	8d 76 00             	lea    esi,[esi+0x0]

c00131f4 <icmp_time_exceeded>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131fb:	0f b6 c0             	movzx  eax,al
c00131fe:	83 ec 04             	sub    esp,0x4
c0013201:	50                   	push   eax
c0013202:	6a 0b                	push   0xb
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 8b fe ff ff       	call   c0013098 <icmp_send_response>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	90                   	nop
c0013211:	83 c4 0c             	add    esp,0xc
c0013214:	c3                   	ret    
c0013215:	66 90                	xchg   ax,ax
c0013217:	90                   	nop

c0013218 <lwip_standard_chksum>:
c0013218:	83 ec 2c             	sub    esp,0x2c
c001321b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001321f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013223:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001322a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013236:	83 e0 01             	and    eax,0x1
c0013239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001323d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013242:	74 24                	je     c0013268 <lwip_standard_chksum+0x50>
c0013244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013249:	7e 1d                	jle    c0013268 <lwip_standard_chksum+0x50>
c001324b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001324f:	8d 42 01             	lea    eax,[edx+0x1]
c0013252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013256:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001325a:	83 c0 01             	add    eax,0x1
c001325d:	8a 12                	mov    dl,BYTE PTR [edx]
c001325f:	88 10                	mov    BYTE PTR [eax],dl
c0013261:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013266:	66 90                	xchg   ax,ax
c0013268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013270:	eb 1e                	jmp    c0013290 <lwip_standard_chksum+0x78>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	8d 50 02             	lea    edx,[eax+0x2]
c001327b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013282:	0f b7 c0             	movzx  eax,ax
c0013285:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013289:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001328e:	66 90                	xchg   ax,ax
c0013290:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013295:	7f dd                	jg     c0013274 <lwip_standard_chksum+0x5c>
c0013297:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001329c:	7e 0e                	jle    c00132ac <lwip_standard_chksum+0x94>
c001329e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00132a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a6:	8a 12                	mov    dl,BYTE PTR [edx]
c00132a8:	88 10                	mov    BYTE PTR [eax],dl
c00132aa:	66 90                	xchg   ax,ax
c00132ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00132b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bc:	c1 e8 10             	shr    eax,0x10
c00132bf:	89 c2                	mov    edx,eax
c00132c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c5:	0f b7 c0             	movzx  eax,ax
c00132c8:	01 d0                	add    eax,edx
c00132ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d2:	c1 e8 10             	shr    eax,0x10
c00132d5:	89 c2                	mov    edx,eax
c00132d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132db:	0f b7 c0             	movzx  eax,ax
c00132de:	01 d0                	add    eax,edx
c00132e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00132e9:	74 1d                	je     c0013308 <lwip_standard_chksum+0xf0>
c00132eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ef:	0f b7 c0             	movzx  eax,ax
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	50                   	push   eax
c00132f6:	e8 ed d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	0f b7 c0             	movzx  eax,ax
c0013301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013305:	8d 76 00             	lea    esi,[esi+0x0]
c0013308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330c:	83 c4 2c             	add    esp,0x2c
c001330f:	c3                   	ret    

c0013310 <inet_chksum_pseudo>:
c0013310:	83 ec 2c             	sub    esp,0x2c
c0013313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013317:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001331b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001331f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013324:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013339:	e9 8a 00 00 00       	jmp    c00133c8 <inet_chksum_pseudo+0xb8>
c001333e:	66 90                	xchg   ax,ax
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	0f b7 d0             	movzx  edx,ax
c001334b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001334f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013352:	83 ec 08             	sub    esp,0x8
c0013355:	52                   	push   edx
c0013356:	50                   	push   eax
c0013357:	e8 bc fe ff ff       	call   c0013218 <lwip_standard_chksum>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	0f b7 c0             	movzx  eax,ax
c0013362:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001336a:	c1 e8 10             	shr    eax,0x10
c001336d:	89 c2                	mov    edx,eax
c001336f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013373:	0f b7 c0             	movzx  eax,ax
c0013376:	01 d0                	add    eax,edx
c0013378:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001337c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013380:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013384:	83 e0 01             	and    eax,0x1
c0013387:	0f b7 c0             	movzx  eax,ax
c001338a:	85 c0                	test   eax,eax
c001338c:	74 2e                	je     c00133bc <inet_chksum_pseudo+0xac>
c001338e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013392:	ba 01 00 00 00       	mov    edx,0x1
c0013397:	29 c2                	sub    edx,eax
c0013399:	89 d0                	mov    eax,edx
c001339b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001339f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a3:	0f b7 c0             	movzx  eax,ax
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	50                   	push   eax
c00133aa:	e8 39 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	0f b7 c0             	movzx  eax,ax
c00133b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133c6:	66 90                	xchg   ax,ax
c00133c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133cd:	0f 85 6d ff ff ff    	jne    c0013340 <inet_chksum_pseudo+0x30>
c00133d3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00133d8:	85 c0                	test   eax,eax
c00133da:	74 1c                	je     c00133f8 <inet_chksum_pseudo+0xe8>
c00133dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e0:	0f b7 c0             	movzx  eax,ax
c00133e3:	83 ec 0c             	sub    esp,0xc
c00133e6:	50                   	push   eax
c00133e7:	e8 fc d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	0f b7 c0             	movzx  eax,ax
c00133f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00133fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	0f b7 c0             	movzx  eax,ax
c0013409:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	c1 e8 10             	shr    eax,0x10
c0013414:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001341c:	8b 00                	mov    eax,DWORD PTR [eax]
c001341e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	0f b7 c0             	movzx  eax,ax
c0013429:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013431:	c1 e8 10             	shr    eax,0x10
c0013434:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013438:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001343d:	83 ec 0c             	sub    esp,0xc
c0013440:	50                   	push   eax
c0013441:	e8 a2 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013455:	83 ec 0c             	sub    esp,0xc
c0013458:	50                   	push   eax
c0013459:	e8 8a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	0f b7 c0             	movzx  eax,ax
c0013464:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346c:	c1 e8 10             	shr    eax,0x10
c001346f:	89 c2                	mov    edx,eax
c0013471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013475:	0f b7 c0             	movzx  eax,ax
c0013478:	01 d0                	add    eax,edx
c001347a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001347e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013482:	c1 e8 10             	shr    eax,0x10
c0013485:	89 c2                	mov    edx,eax
c0013487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348b:	0f b7 c0             	movzx  eax,ax
c001348e:	01 d0                	add    eax,edx
c0013490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013498:	f7 d0                	not    eax
c001349a:	83 c4 2c             	add    esp,0x2c
c001349d:	c3                   	ret    
c001349e:	66 90                	xchg   ax,ax

c00134a0 <inet_chksum_pseudo_partial>:
c00134a0:	83 ec 2c             	sub    esp,0x2c
c00134a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00134a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00134ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00134af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00134b3:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00134b8:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00134bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134d2:	e9 d9 00 00 00       	jmp    c00135b0 <inet_chksum_pseudo_partial+0x110>
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134e0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134e5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00134ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134ef:	39 c2                	cmp    edx,eax
c00134f1:	76 09                	jbe    c00134fc <inet_chksum_pseudo_partial+0x5c>
c00134f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134fc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013501:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013505:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	52                   	push   edx
c001350c:	50                   	push   eax
c001350d:	e8 06 fd ff ff       	call   c0013218 <lwip_standard_chksum>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	0f b7 c0             	movzx  eax,ax
c0013518:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001351c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013524:	89 d1                	mov    ecx,edx
c0013526:	29 c1                	sub    ecx,eax
c0013528:	89 c8                	mov    eax,ecx
c001352a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001352f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013534:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013539:	76 15                	jbe    c0013550 <inet_chksum_pseudo_partial+0xb0>
c001353b:	83 ec 08             	sub    esp,0x8
c001353e:	68 00 14 03 c0       	push   0xc0031400
c0013543:	68 66 01 03 c0       	push   0xc0030166
c0013548:	e8 7b c9 00 00       	call   c001fec8 <CPrintf>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013554:	c1 e8 10             	shr    eax,0x10
c0013557:	89 c2                	mov    edx,eax
c0013559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001355d:	0f b7 c0             	movzx  eax,ax
c0013560:	01 d0                	add    eax,edx
c0013562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001356e:	83 e0 01             	and    eax,0x1
c0013571:	0f b7 c0             	movzx  eax,ax
c0013574:	85 c0                	test   eax,eax
c0013576:	74 2c                	je     c00135a4 <inet_chksum_pseudo_partial+0x104>
c0013578:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001357c:	ba 01 00 00 00       	mov    edx,0x1
c0013581:	29 c2                	sub    edx,eax
c0013583:	89 d0                	mov    eax,edx
c0013585:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001358d:	0f b7 c0             	movzx  eax,ax
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	50                   	push   eax
c0013594:	e8 4f d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	0f b7 c0             	movzx  eax,ax
c001359f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a3:	90                   	nop
c00135a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00135aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135ae:	66 90                	xchg   ax,ax
c00135b0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00135b5:	74 0d                	je     c00135c4 <inet_chksum_pseudo_partial+0x124>
c00135b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135bc:	85 c0                	test   eax,eax
c00135be:	0f 85 14 ff ff ff    	jne    c00134d8 <inet_chksum_pseudo_partial+0x38>
c00135c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 1b                	je     c00135e8 <inet_chksum_pseudo_partial+0x148>
c00135cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d1:	0f b7 c0             	movzx  eax,ax
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 0b d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135e7:	90                   	nop
c00135e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	0f b7 c0             	movzx  eax,ax
c00135f9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013601:	c1 e8 10             	shr    eax,0x10
c0013604:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013608:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001360c:	8b 00                	mov    eax,DWORD PTR [eax]
c001360e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	0f b7 c0             	movzx  eax,ax
c0013619:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001361d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013621:	c1 e8 10             	shr    eax,0x10
c0013624:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	50                   	push   eax
c0013631:	e8 b2 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	0f b7 c0             	movzx  eax,ax
c001363c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013640:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	50                   	push   eax
c0013649:	e8 9a d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	0f b7 c0             	movzx  eax,ax
c0013654:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001365c:	c1 e8 10             	shr    eax,0x10
c001365f:	89 c2                	mov    edx,eax
c0013661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013665:	0f b7 c0             	movzx  eax,ax
c0013668:	01 d0                	add    eax,edx
c001366a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001366e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013672:	c1 e8 10             	shr    eax,0x10
c0013675:	89 c2                	mov    edx,eax
c0013677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367b:	0f b7 c0             	movzx  eax,ax
c001367e:	01 d0                	add    eax,edx
c0013680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013688:	f7 d0                	not    eax
c001368a:	83 c4 2c             	add    esp,0x2c
c001368d:	c3                   	ret    
c001368e:	66 90                	xchg   ax,ax

c0013690 <inet_chksum>:
c0013690:	83 ec 1c             	sub    esp,0x1c
c0013693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013697:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001369c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136a1:	83 ec 08             	sub    esp,0x8
c00136a4:	50                   	push   eax
c00136a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136a9:	e8 6a fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	f7 d0                	not    eax
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    
c00136b7:	90                   	nop

c00136b8 <inet_chksum_pbuf>:
c00136b8:	83 ec 1c             	sub    esp,0x1c
c00136bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136c3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136d0:	e9 8b 00 00 00       	jmp    c0013760 <inet_chksum_pbuf+0xa8>
c00136d5:	8d 76 00             	lea    esi,[esi+0x0]
c00136d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136e0:	0f b7 d0             	movzx  edx,ax
c00136e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136ea:	83 ec 08             	sub    esp,0x8
c00136ed:	52                   	push   edx
c00136ee:	50                   	push   eax
c00136ef:	e8 24 fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	0f b7 c0             	movzx  eax,ax
c00136fa:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00136fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013702:	c1 e8 10             	shr    eax,0x10
c0013705:	89 c2                	mov    edx,eax
c0013707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370b:	0f b7 c0             	movzx  eax,ax
c001370e:	01 d0                	add    eax,edx
c0013710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013718:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001371c:	83 e0 01             	and    eax,0x1
c001371f:	0f b7 c0             	movzx  eax,ax
c0013722:	85 c0                	test   eax,eax
c0013724:	74 2e                	je     c0013754 <inet_chksum_pbuf+0x9c>
c0013726:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001372a:	ba 01 00 00 00       	mov    edx,0x1
c001372f:	29 c2                	sub    edx,eax
c0013731:	89 d0                	mov    eax,edx
c0013733:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	50                   	push   eax
c0013742:	e8 a1 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	0f b7 c0             	movzx  eax,ax
c001374d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013751:	8d 76 00             	lea    esi,[esi+0x0]
c0013754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013758:	8b 00                	mov    eax,DWORD PTR [eax]
c001375a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001375e:	66 90                	xchg   ax,ax
c0013760:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013765:	0f 85 6d ff ff ff    	jne    c00136d8 <inet_chksum_pbuf+0x20>
c001376b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013770:	85 c0                	test   eax,eax
c0013772:	74 1c                	je     c0013790 <inet_chksum_pbuf+0xd8>
c0013774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013778:	0f b7 c0             	movzx  eax,ax
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	50                   	push   eax
c001377f:	e8 64 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	0f b7 c0             	movzx  eax,ax
c001378a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001378e:	66 90                	xchg   ax,ax
c0013790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013794:	f7 d0                	not    eax
c0013796:	83 c4 1c             	add    esp,0x1c
c0013799:	c3                   	ret    
c001379a:	66 90                	xchg   ax,ax

c001379c <ip_route>:
c001379c:	83 ec 10             	sub    esp,0x10
c001379f:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c00137a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a8:	eb 42                	jmp    c00137ec <ip_route+0x50>
c00137aa:	66 90                	xchg   ax,ax
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00137b3:	83 e0 01             	and    eax,0x1
c00137b6:	0f b6 c0             	movzx  eax,al
c00137b9:	85 c0                	test   eax,eax
c00137bb:	74 23                	je     c00137e0 <ip_route+0x44>
c00137bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00137c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ca:	31 c2                	xor    edx,eax
c00137cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137d3:	21 d0                	and    eax,edx
c00137d5:	75 09                	jne    c00137e0 <ip_route+0x44>
c00137d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137db:	eb 4f                	jmp    c001382c <ip_route+0x90>
c00137dd:	8d 76 00             	lea    esi,[esi+0x0]
c00137e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ea:	66 90                	xchg   ax,ax
c00137ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00137f1:	75 b9                	jne    c00137ac <ip_route+0x10>
c00137f3:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00137f8:	85 c0                	test   eax,eax
c00137fa:	74 10                	je     c001380c <ip_route+0x70>
c00137fc:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c0013801:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013804:	0f b6 c0             	movzx  eax,al
c0013807:	83 e0 01             	and    eax,0x1
c001380a:	75 18                	jne    c0013824 <ip_route+0x88>
c001380c:	66 a1 76 77 03 c0    	mov    ax,ds:0xc0037776
c0013812:	83 c0 01             	add    eax,0x1
c0013815:	66 a3 76 77 03 c0    	mov    ds:0xc0037776,ax
c001381b:	b8 00 00 00 00       	mov    eax,0x0
c0013820:	eb 0a                	jmp    c001382c <ip_route+0x90>
c0013822:	66 90                	xchg   ax,ax
c0013824:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	c3                   	ret    

c0013830 <ip_input>:
c0013830:	83 ec 1c             	sub    esp,0x1c
c0013833:	66 a1 6a 77 03 c0    	mov    ax,ds:0xc003776a
c0013839:	83 c0 01             	add    eax,0x1
c001383c:	66 a3 6a 77 03 c0    	mov    ds:0xc003776a,ax
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013851:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013854:	0f b7 c0             	movzx  eax,ax
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	50                   	push   eax
c001385b:	e8 88 d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	0f b7 c0             	movzx  eax,ax
c0013866:	c1 e8 0c             	shr    eax,0xc
c0013869:	0f b7 c0             	movzx  eax,ax
c001386c:	83 f8 04             	cmp    eax,0x4
c001386f:	74 37                	je     c00138a8 <ip_input+0x78>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013878:	e8 77 4c ff ff       	call   c00084f4 <pbuf_free>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	66 a1 7c 77 03 c0    	mov    ax,ds:0xc003777c
c0013886:	83 c0 01             	add    eax,0x1
c0013889:	66 a3 7c 77 03 c0    	mov    ds:0xc003777c,ax
c001388f:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013895:	83 c0 01             	add    eax,0x1
c0013898:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c001389e:	b0 00                	mov    al,0x0
c00138a0:	e9 cb 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00138af:	0f b7 c0             	movzx  eax,ax
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	50                   	push   eax
c00138b6:	e8 2d d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	0f b7 c0             	movzx  eax,ax
c00138c1:	c1 e8 08             	shr    eax,0x8
c00138c4:	83 e0 0f             	and    eax,0xf
c00138c7:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138cc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c00138d1:	c1 e0 02             	shl    eax,0x2
c00138d4:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138dd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00138e1:	0f b7 c0             	movzx  eax,ax
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	50                   	push   eax
c00138e8:	e8 fb d2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00138f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00138fc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013901:	0f b7 c0             	movzx  eax,ax
c0013904:	39 c2                	cmp    edx,eax
c0013906:	77 14                	ja     c001391c <ip_input+0xec>
c0013908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001390c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001390f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013913:	0f b7 c0             	movzx  eax,ax
c0013916:	39 c2                	cmp    edx,eax
c0013918:	76 36                	jbe    c0013950 <ip_input+0x120>
c001391a:	66 90                	xchg   ax,ax
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013923:	e8 cc 4b ff ff       	call   c00084f4 <pbuf_free>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	66 a1 72 77 03 c0    	mov    ax,ds:0xc0037772
c0013931:	83 c0 01             	add    eax,0x1
c0013934:	66 a3 72 77 03 c0    	mov    ds:0xc0037772,ax
c001393a:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013940:	83 c0 01             	add    eax,0x1
c0013943:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013949:	b0 00                	mov    al,0x0
c001394b:	e9 20 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013950:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	50                   	push   eax
c0013959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001395d:	e8 2e fd ff ff       	call   c0013690 <inet_chksum>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	0f b7 c0             	movzx  eax,ax
c0013968:	85 c0                	test   eax,eax
c001396a:	74 34                	je     c00139a0 <ip_input+0x170>
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013973:	e8 7c 4b ff ff       	call   c00084f4 <pbuf_free>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	66 a1 70 77 03 c0    	mov    ax,ds:0xc0037770
c0013981:	83 c0 01             	add    eax,0x1
c0013984:	66 a3 70 77 03 c0    	mov    ds:0xc0037770,ax
c001398a:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013990:	83 c0 01             	add    eax,0x1
c0013993:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013999:	b0 00                	mov    al,0x0
c001399b:	e9 d0 02 00 00       	jmp    c0013c70 <ip_input+0x440>
c00139a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00139a4:	83 ec 08             	sub    esp,0x8
c00139a7:	50                   	push   eax
c00139a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ac:	e8 13 51 ff ff       	call   c0008ac4 <pbuf_realloc>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139bb:	a3 98 78 03 c0       	mov    ds:0xc0037898,eax
c00139c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139c7:	a3 90 78 03 c0       	mov    ds:0xc0037890,eax
c00139cc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00139d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139e0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00139e3:	83 e0 01             	and    eax,0x1
c00139e6:	0f b6 c0             	movzx  eax,al
c00139e9:	85 c0                	test   eax,eax
c00139eb:	74 43                	je     c0013a30 <ip_input+0x200>
c00139ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139f1:	83 c0 04             	add    eax,0x4
c00139f4:	74 3a                	je     c0013a30 <ip_input+0x200>
c00139f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139fd:	85 c0                	test   eax,eax
c00139ff:	74 2f                	je     c0013a30 <ip_input+0x200>
c0013a01:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c0013a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a0e:	39 c2                	cmp    edx,eax
c0013a10:	74 66                	je     c0013a78 <ip_input+0x248>
c0013a12:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013a17:	83 ec 08             	sub    esp,0x8
c0013a1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1e:	50                   	push   eax
c0013a1f:	e8 c4 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	0f b6 c0             	movzx  eax,al
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	75 4a                	jne    c0013a78 <ip_input+0x248>
c0013a2e:	66 90                	xchg   ax,ax
c0013a30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013a35:	74 15                	je     c0013a4c <ip_input+0x21c>
c0013a37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013a3f:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0013a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a48:	eb 0e                	jmp    c0013a58 <ip_input+0x228>
c0013a4a:	66 90                	xchg   ax,ax
c0013a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a56:	66 90                	xchg   ax,ax
c0013a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a5c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013a60:	75 0a                	jne    c0013a6c <ip_input+0x23c>
c0013a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a71:	0f 85 65 ff ff ff    	jne    c00139dc <ip_input+0x1ac>
c0013a77:	90                   	nop
c0013a78:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a84:	50                   	push   eax
c0013a85:	e8 5e 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	0f b6 c0             	movzx  eax,al
c0013a90:	85 c0                	test   eax,eax
c0013a92:	75 14                	jne    c0013aa8 <ip_input+0x278>
c0013a94:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c0013a99:	25 f0 00 00 00       	and    eax,0xf0
c0013a9e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013aa3:	75 2b                	jne    c0013ad0 <ip_input+0x2a0>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aaf:	e8 40 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013abd:	83 c0 01             	add    eax,0x1
c0013ac0:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013ac6:	b0 00                	mov    al,0x0
c0013ac8:	e9 a3 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ad5:	75 19                	jne    c0013af0 <ip_input+0x2c0>
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ade:	e8 11 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	b0 00                	mov    al,0x0
c0013ae8:	e9 83 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]
c0013af0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013af4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013af8:	0f b7 c0             	movzx  eax,ax
c0013afb:	25 3f ff 00 00       	and    eax,0xff3f
c0013b00:	74 2e                	je     c0013b30 <ip_input+0x300>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b09:	e8 7a 13 00 00       	call   c0014e88 <ip_reass>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013b15:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013b1a:	75 08                	jne    c0013b24 <ip_input+0x2f4>
c0013b1c:	b0 00                	mov    al,0x0
c0013b1e:	e9 4d 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013b23:	90                   	nop
c0013b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b2f:	90                   	nop
c0013b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b34:	a3 94 78 03 c0       	mov    ds:0xc0037894,eax
c0013b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b3d:	a3 9c 78 03 c0       	mov    ds:0xc003789c,eax
c0013b42:	83 ec 08             	sub    esp,0x8
c0013b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4d:	e8 c6 5c ff ff       	call   c0009818 <raw_input>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	0f b6 c0             	movzx  eax,al
c0013b58:	85 c0                	test   eax,eax
c0013b5a:	0f 85 e0 00 00 00    	jne    c0013c40 <ip_input+0x410>
c0013b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b64:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013b67:	0f b6 c0             	movzx  eax,al
c0013b6a:	83 f8 06             	cmp    eax,0x6
c0013b6d:	74 25                	je     c0013b94 <ip_input+0x364>
c0013b6f:	83 f8 11             	cmp    eax,0x11
c0013b72:	74 08                	je     c0013b7c <ip_input+0x34c>
c0013b74:	83 f8 01             	cmp    eax,0x1
c0013b77:	74 33                	je     c0013bac <ip_input+0x37c>
c0013b79:	eb 49                	jmp    c0013bc4 <ip_input+0x394>
c0013b7b:	90                   	nop
c0013b7c:	83 ec 08             	sub    esp,0x8
c0013b7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b87:	e8 c0 d3 ff ff       	call   c0010f4c <udp_input>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	e9 b0 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013b94:	83 ec 08             	sub    esp,0x8
c0013b97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9f:	e8 00 a5 ff ff       	call   c000e0a4 <tcp_input>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	e9 98 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb7:	e8 7c f0 ff ff       	call   c0012c38 <icmp_input>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	e9 80 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bc4:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd0:	50                   	push   eax
c0013bd1:	e8 12 04 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	0f b6 c0             	movzx  eax,al
c0013bdc:	85 c0                	test   eax,eax
c0013bde:	75 30                	jne    c0013c10 <ip_input+0x3e0>
c0013be0:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013be5:	25 f0 00 00 00       	and    eax,0xf0
c0013bea:	3d e0 00 00 00       	cmp    eax,0xe0
c0013bef:	74 1f                	je     c0013c10 <ip_input+0x3e0>
c0013bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bf9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013bfc:	83 ec 08             	sub    esp,0x8
c0013bff:	6a 02                	push   0x2
c0013c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c05:	e8 c6 f5 ff ff       	call   c00131d0 <icmp_dest_unreach>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c17:	e8 d8 48 ff ff       	call   c00084f4 <pbuf_free>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	66 a1 78 77 03 c0    	mov    ax,ds:0xc0037778
c0013c25:	83 c0 01             	add    eax,0x1
c0013c28:	66 a3 78 77 03 c0    	mov    ds:0xc0037778,ax
c0013c2e:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013c34:	83 c0 01             	add    eax,0x1
c0013c37:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013c3d:	eb 05                	jmp    c0013c44 <ip_input+0x414>
c0013c3f:	90                   	nop
c0013c40:	90                   	nop
c0013c41:	8d 76 00             	lea    esi,[esi+0x0]
c0013c44:	c7 05 94 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037894,0x0
c0013c4e:	c7 05 9c 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003789c,0x0
c0013c58:	c7 05 90 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037890,0x0
c0013c62:	c7 05 98 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037898,0x0
c0013c6c:	b0 00                	mov    al,0x0
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	83 c4 1c             	add    esp,0x1c
c0013c73:	c3                   	ret    

c0013c74 <ip_output_if>:
c0013c74:	83 ec 2c             	sub    esp,0x2c
c0013c77:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013c7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013c83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c87:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013c8b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013c8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c9b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013c9f:	0f b7 c0             	movzx  eax,ax
c0013ca2:	83 f8 01             	cmp    eax,0x1
c0013ca5:	74 15                	je     c0013cbc <ip_output_if+0x48>
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	68 0a 14 03 c0       	push   0xc003140a
c0013caf:	68 66 01 03 c0       	push   0xc0030166
c0013cb4:	e8 0f c2 00 00       	call   c001fec8 <CPrintf>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013cc1:	0f 84 ed 01 00 00    	je     c0013eb4 <ip_output_if+0x240>
c0013cc7:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013cce:	83 ec 08             	sub    esp,0x8
c0013cd1:	6a 14                	push   0x14
c0013cd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cd7:	e8 7c 46 ff ff       	call   c0008358 <pbuf_header>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	0f b6 c0             	movzx  eax,al
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	74 16                	je     c0013cfc <ip_output_if+0x88>
c0013ce6:	66 a1 7c 77 03 c0    	mov    ax,ds:0xc003777c
c0013cec:	83 c0 01             	add    eax,0x1
c0013cef:	66 a3 7c 77 03 c0    	mov    ds:0xc003777c,ax
c0013cf5:	b0 fe                	mov    al,0xfe
c0013cf7:	e9 44 02 00 00       	jmp    c0013f40 <ip_output_if+0x2cc>
c0013cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013d0f:	0f b7 c0             	movzx  eax,ax
c0013d12:	83 f8 13             	cmp    eax,0x13
c0013d15:	77 15                	ja     c0013d2c <ip_output_if+0xb8>
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	68 18 14 03 c0       	push   0xc0031418
c0013d1f:	68 66 01 03 c0       	push   0xc0030166
c0013d24:	e8 9f c1 00 00       	call   c001fec8 <CPrintf>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d30:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d34:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013d3f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013d42:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013d47:	c1 e0 08             	shl    eax,0x8
c0013d4a:	89 c2                	mov    edx,eax
c0013d4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d51:	09 d0                	or     eax,edx
c0013d53:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d6b:	0f b7 c0             	movzx  eax,ax
c0013d6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d79:	c1 e8 10             	shr    eax,0x10
c0013d7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d80:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013d85:	c1 e8 02             	shr    eax,0x2
c0013d88:	0f b7 c0             	movzx  eax,ax
c0013d8b:	c1 e0 08             	shl    eax,0x8
c0013d8e:	80 cc 40             	or     ah,0x40
c0013d91:	89 c2                	mov    edx,eax
c0013d93:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013d98:	09 d0                	or     eax,edx
c0013d9a:	0f b7 c0             	movzx  eax,ax
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	50                   	push   eax
c0013da1:	e8 42 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dad:	66 89 02             	mov    WORD PTR [edx],ax
c0013db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013db7:	0f b7 c0             	movzx  eax,ax
c0013dba:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc5:	0f b7 c0             	movzx  eax,ax
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	50                   	push   eax
c0013dcc:	e8 17 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dd8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013de0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013de4:	0f b7 c0             	movzx  eax,ax
c0013de7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013def:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013df5:	66 a1 a0 b9 03 c0    	mov    ax,ds:0xc003b9a0
c0013dfb:	0f b7 c0             	movzx  eax,ax
c0013dfe:	83 ec 0c             	sub    esp,0xc
c0013e01:	50                   	push   eax
c0013e02:	e8 e1 cd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e0e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013e1a:	0f b7 c0             	movzx  eax,ax
c0013e1d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e21:	66 a1 a0 b9 03 c0    	mov    ax,ds:0xc003b9a0
c0013e27:	83 c0 01             	add    eax,0x1
c0013e2a:	66 a3 a0 b9 03 c0    	mov    ds:0xc003b9a0,ax
c0013e30:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013e35:	74 0d                	je     c0013e44 <ip_output_if+0x1d0>
c0013e37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e3d:	85 c0                	test   eax,eax
c0013e3f:	75 13                	jne    c0013e54 <ip_output_if+0x1e0>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e52:	eb 10                	jmp    c0013e64 <ip_output_if+0x1f0>
c0013e54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e61:	8d 76 00             	lea    esi,[esi+0x0]
c0013e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e6b:	0f b7 c0             	movzx  eax,ax
c0013e6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e79:	c1 e8 10             	shr    eax,0x10
c0013e7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e84:	c1 e8 10             	shr    eax,0x10
c0013e87:	89 c2                	mov    edx,eax
c0013e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8d:	0f b7 c0             	movzx  eax,ax
c0013e90:	01 d0                	add    eax,edx
c0013e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9a:	c1 e8 10             	shr    eax,0x10
c0013e9d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ea1:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013ea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ead:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013eb1:	eb 21                	jmp    c0013ed4 <ip_output_if+0x260>
c0013eb3:	90                   	nop
c0013eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013eca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	66 a1 68 77 03 c0    	mov    ax,ds:0xc0037768
c0013eda:	83 c0 01             	add    eax,0x1
c0013edd:	66 a3 68 77 03 c0    	mov    ds:0xc0037768,ax
c0013ee3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ee7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eea:	0f b7 c0             	movzx  eax,ax
c0013eed:	85 c0                	test   eax,eax
c0013eef:	74 33                	je     c0013f24 <ip_output_if+0x2b0>
c0013ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013ef8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013efc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eff:	0f b7 d2             	movzx  edx,dx
c0013f02:	0f b7 c0             	movzx  eax,ax
c0013f05:	39 c2                	cmp    edx,eax
c0013f07:	76 1b                	jbe    c0013f24 <ip_output_if+0x2b0>
c0013f09:	83 ec 04             	sub    esp,0x4
c0013f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f10:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013f14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f18:	e8 2b 14 00 00       	call   c0015348 <ip_frag>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	eb 1e                	jmp    c0013f40 <ip_output_if+0x2cc>
c0013f22:	66 90                	xchg   ax,ax
c0013f24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013f2b:	83 ec 04             	sub    esp,0x4
c0013f2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013f36:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f3a:	ff d0                	call   eax
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	90                   	nop
c0013f40:	83 c4 2c             	add    esp,0x2c
c0013f43:	c3                   	ret    

c0013f44 <ip_output>:
c0013f44:	83 ec 2c             	sub    esp,0x2c
c0013f47:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013f4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013f4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013f53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013f57:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f63:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013f67:	0f b7 c0             	movzx  eax,ax
c0013f6a:	83 f8 01             	cmp    eax,0x1
c0013f6d:	74 15                	je     c0013f84 <ip_output+0x40>
c0013f6f:	83 ec 08             	sub    esp,0x8
c0013f72:	68 0a 14 03 c0       	push   0xc003140a
c0013f77:	68 66 01 03 c0       	push   0xc0030166
c0013f7c:	e8 47 bf 00 00       	call   c001fec8 <CPrintf>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013f8b:	e8 0c f8 ff ff       	call   c001379c <ip_route>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f97:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f9c:	75 16                	jne    c0013fb4 <ip_output+0x70>
c0013f9e:	66 a1 76 77 03 c0    	mov    ax,ds:0xc0037776
c0013fa4:	83 c0 01             	add    eax,0x1
c0013fa7:	66 a3 76 77 03 c0    	mov    ds:0xc0037776,ax
c0013fad:	b0 fc                	mov    al,0xfc
c0013faf:	eb 33                	jmp    c0013fe4 <ip_output+0xa0>
c0013fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013fb9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013fbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013fc3:	83 ec 04             	sub    esp,0x4
c0013fc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fca:	51                   	push   ecx
c0013fcb:	52                   	push   edx
c0013fcc:	50                   	push   eax
c0013fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd9:	e8 96 fc ff ff       	call   c0013c74 <ip_output_if>
c0013fde:	83 c4 20             	add    esp,0x20
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	83 c4 2c             	add    esp,0x2c
c0013fe7:	c3                   	ret    

c0013fe8 <ip4_addr_isbroadcast>:
c0013fe8:	83 ec 10             	sub    esp,0x10
c0013feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013ff8:	74 0a                	je     c0014004 <ip4_addr_isbroadcast+0x1c>
c0013ffa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fff:	75 07                	jne    c0014008 <ip4_addr_isbroadcast+0x20>
c0014001:	8d 76 00             	lea    esi,[esi+0x0]
c0014004:	b0 01                	mov    al,0x1
c0014006:	eb 64                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001400c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001400f:	0f b6 c0             	movzx  eax,al
c0014012:	83 e0 02             	and    eax,0x2
c0014015:	75 05                	jne    c001401c <ip4_addr_isbroadcast+0x34>
c0014017:	b0 00                	mov    al,0x0
c0014019:	eb 51                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001401b:	90                   	nop
c001401c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014023:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014027:	75 07                	jne    c0014030 <ip4_addr_isbroadcast+0x48>
c0014029:	b0 00                	mov    al,0x0
c001402b:	eb 3f                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014034:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001403b:	31 c2                	xor    edx,eax
c001403d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014041:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014044:	21 d0                	and    eax,edx
c0014046:	75 20                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001404c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001404f:	f7 d0                	not    eax
c0014051:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014055:	89 c2                	mov    edx,eax
c0014057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001405b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001405e:	f7 d0                	not    eax
c0014060:	39 c2                	cmp    edx,eax
c0014062:	75 04                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014064:	b0 01                	mov    al,0x1
c0014066:	eb 04                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014068:	b0 00                	mov    al,0x0
c001406a:	66 90                	xchg   ax,ax
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	c3                   	ret    

c0014070 <ip4_addr_netmask_valid>:
c0014070:	83 ec 1c             	sub    esp,0x1c
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001407a:	e8 8d cb fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014086:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001408e:	eb 10                	jmp    c00140a0 <ip4_addr_netmask_valid+0x30>
c0014090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014094:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014098:	74 12                	je     c00140ac <ip4_addr_netmask_valid+0x3c>
c001409a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001409e:	66 90                	xchg   ax,ax
c00140a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140a5:	75 e9                	jne    c0014090 <ip4_addr_netmask_valid+0x20>
c00140a7:	eb 1b                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	90                   	nop
c00140ad:	eb 15                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140af:	90                   	nop
c00140b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140b4:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c00140b8:	74 06                	je     c00140c0 <ip4_addr_netmask_valid+0x50>
c00140ba:	b0 00                	mov    al,0x0
c00140bc:	eb 12                	jmp    c00140d0 <ip4_addr_netmask_valid+0x60>
c00140be:	66 90                	xchg   ax,ax
c00140c0:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c00140c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140c9:	75 e5                	jne    c00140b0 <ip4_addr_netmask_valid+0x40>
c00140cb:	b0 01                	mov    al,0x1
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	83 c4 1c             	add    esp,0x1c
c00140d3:	c3                   	ret    

c00140d4 <ipaddr_aton>:
c00140d4:	83 ec 2c             	sub    esp,0x2c
c00140d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e3:	8a 00                	mov    al,BYTE PTR [eax]
c00140e5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ec:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140f0:	0f b6 c0             	movzx  eax,al
c00140f3:	83 f8 2f             	cmp    eax,0x2f
c00140f6:	76 0c                	jbe    c0014104 <ipaddr_aton+0x30>
c00140f8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140fc:	0f b6 c0             	movzx  eax,al
c00140ff:	83 f8 39             	cmp    eax,0x39
c0014102:	76 0c                	jbe    c0014110 <ipaddr_aton+0x3c>
c0014104:	b8 00 00 00 00       	mov    eax,0x0
c0014109:	e9 f2 02 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001410e:	66 90                	xchg   ax,ax
c0014110:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014118:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	83 f8 30             	cmp    eax,0x30
c0014125:	75 45                	jne    c001416c <ipaddr_aton+0x98>
c0014127:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001412c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014130:	8a 00                	mov    al,BYTE PTR [eax]
c0014132:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014136:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413b:	83 f8 78             	cmp    eax,0x78
c001413e:	74 0c                	je     c001414c <ipaddr_aton+0x78>
c0014140:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014145:	83 f8 58             	cmp    eax,0x58
c0014148:	75 1a                	jne    c0014164 <ipaddr_aton+0x90>
c001414a:	66 90                	xchg   ax,ax
c001414c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014151:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415a:	8a 00                	mov    al,BYTE PTR [eax]
c001415c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014160:	eb 0a                	jmp    c001416c <ipaddr_aton+0x98>
c0014162:	66 90                	xchg   ax,ax
c0014164:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014169:	8d 76 00             	lea    esi,[esi+0x0]
c001416c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014170:	0f b6 c0             	movzx  eax,al
c0014173:	83 f8 2f             	cmp    eax,0x2f
c0014176:	76 3c                	jbe    c00141b4 <ipaddr_aton+0xe0>
c0014178:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001417c:	0f b6 c0             	movzx  eax,al
c001417f:	83 f8 39             	cmp    eax,0x39
c0014182:	77 30                	ja     c00141b4 <ipaddr_aton+0xe0>
c0014184:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014189:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001418e:	89 c2                	mov    edx,eax
c0014190:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014195:	01 d0                	add    eax,edx
c0014197:	83 e8 30             	sub    eax,0x30
c001419a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001419e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141a7:	8a 00                	mov    al,BYTE PTR [eax]
c00141a9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141ad:	e9 ae 00 00 00       	jmp    c0014260 <ipaddr_aton+0x18c>
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00141b9:	83 f8 10             	cmp    eax,0x10
c00141bc:	0f 85 a6 00 00 00    	jne    c0014268 <ipaddr_aton+0x194>
c00141c2:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c6:	0f b6 c0             	movzx  eax,al
c00141c9:	83 f8 2f             	cmp    eax,0x2f
c00141cc:	76 0e                	jbe    c00141dc <ipaddr_aton+0x108>
c00141ce:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141d2:	0f b6 c0             	movzx  eax,al
c00141d5:	83 f8 39             	cmp    eax,0x39
c00141d8:	76 32                	jbe    c001420c <ipaddr_aton+0x138>
c00141da:	66 90                	xchg   ax,ax
c00141dc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	83 f8 60             	cmp    eax,0x60
c00141e6:	76 0c                	jbe    c00141f4 <ipaddr_aton+0x120>
c00141e8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141ec:	0f b6 c0             	movzx  eax,al
c00141ef:	83 f8 66             	cmp    eax,0x66
c00141f2:	76 18                	jbe    c001420c <ipaddr_aton+0x138>
c00141f4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141f8:	0f b6 c0             	movzx  eax,al
c00141fb:	83 f8 40             	cmp    eax,0x40
c00141fe:	76 68                	jbe    c0014268 <ipaddr_aton+0x194>
c0014200:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014204:	0f b6 c0             	movzx  eax,al
c0014207:	83 f8 46             	cmp    eax,0x46
c001420a:	77 5c                	ja     c0014268 <ipaddr_aton+0x194>
c001420c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014210:	c1 e0 04             	shl    eax,0x4
c0014213:	89 c2                	mov    edx,eax
c0014215:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421a:	8d 48 0a             	lea    ecx,[eax+0xa]
c001421d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014221:	0f b6 c0             	movzx  eax,al
c0014224:	83 f8 60             	cmp    eax,0x60
c0014227:	76 13                	jbe    c001423c <ipaddr_aton+0x168>
c0014229:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001422d:	0f b6 c0             	movzx  eax,al
c0014230:	83 f8 7a             	cmp    eax,0x7a
c0014233:	77 07                	ja     c001423c <ipaddr_aton+0x168>
c0014235:	b8 61 00 00 00       	mov    eax,0x61
c001423a:	eb 08                	jmp    c0014244 <ipaddr_aton+0x170>
c001423c:	b8 41 00 00 00       	mov    eax,0x41
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	29 c1                	sub    ecx,eax
c0014246:	89 c8                	mov    eax,ecx
c0014248:	09 d0                	or     eax,edx
c001424a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001424e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014253:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014257:	8a 00                	mov    al,BYTE PTR [eax]
c0014259:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	e9 07 ff ff ff       	jmp    c001416c <ipaddr_aton+0x98>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001426d:	83 f8 2e             	cmp    eax,0x2e
c0014270:	75 42                	jne    c00142b4 <ipaddr_aton+0x1e0>
c0014272:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014276:	83 c0 0c             	add    eax,0xc
c0014279:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001427d:	72 0d                	jb     c001428c <ipaddr_aton+0x1b8>
c001427f:	b8 00 00 00 00       	mov    eax,0x0
c0014284:	e9 77 01 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014289:	8d 76 00             	lea    esi,[esi+0x0]
c001428c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014290:	8d 50 04             	lea    edx,[eax+0x4]
c0014293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001429b:	89 10                	mov    DWORD PTR [eax],edx
c001429d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00142a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a6:	8a 00                	mov    al,BYTE PTR [eax]
c00142a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00142ac:	e9 3b fe ff ff       	jmp    c00140ec <ipaddr_aton+0x18>
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]
c00142b4:	90                   	nop
c00142b5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ba:	85 c0                	test   eax,eax
c00142bc:	74 46                	je     c0014304 <ipaddr_aton+0x230>
c00142be:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142c3:	83 f8 20             	cmp    eax,0x20
c00142c6:	74 3c                	je     c0014304 <ipaddr_aton+0x230>
c00142c8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142cd:	83 f8 0c             	cmp    eax,0xc
c00142d0:	74 32                	je     c0014304 <ipaddr_aton+0x230>
c00142d2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142d7:	83 f8 0a             	cmp    eax,0xa
c00142da:	74 28                	je     c0014304 <ipaddr_aton+0x230>
c00142dc:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142e1:	83 f8 0d             	cmp    eax,0xd
c00142e4:	74 1e                	je     c0014304 <ipaddr_aton+0x230>
c00142e6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142eb:	83 f8 09             	cmp    eax,0x9
c00142ee:	74 14                	je     c0014304 <ipaddr_aton+0x230>
c00142f0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142f5:	83 f8 0b             	cmp    eax,0xb
c00142f8:	74 0a                	je     c0014304 <ipaddr_aton+0x230>
c00142fa:	b8 00 00 00 00       	mov    eax,0x0
c00142ff:	e9 fc 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014304:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001430c:	29 c2                	sub    edx,eax
c001430e:	89 d0                	mov    eax,edx
c0014310:	c1 f8 02             	sar    eax,0x2
c0014313:	83 c0 01             	add    eax,0x1
c0014316:	83 f8 04             	cmp    eax,0x4
c0014319:	0f 87 9d 00 00 00    	ja     c00143bc <ipaddr_aton+0x2e8>
c001431f:	8b 04 85 50 14 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcebb0]
c0014326:	ff e0                	jmp    eax
c0014328:	b8 00 00 00 00       	mov    eax,0x0
c001432d:	e9 ce 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014332:	66 90                	xchg   ax,ax
c0014334:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001433c:	76 0a                	jbe    c0014348 <ipaddr_aton+0x274>
c001433e:	b8 00 00 00 00       	mov    eax,0x0
c0014343:	e9 b8 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434c:	c1 e0 18             	shl    eax,0x18
c001434f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014353:	e9 80 00 00 00       	jmp    c00143d8 <ipaddr_aton+0x304>
c0014358:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014360:	76 0a                	jbe    c001436c <ipaddr_aton+0x298>
c0014362:	b8 00 00 00 00       	mov    eax,0x0
c0014367:	e9 94 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001436c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014370:	c1 e0 18             	shl    eax,0x18
c0014373:	89 c2                	mov    edx,eax
c0014375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014379:	c1 e0 10             	shl    eax,0x10
c001437c:	09 d0                	or     eax,edx
c001437e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014382:	eb 54                	jmp    c00143d8 <ipaddr_aton+0x304>
c0014384:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001438c:	76 0a                	jbe    c0014398 <ipaddr_aton+0x2c4>
c001438e:	b8 00 00 00 00       	mov    eax,0x0
c0014393:	eb 6b                	jmp    c0014400 <ipaddr_aton+0x32c>
c0014395:	8d 76 00             	lea    esi,[esi+0x0]
c0014398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439c:	c1 e0 18             	shl    eax,0x18
c001439f:	89 c2                	mov    edx,eax
c00143a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143a5:	c1 e0 10             	shl    eax,0x10
c00143a8:	09 c2                	or     edx,eax
c00143aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143ae:	c1 e0 08             	shl    eax,0x8
c00143b1:	09 d0                	or     eax,edx
c00143b3:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00143b7:	eb 1f                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143b9:	8d 76 00             	lea    esi,[esi+0x0]
c00143bc:	83 ec 08             	sub    esp,0x8
c00143bf:	68 45 14 03 c0       	push   0xc0031445
c00143c4:	68 66 01 03 c0       	push   0xc0030166
c00143c9:	e8 fa ba 00 00       	call   c001fec8 <CPrintf>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	eb 05                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143d3:	90                   	nop
c00143d4:	90                   	nop
c00143d5:	8d 76 00             	lea    esi,[esi+0x0]
c00143d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143dd:	74 19                	je     c00143f8 <ipaddr_aton+0x324>
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143e6:	e8 21 c8 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	89 c2                	mov    edx,eax
c00143f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143f4:	89 10                	mov    DWORD PTR [eax],edx
c00143f6:	66 90                	xchg   ax,ax
c00143f8:	b8 01 00 00 00       	mov    eax,0x1
c00143fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014400:	83 c4 2c             	add    esp,0x2c
c0014403:	c3                   	ret    

c0014404 <ipaddr_addr>:
c0014404:	83 ec 1c             	sub    esp,0x1c
c0014407:	83 ec 08             	sub    esp,0x8
c001440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001440e:	50                   	push   eax
c001440f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014413:	e8 bc fc ff ff       	call   c00140d4 <ipaddr_aton>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	85 c0                	test   eax,eax
c001441d:	74 09                	je     c0014428 <ipaddr_addr+0x24>
c001441f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014423:	eb 0b                	jmp    c0014430 <ipaddr_addr+0x2c>
c0014425:	8d 76 00             	lea    esi,[esi+0x0]
c0014428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001442d:	8d 76 00             	lea    esi,[esi+0x0]
c0014430:	83 c4 1c             	add    esp,0x1c
c0014433:	c3                   	ret    

c0014434 <ipaddr_ntoa_r>:
c0014434:	83 ec 20             	sub    esp,0x20
c0014437:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001443f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014443:	8b 00                	mov    eax,DWORD PTR [eax]
c0014445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001444d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014451:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014459:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001445e:	e9 f9 00 00 00       	jmp    c001455c <ipaddr_ntoa_r+0x128>
c0014463:	90                   	nop
c0014464:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014469:	8d 76 00             	lea    esi,[esi+0x0]
c001446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014470:	8a 00                	mov    al,BYTE PTR [eax]
c0014472:	0f b6 c8             	movzx  ecx,al
c0014475:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001447a:	89 c8                	mov    eax,ecx
c001447c:	f7 e2                	mul    edx
c001447e:	c1 ea 03             	shr    edx,0x3
c0014481:	89 d0                	mov    eax,edx
c0014483:	c1 e0 02             	shl    eax,0x2
c0014486:	01 d0                	add    eax,edx
c0014488:	01 c0                	add    eax,eax
c001448a:	29 c1                	sub    ecx,eax
c001448c:	89 c8                	mov    eax,ecx
c001448e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014496:	8a 00                	mov    al,BYTE PTR [eax]
c0014498:	0f b6 c0             	movzx  eax,al
c001449b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00144a0:	f7 e2                	mul    edx
c00144a2:	89 d0                	mov    eax,edx
c00144a4:	c1 e8 03             	shr    eax,0x3
c00144a7:	88 c2                	mov    dl,al
c00144a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ad:	88 10                	mov    BYTE PTR [eax],dl
c00144af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00144b3:	83 c0 30             	add    eax,0x30
c00144b6:	88 c1                	mov    cl,al
c00144b8:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00144bc:	8d 50 01             	lea    edx,[eax+0x1]
c00144bf:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00144c3:	0f b6 c0             	movzx  eax,al
c00144c6:	88 ca                	mov    dl,cl
c00144c8:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c00144cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d0:	8a 00                	mov    al,BYTE PTR [eax]
c00144d2:	0f b6 c0             	movzx  eax,al
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 93                	jne    c001446c <ipaddr_ntoa_r+0x38>
c00144d9:	eb 35                	jmp    c0014510 <ipaddr_ntoa_r+0xdc>
c00144db:	90                   	nop
c00144dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e0:	8d 50 01             	lea    edx,[eax+0x1]
c00144e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00144e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00144eb:	7f 0b                	jg     c00144f8 <ipaddr_ntoa_r+0xc4>
c00144ed:	b8 00 00 00 00       	mov    eax,0x0
c00144f2:	e9 85 00 00 00       	jmp    c001457c <ipaddr_ntoa_r+0x148>
c00144f7:	90                   	nop
c00144f8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00144fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014501:	8d 48 01             	lea    ecx,[eax+0x1]
c0014504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014508:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001450c:	88 10                	mov    BYTE PTR [eax],dl
c001450e:	66 90                	xchg   ax,ax
c0014510:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014514:	8d 50 ff             	lea    edx,[eax-0x1]
c0014517:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001451b:	0f b6 c0             	movzx  eax,al
c001451e:	85 c0                	test   eax,eax
c0014520:	75 ba                	jne    c00144dc <ipaddr_ntoa_r+0xa8>
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	8d 50 01             	lea    edx,[eax+0x1]
c0014529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001452d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014531:	7f 09                	jg     c001453c <ipaddr_ntoa_r+0x108>
c0014533:	b8 00 00 00 00       	mov    eax,0x0
c0014538:	eb 42                	jmp    c001457c <ipaddr_ntoa_r+0x148>
c001453a:	66 90                	xchg   ax,ax
c001453c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014540:	8d 50 01             	lea    edx,[eax+0x1]
c0014543:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014547:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001454a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001454f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014553:	83 c0 01             	add    eax,0x1
c0014556:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001455a:	66 90                	xchg   ax,ax
c001455c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014561:	83 f8 03             	cmp    eax,0x3
c0014564:	0f 86 fa fe ff ff    	jbe    c0014464 <ipaddr_ntoa_r+0x30>
c001456a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001456f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014573:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001457a:	66 90                	xchg   ax,ax
c001457c:	83 c4 20             	add    esp,0x20
c001457f:	c3                   	ret    

c0014580 <ipaddr_ntoa>:
c0014580:	6a 10                	push   0x10
c0014582:	68 a4 b9 03 c0       	push   0xc003b9a4
c0014587:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001458b:	e8 a4 fe ff ff       	call   c0014434 <ipaddr_ntoa_r>
c0014590:	83 c4 0c             	add    esp,0xc
c0014593:	c3                   	ret    

c0014594 <ip_reass_dequeue_datagram>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c001459c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00145a0:	75 0e                	jne    c00145b0 <ip_reass_dequeue_datagram+0x1c>
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145a8:	a3 b8 b9 03 c0       	mov    ds:0xc003b9b8,eax
c00145ad:	eb 29                	jmp    c00145d8 <ip_reass_dequeue_datagram+0x44>
c00145af:	90                   	nop
c00145b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145b5:	75 15                	jne    c00145cc <ip_reass_dequeue_datagram+0x38>
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	68 6c 14 03 c0       	push   0xc003146c
c00145bf:	68 66 01 03 c0       	push   0xc0030166
c00145c4:	e8 ff b8 00 00       	call   c001fec8 <CPrintf>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00145d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145d6:	89 10                	mov    DWORD PTR [eax],edx
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145df:	6a 05                	push   0x5
c00145e1:	e8 52 36 ff ff       	call   c0007c38 <memp_free>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	90                   	nop
c00145ea:	83 c4 0c             	add    esp,0xc
c00145ed:	c3                   	ret    
c00145ee:	66 90                	xchg   ax,ax

c00145f0 <ip_reass_free_complete_datagram>:
c00145f0:	83 ec 2c             	sub    esp,0x2c
c00145f3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00145fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00145fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014602:	75 18                	jne    c001461c <ip_reass_free_complete_datagram+0x2c>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	68 85 14 03 c0       	push   0xc0031485
c001460c:	68 66 01 03 c0       	push   0xc0030166
c0014611:	e8 b2 b8 00 00       	call   c001fec8 <CPrintf>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	8d 76 00             	lea    esi,[esi+0x0]
c001461c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014621:	74 21                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c0014623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014627:	8b 00                	mov    eax,DWORD PTR [eax]
c0014629:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001462d:	74 15                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	68 91 14 03 c0       	push   0xc0031491
c0014637:	68 66 01 03 c0       	push   0xc0030166
c001463c:	e8 87 b8 00 00       	call   c001fec8 <CPrintf>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014656:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001465a:	0f b7 c0             	movzx  eax,ax
c001465d:	85 c0                	test   eax,eax
c001465f:	0f 85 a3 00 00 00    	jne    c0014708 <ip_reass_free_complete_datagram+0x118>
c0014665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001466c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	8b 10                	mov    edx,DWORD PTR [eax]
c0014676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001467a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001467d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014681:	8d 50 08             	lea    edx,[eax+0x8]
c0014684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001468b:	83 ec 04             	sub    esp,0x4
c001468e:	6a 14                	push   0x14
c0014690:	52                   	push   edx
c0014691:	50                   	push   eax
c0014692:	e8 e3 bc fe ff       	call   c000037a <memcpy>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	83 ec 08             	sub    esp,0x8
c001469d:	6a 01                	push   0x1
c001469f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a3:	e8 4c eb ff ff       	call   c00131f4 <icmp_time_exceeded>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146b2:	e8 11 46 ff ff       	call   c0008cc8 <pbuf_clen>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00146be:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146c3:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146c8:	01 d0                	add    eax,edx
c00146ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00146cf:	7e 17                	jle    c00146e8 <ip_reass_free_complete_datagram+0xf8>
c00146d1:	83 ec 08             	sub    esp,0x8
c00146d4:	68 a3 14 03 c0       	push   0xc00314a3
c00146d9:	68 66 01 03 c0       	push   0xc0030166
c00146de:	e8 e5 b7 00 00       	call   c001fec8 <CPrintf>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146ed:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146f2:	01 d0                	add    eax,edx
c00146f4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014700:	e8 ef 3d ff ff       	call   c00084f4 <pbuf_free>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001470c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001470f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014713:	eb 7b                	jmp    c0014790 <ip_reass_free_complete_datagram+0x1a0>
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001471c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001472b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001472f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014731:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014735:	83 ec 0c             	sub    esp,0xc
c0014738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001473c:	e8 87 45 ff ff       	call   c0008cc8 <pbuf_clen>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014748:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001474d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014752:	01 d0                	add    eax,edx
c0014754:	3d ff ff 00 00       	cmp    eax,0xffff
c0014759:	7e 15                	jle    c0014770 <ip_reass_free_complete_datagram+0x180>
c001475b:	83 ec 08             	sub    esp,0x8
c001475e:	68 a3 14 03 c0       	push   0xc00314a3
c0014763:	68 66 01 03 c0       	push   0xc0030166
c0014768:	e8 5b b7 00 00       	call   c001fec8 <CPrintf>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014775:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001477a:	01 d0                	add    eax,edx
c001477c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014781:	83 ec 0c             	sub    esp,0xc
c0014784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014788:	e8 67 3d ff ff       	call   c00084f4 <pbuf_free>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014795:	75 81                	jne    c0014718 <ip_reass_free_complete_datagram+0x128>
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001479e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00147a2:	e8 ed fd ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c00147b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00147b5:	0f b7 c0             	movzx  eax,ax
c00147b8:	39 c2                	cmp    edx,eax
c00147ba:	76 18                	jbe    c00147d4 <ip_reass_free_complete_datagram+0x1e4>
c00147bc:	83 ec 08             	sub    esp,0x8
c00147bf:	68 c0 14 03 c0       	push   0xc00314c0
c00147c4:	68 66 01 03 c0       	push   0xc0030166
c00147c9:	e8 fa b6 00 00       	call   c001fec8 <CPrintf>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c00147db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00147e0:	89 d1                	mov    ecx,edx
c00147e2:	29 c1                	sub    ecx,eax
c00147e4:	89 c8                	mov    eax,ecx
c00147e6:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c00147ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00147f1:	83 c4 2c             	add    esp,0x2c
c00147f4:	c3                   	ret    
c00147f5:	8d 76 00             	lea    esi,[esi+0x0]

c00147f8 <ip_reass_tmr>:
c00147f8:	83 ec 1c             	sub    esp,0x1c
c00147fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014803:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c0014808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480c:	eb 62                	jmp    c0014870 <ip_reass_tmr+0x78>
c001480e:	66 90                	xchg   ax,ax
c0014810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014814:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014817:	0f b6 c0             	movzx  eax,al
c001481a:	85 c0                	test   eax,eax
c001481c:	74 2a                	je     c0014848 <ip_reass_tmr+0x50>
c001481e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014822:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014825:	83 e8 01             	sub    eax,0x1
c0014828:	88 c2                	mov    dl,al
c001482a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482e:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001483d:	8b 00                	mov    eax,DWORD PTR [eax]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	eb 2b                	jmp    c0014870 <ip_reass_tmr+0x78>
c0014845:	8d 76 00             	lea    esi,[esi+0x0]
c0014848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001484c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014854:	8b 00                	mov    eax,DWORD PTR [eax]
c0014856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014861:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014865:	e8 86 fd ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	8d 76 00             	lea    esi,[esi+0x0]
c0014870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014875:	75 99                	jne    c0014810 <ip_reass_tmr+0x18>
c0014877:	90                   	nop
c0014878:	83 c4 1c             	add    esp,0x1c
c001487b:	c3                   	ret    

c001487c <ip_reass_remove_oldest_datagram>:
c001487c:	83 ec 2c             	sub    esp,0x2c
c001487f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014887:	90                   	nop
c0014888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014890:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148a0:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c00148a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a9:	e9 9a 00 00 00       	jmp    c0014948 <ip_reass_remove_oldest_datagram+0xcc>
c00148ae:	66 90                	xchg   ax,ax
c00148b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00148b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148be:	39 c2                	cmp    edx,eax
c00148c0:	75 2e                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00148c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00148d0:	39 c2                	cmp    edx,eax
c00148d2:	75 1c                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00148db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148df:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e3:	0f b7 d2             	movzx  edx,dx
c00148e6:	0f b7 c0             	movzx  eax,ax
c00148e9:	39 c2                	cmp    edx,eax
c00148eb:	74 3b                	je     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c00148ed:	8d 76 00             	lea    esi,[esi+0x0]
c00148f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00148f5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00148fa:	75 0c                	jne    c0014908 <ip_reass_remove_oldest_datagram+0x8c>
c00148fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014904:	eb 22                	jmp    c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014906:	66 90                	xchg   ax,ax
c0014908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001490c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001490f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014913:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014916:	0f b6 d2             	movzx  edx,dl
c0014919:	0f b6 c0             	movzx  eax,al
c001491c:	39 c2                	cmp    edx,eax
c001491e:	77 08                	ja     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	8b 00                	mov    eax,DWORD PTR [eax]
c001492e:	85 c0                	test   eax,eax
c0014930:	74 0a                	je     c001493c <ip_reass_remove_oldest_datagram+0xc0>
c0014932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001493a:	66 90                	xchg   ax,ax
c001493c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014940:	8b 00                	mov    eax,DWORD PTR [eax]
c0014942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014946:	66 90                	xchg   ax,ax
c0014948:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001494d:	0f 85 5d ff ff ff    	jne    c00148b0 <ip_reass_remove_oldest_datagram+0x34>
c0014953:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014958:	74 22                	je     c001497c <ip_reass_remove_oldest_datagram+0x100>
c001495a:	83 ec 08             	sub    esp,0x8
c001495d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014961:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014965:	e8 86 fc ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014975:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014979:	8d 76 00             	lea    esi,[esi+0x0]
c001497c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014980:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014984:	7d 0e                	jge    c0014994 <ip_reass_remove_oldest_datagram+0x118>
c0014986:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001498b:	0f 8f f7 fe ff ff    	jg     c0014888 <ip_reass_remove_oldest_datagram+0xc>
c0014991:	8d 76 00             	lea    esi,[esi+0x0]
c0014994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014998:	83 c4 2c             	add    esp,0x2c
c001499b:	c3                   	ret    

c001499c <ip_reass_enqueue_new_datagram>:
c001499c:	83 ec 1c             	sub    esp,0x1c
c001499f:	83 ec 0c             	sub    esp,0xc
c00149a2:	6a 05                	push   0x5
c00149a4:	e8 63 31 ff ff       	call   c0007b0c <memp_malloc>
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149b5:	75 4d                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149b7:	83 ec 08             	sub    esp,0x8
c00149ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149c2:	e8 b5 fe ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00149ce:	7f 14                	jg     c00149e4 <ip_reass_enqueue_new_datagram+0x48>
c00149d0:	83 ec 0c             	sub    esp,0xc
c00149d3:	6a 05                	push   0x5
c00149d5:	e8 32 31 ff ff       	call   c0007b0c <memp_malloc>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]
c00149e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149e9:	75 19                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149eb:	66 a1 5c 77 03 c0    	mov    ax,ds:0xc003775c
c00149f1:	83 c0 01             	add    eax,0x1
c00149f4:	66 a3 5c 77 03 c0    	mov    ds:0xc003775c,ax
c00149fa:	b8 00 00 00 00       	mov    eax,0x0
c00149ff:	eb 53                	jmp    c0014a54 <ip_reass_enqueue_new_datagram+0xb8>
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 ec 04             	sub    esp,0x4
c0014a07:	6a 20                	push   0x20
c0014a09:	6a 00                	push   0x0
c0014a0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a0f:	e8 dc ba fe ff       	call   c00004f0 <memset>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1b:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014a1f:	8b 15 b8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9b8
c0014a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a29:	89 10                	mov    DWORD PTR [eax],edx
c0014a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a2f:	a3 b8 b9 03 c0       	mov    ds:0xc003b9b8,eax
c0014a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a38:	83 c0 08             	add    eax,0x8
c0014a3b:	83 ec 04             	sub    esp,0x4
c0014a3e:	6a 14                	push   0x14
c0014a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a44:	50                   	push   eax
c0014a45:	e8 30 b9 fe ff       	call   c000037a <memcpy>
c0014a4a:	83 c4 10             	add    esp,0x10
c0014a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	83 c4 1c             	add    esp,0x1c
c0014a57:	c3                   	ret    

c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014a58:	53                   	push   ebx
c0014a59:	83 ec 28             	sub    esp,0x28
c0014a5c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a64:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014a6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a7b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014a7f:	0f b7 c0             	movzx  eax,ax
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	50                   	push   eax
c0014a86:	e8 5d c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 c3                	mov    ebx,eax
c0014a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a97:	0f b7 c0             	movzx  eax,ax
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	50                   	push   eax
c0014a9e:	e8 45 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	0f b7 c0             	movzx  eax,ax
c0014aa9:	c1 e8 08             	shr    eax,0x8
c0014aac:	83 e0 0f             	and    eax,0xf
c0014aaf:	c1 e0 02             	shl    eax,0x2
c0014ab2:	89 d9                	mov    ecx,ebx
c0014ab4:	29 c1                	sub    ecx,eax
c0014ab6:	89 c8                	mov    eax,ecx
c0014ab8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ac1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ac5:	0f b7 c0             	movzx  eax,ax
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	50                   	push   eax
c0014acc:	e8 17 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ad9:	c1 e0 03             	shl    eax,0x3
c0014adc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014afe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0014b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b06:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014b0b:	01 d0                	add    eax,edx
c0014b0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b11:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0014b15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b20:	e9 13 01 00 00       	jmp    c0014c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014b25:	8d 76 00             	lea    esi,[esi+0x0]
c0014b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b37:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b43:	0f b7 d2             	movzx  edx,dx
c0014b46:	0f b7 c0             	movzx  eax,ax
c0014b49:	39 c2                	cmp    edx,eax
c0014b4b:	73 6f                	jae    c0014bbc <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b55:	89 10                	mov    DWORD PTR [eax],edx
c0014b57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b5c:	74 4e                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b62:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b6e:	0f b7 d2             	movzx  edx,dx
c0014b71:	0f b7 c0             	movzx  eax,ax
c0014b74:	39 c2                	cmp    edx,eax
c0014b76:	0f 82 bc 02 00 00    	jb     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b80:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b88:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8c:	0f b7 d2             	movzx  edx,dx
c0014b8f:	0f b7 c0             	movzx  eax,ax
c0014b92:	39 c2                	cmp    edx,eax
c0014b94:	0f 87 9e 02 00 00    	ja     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ba2:	89 10                	mov    DWORD PTR [eax],edx
c0014ba4:	e9 9b 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014bb7:	e9 88 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bcc:	0f b7 d2             	movzx  edx,dx
c0014bcf:	0f b7 c0             	movzx  eax,ax
c0014bd2:	39 c2                	cmp    edx,eax
c0014bd4:	0f 84 62 02 00 00    	je     c0014e3c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bde:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014bea:	0f b7 d2             	movzx  edx,dx
c0014bed:	0f b7 c0             	movzx  eax,ax
c0014bf0:	39 c2                	cmp    edx,eax
c0014bf2:	0f 82 48 02 00 00    	jb     c0014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014bfd:	74 25                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c03:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c0f:	0f b7 d2             	movzx  edx,dx
c0014c12:	0f b7 c0             	movzx  eax,ax
c0014c15:	39 c2                	cmp    edx,eax
c0014c17:	74 0b                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c36:	66 90                	xchg   ax,ax
c0014c38:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c3d:	0f 85 e5 fe ff ff    	jne    c0014b28 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014c43:	90                   	nop
c0014c44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c49:	0f 85 95 00 00 00    	jne    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014c4f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c54:	74 62                	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c5a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c62:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c66:	0f b7 d2             	movzx  edx,dx
c0014c69:	0f b7 c0             	movzx  eax,ax
c0014c6c:	39 c2                	cmp    edx,eax
c0014c6e:	76 18                	jbe    c0014c88 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014c70:	83 ec 08             	sub    esp,0x8
c0014c73:	68 db 14 03 c0       	push   0xc00314db
c0014c78:	68 66 01 03 c0       	push   0xc0030166
c0014c7d:	e8 46 b2 00 00       	call   c001fec8 <CPrintf>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8d 76 00             	lea    esi,[esi+0x0]
c0014c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c90:	89 10                	mov    DWORD PTR [eax],edx
c0014c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c96:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c9e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ca2:	0f b7 d2             	movzx  edx,dx
c0014ca5:	0f b7 c0             	movzx  eax,ax
c0014ca8:	39 c2                	cmp    edx,eax
c0014caa:	74 38                	je     c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cb4:	eb 2e                	jmp    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 15                	je     c0014cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014cc3:	83 ec 08             	sub    esp,0x8
c0014cc6:	68 1c 15 03 c0       	push   0xc003151c
c0014ccb:	68 66 01 03 c0       	push   0xc0030166
c0014cd0:	e8 f3 b1 00 00       	call   c001fec8 <CPrintf>
c0014cd5:	83 c4 10             	add    esp,0x10
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ce0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014ce3:	90                   	nop
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014ceb:	0f b6 c0             	movzx  eax,al
c0014cee:	83 e0 01             	and    eax,0x1
c0014cf1:	0f 84 39 01 00 00    	je     c0014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014cf7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cfc:	0f 84 26 01 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d10:	0f b7 c0             	movzx  eax,ax
c0014d13:	85 c0                	test   eax,eax
c0014d15:	74 0d                	je     c0014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014d17:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d1f:	e9 04 01 00 00       	jmp    c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d36:	eb 44                	jmp    c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d53:	0f b7 d2             	movzx  edx,dx
c0014d56:	0f b7 c0             	movzx  eax,ax
c0014d59:	39 c2                	cmp    edx,eax
c0014d5b:	74 0b                	je     c0014d68 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014d5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d65:	eb 1d                	jmp    c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014d67:	90                   	nop
c0014d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d7a:	66 90                	xchg   ax,ax
c0014d7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d81:	75 b5                	jne    c0014d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014d83:	90                   	nop
c0014d84:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d89:	0f 84 99 00 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d96:	85 c0                	test   eax,eax
c0014d98:	75 16                	jne    c0014db0 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014d9a:	83 ec 08             	sub    esp,0x8
c0014d9d:	68 f9 14 03 c0       	push   0xc00314f9
c0014da2:	68 66 01 03 c0       	push   0xc0030166
c0014da7:	e8 1c b1 00 00       	call   c001fec8 <CPrintf>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	90                   	nop
c0014db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dba:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014dbe:	75 18                	jne    c0014dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014dc0:	83 ec 08             	sub    esp,0x8
c0014dc3:	68 f9 14 03 c0       	push   0xc00314f9
c0014dc8:	68 66 01 03 c0       	push   0xc0030166
c0014dcd:	e8 f6 b0 00 00       	call   c001fec8 <CPrintf>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	85 c0                	test   eax,eax
c0014de0:	74 16                	je     c0014df8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014de2:	83 ec 08             	sub    esp,0x8
c0014de5:	68 54 15 03 c0       	push   0xc0031554
c0014dea:	68 66 01 03 c0       	push   0xc0030166
c0014def:	e8 d4 b0 00 00       	call   c001fec8 <CPrintf>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dfc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e04:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014e07:	0f b7 d2             	movzx  edx,dx
c0014e0a:	0f b7 c0             	movzx  eax,ax
c0014e0d:	39 c2                	cmp    edx,eax
c0014e0f:	74 17                	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e11:	83 ec 08             	sub    esp,0x8
c0014e14:	68 78 15 03 c0       	push   0xc0031578
c0014e19:	68 66 01 03 c0       	push   0xc0030166
c0014e1e:	e8 a5 b0 00 00       	call   c001fec8 <CPrintf>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	66 90                	xchg   ax,ax
c0014e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2c:	eb 52                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e2e:	66 90                	xchg   ax,ax
c0014e30:	b8 00 00 00 00       	mov    eax,0x0
c0014e35:	eb 49                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e37:	90                   	nop
c0014e38:	90                   	nop
c0014e39:	eb 09                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3b:	90                   	nop
c0014e3c:	90                   	nop
c0014e3d:	eb 05                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3f:	90                   	nop
c0014e40:	90                   	nop
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]
c0014e44:	83 ec 0c             	sub    esp,0xc
c0014e47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e4b:	e8 78 3e ff ff       	call   c0008cc8 <pbuf_clen>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c0014e5a:	0f b6 c0             	movzx  eax,al
c0014e5d:	89 d3                	mov    ebx,edx
c0014e5f:	29 c3                	sub    ebx,eax
c0014e61:	89 d8                	mov    eax,ebx
c0014e63:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e70:	e8 7f 36 ff ff       	call   c00084f4 <pbuf_free>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	b8 00 00 00 00       	mov    eax,0x0
c0014e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e80:	83 c4 28             	add    esp,0x28
c0014e83:	5b                   	pop    ebx
c0014e84:	c3                   	ret    
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]

c0014e88 <ip_reass>:
c0014e88:	53                   	push   ebx
c0014e89:	83 ec 28             	sub    esp,0x28
c0014e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e94:	66 a1 52 77 03 c0    	mov    ax,ds:0xc0037752
c0014e9a:	83 c0 01             	add    eax,0x1
c0014e9d:	66 a3 52 77 03 c0    	mov    ds:0xc0037752,ax
c0014ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014eb5:	0f b7 c0             	movzx  eax,ax
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	50                   	push   eax
c0014ebc:	e8 27 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	0f b7 c0             	movzx  eax,ax
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	0f b7 c0             	movzx  eax,ax
c0014ecd:	83 e0 0f             	and    eax,0xf
c0014ed0:	c1 e0 02             	shl    eax,0x2
c0014ed3:	83 f8 14             	cmp    eax,0x14
c0014ed6:	74 14                	je     c0014eec <ip_reass+0x64>
c0014ed8:	66 a1 64 77 03 c0    	mov    ax,ds:0xc0037764
c0014ede:	83 c0 01             	add    eax,0x1
c0014ee1:	66 a3 64 77 03 c0    	mov    ds:0xc0037764,ax
c0014ee7:	e9 68 03 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ef4:	0f b7 c0             	movzx  eax,ax
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	50                   	push   eax
c0014efb:	e8 e8 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f08:	c1 e0 03             	shl    eax,0x3
c0014f0b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014f18:	0f b7 c0             	movzx  eax,ax
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	50                   	push   eax
c0014f1f:	e8 c4 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	89 c3                	mov    ebx,eax
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f30:	0f b7 c0             	movzx  eax,ax
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	50                   	push   eax
c0014f37:	e8 ac bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	0f b7 c0             	movzx  eax,ax
c0014f42:	c1 e8 08             	shr    eax,0x8
c0014f45:	83 e0 0f             	and    eax,0xf
c0014f48:	c1 e0 02             	shl    eax,0x2
c0014f4b:	89 d9                	mov    ecx,ebx
c0014f4d:	29 c1                	sub    ecx,eax
c0014f4f:	89 c8                	mov    eax,ecx
c0014f51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f5d:	e8 66 3d ff ff       	call   c0008cc8 <pbuf_clen>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014f69:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c0014f6f:	0f b7 d0             	movzx  edx,ax
c0014f72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f77:	01 d0                	add    eax,edx
c0014f79:	83 f8 0a             	cmp    eax,0xa
c0014f7c:	7e 42                	jle    c0014fc0 <ip_reass+0x138>
c0014f7e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f83:	83 ec 08             	sub    esp,0x8
c0014f86:	50                   	push   eax
c0014f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f8b:	e8 ec f8 ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	85 c0                	test   eax,eax
c0014f95:	74 15                	je     c0014fac <ip_reass+0x124>
c0014f97:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c0014f9d:	0f b7 d0             	movzx  edx,ax
c0014fa0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014fa5:	01 d0                	add    eax,edx
c0014fa7:	83 f8 0a             	cmp    eax,0xa
c0014faa:	7e 14                	jle    c0014fc0 <ip_reass+0x138>
c0014fac:	66 a1 5c 77 03 c0    	mov    ax,ds:0xc003775c
c0014fb2:	83 c0 01             	add    eax,0x1
c0014fb5:	66 a3 5c 77 03 c0    	mov    ds:0xc003775c,ax
c0014fbb:	e9 94 02 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014fc0:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c0014fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fc9:	eb 65                	jmp    c0015030 <ip_reass+0x1a8>
c0014fcb:	90                   	nop
c0014fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014fda:	39 c2                	cmp    edx,eax
c0014fdc:	75 3e                	jne    c001501c <ip_reass+0x194>
c0014fde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fec:	39 c2                	cmp    edx,eax
c0014fee:	75 2c                	jne    c001501c <ip_reass+0x194>
c0014ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014fff:	0f b7 d2             	movzx  edx,dx
c0015002:	0f b7 c0             	movzx  eax,ax
c0015005:	39 c2                	cmp    edx,eax
c0015007:	75 13                	jne    c001501c <ip_reass+0x194>
c0015009:	66 a1 66 77 03 c0    	mov    ax,ds:0xc0037766
c001500f:	83 c0 01             	add    eax,0x1
c0015012:	66 a3 66 77 03 c0    	mov    ds:0xc0037766,ax
c0015018:	eb 1e                	jmp    c0015038 <ip_reass+0x1b0>
c001501a:	66 90                	xchg   ax,ax
c001501c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015024:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502e:	66 90                	xchg   ax,ax
c0015030:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015035:	75 95                	jne    c0014fcc <ip_reass+0x144>
c0015037:	90                   	nop
c0015038:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001503d:	75 25                	jne    c0015064 <ip_reass+0x1dc>
c001503f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001504c:	e8 4b f9 ff ff       	call   c001499c <ip_reass_enqueue_new_datagram>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015058:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001505d:	75 61                	jne    c00150c0 <ip_reass+0x238>
c001505f:	e9 f0 01 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0015064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015068:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001506c:	0f b7 c0             	movzx  eax,ax
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	50                   	push   eax
c0015073:	e8 70 bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	0f b7 c0             	movzx  eax,ax
c001507e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015083:	75 3b                	jne    c00150c0 <ip_reass+0x238>
c0015085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015089:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001508d:	0f b7 c0             	movzx  eax,ax
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	50                   	push   eax
c0015094:	e8 4f bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	0f b7 c0             	movzx  eax,ax
c001509f:	25 ff 1f 00 00       	and    eax,0x1fff
c00150a4:	74 1a                	je     c00150c0 <ip_reass+0x238>
c00150a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150aa:	83 c0 08             	add    eax,0x8
c00150ad:	83 ec 04             	sub    esp,0x4
c00150b0:	6a 14                	push   0x14
c00150b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b6:	50                   	push   eax
c00150b7:	e8 be b2 fe ff       	call   c000037a <memcpy>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	90                   	nop
c00150c0:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c00150c5:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c00150cb:	01 d0                	add    eax,edx
c00150cd:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c00150d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00150db:	0f b7 c0             	movzx  eax,ax
c00150de:	83 e0 20             	and    eax,0x20
c00150e1:	75 29                	jne    c001510c <ip_reass+0x284>
c00150e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150e7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00150ea:	83 c8 01             	or     eax,0x1
c00150ed:	88 c2                	mov    dl,al
c00150ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00150f6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00150fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150ff:	01 d0                	add    eax,edx
c0015101:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015105:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	83 ec 08             	sub    esp,0x8
c001510f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015117:	e8 3c f9 ff ff       	call   c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	85 c0                	test   eax,eax
c0015121:	0f 84 25 01 00 00    	je     c001524c <ip_reass+0x3c4>
c0015127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001512b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001512e:	83 c0 14             	add    eax,0x14
c0015131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015135:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001513d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015143:	8b 00                	mov    eax,DWORD PTR [eax]
c0015145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001514d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001515b:	83 c0 08             	add    eax,0x8
c001515e:	83 ec 04             	sub    esp,0x4
c0015161:	6a 14                	push   0x14
c0015163:	50                   	push   eax
c0015164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015168:	e8 0d b2 fe ff       	call   c000037a <memcpy>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015174:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015177:	0f b7 c0             	movzx  eax,ax
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	50                   	push   eax
c001517e:	e8 65 ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001518a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001518e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015192:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001519c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	6a 14                	push   0x14
c00151a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151ab:	e8 e0 e4 ff ff       	call   c0013690 <inet_chksum>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b7:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00151bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00151c6:	eb 3c                	jmp    c0015204 <ip_reass+0x37c>
c00151c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151d3:	83 ec 08             	sub    esp,0x8
c00151d6:	6a ec                	push   0xffffffec
c00151d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00151dc:	e8 77 31 ff ff       	call   c0008358 <pbuf_header>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	83 ec 08             	sub    esp,0x8
c00151e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151ef:	e8 38 3b ff ff       	call   c0008d2c <pbuf_cat>
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015209:	75 bd                	jne    c00151c8 <ip_reass+0x340>
c001520b:	83 ec 08             	sub    esp,0x8
c001520e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015216:	e8 79 f3 ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015225:	e8 9e 3a ff ff       	call   c0008cc8 <pbuf_clen>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c0015234:	0f b6 c0             	movzx  eax,al
c0015237:	89 d3                	mov    ebx,edx
c0015239:	29 c3                	sub    ebx,eax
c001523b:	89 d8                	mov    eax,ebx
c001523d:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c0015243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015247:	eb 2f                	jmp    c0015278 <ip_reass+0x3f0>
c0015249:	8d 76 00             	lea    esi,[esi+0x0]
c001524c:	b8 00 00 00 00       	mov    eax,0x0
c0015251:	eb 25                	jmp    c0015278 <ip_reass+0x3f0>
c0015253:	90                   	nop
c0015254:	66 a1 56 77 03 c0    	mov    ax,ds:0xc0037756
c001525a:	83 c0 01             	add    eax,0x1
c001525d:	66 a3 56 77 03 c0    	mov    ds:0xc0037756,ax
c0015263:	83 ec 0c             	sub    esp,0xc
c0015266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001526a:	e8 85 32 ff ff       	call   c00084f4 <pbuf_free>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	b8 00 00 00 00       	mov    eax,0x0
c0015277:	90                   	nop
c0015278:	83 c4 28             	add    esp,0x28
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    
c001527d:	8d 76 00             	lea    esi,[esi+0x0]

c0015280 <ip_frag_alloc_pbuf_custom_ref>:
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	6a 06                	push   0x6
c0015288:	e8 7f 28 ff ff       	call   c0007b0c <memp_malloc>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	83 c4 0c             	add    esp,0xc
c0015293:	c3                   	ret    

c0015294 <ip_frag_free_pbuf_custom_ref>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001529c:	75 16                	jne    c00152b4 <ip_frag_free_pbuf_custom_ref+0x20>
c001529e:	83 ec 08             	sub    esp,0x8
c00152a1:	68 96 05 03 c0       	push   0xc0030596
c00152a6:	68 66 01 03 c0       	push   0xc0030166
c00152ab:	e8 18 ac 00 00       	call   c001fec8 <CPrintf>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	90                   	nop
c00152b4:	83 ec 08             	sub    esp,0x8
c00152b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152bb:	6a 06                	push   0x6
c00152bd:	e8 76 29 ff ff       	call   c0007c38 <memp_free>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	90                   	nop
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <ipfrag_free_pbuf_custom>:
c00152cc:	83 ec 1c             	sub    esp,0x1c
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152dc:	75 16                	jne    c00152f4 <ipfrag_free_pbuf_custom+0x28>
c00152de:	83 ec 08             	sub    esp,0x8
c00152e1:	68 06 15 03 c0       	push   0xc0031506
c00152e6:	68 66 01 03 c0       	push   0xc0030166
c00152eb:	e8 d8 ab 00 00       	call   c001fec8 <CPrintf>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	90                   	nop
c00152f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00152fc:	74 16                	je     c0015314 <ipfrag_free_pbuf_custom+0x48>
c00152fe:	83 ec 08             	sub    esp,0x8
c0015301:	68 12 15 03 c0       	push   0xc0031512
c0015306:	68 66 01 03 c0       	push   0xc0030166
c001530b:	e8 b8 ab 00 00       	call   c001fec8 <CPrintf>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	90                   	nop
c0015314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015318:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001531b:	85 c0                	test   eax,eax
c001531d:	74 15                	je     c0015334 <ipfrag_free_pbuf_custom+0x68>
c001531f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015323:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	50                   	push   eax
c001532a:	e8 c5 31 ff ff       	call   c00084f4 <pbuf_free>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	66 90                	xchg   ax,ax
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001533b:	e8 54 ff ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	90                   	nop
c0015344:	83 c4 1c             	add    esp,0x1c
c0015347:	c3                   	ret    

c0015348 <ip_frag>:
c0015348:	53                   	push   ebx
c0015349:	83 ec 38             	sub    esp,0x38
c001534c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015353:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015358:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c001535f:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0015366:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001536a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001536d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001537d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015381:	0f b7 c0             	movzx  eax,ax
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	50                   	push   eax
c0015388:	e8 5b b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015395:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015399:	25 ff 1f 00 00       	and    eax,0x1fff
c001539e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00153a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a7:	25 00 20 00 00       	and    eax,0x2000
c00153ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00153b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00153b8:	83 e8 14             	sub    eax,0x14
c00153bb:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00153c0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153c5:	83 e8 14             	sub    eax,0x14
c00153c8:	79 06                	jns    c00153d0 <ip_frag+0x88>
c00153ca:	83 c0 07             	add    eax,0x7
c00153cd:	8d 76 00             	lea    esi,[esi+0x0]
c00153d0:	c1 f8 03             	sar    eax,0x3
c00153d3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00153d8:	e9 03 03 00 00       	jmp    c00156e0 <ip_frag+0x398>
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153e5:	8d 50 ed             	lea    edx,[eax-0x13]
c00153e8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00153ed:	39 c2                	cmp    edx,eax
c00153ef:	0f 9f c0             	setg   al
c00153f2:	0f b6 c0             	movzx  eax,al
c00153f5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00153fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153fe:	25 ff 1f 00 00       	and    eax,0x1fff
c0015403:	89 c2                	mov    edx,eax
c0015405:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001540a:	09 d0                	or     eax,edx
c001540c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015411:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015416:	85 c0                	test   eax,eax
c0015418:	75 0e                	jne    c0015428 <ip_frag+0xe0>
c001541a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001541e:	80 cc 20             	or     ah,0x20
c0015421:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015426:	66 90                	xchg   ax,ax
c0015428:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001542d:	85 c0                	test   eax,eax
c001542f:	75 0b                	jne    c001543c <ip_frag+0xf4>
c0015431:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015435:	c1 e0 03             	shl    eax,0x3
c0015438:	eb 0a                	jmp    c0015444 <ip_frag+0xfc>
c001543a:	66 90                	xchg   ax,ax
c001543c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015449:	83 ec 04             	sub    esp,0x4
c001544c:	6a 00                	push   0x0
c001544e:	6a 14                	push   0x14
c0015450:	6a 02                	push   0x2
c0015452:	e8 75 32 ff ff       	call   c00086cc <pbuf_alloc>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001545e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015463:	75 07                	jne    c001546c <ip_frag+0x124>
c0015465:	b0 ff                	mov    al,0xff
c0015467:	e9 84 02 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c001546c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015470:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015474:	0f b7 c0             	movzx  eax,ax
c0015477:	83 f8 13             	cmp    eax,0x13
c001547a:	77 18                	ja     c0015494 <ip_frag+0x14c>
c001547c:	83 ec 08             	sub    esp,0x8
c001547f:	68 a8 15 03 c0       	push   0xc00315a8
c0015484:	68 66 01 03 c0       	push   0xc0030166
c0015489:	e8 3a aa 00 00       	call   c001fec8 <CPrintf>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001549b:	83 ec 04             	sub    esp,0x4
c001549e:	6a 14                	push   0x14
c00154a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154a4:	50                   	push   eax
c00154a5:	e8 d0 ae fe ff       	call   c000037a <memcpy>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00154b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00154bf:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c00154c4:	01 c2                	add    edx,eax
c00154c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00154cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154d1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00154d5:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00154da:	89 d1                	mov    ecx,edx
c00154dc:	29 c1                	sub    ecx,eax
c00154de:	89 c8                	mov    eax,ecx
c00154e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00154e4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ec:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00154f1:	e9 1a 01 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154fc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015500:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015504:	0f b7 d8             	movzx  ebx,ax
c0015507:	0f b7 ca             	movzx  ecx,dx
c001550a:	39 cb                	cmp    ebx,ecx
c001550c:	76 02                	jbe    c0015510 <ip_frag+0x1c8>
c001550e:	89 d0                	mov    eax,edx
c0015510:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015515:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001551a:	85 c0                	test   eax,eax
c001551c:	75 12                	jne    c0015530 <ip_frag+0x1e8>
c001551e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015528:	e9 e3 00 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c001552d:	8d 76 00             	lea    esi,[esi+0x0]
c0015530:	e8 4b fd ff ff       	call   c0015280 <ip_frag_alloc_pbuf_custom_ref>
c0015535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015539:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001553e:	75 18                	jne    c0015558 <ip_frag+0x210>
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015547:	e8 a8 2f ff ff       	call   c00084f4 <pbuf_free>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	b0 ff                	mov    al,0xff
c0015551:	e9 9a 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c0015556:	66 90                	xchg   ax,ax
c0015558:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c001555d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015561:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015568:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	53                   	push   ebx
c0015571:	51                   	push   ecx
c0015572:	52                   	push   edx
c0015573:	6a 02                	push   0x2
c0015575:	50                   	push   eax
c0015576:	6a 03                	push   0x3
c0015578:	e8 b7 2c ff ff       	call   c0008234 <pbuf_alloced_custom>
c001557d:	83 c4 20             	add    esp,0x20
c0015580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015584:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015589:	75 25                	jne    c00155b0 <ip_frag+0x268>
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015592:	e8 fd fc ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a1:	e8 4e 2f ff ff       	call   c00084f4 <pbuf_free>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	b0 ff                	mov    al,0xff
c00155ab:	e9 40 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155b7:	e8 40 37 ff ff       	call   c0008cfc <pbuf_ref>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00155c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155ce:	c7 40 10 cc 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc00152cc
c00155d5:	83 ec 08             	sub    esp,0x8
c00155d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00155dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e0:	e8 47 37 ff ff       	call   c0008d2c <pbuf_cat>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155ec:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00155f1:	89 d3                	mov    ebx,edx
c00155f3:	29 c3                	sub    ebx,eax
c00155f5:	89 d8                	mov    eax,ebx
c00155f7:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155fc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015601:	85 c0                	test   eax,eax
c0015603:	74 0b                	je     c0015610 <ip_frag+0x2c8>
c0015605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001560f:	90                   	nop
c0015610:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015615:	85 c0                	test   eax,eax
c0015617:	0f 85 db fe ff ff    	jne    c00154f8 <ip_frag+0x1b0>
c001561d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015622:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015627:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	50                   	push   eax
c0015630:	e8 b3 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001563c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	83 c0 14             	add    eax,0x14
c0015647:	0f b7 c0             	movzx  eax,ax
c001564a:	83 ec 0c             	sub    esp,0xc
c001564d:	50                   	push   eax
c001564e:	e8 95 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001565a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001565e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015662:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	6a 14                	push   0x14
c001566d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015671:	e8 1a e0 ff ff       	call   c0013690 <inet_chksum>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001567d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015681:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015685:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015688:	83 ec 04             	sub    esp,0x4
c001568b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015693:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015697:	ff d0                	call   eax
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	66 a1 50 77 03 c0    	mov    ax,ds:0xc0037750
c00156a2:	83 c0 01             	add    eax,0x1
c00156a5:	66 a3 50 77 03 c0    	mov    ds:0xc0037750,ax
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b2:	e8 3d 2e ff ff       	call   c00084f4 <pbuf_free>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c00156bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c3:	89 d1                	mov    ecx,edx
c00156c5:	29 c1                	sub    ecx,eax
c00156c7:	89 c8                	mov    eax,ecx
c00156c9:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00156ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00156d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d6:	01 d0                	add    eax,edx
c00156d8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00156e5:	85 c0                	test   eax,eax
c00156e7:	0f 85 f3 fc ff ff    	jne    c00153e0 <ip_frag+0x98>
c00156ed:	b0 00                	mov    al,0x0
c00156ef:	90                   	nop
c00156f0:	83 c4 38             	add    esp,0x38
c00156f3:	5b                   	pop    ebx
c00156f4:	c3                   	ret    
c00156f5:	90                   	nop

c00156f6 <Computer::close(int, int, void*)>:
c00156f6:	53                   	push   ebx
c00156f7:	83 ec 08             	sub    esp,0x8
c00156fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156fe:	e8 55 a6 00 00       	call   c001fd58 <KeExecuteAtexit()>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001570c:	50                   	push   eax
c001570d:	e8 58 61 00 00       	call   c001b86a <Device::closeAll()>
c0015712:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015718:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001571c:	8b 10                	mov    edx,DWORD PTR [eax]
c001571e:	51                   	push   ecx
c001571f:	68 0f 27 00 00       	push   0x270f
c0015724:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015728:	53                   	push   ebx
c0015729:	50                   	push   eax
c001572a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	68 c8 15 03 c0       	push   0xc00315c8
c0015735:	e8 44 b0 00 00       	call   c002077e <KePanic(char const*)>
c001573a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001573f:	83 c4 18             	add    esp,0x18
c0015742:	5b                   	pop    ebx
c0015743:	c3                   	ret    

c0015744 <Krnl::firstTask()>:
c0015744:	53                   	push   ebx
c0015745:	83 ec 14             	sub    esp,0x14
c0015748:	fb                   	sti    
c0015749:	68 de 15 03 c0       	push   0xc00315de
c001574e:	e8 e4 a6 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c0015753:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001575a:	e8 58 0e 00 00       	call   c00165b7 <malloc>
c001575f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015766:	89 c3                	mov    ebx,eax
c0015768:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001576d:	50                   	push   eax
c001576e:	68 f7 15 03 c0       	push   0xc00315f7
c0015773:	6a 01                	push   0x1
c0015775:	53                   	push   ebx
c0015776:	e8 99 fb 00 00       	call   c0025314 <Process::Process(bool, char const*, Process*, char**)>
c001577b:	83 c4 20             	add    esp,0x20
c001577e:	68 ff 00 00 00       	push   0xff
c0015783:	6a 00                	push   0x0
c0015785:	68 81 5f 01 c0       	push   0xc0015f81
c001578a:	53                   	push   ebx
c001578b:	e8 ac fd 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c0015790:	8b 15 f8 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411f8
c0015796:	6a 7a                	push   0x7a
c0015798:	6a 00                	push   0x0
c001579a:	68 04 5e 02 c0       	push   0xc0025e04
c001579f:	52                   	push   edx
c00157a0:	e8 97 fd 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c00157a5:	83 c4 14             	add    esp,0x14
c00157a8:	a3 b0 11 04 c0       	mov    ds:0xc00411b0,eax
c00157ad:	68 e4 16 03 c0       	push   0xc00316e4
c00157b2:	e8 80 a6 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c00157b7:	c6 05 c1 b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9c1,0x1
c00157be:	e8 74 b1 00 00       	call   c0020937 <KeInitRand()>
c00157c3:	e8 d3 09 01 00       	call   c002619b <Vm::initialise8086()>
c00157c8:	e8 5d 4b 00 00       	call   c001a32a <Fs::initVFS()>
c00157cd:	c7 04 24 04 16 03 c0 	mov    DWORD PTR [esp],0xc0031604
c00157d4:	e8 5e a6 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c00157d9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00157de:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00157e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157e6:	6a 00                	push   0x0
c00157e8:	6a 00                	push   0x0
c00157ea:	6a 00                	push   0x0
c00157ec:	50                   	push   eax
c00157ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00157f0:	83 c4 14             	add    esp,0x14
c00157f3:	68 e4 16 03 c0       	push   0xc00316e4
c00157f8:	e8 3a a6 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c00157fd:	e8 c2 42 00 00       	call   c0019ac4 <KeInitialiseSymlinks()>
c0015802:	e8 db ab 00 00       	call   c00203e2 <KeLoadSystemEnv()>
c0015807:	e8 37 b0 00 00       	call   c0020843 <KeSetupPowerManager()>
c001580c:	c7 04 24 08 17 03 c0 	mov    DWORD PTR [esp],0xc0031708
c0015813:	e8 1f a6 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c0015818:	59                   	pop    ecx
c0015819:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001581e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015824:	53                   	push   ebx
c0015825:	e8 f4 5e 00 00       	call   c001b71e <Device::loadDriversForAll()>
c001582a:	e8 7d 17 ff ff       	call   c0006fac <lwip_init>
c001582f:	c7 04 24 1e 16 03 c0 	mov    DWORD PTR [esp],0xc003161e
c0015836:	e8 fc a5 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001583b:	58                   	pop    eax
c001583c:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c0015842:	5a                   	pop    edx
c0015843:	6a 01                	push   0x1
c0015845:	68 2f 16 03 c0       	push   0xc003162f
c001584a:	e8 b7 f4 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001584f:	59                   	pop    ecx
c0015850:	5a                   	pop    edx
c0015851:	53                   	push   ebx
c0015852:	50                   	push   eax
c0015853:	e8 00 f7 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	83 ec 0c             	sub    esp,0xc
c001585e:	6a 02                	push   0x2
c0015860:	e8 e3 ff 00 00       	call   c0025848 <blockTask(TaskState)>
c0015865:	83 c4 10             	add    esp,0x10
c0015868:	eb f1                	jmp    c001585b <Krnl::firstTask()+0x117>

c001586a <Computer::Computer()>:
c001586a:	83 ec 0c             	sub    esp,0xc
c001586d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015871:	83 ec 08             	sub    esp,0x8
c0015874:	68 4b 16 03 c0       	push   0xc003164b
c0015879:	50                   	push   eax
c001587a:	e8 e5 5e 00 00       	call   c001b764 <Device::Device(char const*)>
c001587f:	83 c4 10             	add    esp,0x10
c0015882:	ba 54 17 03 c0       	mov    edx,0xc0031754
c0015887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001588b:	89 10                	mov    DWORD PTR [eax],edx
c001588d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015891:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001589b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001589f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c00158a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00158b3:	83 ca 04             	or     edx,0x4
c00158b6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00158bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158c6:	0f b6 d0             	movzx  edx,al
c00158c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158cd:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00158d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158de:	0f b6 d0             	movzx  edx,al
c00158e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00158ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158f4:	8d 50 01             	lea    edx,[eax+0x1]
c00158f7:	88 d1                	mov    cl,dl
c00158f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00158fd:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0015903:	0f b6 d0             	movzx  edx,al
c0015906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001590e:	83 e1 3f             	and    ecx,0x3f
c0015911:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015915:	90                   	nop
c0015916:	83 c4 0c             	add    esp,0xc
c0015919:	c3                   	ret    

c001591a <Computer::setBootMessage(char const*)>:
c001591a:	c3                   	ret    
c001591b:	90                   	nop

c001591c <Computer::detectFeatures()>:
c001591c:	55                   	push   ebp
c001591d:	57                   	push   edi
c001591e:	56                   	push   esi
c001591f:	53                   	push   ebx
c0015920:	83 ec 1c             	sub    esp,0x1c
c0015923:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015927:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001592d:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0015933:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015939:	e8 bb a8 fe ff       	call   c00001f9 <detectCPUID>
c001593e:	31 d2                	xor    edx,edx
c0015940:	85 c0                	test   eax,eax
c0015942:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015948:	0f 95 c2             	setne  dl
c001594b:	83 e0 fd             	and    eax,0xfffffffd
c001594e:	d1 e2                	shl    edx,1
c0015950:	09 d0                	or     eax,edx
c0015952:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015958:	a8 02                	test   al,0x2
c001595a:	75 51                	jne    c00159ad <Computer::detectFeatures()+0x91>
c001595c:	f6 05 d5 b9 03 c0 04 	test   BYTE PTR ds:0xc003b9d5,0x4
c0015963:	74 0f                	je     c0015974 <Computer::detectFeatures()+0x58>
c0015965:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001596b:	83 e0 fb             	and    eax,0xfffffffb
c001596e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015974:	e8 1d 90 01 00       	call   c002e996 <x87Detect>
c0015979:	83 e0 01             	and    eax,0x1
c001597c:	c1 e0 04             	shl    eax,0x4
c001597f:	89 c2                	mov    edx,eax
c0015981:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015987:	83 e0 ef             	and    eax,0xffffffef
c001598a:	09 d0                	or     eax,edx
c001598c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015992:	88 c2                	mov    dl,al
c0015994:	a8 10                	test   al,0x10
c0015996:	0f 85 33 01 00 00    	jne    c0015acf <Computer::detectFeatures()+0x1b3>
c001599c:	80 e2 80             	and    dl,0x80
c001599f:	0f 85 4c 01 00 00    	jne    c0015af1 <Computer::detectFeatures()+0x1d5>
c00159a5:	83 c4 1c             	add    esp,0x1c
c00159a8:	5b                   	pop    ebx
c00159a9:	5e                   	pop    esi
c00159aa:	5f                   	pop    edi
c00159ab:	5d                   	pop    ebp
c00159ac:	c3                   	ret    
c00159ad:	83 ec 0c             	sub    esp,0xc
c00159b0:	6a 20                	push   0x20
c00159b2:	e8 b9 98 00 00       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c00159b7:	83 e0 01             	and    eax,0x1
c00159ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00159c1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159c7:	83 e0 f7             	and    eax,0xfffffff7
c00159ca:	09 d0                	or     eax,edx
c00159cc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159d2:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00159d9:	e8 92 98 00 00       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c00159de:	89 c2                	mov    edx,eax
c00159e0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00159e6:	83 e2 01             	and    edx,0x1
c00159e9:	83 e0 fe             	and    eax,0xfffffffe
c00159ec:	09 d0                	or     eax,edx
c00159ee:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00159f4:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00159fb:	e8 70 98 00 00       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c0015a00:	89 c2                	mov    edx,eax
c0015a02:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a08:	c1 e2 07             	shl    edx,0x7
c0015a0b:	83 e0 7f             	and    eax,0x7f
c0015a0e:	09 d0                	or     eax,edx
c0015a10:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a16:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015a1d:	e8 4e 98 00 00       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c0015a22:	83 c4 10             	add    esp,0x10
c0015a25:	83 e0 01             	and    eax,0x1
c0015a28:	c1 e0 05             	shl    eax,0x5
c0015a2b:	89 c2                	mov    edx,eax
c0015a2d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a33:	83 e0 df             	and    eax,0xffffffdf
c0015a36:	09 d0                	or     eax,edx
c0015a38:	f7 05 d4 b9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003b9d4,0x401
c0015a42:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a48:	0f 84 c9 00 00 00    	je     c0015b17 <Computer::detectFeatures()+0x1fb>
c0015a4e:	83 e0 fe             	and    eax,0xfffffffe
c0015a51:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a57:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a5d:	89 c2                	mov    edx,eax
c0015a5f:	83 e2 09             	and    edx,0x9
c0015a62:	83 fa 01             	cmp    edx,0x1
c0015a65:	75 09                	jne    c0015a70 <Computer::detectFeatures()+0x154>
c0015a67:	83 e0 fe             	and    eax,0xfffffffe
c0015a6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a70:	83 ec 0c             	sub    esp,0xc
c0015a73:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a77:	50                   	push   eax
c0015a78:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015a7c:	55                   	push   ebp
c0015a7d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015a81:	57                   	push   edi
c0015a82:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015a86:	56                   	push   esi
c0015a87:	68 00 00 00 80       	push   0x80000000
c0015a8c:	e8 5b 97 00 00       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015a91:	83 c4 20             	add    esp,0x20
c0015a94:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015a9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015a9f:	0f 86 b7 fe ff ff    	jbe    c001595c <Computer::detectFeatures()+0x40>
c0015aa5:	83 ec 0c             	sub    esp,0xc
c0015aa8:	50                   	push   eax
c0015aa9:	55                   	push   ebp
c0015aaa:	57                   	push   edi
c0015aab:	56                   	push   esi
c0015aac:	68 01 00 00 80       	push   0x80000001
c0015ab1:	e8 36 97 00 00       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015ab6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015abc:	83 c4 20             	add    esp,0x20
c0015abf:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015ac4:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015aca:	e9 8d fe ff ff       	jmp    c001595c <Computer::detectFeatures()+0x40>
c0015acf:	e8 7c 8e 01 00       	call   c002e950 <sseDetect>
c0015ad4:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015ada:	c1 e0 07             	shl    eax,0x7
c0015add:	83 e2 7f             	and    edx,0x7f
c0015ae0:	09 c2                	or     edx,eax
c0015ae2:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015ae8:	80 e2 80             	and    dl,0x80
c0015aeb:	0f 84 b4 fe ff ff    	je     c00159a5 <Computer::detectFeatures()+0x89>
c0015af1:	e8 ea 8a 01 00       	call   c002e5e0 <avxDetect>
c0015af6:	83 e0 01             	and    eax,0x1
c0015af9:	c1 e0 05             	shl    eax,0x5
c0015afc:	89 c2                	mov    edx,eax
c0015afe:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015b04:	83 e0 df             	and    eax,0xffffffdf
c0015b07:	09 d0                	or     eax,edx
c0015b09:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b0f:	83 c4 1c             	add    esp,0x1c
c0015b12:	5b                   	pop    ebx
c0015b13:	5e                   	pop    esi
c0015b14:	5f                   	pop    edi
c0015b15:	5d                   	pop    ebp
c0015b16:	c3                   	ret    
c0015b17:	83 ec 0c             	sub    esp,0xc
c0015b1a:	68 00 02 00 00       	push   0x200
c0015b1f:	e8 4c 97 00 00       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c0015b24:	83 c4 10             	add    esp,0x10
c0015b27:	89 c2                	mov    edx,eax
c0015b29:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b2f:	83 e2 01             	and    edx,0x1
c0015b32:	83 e0 fe             	and    eax,0xfffffffe
c0015b35:	09 d0                	or     eax,edx
c0015b37:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b3d:	e9 15 ff ff ff       	jmp    c0015a57 <Computer::detectFeatures()+0x13b>

c0015b42 <Computer::displayFeatures()>:
c0015b42:	c3                   	ret    
c0015b43:	90                   	nop

c0015b44 <Computer::rdmsr(unsigned int)>:
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b4b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b52:	74 0a                	je     c0015b5e <Computer::rdmsr(unsigned int)+0x1a>
c0015b54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015b58:	0f 32                	rdmsr  
c0015b5a:	83 c4 0c             	add    esp,0xc
c0015b5d:	c3                   	ret    
c0015b5e:	83 ec 0c             	sub    esp,0xc
c0015b61:	68 54 16 03 c0       	push   0xc0031654
c0015b66:	e8 13 ac 00 00       	call   c002077e <KePanic(char const*)>
c0015b6b:	83 c4 10             	add    esp,0x10
c0015b6e:	eb e4                	jmp    c0015b54 <Computer::rdmsr(unsigned int)+0x10>

c0015b70 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015b70:	57                   	push   edi
c0015b71:	56                   	push   esi
c0015b72:	83 ec 04             	sub    esp,0x4
c0015b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b79:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015b7d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015b81:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b88:	74 10                	je     c0015b9a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015b8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015b8e:	89 f0                	mov    eax,esi
c0015b90:	89 fa                	mov    edx,edi
c0015b92:	0f 30                	wrmsr  
c0015b94:	83 c4 04             	add    esp,0x4
c0015b97:	5e                   	pop    esi
c0015b98:	5f                   	pop    edi
c0015b99:	c3                   	ret    
c0015b9a:	83 ec 0c             	sub    esp,0xc
c0015b9d:	68 5a 16 03 c0       	push   0xc003165a
c0015ba2:	e8 d7 ab 00 00       	call   c002077e <KePanic(char const*)>
c0015ba7:	83 c4 10             	add    esp,0x10
c0015baa:	eb de                	jmp    c0015b8a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015bac <Computer::shutdown()>:
c0015bac:	83 ec 0c             	sub    esp,0xc
c0015baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bb5:	6a 00                	push   0x0
c0015bb7:	6a 00                	push   0x0
c0015bb9:	6a 00                	push   0x0
c0015bbb:	50                   	push   eax
c0015bbc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bbf:	83 c4 1c             	add    esp,0x1c
c0015bc2:	c3                   	ret    
c0015bc3:	90                   	nop

c0015bc4 <Computer::restart()>:
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bcb:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bcd:	6a 00                	push   0x0
c0015bcf:	6a 00                	push   0x0
c0015bd1:	6a 01                	push   0x1
c0015bd3:	50                   	push   eax
c0015bd4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bd7:	83 c4 1c             	add    esp,0x1c
c0015bda:	c3                   	ret    
c0015bdb:	90                   	nop

c0015bdc <Computer::sleep()>:
c0015bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015be6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bea:	e9 99 90 00 00       	jmp    c001ec88 <ACPI::sleep()>
c0015bef:	90                   	nop

c0015bf0 <Computer::nmiEnabled()>:
c0015bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015bfa:	c3                   	ret    
c0015bfb:	90                   	nop

c0015bfc <Computer::readCMOS(unsigned char)>:
c0015bfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c04:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015c0b:	75 09                	jne    c0015c16 <Computer::readCMOS(unsigned char)+0x1a>
c0015c0d:	b2 80                	mov    dl,0x80
c0015c0f:	09 d0                	or     eax,edx
c0015c11:	e6 70                	out    0x70,al
c0015c13:	e4 71                	in     al,0x71
c0015c15:	c3                   	ret    
c0015c16:	31 d2                	xor    edx,edx
c0015c18:	eb f5                	jmp    c0015c0f <Computer::readCMOS(unsigned char)+0x13>

c0015c1a <Computer::enableNMI(bool)>:
c0015c1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c22:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015c28:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015c30:	eb ca                	jmp    c0015bfc <Computer::readCMOS(unsigned char)>

c0015c32 <Computer::open(int, int, void*)>:
c0015c32:	56                   	push   esi
c0015c33:	53                   	push   ebx
c0015c34:	83 ec 10             	sub    esp,0x10
c0015c37:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c3b:	f6 05 d4 b9 03 c0 04 	test   BYTE PTR ds:0xc003b9d4,0x4
c0015c42:	68 60 16 03 c0       	push   0xc0031660
c0015c47:	0f 94 05 e0 43 03 c0 	sete   BYTE PTR ds:0xc00343e0
c0015c4e:	e8 e4 a1 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c0015c53:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015c5a:	e8 58 09 00 00       	call   c00165b7 <malloc>
c0015c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c62:	89 c6                	mov    esi,eax
c0015c64:	e8 93 8b 00 00       	call   c001e7fc <ACPI::ACPI()>
c0015c69:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015c6f:	58                   	pop    eax
c0015c70:	5a                   	pop    edx
c0015c71:	56                   	push   esi
c0015c72:	53                   	push   ebx
c0015c73:	e8 8a 59 00 00       	call   c001b602 <Device::addChild(Device*)>
c0015c78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c7b:	e8 9c fc ff ff       	call   c001591c <Computer::detectFeatures()>
c0015c80:	59                   	pop    ecx
c0015c81:	5e                   	pop    esi
c0015c82:	6a 01                	push   0x1
c0015c84:	53                   	push   ebx
c0015c85:	e8 90 ff ff ff       	call   c0015c1a <Computer::enableNMI(bool)>
c0015c8a:	c7 04 24 78 16 03 c0 	mov    DWORD PTR [esp],0xc0031678
c0015c91:	e8 a1 a1 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c0015c96:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015c9d:	e8 15 09 00 00       	call   c00165b7 <malloc>
c0015ca2:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ca5:	89 c6                	mov    esi,eax
c0015ca7:	e8 7c 96 00 00       	call   c001f328 <CPU::CPU()>
c0015cac:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015cb2:	58                   	pop    eax
c0015cb3:	5a                   	pop    edx
c0015cb4:	56                   	push   esi
c0015cb5:	53                   	push   ebx
c0015cb6:	e8 47 59 00 00       	call   c001b602 <Device::addChild(Device*)>
c0015cbb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015cc1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015cc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cc7:	51                   	push   ecx
c0015cc8:	6a 00                	push   0x0
c0015cca:	6a 00                	push   0x0
c0015ccc:	50                   	push   eax
c0015ccd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cd0:	83 c4 14             	add    esp,0x14
c0015cd3:	68 28 17 03 c0       	push   0xc0031728
c0015cd8:	e8 5a a1 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c0015cdd:	e8 cf 17 01 00       	call   c00274b1 <HalInitialiseCoprocessor()>
c0015ce2:	c7 04 24 92 16 03 c0 	mov    DWORD PTR [esp],0xc0031692
c0015ce9:	e8 49 a1 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c0015cee:	c7 04 24 44 57 01 c0 	mov    DWORD PTR [esp],0xc0015744
c0015cf5:	e8 6e f9 00 00       	call   c0025668 <setupMultitasking(void (*)())>
c0015cfa:	83 c4 14             	add    esp,0x14
c0015cfd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d02:	5b                   	pop    ebx
c0015d03:	5e                   	pop    esi
c0015d04:	c3                   	ret    
c0015d05:	90                   	nop

c0015d06 <Computer::disableNMI()>:
c0015d06:	6a 00                	push   0x0
c0015d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d0c:	50                   	push   eax
c0015d0d:	e8 08 ff ff ff       	call   c0015c1a <Computer::enableNMI(bool)>
c0015d12:	5a                   	pop    edx
c0015d13:	59                   	pop    ecx
c0015d14:	c3                   	ret    
c0015d15:	90                   	nop

c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015d16:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d22:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015d29:	75 0b                	jne    c0015d36 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015d2b:	b1 80                	mov    cl,0x80
c0015d2d:	09 c8                	or     eax,ecx
c0015d2f:	e6 70                	out    0x70,al
c0015d31:	88 d0                	mov    al,dl
c0015d33:	e6 71                	out    0x71,al
c0015d35:	c3                   	ret    
c0015d36:	31 c9                	xor    ecx,ecx
c0015d38:	eb f3                	jmp    c0015d2d <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015d3a <Computer::handleNMI()>:
c0015d3a:	56                   	push   esi
c0015d3b:	53                   	push   ebx
c0015d3c:	83 ec 10             	sub    esp,0x10
c0015d3f:	e4 92                	in     al,0x92
c0015d41:	89 c6                	mov    esi,eax
c0015d43:	e4 61                	in     al,0x61
c0015d45:	68 ad 16 03 c0       	push   0xc00316ad
c0015d4a:	88 c3                	mov    bl,al
c0015d4c:	e8 f4 36 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0015d51:	83 c4 10             	add    esp,0x10
c0015d54:	83 e6 10             	and    esi,0x10
c0015d57:	75 10                	jne    c0015d69 <Computer::handleNMI()+0x2f>
c0015d59:	f6 c3 40             	test   bl,0x40
c0015d5c:	75 20                	jne    c0015d7e <Computer::handleNMI()+0x44>
c0015d5e:	80 e3 80             	and    bl,0x80
c0015d61:	75 30                	jne    c0015d93 <Computer::handleNMI()+0x59>
c0015d63:	83 c4 04             	add    esp,0x4
c0015d66:	5b                   	pop    ebx
c0015d67:	5e                   	pop    esi
c0015d68:	c3                   	ret    
c0015d69:	83 ec 0c             	sub    esp,0xc
c0015d6c:	68 be 16 03 c0       	push   0xc00316be
c0015d71:	e8 08 aa 00 00       	call   c002077e <KePanic(char const*)>
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	f6 c3 40             	test   bl,0x40
c0015d7c:	74 e0                	je     c0015d5e <Computer::handleNMI()+0x24>
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	68 cb 16 03 c0       	push   0xc00316cb
c0015d86:	e8 f3 a9 00 00       	call   c002077e <KePanic(char const*)>
c0015d8b:	83 c4 10             	add    esp,0x10
c0015d8e:	80 e3 80             	and    bl,0x80
c0015d91:	74 d0                	je     c0015d63 <Computer::handleNMI()+0x29>
c0015d93:	c7 44 24 10 d5 16 03 c0 	mov    DWORD PTR [esp+0x10],0xc00316d5
c0015d9b:	83 c4 04             	add    esp,0x4
c0015d9e:	5b                   	pop    ebx
c0015d9f:	5e                   	pop    esi
c0015da0:	e9 d9 a9 00 00       	jmp    c002077e <KePanic(char const*)>
c0015da5:	90                   	nop

c0015da6 <GDTEntry::setBase(unsigned int)>:
c0015da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015daa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dae:	89 c1                	mov    ecx,eax
c0015db0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015db4:	c1 e9 10             	shr    ecx,0x10
c0015db7:	c1 e8 18             	shr    eax,0x18
c0015dba:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015dbd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015dc0:	c3                   	ret    
c0015dc1:	90                   	nop

c0015dc2 <GDTEntry::setLimit(unsigned int)>:
c0015dc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015dc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dca:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015dcd:	66 89 01             	mov    WORD PTR [ecx],ax
c0015dd0:	83 e2 f0             	and    edx,0xfffffff0
c0015dd3:	c1 e8 10             	shr    eax,0x10
c0015dd6:	83 e0 0f             	and    eax,0xf
c0015dd9:	09 d0                	or     eax,edx
c0015ddb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015dde:	c3                   	ret    
c0015ddf:	90                   	nop

c0015de0 <GDT::GDT()>:
c0015de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015de4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015df4:	90                   	nop
c0015df5:	c3                   	ret    

c0015df6 <GDT::addEntry(GDTEntry)>:
c0015df6:	53                   	push   ebx
c0015df7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015dfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015dff:	8b 02                	mov    eax,DWORD PTR [edx]
c0015e01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e05:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015e09:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015e0d:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e10:	c1 e0 03             	shl    eax,0x3
c0015e13:	89 0a                	mov    DWORD PTR [edx],ecx
c0015e15:	5b                   	pop    ebx
c0015e16:	c3                   	ret    
c0015e17:	90                   	nop

c0015e18 <GDT::getNumberOfEntries()>:
c0015e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e1e:	c3                   	ret    
c0015e1f:	90                   	nop

c0015e20 <GDT::flush()>:
c0015e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e24:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e26:	83 c0 04             	add    eax,0x4
c0015e29:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015e30:	a3 c6 b9 03 c0       	mov    ds:0xc003b9c6,eax
c0015e35:	66 89 15 c4 b9 03 c0 	mov    WORD PTR ds:0xc003b9c4,dx
c0015e3c:	e9 19 a5 fe ff       	jmp    c000035a <loadGDT>
c0015e41:	90                   	nop

c0015e42 <GDT::setup()>:
c0015e42:	57                   	push   edi
c0015e43:	56                   	push   esi
c0015e44:	53                   	push   ebx
c0015e45:	83 ec 30             	sub    esp,0x30
c0015e48:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015e4c:	6a 00                	push   0x0
c0015e4e:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015e52:	56                   	push   esi
c0015e53:	e8 4e ff ff ff       	call   c0015da6 <GDTEntry::setBase(unsigned int)>
c0015e58:	6a 00                	push   0x0
c0015e5a:	56                   	push   esi
c0015e5b:	e8 62 ff ff ff       	call   c0015dc2 <GDTEntry::setLimit(unsigned int)>
c0015e60:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015e68:	6a 00                	push   0x0
c0015e6a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e6e:	56                   	push   esi
c0015e6f:	e8 32 ff ff ff       	call   c0015da6 <GDTEntry::setBase(unsigned int)>
c0015e74:	68 ff ff ff 00       	push   0xffffff
c0015e79:	56                   	push   esi
c0015e7a:	e8 43 ff ff ff       	call   c0015dc2 <GDTEntry::setLimit(unsigned int)>
c0015e7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015e87:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015e8b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015e8f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015e94:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015e99:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015e9d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015ea1:	89 f8                	mov    eax,edi
c0015ea3:	89 fa                	mov    edx,edi
c0015ea5:	80 e4 f7             	and    ah,0xf7
c0015ea8:	80 ce 60             	or     dh,0x60
c0015eab:	89 c7                	mov    edi,eax
c0015ead:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015eb1:	80 cc 60             	or     ah,0x60
c0015eb4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015eb8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ebc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015ec0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ec4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015ec8:	83 c4 20             	add    esp,0x20
c0015ecb:	6a 00                	push   0x0
c0015ecd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015ed1:	50                   	push   eax
c0015ed2:	e8 cf fe ff ff       	call   c0015da6 <GDTEntry::setBase(unsigned int)>
c0015ed7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015edb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015edf:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015ee3:	83 e0 3f             	and    eax,0x3f
c0015ee6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015eea:	6a 00                	push   0x0
c0015eec:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015ef0:	50                   	push   eax
c0015ef1:	e8 b0 fe ff ff       	call   c0015da6 <GDTEntry::setBase(unsigned int)>
c0015ef6:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015efa:	83 e0 3f             	and    eax,0x3f
c0015efd:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015f01:	83 c4 0c             	add    esp,0xc
c0015f04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f0c:	53                   	push   ebx
c0015f0d:	e8 e4 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f12:	83 c4 0c             	add    esp,0xc
c0015f15:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f1d:	53                   	push   ebx
c0015f1e:	e8 d3 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f23:	83 c4 0c             	add    esp,0xc
c0015f26:	57                   	push   edi
c0015f27:	56                   	push   esi
c0015f28:	53                   	push   ebx
c0015f29:	e8 c8 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f35:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f39:	53                   	push   ebx
c0015f3a:	e8 b7 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f3f:	83 c4 0c             	add    esp,0xc
c0015f42:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f4a:	53                   	push   ebx
c0015f4b:	e8 a6 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f50:	83 c4 0c             	add    esp,0xc
c0015f53:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f5b:	53                   	push   ebx
c0015f5c:	e8 95 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f61:	83 c4 0c             	add    esp,0xc
c0015f64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f6c:	53                   	push   ebx
c0015f6d:	e8 84 fe ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0015f72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f75:	e8 a6 fe ff ff       	call   c0015e20 <GDT::flush()>
c0015f7a:	83 c4 40             	add    esp,0x40
c0015f7d:	5b                   	pop    ebx
c0015f7e:	5e                   	pop    esi
c0015f7f:	5f                   	pop    edi
c0015f80:	c3                   	ret    

c0015f81 <idleFunction(void*)>:
c0015f81:	83 ec 0c             	sub    esp,0xc
c0015f84:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0015f89:	48                   	dec    eax
c0015f8a:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0015f8f:	75 01                	jne    c0015f92 <idleFunction(void*)+0x11>
c0015f91:	fb                   	sti    
c0015f92:	e8 e6 11 01 00       	call   c002717d <HalSystemIdle()>
c0015f97:	e8 b6 8f 01 00       	call   c002ef52 <idleCommon()>
c0015f9c:	eb f4                	jmp    c0015f92 <idleFunction(void*)+0x11>
c0015f9e:	66 90                	xchg   ax,ax

c0015fa0 <IDTEntry::IDTEntry(bool)>:
c0015fa0:	53                   	push   ebx
c0015fa1:	83 ec 04             	sub    esp,0x4
c0015fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa8:	88 04 24             	mov    BYTE PTR [esp],al
c0015fab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015faf:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fb9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015fbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fc1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fc4:	83 e2 f0             	and    edx,0xfffffff0
c0015fc7:	83 ca 0e             	or     edx,0xe
c0015fca:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fd1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fd4:	83 e2 ef             	and    edx,0xffffffef
c0015fd7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fda:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015fde:	85 c0                	test   eax,eax
c0015fe0:	74 06                	je     c0015fe8 <IDTEntry::IDTEntry(bool)+0x48>
c0015fe2:	b2 03                	mov    dl,0x3
c0015fe4:	eb 06                	jmp    c0015fec <IDTEntry::IDTEntry(bool)+0x4c>
c0015fe6:	66 90                	xchg   ax,ax
c0015fe8:	b2 00                	mov    dl,0x0
c0015fea:	66 90                	xchg   ax,ax
c0015fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ff0:	83 e2 03             	and    edx,0x3
c0015ff3:	89 d3                	mov    ebx,edx
c0015ff5:	c1 e3 05             	shl    ebx,0x5
c0015ff8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015ffb:	83 e2 9f             	and    edx,0xffffff9f
c0015ffe:	88 d1                	mov    cl,dl
c0016000:	88 da                	mov    dl,bl
c0016002:	09 ca                	or     edx,ecx
c0016004:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001600b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c001600e:	83 ca 80             	or     edx,0xffffff80
c0016011:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016014:	90                   	nop
c0016015:	83 c4 04             	add    esp,0x4
c0016018:	5b                   	pop    ebx
c0016019:	c3                   	ret    

c001601a <IDTEntry::setOffset(unsigned int)>:
c001601a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001601e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016022:	66 89 02             	mov    WORD PTR [edx],ax
c0016025:	c1 e8 10             	shr    eax,0x10
c0016028:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001602c:	c3                   	ret    
c001602d:	90                   	nop
c001602e:	66 90                	xchg   ax,ax

c0016030 <IDT::IDT()>:
c0016030:	90                   	nop
c0016031:	c3                   	ret    

c0016032 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0016032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016036:	83 c0 30             	add    eax,0x30
c0016039:	c3                   	ret    

c001603a <IDT::addEntry(IDTEntry, int)>:
c001603a:	53                   	push   ebx
c001603b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001603f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016043:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016047:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001604b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c001604e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0016052:	5b                   	pop    ebx
c0016053:	c3                   	ret    

c0016054 <IDT::addEntry(int, void (*)(), bool)>:
c0016054:	53                   	push   ebx
c0016055:	83 ec 10             	sub    esp,0x10
c0016058:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c001605d:	50                   	push   eax
c001605e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016062:	53                   	push   ebx
c0016063:	e8 38 ff ff ff       	call   c0015fa0 <IDTEntry::IDTEntry(bool)>
c0016068:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001606c:	53                   	push   ebx
c001606d:	e8 a8 ff ff ff       	call   c001601a <IDTEntry::setOffset(unsigned int)>
c0016072:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016076:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001607a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001607e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016082:	e8 b3 ff ff ff       	call   c001603a <IDT::addEntry(IDTEntry, int)>
c0016087:	83 c4 30             	add    esp,0x30
c001608a:	5b                   	pop    ebx
c001608b:	c3                   	ret    

c001608c <IDT::flush()>:
c001608c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016090:	66 c7 05 cc b9 03 c0 ff 07 	mov    WORD PTR ds:0xc003b9cc,0x7ff
c0016099:	a3 ce b9 03 c0       	mov    ds:0xc003b9ce,eax
c001609e:	0f 01 1d cc b9 03 c0 	lidtd  ds:0xc003b9cc
c00160a5:	c3                   	ret    

c00160a6 <IDT::setup()>:
c00160a6:	57                   	push   edi
c00160a7:	56                   	push   esi
c00160a8:	53                   	push   ebx
c00160a9:	83 ec 10             	sub    esp,0x10
c00160ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160b0:	6a 00                	push   0x0
c00160b2:	68 50 e6 02 c0       	push   0xc002e650
c00160b7:	6a 00                	push   0x0
c00160b9:	53                   	push   ebx
c00160ba:	e8 95 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00160bf:	6a 00                	push   0x0
c00160c1:	68 60 e6 02 c0       	push   0xc002e660
c00160c6:	6a 01                	push   0x1
c00160c8:	53                   	push   ebx
c00160c9:	e8 86 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00160ce:	83 c4 20             	add    esp,0x20
c00160d1:	6a 00                	push   0x0
c00160d3:	68 6a e6 02 c0       	push   0xc002e66a
c00160d8:	6a 02                	push   0x2
c00160da:	53                   	push   ebx
c00160db:	e8 74 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00160e0:	6a 00                	push   0x0
c00160e2:	68 74 e6 02 c0       	push   0xc002e674
c00160e7:	6a 03                	push   0x3
c00160e9:	53                   	push   ebx
c00160ea:	e8 65 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00160ef:	83 c4 20             	add    esp,0x20
c00160f2:	6a 00                	push   0x0
c00160f4:	68 7e e6 02 c0       	push   0xc002e67e
c00160f9:	6a 04                	push   0x4
c00160fb:	53                   	push   ebx
c00160fc:	e8 53 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016101:	6a 00                	push   0x0
c0016103:	68 88 e6 02 c0       	push   0xc002e688
c0016108:	6a 05                	push   0x5
c001610a:	53                   	push   ebx
c001610b:	e8 44 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016110:	83 c4 20             	add    esp,0x20
c0016113:	6a 00                	push   0x0
c0016115:	68 92 e6 02 c0       	push   0xc002e692
c001611a:	6a 06                	push   0x6
c001611c:	53                   	push   ebx
c001611d:	e8 32 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016122:	6a 00                	push   0x0
c0016124:	68 9c e6 02 c0       	push   0xc002e69c
c0016129:	6a 07                	push   0x7
c001612b:	53                   	push   ebx
c001612c:	e8 23 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016131:	83 c4 20             	add    esp,0x20
c0016134:	6a 00                	push   0x0
c0016136:	68 a6 e6 02 c0       	push   0xc002e6a6
c001613b:	6a 08                	push   0x8
c001613d:	53                   	push   ebx
c001613e:	e8 11 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016143:	6a 00                	push   0x0
c0016145:	68 ae e6 02 c0       	push   0xc002e6ae
c001614a:	6a 09                	push   0x9
c001614c:	53                   	push   ebx
c001614d:	e8 02 ff ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016152:	83 c4 20             	add    esp,0x20
c0016155:	6a 00                	push   0x0
c0016157:	68 b8 e6 02 c0       	push   0xc002e6b8
c001615c:	6a 0a                	push   0xa
c001615e:	53                   	push   ebx
c001615f:	e8 f0 fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016164:	6a 00                	push   0x0
c0016166:	68 c0 e6 02 c0       	push   0xc002e6c0
c001616b:	6a 0b                	push   0xb
c001616d:	53                   	push   ebx
c001616e:	e8 e1 fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016173:	83 c4 20             	add    esp,0x20
c0016176:	6a 00                	push   0x0
c0016178:	68 c8 e6 02 c0       	push   0xc002e6c8
c001617d:	6a 0c                	push   0xc
c001617f:	53                   	push   ebx
c0016180:	e8 cf fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016185:	6a 00                	push   0x0
c0016187:	68 d0 e6 02 c0       	push   0xc002e6d0
c001618c:	6a 0d                	push   0xd
c001618e:	53                   	push   ebx
c001618f:	e8 c0 fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016194:	83 c4 20             	add    esp,0x20
c0016197:	6a 00                	push   0x0
c0016199:	68 ea e6 02 c0       	push   0xc002e6ea
c001619e:	6a 0e                	push   0xe
c00161a0:	53                   	push   ebx
c00161a1:	e8 ae fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00161a6:	6a 00                	push   0x0
c00161a8:	68 f2 e6 02 c0       	push   0xc002e6f2
c00161ad:	6a 0f                	push   0xf
c00161af:	53                   	push   ebx
c00161b0:	e8 9f fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00161b5:	83 c4 20             	add    esp,0x20
c00161b8:	6a 00                	push   0x0
c00161ba:	68 fc e6 02 c0       	push   0xc002e6fc
c00161bf:	6a 10                	push   0x10
c00161c1:	53                   	push   ebx
c00161c2:	e8 8d fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00161c7:	6a 00                	push   0x0
c00161c9:	68 06 e7 02 c0       	push   0xc002e706
c00161ce:	6a 11                	push   0x11
c00161d0:	53                   	push   ebx
c00161d1:	e8 7e fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00161d6:	83 c4 20             	add    esp,0x20
c00161d9:	6a 00                	push   0x0
c00161db:	68 10 e7 02 c0       	push   0xc002e710
c00161e0:	6a 12                	push   0x12
c00161e2:	53                   	push   ebx
c00161e3:	e8 6c fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00161e8:	6a 01                	push   0x1
c00161ea:	68 aa e7 02 c0       	push   0xc002e7aa
c00161ef:	6a 60                	push   0x60
c00161f1:	53                   	push   ebx
c00161f2:	e8 5d fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00161f7:	83 c4 20             	add    esp,0x20
c00161fa:	6a 00                	push   0x0
c00161fc:	68 b1 e7 02 c0       	push   0xc002e7b1
c0016201:	6a 20                	push   0x20
c0016203:	53                   	push   ebx
c0016204:	e8 4b fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016209:	6a 00                	push   0x0
c001620b:	68 9c e7 02 c0       	push   0xc002e79c
c0016210:	6a 21                	push   0x21
c0016212:	53                   	push   ebx
c0016213:	e8 3c fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016218:	83 c4 20             	add    esp,0x20
c001621b:	6a 00                	push   0x0
c001621d:	68 a3 e7 02 c0       	push   0xc002e7a3
c0016222:	6a 22                	push   0x22
c0016224:	53                   	push   ebx
c0016225:	e8 2a fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001622a:	6a 00                	push   0x0
c001622c:	68 1a e7 02 c0       	push   0xc002e71a
c0016231:	6a 23                	push   0x23
c0016233:	53                   	push   ebx
c0016234:	e8 1b fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016239:	83 c4 20             	add    esp,0x20
c001623c:	6a 00                	push   0x0
c001623e:	68 24 e7 02 c0       	push   0xc002e724
c0016243:	6a 24                	push   0x24
c0016245:	53                   	push   ebx
c0016246:	e8 09 fe ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001624b:	6a 00                	push   0x0
c001624d:	68 2e e7 02 c0       	push   0xc002e72e
c0016252:	6a 25                	push   0x25
c0016254:	53                   	push   ebx
c0016255:	e8 fa fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001625a:	83 c4 20             	add    esp,0x20
c001625d:	6a 00                	push   0x0
c001625f:	68 38 e7 02 c0       	push   0xc002e738
c0016264:	6a 26                	push   0x26
c0016266:	53                   	push   ebx
c0016267:	e8 e8 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001626c:	6a 00                	push   0x0
c001626e:	68 42 e7 02 c0       	push   0xc002e742
c0016273:	6a 27                	push   0x27
c0016275:	53                   	push   ebx
c0016276:	e8 d9 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001627b:	83 c4 20             	add    esp,0x20
c001627e:	6a 00                	push   0x0
c0016280:	68 4c e7 02 c0       	push   0xc002e74c
c0016285:	6a 28                	push   0x28
c0016287:	53                   	push   ebx
c0016288:	e8 c7 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001628d:	6a 00                	push   0x0
c001628f:	68 56 e7 02 c0       	push   0xc002e756
c0016294:	6a 29                	push   0x29
c0016296:	53                   	push   ebx
c0016297:	e8 b8 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c001629c:	83 c4 20             	add    esp,0x20
c001629f:	6a 00                	push   0x0
c00162a1:	68 60 e7 02 c0       	push   0xc002e760
c00162a6:	6a 2a                	push   0x2a
c00162a8:	53                   	push   ebx
c00162a9:	e8 a6 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00162ae:	6a 00                	push   0x0
c00162b0:	68 6a e7 02 c0       	push   0xc002e76a
c00162b5:	6a 2b                	push   0x2b
c00162b7:	53                   	push   ebx
c00162b8:	e8 97 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00162bd:	83 c4 20             	add    esp,0x20
c00162c0:	6a 00                	push   0x0
c00162c2:	68 74 e7 02 c0       	push   0xc002e774
c00162c7:	6a 2c                	push   0x2c
c00162c9:	53                   	push   ebx
c00162ca:	e8 85 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00162cf:	6a 00                	push   0x0
c00162d1:	68 7e e7 02 c0       	push   0xc002e77e
c00162d6:	6a 2d                	push   0x2d
c00162d8:	53                   	push   ebx
c00162d9:	e8 76 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00162de:	83 c4 20             	add    esp,0x20
c00162e1:	6a 00                	push   0x0
c00162e3:	68 88 e7 02 c0       	push   0xc002e788
c00162e8:	6a 2e                	push   0x2e
c00162ea:	53                   	push   ebx
c00162eb:	e8 64 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00162f0:	6a 00                	push   0x0
c00162f2:	68 92 e7 02 c0       	push   0xc002e792
c00162f7:	6a 2f                	push   0x2f
c00162f9:	53                   	push   ebx
c00162fa:	e8 55 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c00162ff:	83 c4 20             	add    esp,0x20
c0016302:	6a 00                	push   0x0
c0016304:	68 ec e8 02 c0       	push   0xc002e8ec
c0016309:	6a 30                	push   0x30
c001630b:	53                   	push   ebx
c001630c:	e8 43 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016311:	6a 00                	push   0x0
c0016313:	68 f6 e8 02 c0       	push   0xc002e8f6
c0016318:	6a 31                	push   0x31
c001631a:	53                   	push   ebx
c001631b:	e8 34 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016320:	83 c4 20             	add    esp,0x20
c0016323:	6a 00                	push   0x0
c0016325:	68 00 e9 02 c0       	push   0xc002e900
c001632a:	6a 32                	push   0x32
c001632c:	53                   	push   ebx
c001632d:	e8 22 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016332:	6a 00                	push   0x0
c0016334:	68 0a e9 02 c0       	push   0xc002e90a
c0016339:	6a 33                	push   0x33
c001633b:	53                   	push   ebx
c001633c:	e8 13 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016341:	83 c4 20             	add    esp,0x20
c0016344:	6a 00                	push   0x0
c0016346:	68 14 e9 02 c0       	push   0xc002e914
c001634b:	6a 34                	push   0x34
c001634d:	53                   	push   ebx
c001634e:	e8 01 fd ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016353:	6a 00                	push   0x0
c0016355:	68 1e e9 02 c0       	push   0xc002e91e
c001635a:	6a 35                	push   0x35
c001635c:	53                   	push   ebx
c001635d:	e8 f2 fc ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016362:	83 c4 20             	add    esp,0x20
c0016365:	6a 00                	push   0x0
c0016367:	68 28 e9 02 c0       	push   0xc002e928
c001636c:	6a 36                	push   0x36
c001636e:	53                   	push   ebx
c001636f:	e8 e0 fc ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016374:	6a 00                	push   0x0
c0016376:	68 32 e9 02 c0       	push   0xc002e932
c001637b:	6a 37                	push   0x37
c001637d:	53                   	push   ebx
c001637e:	e8 d1 fc ff ff       	call   c0016054 <IDT::addEntry(int, void (*)(), bool)>
c0016383:	83 c4 1c             	add    esp,0x1c
c0016386:	6a 03                	push   0x3
c0016388:	6a 02                	push   0x2
c001638a:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0016390:	e8 8f 25 00 00       	call   c0018924 <VAS::allocatePages(int, int)>
c0016395:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001639c:	89 c6                	mov    esi,eax
c001639e:	e8 14 02 00 00       	call   c00165b7 <malloc>
c00163a3:	81 c6 00 20 00 00    	add    esi,0x2000
c00163a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00163ac:	89 c7                	mov    edi,eax
c00163ae:	e8 91 16 00 00       	call   c0017a44 <TSS::TSS()>
c00163b3:	83 c4 0c             	add    esp,0xc
c00163b6:	68 a6 e6 02 c0       	push   0xc002e6a6
c00163bb:	56                   	push   esi
c00163bc:	57                   	push   edi
c00163bd:	e8 c6 16 00 00       	call   c0017a88 <TSS::setup(unsigned long, unsigned long)>
c00163c2:	89 c6                	mov    esi,eax
c00163c4:	58                   	pop    eax
c00163c5:	5a                   	pop    edx
c00163c6:	6a 00                	push   0x0
c00163c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00163cc:	50                   	push   eax
c00163cd:	e8 ce fb ff ff       	call   c0015fa0 <IDTEntry::IDTEntry(bool)>
c00163d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163d6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00163db:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00163e2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00163e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163ec:	80 ce 05             	or     dh,0x5
c00163ef:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00163f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00163f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163fa:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00163fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016400:	e8 87 fc ff ff       	call   c001608c <IDT::flush()>
c0016405:	83 c4 20             	add    esp,0x20
c0016408:	5b                   	pop    ebx
c0016409:	5e                   	pop    esi
c001640a:	5f                   	pop    edi
c001640b:	c3                   	ret    

c001640c <sbrk>:
c001640c:	55                   	push   ebp
c001640d:	57                   	push   edi
c001640e:	56                   	push   esi
c001640f:	53                   	push   ebx
c0016410:	83 ec 1c             	sub    esp,0x1c
c0016413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016417:	85 c0                	test   eax,eax
c0016419:	74 61                	je     c001647c <sbrk+0x70>
c001641b:	78 66                	js     c0016483 <sbrk+0x77>
c001641d:	8b 15 c4 43 03 c0    	mov    edx,DWORD PTR ds:0xc00343c4
c0016423:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016427:	05 ff 0f 00 00       	add    eax,0xfff
c001642c:	89 c5                	mov    ebp,eax
c001642e:	78 6b                	js     c001649b <sbrk+0x8f>
c0016430:	c1 fd 0c             	sar    ebp,0xc
c0016433:	bb 00 00 00 00       	mov    ebx,0x0
c0016438:	8b 35 b0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bab0
c001643e:	8b 3d c4 43 03 c0    	mov    edi,DWORD PTR ds:0xc00343c4
c0016444:	e8 77 04 00 00       	call   c00168c0 <Phys::allocatePage()>
c0016449:	68 01 04 00 00       	push   0x401
c001644e:	57                   	push   edi
c001644f:	50                   	push   eax
c0016450:	56                   	push   esi
c0016451:	e8 ca 23 00 00       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016456:	81 05 c4 43 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc00343c4,0x1000
c0016460:	83 c3 01             	add    ebx,0x1
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	39 dd                	cmp    ebp,ebx
c0016468:	75 ce                	jne    c0016438 <sbrk+0x2c>
c001646a:	0f 20 d8             	mov    eax,cr3
c001646d:	0f 22 d8             	mov    cr3,eax
c0016470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016474:	83 c4 1c             	add    esp,0x1c
c0016477:	5b                   	pop    ebx
c0016478:	5e                   	pop    esi
c0016479:	5f                   	pop    edi
c001647a:	5d                   	pop    ebp
c001647b:	c3                   	ret    
c001647c:	a1 c4 43 03 c0       	mov    eax,ds:0xc00343c4
c0016481:	eb f1                	jmp    c0016474 <sbrk+0x68>
c0016483:	83 ec 08             	sub    esp,0x8
c0016486:	50                   	push   eax
c0016487:	68 78 17 03 c0       	push   0xc0031778
c001648c:	e8 b4 2f 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0016491:	83 c4 10             	add    esp,0x10
c0016494:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016499:	eb d9                	jmp    c0016474 <sbrk+0x68>
c001649b:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00164a1:	eb 8d                	jmp    c0016430 <sbrk+0x24>

c00164a3 <sbrk_thunk>:
c00164a3:	83 ec 0c             	sub    esp,0xc
c00164a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164aa:	3d ff bf 00 00       	cmp    eax,0xbfff
c00164af:	7f 10                	jg     c00164c1 <sbrk_thunk+0x1e>
c00164b1:	83 ec 0c             	sub    esp,0xc
c00164b4:	50                   	push   eax
c00164b5:	e8 52 ff ff ff       	call   c001640c <sbrk>
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	83 c4 0c             	add    esp,0xc
c00164c0:	c3                   	ret    
c00164c1:	83 ec 08             	sub    esp,0x8
c00164c4:	50                   	push   eax
c00164c5:	68 a8 17 03 c0       	push   0xc00317a8
c00164ca:	e8 76 2f 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164d7:	eb e4                	jmp    c00164bd <sbrk_thunk+0x1a>

c00164d9 <mmap>:
c00164d9:	55                   	push   ebp
c00164da:	57                   	push   edi
c00164db:	56                   	push   esi
c00164dc:	53                   	push   ebx
c00164dd:	83 ec 18             	sub    esp,0x18
c00164e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164e4:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00164ea:	89 fb                	mov    ebx,edi
c00164ec:	c1 eb 0c             	shr    ebx,0xc
c00164ef:	53                   	push   ebx
c00164f0:	e8 18 1c 00 00       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c00164f5:	89 c5                	mov    ebp,eax
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	85 db                	test   ebx,ebx
c00164fc:	7e 2f                	jle    c001652d <mmap+0x54>
c00164fe:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0016504:	01 c7                	add    edi,eax
c0016506:	89 c3                	mov    ebx,eax
c0016508:	8b 35 b0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bab0
c001650e:	e8 ad 03 00 00       	call   c00168c0 <Phys::allocatePage()>
c0016513:	68 01 04 00 00       	push   0x401
c0016518:	53                   	push   ebx
c0016519:	50                   	push   eax
c001651a:	56                   	push   esi
c001651b:	e8 00 23 00 00       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016520:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016526:	83 c4 10             	add    esp,0x10
c0016529:	39 fb                	cmp    ebx,edi
c001652b:	75 db                	jne    c0016508 <mmap+0x2f>
c001652d:	89 e8                	mov    eax,ebp
c001652f:	83 c4 0c             	add    esp,0xc
c0016532:	5b                   	pop    ebx
c0016533:	5e                   	pop    esi
c0016534:	5f                   	pop    edi
c0016535:	5d                   	pop    ebp
c0016536:	c3                   	ret    

c0016537 <munmap>:
c0016537:	83 ec 18             	sub    esp,0x18
c001653a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001653e:	e8 e8 1e 00 00       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c0016543:	b8 00 00 00 00       	mov    eax,0x0
c0016548:	83 c4 1c             	add    esp,0x1c
c001654b:	c3                   	ret    

c001654c <liballoc_lock()>:
c001654c:	fa                   	cli    
c001654d:	83 05 d0 11 04 c0 01 	add    DWORD PTR ds:0xc00411d0,0x1
c0016554:	b8 00 00 00 00       	mov    eax,0x0
c0016559:	c3                   	ret    

c001655a <liballoc_unlock()>:
c001655a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001655f:	83 e8 01             	sub    eax,0x1
c0016562:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016567:	75 01                	jne    c001656a <liballoc_unlock()+0x10>
c0016569:	fb                   	sti    
c001656a:	b8 00 00 00 00       	mov    eax,0x0
c001656f:	c3                   	ret    

c0016570 <liballoc_alloc(int)>:
c0016570:	83 ec 10             	sub    esp,0x10
c0016573:	6a 01                	push   0x1
c0016575:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016579:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c001657f:	e8 a0 23 00 00       	call   c0018924 <VAS::allocatePages(int, int)>
c0016584:	83 c4 1c             	add    esp,0x1c
c0016587:	c3                   	ret    

c0016588 <liballoc_free(void*, int)>:
c0016588:	83 ec 14             	sub    esp,0x14
c001658b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001658f:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0016595:	e8 ce 1f 00 00       	call   c0018568 <VAS::freeAllocatedPages(unsigned long)>
c001659a:	b8 00 00 00 00       	mov    eax,0x0
c001659f:	83 c4 1c             	add    esp,0x1c
c00165a2:	c3                   	ret    

c00165a3 <realloc>:
c00165a3:	83 ec 14             	sub    esp,0x14
c00165a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ae:	e8 5a b3 fe ff       	call   c000190d <dlrealloc>
c00165b3:	83 c4 1c             	add    esp,0x1c
c00165b6:	c3                   	ret    

c00165b7 <malloc>:
c00165b7:	83 ec 18             	sub    esp,0x18
c00165ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165be:	e8 0d ae fe ff       	call   c00013d0 <dlmalloc>
c00165c3:	83 c4 1c             	add    esp,0x1c
c00165c6:	c3                   	ret    

c00165c7 <free>:
c00165c7:	83 ec 18             	sub    esp,0x18
c00165ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165ce:	e8 36 a9 fe ff       	call   c0000f09 <dlfree>
c00165d3:	83 c4 1c             	add    esp,0x1c
c00165d6:	c3                   	ret    

c00165d7 <rfree>:
c00165d7:	83 ec 18             	sub    esp,0x18
c00165da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165de:	e8 26 a9 fe ff       	call   c0000f09 <dlfree>
c00165e3:	83 c4 1c             	add    esp,0x1c
c00165e6:	c3                   	ret    

c00165e7 <calloc>:
c00165e7:	56                   	push   esi
c00165e8:	53                   	push   ebx
c00165e9:	83 ec 10             	sub    esp,0x10
c00165ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00165f0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00165f5:	53                   	push   ebx
c00165f6:	e8 bc ff ff ff       	call   c00165b7 <malloc>
c00165fb:	89 c6                	mov    esi,eax
c00165fd:	83 c4 0c             	add    esp,0xc
c0016600:	53                   	push   ebx
c0016601:	6a 00                	push   0x0
c0016603:	50                   	push   eax
c0016604:	e8 e7 9e fe ff       	call   c00004f0 <memset>
c0016609:	89 f0                	mov    eax,esi
c001660b:	83 c4 14             	add    esp,0x14
c001660e:	5b                   	pop    ebx
c001660f:	5e                   	pop    esi
c0016610:	c3                   	ret    

c0016611 <KeEntryPoint>:
c0016611:	57                   	push   edi
c0016612:	bf f9 03 00 00       	mov    edi,0x3f9
c0016617:	56                   	push   esi
c0016618:	89 fa                	mov    edx,edi
c001661a:	53                   	push   ebx
c001661b:	31 f6                	xor    esi,esi
c001661d:	83 ec 2c             	sub    esp,0x2c
c0016620:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016625:	a3 d4 b9 03 c0       	mov    ds:0xc003b9d4,eax
c001662a:	89 f0                	mov    eax,esi
c001662c:	ee                   	out    dx,al
c001662d:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016632:	b0 80                	mov    al,0x80
c0016634:	89 da                	mov    edx,ebx
c0016636:	ee                   	out    dx,al
c0016637:	b1 03                	mov    cl,0x3
c0016639:	ba f8 03 00 00       	mov    edx,0x3f8
c001663e:	88 c8                	mov    al,cl
c0016640:	ee                   	out    dx,al
c0016641:	89 f0                	mov    eax,esi
c0016643:	89 fa                	mov    edx,edi
c0016645:	ee                   	out    dx,al
c0016646:	88 c8                	mov    al,cl
c0016648:	89 da                	mov    edx,ebx
c001664a:	ee                   	out    dx,al
c001664b:	b0 c7                	mov    al,0xc7
c001664d:	ba fa 03 00 00       	mov    edx,0x3fa
c0016652:	ee                   	out    dx,al
c0016653:	b0 0b                	mov    al,0xb
c0016655:	ba fc 03 00 00       	mov    edx,0x3fc
c001665a:	ee                   	out    dx,al
c001665b:	68 b7 17 03 c0       	push   0xc00317b7
c0016660:	e8 e0 2d 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0016665:	e8 51 97 00 00       	call   c001fdbb <KeDisplaySplashScreen()>
c001666a:	a1 24 05 00 00       	mov    eax,ds:0x524
c001666f:	05 ff 0f 00 00       	add    eax,0xfff
c0016674:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016679:	89 04 24             	mov    DWORD PTR [esp],eax
c001667c:	e8 ad 03 00 00       	call   c0016a2e <Phys::physicalMemorySetup(unsigned int)>
c0016681:	e8 65 1c 00 00       	call   c00182eb <Virt::virtualMemorySetup()>
c0016686:	e8 7a 96 00 00       	call   c001fd05 <KeInitialiseAtexit()>
c001668b:	58                   	pop    eax
c001668c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016690:	53                   	push   ebx
c0016691:	e8 52 1f 00 00       	call   c00185e8 <VAS::VAS()>
c0016696:	89 1d b0 ba 03 c0    	mov    DWORD PTR ds:0xc003bab0,ebx
c001669c:	e8 49 88 01 00       	call   c002eeea <_init>
c00166a1:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00166a8:	e8 0a ff ff ff       	call   c00165b7 <malloc>
c00166ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00166b0:	89 c6                	mov    esi,eax
c00166b2:	e8 b3 f1 ff ff       	call   c001586a <Computer::Computer()>
c00166b7:	53                   	push   ebx
c00166b8:	89 35 bc b9 03 c0    	mov    DWORD PTR ds:0xc003b9bc,esi
c00166be:	6a 00                	push   0x0
c00166c0:	6a 00                	push   0x0
c00166c2:	56                   	push   esi
c00166c3:	e8 6a f5 ff ff       	call   c0015c32 <Computer::open(int, int, void*)>
c00166c8:	83 c4 14             	add    esp,0x14
c00166cb:	53                   	push   ebx
c00166cc:	e8 e1 1f 00 00       	call   c00186b2 <VAS::~VAS()>
c00166d1:	83 c4 30             	add    esp,0x30
c00166d4:	5b                   	pop    ebx
c00166d5:	5e                   	pop    esi
c00166d6:	5f                   	pop    edi
c00166d7:	c3                   	ret    

c00166d8 <Phys::allocateDMA(unsigned long)>:
c00166d8:	55                   	push   ebp
c00166d9:	31 ed                	xor    ebp,ebp
c00166db:	57                   	push   edi
c00166dc:	56                   	push   esi
c00166dd:	53                   	push   ebx
c00166de:	31 db                	xor    ebx,ebx
c00166e0:	83 ec 1c             	sub    esp,0x1c
c00166e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00166ef:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00166f5:	31 c0                	xor    eax,eax
c00166f7:	c1 ef 0c             	shr    edi,0xc
c00166fa:	eb 1b                	jmp    c0016717 <Phys::allocateDMA(unsigned long)+0x3f>
c00166fc:	85 c0                	test   eax,eax
c00166fe:	75 06                	jne    c0016706 <Phys::allocateDMA(unsigned long)+0x2e>
c0016700:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016704:	89 dd                	mov    ebp,ebx
c0016706:	8d 70 01             	lea    esi,[eax+0x1]
c0016709:	39 f7                	cmp    edi,esi
c001670b:	74 37                	je     c0016744 <Phys::allocateDMA(unsigned long)+0x6c>
c001670d:	89 f0                	mov    eax,esi
c001670f:	83 c3 01             	add    ebx,0x1
c0016712:	83 fb 0f             	cmp    ebx,0xf
c0016715:	7f 13                	jg     c001672a <Phys::allocateDMA(unsigned long)+0x52>
c0016717:	80 bb f0 b9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc4610],0x0
c001671e:	74 dc                	je     c00166fc <Phys::allocateDMA(unsigned long)+0x24>
c0016720:	31 c0                	xor    eax,eax
c0016722:	83 c3 01             	add    ebx,0x1
c0016725:	83 fb 0f             	cmp    ebx,0xf
c0016728:	7e ed                	jle    c0016717 <Phys::allocateDMA(unsigned long)+0x3f>
c001672a:	83 ec 0c             	sub    esp,0xc
c001672d:	68 d0 17 03 c0       	push   0xc00317d0
c0016732:	e8 47 a0 00 00       	call   c002077e <KePanic(char const*)>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	31 c0                	xor    eax,eax
c001673c:	83 c4 1c             	add    esp,0x1c
c001673f:	5b                   	pop    ebx
c0016740:	5e                   	pop    esi
c0016741:	5f                   	pop    edi
c0016742:	5d                   	pop    ebp
c0016743:	c3                   	ret    
c0016744:	89 e9                	mov    ecx,ebp
c0016746:	c1 f9 04             	sar    ecx,0x4
c0016749:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001674d:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016751:	89 ca                	mov    edx,ecx
c0016753:	83 ea 01             	sub    edx,0x1
c0016756:	79 03                	jns    c001675b <Phys::allocateDMA(unsigned long)+0x83>
c0016758:	8d 51 0e             	lea    edx,[ecx+0xe]
c001675b:	c1 fa 04             	sar    edx,0x4
c001675e:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0016762:	74 08                	je     c001676c <Phys::allocateDMA(unsigned long)+0x94>
c0016764:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016768:	31 c0                	xor    eax,eax
c001676a:	eb b6                	jmp    c0016722 <Phys::allocateDMA(unsigned long)+0x4a>
c001676c:	85 f6                	test   esi,esi
c001676e:	74 17                	je     c0016787 <Phys::allocateDMA(unsigned long)+0xaf>
c0016770:	8d 95 f0 b9 03 c0    	lea    edx,[ebp-0x3ffc4610]
c0016776:	8d 84 05 f1 b9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc460f]
c001677d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016780:	83 c2 01             	add    edx,0x1
c0016783:	39 d0                	cmp    eax,edx
c0016785:	75 f6                	jne    c001677d <Phys::allocateDMA(unsigned long)+0xa5>
c0016787:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c001678c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016790:	01 f8                	add    eax,edi
c0016792:	85 d2                	test   edx,edx
c0016794:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c0016799:	74 17                	je     c00167b2 <Phys::allocateDMA(unsigned long)+0xda>
c001679b:	83 ec 0c             	sub    esp,0xc
c001679e:	68 d0 17 03 c0       	push   0xc00317d0
c00167a3:	e8 d6 9f 00 00       	call   c002077e <KePanic(char const*)>
c00167a8:	83 c4 10             	add    esp,0x10
c00167ab:	89 f0                	mov    eax,esi
c00167ad:	e9 5d ff ff ff       	jmp    c001670f <Phys::allocateDMA(unsigned long)+0x37>
c00167b2:	c1 e5 0c             	shl    ebp,0xc
c00167b5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00167bb:	e9 7c ff ff ff       	jmp    c001673c <Phys::allocateDMA(unsigned long)+0x64>

c00167c0 <Phys::freeDMA(unsigned long, unsigned long)>:
c00167c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167c4:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00167ca:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c00167cf:	c1 ea 0c             	shr    edx,0xc
c00167d2:	29 d0                	sub    eax,edx
c00167d4:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c00167d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167dd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00167e2:	c1 e8 0c             	shr    eax,0xc
c00167e5:	85 d2                	test   edx,edx
c00167e7:	74 11                	je     c00167fa <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00167e9:	05 f0 b9 03 c0       	add    eax,0xc003b9f0
c00167ee:	01 c2                	add    edx,eax
c00167f0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00167f3:	83 c0 01             	add    eax,0x1
c00167f6:	39 d0                	cmp    eax,edx
c00167f8:	75 f6                	jne    c00167f0 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00167fa:	c3                   	ret    

c00167fb <Phys::setPageState(unsigned long, bool)>:
c00167fb:	57                   	push   edi
c00167fc:	56                   	push   esi
c00167fd:	8b 35 c8 43 03 c0    	mov    esi,DWORD PTR ds:0xc00343c8
c0016803:	53                   	push   ebx
c0016804:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001680d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016811:	0f b6 c0             	movzx  eax,al
c0016814:	89 ca                	mov    edx,ecx
c0016816:	83 e1 07             	and    ecx,0x7
c0016819:	c1 ea 03             	shr    edx,0x3
c001681c:	d3 c3                	rol    ebx,cl
c001681e:	01 d6                	add    esi,edx
c0016820:	d3 e0                	shl    eax,cl
c0016822:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016825:	21 fb                	and    ebx,edi
c0016827:	88 1e                	mov    BYTE PTR [esi],bl
c0016829:	8b 1d c8 43 03 c0    	mov    ebx,DWORD PTR ds:0xc00343c8
c001682f:	01 da                	add    edx,ebx
c0016831:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016833:	09 c8                	or     eax,ecx
c0016835:	88 02                	mov    BYTE PTR [edx],al
c0016837:	5b                   	pop    ebx
c0016838:	5e                   	pop    esi
c0016839:	5f                   	pop    edi
c001683a:	c3                   	ret    

c001683b <Phys::getPageState(unsigned long)>:
c001683b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001683f:	8b 15 c8 43 03 c0    	mov    edx,DWORD PTR ds:0xc00343c8
c0016845:	89 c8                	mov    eax,ecx
c0016847:	83 e1 07             	and    ecx,0x7
c001684a:	c1 e8 03             	shr    eax,0x3
c001684d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016851:	d3 f8                	sar    eax,cl
c0016853:	83 e0 01             	and    eax,0x1
c0016856:	c3                   	ret    

c0016857 <Phys::freePage(unsigned long)>:
c0016857:	53                   	push   ebx
c0016858:	83 ec 08             	sub    esp,0x8
c001685b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685f:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016865:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001686b:	76 41                	jbe    c00168ae <Phys::freePage(unsigned long)+0x57>
c001686d:	c1 e8 0c             	shr    eax,0xc
c0016870:	50                   	push   eax
c0016871:	89 c3                	mov    ebx,eax
c0016873:	e8 c3 ff ff ff       	call   c001683b <Phys::getPageState(unsigned long)>
c0016878:	5a                   	pop    edx
c0016879:	84 c0                	test   al,al
c001687b:	74 20                	je     c001689d <Phys::freePage(unsigned long)+0x46>
c001687d:	83 ec 08             	sub    esp,0x8
c0016880:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016885:	6a 00                	push   0x0
c0016887:	83 e8 01             	sub    eax,0x1
c001688a:	53                   	push   ebx
c001688b:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c0016890:	e8 66 ff ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	83 c4 08             	add    esp,0x8
c001689b:	5b                   	pop    ebx
c001689c:	c3                   	ret    
c001689d:	c7 44 24 10 75 18 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031875
c00168a5:	83 c4 08             	add    esp,0x8
c00168a8:	5b                   	pop    ebx
c00168a9:	e9 d0 9e 00 00       	jmp    c002077e <KePanic(char const*)>
c00168ae:	68 00 10 00 00       	push   0x1000
c00168b3:	50                   	push   eax
c00168b4:	e8 07 ff ff ff       	call   c00167c0 <Phys::freeDMA(unsigned long, unsigned long)>
c00168b9:	59                   	pop    ecx
c00168ba:	5b                   	pop    ebx
c00168bb:	83 c4 08             	add    esp,0x8
c00168be:	5b                   	pop    ebx
c00168bf:	c3                   	ret    

c00168c0 <Phys::allocatePage()>:
c00168c0:	56                   	push   esi
c00168c1:	53                   	push   ebx
c00168c2:	83 ec 14             	sub    esp,0x14
c00168c5:	8b 35 dc b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b9dc
c00168cb:	89 f3                	mov    ebx,esi
c00168cd:	eb 0a                	jmp    c00168d9 <Phys::allocatePage()+0x19>
c00168cf:	89 1d dc b9 03 c0    	mov    DWORD PTR ds:0xc003b9dc,ebx
c00168d5:	39 de                	cmp    esi,ebx
c00168d7:	74 26                	je     c00168ff <Phys::allocatePage()+0x3f>
c00168d9:	53                   	push   ebx
c00168da:	e8 5c ff ff ff       	call   c001683b <Phys::getPageState(unsigned long)>
c00168df:	5a                   	pop    edx
c00168e0:	84 c0                	test   al,al
c00168e2:	74 67                	je     c001694b <Phys::allocatePage()+0x8b>
c00168e4:	83 c3 01             	add    ebx,0x1
c00168e7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00168ed:	75 e0                	jne    c00168cf <Phys::allocatePage()+0xf>
c00168ef:	31 db                	xor    ebx,ebx
c00168f1:	c7 05 dc b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b9dc,0x0
c00168fb:	39 de                	cmp    esi,ebx
c00168fd:	75 da                	jne    c00168d9 <Phys::allocatePage()+0x19>
c00168ff:	83 ec 0c             	sub    esp,0xc
c0016902:	a0 00 ba 03 c0       	mov    al,ds:0xc003ba00
c0016907:	83 f0 01             	xor    eax,0x1
c001690a:	a2 00 ba 03 c0       	mov    ds:0xc003ba00,al
c001690f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016914:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016917:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001691d:	50                   	push   eax
c001691e:	e8 a7 27 00 00       	call   c00190ca <VAS::scanForEviction()>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	85 c0                	test   eax,eax
c0016928:	75 48                	jne    c0016972 <Phys::allocatePage()+0xb2>
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	68 f8 17 03 c0       	push   0xc00317f8
c0016932:	e8 47 9e 00 00       	call   c002077e <KePanic(char const*)>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	8b 1d dc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9dc
c0016940:	53                   	push   ebx
c0016941:	e8 f5 fe ff ff       	call   c001683b <Phys::getPageState(unsigned long)>
c0016946:	5a                   	pop    edx
c0016947:	84 c0                	test   al,al
c0016949:	75 99                	jne    c00168e4 <Phys::allocatePage()+0x24>
c001694b:	6a 01                	push   0x1
c001694d:	53                   	push   ebx
c001694e:	e8 a8 fe ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016953:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c0016959:	a1 dc b9 03 c0       	mov    eax,ds:0xc003b9dc
c001695e:	83 c2 01             	add    edx,0x1
c0016961:	59                   	pop    ecx
c0016962:	89 15 e8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e8,edx
c0016968:	c1 e0 0c             	shl    eax,0xc
c001696b:	5b                   	pop    ebx
c001696c:	83 c4 14             	add    esp,0x14
c001696f:	5b                   	pop    ebx
c0016970:	5e                   	pop    esi
c0016971:	c3                   	ret    
c0016972:	83 ec 08             	sub    esp,0x8
c0016975:	89 c2                	mov    edx,eax
c0016977:	6a 01                	push   0x1
c0016979:	c1 ea 0c             	shr    edx,0xc
c001697c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016980:	52                   	push   edx
c0016981:	e8 75 fe ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016986:	83 c4 10             	add    esp,0x10
c0016989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001698d:	eb dd                	jmp    c001696c <Phys::allocatePage()+0xac>

c001698f <Phys::allocateContiguousPages(int)>:
c001698f:	57                   	push   edi
c0016990:	56                   	push   esi
c0016991:	53                   	push   ebx
c0016992:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016996:	fa                   	cli    
c0016997:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001699c:	31 db                	xor    ebx,ebx
c001699e:	83 c0 01             	add    eax,0x1
c00169a1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00169a6:	85 db                	test   ebx,ebx
c00169a8:	75 11                	jne    c00169bb <Phys::allocateContiguousPages(int)+0x2c>
c00169aa:	e8 11 ff ff ff       	call   c00168c0 <Phys::allocatePage()>
c00169af:	83 fe 01             	cmp    esi,0x1
c00169b2:	89 c7                	mov    edi,eax
c00169b4:	74 21                	je     c00169d7 <Phys::allocateContiguousPages(int)+0x48>
c00169b6:	bb 01 00 00 00       	mov    ebx,0x1
c00169bb:	e8 00 ff ff ff       	call   c00168c0 <Phys::allocatePage()>
c00169c0:	89 da                	mov    edx,ebx
c00169c2:	c1 e2 0c             	shl    edx,0xc
c00169c5:	01 fa                	add    edx,edi
c00169c7:	39 c2                	cmp    edx,eax
c00169c9:	74 22                	je     c00169ed <Phys::allocateContiguousPages(int)+0x5e>
c00169cb:	bb 01 00 00 00       	mov    ebx,0x1
c00169d0:	89 c7                	mov    edi,eax
c00169d2:	83 fe 01             	cmp    esi,0x1
c00169d5:	75 e4                	jne    c00169bb <Phys::allocateContiguousPages(int)+0x2c>
c00169d7:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00169dc:	83 e8 01             	sub    eax,0x1
c00169df:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00169e4:	75 01                	jne    c00169e7 <Phys::allocateContiguousPages(int)+0x58>
c00169e6:	fb                   	sti    
c00169e7:	89 f8                	mov    eax,edi
c00169e9:	5b                   	pop    ebx
c00169ea:	5e                   	pop    esi
c00169eb:	5f                   	pop    edi
c00169ec:	c3                   	ret    
c00169ed:	83 c3 01             	add    ebx,0x1
c00169f0:	39 f3                	cmp    ebx,esi
c00169f2:	75 b2                	jne    c00169a6 <Phys::allocateContiguousPages(int)+0x17>
c00169f4:	eb e1                	jmp    c00169d7 <Phys::allocateContiguousPages(int)+0x48>

c00169f6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00169f6:	56                   	push   esi
c00169f7:	53                   	push   ebx
c00169f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169fc:	39 1d e0 b9 03 c0    	cmp    DWORD PTR ds:0xc003b9e0,ebx
c0016a02:	73 06                	jae    c0016a0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016a04:	89 1d e0 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e0,ebx
c0016a0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a0e:	c1 eb 0c             	shr    ebx,0xc
c0016a11:	c1 e8 0c             	shr    eax,0xc
c0016a14:	39 d8                	cmp    eax,ebx
c0016a16:	73 13                	jae    c0016a2b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016a18:	6a 00                	push   0x0
c0016a1a:	8d 70 01             	lea    esi,[eax+0x1]
c0016a1d:	50                   	push   eax
c0016a1e:	e8 d8 fd ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016a23:	5a                   	pop    edx
c0016a24:	89 f0                	mov    eax,esi
c0016a26:	59                   	pop    ecx
c0016a27:	39 f3                	cmp    ebx,esi
c0016a29:	75 ed                	jne    c0016a18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016a2b:	5b                   	pop    ebx
c0016a2c:	5e                   	pop    esi
c0016a2d:	c3                   	ret    

c0016a2e <Phys::physicalMemorySetup(unsigned int)>:
c0016a2e:	55                   	push   ebp
c0016a2f:	57                   	push   edi
c0016a30:	56                   	push   esi
c0016a31:	53                   	push   ebx
c0016a32:	83 ec 40             	sub    esp,0x40
c0016a35:	6a 10                	push   0x10
c0016a37:	6a 00                	push   0x0
c0016a39:	68 f0 b9 03 c0       	push   0xc003b9f0
c0016a3e:	e8 ad 9a fe ff       	call   c00004f0 <memset>
c0016a43:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016a47:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a4c:	05 00 10 00 00       	add    eax,0x1000
c0016a51:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016a55:	5b                   	pop    ebx
c0016a56:	31 db                	xor    ebx,ebx
c0016a58:	5e                   	pop    esi
c0016a59:	50                   	push   eax
c0016a5a:	68 8b 18 03 c0       	push   0xc003188b
c0016a5f:	e8 e1 29 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	83 ec 08             	sub    esp,0x8
c0016a6a:	6a 01                	push   0x1
c0016a6c:	53                   	push   ebx
c0016a6d:	83 c3 01             	add    ebx,0x1
c0016a70:	e8 86 fd ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016a75:	83 c4 10             	add    esp,0x10
c0016a78:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016a7e:	75 e7                	jne    c0016a67 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016a80:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016a87:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016a8e:	c1 e0 08             	shl    eax,0x8
c0016a91:	09 c2                	or     edx,eax
c0016a93:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0016a97:	0f 84 98 01 00 00    	je     c0016c35 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0016a9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016aa1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016aa9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016aae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016ab2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016aba:	eb 1c                	jmp    c0016ad8 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0016abc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016ac0:	83 c3 18             	add    ebx,0x18
c0016ac3:	83 c6 01             	add    esi,0x1
c0016ac6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ace:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016ad2:	0f 84 6d 01 00 00    	je     c0016c45 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016ad8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016adb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016ae1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ae5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016ae9:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016aeb:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016aee:	01 f0                	add    eax,esi
c0016af0:	55                   	push   ebp
c0016af1:	11 fa                	adc    edx,edi
c0016af3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016af7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016afb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016aff:	51                   	push   ecx
c0016b00:	56                   	push   esi
c0016b01:	68 28 18 03 c0       	push   0xc0031828
c0016b06:	e8 3a 29 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0016b0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	09 f8                	or     eax,edi
c0016b14:	0f 85 2b 01 00 00    	jne    c0016c45 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016b1a:	83 fd 01             	cmp    ebp,0x1
c0016b1d:	75 9d                	jne    c0016abc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b1f:	ba 00 00 08 00       	mov    edx,0x80000
c0016b24:	89 c1                	mov    ecx,eax
c0016b26:	39 f2                	cmp    edx,esi
c0016b28:	19 f9                	sbb    ecx,edi
c0016b2a:	0f 82 ab 00 00 00    	jb     c0016bdb <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b30:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016b34:	89 c1                	mov    ecx,eax
c0016b36:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016b3a:	0f 83 9b 00 00 00    	jae    c0016bdb <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b40:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016b45:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b49:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b4d:	39 fa                	cmp    edx,edi
c0016b4f:	19 e8                	sbb    eax,ebp
c0016b51:	0f 82 b0 01 00 00    	jb     c0016d07 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0016b57:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b5f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016b65:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016b6a:	83 d5 ff             	adc    ebp,0xffffffff
c0016b6d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016b71:	31 c0                	xor    eax,eax
c0016b73:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016b77:	39 fa                	cmp    edx,edi
c0016b79:	89 c1                	mov    ecx,eax
c0016b7b:	19 e9                	sbb    ecx,ebp
c0016b7d:	0f 83 39 ff ff ff    	jae    c0016abc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b83:	be 00 00 08 00       	mov    esi,0x80000
c0016b88:	83 ec 04             	sub    esp,0x4
c0016b8b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016b8f:	57                   	push   edi
c0016b90:	56                   	push   esi
c0016b91:	68 4c 18 03 c0       	push   0xc003184c
c0016b96:	e8 aa 28 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0016b9b:	5d                   	pop    ebp
c0016b9c:	58                   	pop    eax
c0016b9d:	57                   	push   edi
c0016b9e:	56                   	push   esi
c0016b9f:	e8 52 fe ff ff       	call   c00169f6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016ba4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ba8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bac:	83 c4 0c             	add    esp,0xc
c0016baf:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bb3:	8b 15 ec b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9ec
c0016bb9:	01 d0                	add    eax,edx
c0016bbb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016bc2:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016bc7:	52                   	push   edx
c0016bc8:	50                   	push   eax
c0016bc9:	68 b1 18 03 c0       	push   0xc00318b1
c0016bce:	e8 72 28 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0016bd3:	83 c4 10             	add    esp,0x10
c0016bd6:	e9 e1 fe ff ff       	jmp    c0016abc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016bdb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0016bdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016be3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016be7:	39 ea                	cmp    edx,ebp
c0016be9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016bed:	0f 82 c9 fe ff ff    	jb     c0016abc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016bf3:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016bf8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016bfc:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016c00:	0f 83 b6 fe ff ff    	jae    c0016abc <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c06:	39 ee                	cmp    esi,ebp
c0016c08:	89 f8                	mov    eax,edi
c0016c0a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016c0e:	0f 83 74 ff ff ff    	jae    c0016b88 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c1c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016c20:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016c24:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016c28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c30:	e9 53 ff ff ff       	jmp    c0016b88 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c35:	83 ec 0c             	sub    esp,0xc
c0016c38:	68 a3 18 03 c0       	push   0xc00318a3
c0016c3d:	e8 3c 9b 00 00       	call   c002077e <KePanic(char const*)>
c0016c42:	83 c4 10             	add    esp,0x10
c0016c45:	83 ec 08             	sub    esp,0x8
c0016c48:	bb 60 00 00 00       	mov    ebx,0x60
c0016c4d:	6a 00                	push   0x0
c0016c4f:	6a 06                	push   0x6
c0016c51:	e8 a5 fb ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016c56:	58                   	pop    eax
c0016c57:	5a                   	pop    edx
c0016c58:	6a 00                	push   0x0
c0016c5a:	6a 07                	push   0x7
c0016c5c:	e8 9a fb ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016c61:	8b 0d ec b9 03 c0    	mov    ecx,DWORD PTR ds:0xc003b9ec
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	83 c1 02             	add    ecx,0x2
c0016c6d:	89 0d ec b9 03 c0    	mov    DWORD PTR ds:0xc003b9ec,ecx
c0016c73:	83 ec 08             	sub    esp,0x8
c0016c76:	6a 00                	push   0x0
c0016c78:	53                   	push   ebx
c0016c79:	83 c3 01             	add    ebx,0x1
c0016c7c:	e8 7a fb ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016c8a:	75 e7                	jne    c0016c73 <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016c8c:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016c91:	bb 40 01 00 00       	mov    ebx,0x140
c0016c96:	83 c0 20             	add    eax,0x20
c0016c99:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016c9e:	eb 26                	jmp    c0016cc6 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016ca0:	83 ec 08             	sub    esp,0x8
c0016ca3:	6a 00                	push   0x0
c0016ca5:	53                   	push   ebx
c0016ca6:	83 c3 01             	add    ebx,0x1
c0016ca9:	e8 4d fb ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016cae:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016cb3:	83 c4 10             	add    esp,0x10
c0016cb6:	83 c0 01             	add    eax,0x1
c0016cb9:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016cbf:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016cc4:	74 07                	je     c0016ccd <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016cc6:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016ccb:	7e d3                	jle    c0016ca0 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016ccd:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016cd2:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016cd7:	7f 26                	jg     c0016cff <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016cd9:	83 ec 08             	sub    esp,0x8
c0016cdc:	6a 00                	push   0x0
c0016cde:	53                   	push   ebx
c0016cdf:	83 c3 01             	add    ebx,0x1
c0016ce2:	e8 14 fb ff ff       	call   c00167fb <Phys::setPageState(unsigned long, bool)>
c0016ce7:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016cec:	83 c4 10             	add    esp,0x10
c0016cef:	83 c0 01             	add    eax,0x1
c0016cf2:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016cf8:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016cfd:	75 d3                	jne    c0016cd2 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016cff:	83 c4 3c             	add    esp,0x3c
c0016d02:	5b                   	pop    ebx
c0016d03:	5e                   	pop    esi
c0016d04:	5f                   	pop    edi
c0016d05:	5d                   	pop    ebp
c0016d06:	c3                   	ret    
c0016d07:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016d0f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d17:	e9 3b fe ff ff       	jmp    c0016b57 <Phys::physicalMemorySetup(unsigned int)+0x129>

c0016d1c <Pipe::isAtty()>:
c0016d1c:	31 c0                	xor    eax,eax
c0016d1e:	c3                   	ret    
c0016d1f:	90                   	nop

c0016d20 <Pipe::~Pipe()>:
c0016d20:	83 ec 0c             	sub    esp,0xc
c0016d23:	ba 10 19 03 c0       	mov    edx,0xc0031910
c0016d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2c:	89 10                	mov    DWORD PTR [eax],edx
c0016d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	50                   	push   eax
c0016d36:	e8 69 11 00 00       	call   c0017ea4 <UnixFile::~UnixFile()>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	90                   	nop
c0016d3f:	83 c4 0c             	add    esp,0xc
c0016d42:	c3                   	ret    
c0016d43:	90                   	nop

c0016d44 <Pipe::~Pipe()>:
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	83 ec 0c             	sub    esp,0xc
c0016d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4e:	e8 cd ff ff ff       	call   c0016d20 <Pipe::~Pipe()>
c0016d53:	83 c4 10             	add    esp,0x10
c0016d56:	83 ec 08             	sub    esp,0x8
c0016d59:	6a 20                	push   0x20
c0016d5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5f:	e8 b4 25 00 00       	call   c0019318 <operator delete(void*, unsigned long)>
c0016d64:	83 c4 10             	add    esp,0x10
c0016d67:	83 c4 0c             	add    esp,0xc
c0016d6a:	c3                   	ret    
c0016d6b:	90                   	nop

c0016d6c <Pipe::write(unsigned long long, void*, int*)>:
c0016d6c:	55                   	push   ebp
c0016d6d:	57                   	push   edi
c0016d6e:	56                   	push   esi
c0016d6f:	53                   	push   ebx
c0016d70:	83 ec 1c             	sub    esp,0x1c
c0016d73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d7b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016d7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016d82:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016d89:	89 d8                	mov    eax,ebx
c0016d8b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016d8e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016d92:	89 d6                	mov    esi,edx
c0016d94:	89 d7                	mov    edi,edx
c0016d96:	c1 ff 1f             	sar    edi,0x1f
c0016d99:	03 34 24             	add    esi,DWORD PTR [esp]
c0016d9c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016da0:	c1 f8 1f             	sar    eax,0x1f
c0016da3:	39 f3                	cmp    ebx,esi
c0016da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dad:	19 f8                	sbb    eax,edi
c0016daf:	b8 01 00 00 00       	mov    eax,0x1
c0016db4:	72 6e                	jb     c0016e24 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016db6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016db9:	01 d0                	add    eax,edx
c0016dbb:	99                   	cdq    
c0016dbc:	f7 fb                	idiv   ebx
c0016dbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc2:	29 d3                	sub    ebx,edx
c0016dc4:	89 d7                	mov    edi,edx
c0016dc6:	89 de                	mov    esi,ebx
c0016dc8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016dcb:	c1 fb 1f             	sar    ebx,0x1f
c0016dce:	39 f2                	cmp    edx,esi
c0016dd0:	19 d8                	sbb    eax,ebx
c0016dd2:	b8 00 00 00 00       	mov    eax,0x0
c0016dd7:	72 04                	jb     c0016ddd <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016dd9:	89 d0                	mov    eax,edx
c0016ddb:	29 f0                	sub    eax,esi
c0016ddd:	89 d3                	mov    ebx,edx
c0016ddf:	29 c3                	sub    ebx,eax
c0016de1:	74 0b                	je     c0016dee <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016de3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016de6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016dea:	89 d9                	mov    ecx,ebx
c0016dec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dee:	85 c0                	test   eax,eax
c0016df0:	74 0d                	je     c0016dff <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016df2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016df6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016df9:	89 de                	mov    esi,ebx
c0016dfb:	89 c1                	mov    ecx,eax
c0016dfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016e02:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016e07:	75 10                	jne    c0016e19 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016e09:	83 ec 0c             	sub    esp,0xc
c0016e0c:	68 cd 18 03 c0       	push   0xc00318cd
c0016e11:	e8 68 99 00 00       	call   c002077e <KePanic(char const*)>
c0016e16:	83 c4 10             	add    esp,0x10
c0016e19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e1d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e20:	89 08                	mov    DWORD PTR [eax],ecx
c0016e22:	31 c0                	xor    eax,eax
c0016e24:	83 c4 1c             	add    esp,0x1c
c0016e27:	5b                   	pop    ebx
c0016e28:	5e                   	pop    esi
c0016e29:	5f                   	pop    edi
c0016e2a:	5d                   	pop    ebp
c0016e2b:	c3                   	ret    

c0016e2c <Pipe::read(unsigned long long, void*, int*)>:
c0016e2c:	55                   	push   ebp
c0016e2d:	57                   	push   edi
c0016e2e:	56                   	push   esi
c0016e2f:	53                   	push   ebx
c0016e30:	83 ec 1c             	sub    esp,0x1c
c0016e33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016e37:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016e3b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016e3f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016e42:	89 c8                	mov    eax,ecx
c0016e44:	99                   	cdq    
c0016e45:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016e49:	74 24                	je     c0016e6f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e4b:	39 f9                	cmp    ecx,edi
c0016e4d:	89 d1                	mov    ecx,edx
c0016e4f:	19 f1                	sbb    ecx,esi
c0016e51:	73 1c                	jae    c0016e6f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e53:	fa                   	cli    
c0016e54:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0016e5a:	e8 2d e9 00 00       	call   c002578c <schedule()>
c0016e5f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0016e64:	48                   	dec    eax
c0016e65:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016e6a:	75 d3                	jne    c0016e3f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016e6c:	fb                   	sti    
c0016e6d:	eb d0                	jmp    c0016e3f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016e6f:	39 f8                	cmp    eax,edi
c0016e71:	89 d1                	mov    ecx,edx
c0016e73:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016e7a:	19 f1                	sbb    ecx,esi
c0016e7c:	73 07                	jae    c0016e85 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016e7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e85:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016e88:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016e8b:	29 f7                	sub    edi,esi
c0016e8d:	89 f8                	mov    eax,edi
c0016e8f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e93:	99                   	cdq    
c0016e94:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016e97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e9b:	19 d0                	sbb    eax,edx
c0016e9d:	73 07                	jae    c0016ea6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016e9f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016ea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016ea9:	89 ea                	mov    edx,ebp
c0016eab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016eaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016eb4:	74 0d                	je     c0016ec3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016eb6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016eb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016ebd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ec3:	85 d2                	test   edx,edx
c0016ec5:	74 11                	je     c0016ed8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016ec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ecb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016ece:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ed2:	89 d1                	mov    ecx,edx
c0016ed4:	89 c7                	mov    edi,eax
c0016ed6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016edb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016ede:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016ee1:	99                   	cdq    
c0016ee2:	89 f7                	mov    edi,esi
c0016ee4:	03 04 24             	add    eax,DWORD PTR [esp]
c0016ee7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016eeb:	c1 ff 1f             	sar    edi,0x1f
c0016eee:	57                   	push   edi
c0016eef:	56                   	push   esi
c0016ef0:	52                   	push   edx
c0016ef1:	50                   	push   eax
c0016ef2:	e8 d9 7e 01 00       	call   c002edd0 <__umoddi3>
c0016ef7:	83 c4 10             	add    esp,0x10
c0016efa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016efd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016f02:	75 10                	jne    c0016f14 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016f04:	83 ec 0c             	sub    esp,0xc
c0016f07:	68 ea 18 03 c0       	push   0xc00318ea
c0016f0c:	e8 6d 98 00 00       	call   c002077e <KePanic(char const*)>
c0016f11:	83 c4 10             	add    esp,0x10
c0016f14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f18:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016f1b:	89 10                	mov    DWORD PTR [eax],edx
c0016f1d:	83 c4 1c             	add    esp,0x1c
c0016f20:	31 c0                	xor    eax,eax
c0016f22:	5b                   	pop    ebx
c0016f23:	5e                   	pop    esi
c0016f24:	5f                   	pop    edi
c0016f25:	5d                   	pop    ebp
c0016f26:	c3                   	ret    
c0016f27:	90                   	nop

c0016f28 <Pipe::Pipe(int)>:
c0016f28:	83 ec 0c             	sub    esp,0xc
c0016f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f2f:	83 ec 08             	sub    esp,0x8
c0016f32:	6a 00                	push   0x0
c0016f34:	50                   	push   eax
c0016f35:	e8 84 0d 00 00       	call   c0017cbe <UnixFile::UnixFile(int)>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	ba 10 19 03 c0       	mov    edx,0xc0031910
c0016f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f46:	89 10                	mov    DWORD PTR [eax],edx
c0016f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016f50:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f57:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f62:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016f69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f6d:	83 ec 0c             	sub    esp,0xc
c0016f70:	50                   	push   eax
c0016f71:	e8 41 f6 ff ff       	call   c00165b7 <malloc>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	89 c2                	mov    edx,eax
c0016f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f7f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f86:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016f8a:	90                   	nop
c0016f8b:	83 c4 0c             	add    esp,0xc
c0016f8e:	c3                   	ret    
c0016f8f:	90                   	nop

c0016f90 <VgaText::isAtty()>:
c0016f90:	b0 01                	mov    al,0x1
c0016f92:	c3                   	ret    
c0016f93:	90                   	nop

c0016f94 <VgaText::~VgaText()>:
c0016f94:	83 ec 0c             	sub    esp,0xc
c0016f97:	ba 58 19 03 c0       	mov    edx,0xc0031958
c0016f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa0:	89 10                	mov    DWORD PTR [eax],edx
c0016fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa6:	83 ec 0c             	sub    esp,0xc
c0016fa9:	50                   	push   eax
c0016faa:	e8 f5 0e 00 00       	call   c0017ea4 <UnixFile::~UnixFile()>
c0016faf:	83 c4 10             	add    esp,0x10
c0016fb2:	90                   	nop
c0016fb3:	83 c4 0c             	add    esp,0xc
c0016fb6:	c3                   	ret    
c0016fb7:	90                   	nop

c0016fb8 <VgaText::~VgaText()>:
c0016fb8:	83 ec 0c             	sub    esp,0xc
c0016fbb:	83 ec 0c             	sub    esp,0xc
c0016fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fc2:	e8 cd ff ff ff       	call   c0016f94 <VgaText::~VgaText()>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	83 ec 08             	sub    esp,0x8
c0016fcd:	68 84 01 00 00       	push   0x184
c0016fd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fd6:	e8 3d 23 00 00       	call   c0019318 <operator delete(void*, unsigned long)>
c0016fdb:	83 c4 10             	add    esp,0x10
c0016fde:	83 c4 0c             	add    esp,0xc
c0016fe1:	c3                   	ret    

c0016fe2 <VgaText::read(unsigned long long, void*, int*)>:
c0016fe2:	83 ec 10             	sub    esp,0x10
c0016fe5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ff1:	e8 f6 54 00 00       	call   c001c4ec <readKeyboard(VgaText*, char*, unsigned long)>
c0016ff6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ffa:	89 02                	mov    DWORD PTR [edx],eax
c0016ffc:	31 c0                	xor    eax,eax
c0016ffe:	83 c4 1c             	add    esp,0x1c
c0017001:	c3                   	ret    

c0017002 <setTerminalScrollLock(bool)>:
c0017002:	c3                   	ret    

c0017003 <doTerminalCycle()>:
c0017003:	c3                   	ret    

c0017004 <addToTerminalCycle(VgaText*)>:
c0017004:	c3                   	ret    

c0017005 <scrollTerminalScrollLock(int)>:
c0017005:	c3                   	ret    

c0017006 <VgaText::updateTitle()>:
c0017006:	c3                   	ret    
c0017007:	90                   	nop

c0017008 <VgaText::load()>:
c0017008:	c3                   	ret    
c0017009:	90                   	nop

c001700a <VgaText::updateCursor()>:
c001700a:	83 ec 14             	sub    esp,0x14
c001700d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017011:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017014:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017017:	e8 58 13 01 00       	call   c0028374 <HalConsoleCursorUpdate(int, int)>
c001701c:	83 c4 1c             	add    esp,0x1c
c001701f:	c3                   	ret    

c0017020 <VgaText::doANSI_SGR(int)>:
c0017020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017028:	85 d2                	test   edx,edx
c001702a:	75 0b                	jne    c0017037 <VgaText::doANSI_SGR(int)+0x17>
c001702c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001702f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017032:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0017035:	eb 59                	jmp    c0017090 <VgaText::doANSI_SGR(int)+0x70>
c0017037:	83 fa 07             	cmp    edx,0x7
c001703a:	75 0b                	jne    c0017047 <VgaText::doANSI_SGR(int)+0x27>
c001703c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001703f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0017042:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0017045:	eb 49                	jmp    c0017090 <VgaText::doANSI_SGR(int)+0x70>
c0017047:	83 fa 1b             	cmp    edx,0x1b
c001704a:	74 e0                	je     c001702c <VgaText::doANSI_SGR(int)+0xc>
c001704c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001704f:	83 f9 07             	cmp    ecx,0x7
c0017052:	77 09                	ja     c001705d <VgaText::doANSI_SGR(int)+0x3d>
c0017054:	8b 14 8d 00 44 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbc00]
c001705b:	eb 20                	jmp    c001707d <VgaText::doANSI_SGR(int)+0x5d>
c001705d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0017060:	83 f9 07             	cmp    ecx,0x7
c0017063:	77 09                	ja     c001706e <VgaText::doANSI_SGR(int)+0x4e>
c0017065:	8b 14 8d 00 44 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbc00]
c001706c:	eb 22                	jmp    c0017090 <VgaText::doANSI_SGR(int)+0x70>
c001706e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0017071:	83 f9 07             	cmp    ecx,0x7
c0017074:	77 0b                	ja     c0017081 <VgaText::doANSI_SGR(int)+0x61>
c0017076:	8b 14 95 b8 42 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbd48]
c001707d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017080:	c3                   	ret    
c0017081:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0017084:	83 f9 07             	cmp    ecx,0x7
c0017087:	77 0a                	ja     c0017093 <VgaText::doANSI_SGR(int)+0x73>
c0017089:	8b 14 95 90 42 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbd70]
c0017090:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0017093:	c3                   	ret    

c0017094 <VgaText::setDefaultBgColour(VgaColour)>:
c0017094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001709c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001709f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00170a2:	c3                   	ret    
c00170a3:	90                   	nop

c00170a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00170a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00170af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00170b4:	53                   	push   ebx
c00170b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00170bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170c1:	51                   	push   ecx
c00170c2:	e8 cd ff ff ff       	call   c0017094 <VgaText::setDefaultBgColour(VgaColour)>
c00170c7:	58                   	pop    eax
c00170c8:	5a                   	pop    edx
c00170c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00170d1:	5b                   	pop    ebx
c00170d2:	eb d0                	jmp    c00170a4 <VgaText::setDefaultFgColour(VgaColour)>

c00170d4 <VgaText::setTitleTextColour(VgaColour)>:
c00170d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00170df:	c3                   	ret    

c00170e0 <VgaText::setTitleColour(VgaColour)>:
c00170e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170eb:	c3                   	ret    

c00170ec <VgaText::setTitle(char*)>:
c00170ec:	c3                   	ret    
c00170ed:	90                   	nop

c00170ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00170ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00170f7:	83 e0 0f             	and    eax,0xf
c00170fa:	c1 e2 04             	shl    edx,0x4
c00170fd:	09 d0                	or     eax,edx
c00170ff:	c3                   	ret    

c0017100 <VgaText::scrollScreen()>:
c0017100:	55                   	push   ebp
c0017101:	57                   	push   edi
c0017102:	56                   	push   esi
c0017103:	be 01 00 00 00       	mov    esi,0x1
c0017108:	53                   	push   ebx
c0017109:	83 ec 0c             	sub    esp,0xc
c001710c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017110:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0017113:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0017119:	31 ff                	xor    edi,edi
c001711b:	01 e9                	add    ecx,ebp
c001711d:	8a 01                	mov    al,BYTE PTR [ecx]
c001711f:	83 fe 18             	cmp    esi,0x18
c0017122:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017128:	75 20                	jne    c001714a <VgaText::scrollScreen()+0x4a>
c001712a:	f7 c7 01 00 00 00    	test   edi,0x1
c0017130:	74 15                	je     c0017147 <VgaText::scrollScreen()+0x47>
c0017132:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017136:	50                   	push   eax
c0017137:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001713b:	50                   	push   eax
c001713c:	e8 ad ff ff ff       	call   c00170ee <VgaText::combineColours(unsigned char, unsigned char)>
c0017141:	5a                   	pop    edx
c0017142:	5a                   	pop    edx
c0017143:	88 01                	mov    BYTE PTR [ecx],al
c0017145:	eb 03                	jmp    c001714a <VgaText::scrollScreen()+0x4a>
c0017147:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001714a:	47                   	inc    edi
c001714b:	41                   	inc    ecx
c001714c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0017152:	75 c9                	jne    c001711d <VgaText::scrollScreen()+0x1d>
c0017154:	46                   	inc    esi
c0017155:	83 fe 19             	cmp    esi,0x19
c0017158:	75 b9                	jne    c0017113 <VgaText::scrollScreen()+0x13>
c001715a:	39 1d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebx
c0017160:	75 1f                	jne    c0017181 <VgaText::scrollScreen()+0x81>
c0017162:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017166:	74 05                	je     c001716d <VgaText::scrollScreen()+0x6d>
c0017168:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001716b:	eb 14                	jmp    c0017181 <VgaText::scrollScreen()+0x81>
c001716d:	50                   	push   eax
c001716e:	50                   	push   eax
c001716f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017173:	50                   	push   eax
c0017174:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017178:	50                   	push   eax
c0017179:	e8 8a 10 01 00       	call   c0028208 <HalConsoleScroll(int, int)>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017185:	83 c4 0c             	add    esp,0xc
c0017188:	5b                   	pop    ebx
c0017189:	5e                   	pop    esi
c001718a:	5f                   	pop    edi
c001718b:	5d                   	pop    ebp
c001718c:	e9 79 fe ff ff       	jmp    c001700a <VgaText::updateCursor()>
c0017191:	90                   	nop

c0017192 <VgaText::combineCharAndColour(char, unsigned char)>:
c0017192:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017197:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001719c:	c1 e0 08             	shl    eax,0x8
c001719f:	09 d0                	or     eax,edx
c00171a1:	c3                   	ret    

c00171a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00171a2:	55                   	push   ebp
c00171a3:	57                   	push   edi
c00171a4:	56                   	push   esi
c00171a5:	53                   	push   ebx
c00171a6:	83 ec 1c             	sub    esp,0x1c
c00171a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00171ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171c1:	0f b6 c3             	movzx  eax,bl
c00171c4:	50                   	push   eax
c00171c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00171ca:	50                   	push   eax
c00171cb:	e8 1e ff ff ff       	call   c00170ee <VgaText::combineColours(unsigned char, unsigned char)>
c00171d0:	5a                   	pop    edx
c00171d1:	0f b6 c0             	movzx  eax,al
c00171d4:	59                   	pop    ecx
c00171d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00171da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171de:	50                   	push   eax
c00171df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00171e3:	e8 aa ff ff ff       	call   c0017192 <VgaText::combineCharAndColour(char, unsigned char)>
c00171e8:	5a                   	pop    edx
c00171e9:	6b d7 50             	imul   edx,edi,0x50
c00171ec:	59                   	pop    ecx
c00171ed:	01 f2                	add    edx,esi
c00171ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00171f2:	0f b7 d2             	movzx  edx,dx
c00171f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00171f9:	39 2d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebp
c00171ff:	75 28                	jne    c0017229 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017205:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017209:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c001720d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017211:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017215:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001721d:	83 c4 1c             	add    esp,0x1c
c0017220:	5b                   	pop    ebx
c0017221:	5e                   	pop    esi
c0017222:	5f                   	pop    edi
c0017223:	5d                   	pop    ebp
c0017224:	e9 e7 10 01 00       	jmp    c0028310 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017229:	83 c4 1c             	add    esp,0x1c
c001722c:	5b                   	pop    ebx
c001722d:	5e                   	pop    esi
c001722e:	5f                   	pop    edi
c001722f:	5d                   	pop    ebp
c0017230:	c3                   	ret    
c0017231:	90                   	nop

c0017232 <VgaText::getCursorX()>:
c0017232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017236:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017239:	c3                   	ret    

c001723a <VgaText::getCursorY()>:
c001723a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001723e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017241:	c3                   	ret    

c0017242 <VgaText::setCursor(int, int)>:
c0017242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001724a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001724d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017251:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017254:	e9 b1 fd ff ff       	jmp    c001700a <VgaText::updateCursor()>

c0017259 <setActiveTerminal(VgaText*)>:
c0017259:	53                   	push   ebx
c001725a:	83 ec 08             	sub    esp,0x8
c001725d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017261:	85 db                	test   ebx,ebx
c0017263:	75 11                	jne    c0017276 <setActiveTerminal(VgaText*)+0x1d>
c0017265:	c7 44 24 10 24 19 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031924
c001726d:	83 c4 08             	add    esp,0x8
c0017270:	5b                   	pop    ebx
c0017271:	e9 08 95 00 00       	jmp    c002077e <KePanic(char const*)>
c0017276:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c001727b:	85 c0                	test   eax,eax
c001727d:	74 0c                	je     c001728b <setActiveTerminal(VgaText*)+0x32>
c001727f:	83 ec 0c             	sub    esp,0xc
c0017282:	50                   	push   eax
c0017283:	e8 82 fd ff ff       	call   c001700a <VgaText::updateCursor()>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	89 1d 08 ba 03 c0    	mov    DWORD PTR ds:0xc003ba08,ebx
c0017291:	50                   	push   eax
c0017292:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017295:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017298:	53                   	push   ebx
c0017299:	e8 a4 ff ff ff       	call   c0017242 <VgaText::setCursor(int, int)>
c001729e:	83 c4 18             	add    esp,0x18
c00172a1:	5b                   	pop    ebx
c00172a2:	c3                   	ret    
c00172a3:	90                   	nop

c00172a4 <VgaText::clearScreen()>:
c00172a4:	57                   	push   edi
c00172a5:	56                   	push   esi
c00172a6:	31 f6                	xor    esi,esi
c00172a8:	53                   	push   ebx
c00172a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172ad:	52                   	push   edx
c00172ae:	6a 00                	push   0x0
c00172b0:	6a 00                	push   0x0
c00172b2:	53                   	push   ebx
c00172b3:	e8 8a ff ff ff       	call   c0017242 <VgaText::setCursor(int, int)>
c00172b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00172c5:	7e 20                	jle    c00172e7 <VgaText::clearScreen()+0x43>
c00172c7:	31 ff                	xor    edi,edi
c00172c9:	50                   	push   eax
c00172ca:	50                   	push   eax
c00172cb:	56                   	push   esi
c00172cc:	57                   	push   edi
c00172cd:	47                   	inc    edi
c00172ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00172d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00172d4:	6a 20                	push   0x20
c00172d6:	53                   	push   ebx
c00172d7:	e8 c6 fe ff ff       	call   c00171a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00172dc:	83 c4 20             	add    esp,0x20
c00172df:	83 ff 50             	cmp    edi,0x50
c00172e2:	75 e5                	jne    c00172c9 <VgaText::clearScreen()+0x25>
c00172e4:	46                   	inc    esi
c00172e5:	eb db                	jmp    c00172c2 <VgaText::clearScreen()+0x1e>
c00172e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00172ee:	5b                   	pop    ebx
c00172ef:	5e                   	pop    esi
c00172f0:	5f                   	pop    edi
c00172f1:	c3                   	ret    

c00172f2 <VgaText::setCursorX(int)>:
c00172f2:	83 ec 10             	sub    esp,0x10
c00172f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00172fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017300:	50                   	push   eax
c0017301:	e8 3c ff ff ff       	call   c0017242 <VgaText::setCursor(int, int)>
c0017306:	83 c4 1c             	add    esp,0x1c
c0017309:	c3                   	ret    

c001730a <VgaText::setCursorY(int)>:
c001730a:	83 ec 10             	sub    esp,0x10
c001730d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017315:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017318:	50                   	push   eax
c0017319:	e8 24 ff ff ff       	call   c0017242 <VgaText::setCursor(int, int)>
c001731e:	83 c4 1c             	add    esp,0x1c
c0017321:	c3                   	ret    

c0017322 <VgaText::incrementCursor(bool)>:
c0017322:	56                   	push   esi
c0017323:	53                   	push   ebx
c0017324:	51                   	push   ecx
c0017325:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017329:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001732d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017330:	40                   	inc    eax
c0017331:	83 f8 50             	cmp    eax,0x50
c0017334:	74 05                	je     c001733b <VgaText::incrementCursor(bool)+0x19>
c0017336:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017339:	eb 24                	jmp    c001735f <VgaText::incrementCursor(bool)+0x3d>
c001733b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001733e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017345:	8d 50 01             	lea    edx,[eax+0x1]
c0017348:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001734b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001734e:	75 0f                	jne    c001735f <VgaText::incrementCursor(bool)+0x3d>
c0017350:	83 ec 0c             	sub    esp,0xc
c0017353:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017356:	53                   	push   ebx
c0017357:	e8 a4 fd ff ff       	call   c0017100 <VgaText::scrollScreen()>
c001735c:	83 c4 10             	add    esp,0x10
c001735f:	89 f0                	mov    eax,esi
c0017361:	84 c0                	test   al,al
c0017363:	74 0c                	je     c0017371 <VgaText::incrementCursor(bool)+0x4f>
c0017365:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017369:	5a                   	pop    edx
c001736a:	5b                   	pop    ebx
c001736b:	5e                   	pop    esi
c001736c:	e9 99 fc ff ff       	jmp    c001700a <VgaText::updateCursor()>
c0017371:	58                   	pop    eax
c0017372:	5b                   	pop    ebx
c0017373:	5e                   	pop    esi
c0017374:	c3                   	ret    
c0017375:	90                   	nop

c0017376 <VgaText::decrementCursor(bool)>:
c0017376:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001737a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001737e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017381:	85 c0                	test   eax,eax
c0017383:	74 04                	je     c0017389 <VgaText::decrementCursor(bool)+0x13>
c0017385:	48                   	dec    eax
c0017386:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017389:	84 c9                	test   cl,cl
c001738b:	74 09                	je     c0017396 <VgaText::decrementCursor(bool)+0x20>
c001738d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0017391:	e9 74 fc ff ff       	jmp    c001700a <VgaText::updateCursor()>
c0017396:	c3                   	ret    
c0017397:	90                   	nop

c0017398 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017398:	53                   	push   ebx
c0017399:	83 ec 08             	sub    esp,0x8
c001739c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00173a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00173a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00173ad:	83 f8 07             	cmp    eax,0x7
c00173b0:	75 21                	jne    c00173d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00173b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00173ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00173c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00173ca:	83 c4 08             	add    esp,0x8
c00173cd:	5b                   	pop    ebx
c00173ce:	e9 18 3b 00 00       	jmp    c001aeeb <Krnl::beep(int, int, bool)>
c00173d3:	83 f8 0d             	cmp    eax,0xd
c00173d6:	75 09                	jne    c00173e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00173d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173df:	eb 2d                	jmp    c001740e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00173e1:	83 f8 0a             	cmp    eax,0xa
c00173e4:	75 31                	jne    c0017417 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00173e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173f0:	8d 50 01             	lea    edx,[eax+0x1]
c00173f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00173f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00173f9:	75 0f                	jne    c001740a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00173fb:	83 ec 0c             	sub    esp,0xc
c00173fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017401:	53                   	push   ebx
c0017402:	e8 f9 fc ff ff       	call   c0017100 <VgaText::scrollScreen()>
c0017407:	83 c4 10             	add    esp,0x10
c001740a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001740e:	83 c4 08             	add    esp,0x8
c0017411:	5b                   	pop    ebx
c0017412:	e9 f3 fb ff ff       	jmp    c001700a <VgaText::updateCursor()>
c0017417:	83 f8 08             	cmp    eax,0x8
c001741a:	75 25                	jne    c0017441 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001741c:	50                   	push   eax
c001741d:	50                   	push   eax
c001741e:	6a 01                	push   0x1
c0017420:	53                   	push   ebx
c0017421:	e8 50 ff ff ff       	call   c0017376 <VgaText::decrementCursor(bool)>
c0017426:	5a                   	pop    edx
c0017427:	59                   	pop    ecx
c0017428:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001742b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001742e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017431:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017434:	6a 20                	push   0x20
c0017436:	53                   	push   ebx
c0017437:	e8 66 fd ff ff       	call   c00171a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001743c:	83 c4 28             	add    esp,0x28
c001743f:	5b                   	pop    ebx
c0017440:	c3                   	ret    
c0017441:	83 ec 08             	sub    esp,0x8
c0017444:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017447:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001744a:	51                   	push   ecx
c001744b:	52                   	push   edx
c001744c:	50                   	push   eax
c001744d:	53                   	push   ebx
c001744e:	e8 4f fd ff ff       	call   c00171a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017453:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017457:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001745f:	83 c4 28             	add    esp,0x28
c0017462:	5b                   	pop    ebx
c0017463:	e9 ba fe ff ff       	jmp    c0017322 <VgaText::incrementCursor(bool)>

c0017468 <VgaText::putchar(char)>:
c0017468:	57                   	push   edi
c0017469:	56                   	push   esi
c001746a:	53                   	push   ebx
c001746b:	83 ec 10             	sub    esp,0x10
c001746e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017472:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017476:	89 f8                	mov    eax,edi
c0017478:	0f be c0             	movsx  eax,al
c001747b:	83 f8 5b             	cmp    eax,0x5b
c001747e:	75 18                	jne    c0017498 <VgaText::putchar(char)+0x30>
c0017480:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017484:	74 20                	je     c00174a6 <VgaText::putchar(char)+0x3e>
c0017486:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001748c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0017493:	e9 c1 00 00 00       	jmp    c0017559 <VgaText::putchar(char)+0xf1>
c0017498:	83 f8 1b             	cmp    eax,0x1b
c001749b:	75 09                	jne    c00174a6 <VgaText::putchar(char)+0x3e>
c001749d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00174a1:	e9 b3 00 00 00       	jmp    c0017559 <VgaText::putchar(char)+0xf1>
c00174a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00174a9:	84 c9                	test   cl,cl
c00174ab:	0f 84 98 00 00 00    	je     c0017549 <VgaText::putchar(char)+0xe1>
c00174b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00174b4:	89 f2                	mov    edx,esi
c00174b6:	80 fa 3e             	cmp    dl,0x3e
c00174b9:	77 78                	ja     c0017533 <VgaText::putchar(char)+0xcb>
c00174bb:	83 f8 6d             	cmp    eax,0x6d
c00174be:	75 47                	jne    c0017507 <VgaText::putchar(char)+0x9f>
c00174c0:	31 f6                	xor    esi,esi
c00174c2:	31 d2                	xor    edx,edx
c00174c4:	31 c0                	xor    eax,eax
c00174c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00174c9:	7e 2d                	jle    c00174f8 <VgaText::putchar(char)+0x90>
c00174cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00174d0:	83 fa 3b             	cmp    edx,0x3b
c00174d3:	75 17                	jne    c00174ec <VgaText::putchar(char)+0x84>
c00174d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00174d9:	50                   	push   eax
c00174da:	53                   	push   ebx
c00174db:	e8 40 fb ff ff       	call   c0017020 <VgaText::doANSI_SGR(int)>
c00174e0:	59                   	pop    ecx
c00174e1:	31 d2                	xor    edx,edx
c00174e3:	5f                   	pop    edi
c00174e4:	31 c0                	xor    eax,eax
c00174e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00174ea:	eb 09                	jmp    c00174f5 <VgaText::putchar(char)+0x8d>
c00174ec:	6b c0 0a             	imul   eax,eax,0xa
c00174ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00174f3:	88 ca                	mov    dl,cl
c00174f5:	46                   	inc    esi
c00174f6:	eb ce                	jmp    c00174c6 <VgaText::putchar(char)+0x5e>
c00174f8:	84 d2                	test   dl,dl
c00174fa:	74 2f                	je     c001752b <VgaText::putchar(char)+0xc3>
c00174fc:	50                   	push   eax
c00174fd:	53                   	push   ebx
c00174fe:	e8 1d fb ff ff       	call   c0017020 <VgaText::doANSI_SGR(int)>
c0017503:	58                   	pop    eax
c0017504:	5a                   	pop    edx
c0017505:	eb 24                	jmp    c001752b <VgaText::putchar(char)+0xc3>
c0017507:	83 f8 4a             	cmp    eax,0x4a
c001750a:	75 1f                	jne    c001752b <VgaText::putchar(char)+0xc3>
c001750c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017510:	75 19                	jne    c001752b <VgaText::putchar(char)+0xc3>
c0017512:	83 ec 0c             	sub    esp,0xc
c0017515:	53                   	push   ebx
c0017516:	e8 89 fd ff ff       	call   c00172a4 <VgaText::clearScreen()>
c001751b:	83 c4 0c             	add    esp,0xc
c001751e:	6a 00                	push   0x0
c0017520:	6a 00                	push   0x0
c0017522:	53                   	push   ebx
c0017523:	e8 1a fd ff ff       	call   c0017242 <VgaText::setCursor(int, int)>
c0017528:	83 c4 10             	add    esp,0x10
c001752b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017531:	eb 26                	jmp    c0017559 <VgaText::putchar(char)+0xf1>
c0017533:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017536:	83 f8 0e             	cmp    eax,0xe
c0017539:	7f 1e                	jg     c0017559 <VgaText::putchar(char)+0xf1>
c001753b:	8d 48 01             	lea    ecx,[eax+0x1]
c001753e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017541:	89 f9                	mov    ecx,edi
c0017543:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0017547:	eb 10                	jmp    c0017559 <VgaText::putchar(char)+0xf1>
c0017549:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001754c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001754f:	50                   	push   eax
c0017550:	53                   	push   ebx
c0017551:	e8 42 fe ff ff       	call   c0017398 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017556:	83 c4 10             	add    esp,0x10
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	5b                   	pop    ebx
c001755d:	5e                   	pop    esi
c001755e:	5f                   	pop    edi
c001755f:	c3                   	ret    

c0017560 <VgaText::putx(unsigned int)>:
c0017560:	57                   	push   edi
c0017561:	b9 11 00 00 00       	mov    ecx,0x11
c0017566:	56                   	push   esi
c0017567:	be 32 19 03 c0       	mov    esi,0xc0031932
c001756c:	53                   	push   ebx
c001756d:	83 ec 20             	sub    esp,0x20
c0017570:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017574:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017578:	fc                   	cld    
c0017579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001757b:	be 08 00 00 00       	mov    esi,0x8
c0017580:	50                   	push   eax
c0017581:	50                   	push   eax
c0017582:	89 d8                	mov    eax,ebx
c0017584:	c1 e3 04             	shl    ebx,0x4
c0017587:	c1 e8 1c             	shr    eax,0x1c
c001758a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001758f:	50                   	push   eax
c0017590:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017594:	e8 cf fe ff ff       	call   c0017468 <VgaText::putchar(char)>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	4e                   	dec    esi
c001759d:	75 e1                	jne    c0017580 <VgaText::putx(unsigned int)+0x20>
c001759f:	83 c4 20             	add    esp,0x20
c00175a2:	5b                   	pop    ebx
c00175a3:	5e                   	pop    esi
c00175a4:	5f                   	pop    edi
c00175a5:	c3                   	ret    

c00175a6 <VgaText::puts(char const*)>:
c00175a6:	53                   	push   ebx
c00175a7:	83 ec 08             	sub    esp,0x8
c00175aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175ae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175b1:	85 c0                	test   eax,eax
c00175b3:	74 12                	je     c00175c7 <VgaText::puts(char const*)+0x21>
c00175b5:	43                   	inc    ebx
c00175b6:	51                   	push   ecx
c00175b7:	51                   	push   ecx
c00175b8:	50                   	push   eax
c00175b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175bd:	e8 a6 fe ff ff       	call   c0017468 <VgaText::putchar(char)>
c00175c2:	83 c4 10             	add    esp,0x10
c00175c5:	eb e7                	jmp    c00175ae <VgaText::puts(char const*)+0x8>
c00175c7:	83 c4 08             	add    esp,0x8
c00175ca:	5b                   	pop    ebx
c00175cb:	c3                   	ret    

c00175cc <VgaText::write(unsigned long long, void*, int*)>:
c00175cc:	55                   	push   ebp
c00175cd:	57                   	push   edi
c00175ce:	56                   	push   esi
c00175cf:	53                   	push   ebx
c00175d0:	83 ec 0c             	sub    esp,0xc
c00175d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00175d7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00175db:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00175df:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00175e6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00175e9:	39 eb                	cmp    ebx,ebp
c00175eb:	74 13                	je     c0017600 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00175ed:	43                   	inc    ebx
c00175ee:	50                   	push   eax
c00175ef:	50                   	push   eax
c00175f0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00175f4:	50                   	push   eax
c00175f5:	56                   	push   esi
c00175f6:	e8 6d fe ff ff       	call   c0017468 <VgaText::putchar(char)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	eb e9                	jmp    c00175e9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017600:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017607:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001760b:	89 38                	mov    DWORD PTR [eax],edi
c001760d:	83 c4 0c             	add    esp,0xc
c0017610:	31 c0                	xor    eax,eax
c0017612:	5b                   	pop    ebx
c0017613:	5e                   	pop    esi
c0017614:	5f                   	pop    edi
c0017615:	5d                   	pop    ebp
c0017616:	c3                   	ret    
c0017617:	90                   	nop

c0017618 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017618:	55                   	push   ebp
c0017619:	57                   	push   edi
c001761a:	56                   	push   esi
c001761b:	53                   	push   ebx
c001761c:	83 ec 0c             	sub    esp,0xc
c001761f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017623:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017628:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001762f:	50                   	push   eax
c0017630:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017635:	50                   	push   eax
c0017636:	e8 b3 fa ff ff       	call   c00170ee <VgaText::combineColours(unsigned char, unsigned char)>
c001763b:	5a                   	pop    edx
c001763c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017640:	59                   	pop    ecx
c0017641:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0017644:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017648:	0f b7 f6             	movzx  esi,si
c001764b:	0f b6 e8             	movzx  ebp,al
c001764e:	01 f6                	add    esi,esi
c0017650:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017653:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017656:	85 c0                	test   eax,eax
c0017658:	0f 84 ef 00 00 00    	je     c001774d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001765e:	83 f8 0d             	cmp    eax,0xd
c0017661:	75 0c                	jne    c001766f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017663:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001766a:	e9 d8 00 00 00       	jmp    c0017747 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001766f:	83 f8 0a             	cmp    eax,0xa
c0017672:	75 44                	jne    c00176b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017674:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017677:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001767e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017681:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0017684:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0017687:	75 0f                	jne    c0017698 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017689:	83 ec 0c             	sub    esp,0xc
c001768c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001768f:	53                   	push   ebx
c0017690:	e8 6b fa ff ff       	call   c0017100 <VgaText::scrollScreen()>
c0017695:	83 c4 10             	add    esp,0x10
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	53                   	push   ebx
c001769c:	e8 69 f9 ff ff       	call   c001700a <VgaText::updateCursor()>
c00176a1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176ab:	0f b7 f6             	movzx  esi,si
c00176ae:	01 f6                	add    esi,esi
c00176b0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176b3:	e9 8f 00 00 00       	jmp    c0017747 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176b8:	83 f8 08             	cmp    eax,0x8
c00176bb:	75 34                	jne    c00176f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00176bd:	51                   	push   ecx
c00176be:	51                   	push   ecx
c00176bf:	6a 01                	push   0x1
c00176c1:	53                   	push   ebx
c00176c2:	e8 af fc ff ff       	call   c0017376 <VgaText::decrementCursor(bool)>
c00176c7:	5e                   	pop    esi
c00176c8:	58                   	pop    eax
c00176c9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00176cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00176cf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176d2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176d5:	6a 20                	push   0x20
c00176d7:	53                   	push   ebx
c00176d8:	e8 c5 fa ff ff       	call   c00171a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00176dd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176e1:	83 c4 20             	add    esp,0x20
c00176e4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176e7:	0f b7 f6             	movzx  esi,si
c00176ea:	01 f6                	add    esi,esi
c00176ec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176ef:	eb 56                	jmp    c0017747 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176f1:	52                   	push   edx
c00176f2:	52                   	push   edx
c00176f3:	55                   	push   ebp
c00176f4:	50                   	push   eax
c00176f5:	e8 98 fa ff ff       	call   c0017192 <VgaText::combineCharAndColour(char, unsigned char)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	66 89 06             	mov    WORD PTR [esi],ax
c0017700:	39 1d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebx
c0017706:	75 1d                	jne    c0017725 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017708:	83 ec 0c             	sub    esp,0xc
c001770b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001770e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017711:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017715:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017719:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001771c:	50                   	push   eax
c001771d:	e8 ee 0b 01 00       	call   c0028310 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017722:	83 c4 20             	add    esp,0x20
c0017725:	83 c6 02             	add    esi,0x2
c0017728:	50                   	push   eax
c0017729:	50                   	push   eax
c001772a:	6a 00                	push   0x0
c001772c:	53                   	push   ebx
c001772d:	e8 f0 fb ff ff       	call   c0017322 <VgaText::incrementCursor(bool)>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017739:	75 0c                	jne    c0017747 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001773b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001773f:	0f b7 f6             	movzx  esi,si
c0017742:	01 f6                	add    esi,esi
c0017744:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017747:	47                   	inc    edi
c0017748:	e9 06 ff ff ff       	jmp    c0017653 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001774d:	83 ec 0c             	sub    esp,0xc
c0017750:	53                   	push   ebx
c0017751:	e8 b4 f8 ff ff       	call   c001700a <VgaText::updateCursor()>
c0017756:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001775d:	83 c4 1c             	add    esp,0x1c
c0017760:	5b                   	pop    ebx
c0017761:	5e                   	pop    esi
c0017762:	5f                   	pop    edi
c0017763:	5d                   	pop    ebp
c0017764:	c3                   	ret    
c0017765:	90                   	nop

c0017766 <VgaText::VgaText(char const*)>:
c0017766:	56                   	push   esi
c0017767:	53                   	push   ebx
c0017768:	83 ec 04             	sub    esp,0x4
c001776b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776f:	83 ec 08             	sub    esp,0x8
c0017772:	6a 00                	push   0x0
c0017774:	50                   	push   eax
c0017775:	e8 44 05 00 00       	call   c0017cbe <UnixFile::UnixFile(int)>
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	ba 58 19 03 c0       	mov    edx,0xc0031958
c0017782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017786:	89 10                	mov    DWORD PTR [eax],edx
c0017788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001778c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0017793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017797:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00177a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177aa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00177ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00177b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177bd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00177c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177c8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00177cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177d3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00177da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177de:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00177e5:	83 ec 0c             	sub    esp,0xc
c00177e8:	6a 01                	push   0x1
c00177ea:	e8 1e 09 00 00       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c00177ef:	83 c4 10             	add    esp,0x10
c00177f2:	89 c2                	mov    edx,eax
c00177f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177f8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00177fb:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c0017801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017805:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017808:	89 c6                	mov    esi,eax
c001780a:	e8 b1 f0 ff ff       	call   c00168c0 <Phys::allocatePage()>
c001780f:	68 05 0c 00 00       	push   0xc05
c0017814:	56                   	push   esi
c0017815:	50                   	push   eax
c0017816:	53                   	push   ebx
c0017817:	e8 04 10 00 00       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c001781c:	83 c4 10             	add    esp,0x10
c001781f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017823:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017826:	83 ec 04             	sub    esp,0x4
c0017829:	68 a0 0f 00 00       	push   0xfa0
c001782e:	6a 00                	push   0x0
c0017830:	50                   	push   eax
c0017831:	e8 ba 8c fe ff       	call   c00004f0 <memset>
c0017836:	83 c4 10             	add    esp,0x10
c0017839:	83 ec 04             	sub    esp,0x4
c001783c:	6a 00                	push   0x0
c001783e:	6a 07                	push   0x7
c0017840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017844:	e8 6b f8 ff ff       	call   c00170b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017849:	83 c4 10             	add    esp,0x10
c001784c:	83 ec 04             	sub    esp,0x4
c001784f:	6a 00                	push   0x0
c0017851:	6a 00                	push   0x0
c0017853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017857:	e8 e6 f9 ff ff       	call   c0017242 <VgaText::setCursor(int, int)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	83 ec 0c             	sub    esp,0xc
c0017862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017866:	e8 39 fa ff ff       	call   c00172a4 <VgaText::clearScreen()>
c001786b:	83 c4 10             	add    esp,0x10
c001786e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017872:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001787a:	05 82 00 00 00       	add    eax,0x82
c001787f:	83 ec 04             	sub    esp,0x4
c0017882:	68 80 00 00 00       	push   0x80
c0017887:	6a 00                	push   0x0
c0017889:	50                   	push   eax
c001788a:	e8 61 8c fe ff       	call   c00004f0 <memset>
c001788f:	83 c4 10             	add    esp,0x10
c0017892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017896:	05 02 01 00 00       	add    eax,0x102
c001789b:	83 ec 04             	sub    esp,0x4
c001789e:	68 80 00 00 00       	push   0x80
c00178a3:	6a 00                	push   0x0
c00178a5:	50                   	push   eax
c00178a6:	e8 45 8c fe ff       	call   c00004f0 <memset>
c00178ab:	83 c4 10             	add    esp,0x10
c00178ae:	90                   	nop
c00178af:	83 c4 04             	add    esp,0x4
c00178b2:	5b                   	pop    ebx
c00178b3:	5e                   	pop    esi
c00178b4:	c3                   	ret    
c00178b5:	90                   	nop

c00178b6 <VgaText::receiveKey(unsigned char)>:
c00178b6:	55                   	push   ebp
c00178b7:	57                   	push   edi
c00178b8:	56                   	push   esi
c00178b9:	53                   	push   ebx
c00178ba:	83 ec 2c             	sub    esp,0x2c
c00178bd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00178c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00178c5:	89 ef                	mov    edi,ebp
c00178c7:	81 e7 ff 00 00 00    	and    edi,0xff
c00178cd:	0f 84 66 01 00 00    	je     c0017a39 <VgaText::receiveKey(unsigned char)+0x183>
c00178d3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00178d9:	83 ff 08             	cmp    edi,0x8
c00178dc:	75 73                	jne    c0017951 <VgaText::receiveKey(unsigned char)+0x9b>
c00178de:	83 ec 0c             	sub    esp,0xc
c00178e1:	56                   	push   esi
c00178e2:	e8 89 8c fe ff       	call   c0000570 <strlen>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	85 c0                	test   eax,eax
c00178ec:	0f 84 02 01 00 00    	je     c00179f4 <VgaText::receiveKey(unsigned char)+0x13e>
c00178f2:	50                   	push   eax
c00178f3:	50                   	push   eax
c00178f4:	6a 08                	push   0x8
c00178f6:	53                   	push   ebx
c00178f7:	e8 6c fb ff ff       	call   c0017468 <VgaText::putchar(char)>
c00178fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00178ff:	e8 6c 8c fe ff       	call   c0000570 <strlen>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001790f:	83 fa 0d             	cmp    edx,0xd
c0017912:	89 d0                	mov    eax,edx
c0017914:	0f 95 c1             	setne  cl
c0017917:	83 fa 1f             	cmp    edx,0x1f
c001791a:	0f 9e c2             	setle  dl
c001791d:	0f b6 d2             	movzx  edx,dl
c0017920:	85 ca                	test   edx,ecx
c0017922:	74 17                	je     c001793b <VgaText::receiveKey(unsigned char)+0x85>
c0017924:	83 e8 08             	sub    eax,0x8
c0017927:	3c 02                	cmp    al,0x2
c0017929:	76 10                	jbe    c001793b <VgaText::receiveKey(unsigned char)+0x85>
c001792b:	55                   	push   ebp
c001792c:	55                   	push   ebp
c001792d:	68 43 19 03 c0       	push   0xc0031943
c0017932:	53                   	push   ebx
c0017933:	e8 6e fc ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0017938:	83 c4 10             	add    esp,0x10
c001793b:	83 ec 0c             	sub    esp,0xc
c001793e:	56                   	push   esi
c001793f:	e8 2c 8c fe ff       	call   c0000570 <strlen>
c0017944:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001794c:	e9 a0 00 00 00       	jmp    c00179f1 <VgaText::receiveKey(unsigned char)+0x13b>
c0017951:	83 ec 0c             	sub    esp,0xc
c0017954:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001795a:	50                   	push   eax
c001795b:	e8 10 8c fe ff       	call   c0000570 <strlen>
c0017960:	89 34 24             	mov    DWORD PTR [esp],esi
c0017963:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017967:	e8 04 8c fe ff       	call   c0000570 <strlen>
c001796c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017977:	3d 80 00 00 00       	cmp    eax,0x80
c001797c:	0f 87 b7 00 00 00    	ja     c0017a39 <VgaText::receiveKey(unsigned char)+0x183>
c0017982:	8d 45 ff             	lea    eax,[ebp-0x1]
c0017985:	8d 55 f7             	lea    edx,[ebp-0x9]
c0017988:	3c 1e                	cmp    al,0x1e
c001798a:	0f 96 c0             	setbe  al
c001798d:	80 fa 01             	cmp    dl,0x1
c0017990:	0f 97 c2             	seta   dl
c0017993:	0f b6 d2             	movzx  edx,dl
c0017996:	85 c2                	test   edx,eax
c0017998:	74 2e                	je     c00179c8 <VgaText::receiveKey(unsigned char)+0x112>
c001799a:	83 ff 0d             	cmp    edi,0xd
c001799d:	74 29                	je     c00179c8 <VgaText::receiveKey(unsigned char)+0x112>
c001799f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179a2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179a5:	68 49 19 03 c0       	push   0xc0031949
c00179aa:	53                   	push   ebx
c00179ab:	e8 68 fc ff ff       	call   c0017618 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00179b0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179b3:	8d 45 40             	lea    eax,[ebp+0x40]
c00179b6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179b9:	0f b6 c0             	movzx  eax,al
c00179bc:	50                   	push   eax
c00179bd:	53                   	push   ebx
c00179be:	e8 d5 f9 ff ff       	call   c0017398 <VgaText::putchar(char, VgaColour, VgaColour)>
c00179c3:	83 c4 20             	add    esp,0x20
c00179c6:	eb 11                	jmp    c00179d9 <VgaText::receiveKey(unsigned char)+0x123>
c00179c8:	89 e8                	mov    eax,ebp
c00179ca:	51                   	push   ecx
c00179cb:	0f be c0             	movsx  eax,al
c00179ce:	51                   	push   ecx
c00179cf:	50                   	push   eax
c00179d0:	53                   	push   ebx
c00179d1:	e8 92 fa ff ff       	call   c0017468 <VgaText::putchar(char)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00179de:	89 e8                	mov    eax,ebp
c00179e0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00179e4:	52                   	push   edx
c00179e5:	52                   	push   edx
c00179e6:	8d 44 24 26          	lea    eax,[esp+0x26]
c00179ea:	50                   	push   eax
c00179eb:	56                   	push   esi
c00179ec:	e8 4f 8e fe ff       	call   c0000840 <strcat>
c00179f1:	83 c4 10             	add    esp,0x10
c00179f4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00179fa:	b0 01                	mov    al,0x1
c00179fc:	83 ff 1c             	cmp    edi,0x1c
c00179ff:	77 0e                	ja     c0017a0f <VgaText::receiveKey(unsigned char)+0x159>
c0017a01:	b8 08 04 00 10       	mov    eax,0x10000408
c0017a06:	89 f9                	mov    ecx,edi
c0017a08:	d3 e8                	shr    eax,cl
c0017a0a:	f7 d0                	not    eax
c0017a0c:	83 e0 01             	and    eax,0x1
c0017a0f:	84 c0                	test   al,al
c0017a11:	74 04                	je     c0017a17 <VgaText::receiveKey(unsigned char)+0x161>
c0017a13:	84 d2                	test   dl,dl
c0017a15:	74 22                	je     c0017a39 <VgaText::receiveKey(unsigned char)+0x183>
c0017a17:	81 c3 02 01 00 00    	add    ebx,0x102
c0017a1d:	50                   	push   eax
c0017a1e:	50                   	push   eax
c0017a1f:	56                   	push   esi
c0017a20:	53                   	push   ebx
c0017a21:	e8 1a 8e fe ff       	call   c0000840 <strcat>
c0017a26:	83 c4 0c             	add    esp,0xc
c0017a29:	68 80 00 00 00       	push   0x80
c0017a2e:	6a 00                	push   0x0
c0017a30:	56                   	push   esi
c0017a31:	e8 ba 8a fe ff       	call   c00004f0 <memset>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	83 c4 2c             	add    esp,0x2c
c0017a3c:	5b                   	pop    ebx
c0017a3d:	5e                   	pop    esi
c0017a3e:	5f                   	pop    edi
c0017a3f:	5d                   	pop    ebp
c0017a40:	c3                   	ret    
c0017a41:	90                   	nop

c0017a42 <VgaText::doUpdate()>:
c0017a42:	c3                   	ret    
c0017a43:	90                   	nop

c0017a44 <TSS::TSS()>:
c0017a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017a4f:	90                   	nop
c0017a50:	c3                   	ret    
c0017a51:	90                   	nop
c0017a52:	66 90                	xchg   ax,ax

c0017a54 <TSS::setESP(unsigned long)>:
c0017a54:	55                   	push   ebp
c0017a55:	89 e5                	mov    ebp,esp
c0017a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017a60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017a63:	90                   	nop
c0017a64:	5d                   	pop    ebp
c0017a65:	c3                   	ret    
c0017a66:	66 90                	xchg   ax,ax

c0017a68 <TSS::flush()>:
c0017a68:	55                   	push   ebp
c0017a69:	89 e5                	mov    ebp,esp
c0017a6b:	83 ec 10             	sub    esp,0x10
c0017a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a73:	83 c8 03             	or     eax,0x3
c0017a76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017a7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017a7e:	66 89 d0             	mov    ax,dx
c0017a81:	0f 00 d8             	ltr    ax
c0017a84:	90                   	nop
c0017a85:	c9                   	leave  
c0017a86:	c3                   	ret    
c0017a87:	90                   	nop

c0017a88 <TSS::setup(unsigned long, unsigned long)>:
c0017a88:	55                   	push   ebp
c0017a89:	89 e5                	mov    ebp,esp
c0017a8b:	83 ec 18             	sub    esp,0x18
c0017a8e:	83 ec 0c             	sub    esp,0xc
c0017a91:	6a 68                	push   0x68
c0017a93:	e8 1f eb ff ff       	call   c00165b7 <malloc>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	89 c2                	mov    edx,eax
c0017a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa9:	83 ec 04             	sub    esp,0x4
c0017aac:	6a 68                	push   0x68
c0017aae:	6a 00                	push   0x0
c0017ab0:	50                   	push   eax
c0017ab1:	e8 3a 8a fe ff       	call   c00004f0 <memset>
c0017ab6:	83 c4 10             	add    esp,0x10
c0017ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017abc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017abf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ac8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ad4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017ada:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ae3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017afb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b07:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b13:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b1f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b2b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017b2e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b43:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b50:	0f 20 da             	mov    edx,cr3
c0017b53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017b56:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017b59:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b62:	83 ec 08             	sub    esp,0x8
c0017b65:	50                   	push   eax
c0017b66:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017b69:	50                   	push   eax
c0017b6a:	e8 37 e2 ff ff       	call   c0015da6 <GDTEntry::setBase(unsigned int)>
c0017b6f:	83 c4 10             	add    esp,0x10
c0017b72:	83 ec 08             	sub    esp,0x8
c0017b75:	6a 68                	push   0x68
c0017b77:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017b7a:	50                   	push   eax
c0017b7b:	e8 42 e2 ff ff       	call   c0015dc2 <GDTEntry::setLimit(unsigned int)>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017b87:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017b8a:	83 e0 0f             	and    eax,0xf
c0017b8d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017b90:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017b93:	83 c8 40             	or     eax,0x40
c0017b96:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017b99:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0017b9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ba4:	05 78 01 00 00       	add    eax,0x178
c0017ba9:	83 ec 04             	sub    esp,0x4
c0017bac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017baf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017bb2:	50                   	push   eax
c0017bb3:	e8 3e e2 ff ff       	call   c0015df6 <GDT::addEntry(GDTEntry)>
c0017bb8:	83 c4 10             	add    esp,0x10
c0017bbb:	89 c2                	mov    edx,eax
c0017bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc0:	89 10                	mov    DWORD PTR [eax],edx
c0017bc2:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0017bc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bcd:	05 78 01 00 00       	add    eax,0x178
c0017bd2:	83 ec 0c             	sub    esp,0xc
c0017bd5:	50                   	push   eax
c0017bd6:	e8 45 e2 ff ff       	call   c0015e20 <GDT::flush()>
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017be3:	c9                   	leave  
c0017be4:	c3                   	ret    
c0017be5:	90                   	nop

c0017be6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bf1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017bf6:	75 08                	jne    c0017c00 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017bf8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017bfe:	eb 38                	jmp    c0017c38 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017c00:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c05:	75 17                	jne    c0017c1e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017c07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c15:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c1b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017c1e:	89 c1                	mov    ecx,eax
c0017c20:	83 e1 fd             	and    ecx,0xfffffffd
c0017c23:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017c29:	74 cd                	je     c0017bf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c2b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017c30:	83 e0 ef             	and    eax,0xffffffef
c0017c33:	83 f8 08             	cmp    eax,0x8
c0017c36:	76 c0                	jbe    c0017bf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c38:	31 c0                	xor    eax,eax
c0017c3a:	c3                   	ret    
c0017c3b:	90                   	nop

c0017c3c <ReservedFilename::isAtty()>:
c0017c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017c43:	31 c0                	xor    eax,eax
c0017c45:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017c4b:	74 09                	je     c0017c56 <ReservedFilename::isAtty()+0x1a>
c0017c4d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017c53:	0f 94 c0             	sete   al
c0017c56:	c3                   	ret    
c0017c57:	90                   	nop

c0017c58 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c67:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c6c:	75 08                	jne    c0017c76 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017c6e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c74:	eb 3d                	jmp    c0017cb3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017c76:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c7b:	75 17                	jne    c0017c94 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017c7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c91:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017c94:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017c99:	75 04                	jne    c0017c9f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017c9b:	89 0a                	mov    DWORD PTR [edx],ecx
c0017c9d:	eb 14                	jmp    c0017cb3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017c9f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017ca4:	74 c8                	je     c0017c6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017ca6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017cab:	83 e0 ef             	and    eax,0xffffffef
c0017cae:	83 f8 08             	cmp    eax,0x8
c0017cb1:	76 bb                	jbe    c0017c6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017cb3:	31 c0                	xor    eax,eax
c0017cb5:	c3                   	ret    

c0017cb6 <UnixFile::getFileDescriptor()>:
c0017cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cbd:	c3                   	ret    

c0017cbe <UnixFile::UnixFile(int)>:
c0017cbe:	53                   	push   ebx
c0017cbf:	83 ec 28             	sub    esp,0x28
c0017cc2:	ba 20 1a 03 c0       	mov    edx,0xc0031a20
c0017cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ccb:	89 10                	mov    DWORD PTR [eax],edx
c0017ccd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017cd5:	0f 8f 90 01 00 00    	jg     c0017e6b <UnixFile::UnixFile(int)+0x1ad>
c0017cdb:	a1 40 44 03 c0       	mov    eax,ds:0xc0034440
c0017ce0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ce3:	89 15 40 44 03 c0    	mov    DWORD PTR ds:0xc0034440,edx
c0017ce9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ced:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017cf0:	83 ec 08             	sub    esp,0x8
c0017cf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017cf7:	68 98 ba 03 c0       	push   0xc003ba98
c0017cfc:	e8 b7 72 01 00       	call   c002efb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d01:	83 c4 10             	add    esp,0x10
c0017d04:	a0 94 ba 03 c0       	mov    al,ds:0xc003ba94
c0017d09:	83 f0 01             	xor    eax,0x1
c0017d0c:	0f b6 c0             	movzx  eax,al
c0017d0f:	85 c0                	test   eax,eax
c0017d11:	0f 84 55 01 00 00    	je     c0017e6c <UnixFile::UnixFile(int)+0x1ae>
c0017d17:	c6 05 94 ba 03 c0 01 	mov    BYTE PTR ds:0xc003ba94,0x1
c0017d1e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017d26:	83 ec 0c             	sub    esp,0xc
c0017d29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d2d:	e8 85 e8 ff ff       	call   c00165b7 <malloc>
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	89 c3                	mov    ebx,eax
c0017d37:	83 ec 08             	sub    esp,0x8
c0017d3a:	68 03 ff ff 0f       	push   0xfffff03
c0017d3f:	53                   	push   ebx
c0017d40:	e8 2d 01 00 00       	call   c0017e72 <ReservedFilename::ReservedFilename(int)>
c0017d45:	83 c4 10             	add    esp,0x10
c0017d48:	89 1d 8c ba 03 c0    	mov    DWORD PTR ds:0xc003ba8c,ebx
c0017d4e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017d56:	83 ec 0c             	sub    esp,0xc
c0017d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d5d:	e8 55 e8 ff ff       	call   c00165b7 <malloc>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	89 c3                	mov    ebx,eax
c0017d67:	83 ec 08             	sub    esp,0x8
c0017d6a:	68 01 ff ff 0f       	push   0xfffff01
c0017d6f:	53                   	push   ebx
c0017d70:	e8 fd 00 00 00       	call   c0017e72 <ReservedFilename::ReservedFilename(int)>
c0017d75:	83 c4 10             	add    esp,0x10
c0017d78:	89 1d 90 ba 03 c0    	mov    DWORD PTR ds:0xc003ba90,ebx
c0017d7e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017d86:	83 ec 0c             	sub    esp,0xc
c0017d89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d8d:	e8 25 e8 ff ff       	call   c00165b7 <malloc>
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	89 c3                	mov    ebx,eax
c0017d97:	83 ec 08             	sub    esp,0x8
c0017d9a:	68 00 ff ff 0f       	push   0xfffff00
c0017d9f:	53                   	push   ebx
c0017da0:	e8 cd 00 00 00       	call   c0017e72 <ReservedFilename::ReservedFilename(int)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	89 1d 84 ba 03 c0    	mov    DWORD PTR ds:0xc003ba84,ebx
c0017dae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017dbd:	e8 f5 e7 ff ff       	call   c00165b7 <malloc>
c0017dc2:	83 c4 10             	add    esp,0x10
c0017dc5:	89 c3                	mov    ebx,eax
c0017dc7:	83 ec 08             	sub    esp,0x8
c0017dca:	68 02 ff ff 0f       	push   0xfffff02
c0017dcf:	53                   	push   ebx
c0017dd0:	e8 9d 00 00 00       	call   c0017e72 <ReservedFilename::ReservedFilename(int)>
c0017dd5:	83 c4 10             	add    esp,0x10
c0017dd8:	89 1d 88 ba 03 c0    	mov    DWORD PTR ds:0xc003ba88,ebx
c0017dde:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017de6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017deb:	7f 7f                	jg     c0017e6c <UnixFile::UnixFile(int)+0x1ae>
c0017ded:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017df5:	83 ec 0c             	sub    esp,0xc
c0017df8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017dfc:	e8 b6 e7 ff ff       	call   c00165b7 <malloc>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	89 c3                	mov    ebx,eax
c0017e06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e0a:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017e0f:	83 ec 08             	sub    esp,0x8
c0017e12:	50                   	push   eax
c0017e13:	53                   	push   ebx
c0017e14:	e8 59 00 00 00       	call   c0017e72 <ReservedFilename::ReservedFilename(int)>
c0017e19:	83 c4 10             	add    esp,0x10
c0017e1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e20:	89 1c 85 60 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45a0],ebx
c0017e27:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017e2f:	83 ec 0c             	sub    esp,0xc
c0017e32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e36:	e8 7c e7 ff ff       	call   c00165b7 <malloc>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	89 c3                	mov    ebx,eax
c0017e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e44:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017e49:	83 ec 08             	sub    esp,0x8
c0017e4c:	50                   	push   eax
c0017e4d:	53                   	push   ebx
c0017e4e:	e8 1f 00 00 00       	call   c0017e72 <ReservedFilename::ReservedFilename(int)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e5a:	89 1c 85 20 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45e0],ebx
c0017e61:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017e66:	e9 7b ff ff ff       	jmp    c0017de6 <UnixFile::UnixFile(int)+0x128>
c0017e6b:	90                   	nop
c0017e6c:	83 c4 28             	add    esp,0x28
c0017e6f:	5b                   	pop    ebx
c0017e70:	c3                   	ret    
c0017e71:	90                   	nop

c0017e72 <ReservedFilename::ReservedFilename(int)>:
c0017e72:	83 ec 0c             	sub    esp,0xc
c0017e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e79:	83 ec 08             	sub    esp,0x8
c0017e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e80:	50                   	push   eax
c0017e81:	e8 38 fe ff ff       	call   c0017cbe <UnixFile::UnixFile(int)>
c0017e86:	83 c4 10             	add    esp,0x10
c0017e89:	ba 3c 1a 03 c0       	mov    edx,0xc0031a3c
c0017e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e92:	89 10                	mov    DWORD PTR [eax],edx
c0017e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017e9f:	90                   	nop
c0017ea0:	83 c4 0c             	add    esp,0xc
c0017ea3:	c3                   	ret    

c0017ea4 <UnixFile::~UnixFile()>:
c0017ea4:	83 ec 1c             	sub    esp,0x1c
c0017ea7:	ba 20 1a 03 c0       	mov    edx,0xc0031a20
c0017eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb0:	89 10                	mov    DWORD PTR [eax],edx
c0017eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017eb9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017ebe:	7f 76                	jg     c0017f36 <UnixFile::~UnixFile()+0x92>
c0017ec0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ec8:	83 ec 0c             	sub    esp,0xc
c0017ecb:	68 98 ba 03 c0       	push   0xc003ba98
c0017ed0:	e8 b7 71 01 00       	call   c002f08c <LinkedList<UnixFile>::getFirstElement()>
c0017ed5:	83 c4 10             	add    esp,0x10
c0017ed8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017edc:	83 ec 0c             	sub    esp,0xc
c0017edf:	68 98 ba 03 c0       	push   0xc003ba98
c0017ee4:	e8 ab 71 01 00       	call   c002f094 <LinkedList<UnixFile>::removeFirst()>
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ef0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017ef4:	74 43                	je     c0017f39 <UnixFile::~UnixFile()+0x95>
c0017ef6:	83 ec 08             	sub    esp,0x8
c0017ef9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017efd:	68 98 ba 03 c0       	push   0xc003ba98
c0017f02:	e8 b1 70 01 00       	call   c002efb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017f07:	83 c4 10             	add    esp,0x10
c0017f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f0e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f15:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017f1a:	0f 94 c0             	sete   al
c0017f1d:	0f b6 c0             	movzx  eax,al
c0017f20:	85 c0                	test   eax,eax
c0017f22:	74 a4                	je     c0017ec8 <UnixFile::~UnixFile()+0x24>
c0017f24:	83 ec 0c             	sub    esp,0xc
c0017f27:	68 f8 19 03 c0       	push   0xc00319f8
c0017f2c:	e8 4d 88 00 00       	call   c002077e <KePanic(char const*)>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	eb 92                	jmp    c0017ec8 <UnixFile::~UnixFile()+0x24>
c0017f36:	90                   	nop
c0017f37:	eb 01                	jmp    c0017f3a <UnixFile::~UnixFile()+0x96>
c0017f39:	90                   	nop
c0017f3a:	90                   	nop
c0017f3b:	83 c4 1c             	add    esp,0x1c
c0017f3e:	c3                   	ret    
c0017f3f:	90                   	nop

c0017f40 <UnixFile::~UnixFile()>:
c0017f40:	83 ec 0c             	sub    esp,0xc
c0017f43:	83 ec 0c             	sub    esp,0xc
c0017f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f4a:	e8 55 ff ff ff       	call   c0017ea4 <UnixFile::~UnixFile()>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	83 ec 08             	sub    esp,0x8
c0017f55:	6a 0c                	push   0xc
c0017f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f5b:	e8 b8 13 00 00       	call   c0019318 <operator delete(void*, unsigned long)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	83 c4 0c             	add    esp,0xc
c0017f66:	c3                   	ret    
c0017f67:	90                   	nop

c0017f68 <ReservedFilename::~ReservedFilename()>:
c0017f68:	83 ec 0c             	sub    esp,0xc
c0017f6b:	ba 3c 1a 03 c0       	mov    edx,0xc0031a3c
c0017f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f74:	89 10                	mov    DWORD PTR [eax],edx
c0017f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f7a:	83 ec 0c             	sub    esp,0xc
c0017f7d:	50                   	push   eax
c0017f7e:	e8 21 ff ff ff       	call   c0017ea4 <UnixFile::~UnixFile()>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	90                   	nop
c0017f87:	83 c4 0c             	add    esp,0xc
c0017f8a:	c3                   	ret    
c0017f8b:	90                   	nop

c0017f8c <ReservedFilename::~ReservedFilename()>:
c0017f8c:	83 ec 0c             	sub    esp,0xc
c0017f8f:	83 ec 0c             	sub    esp,0xc
c0017f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f96:	e8 cd ff ff ff       	call   c0017f68 <ReservedFilename::~ReservedFilename()>
c0017f9b:	83 c4 10             	add    esp,0x10
c0017f9e:	83 ec 08             	sub    esp,0x8
c0017fa1:	6a 0c                	push   0xc
c0017fa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fa7:	e8 6c 13 00 00       	call   c0019318 <operator delete(void*, unsigned long)>
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	83 c4 0c             	add    esp,0xc
c0017fb2:	c3                   	ret    

c0017fb3 <KeGetFileFromDescriptor(int)>:
c0017fb3:	53                   	push   ebx
c0017fb4:	83 ec 08             	sub    esp,0x8
c0017fb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017fbb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017fc1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017fc7:	7f 2c                	jg     c0017ff5 <KeGetFileFromDescriptor(int)+0x42>
c0017fc9:	83 ec 0c             	sub    esp,0xc
c0017fcc:	68 98 ba 03 c0       	push   0xc003ba98
c0017fd1:	e8 b6 70 01 00       	call   c002f08c <LinkedList<UnixFile>::getFirstElement()>
c0017fd6:	83 c4 10             	add    esp,0x10
c0017fd9:	85 c0                	test   eax,eax
c0017fdb:	75 04                	jne    c0017fe1 <KeGetFileFromDescriptor(int)+0x2e>
c0017fdd:	31 c0                	xor    eax,eax
c0017fdf:	eb 6e                	jmp    c001804f <KeGetFileFromDescriptor(int)+0x9c>
c0017fe1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017fe4:	74 69                	je     c001804f <KeGetFileFromDescriptor(int)+0x9c>
c0017fe6:	52                   	push   edx
c0017fe7:	52                   	push   edx
c0017fe8:	50                   	push   eax
c0017fe9:	68 98 ba 03 c0       	push   0xc003ba98
c0017fee:	e8 43 71 01 00       	call   c002f136 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017ff3:	eb e1                	jmp    c0017fd6 <KeGetFileFromDescriptor(int)+0x23>
c0017ff5:	a1 8c ba 03 c0       	mov    eax,ds:0xc003ba8c
c0017ffa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0018000:	74 4d                	je     c001804f <KeGetFileFromDescriptor(int)+0x9c>
c0018002:	a1 90 ba 03 c0       	mov    eax,ds:0xc003ba90
c0018007:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001800d:	74 40                	je     c001804f <KeGetFileFromDescriptor(int)+0x9c>
c001800f:	a1 88 ba 03 c0       	mov    eax,ds:0xc003ba88
c0018014:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001801a:	74 33                	je     c001804f <KeGetFileFromDescriptor(int)+0x9c>
c001801c:	a1 84 ba 03 c0       	mov    eax,ds:0xc003ba84
c0018021:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0018027:	74 26                	je     c001804f <KeGetFileFromDescriptor(int)+0x9c>
c0018029:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001802f:	83 f8 08             	cmp    eax,0x8
c0018032:	77 09                	ja     c001803d <KeGetFileFromDescriptor(int)+0x8a>
c0018034:	8b 04 85 60 ba 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc45a0]
c001803b:	eb 12                	jmp    c001804f <KeGetFileFromDescriptor(int)+0x9c>
c001803d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0018043:	83 fb 08             	cmp    ebx,0x8
c0018046:	77 95                	ja     c0017fdd <KeGetFileFromDescriptor(int)+0x2a>
c0018048:	8b 04 9d 20 ba 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc45e0]
c001804f:	83 c4 08             	add    esp,0x8
c0018052:	5b                   	pop    ebx
c0018053:	c3                   	ret    

c0018054 <__static_initialization_and_destruction_0(int, int)>:
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001805c:	75 34                	jne    c0018092 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001805e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018066:	75 2a                	jne    c0018092 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	68 98 ba 03 c0       	push   0xc003ba98
c0018070:	e8 01 6f 01 00       	call   c002ef76 <LinkedList<UnixFile>::LinkedList()>
c0018075:	83 c4 10             	add    esp,0x10
c0018078:	83 ec 04             	sub    esp,0x4
c001807b:	68 b8 43 03 c0       	push   0xc00343b8
c0018080:	68 98 ba 03 c0       	push   0xc003ba98
c0018085:	68 74 ef 02 c0       	push   0xc002ef74
c001808a:	e8 39 12 00 00       	call   c00192c8 <__cxa_atexit>
c001808f:	83 c4 10             	add    esp,0x10
c0018092:	90                   	nop
c0018093:	83 c4 0c             	add    esp,0xc
c0018096:	c3                   	ret    

c0018097 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0018097:	83 ec 0c             	sub    esp,0xc
c001809a:	83 ec 08             	sub    esp,0x8
c001809d:	68 ff ff 00 00       	push   0xffff
c00180a2:	6a 01                	push   0x1
c00180a4:	e8 ab ff ff ff       	call   c0018054 <__static_initialization_and_destruction_0(int, int)>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	83 c4 0c             	add    esp,0xc
c00180af:	c3                   	ret    

c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00180b0:	53                   	push   ebx
c00180b1:	8b 15 48 44 03 c0    	mov    edx,DWORD PTR ds:0xc0034448
c00180b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00180c5:	89 d8                	mov    eax,ebx
c00180c7:	d1 e8                	shr    eax,1
c00180c9:	01 d0                	add    eax,edx
c00180cb:	80 e3 01             	and    bl,0x1
c00180ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00180d0:	75 09                	jne    c00180db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00180d2:	83 e2 f0             	and    edx,0xfffffff0
c00180d5:	09 ca                	or     edx,ecx
c00180d7:	88 10                	mov    BYTE PTR [eax],dl
c00180d9:	5b                   	pop    ebx
c00180da:	c3                   	ret    
c00180db:	83 e2 0f             	and    edx,0xf
c00180de:	0f b6 c9             	movzx  ecx,cl
c00180e1:	c1 e1 04             	shl    ecx,0x4
c00180e4:	09 ca                	or     edx,ecx
c00180e6:	88 10                	mov    BYTE PTR [eax],dl
c00180e8:	5b                   	pop    ebx
c00180e9:	c3                   	ret    

c00180ea <Virt::getPageState(unsigned long)>:
c00180ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180ee:	8b 0d 48 44 03 c0    	mov    ecx,DWORD PTR ds:0xc0034448
c00180f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00180fa:	89 d0                	mov    eax,edx
c00180fc:	d1 e8                	shr    eax,1
c00180fe:	80 e2 01             	and    dl,0x1
c0018101:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0018104:	74 03                	je     c0018109 <Virt::getPageState(unsigned long)+0x1f>
c0018106:	c1 e8 04             	shr    eax,0x4
c0018109:	83 e0 0f             	and    eax,0xf
c001810c:	c3                   	ret    

c001810d <Virt::allocateKernelVirtualPages(int)>:
c001810d:	55                   	push   ebp
c001810e:	31 ed                	xor    ebp,ebp
c0018110:	57                   	push   edi
c0018111:	31 ff                	xor    edi,edi
c0018113:	56                   	push   esi
c0018114:	53                   	push   ebx
c0018115:	31 db                	xor    ebx,ebx
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	8b 35 44 44 03 c0    	mov    esi,DWORD PTR ds:0xc0034444
c0018120:	56                   	push   esi
c0018121:	e8 c4 ff ff ff       	call   c00180ea <Virt::getPageState(unsigned long)>
c0018126:	5a                   	pop    edx
c0018127:	84 c0                	test   al,al
c0018129:	75 41                	jne    c001816c <Virt::allocateKernelVirtualPages(int)+0x5f>
c001812b:	85 db                	test   ebx,ebx
c001812d:	75 02                	jne    c0018131 <Virt::allocateKernelVirtualPages(int)+0x24>
c001812f:	89 f5                	mov    ebp,esi
c0018131:	83 c3 01             	add    ebx,0x1
c0018134:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018138:	74 5f                	je     c0018199 <Virt::allocateKernelVirtualPages(int)+0x8c>
c001813a:	83 c6 01             	add    esi,0x1
c001813d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018143:	76 34                	jbe    c0018179 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0018145:	c7 05 44 44 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0034444,0xc8000
c001814f:	f7 c7 01 00 00 00    	test   edi,0x1
c0018155:	75 2a                	jne    c0018181 <Virt::allocateKernelVirtualPages(int)+0x74>
c0018157:	be 00 80 0c 00       	mov    esi,0xc8000
c001815c:	bf 01 00 00 00       	mov    edi,0x1
c0018161:	56                   	push   esi
c0018162:	e8 83 ff ff ff       	call   c00180ea <Virt::getPageState(unsigned long)>
c0018167:	5a                   	pop    edx
c0018168:	84 c0                	test   al,al
c001816a:	74 bf                	je     c001812b <Virt::allocateKernelVirtualPages(int)+0x1e>
c001816c:	31 db                	xor    ebx,ebx
c001816e:	83 c6 01             	add    esi,0x1
c0018171:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018177:	77 cc                	ja     c0018145 <Virt::allocateKernelVirtualPages(int)+0x38>
c0018179:	89 35 44 44 03 c0    	mov    DWORD PTR ds:0xc0034444,esi
c001817f:	eb 9f                	jmp    c0018120 <Virt::allocateKernelVirtualPages(int)+0x13>
c0018181:	83 ec 0c             	sub    esp,0xc
c0018184:	68 50 1a 03 c0       	push   0xc0031a50
c0018189:	e8 f0 85 00 00       	call   c002077e <KePanic(char const*)>
c001818e:	8b 35 44 44 03 c0    	mov    esi,DWORD PTR ds:0xc0034444
c0018194:	83 c4 10             	add    esp,0x10
c0018197:	eb 87                	jmp    c0018120 <Virt::allocateKernelVirtualPages(int)+0x13>
c0018199:	89 2d 44 44 03 c0    	mov    DWORD PTR ds:0xc0034444,ebp
c001819f:	83 fb 01             	cmp    ebx,0x1
c00181a2:	74 6f                	je     c0018213 <Virt::allocateKernelVirtualPages(int)+0x106>
c00181a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181a8:	85 c9                	test   ecx,ecx
c00181aa:	74 49                	je     c00181f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181b0:	89 e8                	mov    eax,ebp
c00181b2:	31 db                	xor    ebx,ebx
c00181b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00181b7:	eb 18                	jmp    c00181d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00181b9:	6a 01                	push   0x1
c00181bb:	83 c3 01             	add    ebx,0x1
c00181be:	50                   	push   eax
c00181bf:	e8 ec fe ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181c4:	58                   	pop    eax
c00181c5:	5a                   	pop    edx
c00181c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00181ca:	74 29                	je     c00181f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181cc:	a1 44 44 03 c0       	mov    eax,ds:0xc0034444
c00181d1:	8d 50 01             	lea    edx,[eax+0x1]
c00181d4:	85 db                	test   ebx,ebx
c00181d6:	89 15 44 44 03 c0    	mov    DWORD PTR ds:0xc0034444,edx
c00181dc:	74 24                	je     c0018202 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00181de:	39 df                	cmp    edi,ebx
c00181e0:	75 d7                	jne    c00181b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00181e2:	6a 03                	push   0x3
c00181e4:	83 c3 01             	add    ebx,0x1
c00181e7:	50                   	push   eax
c00181e8:	e8 c3 fe ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181ed:	59                   	pop    ecx
c00181ee:	5e                   	pop    esi
c00181ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00181f3:	75 d7                	jne    c00181cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00181f5:	83 c4 0c             	add    esp,0xc
c00181f8:	89 e8                	mov    eax,ebp
c00181fa:	5b                   	pop    ebx
c00181fb:	c1 e0 0c             	shl    eax,0xc
c00181fe:	5e                   	pop    esi
c00181ff:	5f                   	pop    edi
c0018200:	5d                   	pop    ebp
c0018201:	c3                   	ret    
c0018202:	6a 02                	push   0x2
c0018204:	bb 01 00 00 00       	mov    ebx,0x1
c0018209:	50                   	push   eax
c001820a:	e8 a1 fe ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001820f:	58                   	pop    eax
c0018210:	5a                   	pop    edx
c0018211:	eb b9                	jmp    c00181cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0018213:	6a 04                	push   0x4
c0018215:	8d 45 01             	lea    eax,[ebp+0x1]
c0018218:	55                   	push   ebp
c0018219:	a3 44 44 03 c0       	mov    ds:0xc0034444,eax
c001821e:	e8 8d fe ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018223:	5b                   	pop    ebx
c0018224:	89 e8                	mov    eax,ebp
c0018226:	5e                   	pop    esi
c0018227:	c1 e0 0c             	shl    eax,0xc
c001822a:	83 c4 0c             	add    esp,0xc
c001822d:	5b                   	pop    ebx
c001822e:	5e                   	pop    esi
c001822f:	5f                   	pop    edi
c0018230:	5d                   	pop    ebp
c0018231:	c3                   	ret    

c0018232 <Virt::freeSwapfilePage(unsigned long)>:
c0018232:	53                   	push   ebx
c0018233:	8b 15 ac ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baac
c0018239:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001823d:	b8 01 00 00 00       	mov    eax,0x1
c0018242:	89 cb                	mov    ebx,ecx
c0018244:	d3 e0                	shl    eax,cl
c0018246:	c1 eb 05             	shr    ebx,0x5
c0018249:	f7 d0                	not    eax
c001824b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001824e:	21 c1                	and    ecx,eax
c0018250:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0018253:	5b                   	pop    ebx
c0018254:	c3                   	ret    

c0018255 <Virt::swapIDToSector(unsigned long)>:
c0018255:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018259:	8b 15 4c 44 03 c0    	mov    edx,DWORD PTR ds:0xc003444c
c001825f:	8b 0d 54 44 03 c0    	mov    ecx,DWORD PTR ds:0xc0034454
c0018265:	0f af c2             	imul   eax,edx
c0018268:	01 c8                	add    eax,ecx
c001826a:	c3                   	ret    

c001826b <Virt::allocateSwapfilePage()>:
c001826b:	55                   	push   ebp
c001826c:	31 d2                	xor    edx,edx
c001826e:	57                   	push   edi
c001826f:	56                   	push   esi
c0018270:	53                   	push   ebx
c0018271:	83 ec 0c             	sub    esp,0xc
c0018274:	8b 0d 4c 44 03 c0    	mov    ecx,DWORD PTR ds:0xc003444c
c001827a:	a1 50 44 03 c0       	mov    eax,ds:0xc0034450
c001827f:	f7 f1                	div    ecx
c0018281:	39 0d 50 44 03 c0    	cmp    DWORD PTR ds:0xc0034450,ecx
c0018287:	72 2f                	jb     c00182b8 <Virt::allocateSwapfilePage()+0x4d>
c0018289:	8b 35 ac ba 03 c0    	mov    esi,DWORD PTR ds:0xc003baac
c001828f:	8b 16                	mov    edx,DWORD PTR [esi]
c0018291:	f6 c2 01             	test   dl,0x1
c0018294:	74 3e                	je     c00182d4 <Virt::allocateSwapfilePage()+0x69>
c0018296:	31 c9                	xor    ecx,ecx
c0018298:	bf 01 00 00 00       	mov    edi,0x1
c001829d:	eb 12                	jmp    c00182b1 <Virt::allocateSwapfilePage()+0x46>
c001829f:	89 fd                	mov    ebp,edi
c00182a1:	89 ca                	mov    edx,ecx
c00182a3:	d3 e5                	shl    ebp,cl
c00182a5:	c1 ea 05             	shr    edx,0x5
c00182a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00182ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00182ad:	85 ea                	test   edx,ebp
c00182af:	74 2c                	je     c00182dd <Virt::allocateSwapfilePage()+0x72>
c00182b1:	83 c1 01             	add    ecx,0x1
c00182b4:	39 c8                	cmp    eax,ecx
c00182b6:	77 e7                	ja     c001829f <Virt::allocateSwapfilePage()+0x34>
c00182b8:	83 ec 0c             	sub    esp,0xc
c00182bb:	68 e4 1c 03 c0       	push   0xc0031ce4
c00182c0:	e8 b9 84 00 00       	call   c002077e <KePanic(char const*)>
c00182c5:	83 c4 10             	add    esp,0x10
c00182c8:	31 c9                	xor    ecx,ecx
c00182ca:	83 c4 0c             	add    esp,0xc
c00182cd:	89 c8                	mov    eax,ecx
c00182cf:	5b                   	pop    ebx
c00182d0:	5e                   	pop    esi
c00182d1:	5f                   	pop    edi
c00182d2:	5d                   	pop    ebp
c00182d3:	c3                   	ret    
c00182d4:	89 f3                	mov    ebx,esi
c00182d6:	bd 01 00 00 00       	mov    ebp,0x1
c00182db:	31 c9                	xor    ecx,ecx
c00182dd:	09 ea                	or     edx,ebp
c00182df:	89 c8                	mov    eax,ecx
c00182e1:	89 13                	mov    DWORD PTR [ebx],edx
c00182e3:	83 c4 0c             	add    esp,0xc
c00182e6:	5b                   	pop    ebx
c00182e7:	5e                   	pop    esi
c00182e8:	5f                   	pop    edi
c00182e9:	5d                   	pop    ebp
c00182ea:	c3                   	ret    

c00182eb <Virt::virtualMemorySetup()>:
c00182eb:	53                   	push   ebx
c00182ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00182f1:	6a 0f                	push   0xf
c00182f3:	53                   	push   ebx
c00182f4:	83 c3 01             	add    ebx,0x1
c00182f7:	e8 b4 fd ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182fc:	58                   	pop    eax
c00182fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018303:	5a                   	pop    edx
c0018304:	75 eb                	jne    c00182f1 <Virt::virtualMemorySetup()+0x6>
c0018306:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001830b:	6a 00                	push   0x0
c001830d:	53                   	push   ebx
c001830e:	83 c3 01             	add    ebx,0x1
c0018311:	e8 9a fd ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018316:	59                   	pop    ecx
c0018317:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001831d:	58                   	pop    eax
c001831e:	75 eb                	jne    c001830b <Virt::virtualMemorySetup()+0x20>
c0018320:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018325:	6a 0f                	push   0xf
c0018327:	53                   	push   ebx
c0018328:	83 c3 01             	add    ebx,0x1
c001832b:	e8 80 fd ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018330:	58                   	pop    eax
c0018331:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018337:	5a                   	pop    edx
c0018338:	75 eb                	jne    c0018325 <Virt::virtualMemorySetup()+0x3a>
c001833a:	5b                   	pop    ebx
c001833b:	c3                   	ret    

c001833c <Virt::setupPageSwapping(int)>:
c001833c:	53                   	push   ebx
c001833d:	83 ec 0c             	sub    esp,0xc
c0018340:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018344:	a1 88 03 04 c0       	mov    eax,ds:0xc0040388
c0018349:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001834f:	8b 10                	mov    edx,DWORD PTR [eax]
c0018351:	53                   	push   ebx
c0018352:	c1 e3 0b             	shl    ebx,0xb
c0018355:	68 fb 1c 03 c0       	push   0xc0031cfb
c001835a:	50                   	push   eax
c001835b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001835e:	89 1d 50 44 03 c0    	mov    DWORD PTR ds:0xc0034450,ebx
c0018364:	c6 05 58 44 03 c0 43 	mov    BYTE PTR ds:0xc0034458,0x43
c001836b:	c1 eb 08             	shr    ebx,0x8
c001836e:	a3 54 44 03 c0       	mov    ds:0xc0034454,eax
c0018373:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018376:	c7 05 4c 44 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc003444c,0x8
c0018380:	e8 32 e2 ff ff       	call   c00165b7 <malloc>
c0018385:	83 c4 0c             	add    esp,0xc
c0018388:	89 c1                	mov    ecx,eax
c001838a:	a3 ac ba 03 c0       	mov    ds:0xc003baac,eax
c001838f:	31 d2                	xor    edx,edx
c0018391:	a1 50 44 03 c0       	mov    eax,ds:0xc0034450
c0018396:	f7 35 4c 44 03 c0    	div    DWORD PTR ds:0xc003444c
c001839c:	c1 e8 05             	shr    eax,0x5
c001839f:	50                   	push   eax
c00183a0:	6a 00                	push   0x0
c00183a2:	51                   	push   ecx
c00183a3:	e8 48 81 fe ff       	call   c00004f0 <memset>
c00183a8:	83 c4 18             	add    esp,0x18
c00183ab:	5b                   	pop    ebx
c00183ac:	c3                   	ret    
c00183ad:	90                   	nop

c00183ae <VAS::setCPUSpecific(unsigned long)>:
c00183ae:	c3                   	ret    
c00183af:	90                   	nop

c00183b0 <VAS::VAS(VAS*)>:
c00183b0:	83 ec 0c             	sub    esp,0xc
c00183b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00183c9:	83 ec 0c             	sub    esp,0xc
c00183cc:	68 70 1a 03 c0       	push   0xc0031a70
c00183d1:	e8 a8 83 00 00       	call   c002077e <KePanic(char const*)>
c00183d6:	83 c4 10             	add    esp,0x10
c00183d9:	90                   	nop
c00183da:	83 c4 0c             	add    esp,0xc
c00183dd:	c3                   	ret    

c00183de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00183de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00183e7:	89 c2                	mov    edx,eax
c00183e9:	c1 e8 0a             	shr    eax,0xa
c00183ec:	c1 ea 16             	shr    edx,0x16
c00183ef:	83 f9 01             	cmp    ecx,0x1
c00183f2:	19 c9                	sbb    ecx,ecx
c00183f4:	c1 e2 0c             	shl    edx,0xc
c00183f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00183fd:	25 fc 0f 00 00       	and    eax,0xffc
c0018402:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018409:	01 d0                	add    eax,edx
c001840b:	c3                   	ret    

c001840c <VAS::getPageTableEntry(unsigned long)>:
c001840c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018410:	89 ca                	mov    edx,ecx
c0018412:	c1 e9 0a             	shr    ecx,0xa
c0018415:	c1 ea 16             	shr    edx,0x16
c0018418:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001841e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018424:	c1 e0 0c             	shl    eax,0xc
c0018427:	8d 04 08             	lea    eax,[eax+ecx*1]
c001842a:	c3                   	ret    

c001842b <Virt::freeKernelVirtualPages(unsigned long)>:
c001842b:	55                   	push   ebp
c001842c:	57                   	push   edi
c001842d:	bf 01 00 00 00       	mov    edi,0x1
c0018432:	56                   	push   esi
c0018433:	53                   	push   ebx
c0018434:	83 ec 1c             	sub    esp,0x1c
c0018437:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001843b:	c1 ee 0c             	shr    esi,0xc
c001843e:	eb 48                	jmp    c0018488 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018440:	83 ec 08             	sub    esp,0x8
c0018443:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c0018448:	55                   	push   ebp
c0018449:	50                   	push   eax
c001844a:	e8 bd ff ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	8b 10                	mov    edx,DWORD PTR [eax]
c0018454:	f6 c6 04             	test   dh,0x4
c0018457:	75 70                	jne    c00184c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018459:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001845f:	83 fb 04             	cmp    ebx,0x4
c0018462:	0f 84 8a 00 00 00    	je     c00184f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018468:	83 fb 02             	cmp    ebx,0x2
c001846b:	0f 84 9a 00 00 00    	je     c001850b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018471:	83 fb 03             	cmp    ebx,0x3
c0018474:	0f 84 be 00 00 00    	je     c0018538 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001847a:	83 fb 01             	cmp    ebx,0x1
c001847d:	0f 84 a2 00 00 00    	je     c0018525 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018483:	83 c6 01             	add    esi,0x1
c0018486:	31 ff                	xor    edi,edi
c0018488:	56                   	push   esi
c0018489:	89 f5                	mov    ebp,esi
c001848b:	e8 5a fc ff ff       	call   c00180ea <Virt::getPageState(unsigned long)>
c0018490:	c1 e5 0c             	shl    ebp,0xc
c0018493:	0f b6 d8             	movzx  ebx,al
c0018496:	5a                   	pop    edx
c0018497:	85 db                	test   ebx,ebx
c0018499:	75 a5                	jne    c0018440 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001849b:	83 ec 0c             	sub    esp,0xc
c001849e:	68 12 1d 03 c0       	push   0xc0031d12
c00184a3:	e8 d6 82 00 00       	call   c002077e <KePanic(char const*)>
c00184a8:	5a                   	pop    edx
c00184a9:	59                   	pop    ecx
c00184aa:	55                   	push   ebp
c00184ab:	8b 2d b0 ba 03 c0    	mov    ebp,DWORD PTR ds:0xc003bab0
c00184b1:	55                   	push   ebp
c00184b2:	e8 55 ff ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00184bc:	f6 c6 04             	test   dh,0x4
c00184bf:	75 08                	jne    c00184c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00184c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184c7:	eb ba                	jmp    c0018483 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00184c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00184d3:	83 ec 0c             	sub    esp,0xc
c00184d6:	52                   	push   edx
c00184d7:	e8 7b e3 ff ff       	call   c0016857 <Phys::freePage(unsigned long)>
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	83 fb 04             	cmp    ebx,0x4
c00184e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184ec:	0f 85 76 ff ff ff    	jne    c0018468 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00184f2:	83 e7 01             	and    edi,0x1
c00184f5:	75 46                	jne    c001853d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00184f7:	c7 44 24 30 94 1a 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031a94
c00184ff:	83 c4 1c             	add    esp,0x1c
c0018502:	5b                   	pop    ebx
c0018503:	5e                   	pop    esi
c0018504:	5f                   	pop    edi
c0018505:	5d                   	pop    ebp
c0018506:	e9 73 82 00 00       	jmp    c002077e <KePanic(char const*)>
c001850b:	83 e7 01             	and    edi,0x1
c001850e:	75 15                	jne    c0018525 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	68 2e 1d 03 c0       	push   0xc0031d2e
c0018518:	e8 61 82 00 00       	call   c002077e <KePanic(char const*)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	e9 5e ff ff ff       	jmp    c0018483 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018525:	83 ec 08             	sub    esp,0x8
c0018528:	6a 00                	push   0x0
c001852a:	56                   	push   esi
c001852b:	e8 80 fb ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018530:	83 c4 10             	add    esp,0x10
c0018533:	e9 4b ff ff ff       	jmp    c0018483 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018538:	83 e7 01             	and    edi,0x1
c001853b:	75 16                	jne    c0018553 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001853d:	83 ec 08             	sub    esp,0x8
c0018540:	6a 00                	push   0x0
c0018542:	56                   	push   esi
c0018543:	e8 68 fb ff ff       	call   c00180b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018548:	83 c4 10             	add    esp,0x10
c001854b:	83 c4 1c             	add    esp,0x1c
c001854e:	5b                   	pop    ebx
c001854f:	5e                   	pop    esi
c0018550:	5f                   	pop    edi
c0018551:	5d                   	pop    ebp
c0018552:	c3                   	ret    
c0018553:	c7 44 24 30 4a 1d 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031d4a
c001855b:	83 c4 1c             	add    esp,0x1c
c001855e:	5b                   	pop    ebx
c001855f:	5e                   	pop    esi
c0018560:	5f                   	pop    edi
c0018561:	5d                   	pop    ebp
c0018562:	e9 17 82 00 00       	jmp    c002077e <KePanic(char const*)>
c0018567:	90                   	nop

c0018568 <VAS::freeAllocatedPages(unsigned long)>:
c0018568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001856c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018570:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018574:	74 09                	je     c001857f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018576:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001857a:	e9 ac fe ff ff       	jmp    c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c001857f:	c7 44 24 04 b8 1a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031ab8
c0018587:	e9 b9 0e 00 00       	jmp    c0019445 <Dbg::kprintf(char const*, ...)>

c001858c <VAS::virtualToPhysical(unsigned long)>:
c001858c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018590:	50                   	push   eax
c0018591:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018595:	52                   	push   edx
c0018596:	e8 71 fe ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c001859b:	59                   	pop    ecx
c001859c:	8b 00                	mov    eax,DWORD PTR [eax]
c001859e:	5a                   	pop    edx
c001859f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185a4:	c3                   	ret    
c00185a5:	90                   	nop

c00185a6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00185a6:	55                   	push   ebp
c00185a7:	57                   	push   edi
c00185a8:	56                   	push   esi
c00185a9:	53                   	push   ebx
c00185aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185ae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00185b2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185b6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00185ba:	85 db                	test   ebx,ebx
c00185bc:	7e 24                	jle    c00185e2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00185be:	c1 e3 0c             	shl    ebx,0xc
c00185c1:	01 f3                	add    ebx,esi
c00185c3:	56                   	push   esi
c00185c4:	81 c6 00 10 00 00    	add    esi,0x1000
c00185ca:	55                   	push   ebp
c00185cb:	e8 3c fe ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c00185d0:	5a                   	pop    edx
c00185d1:	59                   	pop    ecx
c00185d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00185d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185d8:	21 f9                	and    ecx,edi
c00185da:	09 d1                	or     ecx,edx
c00185dc:	39 f3                	cmp    ebx,esi
c00185de:	89 08                	mov    DWORD PTR [eax],ecx
c00185e0:	75 e1                	jne    c00185c3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00185e2:	5b                   	pop    ebx
c00185e3:	5e                   	pop    esi
c00185e4:	5f                   	pop    edi
c00185e5:	5d                   	pop    ebp
c00185e6:	c3                   	ret    
c00185e7:	90                   	nop

c00185e8 <VAS::VAS()>:
c00185e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00185f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00185fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018602:	a3 b0 ba 03 c0       	mov    ds:0xc003bab0,eax
c0018607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001860b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001860f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018613:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001861a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018621:	ba 7d 60 03 c0       	mov    edx,0xc003607d
c0018626:	b8 00 60 03 c0       	mov    eax,0xc0036000
c001862b:	29 c2                	sub    edx,eax
c001862d:	89 d0                	mov    eax,edx
c001862f:	05 ff 0f 00 00       	add    eax,0xfff
c0018634:	c1 e8 0c             	shr    eax,0xc
c0018637:	89 c2                	mov    edx,eax
c0018639:	b8 00 60 03 c0       	mov    eax,0xc0036000
c001863e:	6a 04                	push   0x4
c0018640:	6a ff                	push   0xffffffff
c0018642:	52                   	push   edx
c0018643:	50                   	push   eax
c0018644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018648:	e8 59 ff ff ff       	call   c00185a6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001864d:	83 c4 14             	add    esp,0x14
c0018650:	90                   	nop
c0018651:	c3                   	ret    

c0018652 <VAS::setToWriteCombining(unsigned long, int)>:
c0018652:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018657:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001865d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018664:	75 01                	jne    c0018667 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018666:	c3                   	ret    
c0018667:	68 80 00 00 00       	push   0x80
c001866c:	6a ff                	push   0xffffffff
c001866e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018672:	50                   	push   eax
c0018673:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018677:	52                   	push   edx
c0018678:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001867c:	51                   	push   ecx
c001867d:	e8 24 ff ff ff       	call   c00185a6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018682:	83 c4 14             	add    esp,0x14
c0018685:	c3                   	ret    

c0018686 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001868a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001868d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018691:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018694:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018699:	83 f8 01             	cmp    eax,0x1
c001869c:	19 c0                	sbb    eax,eax
c001869e:	83 ca 03             	or     edx,0x3
c00186a1:	83 e0 fc             	and    eax,0xfffffffc
c00186a4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00186ab:	0f 20 d8             	mov    eax,cr3
c00186ae:	0f 22 d8             	mov    cr3,eax
c00186b1:	c3                   	ret    

c00186b2 <VAS::~VAS()>:
c00186b2:	83 ec 2c             	sub    esp,0x2c
c00186b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00186bd:	fa                   	cli    
c00186be:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00186c3:	83 c0 01             	add    eax,0x1
c00186c6:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00186cb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00186d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00186d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00186d5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00186db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00186df:	6a 01                	push   0x1
c00186e1:	50                   	push   eax
c00186e2:	e8 9f ff ff ff       	call   c0018686 <VAS::mapOtherVASIn(bool, VAS*)>
c00186e7:	83 c4 0c             	add    esp,0xc
c00186ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00186f2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00186fa:	0f 8f d8 00 00 00    	jg     c00187d8 <VAS::~VAS()+0x126>
c0018700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018704:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001870b:	c1 e2 02             	shl    edx,0x2
c001870e:	01 d0                	add    eax,edx
c0018710:	8b 00                	mov    eax,DWORD PTR [eax]
c0018712:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001871a:	83 e0 01             	and    eax,0x1
c001871d:	0f 84 ab 00 00 00    	je     c00187ce <VAS::~VAS()+0x11c>
c0018723:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001872b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018733:	7f 74                	jg     c00187a9 <VAS::~VAS()+0xf7>
c0018735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018739:	c1 e0 0a             	shl    eax,0xa
c001873c:	89 c2                	mov    edx,eax
c001873e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018742:	01 d0                	add    eax,edx
c0018744:	c1 e0 0c             	shl    eax,0xc
c0018747:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001874b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018750:	8b 00                	mov    eax,DWORD PTR [eax]
c0018752:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018755:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001875b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001875f:	6a 01                	push   0x1
c0018761:	50                   	push   eax
c0018762:	e8 77 fc ff ff       	call   c00183de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018767:	83 c4 0c             	add    esp,0xc
c001876a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001876e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018772:	8b 00                	mov    eax,DWORD PTR [eax]
c0018774:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001877c:	25 01 04 00 00       	and    eax,0x401
c0018781:	3d 01 04 00 00       	cmp    eax,0x401
c0018786:	75 1a                	jne    c00187a2 <VAS::~VAS()+0xf0>
c0018788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001878c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018791:	83 ec 0c             	sub    esp,0xc
c0018794:	50                   	push   eax
c0018795:	e8 bd e0 ff ff       	call   c0016857 <Phys::freePage(unsigned long)>
c001879a:	83 c4 10             	add    esp,0x10
c001879d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187a2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00187a7:	eb 82                	jmp    c001872b <VAS::~VAS()+0x79>
c00187a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ad:	25 00 04 00 00       	and    eax,0x400
c00187b2:	74 1a                	je     c00187ce <VAS::~VAS()+0x11c>
c00187b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00187bd:	83 ec 0c             	sub    esp,0xc
c00187c0:	50                   	push   eax
c00187c1:	e8 91 e0 ff ff       	call   c0016857 <Phys::freePage(unsigned long)>
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187ce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00187d3:	e9 1a ff ff ff       	jmp    c00186f2 <VAS::~VAS()+0x40>
c00187d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00187df:	83 ec 0c             	sub    esp,0xc
c00187e2:	50                   	push   eax
c00187e3:	e8 43 fc ff ff       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c00187e8:	83 c4 10             	add    esp,0x10
c00187eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00187f2:	83 ec 0c             	sub    esp,0xc
c00187f5:	50                   	push   eax
c00187f6:	e8 5c e0 ff ff       	call   c0016857 <Phys::freePage(unsigned long)>
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018803:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018808:	83 e8 01             	sub    eax,0x1
c001880b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0018810:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018815:	85 c0                	test   eax,eax
c0018817:	75 01                	jne    c001881a <VAS::~VAS()+0x168>
c0018819:	fb                   	sti    
c001881a:	90                   	nop
c001881b:	83 c4 2c             	add    esp,0x2c
c001881e:	c3                   	ret    
c001881f:	90                   	nop

c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018820:	55                   	push   ebp
c0018821:	57                   	push   edi
c0018822:	56                   	push   esi
c0018823:	53                   	push   ebx
c0018824:	83 ec 1c             	sub    esp,0x1c
c0018827:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001882b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001882f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018835:	77 08                	ja     c001883f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0018837:	0f 20 d8             	mov    eax,cr3
c001883a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001883d:	75 49                	jne    c0018888 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001883f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018843:	09 d8                	or     eax,ebx
c0018845:	a9 ff 0f 00 00       	test   eax,0xfff
c001884a:	75 59                	jne    c00188a5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001884c:	89 de                	mov    esi,ebx
c001884e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018851:	c1 ee 16             	shr    esi,0x16
c0018854:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001885b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001885f:	74 56                	je     c00188b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0018861:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018865:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018869:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001886f:	c1 eb 0a             	shr    ebx,0xa
c0018872:	c1 e6 0c             	shl    esi,0xc
c0018875:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001887b:	09 d0                	or     eax,edx
c001887d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0018880:	83 c4 1c             	add    esp,0x1c
c0018883:	5b                   	pop    ebx
c0018884:	5e                   	pop    esi
c0018885:	5f                   	pop    edi
c0018886:	5d                   	pop    ebp
c0018887:	c3                   	ret    
c0018888:	83 ec 0c             	sub    esp,0xc
c001888b:	68 dc 1a 03 c0       	push   0xc0031adc
c0018890:	e8 b0 0b 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001889c:	09 d8                	or     eax,ebx
c001889e:	a9 ff 0f 00 00       	test   eax,0xfff
c00188a3:	74 a7                	je     c001884c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188a5:	83 ec 0c             	sub    esp,0xc
c00188a8:	68 44 1b 03 c0       	push   0xc0031b44
c00188ad:	e8 cc 7e 00 00       	call   c002077e <KePanic(char const*)>
c00188b2:	83 c4 10             	add    esp,0x10
c00188b5:	eb 95                	jmp    c001884c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188bb:	e8 00 e0 ff ff       	call   c00168c0 <Phys::allocatePage()>
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	89 c5                	mov    ebp,eax
c00188c5:	8b 0d b0 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003bab0
c00188cb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00188cf:	6a 01                	push   0x1
c00188d1:	e8 37 f8 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c00188d6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00188dd:	6a 01                	push   0x1
c00188df:	50                   	push   eax
c00188e0:	55                   	push   ebp
c00188e1:	81 cd 07 04 00 00    	or     ebp,0x407
c00188e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00188eb:	51                   	push   ecx
c00188ec:	e8 29 01 00 00       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00188f1:	83 c4 1c             	add    esp,0x1c
c00188f4:	68 00 10 00 00       	push   0x1000
c00188f9:	6a 00                	push   0x0
c00188fb:	50                   	push   eax
c00188fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018900:	e8 eb 7b fe ff       	call   c00004f0 <memset>
c0018905:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001890c:	e8 1a fb ff ff       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c0018911:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018915:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018918:	83 c4 10             	add    esp,0x10
c001891b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001891e:	e9 3e ff ff ff       	jmp    c0018861 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0018923:	90                   	nop

c0018924 <VAS::allocatePages(int, int)>:
c0018924:	55                   	push   ebp
c0018925:	57                   	push   edi
c0018926:	56                   	push   esi
c0018927:	53                   	push   ebx
c0018928:	83 ec 1c             	sub    esp,0x1c
c001892b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001892f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018933:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018937:	75 71                	jne    c00189aa <VAS::allocatePages(int, int)+0x86>
c0018939:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001893c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018940:	85 c0                	test   eax,eax
c0018942:	74 4d                	je     c0018991 <VAS::allocatePages(int, int)+0x6d>
c0018944:	89 dd                	mov    ebp,ebx
c0018946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001894a:	c1 e5 0c             	shl    ebp,0xc
c001894d:	01 c5                	add    ebp,eax
c001894f:	85 db                	test   ebx,ebx
c0018951:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018954:	7e 29                	jle    c001897f <VAS::allocatePages(int, int)+0x5b>
c0018956:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001895a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001895e:	81 cf 00 04 00 00    	or     edi,0x400
c0018964:	e8 57 df ff ff       	call   c00168c0 <Phys::allocatePage()>
c0018969:	57                   	push   edi
c001896a:	53                   	push   ebx
c001896b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018971:	50                   	push   eax
c0018972:	56                   	push   esi
c0018973:	e8 a8 fe ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018978:	83 c4 10             	add    esp,0x10
c001897b:	39 dd                	cmp    ebp,ebx
c001897d:	75 e5                	jne    c0018964 <VAS::allocatePages(int, int)+0x40>
c001897f:	0f 20 d8             	mov    eax,cr3
c0018982:	0f 22 d8             	mov    cr3,eax
c0018985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018989:	83 c4 1c             	add    esp,0x1c
c001898c:	5b                   	pop    ebx
c001898d:	5e                   	pop    esi
c001898e:	5f                   	pop    edi
c001898f:	5d                   	pop    ebp
c0018990:	c3                   	ret    
c0018991:	83 ec 0c             	sub    esp,0xc
c0018994:	68 68 1b 03 c0       	push   0xc0031b68
c0018999:	e8 e0 7d 00 00       	call   c002077e <KePanic(char const*)>
c001899e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00189a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189a5:	83 c4 10             	add    esp,0x10
c00189a8:	eb 9a                	jmp    c0018944 <VAS::allocatePages(int, int)+0x20>
c00189aa:	83 ec 0c             	sub    esp,0xc
c00189ad:	53                   	push   ebx
c00189ae:	e8 5a f7 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c00189b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189b7:	83 c4 10             	add    esp,0x10
c00189ba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00189bf:	77 37                	ja     c00189f8 <VAS::allocatePages(int, int)+0xd4>
c00189c1:	85 db                	test   ebx,ebx
c00189c3:	7e ba                	jle    c001897f <VAS::allocatePages(int, int)+0x5b>
c00189c5:	c1 e3 0c             	shl    ebx,0xc
c00189c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189cc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00189d0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00189d3:	81 cf 00 04 00 00    	or     edi,0x400
c00189d9:	89 c3                	mov    ebx,eax
c00189db:	e8 e0 de ff ff       	call   c00168c0 <Phys::allocatePage()>
c00189e0:	57                   	push   edi
c00189e1:	53                   	push   ebx
c00189e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00189e8:	50                   	push   eax
c00189e9:	56                   	push   esi
c00189ea:	e8 31 fe ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c00189ef:	83 c4 10             	add    esp,0x10
c00189f2:	39 dd                	cmp    ebp,ebx
c00189f4:	75 e5                	jne    c00189db <VAS::allocatePages(int, int)+0xb7>
c00189f6:	eb 87                	jmp    c001897f <VAS::allocatePages(int, int)+0x5b>
c00189f8:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00189fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018a0a:	74 b5                	je     c00189c1 <VAS::allocatePages(int, int)+0x9d>
c0018a0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018a10:	80 ce 01             	or     dh,0x1
c0018a13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018a17:	eb a8                	jmp    c00189c1 <VAS::allocatePages(int, int)+0x9d>
c0018a19:	90                   	nop

c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018a1a:	55                   	push   ebp
c0018a1b:	57                   	push   edi
c0018a1c:	56                   	push   esi
c0018a1d:	53                   	push   ebx
c0018a1e:	83 ec 0c             	sub    esp,0xc
c0018a21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018a29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018a2d:	85 db                	test   ebx,ebx
c0018a2f:	7e 2f                	jle    c0018a60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018a31:	c1 e3 0c             	shl    ebx,0xc
c0018a34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018a3c:	01 d3                	add    ebx,edx
c0018a3e:	55                   	push   ebp
c0018a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a47:	29 c2                	sub    edx,eax
c0018a49:	01 f2                	add    edx,esi
c0018a4b:	52                   	push   edx
c0018a4c:	56                   	push   esi
c0018a4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0018a53:	57                   	push   edi
c0018a54:	e8 c7 fd ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	39 de                	cmp    esi,ebx
c0018a5e:	75 de                	jne    c0018a3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018a60:	0f 20 d8             	mov    eax,cr3
c0018a63:	0f 22 d8             	mov    cr3,eax
c0018a66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a6a:	83 c4 0c             	add    esp,0xc
c0018a6d:	5b                   	pop    ebx
c0018a6e:	5e                   	pop    esi
c0018a6f:	5f                   	pop    edi
c0018a70:	5d                   	pop    ebp
c0018a71:	c3                   	ret    

c0018a72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018a72:	55                   	push   ebp
c0018a73:	57                   	push   edi
c0018a74:	56                   	push   esi
c0018a75:	53                   	push   ebx
c0018a76:	83 ec 1c             	sub    esp,0x1c
c0018a79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018a7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018a81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a85:	09 f8                	or     eax,edi
c0018a87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018a8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0018a90:	75 4f                	jne    c0018ae1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018a92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018a96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018a99:	c1 eb 16             	shr    ebx,0x16
c0018a9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0018aa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0018aa7:	74 52                	je     c0018afb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0018aa9:	0f b6 f2             	movzx  esi,dl
c0018aac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018ab0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018ab4:	c1 e8 0a             	shr    eax,0xa
c0018ab7:	83 fe 01             	cmp    esi,0x1
c0018aba:	19 d2                	sbb    edx,edx
c0018abc:	c1 e3 0c             	shl    ebx,0xc
c0018abf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0018ac5:	25 fc 0f 00 00       	and    eax,0xffc
c0018aca:	01 d8                	add    eax,ebx
c0018acc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018ad0:	09 d9                	or     ecx,ebx
c0018ad2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018ad9:	83 c4 1c             	add    esp,0x1c
c0018adc:	5b                   	pop    ebx
c0018add:	5e                   	pop    esi
c0018ade:	5f                   	pop    edi
c0018adf:	5d                   	pop    ebp
c0018ae0:	c3                   	ret    
c0018ae1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ae5:	83 ec 0c             	sub    esp,0xc
c0018ae8:	68 94 1b 03 c0       	push   0xc0031b94
c0018aed:	e8 8c 7c 00 00       	call   c002077e <KePanic(char const*)>
c0018af2:	83 c4 10             	add    esp,0x10
c0018af5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018af9:	eb 97                	jmp    c0018a92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018afb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018aff:	e8 bc dd ff ff       	call   c00168c0 <Phys::allocatePage()>
c0018b04:	83 ec 0c             	sub    esp,0xc
c0018b07:	89 c5                	mov    ebp,eax
c0018b09:	8b 0d b0 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003bab0
c0018b0f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018b13:	6a 01                	push   0x1
c0018b15:	e8 f3 f5 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c0018b1a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018b21:	6a 01                	push   0x1
c0018b23:	50                   	push   eax
c0018b24:	55                   	push   ebp
c0018b25:	81 cd 07 04 00 00    	or     ebp,0x407
c0018b2b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018b2f:	51                   	push   ecx
c0018b30:	e8 e5 fe ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b35:	83 c4 1c             	add    esp,0x1c
c0018b38:	68 00 10 00 00       	push   0x1000
c0018b3d:	6a 00                	push   0x0
c0018b3f:	50                   	push   eax
c0018b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b44:	e8 a7 79 fe ff       	call   c00004f0 <memset>
c0018b49:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018b4d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018b50:	e8 d6 f8 ff ff       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c0018b55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018b58:	83 c4 10             	add    esp,0x10
c0018b5b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018b5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b62:	e9 42 ff ff ff       	jmp    c0018aa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0018b67:	90                   	nop

c0018b68 <VAS::VAS(bool)>:
c0018b68:	53                   	push   ebx
c0018b69:	83 ec 28             	sub    esp,0x28
c0018b6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b83:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b8e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018b92:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018b95:	e8 26 dd ff ff       	call   c00168c0 <Phys::allocatePage()>
c0018b9a:	89 c2                	mov    edx,eax
c0018b9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ba0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018ba3:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c0018ba9:	83 ec 0c             	sub    esp,0xc
c0018bac:	6a 01                	push   0x1
c0018bae:	e8 5a f5 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	89 c2                	mov    edx,eax
c0018bb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bbc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bbf:	83 ec 0c             	sub    esp,0xc
c0018bc2:	6a 03                	push   0x3
c0018bc4:	6a 01                	push   0x1
c0018bc6:	52                   	push   edx
c0018bc7:	50                   	push   eax
c0018bc8:	53                   	push   ebx
c0018bc9:	e8 4c fe ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bce:	83 c4 20             	add    esp,0x20
c0018bd1:	89 c2                	mov    edx,eax
c0018bd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bd7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018bda:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018be2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018bea:	7f 1d                	jg     c0018c09 <VAS::VAS(bool)+0xa1>
c0018bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018bf7:	c1 e2 02             	shl    edx,0x2
c0018bfa:	01 d0                	add    eax,edx
c0018bfc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c02:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018c07:	eb d9                	jmp    c0018be2 <VAS::VAS(bool)+0x7a>
c0018c09:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018c11:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018c19:	7f 7e                	jg     c0018c99 <VAS::VAS(bool)+0x131>
c0018c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c1f:	2d 00 02 00 00       	sub    eax,0x200
c0018c24:	c1 e0 0c             	shl    eax,0xc
c0018c27:	83 c8 05             	or     eax,0x5
c0018c2a:	89 c2                	mov    edx,eax
c0018c2c:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018c31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c37:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018c3d:	83 e0 10             	and    eax,0x10
c0018c40:	0f b6 c0             	movzx  eax,al
c0018c43:	85 c0                	test   eax,eax
c0018c45:	74 07                	je     c0018c4e <VAS::VAS(bool)+0xe6>
c0018c47:	b8 00 01 00 00       	mov    eax,0x100
c0018c4c:	eb 05                	jmp    c0018c53 <VAS::VAS(bool)+0xeb>
c0018c4e:	b8 00 00 00 00       	mov    eax,0x0
c0018c53:	09 d0                	or     eax,edx
c0018c55:	89 c1                	mov    ecx,eax
c0018c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c62:	c1 e2 02             	shl    edx,0x2
c0018c65:	01 d0                	add    eax,edx
c0018c67:	89 ca                	mov    edx,ecx
c0018c69:	89 10                	mov    DWORD PTR [eax],edx
c0018c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c6f:	2d 40 03 00 00       	sub    eax,0x340
c0018c74:	83 f8 7f             	cmp    eax,0x7f
c0018c77:	77 16                	ja     c0018c8f <VAS::VAS(bool)+0x127>
c0018c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c7d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c84:	c1 e2 02             	shl    edx,0x2
c0018c87:	01 d0                	add    eax,edx
c0018c89:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c8f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018c94:	e9 78 ff ff ff       	jmp    c0018c11 <VAS::VAS(bool)+0xa9>
c0018c99:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018c9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ca4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018caa:	83 e0 10             	and    eax,0x10
c0018cad:	0f b6 c0             	movzx  eax,al
c0018cb0:	85 c0                	test   eax,eax
c0018cb2:	74 07                	je     c0018cbb <VAS::VAS(bool)+0x153>
c0018cb4:	b8 03 41 00 00       	mov    eax,0x4103
c0018cb9:	eb 05                	jmp    c0018cc0 <VAS::VAS(bool)+0x158>
c0018cbb:	b8 03 40 00 00       	mov    eax,0x4003
c0018cc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018cc4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018cc7:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018ccd:	89 02                	mov    DWORD PTR [edx],eax
c0018ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cd3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018cd6:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018cdb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ce1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ce7:	83 e0 10             	and    eax,0x10
c0018cea:	0f b6 c0             	movzx  eax,al
c0018ced:	85 c0                	test   eax,eax
c0018cef:	74 07                	je     c0018cf8 <VAS::VAS(bool)+0x190>
c0018cf1:	b8 00 01 00 00       	mov    eax,0x100
c0018cf6:	eb 05                	jmp    c0018cfd <VAS::VAS(bool)+0x195>
c0018cf8:	b8 00 00 00 00       	mov    eax,0x0
c0018cfd:	09 c2                	or     edx,eax
c0018cff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d06:	05 fc 0f 00 00       	add    eax,0xffc
c0018d0b:	83 ca 03             	or     edx,0x3
c0018d0e:	89 10                	mov    DWORD PTR [eax],edx
c0018d10:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d15:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d1b:	83 ec 0c             	sub    esp,0xc
c0018d1e:	50                   	push   eax
c0018d1f:	e8 3c 2b 00 00       	call   c001b860 <Device::getName()>
c0018d24:	83 c4 10             	add    esp,0x10
c0018d27:	83 ec 08             	sub    esp,0x8
c0018d2a:	68 64 1d 03 c0       	push   0xc0031d64
c0018d2f:	50                   	push   eax
c0018d30:	e8 1b 7a fe ff       	call   c0000750 <strcmp>
c0018d35:	83 c4 10             	add    esp,0x10
c0018d38:	85 c0                	test   eax,eax
c0018d3a:	0f 94 c0             	sete   al
c0018d3d:	0f b6 c0             	movzx  eax,al
c0018d40:	85 c0                	test   eax,eax
c0018d42:	74 68                	je     c0018dac <VAS::VAS(bool)+0x244>
c0018d44:	fa                   	cli    
c0018d45:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d50:	05 7c 09 00 00       	add    eax,0x97c
c0018d55:	83 ec 0c             	sub    esp,0xc
c0018d58:	50                   	push   eax
c0018d59:	e8 d4 d2 ff ff       	call   c0016032 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d5e:	83 c4 10             	add    esp,0x10
c0018d61:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018d66:	89 c3                	mov    ebx,eax
c0018d68:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d73:	05 7c 09 00 00       	add    eax,0x97c
c0018d78:	83 ec 0c             	sub    esp,0xc
c0018d7b:	50                   	push   eax
c0018d7c:	e8 b1 d2 ff ff       	call   c0016032 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	83 ec 08             	sub    esp,0x8
c0018d87:	50                   	push   eax
c0018d88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d8c:	e8 7b f6 ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c0018d91:	83 c4 10             	add    esp,0x10
c0018d94:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018d9b:	6a 11                	push   0x11
c0018d9d:	53                   	push   ebx
c0018d9e:	50                   	push   eax
c0018d9f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018da3:	e8 78 fa ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018da8:	83 c4 10             	add    esp,0x10
c0018dab:	fb                   	sti    
c0018dac:	90                   	nop
c0018dad:	83 c4 28             	add    esp,0x28
c0018db0:	5b                   	pop    ebx
c0018db1:	c3                   	ret    

c0018db2 <VAS::evict(unsigned long)>:
c0018db2:	55                   	push   ebp
c0018db3:	57                   	push   edi
c0018db4:	56                   	push   esi
c0018db5:	53                   	push   ebx
c0018db6:	83 ec 1c             	sub    esp,0x1c
c0018db9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018dbd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018dc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018dc5:	e8 a1 f4 ff ff       	call   c001826b <Virt::allocateSwapfilePage()>
c0018dca:	89 c7                	mov    edi,eax
c0018dcc:	a1 4c 44 03 c0       	mov    eax,ds:0xc003444c
c0018dd1:	85 c0                	test   eax,eax
c0018dd3:	7e 40                	jle    c0018e15 <VAS::evict(unsigned long)+0x63>
c0018dd5:	89 ee                	mov    esi,ebp
c0018dd7:	31 db                	xor    ebx,ebx
c0018dd9:	83 ec 0c             	sub    esp,0xc
c0018ddc:	57                   	push   edi
c0018ddd:	e8 73 f4 ff ff       	call   c0018255 <Virt::swapIDToSector(unsigned long)>
c0018de2:	89 34 24             	mov    DWORD PTR [esp],esi
c0018de5:	01 d8                	add    eax,ebx
c0018de7:	6a 01                	push   0x1
c0018de9:	31 d2                	xor    edx,edx
c0018deb:	83 c3 01             	add    ebx,0x1
c0018dee:	52                   	push   edx
c0018def:	81 c6 00 02 00 00    	add    esi,0x200
c0018df5:	50                   	push   eax
c0018df6:	0f be 05 58 44 03 c0 	movsx  eax,BYTE PTR ds:0xc0034458
c0018dfd:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0018e04:	50                   	push   eax
c0018e05:	e8 56 3c 00 00       	call   c001ca60 <LogicalDisk::write(unsigned long long, int, void*)>
c0018e0a:	83 c4 20             	add    esp,0x20
c0018e0d:	39 1d 4c 44 03 c0    	cmp    DWORD PTR ds:0xc003444c,ebx
c0018e13:	7f c4                	jg     c0018dd9 <VAS::evict(unsigned long)+0x27>
c0018e15:	83 ec 08             	sub    esp,0x8
c0018e18:	c1 e7 0c             	shl    edi,0xc
c0018e1b:	55                   	push   ebp
c0018e1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e20:	50                   	push   eax
c0018e21:	e8 e6 f5 ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c0018e26:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e28:	89 d3                	mov    ebx,edx
c0018e2a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018e30:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018e36:	09 d7                	or     edi,edx
c0018e38:	89 38                	mov    DWORD PTR [eax],edi
c0018e3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e3d:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c0018e43:	83 c2 01             	add    edx,0x1
c0018e46:	89 15 a8 ba 03 c0    	mov    DWORD PTR ds:0xc003baa8,edx
c0018e4c:	e8 06 da ff ff       	call   c0016857 <Phys::freePage(unsigned long)>
c0018e51:	0f 20 d8             	mov    eax,cr3
c0018e54:	0f 22 d8             	mov    cr3,eax
c0018e57:	8b 0d a8 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003baa8
c0018e5d:	51                   	push   ecx
c0018e5e:	55                   	push   ebp
c0018e5f:	53                   	push   ebx
c0018e60:	68 b8 1b 03 c0       	push   0xc0031bb8
c0018e65:	e8 db 05 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0018e6a:	a1 a4 ba 03 c0       	mov    eax,ds:0xc003baa4
c0018e6f:	c7 44 24 50 72 1d 03 c0 	mov    DWORD PTR [esp+0x50],0xc0031d72
c0018e77:	8d 50 01             	lea    edx,[eax+0x1]
c0018e7a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018e7e:	89 15 a4 ba 03 c0    	mov    DWORD PTR ds:0xc003baa4,edx
c0018e84:	83 c4 3c             	add    esp,0x3c
c0018e87:	5b                   	pop    ebx
c0018e88:	5e                   	pop    esi
c0018e89:	5f                   	pop    edi
c0018e8a:	5d                   	pop    ebp
c0018e8b:	e9 b5 05 00 00       	jmp    c0019445 <Dbg::kprintf(char const*, ...)>

c0018e90 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018e90:	55                   	push   ebp
c0018e91:	57                   	push   edi
c0018e92:	56                   	push   esi
c0018e93:	53                   	push   ebx
c0018e94:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018e9a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018ea1:	89 f3                	mov    ebx,esi
c0018ea3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ea9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018eaf:	77 22                	ja     c0018ed3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018eb1:	83 ec 08             	sub    esp,0x8
c0018eb4:	56                   	push   esi
c0018eb5:	68 95 1d 03 c0       	push   0xc0031d95
c0018eba:	e8 86 05 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0018ebf:	83 c4 10             	add    esp,0x10
c0018ec2:	85 db                	test   ebx,ebx
c0018ec4:	75 2a                	jne    c0018ef0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018ec6:	31 c0                	xor    eax,eax
c0018ec8:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018ece:	5b                   	pop    ebx
c0018ecf:	5e                   	pop    esi
c0018ed0:	5f                   	pop    edi
c0018ed1:	5d                   	pop    ebp
c0018ed2:	c3                   	ret    
c0018ed3:	83 ec 0c             	sub    esp,0xc
c0018ed6:	68 83 1d 03 c0       	push   0xc0031d83
c0018edb:	e8 9e 78 00 00       	call   c002077e <KePanic(char const*)>
c0018ee0:	5f                   	pop    edi
c0018ee1:	5d                   	pop    ebp
c0018ee2:	56                   	push   esi
c0018ee3:	68 95 1d 03 c0       	push   0xc0031d95
c0018ee8:	e8 58 05 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	83 ec 08             	sub    esp,0x8
c0018ef3:	53                   	push   ebx
c0018ef4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018efb:	51                   	push   ecx
c0018efc:	e8 0b f5 ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	89 c2                	mov    edx,eax
c0018f06:	85 c0                	test   eax,eax
c0018f08:	74 bc                	je     c0018ec6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f0a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018f0c:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018f12:	0f 85 c0 00 00 00    	jne    c0018fd8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018f18:	89 e8                	mov    eax,ebp
c0018f1a:	25 01 04 00 00       	and    eax,0x401
c0018f1f:	3d 00 04 00 00       	cmp    eax,0x400
c0018f24:	75 a0                	jne    c0018ec6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f2a:	c1 ed 0c             	shr    ebp,0xc
c0018f2d:	e8 8e d9 ff ff       	call   c00168c0 <Phys::allocatePage()>
c0018f32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f36:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018f38:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018f3e:	09 c1                	or     ecx,eax
c0018f40:	81 c9 01 08 00 00    	or     ecx,0x801
c0018f46:	89 0a                	mov    DWORD PTR [edx],ecx
c0018f48:	8b 15 4c 44 03 c0    	mov    edx,DWORD PTR ds:0xc003444c
c0018f4e:	85 d2                	test   edx,edx
c0018f50:	7e 40                	jle    c0018f92 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018f52:	89 df                	mov    edi,ebx
c0018f54:	31 f6                	xor    esi,esi
c0018f56:	83 ec 0c             	sub    esp,0xc
c0018f59:	55                   	push   ebp
c0018f5a:	e8 f6 f2 ff ff       	call   c0018255 <Virt::swapIDToSector(unsigned long)>
c0018f5f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f62:	01 f0                	add    eax,esi
c0018f64:	6a 01                	push   0x1
c0018f66:	31 d2                	xor    edx,edx
c0018f68:	83 c6 01             	add    esi,0x1
c0018f6b:	52                   	push   edx
c0018f6c:	81 c7 00 02 00 00    	add    edi,0x200
c0018f72:	50                   	push   eax
c0018f73:	0f be 05 58 44 03 c0 	movsx  eax,BYTE PTR ds:0xc0034458
c0018f7a:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0018f81:	50                   	push   eax
c0018f82:	e8 6d 3a 00 00       	call   c001c9f4 <LogicalDisk::read(unsigned long long, int, void*)>
c0018f87:	83 c4 20             	add    esp,0x20
c0018f8a:	39 35 4c 44 03 c0    	cmp    DWORD PTR ds:0xc003444c,esi
c0018f90:	7f c4                	jg     c0018f56 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018f92:	83 ec 04             	sub    esp,0x4
c0018f95:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0018f9a:	83 e8 01             	sub    eax,0x1
c0018f9d:	50                   	push   eax
c0018f9e:	a3 a8 ba 03 c0       	mov    ds:0xc003baa8,eax
c0018fa3:	53                   	push   ebx
c0018fa4:	68 a8 1d 03 c0       	push   0xc0031da8
c0018fa9:	e8 97 04 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0018fae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018fb1:	e8 7c f2 ff ff       	call   c0018232 <Virt::freeSwapfilePage(unsigned long)>
c0018fb6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018fbb:	83 c4 10             	add    esp,0x10
c0018fbe:	83 e8 01             	sub    eax,0x1
c0018fc1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0018fc6:	85 c0                	test   eax,eax
c0018fc8:	75 01                	jne    c0018fcb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018fca:	fb                   	sti    
c0018fcb:	0f 20 d8             	mov    eax,cr3
c0018fce:	0f 22 d8             	mov    cr3,eax
c0018fd1:	b0 01                	mov    al,0x1
c0018fd3:	e9 f0 fe ff ff       	jmp    c0018ec8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018fd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fdc:	bd 00 10 00 00       	mov    ebp,0x1000
c0018fe1:	83 ec 0c             	sub    esp,0xc
c0018fe4:	89 de                	mov    esi,ebx
c0018fe6:	68 e8 1b 03 c0       	push   0xc0031be8
c0018feb:	e8 55 04 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0018ff0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018ff4:	e8 c7 d8 ff ff       	call   c00168c0 <Phys::allocatePage()>
c0018ff9:	89 e9                	mov    ecx,ebp
c0018ffb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ffd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019001:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019003:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0019009:	09 c8                	or     eax,ecx
c001900b:	83 c8 02             	or     eax,0x2
c001900e:	89 02                	mov    DWORD PTR [edx],eax
c0019010:	0f 20 d8             	mov    eax,cr3
c0019013:	0f 22 d8             	mov    cr3,eax
c0019016:	8d 74 24 20          	lea    esi,[esp+0x20]
c001901a:	89 df                	mov    edi,ebx
c001901c:	89 e9                	mov    ecx,ebp
c001901e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019020:	b0 01                	mov    al,0x1
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	e9 9e fe ff ff       	jmp    c0018ec8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c001902a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001902a:	55                   	push   ebp
c001902b:	57                   	push   edi
c001902c:	56                   	push   esi
c001902d:	53                   	push   ebx
c001902e:	83 ec 28             	sub    esp,0x28
c0019031:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0019035:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019039:	50                   	push   eax
c001903a:	e8 ce f0 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c001903f:	83 c4 0c             	add    esp,0xc
c0019042:	89 c5                	mov    ebp,eax
c0019044:	6a 07                	push   0x7
c0019046:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001904a:	52                   	push   edx
c001904b:	56                   	push   esi
c001904c:	e8 d3 f8 ff ff       	call   c0018924 <VAS::allocatePages(int, int)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	89 c7                	mov    edi,eax
c0019056:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001905a:	85 c9                	test   ecx,ecx
c001905c:	74 2f                	je     c001908d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001905e:	31 db                	xor    ebx,ebx
c0019060:	e8 5b d8 ff ff       	call   c00168c0 <Phys::allocatePage()>
c0019065:	83 c3 01             	add    ebx,0x1
c0019068:	6a 03                	push   0x3
c001906a:	55                   	push   ebp
c001906b:	50                   	push   eax
c001906c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019070:	56                   	push   esi
c0019071:	e8 aa f7 ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019076:	6a 07                	push   0x7
c0019078:	57                   	push   edi
c0019079:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001907d:	50                   	push   eax
c001907e:	56                   	push   esi
c001907f:	e8 9c f7 ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0019084:	83 c4 20             	add    esp,0x20
c0019087:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c001908b:	75 d3                	jne    c0019060 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c001908d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019091:	89 28                	mov    DWORD PTR [eax],ebp
c0019093:	83 c4 1c             	add    esp,0x1c
c0019096:	89 f8                	mov    eax,edi
c0019098:	5b                   	pop    ebx
c0019099:	5e                   	pop    esi
c001909a:	5f                   	pop    edi
c001909b:	5d                   	pop    ebp
c001909c:	c3                   	ret    
c001909d:	90                   	nop

c001909e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001909e:	53                   	push   ebx
c001909f:	83 ec 14             	sub    esp,0x14
c00190a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00190a6:	68 08 1c 03 c0       	push   0xc0031c08
c00190ab:	e8 95 03 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00190b0:	c7 04 24 68 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c68
c00190b7:	e8 89 03 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00190bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00190c0:	83 c4 18             	add    esp,0x18
c00190c3:	5b                   	pop    ebx
c00190c4:	e9 62 f3 ff ff       	jmp    c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c00190c9:	90                   	nop

c00190ca <VAS::scanForEviction()>:
c00190ca:	57                   	push   edi
c00190cb:	56                   	push   esi
c00190cc:	31 f6                	xor    esi,esi
c00190ce:	53                   	push   ebx
c00190cf:	83 ec 10             	sub    esp,0x10
c00190d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00190d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00190df:	75 0e                	jne    c00190ef <VAS::scanForEviction()+0x25>
c00190e1:	89 da                	mov    edx,ebx
c00190e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00190e6:	c1 ea 16             	shr    edx,0x16
c00190e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00190ed:	74 57                	je     c0019146 <VAS::scanForEviction()+0x7c>
c00190ef:	53                   	push   ebx
c00190f0:	57                   	push   edi
c00190f1:	e8 16 f3 ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c00190f6:	5a                   	pop    edx
c00190f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00190f9:	59                   	pop    ecx
c00190fa:	89 d1                	mov    ecx,edx
c00190fc:	c1 e9 0c             	shr    ecx,0xc
c00190ff:	74 10                	je     c0019111 <VAS::scanForEviction()+0x47>
c0019101:	89 d1                	mov    ecx,edx
c0019103:	81 e1 01 08 00 00    	and    ecx,0x801
c0019109:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001910f:	74 40                	je     c0019151 <VAS::scanForEviction()+0x87>
c0019111:	81 c3 00 10 00 00    	add    ebx,0x1000
c0019117:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001911d:	76 2d                	jbe    c001914c <VAS::scanForEviction()+0x82>
c001911f:	83 c6 01             	add    esi,0x1
c0019122:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0019129:	83 fe 03             	cmp    esi,0x3
c001912c:	74 32                	je     c0019160 <VAS::scanForEviction()+0x96>
c001912e:	31 db                	xor    ebx,ebx
c0019130:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019136:	75 b7                	jne    c00190ef <VAS::scanForEviction()+0x25>
c0019138:	89 da                	mov    edx,ebx
c001913a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001913d:	c1 ea 16             	shr    edx,0x16
c0019140:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019144:	75 a9                	jne    c00190ef <VAS::scanForEviction()+0x25>
c0019146:	81 c3 00 00 40 00    	add    ebx,0x400000
c001914c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001914f:	eb 88                	jmp    c00190d9 <VAS::scanForEviction()+0xf>
c0019151:	f6 c2 20             	test   dl,0x20
c0019154:	74 13                	je     c0019169 <VAS::scanForEviction()+0x9f>
c0019156:	83 e2 df             	and    edx,0xffffffdf
c0019159:	89 10                	mov    DWORD PTR [eax],edx
c001915b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001915e:	eb b1                	jmp    c0019111 <VAS::scanForEviction()+0x47>
c0019160:	83 c4 10             	add    esp,0x10
c0019163:	31 c0                	xor    eax,eax
c0019165:	5b                   	pop    ebx
c0019166:	5e                   	pop    esi
c0019167:	5f                   	pop    edi
c0019168:	c3                   	ret    
c0019169:	83 ec 08             	sub    esp,0x8
c001916c:	89 d0                	mov    eax,edx
c001916e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019173:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019177:	53                   	push   ebx
c0019178:	68 bd 1d 03 c0       	push   0xc0031dbd
c001917d:	e8 c3 02 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019182:	58                   	pop    eax
c0019183:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019186:	5a                   	pop    edx
c0019187:	51                   	push   ecx
c0019188:	57                   	push   edi
c0019189:	e8 24 fc ff ff       	call   c0018db2 <VAS::evict(unsigned long)>
c001918e:	5b                   	pop    ebx
c001918f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0019192:	5e                   	pop    esi
c0019193:	50                   	push   eax
c0019194:	68 d1 1d 03 c0       	push   0xc0031dd1
c0019199:	e8 a7 02 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001919e:	58                   	pop    eax
c001919f:	5a                   	pop    edx
c00191a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191a4:	50                   	push   eax
c00191a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191a9:	68 e4 1d 03 c0       	push   0xc0031de4
c00191ae:	e8 92 02 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00191b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00191b6:	83 c4 10             	add    esp,0x10
c00191b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c00191bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00191c6:	83 c4 10             	add    esp,0x10
c00191c9:	5b                   	pop    ebx
c00191ca:	5e                   	pop    esi
c00191cb:	5f                   	pop    edi
c00191cc:	c3                   	ret    

c00191cd <mapVASFirstTime>:
c00191cd:	55                   	push   ebp
c00191ce:	57                   	push   edi
c00191cf:	56                   	push   esi
c00191d0:	53                   	push   ebx
c00191d1:	83 ec 0c             	sub    esp,0xc
c00191d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00191dc:	83 fa 01             	cmp    edx,0x1
c00191df:	0f 84 cb 00 00 00    	je     c00192b0 <mapVASFirstTime+0xe3>
c00191e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00191e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00191eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00191f0:	c1 e5 15             	shl    ebp,0x15
c00191f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00191f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00191fe:	29 eb                	sub    ebx,ebp
c0019200:	29 ef                	sub    edi,ebp
c0019202:	e8 b9 d6 ff ff       	call   c00168c0 <Phys::allocatePage()>
c0019207:	83 ec 0c             	sub    esp,0xc
c001920a:	68 03 04 00 00       	push   0x403
c001920f:	6a 01                	push   0x1
c0019211:	53                   	push   ebx
c0019212:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019218:	50                   	push   eax
c0019219:	56                   	push   esi
c001921a:	e8 fb f7 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001921f:	83 c4 20             	add    esp,0x20
c0019222:	39 fb                	cmp    ebx,edi
c0019224:	75 dc                	jne    c0019202 <mapVASFirstTime+0x35>
c0019226:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001922b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019230:	29 eb                	sub    ebx,ebp
c0019232:	29 ef                	sub    edi,ebp
c0019234:	e8 87 d6 ff ff       	call   c00168c0 <Phys::allocatePage()>
c0019239:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001923d:	83 fa 01             	cmp    edx,0x1
c0019240:	19 d2                	sbb    edx,edx
c0019242:	83 ec 0c             	sub    esp,0xc
c0019245:	83 e2 04             	and    edx,0x4
c0019248:	81 c2 03 04 00 00    	add    edx,0x403
c001924e:	52                   	push   edx
c001924f:	6a 01                	push   0x1
c0019251:	53                   	push   ebx
c0019252:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019258:	50                   	push   eax
c0019259:	56                   	push   esi
c001925a:	e8 bb f7 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001925f:	83 c4 20             	add    esp,0x20
c0019262:	39 df                	cmp    edi,ebx
c0019264:	75 ce                	jne    c0019234 <mapVASFirstTime+0x67>
c0019266:	83 ec 0c             	sub    esp,0xc
c0019269:	bb 7c 70 03 c0       	mov    ebx,0xc003707c
c001926e:	6a 04                	push   0x4
c0019270:	81 eb 00 60 03 c0    	sub    ebx,0xc0036000
c0019276:	6a ff                	push   0xffffffff
c0019278:	c1 eb 0c             	shr    ebx,0xc
c001927b:	53                   	push   ebx
c001927c:	68 00 60 03 c0       	push   0xc0036000
c0019281:	56                   	push   esi
c0019282:	e8 1f f3 ff ff       	call   c00185a6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019287:	83 c4 14             	add    esp,0x14
c001928a:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c001928f:	6a 04                	push   0x4
c0019291:	6a ff                	push   0xffffffff
c0019293:	53                   	push   ebx
c0019294:	68 00 60 03 c0       	push   0xc0036000
c0019299:	50                   	push   eax
c001929a:	e8 07 f3 ff ff       	call   c00185a6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001929f:	0f 20 d8             	mov    eax,cr3
c00192a2:	0f 22 d8             	mov    cr3,eax
c00192a5:	83 c4 20             	add    esp,0x20
c00192a8:	83 c4 0c             	add    esp,0xc
c00192ab:	5b                   	pop    ebx
c00192ac:	5e                   	pop    esi
c00192ad:	5f                   	pop    edi
c00192ae:	5d                   	pop    ebp
c00192af:	c3                   	ret    
c00192b0:	83 ec 0c             	sub    esp,0xc
c00192b3:	68 f1 1d 03 c0       	push   0xc0031df1
c00192b8:	e8 88 01 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	83 c4 0c             	add    esp,0xc
c00192c3:	5b                   	pop    ebx
c00192c4:	5e                   	pop    esi
c00192c5:	5f                   	pop    edi
c00192c6:	5d                   	pop    ebp
c00192c7:	c3                   	ret    

c00192c8 <__cxa_atexit>:
c00192c8:	31 c0                	xor    eax,eax
c00192ca:	c3                   	ret    

c00192cb <__cxa_finalize>:
c00192cb:	c3                   	ret    

c00192cc <__stack_chk_fail>:
c00192cc:	55                   	push   ebp
c00192cd:	89 e5                	mov    ebp,esp
c00192cf:	83 ec 10             	sub    esp,0x10
c00192d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00192d5:	68 0a 1e 03 c0       	push   0xc0031e0a
c00192da:	e8 66 01 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00192df:	58                   	pop    eax
c00192e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192e3:	5a                   	pop    edx
c00192e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00192e7:	68 0a 1e 03 c0       	push   0xc0031e0a
c00192ec:	e8 54 01 00 00       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00192f1:	c7 04 24 12 1e 03 c0 	mov    DWORD PTR [esp],0xc0031e12
c00192f8:	e8 81 74 00 00       	call   c002077e <KePanic(char const*)>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	c9                   	leave  
c0019301:	c3                   	ret    

c0019302 <__cxa_pure_virtual>:
c0019302:	83 ec 18             	sub    esp,0x18
c0019305:	68 2a 1e 03 c0       	push   0xc0031e2a
c001930a:	e8 6f 74 00 00       	call   c002077e <KePanic(char const*)>
c001930f:	83 c4 1c             	add    esp,0x1c
c0019312:	c3                   	ret    

c0019313 <operator new[](unsigned long)>:
c0019313:	e9 9f d2 ff ff       	jmp    c00165b7 <malloc>

c0019318 <operator delete(void*, unsigned long)>:
c0019318:	e9 ba d2 ff ff       	jmp    c00165d7 <rfree>

c001931d <operator delete[](void*)>:
c001931d:	e9 b5 d2 ff ff       	jmp    c00165d7 <rfree>

c0019322 <operator delete[](void*, unsigned long)>:
c0019322:	e9 b0 d2 ff ff       	jmp    c00165d7 <rfree>

c0019327 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019327:	55                   	push   ebp
c0019328:	57                   	push   edi
c0019329:	56                   	push   esi
c001932a:	be 33 19 03 c0       	mov    esi,0xc0031933
c001932f:	53                   	push   ebx
c0019330:	83 ec 20             	sub    esp,0x20
c0019333:	a0 32 19 03 c0       	mov    al,ds:0xc0031932
c0019338:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001933c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019340:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019344:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019348:	b8 10 00 00 00       	mov    eax,0x10
c001934d:	f7 c7 02 00 00 00    	test   edi,0x2
c0019353:	75 60                	jne    c00193b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0019355:	89 c1                	mov    ecx,eax
c0019357:	c1 e9 02             	shr    ecx,0x2
c001935a:	fc                   	cld    
c001935b:	31 d2                	xor    edx,edx
c001935d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001935f:	a8 02                	test   al,0x2
c0019361:	74 0b                	je     c001936e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0019363:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019366:	66 89 17             	mov    WORD PTR [edi],dx
c0019369:	ba 02 00 00 00       	mov    edx,0x2
c001936e:	a8 01                	test   al,0x1
c0019370:	74 06                	je     c0019378 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0019372:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0019375:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019378:	89 ee                	mov    esi,ebp
c001937a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001937e:	eb 02                	jmp    c0019382 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0019380:	89 c6                	mov    esi,eax
c0019382:	31 d2                	xor    edx,edx
c0019384:	83 c1 01             	add    ecx,0x1
c0019387:	89 f0                	mov    eax,esi
c0019389:	f7 f3                	div    ebx
c001938b:	39 de                	cmp    esi,ebx
c001938d:	73 f1                	jae    c0019380 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c001938f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0019392:	eb 02                	jmp    c0019396 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0019394:	89 c5                	mov    ebp,eax
c0019396:	31 d2                	xor    edx,edx
c0019398:	83 e9 01             	sub    ecx,0x1
c001939b:	89 e8                	mov    eax,ebp
c001939d:	f7 f3                	div    ebx
c001939f:	39 dd                	cmp    ebp,ebx
c00193a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00193a5:	88 11                	mov    BYTE PTR [ecx],dl
c00193a7:	73 eb                	jae    c0019394 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00193a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193ad:	83 c4 20             	add    esp,0x20
c00193b0:	5b                   	pop    ebx
c00193b1:	5e                   	pop    esi
c00193b2:	5f                   	pop    edi
c00193b3:	5d                   	pop    ebp
c00193b4:	c3                   	ret    
c00193b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c00193b8:	83 c7 02             	add    edi,0x2
c00193bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00193bf:	83 c6 02             	add    esi,0x2
c00193c2:	83 e8 02             	sub    eax,0x2
c00193c5:	eb 8e                	jmp    c0019355 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00193c7 <Dbg::logc(char)>:
c00193c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00193cb:	f6 05 d4 b9 03 c0 10 	test   BYTE PTR ds:0xc003b9d4,0x10
c00193d2:	75 12                	jne    c00193e6 <Dbg::logc(char)+0x1f>
c00193d4:	ba fd 03 00 00       	mov    edx,0x3fd
c00193d9:	ec                   	in     al,dx
c00193da:	a8 20                	test   al,0x20
c00193dc:	74 fb                	je     c00193d9 <Dbg::logc(char)+0x12>
c00193de:	ba f8 03 00 00       	mov    edx,0x3f8
c00193e3:	88 c8                	mov    al,cl
c00193e5:	ee                   	out    dx,al
c00193e6:	c3                   	ret    

c00193e7 <Dbg::logs(char*)>:
c00193e7:	53                   	push   ebx
c00193e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00193ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193ef:	85 c0                	test   eax,eax
c00193f1:	74 11                	je     c0019404 <Dbg::logs(char*)+0x1d>
c00193f3:	83 c3 01             	add    ebx,0x1
c00193f6:	50                   	push   eax
c00193f7:	e8 cb ff ff ff       	call   c00193c7 <Dbg::logc(char)>
c00193fc:	58                   	pop    eax
c00193fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019400:	85 c0                	test   eax,eax
c0019402:	75 ef                	jne    c00193f3 <Dbg::logs(char*)+0xc>
c0019404:	5b                   	pop    ebx
c0019405:	c3                   	ret    

c0019406 <Dbg::logWriteInt(unsigned int)>:
c0019406:	83 ec 10             	sub    esp,0x10
c0019409:	6a 0a                	push   0xa
c001940b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001940f:	50                   	push   eax
c0019410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019414:	50                   	push   eax
c0019415:	e8 0d ff ff ff       	call   c0019327 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001941a:	50                   	push   eax
c001941b:	e8 c7 ff ff ff       	call   c00193e7 <Dbg::logs(char*)>
c0019420:	83 c4 20             	add    esp,0x20
c0019423:	c3                   	ret    

c0019424 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019424:	83 ec 10             	sub    esp,0x10
c0019427:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001942b:	50                   	push   eax
c001942c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019430:	50                   	push   eax
c0019431:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019435:	52                   	push   edx
c0019436:	e8 ec fe ff ff       	call   c0019327 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001943b:	50                   	push   eax
c001943c:	e8 a6 ff ff ff       	call   c00193e7 <Dbg::logs(char*)>
c0019441:	83 c4 20             	add    esp,0x20
c0019444:	c3                   	ret    

c0019445 <Dbg::kprintf(char const*, ...)>:
c0019445:	55                   	push   ebp
c0019446:	57                   	push   edi
c0019447:	56                   	push   esi
c0019448:	53                   	push   ebx
c0019449:	83 ec 0c             	sub    esp,0xc
c001944c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019450:	f6 05 d4 b9 03 c0 10 	test   BYTE PTR ds:0xc003b9d4,0x10
c0019457:	74 08                	je     c0019461 <Dbg::kprintf(char const*, ...)+0x1c>
c0019459:	83 c4 0c             	add    esp,0xc
c001945c:	5b                   	pop    ebx
c001945d:	5e                   	pop    esi
c001945e:	5f                   	pop    edi
c001945f:	5d                   	pop    ebp
c0019460:	c3                   	ret    
c0019461:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019465:	31 ff                	xor    edi,edi
c0019467:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001946b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001946e:	85 c0                	test   eax,eax
c0019470:	74 e7                	je     c0019459 <Dbg::kprintf(char const*, ...)+0x14>
c0019472:	8d 77 01             	lea    esi,[edi+0x1]
c0019475:	83 f8 25             	cmp    eax,0x25
c0019478:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001947b:	75 47                	jne    c00194c4 <Dbg::kprintf(char const*, ...)+0x7f>
c001947d:	83 c7 02             	add    edi,0x2
c0019480:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019483:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019486:	83 e8 25             	sub    eax,0x25
c0019489:	0f b6 c0             	movzx  eax,al
c001948c:	83 f8 53             	cmp    eax,0x53
c001948f:	0f 87 ce 00 00 00    	ja     c0019563 <Dbg::kprintf(char const*, ...)+0x11e>
c0019495:	ff 24 85 40 1e 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce1c0]
c001949c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194a0:	89 c8                	mov    eax,ecx
c00194a2:	83 c1 04             	add    ecx,0x4
c00194a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c00194ab:	55                   	push   ebp
c00194ac:	e8 55 ff ff ff       	call   c0019406 <Dbg::logWriteInt(unsigned int)>
c00194b1:	58                   	pop    eax
c00194b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00194b5:	85 c0                	test   eax,eax
c00194b7:	74 a0                	je     c0019459 <Dbg::kprintf(char const*, ...)+0x14>
c00194b9:	8d 77 01             	lea    esi,[edi+0x1]
c00194bc:	83 f8 25             	cmp    eax,0x25
c00194bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00194c2:	74 b9                	je     c001947d <Dbg::kprintf(char const*, ...)+0x38>
c00194c4:	50                   	push   eax
c00194c5:	89 f7                	mov    edi,esi
c00194c7:	e8 fb fe ff ff       	call   c00193c7 <Dbg::logc(char)>
c00194cc:	89 ee                	mov    esi,ebp
c00194ce:	58                   	pop    eax
c00194cf:	eb e1                	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c00194d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194d5:	89 c8                	mov    eax,ecx
c00194d7:	83 c1 04             	add    ecx,0x4
c00194da:	8b 00                	mov    eax,DWORD PTR [eax]
c00194dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194e0:	50                   	push   eax
c00194e1:	e8 01 ff ff ff       	call   c00193e7 <Dbg::logs(char*)>
c00194e6:	58                   	pop    eax
c00194e7:	eb c9                	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c00194e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00194ed:	89 d0                	mov    eax,edx
c00194ef:	83 c2 04             	add    edx,0x4
c00194f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00194f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00194f8:	50                   	push   eax
c00194f9:	e8 08 ff ff ff       	call   c0019406 <Dbg::logWriteInt(unsigned int)>
c00194fe:	58                   	pop    eax
c00194ff:	eb b1                	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019501:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019505:	89 d0                	mov    eax,edx
c0019507:	83 c2 04             	add    edx,0x4
c001950a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001950d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019511:	50                   	push   eax
c0019512:	e8 b0 fe ff ff       	call   c00193c7 <Dbg::logc(char)>
c0019517:	58                   	pop    eax
c0019518:	eb 98                	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c001951a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001951e:	89 c8                	mov    eax,ecx
c0019520:	83 c1 04             	add    ecx,0x4
c0019523:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019527:	6a 10                	push   0x10
c0019529:	8b 08                	mov    ecx,DWORD PTR [eax]
c001952b:	51                   	push   ecx
c001952c:	e8 f3 fe ff ff       	call   c0019424 <Dbg::logWriteIntBase(unsigned int, int)>
c0019531:	5d                   	pop    ebp
c0019532:	58                   	pop    eax
c0019533:	e9 7a ff ff ff       	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019538:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001953c:	89 d0                	mov    eax,edx
c001953e:	83 c2 08             	add    edx,0x8
c0019541:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019545:	6a 10                	push   0x10
c0019547:	8b 00                	mov    eax,DWORD PTR [eax]
c0019549:	50                   	push   eax
c001954a:	e8 d5 fe ff ff       	call   c0019424 <Dbg::logWriteIntBase(unsigned int, int)>
c001954f:	58                   	pop    eax
c0019550:	5a                   	pop    edx
c0019551:	e9 5c ff ff ff       	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019556:	6a 25                	push   0x25
c0019558:	e8 6a fe ff ff       	call   c00193c7 <Dbg::logc(char)>
c001955d:	5a                   	pop    edx
c001955e:	e9 4f ff ff ff       	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c0019563:	6a 25                	push   0x25
c0019565:	e8 5d fe ff ff       	call   c00193c7 <Dbg::logc(char)>
c001956a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001956e:	50                   	push   eax
c001956f:	e8 53 fe ff ff       	call   c00193c7 <Dbg::logc(char)>
c0019574:	5a                   	pop    edx
c0019575:	59                   	pop    ecx
c0019576:	e9 37 ff ff ff       	jmp    c00194b2 <Dbg::kprintf(char const*, ...)+0x6d>
c001957b:	90                   	nop

c001957c <KiUbsanPrintDetails(char const*, void*)>:
c001957c:	83 ec 1c             	sub    esp,0x1c
c001957f:	83 ec 08             	sub    esp,0x8
c0019582:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019586:	68 90 1f 03 c0       	push   0xc0031f90
c001958b:	e8 b5 fe ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001959b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00195a1:	83 ec 08             	sub    esp,0x8
c00195a4:	50                   	push   eax
c00195a5:	68 a4 1f 03 c0       	push   0xc0031fa4
c00195aa:	e8 96 fe ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00195b9:	83 ec 08             	sub    esp,0x8
c00195bc:	50                   	push   eax
c00195bd:	68 ae 1f 03 c0       	push   0xc0031fae
c00195c2:	e8 7e fe ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00195c7:	83 c4 10             	add    esp,0x10
c00195ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00195d1:	83 ec 08             	sub    esp,0x8
c00195d4:	50                   	push   eax
c00195d5:	68 b8 1f 03 c0       	push   0xc0031fb8
c00195da:	e8 66 fe ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00195df:	83 c4 10             	add    esp,0x10
c00195e2:	90                   	nop
c00195e3:	83 c4 1c             	add    esp,0x1c
c00195e6:	c3                   	ret    
c00195e7:	90                   	nop

c00195e8 <__ubsan_handle_type_mismatch_v1>:
c00195e8:	83 ec 0c             	sub    esp,0xc
c00195eb:	83 ec 08             	sub    esp,0x8
c00195ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195f2:	68 fc 20 03 c0       	push   0xc00320fc
c00195f7:	e8 80 ff ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c00195fc:	83 c4 10             	add    esp,0x10
c00195ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019604:	75 16                	jne    c001961c <__ubsan_handle_type_mismatch_v1+0x34>
c0019606:	83 ec 0c             	sub    esp,0xc
c0019609:	68 c2 1f 03 c0       	push   0xc0031fc2
c001960e:	e8 32 fe ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	e9 91 00 00 00       	jmp    c00196ac <__ubsan_handle_type_mismatch_v1+0xc4>
c001961b:	90                   	nop
c001961c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019620:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019623:	85 c0                	test   eax,eax
c0019625:	74 29                	je     c0019650 <__ubsan_handle_type_mismatch_v1+0x68>
c0019627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001962e:	83 e8 01             	sub    eax,0x1
c0019631:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019635:	75 19                	jne    c0019650 <__ubsan_handle_type_mismatch_v1+0x68>
c0019637:	83 ec 08             	sub    esp,0x8
c001963a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001963e:	68 1c 21 03 c0       	push   0xc003211c
c0019643:	e8 fd fd ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019648:	83 c4 10             	add    esp,0x10
c001964b:	eb 5f                	jmp    c00196ac <__ubsan_handle_type_mismatch_v1+0xc4>
c001964d:	8d 76 00             	lea    esi,[esi+0x0]
c0019650:	83 ec 0c             	sub    esp,0xc
c0019653:	68 d7 1f 03 c0       	push   0xc0031fd7
c0019658:	e8 e8 fd ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019664:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019667:	0f b6 c0             	movzx  eax,al
c001966a:	83 ec 08             	sub    esp,0x8
c001966d:	50                   	push   eax
c001966e:	68 f1 1f 03 c0       	push   0xc0031ff1
c0019673:	e8 cd fd ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019678:	83 c4 10             	add    esp,0x10
c001967b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001967f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019682:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019685:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001968d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019690:	0f b6 c0             	movzx  eax,al
c0019693:	8b 04 85 60 44 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbba0]
c001969a:	51                   	push   ecx
c001969b:	52                   	push   edx
c001969c:	50                   	push   eax
c001969d:	68 44 21 03 c0       	push   0xc0032144
c00196a2:	e8 9e fd ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	66 90                	xchg   ax,ax
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	68 fc 20 03 c0       	push   0xc00320fc
c00196b4:	e8 c5 70 00 00       	call   c002077e <KePanic(char const*)>
c00196b9:	83 c4 10             	add    esp,0x10
c00196bc:	90                   	nop
c00196bd:	83 c4 0c             	add    esp,0xc
c00196c0:	c3                   	ret    
c00196c1:	8d 76 00             	lea    esi,[esi+0x0]

c00196c4 <__ubsan_handle_pointer_overflow>:
c00196c4:	83 ec 0c             	sub    esp,0xc
c00196c7:	83 ec 08             	sub    esp,0x8
c00196ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ce:	68 8c 21 03 c0       	push   0xc003218c
c00196d3:	e8 a4 fe ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	83 ec 0c             	sub    esp,0xc
c00196de:	68 8c 21 03 c0       	push   0xc003218c
c00196e3:	e8 96 70 00 00       	call   c002077e <KePanic(char const*)>
c00196e8:	83 c4 10             	add    esp,0x10
c00196eb:	90                   	nop
c00196ec:	83 c4 0c             	add    esp,0xc
c00196ef:	c3                   	ret    

c00196f0 <__ubsan_handle_out_of_bounds>:
c00196f0:	83 ec 0c             	sub    esp,0xc
c00196f3:	83 ec 08             	sub    esp,0x8
c00196f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196fa:	68 fc 1f 03 c0       	push   0xc0031ffc
c00196ff:	e8 78 fe ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c0019704:	83 c4 10             	add    esp,0x10
c0019707:	83 ec 0c             	sub    esp,0xc
c001970a:	68 fc 1f 03 c0       	push   0xc0031ffc
c001970f:	e8 6a 70 00 00       	call   c002077e <KePanic(char const*)>
c0019714:	83 c4 10             	add    esp,0x10
c0019717:	90                   	nop
c0019718:	83 c4 0c             	add    esp,0xc
c001971b:	c3                   	ret    

c001971c <__ubsan_handle_add_overflow>:
c001971c:	83 ec 0c             	sub    esp,0xc
c001971f:	83 ec 08             	sub    esp,0x8
c0019722:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019726:	68 19 20 03 c0       	push   0xc0032019
c001972b:	e8 4c fe ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	83 ec 0c             	sub    esp,0xc
c0019736:	68 19 20 03 c0       	push   0xc0032019
c001973b:	e8 3e 70 00 00       	call   c002077e <KePanic(char const*)>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	90                   	nop
c0019744:	83 c4 0c             	add    esp,0xc
c0019747:	c3                   	ret    

c0019748 <__ubsan_handle_load_invalid_value>:
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	83 ec 08             	sub    esp,0x8
c001974e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019752:	68 ac 21 03 c0       	push   0xc00321ac
c0019757:	e8 20 fe ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c001975c:	83 c4 10             	add    esp,0x10
c001975f:	83 ec 0c             	sub    esp,0xc
c0019762:	68 ac 21 03 c0       	push   0xc00321ac
c0019767:	e8 12 70 00 00       	call   c002077e <KePanic(char const*)>
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	90                   	nop
c0019770:	83 c4 0c             	add    esp,0xc
c0019773:	c3                   	ret    

c0019774 <__ubsan_handle_divrem_overflow>:
c0019774:	83 ec 0c             	sub    esp,0xc
c0019777:	83 ec 08             	sub    esp,0x8
c001977a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001977e:	68 d0 21 03 c0       	push   0xc00321d0
c0019783:	e8 f4 fd ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c0019788:	83 c4 10             	add    esp,0x10
c001978b:	83 ec 0c             	sub    esp,0xc
c001978e:	68 d0 21 03 c0       	push   0xc00321d0
c0019793:	e8 e6 6f 00 00       	call   c002077e <KePanic(char const*)>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	90                   	nop
c001979c:	83 c4 0c             	add    esp,0xc
c001979f:	c3                   	ret    

c00197a0 <__ubsan_handle_mul_overflow>:
c00197a0:	83 ec 0c             	sub    esp,0xc
c00197a3:	83 ec 08             	sub    esp,0x8
c00197a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197aa:	68 35 20 03 c0       	push   0xc0032035
c00197af:	e8 c8 fd ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c00197b4:	83 c4 10             	add    esp,0x10
c00197b7:	83 ec 0c             	sub    esp,0xc
c00197ba:	68 35 20 03 c0       	push   0xc0032035
c00197bf:	e8 ba 6f 00 00       	call   c002077e <KePanic(char const*)>
c00197c4:	83 c4 10             	add    esp,0x10
c00197c7:	90                   	nop
c00197c8:	83 c4 0c             	add    esp,0xc
c00197cb:	c3                   	ret    

c00197cc <__ubsan_handle_sub_overflow>:
c00197cc:	83 ec 0c             	sub    esp,0xc
c00197cf:	83 ec 08             	sub    esp,0x8
c00197d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197d6:	68 51 20 03 c0       	push   0xc0032051
c00197db:	e8 9c fd ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c00197e0:	83 c4 10             	add    esp,0x10
c00197e3:	83 ec 0c             	sub    esp,0xc
c00197e6:	68 51 20 03 c0       	push   0xc0032051
c00197eb:	e8 8e 6f 00 00       	call   c002077e <KePanic(char const*)>
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	90                   	nop
c00197f4:	83 c4 0c             	add    esp,0xc
c00197f7:	c3                   	ret    

c00197f8 <__ubsan_handle_shift_out_of_bounds>:
c00197f8:	83 ec 0c             	sub    esp,0xc
c00197fb:	83 ec 08             	sub    esp,0x8
c00197fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019802:	68 f0 21 03 c0       	push   0xc00321f0
c0019807:	e8 70 fd ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c001980c:	83 c4 10             	add    esp,0x10
c001980f:	83 ec 0c             	sub    esp,0xc
c0019812:	68 f0 21 03 c0       	push   0xc00321f0
c0019817:	e8 62 6f 00 00       	call   c002077e <KePanic(char const*)>
c001981c:	83 c4 10             	add    esp,0x10
c001981f:	90                   	nop
c0019820:	83 c4 0c             	add    esp,0xc
c0019823:	c3                   	ret    

c0019824 <__ubsan_handle_negate_overflow>:
c0019824:	83 ec 0c             	sub    esp,0xc
c0019827:	83 ec 08             	sub    esp,0x8
c001982a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001982e:	68 14 22 03 c0       	push   0xc0032214
c0019833:	e8 44 fd ff ff       	call   c001957c <KiUbsanPrintDetails(char const*, void*)>
c0019838:	83 c4 10             	add    esp,0x10
c001983b:	83 ec 0c             	sub    esp,0xc
c001983e:	68 14 22 03 c0       	push   0xc0032214
c0019843:	e8 36 6f 00 00       	call   c002077e <KePanic(char const*)>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	90                   	nop
c001984c:	83 c4 0c             	add    esp,0xc
c001984f:	c3                   	ret    

c0019850 <KiIsHashInTable(unsigned short)>:
c0019850:	0f b7 d0             	movzx  edx,ax
c0019853:	83 e0 07             	and    eax,0x7
c0019856:	c1 fa 03             	sar    edx,0x3
c0019859:	88 c1                	mov    cl,al
c001985b:	0f b6 92 00 bf 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc4100]
c0019862:	d3 fa                	sar    edx,cl
c0019864:	89 d0                	mov    eax,edx
c0019866:	83 e0 01             	and    eax,0x1
c0019869:	c3                   	ret    

c001986a <KiSetHashInTable(unsigned short, bool)>:
c001986a:	56                   	push   esi
c001986b:	53                   	push   ebx
c001986c:	0f b7 d8             	movzx  ebx,ax
c001986f:	83 e0 07             	and    eax,0x7
c0019872:	c1 fb 03             	sar    ebx,0x3
c0019875:	89 c1                	mov    ecx,eax
c0019877:	0f b6 b3 00 bf 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc4100]
c001987e:	b8 01 00 00 00       	mov    eax,0x1
c0019883:	d3 e0                	shl    eax,cl
c0019885:	84 d2                	test   dl,dl
c0019887:	74 04                	je     c001988d <KiSetHashInTable(unsigned short, bool)+0x23>
c0019889:	09 f0                	or     eax,esi
c001988b:	eb 04                	jmp    c0019891 <KiSetHashInTable(unsigned short, bool)+0x27>
c001988d:	f7 d0                	not    eax
c001988f:	21 f0                	and    eax,esi
c0019891:	88 83 00 bf 03 c0    	mov    BYTE PTR [ebx-0x3ffc4100],al
c0019897:	5b                   	pop    ebx
c0019898:	5e                   	pop    esi
c0019899:	c3                   	ret    

c001989a <KiFlushSymlinkChanges()>:
c001989a:	57                   	push   edi
c001989b:	56                   	push   esi
c001989c:	53                   	push   ebx
c001989d:	83 ec 1c             	sub    esp,0x1c
c00198a0:	68 14 01 00 00       	push   0x114
c00198a5:	e8 0d cd ff ff       	call   c00165b7 <malloc>
c00198aa:	83 c4 0c             	add    esp,0xc
c00198ad:	89 c3                	mov    ebx,eax
c00198af:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00198b5:	68 33 22 03 c0       	push   0xc0032233
c00198ba:	50                   	push   eax
c00198bb:	e8 8c 0d 00 00       	call   c001a64c <File::File(char const*, Process*)>
c00198c0:	83 c4 10             	add    esp,0x10
c00198c3:	85 db                	test   ebx,ebx
c00198c5:	75 10                	jne    c00198d7 <KiFlushSymlinkChanges()+0x3d>
c00198c7:	83 ec 0c             	sub    esp,0xc
c00198ca:	68 51 22 03 c0       	push   0xc0032251
c00198cf:	e8 aa 6e 00 00       	call   c002077e <KePanic(char const*)>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	50                   	push   eax
c00198d8:	50                   	push   eax
c00198d9:	6a 06                	push   0x6
c00198db:	53                   	push   ebx
c00198dc:	e8 89 0d 00 00       	call   c001a66a <File::open(FileOpenMode)>
c00198e1:	83 c4 10             	add    esp,0x10
c00198e4:	85 c0                	test   eax,eax
c00198e6:	74 10                	je     c00198f8 <KiFlushSymlinkChanges()+0x5e>
c00198e8:	83 ec 0c             	sub    esp,0xc
c00198eb:	68 6b 22 03 c0       	push   0xc003226b
c00198f0:	e8 89 6e 00 00       	call   c002077e <KePanic(char const*)>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	31 f6                	xor    esi,esi
c00198fa:	39 35 c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,esi
c0019900:	7e 70                	jle    c0019972 <KiFlushSymlinkChanges()+0xd8>
c0019902:	83 ec 0c             	sub    esp,0xc
c0019905:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019907:	8d 7c 24 18          	lea    edi,[esp+0x18]
c001990b:	89 f0                	mov    eax,esi
c001990d:	57                   	push   edi
c001990e:	c1 e0 08             	shl    eax,0x8
c0019911:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019916:	50                   	push   eax
c0019917:	6a 00                	push   0x0
c0019919:	68 00 01 00 00       	push   0x100
c001991e:	53                   	push   ebx
c001991f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0019922:	83 c4 20             	add    esp,0x20
c0019925:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c001992d:	74 10                	je     c001993f <KiFlushSymlinkChanges()+0xa5>
c001992f:	83 ec 0c             	sub    esp,0xc
c0019932:	68 85 22 03 c0       	push   0xc0032285
c0019937:	e8 42 6e 00 00       	call   c002077e <KePanic(char const*)>
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019944:	8d 14 f5 e0 ba 03 c0 	lea    edx,[esi*8-0x3ffc4520]
c001994b:	57                   	push   edi
c001994c:	52                   	push   edx
c001994d:	6a 00                	push   0x0
c001994f:	6a 08                	push   0x8
c0019951:	53                   	push   ebx
c0019952:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019955:	83 c4 20             	add    esp,0x20
c0019958:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c001995d:	74 10                	je     c001996f <KiFlushSymlinkChanges()+0xd5>
c001995f:	83 ec 0c             	sub    esp,0xc
c0019962:	68 9f 22 03 c0       	push   0xc003229f
c0019967:	e8 12 6e 00 00       	call   c002077e <KePanic(char const*)>
c001996c:	83 c4 10             	add    esp,0x10
c001996f:	46                   	inc    esi
c0019970:	eb 88                	jmp    c00198fa <KiFlushSymlinkChanges()+0x60>
c0019972:	83 ec 0c             	sub    esp,0xc
c0019975:	53                   	push   ebx
c0019976:	e8 4d 0d 00 00       	call   c001a6c8 <File::close()>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	85 db                	test   ebx,ebx
c0019980:	74 0c                	je     c001998e <KiFlushSymlinkChanges()+0xf4>
c0019982:	83 ec 0c             	sub    esp,0xc
c0019985:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019987:	53                   	push   ebx
c0019988:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001998b:	83 c4 10             	add    esp,0x10
c001998e:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c0019998:	83 c4 10             	add    esp,0x10
c001999b:	5b                   	pop    ebx
c001999c:	5e                   	pop    esi
c001999d:	5f                   	pop    edi
c001999e:	c3                   	ret    

c001999f <KiDeinitialiseSymlinks(void*)>:
c001999f:	e9 f6 fe ff ff       	jmp    c001989a <KiFlushSymlinkChanges()>

c00199a4 <KiGetSymlinkHash(char const*)>:
c00199a4:	53                   	push   ebx
c00199a5:	89 c3                	mov    ebx,eax
c00199a7:	83 ec 14             	sub    esp,0x14
c00199aa:	50                   	push   eax
c00199ab:	e8 c0 6b fe ff       	call   c0000570 <strlen>
c00199b0:	5a                   	pop    edx
c00199b1:	59                   	pop    ecx
c00199b2:	50                   	push   eax
c00199b3:	53                   	push   ebx
c00199b4:	e8 48 65 00 00       	call   c001ff01 <KeCalculateCRC32(unsigned char*, int)>
c00199b9:	83 c4 18             	add    esp,0x18
c00199bc:	89 c2                	mov    edx,eax
c00199be:	5b                   	pop    ebx
c00199bf:	c1 ea 10             	shr    edx,0x10
c00199c2:	31 d0                	xor    eax,edx
c00199c4:	c3                   	ret    

c00199c5 <KiCreateSymlinkID()>:
c00199c5:	55                   	push   ebp
c00199c6:	57                   	push   edi
c00199c7:	56                   	push   esi
c00199c8:	53                   	push   ebx
c00199c9:	31 db                	xor    ebx,ebx
c00199cb:	83 ec 1c             	sub    esp,0x1c
c00199ce:	e8 f9 6e 00 00       	call   c00208cc <KeRand()>
c00199d3:	43                   	inc    ebx
c00199d4:	8b 2d 00 df 03 c0    	mov    ebp,DWORD PTR ds:0xc003df00
c00199da:	31 d2                	xor    edx,edx
c00199dc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00199df:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00199e3:	89 0d 00 df 03 c0    	mov    DWORD PTR ds:0xc003df00,ecx
c00199e9:	c1 e0 1f             	shl    eax,0x1f
c00199ec:	89 d7                	mov    edi,edx
c00199ee:	89 c6                	mov    esi,eax
c00199f0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00199f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00199fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019a02:	75 10                	jne    c0019a14 <KiCreateSymlinkID()+0x4f>
c0019a04:	83 ec 0c             	sub    esp,0xc
c0019a07:	68 b9 22 03 c0       	push   0xc00322b9
c0019a0c:	e8 6d 6d 00 00       	call   c002077e <KePanic(char const*)>
c0019a11:	83 c4 10             	add    esp,0x10
c0019a14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019a18:	75 04                	jne    c0019a1e <KiCreateSymlinkID()+0x59>
c0019a1a:	39 f5                	cmp    ebp,esi
c0019a1c:	74 b0                	je     c00199ce <KiCreateSymlinkID()+0x9>
c0019a1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a26:	31 f0                	xor    eax,esi
c0019a28:	83 c4 1c             	add    esp,0x1c
c0019a2b:	31 fa                	xor    edx,edi
c0019a2d:	5b                   	pop    ebx
c0019a2e:	5e                   	pop    esi
c0019a2f:	5f                   	pop    edi
c0019a30:	5d                   	pop    ebp
c0019a31:	c3                   	ret    

c0019a32 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019a32:	53                   	push   ebx
c0019a33:	83 ec 0c             	sub    esp,0xc
c0019a36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a42:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019a47:	68 00 01 00 00       	push   0x100
c0019a4c:	89 0c c5 e4 ba 03 c0 	mov    DWORD PTR [eax*8-0x3ffc451c],ecx
c0019a53:	6a 00                	push   0x0
c0019a55:	89 14 c5 e0 ba 03 c0 	mov    DWORD PTR [eax*8-0x3ffc4520],edx
c0019a5c:	c1 e0 08             	shl    eax,0x8
c0019a5f:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019a64:	50                   	push   eax
c0019a65:	e8 86 6a fe ff       	call   c00004f0 <memset>
c0019a6a:	58                   	pop    eax
c0019a6b:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019a70:	5a                   	pop    edx
c0019a71:	c1 e0 08             	shl    eax,0x8
c0019a74:	53                   	push   ebx
c0019a75:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019a7a:	50                   	push   eax
c0019a7b:	e8 c0 6b fe ff       	call   c0000640 <strcpy>
c0019a80:	89 d8                	mov    eax,ebx
c0019a82:	e8 1d ff ff ff       	call   c00199a4 <KiGetSymlinkHash(char const*)>
c0019a87:	59                   	pop    ecx
c0019a88:	0f b7 d8             	movzx  ebx,ax
c0019a8b:	58                   	pop    eax
c0019a8c:	53                   	push   ebx
c0019a8d:	68 c2 22 03 c0       	push   0xc00322c2
c0019a92:	e8 ae f9 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019a97:	89 d8                	mov    eax,ebx
c0019a99:	ba 01 00 00 00       	mov    edx,0x1
c0019a9e:	e8 c7 fd ff ff       	call   c001986a <KiSetHashInTable(unsigned short, bool)>
c0019aa3:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019aa8:	83 c4 10             	add    esp,0x10
c0019aab:	40                   	inc    eax
c0019aac:	a3 c0 ba 03 c0       	mov    ds:0xc003bac0,eax
c0019ab1:	83 f8 03             	cmp    eax,0x3
c0019ab4:	7e 09                	jle    c0019abf <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019ab6:	83 c4 08             	add    esp,0x8
c0019ab9:	5b                   	pop    ebx
c0019aba:	e9 db fd ff ff       	jmp    c001989a <KiFlushSymlinkChanges()>
c0019abf:	83 c4 08             	add    esp,0x8
c0019ac2:	5b                   	pop    ebx
c0019ac3:	c3                   	ret    

c0019ac4 <KeInitialiseSymlinks()>:
c0019ac4:	57                   	push   edi
c0019ac5:	56                   	push   esi
c0019ac6:	53                   	push   ebx
c0019ac7:	81 ec 14 01 00 00    	sub    esp,0x114
c0019acd:	c7 05 00 df 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003df00,0x0
c0019ad7:	68 00 20 00 00       	push   0x2000
c0019adc:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c0019ae6:	6a 00                	push   0x0
c0019ae8:	68 00 bf 03 c0       	push   0xc003bf00
c0019aed:	e8 fe 69 fe ff       	call   c00004f0 <memset>
c0019af2:	59                   	pop    ecx
c0019af3:	5b                   	pop    ebx
c0019af4:	ff 35 00 df 03 c0    	push   DWORD PTR ds:0xc003df00
c0019afa:	68 d6 22 03 c0       	push   0xc00322d6
c0019aff:	e8 41 f9 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019b04:	5e                   	pop    esi
c0019b05:	5f                   	pop    edi
c0019b06:	6a 00                	push   0x0
c0019b08:	68 9f 99 01 c0       	push   0xc001999f
c0019b0d:	e8 12 62 00 00       	call   c001fd24 <KeRegisterAtexit(void (*)(void*), void*)>
c0019b12:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b19:	e8 99 ca ff ff       	call   c00165b7 <malloc>
c0019b1e:	83 c4 0c             	add    esp,0xc
c0019b21:	89 c3                	mov    ebx,eax
c0019b23:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019b29:	68 33 22 03 c0       	push   0xc0032233
c0019b2e:	50                   	push   eax
c0019b2f:	e8 18 0b 00 00       	call   c001a64c <File::File(char const*, Process*)>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	85 db                	test   ebx,ebx
c0019b39:	75 10                	jne    c0019b4b <KeInitialiseSymlinks()+0x87>
c0019b3b:	83 ec 0c             	sub    esp,0xc
c0019b3e:	68 f3 22 03 c0       	push   0xc00322f3
c0019b43:	e8 36 6c 00 00       	call   c002077e <KePanic(char const*)>
c0019b48:	83 c4 10             	add    esp,0x10
c0019b4b:	83 ec 0c             	sub    esp,0xc
c0019b4e:	53                   	push   ebx
c0019b4f:	e8 da 0d 00 00       	call   c001a92e <File::exists()>
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	84 c0                	test   al,al
c0019b59:	75 3a                	jne    c0019b95 <KeInitialiseSymlinks()+0xd1>
c0019b5b:	52                   	push   edx
c0019b5c:	52                   	push   edx
c0019b5d:	6a 12                	push   0x12
c0019b5f:	53                   	push   ebx
c0019b60:	e8 05 0b 00 00       	call   c001a66a <File::open(FileOpenMode)>
c0019b65:	83 c4 10             	add    esp,0x10
c0019b68:	85 c0                	test   eax,eax
c0019b6a:	74 10                	je     c0019b7c <KeInitialiseSymlinks()+0xb8>
c0019b6c:	83 ec 0c             	sub    esp,0xc
c0019b6f:	68 10 23 03 c0       	push   0xc0032310
c0019b74:	e8 05 6c 00 00       	call   c002077e <KePanic(char const*)>
c0019b79:	83 c4 10             	add    esp,0x10
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	53                   	push   ebx
c0019b80:	e8 43 0b 00 00       	call   c001a6c8 <File::close()>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	85 db                	test   ebx,ebx
c0019b8a:	0f 84 9e 00 00 00    	je     c0019c2e <KeInitialiseSymlinks()+0x16a>
c0019b90:	e9 8d 00 00 00       	jmp    c0019c22 <KeInitialiseSymlinks()+0x15e>
c0019b95:	50                   	push   eax
c0019b96:	50                   	push   eax
c0019b97:	6a 01                	push   0x1
c0019b99:	53                   	push   ebx
c0019b9a:	e8 cb 0a 00 00       	call   c001a66a <File::open(FileOpenMode)>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	85 c0                	test   eax,eax
c0019ba4:	74 10                	je     c0019bb6 <KeInitialiseSymlinks()+0xf2>
c0019ba6:	83 ec 0c             	sub    esp,0xc
c0019ba9:	68 2d 23 03 c0       	push   0xc003232d
c0019bae:	e8 cb 6b 00 00       	call   c002077e <KePanic(char const*)>
c0019bb3:	83 c4 10             	add    esp,0x10
c0019bb6:	83 ec 0c             	sub    esp,0xc
c0019bb9:	ff 05 00 df 03 c0    	inc    DWORD PTR ds:0xc003df00
c0019bbf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019bc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bc5:	57                   	push   edi
c0019bc6:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019bca:	56                   	push   esi
c0019bcb:	6a 00                	push   0x0
c0019bcd:	68 00 01 00 00       	push   0x100
c0019bd2:	53                   	push   ebx
c0019bd3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bd6:	83 c4 20             	add    esp,0x20
c0019bd9:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019be1:	75 33                	jne    c0019c16 <KeInitialiseSymlinks()+0x152>
c0019be3:	83 ec 0c             	sub    esp,0xc
c0019be6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be8:	57                   	push   edi
c0019be9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019bed:	52                   	push   edx
c0019bee:	6a 00                	push   0x0
c0019bf0:	6a 08                	push   0x8
c0019bf2:	53                   	push   ebx
c0019bf3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bf6:	83 c4 20             	add    esp,0x20
c0019bf9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019bfe:	75 16                	jne    c0019c16 <KeInitialiseSymlinks()+0x152>
c0019c00:	89 f0                	mov    eax,esi
c0019c02:	e8 9d fd ff ff       	call   c00199a4 <KiGetSymlinkHash(char const*)>
c0019c07:	ba 01 00 00 00       	mov    edx,0x1
c0019c0c:	0f b7 c0             	movzx  eax,ax
c0019c0f:	e8 56 fc ff ff       	call   c001986a <KiSetHashInTable(unsigned short, bool)>
c0019c14:	eb a0                	jmp    c0019bb6 <KeInitialiseSymlinks()+0xf2>
c0019c16:	83 ec 0c             	sub    esp,0xc
c0019c19:	53                   	push   ebx
c0019c1a:	e8 a9 0a 00 00       	call   c001a6c8 <File::close()>
c0019c1f:	83 c4 10             	add    esp,0x10
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c27:	53                   	push   ebx
c0019c28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c2b:	83 c4 10             	add    esp,0x10
c0019c2e:	81 c4 10 01 00 00    	add    esp,0x110
c0019c34:	5b                   	pop    ebx
c0019c35:	5e                   	pop    esi
c0019c36:	5f                   	pop    edi
c0019c37:	c3                   	ret    

c0019c38 <KiIsSymlinkRegistered(char const*)>:
c0019c38:	55                   	push   ebp
c0019c39:	57                   	push   edi
c0019c3a:	56                   	push   esi
c0019c3b:	53                   	push   ebx
c0019c3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c42:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019c49:	89 f0                	mov    eax,esi
c0019c4b:	e8 54 fd ff ff       	call   c00199a4 <KiGetSymlinkHash(char const*)>
c0019c50:	0f b7 c0             	movzx  eax,ax
c0019c53:	53                   	push   ebx
c0019c54:	56                   	push   esi
c0019c55:	50                   	push   eax
c0019c56:	68 48 23 03 c0       	push   0xc0032348
c0019c5b:	e8 e5 f7 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0019c60:	89 f0                	mov    eax,esi
c0019c62:	e8 3d fd ff ff       	call   c00199a4 <KiGetSymlinkHash(char const*)>
c0019c67:	0f b7 c0             	movzx  eax,ax
c0019c6a:	e8 e1 fb ff ff       	call   c0019850 <KiIsHashInTable(unsigned short)>
c0019c6f:	83 c4 10             	add    esp,0x10
c0019c72:	88 c1                	mov    cl,al
c0019c74:	31 d2                	xor    edx,edx
c0019c76:	31 c0                	xor    eax,eax
c0019c78:	84 c9                	test   cl,cl
c0019c7a:	0f 84 31 01 00 00    	je     c0019db1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019c80:	31 db                	xor    ebx,ebx
c0019c82:	39 1d c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,ebx
c0019c88:	7e 30                	jle    c0019cba <KiIsSymlinkRegistered(char const*)+0x82>
c0019c8a:	89 d8                	mov    eax,ebx
c0019c8c:	51                   	push   ecx
c0019c8d:	c1 e0 08             	shl    eax,0x8
c0019c90:	51                   	push   ecx
c0019c91:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019c96:	50                   	push   eax
c0019c97:	56                   	push   esi
c0019c98:	e8 b3 6a fe ff       	call   c0000750 <strcmp>
c0019c9d:	83 c4 10             	add    esp,0x10
c0019ca0:	85 c0                	test   eax,eax
c0019ca2:	75 13                	jne    c0019cb7 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019ca4:	8b 04 dd e0 ba 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc4520]
c0019cab:	8b 14 dd e4 ba 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc451c]
c0019cb2:	e9 fa 00 00 00       	jmp    c0019db1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019cb7:	43                   	inc    ebx
c0019cb8:	eb c8                	jmp    c0019c82 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019cba:	83 ec 0c             	sub    esp,0xc
c0019cbd:	68 14 01 00 00       	push   0x114
c0019cc2:	e8 f0 c8 ff ff       	call   c00165b7 <malloc>
c0019cc7:	83 c4 0c             	add    esp,0xc
c0019cca:	89 c3                	mov    ebx,eax
c0019ccc:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019cd2:	68 33 22 03 c0       	push   0xc0032233
c0019cd7:	50                   	push   eax
c0019cd8:	e8 6f 09 00 00       	call   c001a64c <File::File(char const*, Process*)>
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	85 db                	test   ebx,ebx
c0019ce2:	75 12                	jne    c0019cf6 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019ce4:	83 ec 0c             	sub    esp,0xc
c0019ce7:	68 5d 23 03 c0       	push   0xc003235d
c0019cec:	e8 8d 6a 00 00       	call   c002077e <KePanic(char const*)>
c0019cf1:	83 c4 10             	add    esp,0x10
c0019cf4:	eb 10                	jmp    c0019d06 <KiIsSymlinkRegistered(char const*)+0xce>
c0019cf6:	83 ec 0c             	sub    esp,0xc
c0019cf9:	53                   	push   ebx
c0019cfa:	e8 2f 0c 00 00       	call   c001a92e <File::exists()>
c0019cff:	83 c4 10             	add    esp,0x10
c0019d02:	84 c0                	test   al,al
c0019d04:	74 de                	je     c0019ce4 <KiIsSymlinkRegistered(char const*)+0xac>
c0019d06:	52                   	push   edx
c0019d07:	52                   	push   edx
c0019d08:	6a 01                	push   0x1
c0019d0a:	53                   	push   ebx
c0019d0b:	e8 5a 09 00 00       	call   c001a66a <File::open(FileOpenMode)>
c0019d10:	83 c4 10             	add    esp,0x10
c0019d13:	85 c0                	test   eax,eax
c0019d15:	74 10                	je     c0019d27 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d17:	83 ec 0c             	sub    esp,0xc
c0019d1a:	68 78 23 03 c0       	push   0xc0032378
c0019d1f:	e8 5a 6a 00 00       	call   c002077e <KePanic(char const*)>
c0019d24:	83 c4 10             	add    esp,0x10
c0019d27:	83 ec 0c             	sub    esp,0xc
c0019d2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d2c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019d30:	55                   	push   ebp
c0019d31:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019d35:	57                   	push   edi
c0019d36:	6a 00                	push   0x0
c0019d38:	68 00 01 00 00       	push   0x100
c0019d3d:	53                   	push   ebx
c0019d3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d41:	83 c4 20             	add    esp,0x20
c0019d44:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019d4c:	75 4b                	jne    c0019d99 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d4e:	83 ec 0c             	sub    esp,0xc
c0019d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d53:	55                   	push   ebp
c0019d54:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d58:	52                   	push   edx
c0019d59:	6a 00                	push   0x0
c0019d5b:	6a 08                	push   0x8
c0019d5d:	53                   	push   ebx
c0019d5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d61:	83 c4 20             	add    esp,0x20
c0019d64:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d69:	75 2e                	jne    c0019d99 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d6b:	50                   	push   eax
c0019d6c:	50                   	push   eax
c0019d6d:	57                   	push   edi
c0019d6e:	56                   	push   esi
c0019d6f:	e8 dc 69 fe ff       	call   c0000750 <strcmp>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	85 c0                	test   eax,eax
c0019d79:	75 ac                	jne    c0019d27 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d7b:	83 ec 0c             	sub    esp,0xc
c0019d7e:	53                   	push   ebx
c0019d7f:	e8 44 09 00 00       	call   c001a6c8 <File::close()>
c0019d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d94:	83 c4 10             	add    esp,0x10
c0019d97:	eb 18                	jmp    c0019db1 <KiIsSymlinkRegistered(char const*)+0x179>
c0019d99:	83 ec 0c             	sub    esp,0xc
c0019d9c:	53                   	push   ebx
c0019d9d:	e8 26 09 00 00       	call   c001a6c8 <File::close()>
c0019da2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019da7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019daa:	83 c4 10             	add    esp,0x10
c0019dad:	31 c0                	xor    eax,eax
c0019daf:	31 d2                	xor    edx,edx
c0019db1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019db7:	5b                   	pop    ebx
c0019db8:	5e                   	pop    esi
c0019db9:	5f                   	pop    edi
c0019dba:	5d                   	pop    ebp
c0019dbb:	c3                   	ret    

c0019dbc <KeDereferenceSymlink(char const*, char*)>:
c0019dbc:	55                   	push   ebp
c0019dbd:	57                   	push   edi
c0019dbe:	56                   	push   esi
c0019dbf:	53                   	push   ebx
c0019dc0:	83 ec 48             	sub    esp,0x48
c0019dc3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019dc7:	56                   	push   esi
c0019dc8:	e8 6b fe ff ff       	call   c0019c38 <KiIsSymlinkRegistered(char const*)>
c0019dcd:	83 c4 10             	add    esp,0x10
c0019dd0:	89 c7                	mov    edi,eax
c0019dd2:	89 d0                	mov    eax,edx
c0019dd4:	09 f8                	or     eax,edi
c0019dd6:	75 07                	jne    c0019ddf <KeDereferenceSymlink(char const*, char*)+0x23>
c0019dd8:	31 c0                	xor    eax,eax
c0019dda:	e9 7c 01 00 00       	jmp    c0019f5b <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019ddf:	83 ec 0c             	sub    esp,0xc
c0019de2:	89 d5                	mov    ebp,edx
c0019de4:	68 14 01 00 00       	push   0x114
c0019de9:	e8 c9 c7 ff ff       	call   c00165b7 <malloc>
c0019dee:	83 c4 0c             	add    esp,0xc
c0019df1:	89 c3                	mov    ebx,eax
c0019df3:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019df9:	56                   	push   esi
c0019dfa:	50                   	push   eax
c0019dfb:	e8 4c 08 00 00       	call   c001a64c <File::File(char const*, Process*)>
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	85 db                	test   ebx,ebx
c0019e05:	0f 84 32 01 00 00    	je     c0019f3d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e0b:	56                   	push   esi
c0019e0c:	56                   	push   esi
c0019e0d:	6a 01                	push   0x1
c0019e0f:	53                   	push   ebx
c0019e10:	e8 55 08 00 00       	call   c001a66a <File::open(FileOpenMode)>
c0019e15:	83 c4 10             	add    esp,0x10
c0019e18:	85 c0                	test   eax,eax
c0019e1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e1c:	74 09                	je     c0019e27 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019e1e:	83 ec 0c             	sub    esp,0xc
c0019e21:	53                   	push   ebx
c0019e22:	e9 10 01 00 00       	jmp    c0019f37 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019e27:	83 ec 0c             	sub    esp,0xc
c0019e2a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e2e:	56                   	push   esi
c0019e2f:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019e33:	52                   	push   edx
c0019e34:	6a 00                	push   0x0
c0019e36:	6a 08                	push   0x8
c0019e38:	53                   	push   ebx
c0019e39:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e3c:	83 c4 20             	add    esp,0x20
c0019e3f:	85 c0                	test   eax,eax
c0019e41:	0f 85 e2 00 00 00    	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e47:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e4c:	0f 85 d7 00 00 00    	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e52:	83 ec 0c             	sub    esp,0xc
c0019e55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e57:	56                   	push   esi
c0019e58:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019e5c:	52                   	push   edx
c0019e5d:	6a 00                	push   0x0
c0019e5f:	6a 08                	push   0x8
c0019e61:	53                   	push   ebx
c0019e62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e65:	83 c4 20             	add    esp,0x20
c0019e68:	85 c0                	test   eax,eax
c0019e6a:	0f 85 b9 00 00 00    	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e70:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e75:	0f 85 ae 00 00 00    	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e7b:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019e7f:	0f 85 53 ff ff ff    	jne    c0019dd8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019e85:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019e89:	0f 85 49 ff ff ff    	jne    c0019dd8 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019e8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019e97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019e9f:	51                   	push   ecx
c0019ea0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019ea4:	50                   	push   eax
c0019ea5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ea9:	50                   	push   eax
c0019eaa:	53                   	push   ebx
c0019eab:	e8 bc 0a 00 00       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c0019eb0:	83 c4 10             	add    esp,0x10
c0019eb3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019eb8:	75 6f                	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019eba:	31 c9                	xor    ecx,ecx
c0019ebc:	bf 0f 00 00 00       	mov    edi,0xf
c0019ec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ec5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ec9:	39 c7                	cmp    edi,eax
c0019ecb:	89 cf                	mov    edi,ecx
c0019ecd:	19 d7                	sbb    edi,edx
c0019ecf:	73 58                	jae    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ed1:	83 c0 f0             	add    eax,0xfffffff0
c0019ed4:	bf ff 00 00 00       	mov    edi,0xff
c0019ed9:	83 d2 ff             	adc    edx,0xffffffff
c0019edc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ee0:	39 c7                	cmp    edi,eax
c0019ee2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ee6:	19 d1                	sbb    ecx,edx
c0019ee8:	72 53                	jb     c0019f3d <KeDereferenceSymlink(char const*, char*)+0x181>
c0019eea:	40                   	inc    eax
c0019eeb:	52                   	push   edx
c0019eec:	50                   	push   eax
c0019eed:	6a 00                	push   0x0
c0019eef:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019ef3:	e8 f8 65 fe ff       	call   c00004f0 <memset>
c0019ef8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019efa:	89 34 24             	mov    DWORD PTR [esp],esi
c0019efd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019f01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f05:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f09:	53                   	push   ebx
c0019f0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f0d:	83 c4 20             	add    esp,0x20
c0019f10:	85 c0                	test   eax,eax
c0019f12:	75 15                	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f18:	89 c7                	mov    edi,eax
c0019f1a:	c1 ff 1f             	sar    edi,0x1f
c0019f1d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019f21:	75 06                	jne    c0019f29 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f23:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f27:	74 19                	je     c0019f42 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019f29:	83 ec 0c             	sub    esp,0xc
c0019f2c:	53                   	push   ebx
c0019f2d:	e8 96 07 00 00       	call   c001a6c8 <File::close()>
c0019f32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f3a:	83 c4 10             	add    esp,0x10
c0019f3d:	83 c8 ff             	or     eax,0xffffffff
c0019f40:	eb 19                	jmp    c0019f5b <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019f42:	83 ec 0c             	sub    esp,0xc
c0019f45:	53                   	push   ebx
c0019f46:	e8 7d 07 00 00       	call   c001a6c8 <File::close()>
c0019f4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f53:	83 c4 10             	add    esp,0x10
c0019f56:	b8 01 00 00 00       	mov    eax,0x1
c0019f5b:	83 c4 3c             	add    esp,0x3c
c0019f5e:	5b                   	pop    ebx
c0019f5f:	5e                   	pop    esi
c0019f60:	5f                   	pop    edi
c0019f61:	5d                   	pop    ebp
c0019f62:	c3                   	ret    

c0019f63 <KeCreateSymlink(char const*, char const*)>:
c0019f63:	55                   	push   ebp
c0019f64:	57                   	push   edi
c0019f65:	56                   	push   esi
c0019f66:	53                   	push   ebx
c0019f67:	83 ec 38             	sub    esp,0x38
c0019f6a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019f6e:	68 14 01 00 00       	push   0x114
c0019f73:	e8 3f c6 ff ff       	call   c00165b7 <malloc>
c0019f78:	6a 00                	push   0x0
c0019f7a:	89 c3                	mov    ebx,eax
c0019f7c:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019f82:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019f86:	50                   	push   eax
c0019f87:	e8 e2 05 00 00       	call   c001a56e <File::File(char const*, Process*, bool)>
c0019f8c:	83 c4 20             	add    esp,0x20
c0019f8f:	b8 01 00 00 00       	mov    eax,0x1
c0019f94:	85 db                	test   ebx,ebx
c0019f96:	0f 84 19 01 00 00    	je     c001a0b5 <KeCreateSymlink(char const*, char const*)+0x152>
c0019f9c:	52                   	push   edx
c0019f9d:	52                   	push   edx
c0019f9e:	6a 12                	push   0x12
c0019fa0:	53                   	push   ebx
c0019fa1:	e8 c4 06 00 00       	call   c001a66a <File::open(FileOpenMode)>
c0019fa6:	83 c4 10             	add    esp,0x10
c0019fa9:	85 c0                	test   eax,eax
c0019fab:	74 0b                	je     c0019fb8 <KeCreateSymlink(char const*, char const*)+0x55>
c0019fad:	83 ec 0c             	sub    esp,0xc
c0019fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fb2:	53                   	push   ebx
c0019fb3:	e9 f2 00 00 00       	jmp    c001a0aa <KeCreateSymlink(char const*, char const*)+0x147>
c0019fb8:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019fbc:	be c5 23 03 c0       	mov    esi,0xc00323c5
c0019fc1:	b9 09 00 00 00       	mov    ecx,0x9
c0019fc6:	fc                   	cld    
c0019fc7:	83 ec 0c             	sub    esp,0xc
c0019fca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fcc:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019fd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fd2:	56                   	push   esi
c0019fd3:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019fd7:	52                   	push   edx
c0019fd8:	6a 00                	push   0x0
c0019fda:	6a 08                	push   0x8
c0019fdc:	53                   	push   ebx
c0019fdd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019fe0:	83 c4 20             	add    esp,0x20
c0019fe3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019fe8:	0f 85 ae 00 00 00    	jne    c001a09c <KeCreateSymlink(char const*, char const*)+0x139>
c0019fee:	85 c0                	test   eax,eax
c0019ff0:	0f 85 a6 00 00 00    	jne    c001a09c <KeCreateSymlink(char const*, char const*)+0x139>
c0019ff6:	e8 ca f9 ff ff       	call   c00199c5 <KiCreateSymlinkID()>
c0019ffb:	83 ec 0c             	sub    esp,0xc
c0019ffe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a002:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a006:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a008:	56                   	push   esi
c001a009:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a00d:	52                   	push   edx
c001a00e:	6a 00                	push   0x0
c001a010:	6a 08                	push   0x8
c001a012:	53                   	push   ebx
c001a013:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a016:	83 c4 20             	add    esp,0x20
c001a019:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a01e:	75 7c                	jne    c001a09c <KeCreateSymlink(char const*, char const*)+0x139>
c001a020:	85 c0                	test   eax,eax
c001a022:	75 78                	jne    c001a09c <KeCreateSymlink(char const*, char const*)+0x139>
c001a024:	83 ec 0c             	sub    esp,0xc
c001a027:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a029:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a02c:	55                   	push   ebp
c001a02d:	e8 3e 65 fe ff       	call   c0000570 <strlen>
c001a032:	89 34 24             	mov    DWORD PTR [esp],esi
c001a035:	31 d2                	xor    edx,edx
c001a037:	55                   	push   ebp
c001a038:	52                   	push   edx
c001a039:	50                   	push   eax
c001a03a:	53                   	push   ebx
c001a03b:	ff d7                	call   edi
c001a03d:	83 c4 14             	add    esp,0x14
c001a040:	89 c6                	mov    esi,eax
c001a042:	55                   	push   ebp
c001a043:	e8 28 65 fe ff       	call   c0000570 <strlen>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a04f:	75 4b                	jne    c001a09c <KeCreateSymlink(char const*, char const*)+0x139>
c001a051:	85 f6                	test   esi,esi
c001a053:	75 47                	jne    c001a09c <KeCreateSymlink(char const*, char const*)+0x139>
c001a055:	50                   	push   eax
c001a056:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a05a:	55                   	push   ebp
c001a05b:	68 93 23 03 c0       	push   0xc0032393
c001a060:	e8 e0 f3 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001a065:	83 c4 0c             	add    esp,0xc
c001a068:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a06c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a070:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a074:	e8 b9 f9 ff ff       	call   c0019a32 <KeRegisterSymlink(char const*, unsigned long long)>
c001a079:	c7 04 24 b8 23 03 c0 	mov    DWORD PTR [esp],0xc00323b8
c001a080:	e8 c0 f3 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001a085:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a088:	e8 3b 06 00 00       	call   c001a6c8 <File::close()>
c001a08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a08f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a092:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a095:	83 c4 10             	add    esp,0x10
c001a098:	31 c0                	xor    eax,eax
c001a09a:	eb 19                	jmp    c001a0b5 <KeCreateSymlink(char const*, char const*)+0x152>
c001a09c:	83 ec 0c             	sub    esp,0xc
c001a09f:	53                   	push   ebx
c001a0a0:	e8 23 06 00 00       	call   c001a6c8 <File::close()>
c001a0a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	b8 01 00 00 00       	mov    eax,0x1
c001a0b5:	83 c4 2c             	add    esp,0x2c
c001a0b8:	5b                   	pop    ebx
c001a0b9:	5e                   	pop    esi
c001a0ba:	5f                   	pop    edi
c001a0bb:	5d                   	pop    ebp
c001a0bc:	c3                   	ret    
c001a0bd:	90                   	nop

c001a0be <File::read(unsigned long long, void*, int*)>:
c001a0be:	53                   	push   ebx
c001a0bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a0ce:	83 f8 19             	cmp    eax,0x19
c001a0d1:	77 35                	ja     c001a108 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0d3:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a0da:	85 c0                	test   eax,eax
c001a0dc:	74 2a                	je     c001a108 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0de:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a0e4:	85 c0                	test   eax,eax
c001a0e6:	74 20                	je     c001a108 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a0ec:	74 21                	je     c001a10f <File::read(unsigned long long, void*, int*)+0x51>
c001a0ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a0f0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a0f4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a0fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a102:	5b                   	pop    ebx
c001a103:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a106:	ff e0                	jmp    eax
c001a108:	b8 0b 00 00 00       	mov    eax,0xb
c001a10d:	eb 05                	jmp    c001a114 <File::read(unsigned long long, void*, int*)+0x56>
c001a10f:	b8 05 00 00 00       	mov    eax,0x5
c001a114:	5b                   	pop    ebx
c001a115:	c3                   	ret    

c001a116 <File::write(unsigned long long, void*, int*)>:
c001a116:	53                   	push   ebx
c001a117:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a11b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a11f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a126:	83 f8 19             	cmp    eax,0x19
c001a129:	77 35                	ja     c001a160 <File::write(unsigned long long, void*, int*)+0x4a>
c001a12b:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a132:	85 c0                	test   eax,eax
c001a134:	74 2a                	je     c001a160 <File::write(unsigned long long, void*, int*)+0x4a>
c001a136:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a13c:	85 c0                	test   eax,eax
c001a13e:	74 20                	je     c001a160 <File::write(unsigned long long, void*, int*)+0x4a>
c001a140:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a144:	74 21                	je     c001a167 <File::write(unsigned long long, void*, int*)+0x51>
c001a146:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a148:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a14c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a152:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a156:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a15a:	5b                   	pop    ebx
c001a15b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a15e:	ff e0                	jmp    eax
c001a160:	b8 0b 00 00 00       	mov    eax,0xb
c001a165:	eb 05                	jmp    c001a16c <File::write(unsigned long long, void*, int*)+0x56>
c001a167:	b8 05 00 00 00       	mov    eax,0x5
c001a16c:	5b                   	pop    ebx
c001a16d:	c3                   	ret    

c001a16e <Directory::read(unsigned long long, void*, int*)>:
c001a16e:	53                   	push   ebx
c001a16f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a173:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a177:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a17e:	83 f8 19             	cmp    eax,0x19
c001a181:	77 35                	ja     c001a1b8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a183:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a18a:	85 c0                	test   eax,eax
c001a18c:	74 2a                	je     c001a1b8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a18e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a194:	85 c0                	test   eax,eax
c001a196:	74 20                	je     c001a1b8 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a198:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a19c:	74 21                	je     c001a1bf <Directory::read(unsigned long long, void*, int*)+0x51>
c001a19e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1b2:	5b                   	pop    ebx
c001a1b3:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a1b6:	ff e0                	jmp    eax
c001a1b8:	b8 0b 00 00 00       	mov    eax,0xb
c001a1bd:	eb 05                	jmp    c001a1c4 <Directory::read(unsigned long long, void*, int*)+0x56>
c001a1bf:	b8 05 00 00 00       	mov    eax,0x5
c001a1c4:	5b                   	pop    ebx
c001a1c5:	c3                   	ret    

c001a1c6 <Directory::write(unsigned long long, void*, int*)>:
c001a1c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ca:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a1d1:	b8 0b 00 00 00       	mov    eax,0xb
c001a1d6:	83 fa 19             	cmp    edx,0x19
c001a1d9:	77 18                	ja     c001a1f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a1db:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a1e2:	85 d2                	test   edx,edx
c001a1e4:	74 0d                	je     c001a1f3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a1e6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a1ed:	19 c0                	sbb    eax,eax
c001a1ef:	83 e0 0a             	and    eax,0xa
c001a1f2:	40                   	inc    eax
c001a1f3:	c3                   	ret    

c001a1f4 <File::isAtty()>:
c001a1f4:	31 c0                	xor    eax,eax
c001a1f6:	c3                   	ret    
c001a1f7:	90                   	nop

c001a1f8 <Directory::isAtty()>:
c001a1f8:	31 c0                	xor    eax,eax
c001a1fa:	c3                   	ret    
c001a1fb:	90                   	nop

c001a1fc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a1fc:	b8 0a 00 00 00       	mov    eax,0xa
c001a201:	c3                   	ret    

c001a202 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a202:	b8 0a 00 00 00       	mov    eax,0xa
c001a207:	c3                   	ret    

c001a208 <Filesystem::allocateSwapfile(char const*, int)>:
c001a208:	31 c0                	xor    eax,eax
c001a20a:	31 d2                	xor    edx,edx
c001a20c:	c3                   	ret    
c001a20d:	90                   	nop

c001a20e <File::~File()>:
c001a20e:	83 ec 0c             	sub    esp,0xc
c001a211:	ba 84 24 03 c0       	mov    edx,0xc0032484
c001a216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a21a:	89 10                	mov    DWORD PTR [eax],edx
c001a21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a220:	83 ec 0c             	sub    esp,0xc
c001a223:	50                   	push   eax
c001a224:	e8 7b dc ff ff       	call   c0017ea4 <UnixFile::~UnixFile()>
c001a229:	83 c4 10             	add    esp,0x10
c001a22c:	90                   	nop
c001a22d:	83 c4 0c             	add    esp,0xc
c001a230:	c3                   	ret    
c001a231:	90                   	nop

c001a232 <File::~File()>:
c001a232:	83 ec 0c             	sub    esp,0xc
c001a235:	83 ec 0c             	sub    esp,0xc
c001a238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a23c:	e8 cd ff ff ff       	call   c001a20e <File::~File()>
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	83 ec 08             	sub    esp,0x8
c001a247:	68 14 01 00 00       	push   0x114
c001a24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a250:	e8 c3 f0 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001a255:	83 c4 10             	add    esp,0x10
c001a258:	83 c4 0c             	add    esp,0xc
c001a25b:	c3                   	ret    

c001a25c <Directory::~Directory()>:
c001a25c:	83 ec 0c             	sub    esp,0xc
c001a25f:	ba a0 24 03 c0       	mov    edx,0xc00324a0
c001a264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a268:	89 10                	mov    DWORD PTR [eax],edx
c001a26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a26e:	83 ec 0c             	sub    esp,0xc
c001a271:	50                   	push   eax
c001a272:	e8 2d dc ff ff       	call   c0017ea4 <UnixFile::~UnixFile()>
c001a277:	83 c4 10             	add    esp,0x10
c001a27a:	90                   	nop
c001a27b:	83 c4 0c             	add    esp,0xc
c001a27e:	c3                   	ret    
c001a27f:	90                   	nop

c001a280 <Directory::~Directory()>:
c001a280:	83 ec 0c             	sub    esp,0xc
c001a283:	83 ec 0c             	sub    esp,0xc
c001a286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a28a:	e8 cd ff ff ff       	call   c001a25c <Directory::~Directory()>
c001a28f:	83 c4 10             	add    esp,0x10
c001a292:	83 ec 08             	sub    esp,0x8
c001a295:	68 14 01 00 00       	push   0x114
c001a29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a29e:	e8 75 f0 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001a2a3:	83 c4 10             	add    esp,0x10
c001a2a6:	83 c4 0c             	add    esp,0xc
c001a2a9:	c3                   	ret    

c001a2aa <Filesystem::Filesystem()>:
c001a2aa:	ba 18 24 03 c0       	mov    edx,0xc0032418
c001a2af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2b3:	89 10                	mov    DWORD PTR [eax],edx
c001a2b5:	8b 15 04 df 03 c0    	mov    edx,DWORD PTR ds:0xc003df04
c001a2bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c6:	a3 04 df 03 c0       	mov    ds:0xc003df04,eax
c001a2cb:	90                   	nop
c001a2cc:	c3                   	ret    
c001a2cd:	90                   	nop

c001a2ce <Filesystem::~Filesystem()>:
c001a2ce:	ba 18 24 03 c0       	mov    edx,0xc0032418
c001a2d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d7:	89 10                	mov    DWORD PTR [eax],edx
c001a2d9:	90                   	nop
c001a2da:	c3                   	ret    
c001a2db:	90                   	nop

c001a2dc <Filesystem::~Filesystem()>:
c001a2dc:	83 ec 0c             	sub    esp,0xc
c001a2df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a2e3:	e8 e6 ff ff ff       	call   c001a2ce <Filesystem::~Filesystem()>
c001a2e8:	83 c4 04             	add    esp,0x4
c001a2eb:	83 ec 08             	sub    esp,0x8
c001a2ee:	6a 08                	push   0x8
c001a2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2f4:	e8 1f f0 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001a2f9:	83 c4 10             	add    esp,0x10
c001a2fc:	83 c4 0c             	add    esp,0xc
c001a2ff:	c3                   	ret    

c001a300 <Fs::getcwd(Process*, char*, int)>:
c001a300:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a304:	31 c0                	xor    eax,eax
c001a306:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a309:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a30d:	7d 15                	jge    c001a324 <Fs::getcwd(Process*, char*, int)+0x24>
c001a30f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a313:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a31a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a31d:	84 c9                	test   cl,cl
c001a31f:	74 06                	je     c001a327 <Fs::getcwd(Process*, char*, int)+0x27>
c001a321:	40                   	inc    eax
c001a322:	eb e2                	jmp    c001a306 <Fs::getcwd(Process*, char*, int)+0x6>
c001a324:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a327:	31 c0                	xor    eax,eax
c001a329:	c3                   	ret    

c001a32a <Fs::initVFS()>:
c001a32a:	83 ec 18             	sub    esp,0x18
c001a32d:	6a 08                	push   0x8
c001a32f:	e8 83 c2 ff ff       	call   c00165b7 <malloc>
c001a334:	89 04 24             	mov    DWORD PTR [esp],eax
c001a337:	e8 ec ed 00 00       	call   c0029128 <FAT::FAT()>
c001a33c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a343:	e8 6f c2 ff ff       	call   c00165b7 <malloc>
c001a348:	89 04 24             	mov    DWORD PTR [esp],eax
c001a34b:	e8 04 fd 00 00       	call   c002a054 <ISO9660::ISO9660()>
c001a350:	83 c4 1c             	add    esp,0x1c
c001a353:	c3                   	ret    

c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a354:	55                   	push   ebp
c001a355:	57                   	push   edi
c001a356:	56                   	push   esi
c001a357:	53                   	push   ebx
c001a358:	81 ec 10 04 00 00    	sub    esp,0x410
c001a35e:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a365:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a36c:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a374:	68 00 04 00 00       	push   0x400
c001a379:	6a 00                	push   0x0
c001a37b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a37f:	57                   	push   edi
c001a380:	e8 6b 61 fe ff       	call   c00004f0 <memset>
c001a385:	83 c4 10             	add    esp,0x10
c001a388:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a38c:	75 0b                	jne    c001a399 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a38e:	50                   	push   eax
c001a38f:	50                   	push   eax
c001a390:	55                   	push   ebp
c001a391:	57                   	push   edi
c001a392:	e8 a9 62 fe ff       	call   c0000640 <strcpy>
c001a397:	eb 51                	jmp    c001a3ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a399:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a39d:	83 f8 5c             	cmp    eax,0x5c
c001a3a0:	74 05                	je     c001a3a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a3a2:	83 f8 2f             	cmp    eax,0x2f
c001a3a5:	75 1e                	jne    c001a3c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a3a7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a3ae:	8a 00                	mov    al,BYTE PTR [eax]
c001a3b0:	3c 60                	cmp    al,0x60
c001a3b2:	7e 03                	jle    c001a3b7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a3b4:	83 e8 20             	sub    eax,0x20
c001a3b7:	88 04 24             	mov    BYTE PTR [esp],al
c001a3ba:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a3c1:	50                   	push   eax
c001a3c2:	50                   	push   eax
c001a3c3:	eb 1e                	jmp    c001a3e3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a3c5:	50                   	push   eax
c001a3c6:	50                   	push   eax
c001a3c7:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a3ce:	57                   	push   edi
c001a3cf:	e8 6c 62 fe ff       	call   c0000640 <strcpy>
c001a3d4:	58                   	pop    eax
c001a3d5:	5a                   	pop    edx
c001a3d6:	68 3f 36 03 c0       	push   0xc003363f
c001a3db:	57                   	push   edi
c001a3dc:	e8 5f 64 fe ff       	call   c0000840 <strcat>
c001a3e1:	59                   	pop    ecx
c001a3e2:	58                   	pop    eax
c001a3e3:	55                   	push   ebp
c001a3e4:	57                   	push   edi
c001a3e5:	e8 56 64 fe ff       	call   c0000840 <strcat>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a3f0:	3c 60                	cmp    al,0x60
c001a3f2:	7e 03                	jle    c001a3f7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a3f4:	83 e8 20             	sub    eax,0x20
c001a3f7:	88 04 24             	mov    BYTE PTR [esp],al
c001a3fa:	88 06                	mov    BYTE PTR [esi],al
c001a3fc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a403:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a409:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a40d:	bf 03 00 00 00       	mov    edi,0x3
c001a412:	b8 03 00 00 00       	mov    eax,0x3
c001a417:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a41b:	89 e9                	mov    ecx,ebp
c001a41d:	85 ed                	test   ebp,ebp
c001a41f:	0f 84 97 00 00 00    	je     c001a4bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a425:	8d 57 01             	lea    edx,[edi+0x1]
c001a428:	83 fd 5c             	cmp    ebp,0x5c
c001a42b:	74 05                	je     c001a432 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a42d:	83 fd 2f             	cmp    ebp,0x2f
c001a430:	75 12                	jne    c001a444 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a432:	89 c5                	mov    ebp,eax
c001a434:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a439:	74 09                	je     c001a444 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a43b:	40                   	inc    eax
c001a43c:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a440:	89 d7                	mov    edi,edx
c001a442:	eb d3                	jmp    c001a417 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a444:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a449:	0f be e9             	movsx  ebp,cl
c001a44c:	75 5e                	jne    c001a4ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a44e:	83 fd 2e             	cmp    ebp,0x2e
c001a451:	75 59                	jne    c001a4ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a453:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a457:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a45c:	74 18                	je     c001a476 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a45e:	83 fd 2e             	cmp    ebp,0x2e
c001a461:	74 53                	je     c001a4b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a463:	89 fa                	mov    edx,edi
c001a465:	42                   	inc    edx
c001a466:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a46a:	83 f9 2f             	cmp    ecx,0x2f
c001a46d:	74 f6                	je     c001a465 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a46f:	83 f9 5c             	cmp    ecx,0x5c
c001a472:	74 f1                	je     c001a465 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a474:	eb ca                	jmp    c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a476:	83 fd 2e             	cmp    ebp,0x2e
c001a479:	74 3b                	je     c001a4b6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a47b:	83 f8 03             	cmp    eax,0x3
c001a47e:	74 c0                	je     c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a480:	42                   	inc    edx
c001a481:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a485:	83 f9 5c             	cmp    ecx,0x5c
c001a488:	74 f6                	je     c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a48a:	83 f9 2f             	cmp    ecx,0x2f
c001a48d:	74 f1                	je     c001a480 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a48f:	48                   	dec    eax
c001a490:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a494:	75 06                	jne    c001a49c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a496:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a49a:	eb f3                	jmp    c001a48f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a49c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a4a0:	74 07                	je     c001a4a9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a4a2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4a6:	48                   	dec    eax
c001a4a7:	eb f3                	jmp    c001a49c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a4a9:	40                   	inc    eax
c001a4aa:	eb 94                	jmp    c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4ac:	83 fd 5c             	cmp    ebp,0x5c
c001a4af:	74 8f                	je     c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4b1:	83 fd 2f             	cmp    ebp,0x2f
c001a4b4:	74 8a                	je     c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4b6:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a4b9:	40                   	inc    eax
c001a4ba:	eb 84                	jmp    c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4bc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4c0:	83 ec 0c             	sub    esp,0xc
c001a4c3:	56                   	push   esi
c001a4c4:	e8 a7 60 fe ff       	call   c0000570 <strlen>
c001a4c9:	83 c4 10             	add    esp,0x10
c001a4cc:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a4d1:	74 17                	je     c001a4ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a4d3:	83 ec 0c             	sub    esp,0xc
c001a4d6:	56                   	push   esi
c001a4d7:	e8 94 60 fe ff       	call   c0000570 <strlen>
c001a4dc:	83 c4 10             	add    esp,0x10
c001a4df:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a4e4:	74 04                	je     c001a4ea <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a4e6:	31 ff                	xor    edi,edi
c001a4e8:	eb 5c                	jmp    c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a4ea:	83 ec 0c             	sub    esp,0xc
c001a4ed:	56                   	push   esi
c001a4ee:	e8 7d 60 fe ff       	call   c0000570 <strlen>
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a4fb:	74 e9                	je     c001a4e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a4fd:	83 ec 0c             	sub    esp,0xc
c001a500:	56                   	push   esi
c001a501:	e8 6a 60 fe ff       	call   c0000570 <strlen>
c001a506:	83 c4 10             	add    esp,0x10
c001a509:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a50e:	eb b0                	jmp    c001a4c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a510:	52                   	push   edx
c001a511:	52                   	push   edx
c001a512:	56                   	push   esi
c001a513:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a517:	55                   	push   ebp
c001a518:	e8 23 61 fe ff       	call   c0000640 <strcpy>
c001a51d:	59                   	pop    ecx
c001a51e:	58                   	pop    eax
c001a51f:	56                   	push   esi
c001a520:	55                   	push   ebp
c001a521:	e8 96 f8 ff ff       	call   c0019dbc <KeDereferenceSymlink(char const*, char*)>
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	48                   	dec    eax
c001a52a:	75 37                	jne    c001a563 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a52c:	50                   	push   eax
c001a52d:	56                   	push   esi
c001a52e:	55                   	push   ebp
c001a52f:	68 ce 23 03 c0       	push   0xc00323ce
c001a534:	e8 0c ef ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001a539:	83 c4 10             	add    esp,0x10
c001a53c:	8d 47 01             	lea    eax,[edi+0x1]
c001a53f:	83 ff 14             	cmp    edi,0x14
c001a542:	74 08                	je     c001a54c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a544:	89 c7                	mov    edi,eax
c001a546:	85 db                	test   ebx,ebx
c001a548:	75 c6                	jne    c001a510 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a54a:	eb 17                	jmp    c001a563 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	bf 15 00 00 00       	mov    edi,0x15
c001a554:	68 e9 23 03 c0       	push   0xc00323e9
c001a559:	e8 20 62 00 00       	call   c002077e <KePanic(char const*)>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	eb e3                	jmp    c001a546 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a563:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a569:	5b                   	pop    ebx
c001a56a:	5e                   	pop    esi
c001a56b:	5f                   	pop    edi
c001a56c:	5d                   	pop    ebp
c001a56d:	c3                   	ret    

c001a56e <File::File(char const*, Process*, bool)>:
c001a56e:	83 ec 1c             	sub    esp,0x1c
c001a571:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a575:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a57d:	83 ec 08             	sub    esp,0x8
c001a580:	6a 00                	push   0x0
c001a582:	50                   	push   eax
c001a583:	e8 36 d7 ff ff       	call   c0017cbe <UnixFile::UnixFile(int)>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	ba 84 24 03 c0       	mov    edx,0xc0032484
c001a590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a594:	89 10                	mov    DWORD PTR [eax],edx
c001a596:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a59b:	85 c0                	test   eax,eax
c001a59d:	74 0f                	je     c001a5ae <File::File(char const*, Process*, bool)+0x40>
c001a59f:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001a5a4:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a5a8:	74 04                	je     c001a5ae <File::File(char const*, Process*, bool)+0x40>
c001a5aa:	b0 01                	mov    al,0x1
c001a5ac:	eb 02                	jmp    c001a5b0 <File::File(char const*, Process*, bool)+0x42>
c001a5ae:	b0 00                	mov    al,0x0
c001a5b0:	0f b6 c0             	movzx  eax,al
c001a5b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5b7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a5bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a5c1:	83 c2 0d             	add    edx,0xd
c001a5c4:	50                   	push   eax
c001a5c5:	51                   	push   ecx
c001a5c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5ca:	52                   	push   edx
c001a5cb:	e8 84 fd ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a5d0:	83 c4 10             	add    esp,0x10
c001a5d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a5da:	83 e8 41             	sub    eax,0x41
c001a5dd:	88 c2                	mov    dl,al
c001a5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ed:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a5fb:	0f b6 c0             	movzx  eax,al
c001a5fe:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a605:	85 c0                	test   eax,eax
c001a607:	74 3e                	je     c001a647 <File::File(char const*, Process*, bool)+0xd9>
c001a609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a60d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a613:	0f b6 c0             	movzx  eax,al
c001a616:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a61d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a623:	85 c0                	test   eax,eax
c001a625:	75 20                	jne    c001a647 <File::File(char const*, Process*, bool)+0xd9>
c001a627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a62b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a631:	0f b6 c0             	movzx  eax,al
c001a634:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a63b:	83 ec 0c             	sub    esp,0xc
c001a63e:	50                   	push   eax
c001a63f:	e8 ee 22 00 00       	call   c001c932 <LogicalDisk::mount()>
c001a644:	83 c4 10             	add    esp,0x10
c001a647:	90                   	nop
c001a648:	83 c4 1c             	add    esp,0x1c
c001a64b:	c3                   	ret    

c001a64c <File::File(char const*, Process*)>:
c001a64c:	83 ec 0c             	sub    esp,0xc
c001a64f:	6a 01                	push   0x1
c001a651:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a65d:	e8 0c ff ff ff       	call   c001a56e <File::File(char const*, Process*, bool)>
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	90                   	nop
c001a666:	83 c4 0c             	add    esp,0xc
c001a669:	c3                   	ret    

c001a66a <File::open(FileOpenMode)>:
c001a66a:	53                   	push   ebx
c001a66b:	b8 0b 00 00 00       	mov    eax,0xb
c001a670:	83 ec 08             	sub    esp,0x8
c001a673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a677:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a67e:	83 fa 19             	cmp    edx,0x19
c001a681:	77 40                	ja     c001a6c3 <File::open(FileOpenMode)+0x59>
c001a683:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a68a:	85 d2                	test   edx,edx
c001a68c:	74 35                	je     c001a6c3 <File::open(FileOpenMode)+0x59>
c001a68e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a694:	85 d2                	test   edx,edx
c001a696:	74 2b                	je     c001a6c3 <File::open(FileOpenMode)+0x59>
c001a698:	b8 06 00 00 00       	mov    eax,0x6
c001a69d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a6a1:	75 20                	jne    c001a6c3 <File::open(FileOpenMode)+0x59>
c001a6a3:	8b 02                	mov    eax,DWORD PTR [edx]
c001a6a5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a6af:	51                   	push   ecx
c001a6b0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a6b3:	51                   	push   ecx
c001a6b4:	52                   	push   edx
c001a6b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6b8:	83 c4 10             	add    esp,0x10
c001a6bb:	85 c0                	test   eax,eax
c001a6bd:	75 04                	jne    c001a6c3 <File::open(FileOpenMode)+0x59>
c001a6bf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a6c3:	83 c4 08             	add    esp,0x8
c001a6c6:	5b                   	pop    ebx
c001a6c7:	c3                   	ret    

c001a6c8 <File::close()>:
c001a6c8:	53                   	push   ebx
c001a6c9:	b8 0b 00 00 00       	mov    eax,0xb
c001a6ce:	83 ec 08             	sub    esp,0x8
c001a6d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6d5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6dc:	83 f9 19             	cmp    ecx,0x19
c001a6df:	77 41                	ja     c001a722 <File::close()+0x5a>
c001a6e1:	8b 1c 8d 80 03 04 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a6e8:	85 db                	test   ebx,ebx
c001a6ea:	74 36                	je     c001a722 <File::close()+0x5a>
c001a6ec:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a6f3:	74 2d                	je     c001a722 <File::close()+0x5a>
c001a6f5:	b8 05 00 00 00       	mov    eax,0x5
c001a6fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6fe:	74 22                	je     c001a722 <File::close()+0x5a>
c001a700:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a704:	8b 04 8d 80 03 04 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffbfc80]
c001a70b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a711:	53                   	push   ebx
c001a712:	53                   	push   ebx
c001a713:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a715:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a71b:	50                   	push   eax
c001a71c:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a71f:	83 c4 10             	add    esp,0x10
c001a722:	83 c4 08             	add    esp,0x8
c001a725:	5b                   	pop    ebx
c001a726:	c3                   	ret    
c001a727:	90                   	nop

c001a728 <File::seek(unsigned long long)>:
c001a728:	56                   	push   esi
c001a729:	53                   	push   ebx
c001a72a:	b8 0b 00 00 00       	mov    eax,0xb
c001a72f:	51                   	push   ecx
c001a730:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a734:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a738:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a73f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a743:	83 fa 19             	cmp    edx,0x19
c001a746:	77 31                	ja     c001a779 <File::seek(unsigned long long)+0x51>
c001a748:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a74f:	85 d2                	test   edx,edx
c001a751:	74 26                	je     c001a779 <File::seek(unsigned long long)+0x51>
c001a753:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a759:	85 d2                	test   edx,edx
c001a75b:	74 1c                	je     c001a779 <File::seek(unsigned long long)+0x51>
c001a75d:	b8 05 00 00 00       	mov    eax,0x5
c001a762:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a766:	74 11                	je     c001a779 <File::seek(unsigned long long)+0x51>
c001a768:	8b 02                	mov    eax,DWORD PTR [edx]
c001a76a:	53                   	push   ebx
c001a76b:	51                   	push   ecx
c001a76c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a772:	52                   	push   edx
c001a773:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a776:	83 c4 10             	add    esp,0x10
c001a779:	5a                   	pop    edx
c001a77a:	5b                   	pop    ebx
c001a77b:	5e                   	pop    esi
c001a77c:	c3                   	ret    
c001a77d:	90                   	nop

c001a77e <File::truncate(unsigned long long)>:
c001a77e:	56                   	push   esi
c001a77f:	53                   	push   ebx
c001a780:	b8 0b 00 00 00       	mov    eax,0xb
c001a785:	51                   	push   ecx
c001a786:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a78a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a78e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a795:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a799:	83 fa 19             	cmp    edx,0x19
c001a79c:	77 31                	ja     c001a7cf <File::truncate(unsigned long long)+0x51>
c001a79e:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a7a5:	85 d2                	test   edx,edx
c001a7a7:	74 26                	je     c001a7cf <File::truncate(unsigned long long)+0x51>
c001a7a9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7af:	85 d2                	test   edx,edx
c001a7b1:	74 1c                	je     c001a7cf <File::truncate(unsigned long long)+0x51>
c001a7b3:	b8 05 00 00 00       	mov    eax,0x5
c001a7b8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7bc:	74 11                	je     c001a7cf <File::truncate(unsigned long long)+0x51>
c001a7be:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7c0:	53                   	push   ebx
c001a7c1:	51                   	push   ecx
c001a7c2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a7c8:	52                   	push   edx
c001a7c9:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	5a                   	pop    edx
c001a7d0:	5b                   	pop    ebx
c001a7d1:	5e                   	pop    esi
c001a7d2:	c3                   	ret    
c001a7d3:	90                   	nop

c001a7d4 <File::tell(unsigned long long*)>:
c001a7d4:	83 ec 0c             	sub    esp,0xc
c001a7d7:	b8 0b 00 00 00       	mov    eax,0xb
c001a7dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7e0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a7e7:	83 fa 19             	cmp    edx,0x19
c001a7ea:	77 34                	ja     c001a820 <File::tell(unsigned long long*)+0x4c>
c001a7ec:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a7f3:	85 d2                	test   edx,edx
c001a7f5:	74 29                	je     c001a820 <File::tell(unsigned long long*)+0x4c>
c001a7f7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7fd:	85 d2                	test   edx,edx
c001a7ff:	74 1f                	je     c001a820 <File::tell(unsigned long long*)+0x4c>
c001a801:	b8 05 00 00 00       	mov    eax,0x5
c001a806:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a80a:	74 14                	je     c001a820 <File::tell(unsigned long long*)+0x4c>
c001a80c:	50                   	push   eax
c001a80d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a80f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a813:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a819:	52                   	push   edx
c001a81a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a81d:	83 c4 10             	add    esp,0x10
c001a820:	83 c4 0c             	add    esp,0xc
c001a823:	c3                   	ret    

c001a824 <File::rewind()>:
c001a824:	83 ec 10             	sub    esp,0x10
c001a827:	6a 00                	push   0x0
c001a829:	6a 00                	push   0x0
c001a82b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a82f:	e8 f4 fe ff ff       	call   c001a728 <File::seek(unsigned long long)>
c001a834:	83 c4 1c             	add    esp,0x1c
c001a837:	c3                   	ret    

c001a838 <File::unlink()>:
c001a838:	83 ec 0c             	sub    esp,0xc
c001a83b:	b8 0b 00 00 00       	mov    eax,0xb
c001a840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a84b:	83 f9 19             	cmp    ecx,0x19
c001a84e:	77 2f                	ja     c001a87f <File::unlink()+0x47>
c001a850:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a857:	85 c9                	test   ecx,ecx
c001a859:	74 24                	je     c001a87f <File::unlink()+0x47>
c001a85b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a861:	85 c9                	test   ecx,ecx
c001a863:	74 1a                	je     c001a87f <File::unlink()+0x47>
c001a865:	b8 06 00 00 00       	mov    eax,0x6
c001a86a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a86e:	75 0f                	jne    c001a87f <File::unlink()+0x47>
c001a870:	83 c2 0d             	add    edx,0xd
c001a873:	50                   	push   eax
c001a874:	50                   	push   eax
c001a875:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a877:	52                   	push   edx
c001a878:	51                   	push   ecx
c001a879:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	83 c4 0c             	add    esp,0xc
c001a882:	c3                   	ret    
c001a883:	90                   	nop

c001a884 <File::rename(char const*)>:
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	b8 0b 00 00 00       	mov    eax,0xb
c001a88c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a890:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a897:	83 f9 19             	cmp    ecx,0x19
c001a89a:	77 32                	ja     c001a8ce <File::rename(char const*)+0x4a>
c001a89c:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a8a3:	85 c9                	test   ecx,ecx
c001a8a5:	74 27                	je     c001a8ce <File::rename(char const*)+0x4a>
c001a8a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8ad:	85 c9                	test   ecx,ecx
c001a8af:	74 1d                	je     c001a8ce <File::rename(char const*)+0x4a>
c001a8b1:	b8 06 00 00 00       	mov    eax,0x6
c001a8b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8ba:	75 12                	jne    c001a8ce <File::rename(char const*)+0x4a>
c001a8bc:	83 c2 0d             	add    edx,0xd
c001a8bf:	50                   	push   eax
c001a8c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a8c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8c6:	52                   	push   edx
c001a8c7:	51                   	push   ecx
c001a8c8:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a8cb:	83 c4 10             	add    esp,0x10
c001a8ce:	83 c4 0c             	add    esp,0xc
c001a8d1:	c3                   	ret    

c001a8d2 <File::chfatattr(unsigned char, unsigned char)>:
c001a8d2:	57                   	push   edi
c001a8d3:	b8 0b 00 00 00       	mov    eax,0xb
c001a8d8:	56                   	push   esi
c001a8d9:	53                   	push   ebx
c001a8da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8ed:	83 f9 19             	cmp    ecx,0x19
c001a8f0:	77 37                	ja     c001a929 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a8f2:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a8f9:	85 c9                	test   ecx,ecx
c001a8fb:	74 2c                	je     c001a929 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a8fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a903:	85 c9                	test   ecx,ecx
c001a905:	74 22                	je     c001a929 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a907:	b8 06 00 00 00       	mov    eax,0x6
c001a90c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a910:	75 17                	jne    c001a929 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a912:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a914:	89 f0                	mov    eax,esi
c001a916:	83 c2 0d             	add    edx,0xd
c001a919:	0f b6 f0             	movzx  esi,al
c001a91c:	0f b6 db             	movzx  ebx,bl
c001a91f:	56                   	push   esi
c001a920:	53                   	push   ebx
c001a921:	52                   	push   edx
c001a922:	51                   	push   ecx
c001a923:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a926:	83 c4 10             	add    esp,0x10
c001a929:	5b                   	pop    ebx
c001a92a:	5e                   	pop    esi
c001a92b:	5f                   	pop    edi
c001a92c:	c3                   	ret    
c001a92d:	90                   	nop

c001a92e <File::exists()>:
c001a92e:	83 ec 0c             	sub    esp,0xc
c001a931:	31 c0                	xor    eax,eax
c001a933:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a937:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a93e:	83 f9 19             	cmp    ecx,0x19
c001a941:	77 24                	ja     c001a967 <File::exists()+0x39>
c001a943:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a94a:	85 c9                	test   ecx,ecx
c001a94c:	74 19                	je     c001a967 <File::exists()+0x39>
c001a94e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a954:	85 c9                	test   ecx,ecx
c001a956:	74 0f                	je     c001a967 <File::exists()+0x39>
c001a958:	83 c2 0d             	add    edx,0xd
c001a95b:	50                   	push   eax
c001a95c:	50                   	push   eax
c001a95d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a95f:	52                   	push   edx
c001a960:	51                   	push   ecx
c001a961:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a964:	83 c4 10             	add    esp,0x10
c001a967:	83 c4 0c             	add    esp,0xc
c001a96a:	c3                   	ret    
c001a96b:	90                   	nop

c001a96c <File::stat(unsigned long long*, bool*)>:
c001a96c:	56                   	push   esi
c001a96d:	53                   	push   ebx
c001a96e:	50                   	push   eax
c001a96f:	b8 0b 00 00 00       	mov    eax,0xb
c001a974:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a978:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a97c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a983:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a987:	83 f9 19             	cmp    ecx,0x19
c001a98a:	77 3d                	ja     c001a9c9 <File::stat(unsigned long long*, bool*)+0x5d>
c001a98c:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a993:	85 c9                	test   ecx,ecx
c001a995:	74 32                	je     c001a9c9 <File::stat(unsigned long long*, bool*)+0x5d>
c001a997:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a99d:	85 c9                	test   ecx,ecx
c001a99f:	74 28                	je     c001a9c9 <File::stat(unsigned long long*, bool*)+0x5d>
c001a9a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9a7:	74 13                	je     c001a9bc <File::stat(unsigned long long*, bool*)+0x50>
c001a9a9:	83 ec 04             	sub    esp,0x4
c001a9ac:	56                   	push   esi
c001a9ad:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a9b3:	51                   	push   ecx
c001a9b4:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a9b7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a9ba:	eb 0a                	jmp    c001a9c6 <File::stat(unsigned long long*, bool*)+0x5a>
c001a9bc:	53                   	push   ebx
c001a9bd:	83 c2 0d             	add    edx,0xd
c001a9c0:	56                   	push   esi
c001a9c1:	52                   	push   edx
c001a9c2:	51                   	push   ecx
c001a9c3:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a9c6:	83 c4 10             	add    esp,0x10
c001a9c9:	5a                   	pop    edx
c001a9ca:	5b                   	pop    ebx
c001a9cb:	5e                   	pop    esi
c001a9cc:	c3                   	ret    

c001a9cd <Fs::setcwd(Process*, char*)>:
c001a9cd:	55                   	push   ebp
c001a9ce:	57                   	push   edi
c001a9cf:	56                   	push   esi
c001a9d0:	53                   	push   ebx
c001a9d1:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a9d7:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a9de:	6a 00                	push   0x0
c001a9e0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a9e6:	57                   	push   edi
c001a9e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9ee:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a9f2:	56                   	push   esi
c001a9f3:	e8 5c f9 ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a9f8:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9fb:	e8 70 5b fe ff       	call   c0000570 <strlen>
c001aa00:	83 c4 10             	add    esp,0x10
c001aa03:	83 f8 02             	cmp    eax,0x2
c001aa06:	77 15                	ja     c001aa1d <Fs::setcwd(Process*, char*)+0x50>
c001aa08:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aa0d:	83 eb 41             	sub    ebx,0x41
c001aa10:	8b 04 9d 80 03 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbfc80]
c001aa17:	85 c0                	test   eax,eax
c001aa19:	75 1c                	jne    c001aa37 <Fs::setcwd(Process*, char*)+0x6a>
c001aa1b:	eb 2f                	jmp    c001aa4c <Fs::setcwd(Process*, char*)+0x7f>
c001aa1d:	83 ec 0c             	sub    esp,0xc
c001aa20:	56                   	push   esi
c001aa21:	e8 4a 5b fe ff       	call   c0000570 <strlen>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	83 f8 03             	cmp    eax,0x3
c001aa2c:	75 57                	jne    c001aa85 <Fs::setcwd(Process*, char*)+0xb8>
c001aa2e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aa33:	75 50                	jne    c001aa85 <Fs::setcwd(Process*, char*)+0xb8>
c001aa35:	eb d1                	jmp    c001aa08 <Fs::setcwd(Process*, char*)+0x3b>
c001aa37:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aa3e:	75 0c                	jne    c001aa4c <Fs::setcwd(Process*, char*)+0x7f>
c001aa40:	83 ec 0c             	sub    esp,0xc
c001aa43:	50                   	push   eax
c001aa44:	e8 e9 1e 00 00       	call   c001c932 <LogicalDisk::mount()>
c001aa49:	83 c4 10             	add    esp,0x10
c001aa4c:	b8 03 00 00 00       	mov    eax,0x3
c001aa51:	83 fb 19             	cmp    ebx,0x19
c001aa54:	0f 87 c6 00 00 00    	ja     c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001aa5a:	8b 14 9d 80 03 04 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffbfc80]
c001aa61:	b8 05 00 00 00       	mov    eax,0x5
c001aa66:	85 d2                	test   edx,edx
c001aa68:	0f 84 b2 00 00 00    	je     c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001aa6e:	b8 06 00 00 00       	mov    eax,0x6
c001aa73:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001aa7a:	0f 85 92 00 00 00    	jne    c001ab12 <Fs::setcwd(Process*, char*)+0x145>
c001aa80:	e9 9b 00 00 00       	jmp    c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001aa85:	83 ec 0c             	sub    esp,0xc
c001aa88:	68 14 01 00 00       	push   0x114
c001aa8d:	e8 25 bb ff ff       	call   c00165b7 <malloc>
c001aa92:	83 c4 0c             	add    esp,0xc
c001aa95:	89 c3                	mov    ebx,eax
c001aa97:	55                   	push   ebp
c001aa98:	56                   	push   esi
c001aa99:	50                   	push   eax
c001aa9a:	e8 ad fb ff ff       	call   c001a64c <File::File(char const*, Process*)>
c001aa9f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001aaa4:	83 c4 0c             	add    esp,0xc
c001aaa7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aaab:	50                   	push   eax
c001aaac:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aab0:	50                   	push   eax
c001aab1:	53                   	push   ebx
c001aab2:	e8 b5 fe ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c001aab7:	83 c4 10             	add    esp,0x10
c001aaba:	83 f8 02             	cmp    eax,0x2
c001aabd:	74 27                	je     c001aae6 <Fs::setcwd(Process*, char*)+0x119>
c001aabf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001aac4:	75 1c                	jne    c001aae2 <Fs::setcwd(Process*, char*)+0x115>
c001aac6:	b8 02 00 00 00       	mov    eax,0x2
c001aacb:	85 db                	test   ebx,ebx
c001aacd:	74 51                	je     c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001aacf:	83 ec 0c             	sub    esp,0xc
c001aad2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aad4:	53                   	push   ebx
c001aad5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aad8:	83 c4 10             	add    esp,0x10
c001aadb:	b8 02 00 00 00       	mov    eax,0x2
c001aae0:	eb 3e                	jmp    c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001aae2:	85 c0                	test   eax,eax
c001aae4:	74 1c                	je     c001ab02 <Fs::setcwd(Process*, char*)+0x135>
c001aae6:	b8 01 00 00 00       	mov    eax,0x1
c001aaeb:	85 db                	test   ebx,ebx
c001aaed:	74 31                	je     c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001aaef:	83 ec 0c             	sub    esp,0xc
c001aaf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaf4:	53                   	push   ebx
c001aaf5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	b8 01 00 00 00       	mov    eax,0x1
c001ab00:	eb 1e                	jmp    c001ab20 <Fs::setcwd(Process*, char*)+0x153>
c001ab02:	85 db                	test   ebx,ebx
c001ab04:	74 0c                	je     c001ab12 <Fs::setcwd(Process*, char*)+0x145>
c001ab06:	83 ec 0c             	sub    esp,0xc
c001ab09:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab0b:	53                   	push   ebx
c001ab0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	50                   	push   eax
c001ab13:	50                   	push   eax
c001ab14:	56                   	push   esi
c001ab15:	57                   	push   edi
c001ab16:	e8 25 5b fe ff       	call   c0000640 <strcpy>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	31 c0                	xor    eax,eax
c001ab20:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab26:	5b                   	pop    ebx
c001ab27:	5e                   	pop    esi
c001ab28:	5f                   	pop    edi
c001ab29:	5d                   	pop    ebp
c001ab2a:	c3                   	ret    
c001ab2b:	90                   	nop

c001ab2c <Directory::Directory(char const*, Process*)>:
c001ab2c:	83 ec 0c             	sub    esp,0xc
c001ab2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab33:	83 ec 08             	sub    esp,0x8
c001ab36:	6a 00                	push   0x0
c001ab38:	50                   	push   eax
c001ab39:	e8 80 d1 ff ff       	call   c0017cbe <UnixFile::UnixFile(int)>
c001ab3e:	83 c4 10             	add    esp,0x10
c001ab41:	ba a0 24 03 c0       	mov    edx,0xc00324a0
c001ab46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4a:	89 10                	mov    DWORD PTR [eax],edx
c001ab4c:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ab51:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab55:	0f 95 c0             	setne  al
c001ab58:	0f b6 c0             	movzx  eax,al
c001ab5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab5f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001ab65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab69:	83 c2 0d             	add    edx,0xd
c001ab6c:	50                   	push   eax
c001ab6d:	51                   	push   ecx
c001ab6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab72:	52                   	push   edx
c001ab73:	e8 dc f7 ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ab78:	83 c4 10             	add    esp,0x10
c001ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ab82:	83 e8 41             	sub    eax,0x41
c001ab85:	88 c2                	mov    dl,al
c001ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001ab91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab95:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001ab99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aba3:	0f b6 c0             	movzx  eax,al
c001aba6:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001abad:	85 c0                	test   eax,eax
c001abaf:	74 3e                	je     c001abef <Directory::Directory(char const*, Process*)+0xc3>
c001abb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abbb:	0f b6 c0             	movzx  eax,al
c001abbe:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001abc5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001abcb:	85 c0                	test   eax,eax
c001abcd:	75 20                	jne    c001abef <Directory::Directory(char const*, Process*)+0xc3>
c001abcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abd9:	0f b6 c0             	movzx  eax,al
c001abdc:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001abe3:	83 ec 0c             	sub    esp,0xc
c001abe6:	50                   	push   eax
c001abe7:	e8 46 1d 00 00       	call   c001c932 <LogicalDisk::mount()>
c001abec:	83 c4 10             	add    esp,0x10
c001abef:	90                   	nop
c001abf0:	83 c4 0c             	add    esp,0xc
c001abf3:	c3                   	ret    

c001abf4 <Directory::open()>:
c001abf4:	53                   	push   ebx
c001abf5:	b8 0b 00 00 00       	mov    eax,0xb
c001abfa:	83 ec 08             	sub    esp,0x8
c001abfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac01:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ac08:	83 fa 19             	cmp    edx,0x19
c001ac0b:	77 3d                	ja     c001ac4a <Directory::open()+0x56>
c001ac0d:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001ac14:	85 d2                	test   edx,edx
c001ac16:	74 32                	je     c001ac4a <Directory::open()+0x56>
c001ac18:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001ac1e:	85 d2                	test   edx,edx
c001ac20:	74 28                	je     c001ac4a <Directory::open()+0x56>
c001ac22:	b8 06 00 00 00       	mov    eax,0x6
c001ac27:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001ac2b:	75 1d                	jne    c001ac4a <Directory::open()+0x56>
c001ac2d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001ac33:	50                   	push   eax
c001ac34:	8b 02                	mov    eax,DWORD PTR [edx]
c001ac36:	51                   	push   ecx
c001ac37:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001ac3a:	51                   	push   ecx
c001ac3b:	52                   	push   edx
c001ac3c:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	85 c0                	test   eax,eax
c001ac44:	75 04                	jne    c001ac4a <Directory::open()+0x56>
c001ac46:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ac4a:	83 c4 08             	add    esp,0x8
c001ac4d:	5b                   	pop    ebx
c001ac4e:	c3                   	ret    
c001ac4f:	90                   	nop

c001ac50 <Directory::close()>:
c001ac50:	53                   	push   ebx
c001ac51:	b8 0b 00 00 00       	mov    eax,0xb
c001ac56:	83 ec 08             	sub    esp,0x8
c001ac59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac5d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac64:	83 f9 19             	cmp    ecx,0x19
c001ac67:	77 41                	ja     c001acaa <Directory::close()+0x5a>
c001ac69:	8b 1c 8d 80 03 04 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ac70:	85 db                	test   ebx,ebx
c001ac72:	74 36                	je     c001acaa <Directory::close()+0x5a>
c001ac74:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ac7b:	74 2d                	je     c001acaa <Directory::close()+0x5a>
c001ac7d:	b8 05 00 00 00       	mov    eax,0x5
c001ac82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac86:	74 22                	je     c001acaa <Directory::close()+0x5a>
c001ac88:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ac8c:	8b 04 8d 80 03 04 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffbfc80]
c001ac93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ac99:	53                   	push   ebx
c001ac9a:	53                   	push   ebx
c001ac9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac9d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aca3:	50                   	push   eax
c001aca4:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aca7:	83 c4 10             	add    esp,0x10
c001acaa:	83 c4 08             	add    esp,0x8
c001acad:	5b                   	pop    ebx
c001acae:	c3                   	ret    
c001acaf:	90                   	nop

c001acb0 <Directory::unlink()>:
c001acb0:	83 ec 0c             	sub    esp,0xc
c001acb3:	b8 0b 00 00 00       	mov    eax,0xb
c001acb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acbc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001acc3:	83 f9 19             	cmp    ecx,0x19
c001acc6:	77 2f                	ja     c001acf7 <Directory::unlink()+0x47>
c001acc8:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001accf:	85 c9                	test   ecx,ecx
c001acd1:	74 24                	je     c001acf7 <Directory::unlink()+0x47>
c001acd3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001acd9:	85 c9                	test   ecx,ecx
c001acdb:	74 1a                	je     c001acf7 <Directory::unlink()+0x47>
c001acdd:	b8 06 00 00 00       	mov    eax,0x6
c001ace2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ace6:	75 0f                	jne    c001acf7 <Directory::unlink()+0x47>
c001ace8:	83 c2 0d             	add    edx,0xd
c001aceb:	50                   	push   eax
c001acec:	50                   	push   eax
c001aced:	8b 01                	mov    eax,DWORD PTR [ecx]
c001acef:	52                   	push   edx
c001acf0:	51                   	push   ecx
c001acf1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001acf4:	83 c4 10             	add    esp,0x10
c001acf7:	83 c4 0c             	add    esp,0xc
c001acfa:	c3                   	ret    
c001acfb:	90                   	nop

c001acfc <Directory::rename(char const*)>:
c001acfc:	83 ec 0c             	sub    esp,0xc
c001acff:	b8 0b 00 00 00       	mov    eax,0xb
c001ad04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad08:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad0f:	83 f9 19             	cmp    ecx,0x19
c001ad12:	77 32                	ja     c001ad46 <Directory::rename(char const*)+0x4a>
c001ad14:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ad1b:	85 c9                	test   ecx,ecx
c001ad1d:	74 27                	je     c001ad46 <Directory::rename(char const*)+0x4a>
c001ad1f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad25:	85 c9                	test   ecx,ecx
c001ad27:	74 1d                	je     c001ad46 <Directory::rename(char const*)+0x4a>
c001ad29:	b8 06 00 00 00       	mov    eax,0x6
c001ad2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad32:	75 12                	jne    c001ad46 <Directory::rename(char const*)+0x4a>
c001ad34:	83 c2 0d             	add    edx,0xd
c001ad37:	50                   	push   eax
c001ad38:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad3e:	52                   	push   edx
c001ad3f:	51                   	push   ecx
c001ad40:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ad43:	83 c4 10             	add    esp,0x10
c001ad46:	83 c4 0c             	add    esp,0xc
c001ad49:	c3                   	ret    

c001ad4a <Directory::exists()>:
c001ad4a:	83 ec 0c             	sub    esp,0xc
c001ad4d:	31 c0                	xor    eax,eax
c001ad4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad53:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad5a:	83 f9 19             	cmp    ecx,0x19
c001ad5d:	77 24                	ja     c001ad83 <Directory::exists()+0x39>
c001ad5f:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ad66:	85 c9                	test   ecx,ecx
c001ad68:	74 19                	je     c001ad83 <Directory::exists()+0x39>
c001ad6a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad70:	85 c9                	test   ecx,ecx
c001ad72:	74 0f                	je     c001ad83 <Directory::exists()+0x39>
c001ad74:	83 c2 0d             	add    edx,0xd
c001ad77:	50                   	push   eax
c001ad78:	50                   	push   eax
c001ad79:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad7b:	52                   	push   edx
c001ad7c:	51                   	push   ecx
c001ad7d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ad80:	83 c4 10             	add    esp,0x10
c001ad83:	83 c4 0c             	add    esp,0xc
c001ad86:	c3                   	ret    
c001ad87:	90                   	nop

c001ad88 <Directory::read(dirent*)>:
c001ad88:	83 ec 1c             	sub    esp,0x1c
c001ad8b:	b8 0b 00 00 00       	mov    eax,0xb
c001ad90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad9b:	83 f9 19             	cmp    ecx,0x19
c001ad9e:	77 30                	ja     c001add0 <Directory::read(dirent*)+0x48>
c001ada0:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ada7:	85 c9                	test   ecx,ecx
c001ada9:	74 25                	je     c001add0 <Directory::read(dirent*)+0x48>
c001adab:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001adb2:	74 1c                	je     c001add0 <Directory::read(dirent*)+0x48>
c001adb4:	83 ec 0c             	sub    esp,0xc
c001adb7:	8b 02                	mov    eax,DWORD PTR [edx]
c001adb9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001adbd:	51                   	push   ecx
c001adbe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adc2:	6a 00                	push   0x0
c001adc4:	68 10 01 00 00       	push   0x110
c001adc9:	52                   	push   edx
c001adca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adcd:	83 c4 20             	add    esp,0x20
c001add0:	83 c4 1c             	add    esp,0x1c
c001add3:	c3                   	ret    

c001add4 <Directory::create()>:
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	b8 0b 00 00 00       	mov    eax,0xb
c001addc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ade0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ade7:	83 f9 19             	cmp    ecx,0x19
c001adea:	77 2f                	ja     c001ae1b <Directory::create()+0x47>
c001adec:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001adf3:	85 c9                	test   ecx,ecx
c001adf5:	74 24                	je     c001ae1b <Directory::create()+0x47>
c001adf7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adfd:	85 c9                	test   ecx,ecx
c001adff:	74 1a                	je     c001ae1b <Directory::create()+0x47>
c001ae01:	b8 06 00 00 00       	mov    eax,0x6
c001ae06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae0a:	75 0f                	jne    c001ae1b <Directory::create()+0x47>
c001ae0c:	83 c2 0d             	add    edx,0xd
c001ae0f:	50                   	push   eax
c001ae10:	50                   	push   eax
c001ae11:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae13:	52                   	push   edx
c001ae14:	51                   	push   ecx
c001ae15:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ae18:	83 c4 10             	add    esp,0x10
c001ae1b:	83 c4 0c             	add    esp,0xc
c001ae1e:	c3                   	ret    
c001ae1f:	90                   	nop

c001ae20 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae20:	b8 0a 00 00 00       	mov    eax,0xa
c001ae25:	c3                   	ret    
c001ae26:	66 90                	xchg   ax,ax

c001ae28 <Bus::Bus(char const*)>:
c001ae28:	83 ec 0c             	sub    esp,0xc
c001ae2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2f:	83 ec 08             	sub    esp,0x8
c001ae32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae36:	50                   	push   eax
c001ae37:	e8 28 09 00 00       	call   c001b764 <Device::Device(char const*)>
c001ae3c:	83 c4 10             	add    esp,0x10
c001ae3f:	ba bc 24 03 c0       	mov    edx,0xc00324bc
c001ae44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae48:	89 10                	mov    DWORD PTR [eax],edx
c001ae4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ae58:	90                   	nop
c001ae59:	83 c4 0c             	add    esp,0xc
c001ae5c:	c3                   	ret    
c001ae5d:	90                   	nop
c001ae5e:	66 90                	xchg   ax,ax

c001ae60 <Bus::~Bus()>:
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	ba bc 24 03 c0       	mov    edx,0xc00324bc
c001ae68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6c:	89 10                	mov    DWORD PTR [eax],edx
c001ae6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae72:	83 ec 0c             	sub    esp,0xc
c001ae75:	50                   	push   eax
c001ae76:	e8 89 06 00 00       	call   c001b504 <Device::~Device()>
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	90                   	nop
c001ae7f:	83 c4 0c             	add    esp,0xc
c001ae82:	c3                   	ret    
c001ae83:	90                   	nop

c001ae84 <Bus::~Bus()>:
c001ae84:	83 ec 0c             	sub    esp,0xc
c001ae87:	83 ec 0c             	sub    esp,0xc
c001ae8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae8e:	e8 cd ff ff ff       	call   c001ae60 <Bus::~Bus()>
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	83 ec 08             	sub    esp,0x8
c001ae99:	68 58 01 00 00       	push   0x158
c001ae9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aea2:	e8 71 e4 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001aea7:	83 c4 10             	add    esp,0x10
c001aeaa:	83 c4 0c             	add    esp,0xc
c001aead:	c3                   	ret    

c001aeae <beepThread(void*)>:
c001aeae:	83 ec 0c             	sub    esp,0xc
c001aeb1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001aeb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeba:	48                   	dec    eax
c001aebb:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001aec0:	75 01                	jne    c001aec3 <beepThread(void*)+0x15>
c001aec2:	fb                   	sti    
c001aec3:	83 ec 0c             	sub    esp,0xc
c001aec6:	6b c2 0a             	imul   eax,edx,0xa
c001aec9:	50                   	push   eax
c001aeca:	e8 95 aa 00 00       	call   c0025964 <milliTenthSleep(unsigned int)>
c001aecf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aed6:	e8 69 c9 00 00       	call   c0027844 <HalMakeBeep(int)>
c001aedb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001aee3:	83 c4 1c             	add    esp,0x1c
c001aee6:	e9 5d a9 00 00       	jmp    c0025848 <blockTask(TaskState)>

c001aeeb <Krnl::beep(int, int, bool)>:
c001aeeb:	56                   	push   esi
c001aeec:	53                   	push   ebx
c001aeed:	83 ec 10             	sub    esp,0x10
c001aef0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aef4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aefc:	e8 43 c9 00 00       	call   c0027844 <HalMakeBeep(int)>
c001af01:	83 c4 10             	add    esp,0x10
c001af04:	89 f0                	mov    eax,esi
c001af06:	84 c0                	test   al,al
c001af08:	74 1e                	je     c001af28 <Krnl::beep(int, int, bool)+0x3d>
c001af0a:	83 ec 0c             	sub    esp,0xc
c001af0d:	6b db 0a             	imul   ebx,ebx,0xa
c001af10:	53                   	push   ebx
c001af11:	e8 4e aa 00 00       	call   c0025964 <milliTenthSleep(unsigned int)>
c001af16:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af1e:	83 c4 14             	add    esp,0x14
c001af21:	5b                   	pop    ebx
c001af22:	5e                   	pop    esi
c001af23:	e9 1c c9 00 00       	jmp    c0027844 <HalMakeBeep(int)>
c001af28:	68 e6 00 00 00       	push   0xe6
c001af2d:	53                   	push   ebx
c001af2e:	68 ae ae 01 c0       	push   0xc001aeae
c001af33:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c001af39:	e8 fe a5 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c001af3e:	83 c4 14             	add    esp,0x14
c001af41:	5b                   	pop    ebx
c001af42:	5e                   	pop    esi
c001af43:	c3                   	ret    

c001af44 <User::loadClockSettings()>:
c001af44:	56                   	push   esi
c001af45:	53                   	push   ebx
c001af46:	81 ec 40 01 00 00    	sub    esp,0x140
c001af4c:	68 e0 24 03 c0       	push   0xc00324e0
c001af51:	e8 ef e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001af56:	c7 04 24 f6 24 03 c0 	mov    DWORD PTR [esp],0xc00324f6
c001af5d:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c001af62:	e8 de e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001af67:	c7 04 24 0c 25 03 c0 	mov    DWORD PTR [esp],0xc003250c
c001af6e:	e8 4d 73 00 00       	call   c00222c0 <CmOpen(char const*)>
c001af73:	c7 04 24 31 25 03 c0 	mov    DWORD PTR [esp],0xc0032531
c001af7a:	89 c3                	mov    ebx,eax
c001af7c:	e8 c4 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001af81:	58                   	pop    eax
c001af82:	5a                   	pop    edx
c001af83:	68 47 25 03 c0       	push   0xc0032547
c001af88:	53                   	push   ebx
c001af89:	e8 32 7f 00 00       	call   c0022ec0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001af8e:	c7 04 24 5c 25 03 c0 	mov    DWORD PTR [esp],0xc003255c
c001af95:	89 c6                	mov    esi,eax
c001af97:	e8 a9 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001af9c:	83 c4 10             	add    esp,0x10
c001af9f:	85 f6                	test   esi,esi
c001afa1:	7e 1f                	jle    c001afc2 <User::loadClockSettings()+0x7e>
c001afa3:	83 ec 0c             	sub    esp,0xc
c001afa6:	68 72 25 03 c0       	push   0xc0032572
c001afab:	e8 95 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001afb0:	83 c4 0c             	add    esp,0xc
c001afb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001afb7:	50                   	push   eax
c001afb8:	56                   	push   esi
c001afb9:	53                   	push   ebx
c001afba:	e8 71 74 00 00       	call   c0022430 <CmGetString(Reghive_Tag*, int, char*)>
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	68 8a 25 03 c0       	push   0xc003258a
c001afca:	e8 76 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001afcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afd2:	e8 07 74 00 00       	call   c00223de <CmClose(Reghive_Tag*)>
c001afd7:	c7 04 24 a0 25 03 c0 	mov    DWORD PTR [esp],0xc00325a0
c001afde:	e8 62 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001afe3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	83 e8 2b             	sub    eax,0x2b
c001afed:	a8 fd                	test   al,0xfd
c001afef:	0f 85 9f 00 00 00    	jne    c001b094 <User::loadClockSettings()+0x150>
c001aff5:	83 ec 0c             	sub    esp,0xc
c001aff8:	68 b6 25 03 c0       	push   0xc00325b6
c001affd:	e8 43 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b002:	83 c4 10             	add    esp,0x10
c001b005:	c6 05 08 df 03 c0 00 	mov    BYTE PTR ds:0xc003df08,0x0
c001b00c:	80 7c 24 06 2e       	cmp    BYTE PTR [esp+0x6],0x2e
c001b011:	0f be 54 24 07       	movsx  edx,BYTE PTR [esp+0x7]
c001b016:	75 07                	jne    c001b01f <User::loadClockSettings()+0xdb>
c001b018:	b0 01                	mov    al,0x1
c001b01a:	83 fa 35             	cmp    edx,0x35
c001b01d:	74 0f                	je     c001b02e <User::loadClockSettings()+0xea>
c001b01f:	31 c0                	xor    eax,eax
c001b021:	83 fa 2e             	cmp    edx,0x2e
c001b024:	75 08                	jne    c001b02e <User::loadClockSettings()+0xea>
c001b026:	80 7c 24 08 35       	cmp    BYTE PTR [esp+0x8],0x35
c001b02b:	0f 94 c0             	sete   al
c001b02e:	83 ec 0c             	sub    esp,0xc
c001b031:	a2 09 df 03 c0       	mov    ds:0xc003df09,al
c001b036:	68 cc 25 03 c0       	push   0xc00325cc
c001b03b:	e8 05 e4 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b040:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	83 e8 30             	sub    eax,0x30
c001b04b:	80 7c 24 07 2e       	cmp    BYTE PTR [esp+0x7],0x2e
c001b050:	a3 0c df 03 c0       	mov    ds:0xc003df0c,eax
c001b055:	75 11                	jne    c001b068 <User::loadClockSettings()+0x124>
c001b057:	0f be 54 24 06       	movsx  edx,BYTE PTR [esp+0x6]
c001b05c:	6b c0 0a             	imul   eax,eax,0xa
c001b05f:	8d 44 02 d0          	lea    eax,[edx+eax*1-0x30]
c001b063:	a3 0c df 03 c0       	mov    ds:0xc003df0c,eax
c001b068:	83 ec 0c             	sub    esp,0xc
c001b06b:	68 e2 25 03 c0       	push   0xc00325e2
c001b070:	e8 d0 e3 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b075:	83 c4 10             	add    esp,0x10
c001b078:	80 7c 24 04 2d       	cmp    BYTE PTR [esp+0x4],0x2d
c001b07d:	75 06                	jne    c001b085 <User::loadClockSettings()+0x141>
c001b07f:	f7 1d 0c df 03 c0    	neg    DWORD PTR ds:0xc003df0c
c001b085:	83 ec 0c             	sub    esp,0xc
c001b088:	68 f8 25 03 c0       	push   0xc00325f8
c001b08d:	e8 b3 e3 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b092:	eb 25                	jmp    c001b0b9 <User::loadClockSettings()+0x175>
c001b094:	83 ec 0c             	sub    esp,0xc
c001b097:	68 b6 25 03 c0       	push   0xc00325b6
c001b09c:	e8 a4 e3 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b0a1:	c6 05 08 df 03 c0 00 	mov    BYTE PTR ds:0xc003df08,0x0
c001b0a8:	c6 05 09 df 03 c0 00 	mov    BYTE PTR ds:0xc003df09,0x0
c001b0af:	c7 05 0c df 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003df0c,0x0
c001b0b9:	83 c4 10             	add    esp,0x10
c001b0bc:	83 ec 0c             	sub    esp,0xc
c001b0bf:	68 0f 26 03 c0       	push   0xc003260f
c001b0c4:	e8 7c e3 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b0c9:	81 c4 44 01 00 00    	add    esp,0x144
c001b0cf:	5b                   	pop    ebx
c001b0d0:	5e                   	pop    esi
c001b0d1:	c3                   	ret    

c001b0d2 <Clock::Clock(char const*)>:
c001b0d2:	83 ec 0c             	sub    esp,0xc
c001b0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0d9:	83 ec 08             	sub    esp,0x8
c001b0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0e0:	50                   	push   eax
c001b0e1:	e8 7e 06 00 00       	call   c001b764 <Device::Device(char const*)>
c001b0e6:	83 c4 10             	add    esp,0x10
c001b0e9:	ba 30 26 03 c0       	mov    edx,0xc0032630
c001b0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f2:	89 10                	mov    DWORD PTR [eax],edx
c001b0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b102:	90                   	nop
c001b103:	83 c4 0c             	add    esp,0xc
c001b106:	c3                   	ret    
c001b107:	90                   	nop

c001b108 <Clock::~Clock()>:
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	ba 30 26 03 c0       	mov    edx,0xc0032630
c001b110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b114:	89 10                	mov    DWORD PTR [eax],edx
c001b116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	50                   	push   eax
c001b11e:	e8 e1 03 00 00       	call   c001b504 <Device::~Device()>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	90                   	nop
c001b127:	83 c4 0c             	add    esp,0xc
c001b12a:	c3                   	ret    
c001b12b:	90                   	nop

c001b12c <Clock::~Clock()>:
c001b12c:	83 ec 0c             	sub    esp,0xc
c001b12f:	83 ec 0c             	sub    esp,0xc
c001b132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b136:	e8 cd ff ff ff       	call   c001b108 <Clock::~Clock()>
c001b13b:	83 c4 10             	add    esp,0x10
c001b13e:	83 ec 08             	sub    esp,0x8
c001b141:	68 58 01 00 00       	push   0x158
c001b146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b14a:	e8 c9 e1 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001b14f:	83 c4 10             	add    esp,0x10
c001b152:	83 c4 0c             	add    esp,0xc
c001b155:	c3                   	ret    

c001b156 <Clock::timeInSecondsLocal()>:
c001b156:	53                   	push   ebx
c001b157:	83 ec 14             	sub    esp,0x14
c001b15a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b15e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b160:	50                   	push   eax
c001b161:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b164:	0f b6 0d 08 df 03 c0 	movzx  ecx,BYTE PTR ds:0xc003df08
c001b16b:	03 0d 0c df 03 c0    	add    ecx,DWORD PTR ds:0xc003df0c
c001b171:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b177:	89 cb                	mov    ebx,ecx
c001b179:	c1 fb 1f             	sar    ebx,0x1f
c001b17c:	01 c8                	add    eax,ecx
c001b17e:	11 da                	adc    edx,ebx
c001b180:	83 c4 10             	add    esp,0x10
c001b183:	31 c9                	xor    ecx,ecx
c001b185:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b18c:	74 05                	je     c001b193 <Clock::timeInSecondsLocal()+0x3d>
c001b18e:	b9 08 07 00 00       	mov    ecx,0x708
c001b193:	31 db                	xor    ebx,ebx
c001b195:	01 c8                	add    eax,ecx
c001b197:	11 da                	adc    edx,ebx
c001b199:	83 c4 08             	add    esp,0x8
c001b19c:	5b                   	pop    ebx
c001b19d:	c3                   	ret    

c001b19e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b19e:	57                   	push   edi
c001b19f:	56                   	push   esi
c001b1a0:	53                   	push   ebx
c001b1a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b1ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b1af:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b1b2:	0f b6 05 08 df 03 c0 	movzx  eax,BYTE PTR ds:0xc003df08
c001b1b9:	03 05 0c df 03 c0    	add    eax,DWORD PTR ds:0xc003df0c
c001b1bf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b1c5:	99                   	cdq    
c001b1c6:	29 c6                	sub    esi,eax
c001b1c8:	19 d7                	sbb    edi,edx
c001b1ca:	89 f0                	mov    eax,esi
c001b1cc:	89 fa                	mov    edx,edi
c001b1ce:	31 f6                	xor    esi,esi
c001b1d0:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b1d7:	74 05                	je     c001b1de <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b1d9:	be 08 07 00 00       	mov    esi,0x708
c001b1de:	31 ff                	xor    edi,edi
c001b1e0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1e4:	29 f0                	sub    eax,esi
c001b1e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1ea:	19 fa                	sbb    edx,edi
c001b1ec:	89 d8                	mov    eax,ebx
c001b1ee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b1f2:	5b                   	pop    ebx
c001b1f3:	5e                   	pop    esi
c001b1f4:	5f                   	pop    edi
c001b1f5:	ff e0                	jmp    eax

c001b1f7 <datetimeToSeconds(datetime_t)>:
c001b1f7:	55                   	push   ebp
c001b1f8:	57                   	push   edi
c001b1f9:	56                   	push   esi
c001b1fa:	53                   	push   ebx
c001b1fb:	83 ec 0c             	sub    esp,0xc
c001b1fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b202:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b206:	89 d6                	mov    esi,edx
c001b208:	0f b6 c7             	movzx  eax,bh
c001b20b:	c1 ee 10             	shr    esi,0x10
c001b20e:	6b e8 3c             	imul   ebp,eax,0x3c
c001b211:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001b217:	0f b6 ce             	movzx  ecx,dh
c001b21a:	89 df                	mov    edi,ebx
c001b21c:	49                   	dec    ecx
c001b21d:	c1 ef 10             	shr    edi,0x10
c001b220:	0f b6 db             	movzx  ebx,bl
c001b223:	89 f8                	mov    eax,edi
c001b225:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001b22b:	0f b6 f8             	movzx  edi,al
c001b22e:	0f b6 d2             	movzx  edx,dl
c001b231:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001b235:	01 d8                	add    eax,ebx
c001b237:	0f b7 de             	movzx  ebx,si
c001b23a:	89 04 24             	mov    DWORD PTR [esp],eax
c001b23d:	c1 f8 1f             	sar    eax,0x1f
c001b240:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b244:	0f b6 c1             	movzx  eax,cl
c001b247:	8b 0c 85 80 26 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd980]
c001b24e:	83 f8 01             	cmp    eax,0x1
c001b251:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001b255:	76 27                	jbe    c001b27e <datetimeToSeconds(datetime_t)+0x87>
c001b257:	83 e6 03             	and    esi,0x3
c001b25a:	75 22                	jne    c001b27e <datetimeToSeconds(datetime_t)+0x87>
c001b25c:	31 d2                	xor    edx,edx
c001b25e:	be 64 00 00 00       	mov    esi,0x64
c001b263:	89 d8                	mov    eax,ebx
c001b265:	f7 f6                	div    esi
c001b267:	85 d2                	test   edx,edx
c001b269:	75 12                	jne    c001b27d <datetimeToSeconds(datetime_t)+0x86>
c001b26b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b271:	be 90 01 00 00       	mov    esi,0x190
c001b276:	99                   	cdq    
c001b277:	f7 fe                	idiv   esi
c001b279:	85 d2                	test   edx,edx
c001b27b:	75 01                	jne    c001b27e <datetimeToSeconds(datetime_t)+0x87>
c001b27d:	41                   	inc    ecx
c001b27e:	83 fb 46             	cmp    ebx,0x46
c001b281:	76 48                	jbe    c001b2cb <datetimeToSeconds(datetime_t)+0xd4>
c001b283:	be 46 00 00 00       	mov    esi,0x46
c001b288:	bf 64 00 00 00       	mov    edi,0x64
c001b28d:	bd 90 01 00 00       	mov    ebp,0x190
c001b292:	b8 6d 01 00 00       	mov    eax,0x16d
c001b297:	f7 c6 03 00 00 00    	test   esi,0x3
c001b29d:	75 23                	jne    c001b2c2 <datetimeToSeconds(datetime_t)+0xcb>
c001b29f:	89 f0                	mov    eax,esi
c001b2a1:	99                   	cdq    
c001b2a2:	f7 ff                	idiv   edi
c001b2a4:	b8 6e 01 00 00       	mov    eax,0x16e
c001b2a9:	85 d2                	test   edx,edx
c001b2ab:	75 15                	jne    c001b2c2 <datetimeToSeconds(datetime_t)+0xcb>
c001b2ad:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b2b3:	99                   	cdq    
c001b2b4:	f7 fd                	idiv   ebp
c001b2b6:	83 fa 01             	cmp    edx,0x1
c001b2b9:	19 c0                	sbb    eax,eax
c001b2bb:	f7 d0                	not    eax
c001b2bd:	05 6e 01 00 00       	add    eax,0x16e
c001b2c2:	01 c1                	add    ecx,eax
c001b2c4:	46                   	inc    esi
c001b2c5:	39 de                	cmp    esi,ebx
c001b2c7:	7c c9                	jl     c001b292 <datetimeToSeconds(datetime_t)+0x9b>
c001b2c9:	eb 34                	jmp    c001b2ff <datetimeToSeconds(datetime_t)+0x108>
c001b2cb:	74 32                	je     c001b2ff <datetimeToSeconds(datetime_t)+0x108>
c001b2cd:	b8 45 00 00 00       	mov    eax,0x45
c001b2d2:	89 c2                	mov    edx,eax
c001b2d4:	83 e2 03             	and    edx,0x3
c001b2d7:	39 d8                	cmp    eax,ebx
c001b2d9:	7e 0f                	jle    c001b2ea <datetimeToSeconds(datetime_t)+0xf3>
c001b2db:	83 fa 01             	cmp    edx,0x1
c001b2de:	19 d2                	sbb    edx,edx
c001b2e0:	48                   	dec    eax
c001b2e1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b2e8:	eb e8                	jmp    c001b2d2 <datetimeToSeconds(datetime_t)+0xdb>
c001b2ea:	b8 6d 01 00 00       	mov    eax,0x16d
c001b2ef:	85 d2                	test   edx,edx
c001b2f1:	75 0a                	jne    c001b2fd <datetimeToSeconds(datetime_t)+0x106>
c001b2f3:	83 fb 01             	cmp    ebx,0x1
c001b2f6:	19 c0                	sbb    eax,eax
c001b2f8:	05 6e 01 00 00       	add    eax,0x16e
c001b2fd:	29 c1                	sub    ecx,eax
c001b2ff:	b8 80 51 01 00       	mov    eax,0x15180
c001b304:	f7 e9                	imul   ecx
c001b306:	03 04 24             	add    eax,DWORD PTR [esp]
c001b309:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b30d:	83 c4 0c             	add    esp,0xc
c001b310:	5b                   	pop    ebx
c001b311:	5e                   	pop    esi
c001b312:	5f                   	pop    edi
c001b313:	5d                   	pop    ebp
c001b314:	c3                   	ret    
c001b315:	90                   	nop

c001b316 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b316:	57                   	push   edi
c001b317:	56                   	push   esi
c001b318:	53                   	push   ebx
c001b319:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b31d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b31f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b32a:	e8 c8 fe ff ff       	call   c001b1f7 <datetimeToSeconds(datetime_t)>
c001b32f:	59                   	pop    ecx
c001b330:	0f b6 0d 08 df 03 c0 	movzx  ecx,BYTE PTR ds:0xc003df08
c001b337:	5b                   	pop    ebx
c001b338:	03 0d 0c df 03 c0    	add    ecx,DWORD PTR ds:0xc003df0c
c001b33e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b344:	89 cb                	mov    ebx,ecx
c001b346:	c1 fb 1f             	sar    ebx,0x1f
c001b349:	29 c8                	sub    eax,ecx
c001b34b:	19 da                	sbb    edx,ebx
c001b34d:	31 c9                	xor    ecx,ecx
c001b34f:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b356:	74 05                	je     c001b35d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b358:	b9 08 07 00 00       	mov    ecx,0x708
c001b35d:	31 db                	xor    ebx,ebx
c001b35f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b363:	29 c8                	sub    eax,ecx
c001b365:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b369:	19 da                	sbb    edx,ebx
c001b36b:	89 f8                	mov    eax,edi
c001b36d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b371:	5b                   	pop    ebx
c001b372:	5e                   	pop    esi
c001b373:	5f                   	pop    edi
c001b374:	ff e0                	jmp    eax

c001b376 <secondsToDatetime(unsigned long long)>:
c001b376:	55                   	push   ebp
c001b377:	57                   	push   edi
c001b378:	56                   	push   esi
c001b379:	53                   	push   ebx
c001b37a:	83 ec 1c             	sub    esp,0x1c
c001b37d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b381:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b385:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b389:	6a 00                	push   0x0
c001b38b:	68 80 51 01 00       	push   0x15180
c001b390:	55                   	push   ebp
c001b391:	57                   	push   edi
c001b392:	e8 39 39 01 00       	call   c002ecd0 <__udivdi3>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b3a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3a4:	6a 00                	push   0x0
c001b3a6:	68 80 51 01 00       	push   0x15180
c001b3ab:	55                   	push   ebp
c001b3ac:	57                   	push   edi
c001b3ad:	bf 10 0e 00 00       	mov    edi,0xe10
c001b3b2:	e8 19 3a 01 00       	call   c002edd0 <__umoddi3>
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	99                   	cdq    
c001b3bb:	f7 ff                	idiv   edi
c001b3bd:	bf 3c 00 00 00       	mov    edi,0x3c
c001b3c2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b3c5:	89 d0                	mov    eax,edx
c001b3c7:	99                   	cdq    
c001b3c8:	f7 ff                	idiv   edi
c001b3ca:	85 db                	test   ebx,ebx
c001b3cc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b3cf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b3d2:	79 11                	jns    c001b3e5 <secondsToDatetime(unsigned long long)+0x6f>
c001b3d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3d8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b3de:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3e3:	eb 07                	jmp    c001b3ec <secondsToDatetime(unsigned long long)+0x76>
c001b3e5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3ea:	89 d8                	mov    eax,ebx
c001b3ec:	bf b4 05 00 00       	mov    edi,0x5b4
c001b3f1:	99                   	cdq    
c001b3f2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b3f7:	f7 f9                	idiv   ecx
c001b3f9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b3fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b402:	31 d2                	xor    edx,edx
c001b404:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b40c:	01 c3                	add    ebx,eax
c001b40e:	89 d8                	mov    eax,ebx
c001b410:	f7 f1                	div    ecx
c001b412:	31 d2                	xor    edx,edx
c001b414:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b417:	89 d8                	mov    eax,ebx
c001b419:	f7 f7                	div    edi
c001b41b:	31 d2                	xor    edx,edx
c001b41d:	29 c1                	sub    ecx,eax
c001b41f:	89 d8                	mov    eax,ebx
c001b421:	f7 f5                	div    ebp
c001b423:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b428:	29 c1                	sub    ecx,eax
c001b42a:	31 d2                	xor    edx,edx
c001b42c:	89 c8                	mov    eax,ecx
c001b42e:	f7 f5                	div    ebp
c001b430:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b439:	31 d2                	xor    edx,edx
c001b43b:	89 c8                	mov    eax,ecx
c001b43d:	f7 f5                	div    ebp
c001b43f:	31 d2                	xor    edx,edx
c001b441:	01 c3                	add    ebx,eax
c001b443:	89 c8                	mov    eax,ecx
c001b445:	f7 f7                	div    edi
c001b447:	bf 99 00 00 00       	mov    edi,0x99
c001b44c:	29 c3                	sub    ebx,eax
c001b44e:	31 d2                	xor    edx,edx
c001b450:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b458:	29 c3                	sub    ebx,eax
c001b45a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b45d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b460:	bb 05 00 00 00       	mov    ebx,0x5
c001b465:	83 c1 02             	add    ecx,0x2
c001b468:	89 c8                	mov    eax,ecx
c001b46a:	f7 f7                	div    edi
c001b46c:	31 d2                	xor    edx,edx
c001b46e:	89 c7                	mov    edi,eax
c001b470:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b476:	83 c0 02             	add    eax,0x2
c001b479:	f7 f3                	div    ebx
c001b47b:	89 eb                	mov    ebx,ebp
c001b47d:	29 c3                	sub    ebx,eax
c001b47f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b485:	88 1e                	mov    BYTE PTR [esi],bl
c001b487:	19 c0                	sbb    eax,eax
c001b489:	31 d2                	xor    edx,edx
c001b48b:	83 e0 0c             	and    eax,0xc
c001b48e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b492:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b49a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b49e:	83 f9 01             	cmp    ecx,0x1
c001b4a1:	0f 96 c2             	setbe  dl
c001b4a4:	41                   	inc    ecx
c001b4a5:	01 d0                	add    eax,edx
c001b4a7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b4aa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b4ae:	83 c4 1c             	add    esp,0x1c
c001b4b1:	89 f0                	mov    eax,esi
c001b4b3:	5b                   	pop    ebx
c001b4b4:	5e                   	pop    esi
c001b4b5:	5f                   	pop    edi
c001b4b6:	5d                   	pop    ebp
c001b4b7:	c2 04 00             	ret    0x4

c001b4ba <Clock::timeInDatetimeLocal()>:
c001b4ba:	53                   	push   ebx
c001b4bb:	83 ec 14             	sub    esp,0x14
c001b4be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4c6:	e8 8b fc ff ff       	call   c001b156 <Clock::timeInSecondsLocal()>
c001b4cb:	83 c4 0c             	add    esp,0xc
c001b4ce:	52                   	push   edx
c001b4cf:	50                   	push   eax
c001b4d0:	53                   	push   ebx
c001b4d1:	e8 a0 fe ff ff       	call   c001b376 <secondsToDatetime(unsigned long long)>
c001b4d6:	89 d8                	mov    eax,ebx
c001b4d8:	83 c4 14             	add    esp,0x14
c001b4db:	5b                   	pop    ebx
c001b4dc:	c2 04 00             	ret    0x4
c001b4df:	90                   	nop

c001b4e0 <Device::hibernate()>:
c001b4e0:	c3                   	ret    
c001b4e1:	90                   	nop

c001b4e2 <Device::wake()>:
c001b4e2:	c3                   	ret    
c001b4e3:	90                   	nop

c001b4e4 <Device::detect()>:
c001b4e4:	c3                   	ret    
c001b4e5:	90                   	nop

c001b4e6 <Device::disableLegacy()>:
c001b4e6:	c3                   	ret    
c001b4e7:	90                   	nop

c001b4e8 <Device::powerSaving(PowerSavingLevel)>:
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <DriverlessDevice::close(int, int, void*)>:
c001b4ea:	31 c0                	xor    eax,eax
c001b4ec:	c3                   	ret    
c001b4ed:	90                   	nop

c001b4ee <DriverlessDevice::detect()>:
c001b4ee:	c3                   	ret    
c001b4ef:	90                   	nop

c001b4f0 <DriverlessDevice::open(int, int, void*)>:
c001b4f0:	83 ec 18             	sub    esp,0x18
c001b4f3:	68 b0 26 03 c0       	push   0xc00326b0
c001b4f8:	e8 81 52 00 00       	call   c002077e <KePanic(char const*)>
c001b4fd:	83 c8 ff             	or     eax,0xffffffff
c001b500:	83 c4 1c             	add    esp,0x1c
c001b503:	c3                   	ret    

c001b504 <Device::~Device()>:
c001b504:	ba 1c 27 03 c0       	mov    edx,0xc003271c
c001b509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b50d:	89 10                	mov    DWORD PTR [eax],edx
c001b50f:	90                   	nop
c001b510:	c3                   	ret    
c001b511:	90                   	nop

c001b512 <Device::~Device()>:
c001b512:	83 ec 0c             	sub    esp,0xc
c001b515:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b519:	e8 e6 ff ff ff       	call   c001b504 <Device::~Device()>
c001b51e:	83 c4 04             	add    esp,0x4
c001b521:	83 ec 08             	sub    esp,0x8
c001b524:	68 58 01 00 00       	push   0x158
c001b529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b52d:	e8 e6 dd ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001b532:	83 c4 10             	add    esp,0x10
c001b535:	83 c4 0c             	add    esp,0xc
c001b538:	c3                   	ret    
c001b539:	90                   	nop

c001b53a <Device::findAndLoadDriver()>:
c001b53a:	c7 44 24 04 ce 26 03 c0 	mov    DWORD PTR [esp+0x4],0xc00326ce
c001b542:	e9 fe de ff ff       	jmp    c0019445 <Dbg::kprintf(char const*, ...)>
c001b547:	90                   	nop

c001b548 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b548:	57                   	push   edi
c001b549:	b9 09 00 00 00       	mov    ecx,0x9
c001b54e:	56                   	push   esi
c001b54f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b553:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b557:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b561:	81 c7 18 01 00 00    	add    edi,0x118
c001b567:	fc                   	cld    
c001b568:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b56a:	5e                   	pop    esi
c001b56b:	5f                   	pop    edi
c001b56c:	c3                   	ret    
c001b56d:	90                   	nop

c001b56e <Device::preOpenACPI(void*, char*, char*)>:
c001b56e:	57                   	push   edi
c001b56f:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b574:	56                   	push   esi
c001b575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b579:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b57d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b587:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b58d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b593:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b597:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b599:	b9 0e 00 00 00       	mov    ecx,0xe
c001b59e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b5a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b5a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5aa:	5e                   	pop    esi
c001b5ab:	5f                   	pop    edi
c001b5ac:	c3                   	ret    
c001b5ad:	90                   	nop

c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b5ae:	53                   	push   ebx
c001b5af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5bf:	0f b6 c0             	movzx  eax,al
c001b5c2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5d2:	5b                   	pop    ebx
c001b5d3:	e9 c0 05 00 00       	jmp    c001bb98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b5d8 <Device::getParent()>:
c001b5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5dc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b5e2:	c3                   	ret    
c001b5e3:	90                   	nop

c001b5e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b5e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5ec:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b5f1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b5fd:	e9 fe 06 00 00       	jmp    c001bd00 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b602 <Device::addChild(Device*)>:
c001b602:	53                   	push   ebx
c001b603:	83 ec 08             	sub    esp,0x8
c001b606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b60a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b60e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b614:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b61a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b61c:	85 d2                	test   edx,edx
c001b61e:	74 04                	je     c001b624 <Device::addChild(Device*)+0x22>
c001b620:	89 d3                	mov    ebx,edx
c001b622:	eb f6                	jmp    c001b61a <Device::addChild(Device*)+0x18>
c001b624:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b627:	83 ec 0c             	sub    esp,0xc
c001b62a:	6a 08                	push   0x8
c001b62c:	e8 86 af ff ff       	call   c00165b7 <malloc>
c001b631:	89 03                	mov    DWORD PTR [ebx],eax
c001b633:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b639:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b640:	83 c4 18             	add    esp,0x18
c001b643:	5b                   	pop    ebx
c001b644:	c3                   	ret    
c001b645:	90                   	nop

c001b646 <Device::removeAllChildren()>:
c001b646:	56                   	push   esi
c001b647:	53                   	push   ebx
c001b648:	52                   	push   edx
c001b649:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b64d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b653:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b656:	74 17                	je     c001b66f <Device::removeAllChildren()+0x29>
c001b658:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b65b:	85 c0                	test   eax,eax
c001b65d:	74 0c                	je     c001b66b <Device::removeAllChildren()+0x25>
c001b65f:	83 ec 0c             	sub    esp,0xc
c001b662:	8b 10                	mov    edx,DWORD PTR [eax]
c001b664:	50                   	push   eax
c001b665:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b668:	83 c4 10             	add    esp,0x10
c001b66b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b66d:	eb e4                	jmp    c001b653 <Device::removeAllChildren()+0xd>
c001b66f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b675:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b67b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b681:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b688:	58                   	pop    eax
c001b689:	5b                   	pop    ebx
c001b68a:	5e                   	pop    esi
c001b68b:	c3                   	ret    

c001b68c <Device::hibernateAll()>:
c001b68c:	53                   	push   ebx
c001b68d:	83 ec 14             	sub    esp,0x14
c001b690:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b694:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b696:	53                   	push   ebx
c001b697:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b69a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6a0:	83 c4 10             	add    esp,0x10
c001b6a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6a6:	74 0f                	je     c001b6b7 <Device::hibernateAll()+0x2b>
c001b6a8:	83 ec 0c             	sub    esp,0xc
c001b6ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6ae:	e8 d9 ff ff ff       	call   c001b68c <Device::hibernateAll()>
c001b6b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6b5:	eb e9                	jmp    c001b6a0 <Device::hibernateAll()+0x14>
c001b6b7:	83 c4 08             	add    esp,0x8
c001b6ba:	5b                   	pop    ebx
c001b6bb:	c3                   	ret    

c001b6bc <Device::wakeAll()>:
c001b6bc:	53                   	push   ebx
c001b6bd:	83 ec 14             	sub    esp,0x14
c001b6c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6c6:	53                   	push   ebx
c001b6c7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b6ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6d0:	83 c4 10             	add    esp,0x10
c001b6d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6d6:	74 0f                	je     c001b6e7 <Device::wakeAll()+0x2b>
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6de:	e8 d9 ff ff ff       	call   c001b6bc <Device::wakeAll()>
c001b6e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6e5:	eb e9                	jmp    c001b6d0 <Device::wakeAll()+0x14>
c001b6e7:	83 c4 08             	add    esp,0x8
c001b6ea:	5b                   	pop    ebx
c001b6eb:	c3                   	ret    

c001b6ec <Device::detectAll()>:
c001b6ec:	53                   	push   ebx
c001b6ed:	83 ec 14             	sub    esp,0x14
c001b6f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6f6:	53                   	push   ebx
c001b6f7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b6fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b700:	83 c4 10             	add    esp,0x10
c001b703:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b706:	74 0f                	je     c001b717 <Device::detectAll()+0x2b>
c001b708:	83 ec 0c             	sub    esp,0xc
c001b70b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b70e:	e8 d9 ff ff ff       	call   c001b6ec <Device::detectAll()>
c001b713:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b715:	eb e9                	jmp    c001b700 <Device::detectAll()+0x14>
c001b717:	83 c4 08             	add    esp,0x8
c001b71a:	5b                   	pop    ebx
c001b71b:	c3                   	ret    

c001b71c <Device::disableLegacyAll()>:
c001b71c:	c3                   	ret    
c001b71d:	90                   	nop

c001b71e <Device::loadDriversForAll()>:
c001b71e:	c3                   	ret    
c001b71f:	90                   	nop

c001b720 <Device::powerSavingAll(PowerSavingLevel)>:
c001b720:	56                   	push   esi
c001b721:	53                   	push   ebx
c001b722:	83 ec 0c             	sub    esp,0xc
c001b725:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b729:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b72d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b72f:	56                   	push   esi
c001b730:	53                   	push   ebx
c001b731:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b734:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b73a:	83 c4 10             	add    esp,0x10
c001b73d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b740:	74 0f                	je     c001b751 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b742:	52                   	push   edx
c001b743:	52                   	push   edx
c001b744:	56                   	push   esi
c001b745:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b748:	e8 d3 ff ff ff       	call   c001b720 <Device::powerSavingAll(PowerSavingLevel)>
c001b74d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b74f:	eb e9                	jmp    c001b73a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b751:	58                   	pop    eax
c001b752:	5b                   	pop    ebx
c001b753:	5e                   	pop    esi
c001b754:	c3                   	ret    
c001b755:	90                   	nop

c001b756 <Device::setName(char const*)>:
c001b756:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b75e:	e9 dd 4e fe ff       	jmp    c0000640 <strcpy>
c001b763:	90                   	nop

c001b764 <Device::Device(char const*)>:
c001b764:	83 ec 1c             	sub    esp,0x1c
c001b767:	ba 1c 27 03 c0       	mov    edx,0xc003271c
c001b76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b770:	89 10                	mov    DWORD PTR [eax],edx
c001b772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b776:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b784:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b792:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b79c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b7aa:	83 ec 08             	sub    esp,0x8
c001b7ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7b5:	e8 9c ff ff ff       	call   c001b756 <Device::setName(char const*)>
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b7c5:	83 ec 0c             	sub    esp,0xc
c001b7c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7cc:	e8 e6 ad ff ff       	call   c00165b7 <malloc>
c001b7d1:	83 c4 10             	add    esp,0x10
c001b7d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7e5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b7eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b7f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ff:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b805:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b810:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b81b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b826:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b834:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b842:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b850:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b85a:	90                   	nop
c001b85b:	83 c4 1c             	add    esp,0x1c
c001b85e:	c3                   	ret    
c001b85f:	90                   	nop

c001b860 <Device::getName()>:
c001b860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b864:	05 d0 00 00 00       	add    eax,0xd0
c001b869:	c3                   	ret    

c001b86a <Device::closeAll()>:
c001b86a:	53                   	push   ebx
c001b86b:	83 ec 08             	sub    esp,0x8
c001b86e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b872:	53                   	push   ebx
c001b873:	e8 e8 ff ff ff       	call   c001b860 <Device::getName()>
c001b878:	52                   	push   edx
c001b879:	50                   	push   eax
c001b87a:	68 08 27 03 c0       	push   0xc0032708
c001b87f:	e8 c1 db ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001b884:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b886:	6a 00                	push   0x0
c001b888:	6a 00                	push   0x0
c001b88a:	6a 00                	push   0x0
c001b88c:	53                   	push   ebx
c001b88d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b890:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b896:	83 c4 20             	add    esp,0x20
c001b899:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b89c:	74 12                	je     c001b8b0 <Device::closeAll()+0x46>
c001b89e:	83 ec 0c             	sub    esp,0xc
c001b8a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b8a4:	e8 c1 ff ff ff       	call   c001b86a <Device::closeAll()>
c001b8a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b8ab:	83 c4 10             	add    esp,0x10
c001b8ae:	eb e9                	jmp    c001b899 <Device::closeAll()+0x2f>
c001b8b0:	83 c4 08             	add    esp,0x8
c001b8b3:	5b                   	pop    ebx
c001b8b4:	c3                   	ret    
c001b8b5:	90                   	nop

c001b8b6 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b8b6:	83 ec 0c             	sub    esp,0xc
c001b8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8bd:	83 ec 08             	sub    esp,0x8
c001b8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8c4:	50                   	push   eax
c001b8c5:	e8 9a fe ff ff       	call   c001b764 <Device::Device(char const*)>
c001b8ca:	83 c4 10             	add    esp,0x10
c001b8cd:	ba 48 27 03 c0       	mov    edx,0xc0032748
c001b8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d6:	89 10                	mov    DWORD PTR [eax],edx
c001b8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8dc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b8e6:	90                   	nop
c001b8e7:	83 c4 0c             	add    esp,0xc
c001b8ea:	c3                   	ret    
c001b8eb:	90                   	nop

c001b8ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b8ec:	57                   	push   edi
c001b8ed:	56                   	push   esi
c001b8ee:	53                   	push   ebx
c001b8ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b8fb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b901:	75 0c                	jne    c001b90f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b903:	52                   	push   edx
c001b904:	52                   	push   edx
c001b905:	53                   	push   ebx
c001b906:	56                   	push   esi
c001b907:	e8 76 38 01 00       	call   c002f182 <LinkedList<Device>::addElement(Device*)>
c001b90c:	83 c4 10             	add    esp,0x10
c001b90f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b915:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b918:	74 12                	je     c001b92c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b91a:	50                   	push   eax
c001b91b:	57                   	push   edi
c001b91c:	56                   	push   esi
c001b91d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b920:	e8 c7 ff ff ff       	call   c001b8ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b925:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b927:	83 c4 10             	add    esp,0x10
c001b92a:	eb e9                	jmp    c001b915 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b92c:	5b                   	pop    ebx
c001b92d:	5e                   	pop    esi
c001b92e:	5f                   	pop    edi
c001b92f:	c3                   	ret    

c001b930 <getDevicesOfType(DeviceType)>:
c001b930:	53                   	push   ebx
c001b931:	83 ec 14             	sub    esp,0x14
c001b934:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b938:	53                   	push   ebx
c001b939:	e8 20 39 01 00       	call   c002f25e <LinkedList<Device>::LinkedList()>
c001b93e:	83 c4 0c             	add    esp,0xc
c001b941:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b945:	53                   	push   ebx
c001b946:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001b94c:	e8 9b ff ff ff       	call   c001b8ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b951:	89 d8                	mov    eax,ebx
c001b953:	83 c4 18             	add    esp,0x18
c001b956:	5b                   	pop    ebx
c001b957:	c2 04 00             	ret    0x4
c001b95a:	66 90                	xchg   ax,ax

c001b95c <HardDiskController::HardDiskController(char const*)>:
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b963:	83 ec 08             	sub    esp,0x8
c001b966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b96a:	50                   	push   eax
c001b96b:	e8 f4 fd ff ff       	call   c001b764 <Device::Device(char const*)>
c001b970:	83 c4 10             	add    esp,0x10
c001b973:	ba 74 27 03 c0       	mov    edx,0xc0032774
c001b978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97c:	89 10                	mov    DWORD PTR [eax],edx
c001b97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b982:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b98c:	90                   	nop
c001b98d:	83 c4 0c             	add    esp,0xc
c001b990:	c3                   	ret    
c001b991:	90                   	nop
c001b992:	66 90                	xchg   ax,ax

c001b994 <HardDiskController::~HardDiskController()>:
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	ba 74 27 03 c0       	mov    edx,0xc0032774
c001b99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a0:	89 10                	mov    DWORD PTR [eax],edx
c001b9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	50                   	push   eax
c001b9aa:	e8 55 fb ff ff       	call   c001b504 <Device::~Device()>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	90                   	nop
c001b9b3:	83 c4 0c             	add    esp,0xc
c001b9b6:	c3                   	ret    
c001b9b7:	90                   	nop

c001b9b8 <HardDiskController::~HardDiskController()>:
c001b9b8:	83 ec 0c             	sub    esp,0xc
c001b9bb:	83 ec 0c             	sub    esp,0xc
c001b9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9c2:	e8 cd ff ff ff       	call   c001b994 <HardDiskController::~HardDiskController()>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	83 ec 08             	sub    esp,0x8
c001b9cd:	68 58 01 00 00       	push   0x158
c001b9d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9d6:	e8 3d d9 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001b9db:	83 c4 10             	add    esp,0x10
c001b9de:	83 c4 0c             	add    esp,0xc
c001b9e1:	c3                   	ret    

c001b9e2 <PhysicalDisk::eject()>:
c001b9e2:	83 c8 ff             	or     eax,0xffffffff
c001b9e5:	c3                   	ret    

c001b9e6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b9e6:	83 ec 0c             	sub    esp,0xc
c001b9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ed:	83 ec 08             	sub    esp,0x8
c001b9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9f4:	50                   	push   eax
c001b9f5:	e8 6a fd ff ff       	call   c001b764 <Device::Device(char const*)>
c001b9fa:	83 c4 10             	add    esp,0x10
c001b9fd:	ba a0 27 03 c0       	mov    edx,0xc00327a0
c001ba02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba06:	89 10                	mov    DWORD PTR [eax],edx
c001ba08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001ba13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba17:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001ba1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba22:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001ba2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ba48:	90                   	nop
c001ba49:	83 c4 0c             	add    esp,0xc
c001ba4c:	c3                   	ret    
c001ba4d:	90                   	nop

c001ba4e <PhysicalDisk::startCache()>:
c001ba4e:	56                   	push   esi
c001ba4f:	53                   	push   ebx
c001ba50:	83 ec 10             	sub    esp,0x10
c001ba53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba57:	6a 44                	push   0x44
c001ba59:	e8 59 ab ff ff       	call   c00165b7 <malloc>
c001ba5e:	89 c6                	mov    esi,eax
c001ba60:	58                   	pop    eax
c001ba61:	5a                   	pop    edx
c001ba62:	53                   	push   ebx
c001ba63:	56                   	push   esi
c001ba64:	e8 6f 17 00 00       	call   c001d1d8 <VCache::VCache(PhysicalDisk*)>
c001ba69:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001ba6f:	83 c4 14             	add    esp,0x14
c001ba72:	5b                   	pop    ebx
c001ba73:	5e                   	pop    esi
c001ba74:	c3                   	ret    
c001ba75:	90                   	nop

c001ba76 <PhysicalDisk::~PhysicalDisk()>:
c001ba76:	83 ec 0c             	sub    esp,0xc
c001ba79:	ba a0 27 03 c0       	mov    edx,0xc00327a0
c001ba7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba82:	89 10                	mov    DWORD PTR [eax],edx
c001ba84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba88:	83 ec 0c             	sub    esp,0xc
c001ba8b:	50                   	push   eax
c001ba8c:	e8 73 fa ff ff       	call   c001b504 <Device::~Device()>
c001ba91:	83 c4 10             	add    esp,0x10
c001ba94:	90                   	nop
c001ba95:	83 c4 0c             	add    esp,0xc
c001ba98:	c3                   	ret    
c001ba99:	90                   	nop

c001ba9a <PhysicalDisk::~PhysicalDisk()>:
c001ba9a:	83 ec 0c             	sub    esp,0xc
c001ba9d:	83 ec 0c             	sub    esp,0xc
c001baa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baa4:	e8 cd ff ff ff       	call   c001ba76 <PhysicalDisk::~PhysicalDisk()>
c001baa9:	83 c4 10             	add    esp,0x10
c001baac:	83 ec 08             	sub    esp,0x8
c001baaf:	68 6c 01 00 00       	push   0x16c
c001bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bab8:	e8 5b d8 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	83 c4 0c             	add    esp,0xc
c001bac3:	c3                   	ret    

c001bac4 <int_handler>:
c001bac4:	55                   	push   ebp
c001bac5:	57                   	push   edi
c001bac6:	56                   	push   esi
c001bac7:	53                   	push   ebx
c001bac8:	83 ec 0c             	sub    esp,0xc
c001bacb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bacf:	80 3d 88 09 04 c0 00 	cmp    BYTE PTR ds:0xc0040988,0x0
c001bad6:	74 0b                	je     c001bae3 <int_handler+0x1f>
c001bad8:	fa                   	cli    
c001bad9:	f4                   	hlt    
c001bada:	80 3d 88 09 04 c0 00 	cmp    BYTE PTR ds:0xc0040988,0x0
c001bae1:	75 f5                	jne    c001bad8 <int_handler+0x14>
c001bae3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001bae6:	8d 46 e0             	lea    eax,[esi-0x20]
c001bae9:	83 f8 17             	cmp    eax,0x17
c001baec:	76 40                	jbe    c001bb2e <int_handler+0x6a>
c001baee:	c1 e6 04             	shl    esi,0x4
c001baf1:	31 db                	xor    ebx,ebx
c001baf3:	8d ae 20 ef 03 c0    	lea    ebp,[esi-0x3ffc10e0]
c001baf9:	81 c6 20 df 03 c0    	add    esi,0xc003df20
c001baff:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001bb03:	85 c0                	test   eax,eax
c001bb05:	74 13                	je     c001bb1a <int_handler+0x56>
c001bb07:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001bb0a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bb0e:	74 2c                	je     c001bb3c <int_handler+0x78>
c001bb10:	83 ec 08             	sub    esp,0x8
c001bb13:	52                   	push   edx
c001bb14:	57                   	push   edi
c001bb15:	ff d0                	call   eax
c001bb17:	83 c4 10             	add    esp,0x10
c001bb1a:	83 c3 01             	add    ebx,0x1
c001bb1d:	83 fb 04             	cmp    ebx,0x4
c001bb20:	75 dd                	jne    c001baff <int_handler+0x3b>
c001bb22:	83 c4 0c             	add    esp,0xc
c001bb25:	31 c0                	xor    eax,eax
c001bb27:	5b                   	pop    ebx
c001bb28:	31 d2                	xor    edx,edx
c001bb2a:	5e                   	pop    esi
c001bb2b:	5f                   	pop    edi
c001bb2c:	5d                   	pop    ebp
c001bb2d:	c3                   	ret    
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	50                   	push   eax
c001bb32:	e8 4a bd 00 00       	call   c0027881 <HalEndOfInterrupt(int)>
c001bb37:	83 c4 10             	add    esp,0x10
c001bb3a:	eb b2                	jmp    c001baee <int_handler+0x2a>
c001bb3c:	83 ec 08             	sub    esp,0x8
c001bb3f:	52                   	push   edx
c001bb40:	57                   	push   edi
c001bb41:	ff d0                	call   eax
c001bb43:	83 c4 10             	add    esp,0x10
c001bb46:	83 c4 0c             	add    esp,0xc
c001bb49:	5b                   	pop    ebx
c001bb4a:	5e                   	pop    esi
c001bb4b:	5f                   	pop    edi
c001bb4c:	5d                   	pop    ebp
c001bb4d:	c3                   	ret    

c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001bb4e:	56                   	push   esi
c001bb4f:	31 c0                	xor    eax,eax
c001bb51:	53                   	push   ebx
c001bb52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb5a:	89 ca                	mov    edx,ecx
c001bb5c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bb60:	c1 e2 04             	shl    edx,0x4
c001bb63:	83 bc 82 20 ef 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc10e0],0x0
c001bb6b:	74 17                	je     c001bb84 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bb6d:	83 c0 01             	add    eax,0x1
c001bb70:	83 f8 04             	cmp    eax,0x4
c001bb73:	75 ee                	jne    c001bb63 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bb75:	c7 44 24 0c d0 27 03 c0 	mov    DWORD PTR [esp+0xc],0xc00327d0
c001bb7d:	5b                   	pop    ebx
c001bb7e:	5e                   	pop    esi
c001bb7f:	e9 fa 4b 00 00       	jmp    c002077e <KePanic(char const*)>
c001bb84:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bb87:	89 1c 85 20 ef 03 c0 	mov    DWORD PTR [eax*4-0x3ffc10e0],ebx
c001bb8e:	89 34 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],esi
c001bb95:	5b                   	pop    ebx
c001bb96:	5e                   	pop    esi
c001bb97:	c3                   	ret    

c001bb98 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bb98:	57                   	push   edi
c001bb99:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001bb9f:	56                   	push   esi
c001bba0:	53                   	push   ebx
c001bba1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bba9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bbb0:	74 54                	je     c001bc06 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001bbb2:	89 c7                	mov    edi,eax
c001bbb4:	84 c0                	test   al,al
c001bbb6:	74 1d                	je     c001bbd5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bbb8:	83 fe 0f             	cmp    esi,0xf
c001bbbb:	0f 8f d5 00 00 00    	jg     c001bc96 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001bbc1:	0f b6 b6 88 44 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcbb78]
c001bbc8:	0f b7 bc 36 c0 06 04 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffbf940]
c001bbd0:	d1 ef                	shr    edi,1
c001bbd2:	83 e7 01             	and    edi,0x1
c001bbd5:	83 ec 08             	sub    esp,0x8
c001bbd8:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c001bbdd:	31 db                	xor    ebx,ebx
c001bbdf:	50                   	push   eax
c001bbe0:	68 dd 27 03 c0       	push   0xc00327dd
c001bbe5:	e8 5b d8 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001bbea:	83 c4 10             	add    esp,0x10
c001bbed:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c001bbf2:	85 c0                	test   eax,eax
c001bbf4:	7f 55                	jg     c001bc4b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bbf6:	83 ec 0c             	sub    esp,0xc
c001bbf9:	68 f4 27 03 c0       	push   0xc00327f4
c001bbfe:	e8 7b 4b 00 00       	call   c002077e <KePanic(char const*)>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	8d 7e 20             	lea    edi,[esi+0x20]
c001bc09:	89 f8                	mov    eax,edi
c001bc0b:	31 d2                	xor    edx,edx
c001bc0d:	c1 e0 04             	shl    eax,0x4
c001bc10:	8b 8c 90 20 ef 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc10e0]
c001bc17:	85 c9                	test   ecx,ecx
c001bc19:	0f 84 8e 00 00 00    	je     c001bcad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001bc1f:	83 c2 01             	add    edx,0x1
c001bc22:	83 fa 04             	cmp    edx,0x4
c001bc25:	75 e9                	jne    c001bc10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bc27:	83 ec 0c             	sub    esp,0xc
c001bc2a:	68 48 28 03 c0       	push   0xc0032848
c001bc2f:	e8 4a 4b 00 00       	call   c002077e <KePanic(char const*)>
c001bc34:	83 c4 10             	add    esp,0x10
c001bc37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc3c:	5b                   	pop    ebx
c001bc3d:	5e                   	pop    esi
c001bc3e:	5f                   	pop    edi
c001bc3f:	c3                   	ret    
c001bc40:	83 c3 01             	add    ebx,0x1
c001bc43:	39 1d c0 1b 04 c0    	cmp    DWORD PTR ds:0xc0041bc0,ebx
c001bc49:	7e ab                	jle    c001bbf6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001bc4b:	83 ec 08             	sub    esp,0x8
c001bc4e:	8b 04 9d e0 1b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbe420]
c001bc55:	56                   	push   esi
c001bc56:	50                   	push   eax
c001bc57:	e8 74 24 01 00       	call   c002e0d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bc5c:	83 c4 10             	add    esp,0x10
c001bc5f:	84 c0                	test   al,al
c001bc61:	74 dd                	je     c001bc40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001bc63:	83 ec 04             	sub    esp,0x4
c001bc66:	89 f8                	mov    eax,edi
c001bc68:	8b 1c 9d e0 1b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbe420]
c001bc6f:	0f b6 f8             	movzx  edi,al
c001bc72:	57                   	push   edi
c001bc73:	8d 7e 20             	lea    edi,[esi+0x20]
c001bc76:	6a 00                	push   0x0
c001bc78:	89 f8                	mov    eax,edi
c001bc7a:	0f b6 c0             	movzx  eax,al
c001bc7d:	50                   	push   eax
c001bc7e:	89 f0                	mov    eax,esi
c001bc80:	6a 00                	push   0x0
c001bc82:	0f b6 c0             	movzx  eax,al
c001bc85:	6a 00                	push   0x0
c001bc87:	50                   	push   eax
c001bc88:	53                   	push   ebx
c001bc89:	e8 ae 25 01 00       	call   c002e23c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bc8e:	83 c4 20             	add    esp,0x20
c001bc91:	e9 73 ff ff ff       	jmp    c001bc09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001bc96:	83 ec 0c             	sub    esp,0xc
c001bc99:	31 ff                	xor    edi,edi
c001bc9b:	68 10 28 03 c0       	push   0xc0032810
c001bca0:	e8 d9 4a 00 00       	call   c002077e <KePanic(char const*)>
c001bca5:	83 c4 10             	add    esp,0x10
c001bca8:	e9 28 ff ff ff       	jmp    c001bbd5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bcad:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bcb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcb4:	89 14 85 20 ef 03 c0 	mov    DWORD PTR [eax*4-0x3ffc10e0],edx
c001bcbb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bcbf:	5b                   	pop    ebx
c001bcc0:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bcc7:	89 f0                	mov    eax,esi
c001bcc9:	5e                   	pop    esi
c001bcca:	5f                   	pop    edi
c001bccb:	c3                   	ret    

c001bccc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bcd4:	c1 e0 04             	shl    eax,0x4
c001bcd7:	8d 50 10             	lea    edx,[eax+0x10]
c001bcda:	39 88 20 ef 03 c0    	cmp    DWORD PTR [eax-0x3ffc10e0],ecx
c001bce0:	74 08                	je     c001bcea <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bce2:	83 c0 04             	add    eax,0x4
c001bce5:	39 d0                	cmp    eax,edx
c001bce7:	75 f1                	jne    c001bcda <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bce9:	c3                   	ret    
c001bcea:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bcf4:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bcfe:	eb e2                	jmp    c001bce2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bd00 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bd00:	53                   	push   ebx
c001bd01:	83 ec 08             	sub    esp,0x8
c001bd04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd08:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd0d:	74 0e                	je     c001bd1d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bd0f:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001bd14:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bd1b:	75 37                	jne    c001bd54 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001bd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd21:	83 c0 20             	add    eax,0x20
c001bd24:	c1 e0 04             	shl    eax,0x4
c001bd27:	8d 50 10             	lea    edx,[eax+0x10]
c001bd2a:	39 98 20 ef 03 c0    	cmp    DWORD PTR [eax-0x3ffc10e0],ebx
c001bd30:	74 0c                	je     c001bd3e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001bd32:	83 c0 04             	add    eax,0x4
c001bd35:	39 d0                	cmp    eax,edx
c001bd37:	75 f1                	jne    c001bd2a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001bd39:	83 c4 08             	add    esp,0x8
c001bd3c:	5b                   	pop    ebx
c001bd3d:	c3                   	ret    
c001bd3e:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd48:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd52:	eb de                	jmp    c001bd32 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001bd54:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bd59:	7f 11                	jg     c001bd6c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001bd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5f:	0f b6 80 88 44 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcbb78]
c001bd66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd6a:	eb b1                	jmp    c001bd1d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bd6c:	83 ec 0c             	sub    esp,0xc
c001bd6f:	68 01 28 03 c0       	push   0xc0032801
c001bd74:	e8 05 4a 00 00       	call   c002077e <KePanic(char const*)>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	eb 9f                	jmp    c001bd1d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001bd7e <setupINTS()>:
c001bd7e:	31 c0                	xor    eax,eax
c001bd80:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd8a:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd94:	c7 80 24 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10dc],0x0
c001bd9e:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001bda8:	c7 80 28 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10d8],0x0
c001bdb2:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001bdbc:	c7 80 2c ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10d4],0x0
c001bdc6:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001bdd0:	83 c0 10             	add    eax,0x10
c001bdd3:	3d 00 10 00 00       	cmp    eax,0x1000
c001bdd8:	75 a6                	jne    c001bd80 <setupINTS()+0x2>
c001bdda:	c3                   	ret    

c001bddb <convertLegacyIRQNumber(int)>:
c001bddb:	83 ec 0c             	sub    esp,0xc
c001bdde:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001bde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde8:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bdef:	74 0c                	je     c001bdfd <convertLegacyIRQNumber(int)+0x22>
c001bdf1:	83 f8 0f             	cmp    eax,0xf
c001bdf4:	7f 0b                	jg     c001be01 <convertLegacyIRQNumber(int)+0x26>
c001bdf6:	0f b6 80 88 44 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcbb78]
c001bdfd:	83 c4 0c             	add    esp,0xc
c001be00:	c3                   	ret    
c001be01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be05:	83 ec 0c             	sub    esp,0xc
c001be08:	68 10 28 03 c0       	push   0xc0032810
c001be0d:	e8 6c 49 00 00       	call   c002077e <KePanic(char const*)>
c001be12:	83 c4 10             	add    esp,0x10
c001be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be19:	83 c4 0c             	add    esp,0xc
c001be1c:	c3                   	ret    
c001be1d:	90                   	nop

c001be1e <startGUI(void*)>:
c001be1e:	55                   	push   ebp
c001be1f:	89 e5                	mov    ebp,esp
c001be21:	53                   	push   ebx
c001be22:	83 ec 04             	sub    esp,0x4
c001be25:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be2a:	83 e8 01             	sub    eax,0x1
c001be2d:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001be32:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be37:	85 c0                	test   eax,eax
c001be39:	75 01                	jne    c001be3c <startGUI(void*)+0x1e>
c001be3b:	fb                   	sti    
c001be3c:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001be42:	83 ec 08             	sub    esp,0x8
c001be45:	6a 01                	push   0x1
c001be47:	68 6d 28 03 c0       	push   0xc003286d
c001be4c:	e8 b5 8e 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001be51:	83 c4 10             	add    esp,0x10
c001be54:	83 ec 08             	sub    esp,0x8
c001be57:	53                   	push   ebx
c001be58:	50                   	push   eax
c001be59:	e8 fa 90 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001be5e:	83 c4 10             	add    esp,0x10
c001be61:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001be67:	83 ec 08             	sub    esp,0x8
c001be6a:	6a 01                	push   0x1
c001be6c:	68 87 28 03 c0       	push   0xc0032887
c001be71:	e8 90 8e 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001be76:	83 c4 10             	add    esp,0x10
c001be79:	83 ec 08             	sub    esp,0x8
c001be7c:	53                   	push   ebx
c001be7d:	50                   	push   eax
c001be7e:	e8 d5 90 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001be83:	83 c4 10             	add    esp,0x10
c001be86:	eb fe                	jmp    c001be86 <startGUI(void*)+0x68>

c001be88 <startGUIVESA(void*)>:
c001be88:	55                   	push   ebp
c001be89:	89 e5                	mov    ebp,esp
c001be8b:	53                   	push   ebx
c001be8c:	83 ec 04             	sub    esp,0x4
c001be8f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be94:	83 e8 01             	sub    eax,0x1
c001be97:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001be9c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bea1:	85 c0                	test   eax,eax
c001bea3:	75 01                	jne    c001bea6 <startGUIVESA(void*)+0x1e>
c001bea5:	fb                   	sti    
c001bea6:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001beac:	83 ec 08             	sub    esp,0x8
c001beaf:	6a 01                	push   0x1
c001beb1:	68 a5 28 03 c0       	push   0xc00328a5
c001beb6:	e8 4b 8e 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001bebb:	83 c4 10             	add    esp,0x10
c001bebe:	83 ec 08             	sub    esp,0x8
c001bec1:	53                   	push   ebx
c001bec2:	50                   	push   eax
c001bec3:	e8 90 90 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001bec8:	83 c4 10             	add    esp,0x10
c001becb:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001bed1:	83 ec 08             	sub    esp,0x8
c001bed4:	6a 01                	push   0x1
c001bed6:	68 87 28 03 c0       	push   0xc0032887
c001bedb:	e8 26 8e 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001bee0:	83 c4 10             	add    esp,0x10
c001bee3:	83 ec 08             	sub    esp,0x8
c001bee6:	53                   	push   ebx
c001bee7:	50                   	push   eax
c001bee8:	e8 6b 90 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001beed:	83 c4 10             	add    esp,0x10
c001bef0:	eb fe                	jmp    c001bef0 <startGUIVESA(void*)+0x68>

c001bef2 <sendKeyToTerminal(unsigned char)>:
c001bef2:	55                   	push   ebp
c001bef3:	89 e5                	mov    ebp,esp
c001bef5:	83 ec 28             	sub    esp,0x28
c001bef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001befb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001befe:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c001bf03:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bf07:	83 ec 08             	sub    esp,0x8
c001bf0a:	52                   	push   edx
c001bf0b:	50                   	push   eax
c001bf0c:	e8 a5 b9 ff ff       	call   c00178b6 <VgaText::receiveKey(unsigned char)>
c001bf11:	83 c4 10             	add    esp,0x10
c001bf14:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf18:	83 f8 0a             	cmp    eax,0xa
c001bf1b:	74 16                	je     c001bf33 <sendKeyToTerminal(unsigned char)+0x41>
c001bf1d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf21:	83 f8 03             	cmp    eax,0x3
c001bf24:	74 0d                	je     c001bf33 <sendKeyToTerminal(unsigned char)+0x41>
c001bf26:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf2a:	83 f8 1c             	cmp    eax,0x1c
c001bf2d:	0f 85 97 00 00 00    	jne    c001bfca <sendKeyToTerminal(unsigned char)+0xd8>
c001bf33:	fa                   	cli    
c001bf34:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bf39:	83 c0 01             	add    eax,0x1
c001bf3c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001bf41:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf46:	83 c0 01             	add    eax,0x1
c001bf49:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001bf4e:	a1 20 ff 03 c0       	mov    eax,ds:0xc003ff20
c001bf53:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf56:	c7 05 20 ff 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ff20,0x0
c001bf60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bf64:	74 1f                	je     c001bf85 <sendKeyToTerminal(unsigned char)+0x93>
c001bf66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bf69:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bf6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf72:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf75:	83 ec 0c             	sub    esp,0xc
c001bf78:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bf7b:	e8 04 9b 00 00       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c001bf80:	83 c4 10             	add    esp,0x10
c001bf83:	eb db                	jmp    c001bf60 <sendKeyToTerminal(unsigned char)+0x6e>
c001bf85:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf8a:	83 e8 01             	sub    eax,0x1
c001bf8d:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001bf92:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf97:	85 c0                	test   eax,eax
c001bf99:	75 18                	jne    c001bfb3 <sendKeyToTerminal(unsigned char)+0xc1>
c001bf9b:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c001bfa0:	85 c0                	test   eax,eax
c001bfa2:	74 0f                	je     c001bfb3 <sendKeyToTerminal(unsigned char)+0xc1>
c001bfa4:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c001bfae:	e8 d9 97 00 00       	call   c002578c <schedule()>
c001bfb3:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bfb8:	83 e8 01             	sub    eax,0x1
c001bfbb:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001bfc0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bfc5:	85 c0                	test   eax,eax
c001bfc7:	75 01                	jne    c001bfca <sendKeyToTerminal(unsigned char)+0xd8>
c001bfc9:	fb                   	sti    
c001bfca:	90                   	nop
c001bfcb:	c9                   	leave  
c001bfcc:	c3                   	ret    

c001bfcd <sendKeyboardToken(KeyboardToken)>:
c001bfcd:	55                   	push   ebp
c001bfce:	89 e5                	mov    ebp,esp
c001bfd0:	83 ec 18             	sub    esp,0x18
c001bfd3:	e8 f6 47 00 00       	call   c00207ce <KeUserIOReceived()>
c001bfd8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bfdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfde:	0f b7 c0             	movzx  eax,ax
c001bfe1:	83 f2 01             	xor    edx,0x1
c001bfe4:	88 90 40 ff 03 c0    	mov    BYTE PTR [eax-0x3ffc00c0],dl
c001bfea:	a1 28 ff 03 c0       	mov    eax,ds:0xc003ff28
c001bfef:	85 c0                	test   eax,eax
c001bff1:	74 24                	je     c001c017 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bff3:	8b 0d 28 ff 03 c0    	mov    ecx,DWORD PTR ds:0xc003ff28
c001bff9:	83 ec 04             	sub    esp,0x4
c001bffc:	68 40 ff 03 c0       	push   0xc003ff40
c001c001:	83 ec 08             	sub    esp,0x8
c001c004:	89 e2                	mov    edx,esp
c001c006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c009:	89 02                	mov    DWORD PTR [edx],eax
c001c00b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c00e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c012:	ff d1                	call   ecx
c001c014:	83 c4 10             	add    esp,0x10
c001c017:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001c01b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001c01e:	a0 48 03 04 c0       	mov    al,ds:0xc0040348
c001c023:	0f b6 d2             	movzx  edx,dl
c001c026:	0f b6 c0             	movzx  eax,al
c001c029:	39 c2                	cmp    edx,eax
c001c02b:	74 1c                	je     c001c049 <sendKeyboardToken(KeyboardToken)+0x7c>
c001c02d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001c030:	a2 48 03 04 c0       	mov    ds:0xc0040348,al
c001c035:	a0 48 03 04 c0       	mov    al,ds:0xc0040348
c001c03a:	0f b6 c0             	movzx  eax,al
c001c03d:	83 ec 0c             	sub    esp,0xc
c001c040:	50                   	push   eax
c001c041:	e8 bc af ff ff       	call   c0017002 <setTerminalScrollLock(bool)>
c001c046:	83 c4 10             	add    esp,0x10
c001c049:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001c04c:	0f b6 c0             	movzx  eax,al
c001c04f:	85 c0                	test   eax,eax
c001c051:	0f 84 da 00 00 00    	je     c001c131 <sendKeyboardToken(KeyboardToken)+0x164>
c001c057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c05a:	0f b7 c0             	movzx  eax,ax
c001c05d:	3d 18 03 00 00       	cmp    eax,0x318
c001c062:	75 06                	jne    c001c06a <sendKeyboardToken(KeyboardToken)+0x9d>
c001c064:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001c06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c06d:	0f b7 c0             	movzx  eax,ax
c001c070:	3d 19 03 00 00       	cmp    eax,0x319
c001c075:	75 06                	jne    c001c07d <sendKeyboardToken(KeyboardToken)+0xb0>
c001c077:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001c07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c080:	0f b7 c0             	movzx  eax,ax
c001c083:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c088:	75 06                	jne    c001c090 <sendKeyboardToken(KeyboardToken)+0xc3>
c001c08a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001c090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c093:	0f b7 c0             	movzx  eax,ax
c001c096:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c09b:	75 06                	jne    c001c0a3 <sendKeyboardToken(KeyboardToken)+0xd6>
c001c09d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001c0a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a6:	0f b7 c0             	movzx  eax,ax
c001c0a9:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c0ae:	75 06                	jne    c001c0b6 <sendKeyboardToken(KeyboardToken)+0xe9>
c001c0b0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001c0b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b9:	0f b7 c0             	movzx  eax,ax
c001c0bc:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c0c1:	75 06                	jne    c001c0c9 <sendKeyboardToken(KeyboardToken)+0xfc>
c001c0c3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0cc:	0f b7 c0             	movzx  eax,ax
c001c0cf:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c0d4:	75 06                	jne    c001c0dc <sendKeyboardToken(KeyboardToken)+0x10f>
c001c0d6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001c0dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0df:	0f b7 c0             	movzx  eax,ax
c001c0e2:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c0e7:	75 06                	jne    c001c0ef <sendKeyboardToken(KeyboardToken)+0x122>
c001c0e9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001c0ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0f2:	0f b7 c0             	movzx  eax,ax
c001c0f5:	3d 20 03 00 00       	cmp    eax,0x320
c001c0fa:	75 06                	jne    c001c102 <sendKeyboardToken(KeyboardToken)+0x135>
c001c0fc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c105:	0f b7 c0             	movzx  eax,ax
c001c108:	3d 21 03 00 00       	cmp    eax,0x321
c001c10d:	75 06                	jne    c001c115 <sendKeyboardToken(KeyboardToken)+0x148>
c001c10f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c118:	0f b7 c0             	movzx  eax,ax
c001c11b:	3d 22 03 00 00       	cmp    eax,0x322
c001c120:	0f 85 f1 00 00 00    	jne    c001c217 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c126:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c12c:	e9 e6 00 00 00       	jmp    c001c217 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c134:	0f b7 c0             	movzx  eax,ax
c001c137:	3d 18 03 00 00       	cmp    eax,0x318
c001c13c:	75 0a                	jne    c001c148 <sendKeyboardToken(KeyboardToken)+0x17b>
c001c13e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c144:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c14b:	0f b7 c0             	movzx  eax,ax
c001c14e:	3d 19 03 00 00       	cmp    eax,0x319
c001c153:	75 0a                	jne    c001c15f <sendKeyboardToken(KeyboardToken)+0x192>
c001c155:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c15b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c162:	0f b7 c0             	movzx  eax,ax
c001c165:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c16a:	75 0a                	jne    c001c176 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c16c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c172:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c179:	0f b7 c0             	movzx  eax,ax
c001c17c:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c181:	75 0a                	jne    c001c18d <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c183:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c189:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c18d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c190:	0f b7 c0             	movzx  eax,ax
c001c193:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c198:	75 0a                	jne    c001c1a4 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c19a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c1a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1a7:	0f b7 c0             	movzx  eax,ax
c001c1aa:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c1af:	75 0a                	jne    c001c1bb <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c1b1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c1b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1be:	0f b7 c0             	movzx  eax,ax
c001c1c1:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c1c6:	75 0a                	jne    c001c1d2 <sendKeyboardToken(KeyboardToken)+0x205>
c001c1c8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c1ce:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1d5:	0f b7 c0             	movzx  eax,ax
c001c1d8:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c1dd:	75 0a                	jne    c001c1e9 <sendKeyboardToken(KeyboardToken)+0x21c>
c001c1df:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c1e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ec:	0f b7 c0             	movzx  eax,ax
c001c1ef:	3d 20 03 00 00       	cmp    eax,0x320
c001c1f4:	75 0a                	jne    c001c200 <sendKeyboardToken(KeyboardToken)+0x233>
c001c1f6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c1fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c203:	0f b7 c0             	movzx  eax,ax
c001c206:	3d 21 03 00 00       	cmp    eax,0x321
c001c20b:	75 0a                	jne    c001c217 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c20d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c213:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c21a:	0f b7 c0             	movzx  eax,ax
c001c21d:	3d 00 02 00 00       	cmp    eax,0x200
c001c222:	75 2f                	jne    c001c253 <sendKeyboardToken(KeyboardToken)+0x286>
c001c224:	a0 40 03 04 c0       	mov    al,ds:0xc0040340
c001c229:	83 f0 01             	xor    eax,0x1
c001c22c:	0f b6 c0             	movzx  eax,al
c001c22f:	85 c0                	test   eax,eax
c001c231:	74 20                	je     c001c253 <sendKeyboardToken(KeyboardToken)+0x286>
c001c233:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001c238:	6a 01                	push   0x1
c001c23a:	6a 00                	push   0x0
c001c23c:	68 1e be 01 c0       	push   0xc001be1e
c001c241:	50                   	push   eax
c001c242:	e8 f5 92 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c001c247:	83 c4 10             	add    esp,0x10
c001c24a:	c6 05 40 03 04 c0 01 	mov    BYTE PTR ds:0xc0040340,0x1
c001c251:	eb 3a                	jmp    c001c28d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c256:	0f b7 c0             	movzx  eax,ax
c001c259:	3d 01 02 00 00       	cmp    eax,0x201
c001c25e:	75 2d                	jne    c001c28d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c260:	a0 40 03 04 c0       	mov    al,ds:0xc0040340
c001c265:	83 f0 01             	xor    eax,0x1
c001c268:	0f b6 c0             	movzx  eax,al
c001c26b:	85 c0                	test   eax,eax
c001c26d:	74 1e                	je     c001c28d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c26f:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001c274:	6a 01                	push   0x1
c001c276:	6a 00                	push   0x0
c001c278:	68 88 be 01 c0       	push   0xc001be88
c001c27d:	50                   	push   eax
c001c27e:	e8 b9 92 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c001c283:	83 c4 10             	add    esp,0x10
c001c286:	c6 05 40 03 04 c0 01 	mov    BYTE PTR ds:0xc0040340,0x1
c001c28d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c290:	0f b7 c0             	movzx  eax,ax
c001c293:	3d 25 03 00 00       	cmp    eax,0x325
c001c298:	75 06                	jne    c001c2a0 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c29a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c2a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2a3:	0f b7 c0             	movzx  eax,ax
c001c2a6:	3d 24 03 00 00       	cmp    eax,0x324
c001c2ab:	75 06                	jne    c001c2b3 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c2ad:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c2b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2b6:	0f b7 c0             	movzx  eax,ax
c001c2b9:	3d 23 03 00 00       	cmp    eax,0x323
c001c2be:	75 06                	jne    c001c2c6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c2c0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2c9:	0f b7 c0             	movzx  eax,ax
c001c2cc:	3d 26 03 00 00       	cmp    eax,0x326
c001c2d1:	75 06                	jne    c001c2d9 <sendKeyboardToken(KeyboardToken)+0x30c>
c001c2d3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c2d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2dc:	0f b7 c0             	movzx  eax,ax
c001c2df:	3d 27 03 00 00       	cmp    eax,0x327
c001c2e4:	75 06                	jne    c001c2ec <sendKeyboardToken(KeyboardToken)+0x31f>
c001c2e6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ef:	0f b7 c0             	movzx  eax,ax
c001c2f2:	3d 22 03 00 00       	cmp    eax,0x322
c001c2f7:	75 06                	jne    c001c2ff <sendKeyboardToken(KeyboardToken)+0x332>
c001c2f9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c2ff:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c303:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c306:	83 f0 01             	xor    eax,0x1
c001c309:	0f b6 c0             	movzx  eax,al
c001c30c:	85 c0                	test   eax,eax
c001c30e:	74 7c                	je     c001c38c <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c310:	a0 41 00 04 c0       	mov    al,ds:0xc0040041
c001c315:	0f b6 c0             	movzx  eax,al
c001c318:	85 c0                	test   eax,eax
c001c31a:	74 43                	je     c001c35f <sendKeyboardToken(KeyboardToken)+0x392>
c001c31c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c320:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c324:	85 c0                	test   eax,eax
c001c326:	74 2b                	je     c001c353 <sendKeyboardToken(KeyboardToken)+0x386>
c001c328:	8b 15 44 03 04 c0    	mov    edx,DWORD PTR ds:0xc0040344
c001c32e:	89 d0                	mov    eax,edx
c001c330:	c1 e0 02             	shl    eax,0x2
c001c333:	01 d0                	add    eax,edx
c001c335:	01 c0                	add    eax,eax
c001c337:	a3 44 03 04 c0       	mov    ds:0xc0040344,eax
c001c33c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c33f:	0f b7 c0             	movzx  eax,ax
c001c342:	8d 50 d0             	lea    edx,[eax-0x30]
c001c345:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c34a:	01 d0                	add    eax,edx
c001c34c:	a3 44 03 04 c0       	mov    ds:0xc0040344,eax
c001c351:	eb 71                	jmp    c001c3c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c353:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c35d:	eb 65                	jmp    c001c3c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c35f:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c364:	85 c0                	test   eax,eax
c001c366:	74 18                	je     c001c380 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c368:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c36d:	0f b6 c0             	movzx  eax,al
c001c370:	83 ec 0c             	sub    esp,0xc
c001c373:	50                   	push   eax
c001c374:	e8 79 fb ff ff       	call   c001bef2 <sendKeyToTerminal(unsigned char)>
c001c379:	83 c4 10             	add    esp,0x10
c001c37c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c380:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c38a:	eb 38                	jmp    c001c3c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c38c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c38f:	0f b7 c0             	movzx  eax,ax
c001c392:	3d 01 01 00 00       	cmp    eax,0x101
c001c397:	75 2b                	jne    c001c3c4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c399:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c39e:	85 c0                	test   eax,eax
c001c3a0:	74 18                	je     c001c3ba <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c3a2:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c3a7:	0f b6 c0             	movzx  eax,al
c001c3aa:	83 ec 0c             	sub    esp,0xc
c001c3ad:	50                   	push   eax
c001c3ae:	e8 3f fb ff ff       	call   c001bef2 <sendKeyToTerminal(unsigned char)>
c001c3b3:	83 c4 10             	add    esp,0x10
c001c3b6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c3ba:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c3c4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c3c7:	83 f0 01             	xor    eax,0x1
c001c3ca:	0f b6 c0             	movzx  eax,al
c001c3cd:	85 c0                	test   eax,eax
c001c3cf:	74 5a                	je     c001c42b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3d4:	83 f0 01             	xor    eax,0x1
c001c3d7:	0f b6 c0             	movzx  eax,al
c001c3da:	85 c0                	test   eax,eax
c001c3dc:	74 4d                	je     c001c42b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3de:	a0 40 00 04 c0       	mov    al,ds:0xc0040040
c001c3e3:	83 f0 01             	xor    eax,0x1
c001c3e6:	0f b6 c0             	movzx  eax,al
c001c3e9:	85 c0                	test   eax,eax
c001c3eb:	74 3e                	je     c001c42b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3f0:	0f b7 c0             	movzx  eax,ax
c001c3f3:	83 f8 1f             	cmp    eax,0x1f
c001c3f6:	76 0b                	jbe    c001c403 <sendKeyboardToken(KeyboardToken)+0x436>
c001c3f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3fb:	0f b7 c0             	movzx  eax,ax
c001c3fe:	83 f8 7e             	cmp    eax,0x7e
c001c401:	76 16                	jbe    c001c419 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c406:	0f b7 c0             	movzx  eax,ax
c001c409:	83 f8 0a             	cmp    eax,0xa
c001c40c:	74 0b                	je     c001c419 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c40e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c411:	0f b7 c0             	movzx  eax,ax
c001c414:	83 f8 08             	cmp    eax,0x8
c001c417:	75 12                	jne    c001c42b <sendKeyboardToken(KeyboardToken)+0x45e>
c001c419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c41c:	0f b6 c0             	movzx  eax,al
c001c41f:	83 ec 0c             	sub    esp,0xc
c001c422:	50                   	push   eax
c001c423:	e8 ca fa ff ff       	call   c001bef2 <sendKeyToTerminal(unsigned char)>
c001c428:	83 c4 10             	add    esp,0x10
c001c42b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c42e:	83 f0 01             	xor    eax,0x1
c001c431:	0f b6 c0             	movzx  eax,al
c001c434:	85 c0                	test   eax,eax
c001c436:	74 5d                	je     c001c495 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c438:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c43b:	83 f0 01             	xor    eax,0x1
c001c43e:	0f b6 c0             	movzx  eax,al
c001c441:	85 c0                	test   eax,eax
c001c443:	74 50                	je     c001c495 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c445:	a0 40 00 04 c0       	mov    al,ds:0xc0040040
c001c44a:	0f b6 c0             	movzx  eax,al
c001c44d:	85 c0                	test   eax,eax
c001c44f:	74 44                	je     c001c495 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c454:	0f b7 c0             	movzx  eax,ax
c001c457:	83 f8 3f             	cmp    eax,0x3f
c001c45a:	76 39                	jbe    c001c495 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c45c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c45f:	0f b7 c0             	movzx  eax,ax
c001c462:	83 f8 7f             	cmp    eax,0x7f
c001c465:	77 2e                	ja     c001c495 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c46a:	88 c2                	mov    dl,al
c001c46c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c46f:	0f b7 c0             	movzx  eax,ax
c001c472:	83 f8 5f             	cmp    eax,0x5f
c001c475:	76 04                	jbe    c001c47b <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c477:	b0 20                	mov    al,0x20
c001c479:	eb 02                	jmp    c001c47d <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c47b:	b0 00                	mov    al,0x0
c001c47d:	89 d1                	mov    ecx,edx
c001c47f:	29 c1                	sub    ecx,eax
c001c481:	89 c8                	mov    eax,ecx
c001c483:	83 e8 40             	sub    eax,0x40
c001c486:	0f b6 c0             	movzx  eax,al
c001c489:	83 ec 0c             	sub    esp,0xc
c001c48c:	50                   	push   eax
c001c48d:	e8 60 fa ff ff       	call   c001bef2 <sendKeyToTerminal(unsigned char)>
c001c492:	83 c4 10             	add    esp,0x10
c001c495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c498:	0f b7 c0             	movzx  eax,ax
c001c49b:	3d 00 03 00 00       	cmp    eax,0x300
c001c4a0:	75 12                	jne    c001c4b4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c4a2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c4a5:	83 f0 01             	xor    eax,0x1
c001c4a8:	0f b6 c0             	movzx  eax,al
c001c4ab:	85 c0                	test   eax,eax
c001c4ad:	74 05                	je     c001c4b4 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c4af:	e8 4f ab ff ff       	call   c0017003 <doTerminalCycle()>
c001c4b4:	90                   	nop
c001c4b5:	c9                   	leave  
c001c4b6:	c3                   	ret    

c001c4b7 <clearInternalKeybuffer(VgaText*)>:
c001c4b7:	55                   	push   ebp
c001c4b8:	89 e5                	mov    ebp,esp
c001c4ba:	83 ec 08             	sub    esp,0x8
c001c4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4c0:	05 02 01 00 00       	add    eax,0x102
c001c4c5:	83 ec 0c             	sub    esp,0xc
c001c4c8:	50                   	push   eax
c001c4c9:	e8 a2 40 fe ff       	call   c0000570 <strlen>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4d4:	81 c2 02 01 00 00    	add    edx,0x102
c001c4da:	83 ec 04             	sub    esp,0x4
c001c4dd:	50                   	push   eax
c001c4de:	6a 00                	push   0x0
c001c4e0:	52                   	push   edx
c001c4e1:	e8 0a 40 fe ff       	call   c00004f0 <memset>
c001c4e6:	83 c4 10             	add    esp,0x10
c001c4e9:	90                   	nop
c001c4ea:	c9                   	leave  
c001c4eb:	c3                   	ret    

c001c4ec <readKeyboard(VgaText*, char*, unsigned long)>:
c001c4ec:	55                   	push   ebp
c001c4ed:	89 e5                	mov    ebp,esp
c001c4ef:	83 ec 18             	sub    esp,0x18
c001c4f2:	a1 28 ff 03 c0       	mov    eax,ds:0xc003ff28
c001c4f7:	85 c0                	test   eax,eax
c001c4f9:	74 2a                	je     c001c525 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c4fb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c501:	8b 0d 28 ff 03 c0    	mov    ecx,DWORD PTR ds:0xc003ff28
c001c507:	83 ec 04             	sub    esp,0x4
c001c50a:	68 40 ff 03 c0       	push   0xc003ff40
c001c50f:	83 ec 08             	sub    esp,0x8
c001c512:	89 e2                	mov    edx,esp
c001c514:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c517:	89 02                	mov    DWORD PTR [edx],eax
c001c519:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c51c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c520:	ff d1                	call   ecx
c001c522:	83 c4 10             	add    esp,0x10
c001c525:	fb                   	sti    
c001c526:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c52d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c531:	0f 84 0d 01 00 00    	je     c001c644 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c53a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c540:	0f be c0             	movsx  eax,al
c001c543:	85 c0                	test   eax,eax
c001c545:	75 2c                	jne    c001c573 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c547:	fa                   	cli    
c001c548:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c54d:	83 c0 01             	add    eax,0x1
c001c550:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001c555:	e8 32 92 00 00       	call   c002578c <schedule()>
c001c55a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c55f:	83 e8 01             	sub    eax,0x1
c001c562:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001c567:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c56c:	85 c0                	test   eax,eax
c001c56e:	75 c7                	jne    c001c537 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c570:	fb                   	sti    
c001c571:	eb c4                	jmp    c001c537 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c573:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c576:	8d 50 01             	lea    edx,[eax+0x1]
c001c579:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c57c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c57f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c585:	88 10                	mov    BYTE PTR [eax],dl
c001c587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c58a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c590:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c593:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c597:	83 f8 03             	cmp    eax,0x3
c001c59a:	75 1e                	jne    c001c5ba <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c59c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5a6:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5ac:	83 ec 08             	sub    esp,0x8
c001c5af:	6a 02                	push   0x2
c001c5b1:	50                   	push   eax
c001c5b2:	e8 80 4a 00 00       	call   c0021037 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c5be:	83 f8 1c             	cmp    eax,0x1c
c001c5c1:	75 1e                	jne    c001c5e1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c5c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5cd:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5d3:	83 ec 08             	sub    esp,0x8
c001c5d6:	6a 09                	push   0x9
c001c5d8:	50                   	push   eax
c001c5d9:	e8 59 4a 00 00       	call   c0021037 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c5e4:	05 02 01 00 00       	add    eax,0x102
c001c5e9:	83 ec 0c             	sub    esp,0xc
c001c5ec:	50                   	push   eax
c001c5ed:	e8 7e 3f fe ff       	call   c0000570 <strlen>
c001c5f2:	83 c4 10             	add    esp,0x10
c001c5f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c5f8:	81 c2 02 01 00 00    	add    edx,0x102
c001c5fe:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c601:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c604:	81 c2 02 01 00 00    	add    edx,0x102
c001c60a:	83 ec 04             	sub    esp,0x4
c001c60d:	50                   	push   eax
c001c60e:	51                   	push   ecx
c001c60f:	52                   	push   edx
c001c610:	e8 bb 3d fe ff       	call   c00003d0 <memmove>
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c61c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c620:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c624:	83 f8 0a             	cmp    eax,0xa
c001c627:	74 16                	je     c001c63f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c629:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c62d:	83 f8 03             	cmp    eax,0x3
c001c630:	74 0d                	je     c001c63f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c632:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c636:	83 f8 1c             	cmp    eax,0x1c
c001c639:	0f 85 ee fe ff ff    	jne    c001c52d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c63f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c642:	eb 03                	jmp    c001c647 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c644:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c647:	c9                   	leave  
c001c648:	c3                   	ret    
c001c649:	90                   	nop

c001c64a <Keyboard::Keyboard(char const*)>:
c001c64a:	83 ec 0c             	sub    esp,0xc
c001c64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c651:	83 ec 08             	sub    esp,0x8
c001c654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c658:	50                   	push   eax
c001c659:	e8 06 f1 ff ff       	call   c001b764 <Device::Device(char const*)>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	ba c8 28 03 c0       	mov    edx,0xc00328c8
c001c666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66a:	89 10                	mov    DWORD PTR [eax],edx
c001c66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c670:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c67a:	c6 05 24 ff 03 c0 01 	mov    BYTE PTR ds:0xc003ff24,0x1
c001c681:	90                   	nop
c001c682:	83 c4 0c             	add    esp,0xc
c001c685:	c3                   	ret    

c001c686 <Keyboard::~Keyboard()>:
c001c686:	83 ec 0c             	sub    esp,0xc
c001c689:	ba c8 28 03 c0       	mov    edx,0xc00328c8
c001c68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c692:	89 10                	mov    DWORD PTR [eax],edx
c001c694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	50                   	push   eax
c001c69c:	e8 63 ee ff ff       	call   c001b504 <Device::~Device()>
c001c6a1:	83 c4 10             	add    esp,0x10
c001c6a4:	90                   	nop
c001c6a5:	83 c4 0c             	add    esp,0xc
c001c6a8:	c3                   	ret    
c001c6a9:	90                   	nop

c001c6aa <Keyboard::~Keyboard()>:
c001c6aa:	83 ec 0c             	sub    esp,0xc
c001c6ad:	83 ec 0c             	sub    esp,0xc
c001c6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b4:	e8 cd ff ff ff       	call   c001c686 <Keyboard::~Keyboard()>
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	83 ec 08             	sub    esp,0x8
c001c6bf:	68 5c 01 00 00       	push   0x15c
c001c6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c8:	e8 4b cc ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	83 c4 0c             	add    esp,0xc
c001c6d3:	c3                   	ret    

c001c6d4 <LogicalDisk::close(int, int, void*)>:
c001c6d4:	83 c8 ff             	or     eax,0xffffffff
c001c6d7:	c3                   	ret    

c001c6d8 <LogicalDisk::~LogicalDisk()>:
c001c6d8:	83 ec 0c             	sub    esp,0xc
c001c6db:	ba 40 29 03 c0       	mov    edx,0xc0032940
c001c6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e4:	89 10                	mov    DWORD PTR [eax],edx
c001c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	50                   	push   eax
c001c6ee:	e8 11 ee ff ff       	call   c001b504 <Device::~Device()>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	90                   	nop
c001c6f7:	83 c4 0c             	add    esp,0xc
c001c6fa:	c3                   	ret    
c001c6fb:	90                   	nop

c001c6fc <LogicalDisk::~LogicalDisk()>:
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	83 ec 0c             	sub    esp,0xc
c001c702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c706:	e8 cd ff ff ff       	call   c001c6d8 <LogicalDisk::~LogicalDisk()>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	83 ec 08             	sub    esp,0x8
c001c711:	68 78 01 00 00       	push   0x178
c001c716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c71a:	e8 f9 cb ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001c71f:	83 c4 10             	add    esp,0x10
c001c722:	83 c4 0c             	add    esp,0xc
c001c725:	c3                   	ret    

c001c726 <LogicalDisk::open(int, int, void*)>:
c001c726:	83 ec 18             	sub    esp,0x18
c001c729:	68 f4 28 03 c0       	push   0xc00328f4
c001c72e:	e8 4b 40 00 00       	call   c002077e <KePanic(char const*)>
c001c733:	83 c8 ff             	or     eax,0xffffffff
c001c736:	83 c4 1c             	add    esp,0x1c
c001c739:	c3                   	ret    

c001c73a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c73a:	53                   	push   ebx
c001c73b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c73f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c743:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c747:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c74d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c753:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c759:	77 10                	ja     c001c76b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c75b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c761:	89 d3                	mov    ebx,edx
c001c763:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c769:	72 05                	jb     c001c770 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c76b:	83 c8 ff             	or     eax,0xffffffff
c001c76e:	89 c2                	mov    edx,eax
c001c770:	5b                   	pop    ebx
c001c771:	c3                   	ret    

c001c772 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c772:	56                   	push   esi
c001c773:	83 c8 ff             	or     eax,0xffffffff
c001c776:	53                   	push   ebx
c001c777:	89 c2                	mov    edx,eax
c001c779:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c77d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c781:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c785:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c78b:	77 27                	ja     c001c7b4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c78d:	89 d8                	mov    eax,ebx
c001c78f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c795:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c79b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7a0:	89 c2                	mov    edx,eax
c001c7a2:	73 10                	jae    c001c7b4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c7a4:	89 c8                	mov    eax,ecx
c001c7a6:	89 da                	mov    edx,ebx
c001c7a8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c7ae:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c7b4:	5b                   	pop    ebx
c001c7b5:	5e                   	pop    esi
c001c7b6:	c3                   	ret    
c001c7b7:	90                   	nop

c001c7b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c7b8:	83 ec 1c             	sub    esp,0x1c
c001c7bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c7bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c7c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7de:	83 ec 08             	sub    esp,0x8
c001c7e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7e5:	50                   	push   eax
c001c7e6:	e8 79 ef ff ff       	call   c001b764 <Device::Device(char const*)>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	ba 40 29 03 c0       	mov    edx,0xc0032940
c001c7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7f7:	89 10                	mov    DWORD PTR [eax],edx
c001c7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7fd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c808:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c813:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c81e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c828:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c82c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c830:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c834:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c83a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c840:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c844:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c847:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c84b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c851:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c85b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c85f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c869:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c873:	90                   	nop
c001c874:	83 c4 1c             	add    esp,0x1c
c001c877:	c3                   	ret    

c001c878 <LogicalDisk::assignDriveLetter()>:
c001c878:	55                   	push   ebp
c001c879:	57                   	push   edi
c001c87a:	56                   	push   esi
c001c87b:	53                   	push   ebx
c001c87c:	83 ec 14             	sub    esp,0x14
c001c87f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c883:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c889:	b0 41                	mov    al,0x41
c001c88b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c891:	84 d2                	test   dl,dl
c001c893:	75 02                	jne    c001c897 <LogicalDisk::assignDriveLetter()+0x1f>
c001c895:	b0 43                	mov    al,0x43
c001c897:	8b 3d 60 03 04 c0    	mov    edi,DWORD PTR ds:0xc0040360
c001c89d:	0f b6 ca             	movzx  ecx,dl
c001c8a0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c8a4:	0f be e8             	movsx  ebp,al
c001c8a7:	8b 3d 64 03 04 c0    	mov    edi,DWORD PTR ds:0xc0040364
c001c8ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c8b1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c8b5:	3c 43                	cmp    al,0x43
c001c8b7:	75 10                	jne    c001c8c9 <LogicalDisk::assignDriveLetter()+0x51>
c001c8b9:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c8c0:	75 5a                	jne    c001c91c <LogicalDisk::assignDriveLetter()+0xa4>
c001c8c2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8c7:	75 53                	jne    c001c91c <LogicalDisk::assignDriveLetter()+0xa4>
c001c8c9:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c8cc:	ba 01 00 00 00       	mov    edx,0x1
c001c8d1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8d4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c8d7:	d3 e2                	shl    edx,cl
c001c8d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8dd:	89 d7                	mov    edi,edx
c001c8df:	89 d6                	mov    esi,edx
c001c8e1:	c1 ff 1f             	sar    edi,0x1f
c001c8e4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c8e8:	21 f9                	and    ecx,edi
c001c8ea:	09 d1                	or     ecx,edx
c001c8ec:	75 2e                	jne    c001c91c <LogicalDisk::assignDriveLetter()+0xa4>
c001c8ee:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c8f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8f6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c8fc:	09 f2                	or     edx,esi
c001c8fe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c901:	89 15 60 03 04 c0    	mov    DWORD PTR ds:0xc0040360,edx
c001c907:	89 1c b5 80 03 04 c0 	mov    DWORD PTR [esi*4-0x3ffbfc80],ebx
c001c90e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c912:	09 fa                	or     edx,edi
c001c914:	89 15 64 03 04 c0    	mov    DWORD PTR ds:0xc0040364,edx
c001c91a:	eb 0d                	jmp    c001c929 <LogicalDisk::assignDriveLetter()+0xb1>
c001c91c:	8d 50 01             	lea    edx,[eax+0x1]
c001c91f:	45                   	inc    ebp
c001c920:	88 d0                	mov    al,dl
c001c922:	80 fa 5b             	cmp    dl,0x5b
c001c925:	75 8e                	jne    c001c8b5 <LogicalDisk::assignDriveLetter()+0x3d>
c001c927:	31 c0                	xor    eax,eax
c001c929:	83 c4 14             	add    esp,0x14
c001c92c:	5b                   	pop    ebx
c001c92d:	5e                   	pop    esi
c001c92e:	5f                   	pop    edi
c001c92f:	5d                   	pop    ebp
c001c930:	c3                   	ret    
c001c931:	90                   	nop

c001c932 <LogicalDisk::mount()>:
c001c932:	56                   	push   esi
c001c933:	53                   	push   ebx
c001c934:	53                   	push   ebx
c001c935:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c939:	8b 1d 04 df 03 c0    	mov    ebx,DWORD PTR ds:0xc003df04
c001c93f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c949:	85 db                	test   ebx,ebx
c001c94b:	74 27                	je     c001c974 <LogicalDisk::mount()+0x42>
c001c94d:	51                   	push   ecx
c001c94e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c955:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c957:	83 e8 41             	sub    eax,0x41
c001c95a:	50                   	push   eax
c001c95b:	56                   	push   esi
c001c95c:	53                   	push   ebx
c001c95d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c960:	83 c4 10             	add    esp,0x10
c001c963:	84 c0                	test   al,al
c001c965:	74 08                	je     c001c96f <LogicalDisk::mount()+0x3d>
c001c967:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c96d:	eb 07                	jmp    c001c976 <LogicalDisk::mount()+0x44>
c001c96f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c972:	eb d5                	jmp    c001c949 <LogicalDisk::mount()+0x17>
c001c974:	31 c0                	xor    eax,eax
c001c976:	5a                   	pop    edx
c001c977:	5b                   	pop    ebx
c001c978:	5e                   	pop    esi
c001c979:	c3                   	ret    

c001c97a <LogicalDisk::unmount()>:
c001c97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c97e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c988:	c3                   	ret    
c001c989:	90                   	nop

c001c98a <LogicalDisk::eject()>:
c001c98a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c994:	8b 10                	mov    edx,DWORD PTR [eax]
c001c996:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c99a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c99d:	90                   	nop

c001c99e <LogicalDisk::unassignDriveLetter()>:
c001c99e:	57                   	push   edi
c001c99f:	56                   	push   esi
c001c9a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9a4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c9ab:	85 c9                	test   ecx,ecx
c001c9ad:	75 0f                	jne    c001c9be <LogicalDisk::unassignDriveLetter()+0x20>
c001c9af:	c7 44 24 0c 18 29 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032918
c001c9b7:	5e                   	pop    esi
c001c9b8:	5f                   	pop    edi
c001c9b9:	e9 c0 3d 00 00       	jmp    c002077e <KePanic(char const*)>
c001c9be:	83 e9 41             	sub    ecx,0x41
c001c9c1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c9c8:	b8 01 00 00 00       	mov    eax,0x1
c001c9cd:	c7 04 8d 80 03 04 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffbfc80],0x0
c001c9d8:	d3 e0                	shl    eax,cl
c001c9da:	89 c7                	mov    edi,eax
c001c9dc:	f7 d0                	not    eax
c001c9de:	c1 ff 1f             	sar    edi,0x1f
c001c9e1:	21 05 60 03 04 c0    	and    DWORD PTR ds:0xc0040360,eax
c001c9e7:	89 fe                	mov    esi,edi
c001c9e9:	f7 d6                	not    esi
c001c9eb:	21 35 64 03 04 c0    	and    DWORD PTR ds:0xc0040364,esi
c001c9f1:	5e                   	pop    esi
c001c9f2:	5f                   	pop    edi
c001c9f3:	c3                   	ret    

c001c9f4 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c9f4:	57                   	push   edi
c001c9f5:	56                   	push   esi
c001c9f6:	53                   	push   ebx
c001c9f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9ff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca07:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca0d:	77 41                	ja     c001ca50 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001ca0f:	99                   	cdq    
c001ca10:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca16:	01 c8                	add    eax,ecx
c001ca18:	11 da                	adc    edx,ebx
c001ca1a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca20:	19 d7                	sbb    edi,edx
c001ca22:	72 33                	jb     c001ca57 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001ca24:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001ca2a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001ca30:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ca34:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ca38:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001ca3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca48:	5b                   	pop    ebx
c001ca49:	5e                   	pop    esi
c001ca4a:	5f                   	pop    edi
c001ca4b:	e9 c8 0a 00 00       	jmp    c001d518 <VCache::read(unsigned long long, int, void*)>
c001ca50:	b8 05 00 00 00       	mov    eax,0x5
c001ca55:	eb 05                	jmp    c001ca5c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001ca57:	b8 07 00 00 00       	mov    eax,0x7
c001ca5c:	5b                   	pop    ebx
c001ca5d:	5e                   	pop    esi
c001ca5e:	5f                   	pop    edi
c001ca5f:	c3                   	ret    

c001ca60 <LogicalDisk::write(unsigned long long, int, void*)>:
c001ca60:	57                   	push   edi
c001ca61:	56                   	push   esi
c001ca62:	53                   	push   ebx
c001ca63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca6b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca73:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca79:	77 41                	ja     c001cabc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001ca7b:	99                   	cdq    
c001ca7c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca82:	01 c8                	add    eax,ecx
c001ca84:	11 da                	adc    edx,ebx
c001ca86:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca8c:	19 d7                	sbb    edi,edx
c001ca8e:	72 33                	jb     c001cac3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001ca90:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001ca96:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001ca9c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001caa0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001caa4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001caaa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cab0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cab4:	5b                   	pop    ebx
c001cab5:	5e                   	pop    esi
c001cab6:	5f                   	pop    edi
c001cab7:	e9 68 09 00 00       	jmp    c001d424 <VCache::write(unsigned long long, int, void*)>
c001cabc:	b8 05 00 00 00       	mov    eax,0x5
c001cac1:	eb 05                	jmp    c001cac8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001cac3:	b8 07 00 00 00       	mov    eax,0x7
c001cac8:	5b                   	pop    ebx
c001cac9:	5e                   	pop    esi
c001caca:	5f                   	pop    edi
c001cacb:	c3                   	ret    

c001cacc <Mouse::Mouse(char const*)>:
c001cacc:	83 ec 0c             	sub    esp,0xc
c001cacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad3:	83 ec 08             	sub    esp,0x8
c001cad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cada:	50                   	push   eax
c001cadb:	e8 84 ec ff ff       	call   c001b764 <Device::Device(char const*)>
c001cae0:	83 c4 10             	add    esp,0x10
c001cae3:	ba 6c 29 03 c0       	mov    edx,0xc003296c
c001cae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caec:	89 10                	mov    DWORD PTR [eax],edx
c001caee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001cafc:	90                   	nop
c001cafd:	83 c4 0c             	add    esp,0xc
c001cb00:	c3                   	ret    
c001cb01:	90                   	nop
c001cb02:	66 90                	xchg   ax,ax

c001cb04 <Mouse::~Mouse()>:
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	ba 6c 29 03 c0       	mov    edx,0xc003296c
c001cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb10:	89 10                	mov    DWORD PTR [eax],edx
c001cb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	50                   	push   eax
c001cb1a:	e8 e5 e9 ff ff       	call   c001b504 <Device::~Device()>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	90                   	nop
c001cb23:	83 c4 0c             	add    esp,0xc
c001cb26:	c3                   	ret    
c001cb27:	90                   	nop

c001cb28 <Mouse::~Mouse()>:
c001cb28:	83 ec 0c             	sub    esp,0xc
c001cb2b:	83 ec 0c             	sub    esp,0xc
c001cb2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb32:	e8 cd ff ff ff       	call   c001cb04 <Mouse::~Mouse()>
c001cb37:	83 c4 10             	add    esp,0x10
c001cb3a:	83 ec 08             	sub    esp,0x8
c001cb3d:	68 58 01 00 00       	push   0x158
c001cb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb46:	e8 cd c7 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001cb4b:	83 c4 10             	add    esp,0x10
c001cb4e:	83 c4 0c             	add    esp,0xc
c001cb51:	c3                   	ret    

c001cb52 <NIC::getMAC()>:
c001cb52:	31 c0                	xor    eax,eax
c001cb54:	31 d2                	xor    edx,edx
c001cb56:	c3                   	ret    
c001cb57:	90                   	nop

c001cb58 <NIC::write(int, unsigned char*, int*)>:
c001cb58:	b8 01 00 00 00       	mov    eax,0x1
c001cb5d:	c3                   	ret    

c001cb5e <NIC::NIC(char const*)>:
c001cb5e:	83 ec 0c             	sub    esp,0xc
c001cb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb65:	83 ec 08             	sub    esp,0x8
c001cb68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb6c:	50                   	push   eax
c001cb6d:	e8 f2 eb ff ff       	call   c001b764 <Device::Device(char const*)>
c001cb72:	83 c4 10             	add    esp,0x10
c001cb75:	ba 98 29 03 c0       	mov    edx,0xc0032998
c001cb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb7e:	89 10                	mov    DWORD PTR [eax],edx
c001cb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb84:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001cb8e:	90                   	nop
c001cb8f:	83 c4 0c             	add    esp,0xc
c001cb92:	c3                   	ret    
c001cb93:	90                   	nop

c001cb94 <NIC::~NIC()>:
c001cb94:	83 ec 0c             	sub    esp,0xc
c001cb97:	ba 98 29 03 c0       	mov    edx,0xc0032998
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	89 10                	mov    DWORD PTR [eax],edx
c001cba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	50                   	push   eax
c001cbaa:	e8 55 e9 ff ff       	call   c001b504 <Device::~Device()>
c001cbaf:	83 c4 10             	add    esp,0x10
c001cbb2:	90                   	nop
c001cbb3:	83 c4 0c             	add    esp,0xc
c001cbb6:	c3                   	ret    
c001cbb7:	90                   	nop

c001cbb8 <NIC::~NIC()>:
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	83 ec 0c             	sub    esp,0xc
c001cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc2:	e8 cd ff ff ff       	call   c001cb94 <NIC::~NIC()>
c001cbc7:	83 c4 10             	add    esp,0x10
c001cbca:	83 ec 08             	sub    esp,0x8
c001cbcd:	68 58 01 00 00       	push   0x158
c001cbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd6:	e8 3d c7 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001cbdb:	83 c4 10             	add    esp,0x10
c001cbde:	83 c4 0c             	add    esp,0xc
c001cbe1:	c3                   	ret    

c001cbe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cbe2:	55                   	push   ebp
c001cbe3:	57                   	push   edi
c001cbe4:	56                   	push   esi
c001cbe5:	53                   	push   ebx
c001cbe6:	81 ec 28 01 00 00    	sub    esp,0x128
c001cbec:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cbf3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cbfa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001cc01:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001cc08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc0c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cc10:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc17:	e8 44 ec ff ff       	call   c001b860 <Device::getName()>
c001cc1c:	5a                   	pop    edx
c001cc1d:	59                   	pop    ecx
c001cc1e:	50                   	push   eax
c001cc1f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cc23:	55                   	push   ebp
c001cc24:	e8 17 3a fe ff       	call   c0000640 <strcpy>
c001cc29:	5b                   	pop    ebx
c001cc2a:	58                   	pop    eax
c001cc2b:	68 c4 29 03 c0       	push   0xc00329c4
c001cc30:	55                   	push   ebp
c001cc31:	e8 0a 3c fe ff       	call   c0000840 <strcat>
c001cc36:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cc3d:	e8 75 99 ff ff       	call   c00165b7 <malloc>
c001cc42:	83 c4 0c             	add    esp,0xc
c001cc45:	89 c3                	mov    ebx,eax
c001cc47:	57                   	push   edi
c001cc48:	56                   	push   esi
c001cc49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc51:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cc58:	55                   	push   ebp
c001cc59:	50                   	push   eax
c001cc5a:	e8 59 fb ff ff       	call   c001c7b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc5f:	83 c4 14             	add    esp,0x14
c001cc62:	53                   	push   ebx
c001cc63:	e8 10 fc ff ff       	call   c001c878 <LogicalDisk::assignDriveLetter()>
c001cc68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc6b:	e8 c2 fc ff ff       	call   c001c932 <LogicalDisk::mount()>
c001cc70:	58                   	pop    eax
c001cc71:	5a                   	pop    edx
c001cc72:	53                   	push   ebx
c001cc73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc7a:	e8 83 e9 ff ff       	call   c001b602 <Device::addChild(Device*)>
c001cc7f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cc85:	5b                   	pop    ebx
c001cc86:	5e                   	pop    esi
c001cc87:	5f                   	pop    edi
c001cc88:	5d                   	pop    ebp
c001cc89:	c3                   	ret    

c001cc8a <createPartitionsForDisk(PhysicalDisk*)>:
c001cc8a:	55                   	push   ebp
c001cc8b:	57                   	push   edi
c001cc8c:	56                   	push   esi
c001cc8d:	53                   	push   ebx
c001cc8e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cc94:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001cc9b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cca1:	3d 00 02 00 00       	cmp    eax,0x200
c001cca6:	74 27                	je     c001cccf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001cca8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001ccae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001ccb4:	83 ec 10             	sub    esp,0x10
c001ccb7:	0f a4 f7 0a          	shld   edi,esi,0xa
c001ccbb:	99                   	cdq    
c001ccbc:	c1 e6 0a             	shl    esi,0xa
c001ccbf:	52                   	push   edx
c001ccc0:	89 fd                	mov    ebp,edi
c001ccc2:	50                   	push   eax
c001ccc3:	55                   	push   ebp
c001ccc4:	56                   	push   esi
c001ccc5:	e8 06 20 01 00       	call   c002ecd0 <__udivdi3>
c001ccca:	e9 b9 00 00 00       	jmp    c001cd88 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cccf:	83 ec 0c             	sub    esp,0xc
c001ccd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccd4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001ccd8:	56                   	push   esi
c001ccd9:	6a 01                	push   0x1
c001ccdb:	6a 00                	push   0x0
c001ccdd:	6a 00                	push   0x0
c001ccdf:	53                   	push   ebx
c001cce0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cce3:	83 c4 20             	add    esp,0x20
c001cce6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001ccee:	75 0a                	jne    c001ccfa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001ccf0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001ccf8:	74 2c                	je     c001cd26 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001ccfa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd00:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd0c:	83 ec 10             	sub    esp,0x10
c001cd0f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd13:	89 f7                	mov    edi,esi
c001cd15:	c1 e0 0a             	shl    eax,0xa
c001cd18:	c1 ff 1f             	sar    edi,0x1f
c001cd1b:	57                   	push   edi
c001cd1c:	56                   	push   esi
c001cd1d:	52                   	push   edx
c001cd1e:	50                   	push   eax
c001cd1f:	e8 ac 1f 01 00       	call   c002ecd0 <__udivdi3>
c001cd24:	eb 62                	jmp    c001cd88 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cd26:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cd2d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cd34:	89 cf                	mov    edi,ecx
c001cd36:	83 e2 7f             	and    edx,0x7f
c001cd39:	83 e7 7f             	and    edi,0x7f
c001cd3c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cd43:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cd46:	83 e0 7f             	and    eax,0x7f
c001cd49:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cd4c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cd53:	83 e0 7f             	and    eax,0x7f
c001cd56:	01 d0                	add    eax,edx
c001cd58:	89 c5                	mov    ebp,eax
c001cd5a:	84 c0                	test   al,al
c001cd5c:	74 41                	je     c001cd9f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cd5e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd64:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd6a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd70:	83 ec 10             	sub    esp,0x10
c001cd73:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd77:	89 f7                	mov    edi,esi
c001cd79:	c1 e0 0a             	shl    eax,0xa
c001cd7c:	c1 ff 1f             	sar    edi,0x1f
c001cd7f:	57                   	push   edi
c001cd80:	56                   	push   esi
c001cd81:	52                   	push   edx
c001cd82:	50                   	push   eax
c001cd83:	e8 48 1f 01 00       	call   c002ecd0 <__udivdi3>
c001cd88:	83 c4 14             	add    esp,0x14
c001cd8b:	52                   	push   edx
c001cd8c:	50                   	push   eax
c001cd8d:	6a 00                	push   0x0
c001cd8f:	6a 00                	push   0x0
c001cd91:	53                   	push   ebx
c001cd92:	e8 4b fe ff ff       	call   c001cbe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd97:	83 c4 20             	add    esp,0x20
c001cd9a:	e9 73 01 00 00       	jmp    c001cf12 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cd9f:	89 f0                	mov    eax,esi
c001cda1:	31 c9                	xor    ecx,ecx
c001cda3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cdaa:	75 02                	jne    c001cdae <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cdac:	89 cd                	mov    ebp,ecx
c001cdae:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cdb5:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001cdbc:	c1 e2 08             	shl    edx,0x8
c001cdbf:	c1 e6 10             	shl    esi,0x10
c001cdc2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cdca:	09 f2                	or     edx,esi
c001cdcc:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cdd4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001cddb:	83 c0 10             	add    eax,0x10
c001cdde:	09 f2                	or     edx,esi
c001cde0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cde7:	c1 e6 18             	shl    esi,0x18
c001cdea:	09 f2                	or     edx,esi
c001cdec:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cdf3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cdf7:	c1 e6 10             	shl    esi,0x10
c001cdfa:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ce01:	c1 e2 08             	shl    edx,0x8
c001ce04:	09 f2                	or     edx,esi
c001ce06:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ce0d:	09 f2                	or     edx,esi
c001ce0f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ce16:	c1 e6 18             	shl    esi,0x18
c001ce19:	09 f2                	or     edx,esi
c001ce1b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ce1f:	41                   	inc    ecx
c001ce20:	83 f9 04             	cmp    ecx,0x4
c001ce23:	0f 85 7a ff ff ff    	jne    c001cda3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ce29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2d:	83 f0 01             	xor    eax,0x1
c001ce30:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ce34:	75 4f                	jne    c001ce85 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce3a:	83 f0 01             	xor    eax,0x1
c001ce3d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ce41:	75 42                	jne    c001ce85 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce43:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce4b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ce59:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ce5f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ce65:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ce69:	89 f7                	mov    edi,esi
c001ce6b:	c1 e0 0a             	shl    eax,0xa
c001ce6e:	c1 ff 1f             	sar    edi,0x1f
c001ce71:	57                   	push   edi
c001ce72:	56                   	push   esi
c001ce73:	52                   	push   edx
c001ce74:	50                   	push   eax
c001ce75:	e8 56 1e 01 00       	call   c002ecd0 <__udivdi3>
c001ce7a:	83 c4 10             	add    esp,0x10
c001ce7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce85:	89 e8                	mov    eax,ebp
c001ce87:	0f b6 e8             	movzx  ebp,al
c001ce8a:	85 ed                	test   ebp,ebp
c001ce8c:	74 50                	je     c001cede <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001ce8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce92:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ce96:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce9a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cea2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cea6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ceaa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001ceae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ceb2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ceb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ceba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cebe:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cec2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cec6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001ceca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cece:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001ced2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001ced6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001ceda:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cede:	31 ed                	xor    ebp,ebp
c001cee0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cee4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cee8:	89 f8                	mov    eax,edi
c001ceea:	09 f0                	or     eax,esi
c001ceec:	74 1e                	je     c001cf0c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001ceee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cef2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cef6:	89 d1                	mov    ecx,edx
c001cef8:	09 c1                	or     ecx,eax
c001cefa:	74 10                	je     c001cf0c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cefc:	83 ec 0c             	sub    esp,0xc
c001ceff:	57                   	push   edi
c001cf00:	56                   	push   esi
c001cf01:	52                   	push   edx
c001cf02:	50                   	push   eax
c001cf03:	53                   	push   ebx
c001cf04:	e8 d9 fc ff ff       	call   c001cbe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cf09:	83 c4 20             	add    esp,0x20
c001cf0c:	45                   	inc    ebp
c001cf0d:	83 fd 04             	cmp    ebp,0x4
c001cf10:	75 ce                	jne    c001cee0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cf12:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cf18:	5b                   	pop    ebx
c001cf19:	5e                   	pop    esi
c001cf1a:	5f                   	pop    edi
c001cf1b:	5d                   	pop    ebp
c001cf1c:	c3                   	ret    
c001cf1d:	66 90                	xchg   ax,ax
c001cf1f:	90                   	nop

c001cf20 <Serial::Serial(char const*)>:
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf27:	83 ec 08             	sub    esp,0x8
c001cf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf2e:	50                   	push   eax
c001cf2f:	e8 30 e8 ff ff       	call   c001b764 <Device::Device(char const*)>
c001cf34:	83 c4 10             	add    esp,0x10
c001cf37:	ba d8 29 03 c0       	mov    edx,0xc00329d8
c001cf3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf40:	89 10                	mov    DWORD PTR [eax],edx
c001cf42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf46:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cf50:	90                   	nop
c001cf51:	83 c4 0c             	add    esp,0xc
c001cf54:	c3                   	ret    
c001cf55:	90                   	nop
c001cf56:	66 90                	xchg   ax,ax

c001cf58 <Serial::~Serial()>:
c001cf58:	83 ec 0c             	sub    esp,0xc
c001cf5b:	ba d8 29 03 c0       	mov    edx,0xc00329d8
c001cf60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf64:	89 10                	mov    DWORD PTR [eax],edx
c001cf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6a:	83 ec 0c             	sub    esp,0xc
c001cf6d:	50                   	push   eax
c001cf6e:	e8 91 e5 ff ff       	call   c001b504 <Device::~Device()>
c001cf73:	83 c4 10             	add    esp,0x10
c001cf76:	90                   	nop
c001cf77:	83 c4 0c             	add    esp,0xc
c001cf7a:	c3                   	ret    
c001cf7b:	90                   	nop

c001cf7c <Serial::~Serial()>:
c001cf7c:	83 ec 0c             	sub    esp,0xc
c001cf7f:	83 ec 0c             	sub    esp,0xc
c001cf82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf86:	e8 cd ff ff ff       	call   c001cf58 <Serial::~Serial()>
c001cf8b:	83 c4 10             	add    esp,0x10
c001cf8e:	83 ec 08             	sub    esp,0x8
c001cf91:	68 58 01 00 00       	push   0x158
c001cf96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf9a:	e8 79 c3 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001cf9f:	83 c4 10             	add    esp,0x10
c001cfa2:	83 c4 0c             	add    esp,0xc
c001cfa5:	c3                   	ret    
c001cfa6:	66 90                	xchg   ax,ax

c001cfa8 <Timer::Timer(char const*)>:
c001cfa8:	83 ec 0c             	sub    esp,0xc
c001cfab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfaf:	83 ec 08             	sub    esp,0x8
c001cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfb6:	50                   	push   eax
c001cfb7:	e8 a8 e7 ff ff       	call   c001b764 <Device::Device(char const*)>
c001cfbc:	83 c4 10             	add    esp,0x10
c001cfbf:	ba 1c 2a 03 c0       	mov    edx,0xc0032a1c
c001cfc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc8:	89 10                	mov    DWORD PTR [eax],edx
c001cfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfce:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cfd8:	90                   	nop
c001cfd9:	83 c4 0c             	add    esp,0xc
c001cfdc:	c3                   	ret    
c001cfdd:	90                   	nop
c001cfde:	66 90                	xchg   ax,ax

c001cfe0 <Timer::~Timer()>:
c001cfe0:	83 ec 0c             	sub    esp,0xc
c001cfe3:	ba 1c 2a 03 c0       	mov    edx,0xc0032a1c
c001cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfec:	89 10                	mov    DWORD PTR [eax],edx
c001cfee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff2:	83 ec 0c             	sub    esp,0xc
c001cff5:	50                   	push   eax
c001cff6:	e8 09 e5 ff ff       	call   c001b504 <Device::~Device()>
c001cffb:	83 c4 10             	add    esp,0x10
c001cffe:	90                   	nop
c001cfff:	83 c4 0c             	add    esp,0xc
c001d002:	c3                   	ret    
c001d003:	90                   	nop

c001d004 <Timer::~Timer()>:
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	83 ec 0c             	sub    esp,0xc
c001d00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d00e:	e8 cd ff ff ff       	call   c001cfe0 <Timer::~Timer()>
c001d013:	83 c4 10             	add    esp,0x10
c001d016:	83 ec 08             	sub    esp,0x8
c001d019:	68 5c 01 00 00       	push   0x15c
c001d01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d022:	e8 f1 c2 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001d027:	83 c4 10             	add    esp,0x10
c001d02a:	83 c4 0c             	add    esp,0xc
c001d02d:	c3                   	ret    

c001d02e <Timer::read()>:
c001d02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d032:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d038:	c3                   	ret    

c001d039 <setupTimer(int)>:
c001d039:	53                   	push   ebx
c001d03a:	83 ec 14             	sub    esp,0x14
c001d03d:	68 5c 01 00 00       	push   0x15c
c001d042:	e8 70 95 ff ff       	call   c00165b7 <malloc>
c001d047:	89 04 24             	mov    DWORD PTR [esp],eax
c001d04a:	89 c3                	mov    ebx,eax
c001d04c:	e8 07 15 01 00       	call   c002e558 <PIT::PIT()>
c001d051:	58                   	pop    eax
c001d052:	5a                   	pop    edx
c001d053:	53                   	push   ebx
c001d054:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001d05a:	e8 a3 e5 ff ff       	call   c001b602 <Device::addChild(Device*)>
c001d05f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d061:	6a 00                	push   0x0
c001d063:	6a 00                	push   0x0
c001d065:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d069:	53                   	push   ebx
c001d06a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d06d:	89 d8                	mov    eax,ebx
c001d06f:	83 c4 28             	add    esp,0x28
c001d072:	5b                   	pop    ebx
c001d073:	c3                   	ret    

c001d074 <timerHandler(unsigned int)>:
c001d074:	57                   	push   edi
c001d075:	56                   	push   esi
c001d076:	53                   	push   ebx
c001d077:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d07b:	01 3d ec 03 04 c0    	add    DWORD PTR ds:0xc00403ec,edi
c001d081:	80 3d c1 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9c1,0x0
c001d088:	0f 84 46 01 00 00    	je     c001d1d4 <timerHandler(unsigned int)+0x160>
c001d08e:	fa                   	cli    
c001d08f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c001d095:	83 ec 0c             	sub    esp,0xc
c001d098:	ff 05 cc 11 04 c0    	inc    DWORD PTR ds:0xc00411cc
c001d09e:	68 e0 11 04 c0       	push   0xc00411e0
c001d0a3:	e8 f8 21 01 00       	call   c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d0a8:	83 c4 10             	add    esp,0x10
c001d0ab:	84 c0                	test   al,al
c001d0ad:	0f 85 a1 00 00 00    	jne    c001d154 <timerHandler(unsigned int)+0xe0>
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	68 e0 11 04 c0       	push   0xc00411e0
c001d0bb:	e8 fc 21 01 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	89 c6                	mov    esi,eax
c001d0c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	68 e0 11 04 c0       	push   0xc00411e0
c001d0d0:	e8 e7 21 01 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0d5:	c7 04 24 e0 11 04 c0 	mov    DWORD PTR [esp],0xc00411e0
c001d0dc:	89 c3                	mov    ebx,eax
c001d0de:	e8 e1 21 01 00       	call   c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c001d0ef:	77 23                	ja     c001d114 <timerHandler(unsigned int)+0xa0>
c001d0f1:	83 ec 0c             	sub    esp,0xc
c001d0f4:	53                   	push   ebx
c001d0f5:	e8 8a 89 00 00       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c001d0fa:	83 c4 10             	add    esp,0x10
c001d0fd:	39 de                	cmp    esi,ebx
c001d0ff:	75 27                	jne    c001d128 <timerHandler(unsigned int)+0xb4>
c001d101:	83 ec 0c             	sub    esp,0xc
c001d104:	68 e0 11 04 c0       	push   0xc00411e0
c001d109:	e8 ae 21 01 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d10e:	89 c6                	mov    esi,eax
c001d110:	eb 12                	jmp    c001d124 <timerHandler(unsigned int)+0xb0>
c001d112:	66 90                	xchg   ax,ax
c001d114:	50                   	push   eax
c001d115:	50                   	push   eax
c001d116:	53                   	push   ebx
c001d117:	68 e0 11 04 c0       	push   0xc00411e0
c001d11c:	e8 5f 22 01 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d121:	8d 76 00             	lea    esi,[esi+0x0]
c001d124:	83 c4 10             	add    esp,0x10
c001d127:	90                   	nop
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	68 e0 11 04 c0       	push   0xc00411e0
c001d130:	e8 6b 21 01 00       	call   c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d135:	83 c4 10             	add    esp,0x10
c001d138:	84 c0                	test   al,al
c001d13a:	75 18                	jne    c001d154 <timerHandler(unsigned int)+0xe0>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	68 e0 11 04 c0       	push   0xc00411e0
c001d144:	e8 73 21 01 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d149:	83 c4 10             	add    esp,0x10
c001d14c:	39 f0                	cmp    eax,esi
c001d14e:	0f 85 74 ff ff ff    	jne    c001d0c8 <timerHandler(unsigned int)+0x54>
c001d154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d159:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d15d:	74 3d                	je     c001d19c <timerHandler(unsigned int)+0x128>
c001d15f:	80 3d c0 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9c0,0x0
c001d166:	74 34                	je     c001d19c <timerHandler(unsigned int)+0x128>
c001d168:	fa                   	cli    
c001d169:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c001d16f:	8b 15 ec 03 04 c0    	mov    edx,DWORD PTR ds:0xc00403ec
c001d175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d17a:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d17d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d182:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d185:	77 05                	ja     c001d18c <timerHandler(unsigned int)+0x118>
c001d187:	e8 00 86 00 00       	call   c002578c <schedule()>
c001d18c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001d191:	48                   	dec    eax
c001d192:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001d197:	75 03                	jne    c001d19c <timerHandler(unsigned int)+0x128>
c001d199:	fb                   	sti    
c001d19a:	66 90                	xchg   ax,ax
c001d19c:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001d1a1:	48                   	dec    eax
c001d1a2:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001d1a7:	75 1b                	jne    c001d1c4 <timerHandler(unsigned int)+0x150>
c001d1a9:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c001d1b0:	74 12                	je     c001d1c4 <timerHandler(unsigned int)+0x150>
c001d1b2:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c001d1bc:	e8 cb 85 00 00       	call   c002578c <schedule()>
c001d1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1c4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001d1c9:	48                   	dec    eax
c001d1ca:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001d1cf:	75 03                	jne    c001d1d4 <timerHandler(unsigned int)+0x160>
c001d1d1:	fb                   	sti    
c001d1d2:	66 90                	xchg   ax,ax
c001d1d4:	5b                   	pop    ebx
c001d1d5:	5e                   	pop    esi
c001d1d6:	5f                   	pop    edi
c001d1d7:	c3                   	ret    

c001d1d8 <VCache::VCache(PhysicalDisk*)>:
c001d1d8:	53                   	push   ebx
c001d1d9:	83 ec 18             	sub    esp,0x18
c001d1dc:	ba 4c 2a 03 c0       	mov    edx,0xc0032a4c
c001d1e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1e5:	89 10                	mov    DWORD PTR [eax],edx
c001d1e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1eb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d1fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d201:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d208:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d20f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d213:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d21a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d225:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d22c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d230:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d238:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d23f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d24a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d24e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d252:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d25a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d25e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d262:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d269:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d271:	83 ec 0c             	sub    esp,0xc
c001d274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d278:	e8 3a 93 ff ff       	call   c00165b7 <malloc>
c001d27d:	83 c4 10             	add    esp,0x10
c001d280:	89 c3                	mov    ebx,eax
c001d282:	83 ec 0c             	sub    esp,0xc
c001d285:	53                   	push   ebx
c001d286:	e8 d9 34 00 00       	call   c0020764 <Mutex::Mutex()>
c001d28b:	83 c4 10             	add    esp,0x10
c001d28e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d292:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d299:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d29d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d2ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2af:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2c0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d2c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d2d0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d2d3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d2d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d2de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d2e8:	05 00 02 00 00       	add    eax,0x200
c001d2ed:	c1 e0 03             	shl    eax,0x3
c001d2f0:	83 ec 0c             	sub    esp,0xc
c001d2f3:	50                   	push   eax
c001d2f4:	e8 be 92 ff ff       	call   c00165b7 <malloc>
c001d2f9:	83 c4 10             	add    esp,0x10
c001d2fc:	89 c2                	mov    edx,eax
c001d2fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d302:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d309:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d310:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d314:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d318:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d31c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d322:	89 d0                	mov    eax,edx
c001d324:	c1 e0 02             	shl    eax,0x2
c001d327:	01 d0                	add    eax,edx
c001d329:	c1 e0 04             	shl    eax,0x4
c001d32c:	83 ec 0c             	sub    esp,0xc
c001d32f:	50                   	push   eax
c001d330:	e8 82 92 ff ff       	call   c00165b7 <malloc>
c001d335:	83 c4 10             	add    esp,0x10
c001d338:	89 c2                	mov    edx,eax
c001d33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d341:	90                   	nop
c001d342:	83 c4 18             	add    esp,0x18
c001d345:	5b                   	pop    ebx
c001d346:	c3                   	ret    
c001d347:	90                   	nop

c001d348 <VCache::invalidateReadBuffer()>:
c001d348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d34c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d352:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d356:	c3                   	ret    
c001d357:	90                   	nop

c001d358 <VCache::writeWriteBuffer()>:
c001d358:	53                   	push   ebx
c001d359:	83 ec 08             	sub    esp,0x8
c001d35c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d360:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d364:	74 1e                	je     c001d384 <VCache::writeWriteBuffer()+0x2c>
c001d366:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d369:	83 ec 0c             	sub    esp,0xc
c001d36c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d36e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d371:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d374:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d377:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d37a:	50                   	push   eax
c001d37b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d37e:	83 c4 20             	add    esp,0x20
c001d381:	8d 76 00             	lea    esi,[esi+0x0]
c001d384:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d38b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d392:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d396:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d39d:	83 c4 08             	add    esp,0x8
c001d3a0:	5b                   	pop    ebx
c001d3a1:	c3                   	ret    
c001d3a2:	66 90                	xchg   ax,ax

c001d3a4 <VCache::~VCache()>:
c001d3a4:	83 ec 0c             	sub    esp,0xc
c001d3a7:	ba 4c 2a 03 c0       	mov    edx,0xc0032a4c
c001d3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b0:	89 10                	mov    DWORD PTR [eax],edx
c001d3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3b6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d3b9:	0f b6 c0             	movzx  eax,al
c001d3bc:	85 c0                	test   eax,eax
c001d3be:	74 10                	je     c001d3d0 <VCache::~VCache()+0x2c>
c001d3c0:	83 ec 0c             	sub    esp,0xc
c001d3c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c7:	e8 8c ff ff ff       	call   c001d358 <VCache::writeWriteBuffer()>
c001d3cc:	83 c4 10             	add    esp,0x10
c001d3cf:	90                   	nop
c001d3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d3d7:	83 ec 0c             	sub    esp,0xc
c001d3da:	50                   	push   eax
c001d3db:	e8 e7 91 ff ff       	call   c00165c7 <free>
c001d3e0:	83 c4 10             	add    esp,0x10
c001d3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d3ea:	83 ec 0c             	sub    esp,0xc
c001d3ed:	50                   	push   eax
c001d3ee:	e8 d4 91 ff ff       	call   c00165c7 <free>
c001d3f3:	83 c4 10             	add    esp,0x10
c001d3f6:	90                   	nop
c001d3f7:	83 c4 0c             	add    esp,0xc
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop

c001d3fc <VCache::~VCache()>:
c001d3fc:	83 ec 0c             	sub    esp,0xc
c001d3ff:	83 ec 0c             	sub    esp,0xc
c001d402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d406:	e8 99 ff ff ff       	call   c001d3a4 <VCache::~VCache()>
c001d40b:	83 c4 10             	add    esp,0x10
c001d40e:	83 ec 08             	sub    esp,0x8
c001d411:	6a 44                	push   0x44
c001d413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d417:	e8 fc be ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001d41c:	83 c4 10             	add    esp,0x10
c001d41f:	83 c4 0c             	add    esp,0xc
c001d422:	c3                   	ret    
c001d423:	90                   	nop

c001d424 <VCache::write(unsigned long long, int, void*)>:
c001d424:	55                   	push   ebp
c001d425:	57                   	push   edi
c001d426:	56                   	push   esi
c001d427:	53                   	push   ebx
c001d428:	83 ec 1c             	sub    esp,0x1c
c001d42b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d42f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d433:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d437:	e8 b8 80 00 00       	call   c00254f4 <KeDisablePreemption()>
c001d43c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d440:	74 0e                	je     c001d450 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d442:	83 ec 0c             	sub    esp,0xc
c001d445:	53                   	push   ebx
c001d446:	e8 fd fe ff ff       	call   c001d348 <VCache::invalidateReadBuffer()>
c001d44b:	83 c4 10             	add    esp,0x10
c001d44e:	66 90                	xchg   ax,ax
c001d450:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d454:	74 5e                	je     c001d4b4 <VCache::write(unsigned long long, int, void*)+0x90>
c001d456:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d459:	89 e8                	mov    eax,ebp
c001d45b:	99                   	cdq    
c001d45c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d45f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d462:	89 c1                	mov    ecx,eax
c001d464:	89 d0                	mov    eax,edx
c001d466:	31 f1                	xor    ecx,esi
c001d468:	31 f8                	xor    eax,edi
c001d46a:	09 c1                	or     ecx,eax
c001d46c:	75 3a                	jne    c001d4a8 <VCache::write(unsigned long long, int, void*)+0x84>
c001d46e:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d473:	75 33                	jne    c001d4a8 <VCache::write(unsigned long long, int, void*)+0x84>
c001d475:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d478:	89 ef                	mov    edi,ebp
c001d47a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d480:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d484:	0f af f9             	imul   edi,ecx
c001d487:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d48a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d48c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d48f:	40                   	inc    eax
c001d490:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d493:	83 f8 50             	cmp    eax,0x50
c001d496:	75 70                	jne    c001d508 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	53                   	push   ebx
c001d49c:	e8 b7 fe ff ff       	call   c001d358 <VCache::writeWriteBuffer()>
c001d4a1:	83 c4 10             	add    esp,0x10
c001d4a4:	eb 62                	jmp    c001d508 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d4a6:	66 90                	xchg   ax,ax
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	53                   	push   ebx
c001d4ac:	e8 a7 fe ff ff       	call   c001d358 <VCache::writeWriteBuffer()>
c001d4b1:	83 c4 10             	add    esp,0x10
c001d4b4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4b7:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d4bc:	7f 22                	jg     c001d4e0 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d4be:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d4c1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d4c4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4c8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d4cc:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d4cf:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d4d2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d4d8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d4dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4de:	eb 28                	jmp    c001d508 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d4e0:	83 ec 0c             	sub    esp,0xc
c001d4e3:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4ed:	57                   	push   edi
c001d4ee:	56                   	push   esi
c001d4ef:	50                   	push   eax
c001d4f0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d4f3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4f7:	83 c4 20             	add    esp,0x20
c001d4fa:	e8 1d 80 00 00       	call   c002551c <KeRestorePreemption()>
c001d4ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d503:	eb 0b                	jmp    c001d510 <VCache::write(unsigned long long, int, void*)+0xec>
c001d505:	8d 76 00             	lea    esi,[esi+0x0]
c001d508:	e8 0f 80 00 00       	call   c002551c <KeRestorePreemption()>
c001d50d:	31 c0                	xor    eax,eax
c001d50f:	90                   	nop
c001d510:	83 c4 1c             	add    esp,0x1c
c001d513:	5b                   	pop    ebx
c001d514:	5e                   	pop    esi
c001d515:	5f                   	pop    edi
c001d516:	5d                   	pop    ebp
c001d517:	c3                   	ret    

c001d518 <VCache::read(unsigned long long, int, void*)>:
c001d518:	55                   	push   ebp
c001d519:	57                   	push   edi
c001d51a:	56                   	push   esi
c001d51b:	53                   	push   ebx
c001d51c:	83 ec 1c             	sub    esp,0x1c
c001d51f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d523:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d527:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d52b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d52f:	e8 c0 7f 00 00       	call   c00254f4 <KeDisablePreemption()>
c001d534:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d538:	74 0e                	je     c001d548 <VCache::read(unsigned long long, int, void*)+0x30>
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	53                   	push   ebx
c001d53e:	e8 15 fe ff ff       	call   c001d358 <VCache::writeWriteBuffer()>
c001d543:	83 c4 10             	add    esp,0x10
c001d546:	66 90                	xchg   ax,ax
c001d548:	83 fd 01             	cmp    ebp,0x1
c001d54b:	0f 85 97 00 00 00    	jne    c001d5e8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d551:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d554:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d558:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d55f:	0f 85 83 00 00 00    	jne    c001d5e8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d565:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d568:	89 e9                	mov    ecx,ebp
c001d56a:	f7 d9                	neg    ecx
c001d56c:	89 c8                	mov    eax,ecx
c001d56e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d572:	c1 f8 1f             	sar    eax,0x1f
c001d575:	21 f1                	and    ecx,esi
c001d577:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d57b:	89 c8                	mov    eax,ecx
c001d57d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d581:	21 f9                	and    ecx,edi
c001d583:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d587:	89 ca                	mov    edx,ecx
c001d589:	74 31                	je     c001d5bc <VCache::read(unsigned long long, int, void*)+0xa4>
c001d58b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d58e:	75 2c                	jne    c001d5bc <VCache::read(unsigned long long, int, void*)+0xa4>
c001d590:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d593:	75 27                	jne    c001d5bc <VCache::read(unsigned long long, int, void*)+0xa4>
c001d595:	8d 76 00             	lea    esi,[esi+0x0]
c001d598:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d59b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d59f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d5a5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5a8:	48                   	dec    eax
c001d5a9:	21 c6                	and    esi,eax
c001d5ab:	0f af f1             	imul   esi,ecx
c001d5ae:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d5b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5b3:	e8 64 7f 00 00       	call   c002551c <KeRestorePreemption()>
c001d5b8:	31 c0                	xor    eax,eax
c001d5ba:	eb 58                	jmp    c001d614 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d5c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5c7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d5ca:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d5cd:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d5cf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d5d2:	55                   	push   ebp
c001d5d3:	52                   	push   edx
c001d5d4:	50                   	push   eax
c001d5d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5d9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d5dc:	83 c4 20             	add    esp,0x20
c001d5df:	85 c0                	test   eax,eax
c001d5e1:	75 31                	jne    c001d614 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d5e3:	eb b3                	jmp    c001d598 <VCache::read(unsigned long long, int, void*)+0x80>
c001d5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d5e8:	83 ec 0c             	sub    esp,0xc
c001d5eb:	53                   	push   ebx
c001d5ec:	e8 57 fd ff ff       	call   c001d348 <VCache::invalidateReadBuffer()>
c001d5f1:	5a                   	pop    edx
c001d5f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d5f5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d5fb:	55                   	push   ebp
c001d5fc:	57                   	push   edi
c001d5fd:	56                   	push   esi
c001d5fe:	50                   	push   eax
c001d5ff:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d602:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d606:	83 c4 20             	add    esp,0x20
c001d609:	e8 0e 7f 00 00       	call   c002551c <KeRestorePreemption()>
c001d60e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d612:	66 90                	xchg   ax,ax
c001d614:	83 c4 1c             	add    esp,0x1c
c001d617:	5b                   	pop    ebx
c001d618:	5e                   	pop    esi
c001d619:	5f                   	pop    edi
c001d61a:	5d                   	pop    ebp
c001d61b:	c3                   	ret    

c001d61c <Video::putrect(int, int, int, int, unsigned int)>:
c001d61c:	55                   	push   ebp
c001d61d:	57                   	push   edi
c001d61e:	56                   	push   esi
c001d61f:	53                   	push   ebx
c001d620:	83 ec 1c             	sub    esp,0x1c
c001d623:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d627:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d62b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d62f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d633:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d63b:	01 df                	add    edi,ebx
c001d63d:	39 fb                	cmp    ebx,edi
c001d63f:	7d 1f                	jge    c001d660 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d641:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d645:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d649:	7d 12                	jge    c001d65d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d64b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d64d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d651:	53                   	push   ebx
c001d652:	55                   	push   ebp
c001d653:	45                   	inc    ebp
c001d654:	56                   	push   esi
c001d655:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d658:	83 c4 10             	add    esp,0x10
c001d65b:	eb e8                	jmp    c001d645 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d65d:	43                   	inc    ebx
c001d65e:	eb dd                	jmp    c001d63d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d660:	83 c4 1c             	add    esp,0x1c
c001d663:	5b                   	pop    ebx
c001d664:	5e                   	pop    esi
c001d665:	5f                   	pop    edi
c001d666:	5d                   	pop    ebp
c001d667:	c3                   	ret    

c001d668 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d668:	55                   	push   ebp
c001d669:	57                   	push   edi
c001d66a:	31 ff                	xor    edi,edi
c001d66c:	56                   	push   esi
c001d66d:	53                   	push   ebx
c001d66e:	83 ec 1c             	sub    esp,0x1c
c001d671:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d675:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d679:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d680:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d685:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d689:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d68d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d691:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d694:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d698:	01 f9                	add    ecx,edi
c001d69a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d69e:	7d 2f                	jge    c001d6cf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d6a0:	31 f6                	xor    esi,esi
c001d6a2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6a6:	01 f2                	add    edx,esi
c001d6a8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d6ac:	7d 1a                	jge    c001d6c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d6ae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6b1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d6b4:	46                   	inc    esi
c001d6b5:	51                   	push   ecx
c001d6b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d6ba:	52                   	push   edx
c001d6bb:	55                   	push   ebp
c001d6bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d6bf:	83 c4 10             	add    esp,0x10
c001d6c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6c6:	eb da                	jmp    c001d6a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d6c8:	47                   	inc    edi
c001d6c9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d6cd:	eb c5                	jmp    c001d694 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d6cf:	83 c4 1c             	add    esp,0x1c
c001d6d2:	5b                   	pop    ebx
c001d6d3:	5e                   	pop    esi
c001d6d4:	5f                   	pop    edi
c001d6d5:	5d                   	pop    ebp
c001d6d6:	c3                   	ret    
c001d6d7:	90                   	nop

c001d6d8 <Video::blit(unsigned int*, int, int, int, int)>:
c001d6d8:	55                   	push   ebp
c001d6d9:	57                   	push   edi
c001d6da:	56                   	push   esi
c001d6db:	53                   	push   ebx
c001d6dc:	83 ec 1c             	sub    esp,0x1c
c001d6df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d6e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6e7:	85 c0                	test   eax,eax
c001d6e9:	79 02                	jns    c001d6ed <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d6eb:	31 c0                	xor    eax,eax
c001d6ed:	c1 e0 02             	shl    eax,0x2
c001d6f0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d6fc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d700:	39 d8                	cmp    eax,ebx
c001d702:	7e 49                	jle    c001d74d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d704:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d70a:	7c 41                	jl     c001d74d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d70c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d710:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d714:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d718:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d71c:	39 f9                	cmp    ecx,edi
c001d71e:	7e 22                	jle    c001d742 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d720:	83 c5 04             	add    ebp,0x4
c001d723:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d729:	7c 14                	jl     c001d73f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d72b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d72d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d730:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d734:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d738:	56                   	push   esi
c001d739:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d73c:	83 c4 10             	add    esp,0x10
c001d73f:	47                   	inc    edi
c001d740:	eb d2                	jmp    c001d714 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d746:	43                   	inc    ebx
c001d747:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d74b:	eb ab                	jmp    c001d6f8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d74d:	83 c4 1c             	add    esp,0x1c
c001d750:	5b                   	pop    ebx
c001d751:	5e                   	pop    esi
c001d752:	5f                   	pop    edi
c001d753:	5d                   	pop    ebp
c001d754:	c3                   	ret    
c001d755:	90                   	nop

c001d756 <Video::clearScreen(unsigned int)>:
c001d756:	57                   	push   edi
c001d757:	56                   	push   esi
c001d758:	53                   	push   ebx
c001d759:	31 db                	xor    ebx,ebx
c001d75b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d75f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d765:	7e 1f                	jle    c001d786 <Video::clearScreen(unsigned int)+0x30>
c001d767:	31 ff                	xor    edi,edi
c001d769:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d76f:	7e 12                	jle    c001d783 <Video::clearScreen(unsigned int)+0x2d>
c001d771:	8b 06                	mov    eax,DWORD PTR [esi]
c001d773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d777:	53                   	push   ebx
c001d778:	57                   	push   edi
c001d779:	47                   	inc    edi
c001d77a:	56                   	push   esi
c001d77b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d77e:	83 c4 10             	add    esp,0x10
c001d781:	eb e6                	jmp    c001d769 <Video::clearScreen(unsigned int)+0x13>
c001d783:	43                   	inc    ebx
c001d784:	eb d9                	jmp    c001d75f <Video::clearScreen(unsigned int)+0x9>
c001d786:	5b                   	pop    ebx
c001d787:	5e                   	pop    esi
c001d788:	5f                   	pop    edi
c001d789:	c3                   	ret    

c001d78a <Video::putpixel(int, int, unsigned int)>:
c001d78a:	c7 44 24 04 54 2a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032a54
c001d792:	e9 e7 2f 00 00       	jmp    c002077e <KePanic(char const*)>
c001d797:	90                   	nop

c001d798 <Video::readPixelApprox(int, int)>:
c001d798:	83 ec 18             	sub    esp,0x18
c001d79b:	68 75 2a 03 c0       	push   0xc0032a75
c001d7a0:	e8 d9 2f 00 00       	call   c002077e <KePanic(char const*)>
c001d7a5:	31 c0                	xor    eax,eax
c001d7a7:	83 c4 1c             	add    esp,0x1c
c001d7aa:	c3                   	ret    
c001d7ab:	90                   	nop

c001d7ac <Video::Video(char const*)>:
c001d7ac:	83 ec 0c             	sub    esp,0xc
c001d7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b3:	83 ec 08             	sub    esp,0x8
c001d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7ba:	50                   	push   eax
c001d7bb:	e8 a4 df ff ff       	call   c001b764 <Device::Device(char const*)>
c001d7c0:	83 c4 10             	add    esp,0x10
c001d7c3:	ba 18 2b 03 c0       	mov    edx,0xc0032b18
c001d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7cc:	89 10                	mov    DWORD PTR [eax],edx
c001d7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d7dc:	90                   	nop
c001d7dd:	83 c4 0c             	add    esp,0xc
c001d7e0:	c3                   	ret    
c001d7e1:	90                   	nop

c001d7e2 <Video::~Video()>:
c001d7e2:	83 ec 0c             	sub    esp,0xc
c001d7e5:	ba 18 2b 03 c0       	mov    edx,0xc0032b18
c001d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ee:	89 10                	mov    DWORD PTR [eax],edx
c001d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f4:	83 ec 0c             	sub    esp,0xc
c001d7f7:	50                   	push   eax
c001d7f8:	e8 07 dd ff ff       	call   c001b504 <Device::~Device()>
c001d7fd:	83 c4 10             	add    esp,0x10
c001d800:	90                   	nop
c001d801:	83 c4 0c             	add    esp,0xc
c001d804:	c3                   	ret    
c001d805:	90                   	nop

c001d806 <Video::~Video()>:
c001d806:	83 ec 0c             	sub    esp,0xc
c001d809:	83 ec 0c             	sub    esp,0xc
c001d80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d810:	e8 cd ff ff ff       	call   c001d7e2 <Video::~Video()>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	83 ec 08             	sub    esp,0x8
c001d81b:	68 64 01 00 00       	push   0x164
c001d820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d824:	e8 ef ba ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	83 c4 0c             	add    esp,0xc
c001d82f:	c3                   	ret    

c001d830 <Video::isMonochrome()>:
c001d830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d834:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d83a:	c3                   	ret    
c001d83b:	90                   	nop

c001d83c <Video::getWidth()>:
c001d83c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d840:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d846:	c3                   	ret    
c001d847:	90                   	nop

c001d848 <Video::getHeight()>:
c001d848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d84c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d852:	c3                   	ret    
c001d853:	90                   	nop

c001d854 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d854:	55                   	push   ebp
c001d855:	57                   	push   edi
c001d856:	56                   	push   esi
c001d857:	53                   	push   ebx
c001d858:	83 ec 2c             	sub    esp,0x2c
c001d85b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d85f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d863:	83 f8 01             	cmp    eax,0x1
c001d866:	19 c9                	sbb    ecx,ecx
c001d868:	31 db                	xor    ebx,ebx
c001d86a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d86e:	89 cd                	mov    ebp,ecx
c001d870:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d878:	f7 d5                	not    ebp
c001d87a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d880:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d884:	01 d8                	add    eax,ebx
c001d886:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d88a:	56                   	push   esi
c001d88b:	e8 b8 ff ff ff       	call   c001d848 <Video::getHeight()>
c001d890:	59                   	pop    ecx
c001d891:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d895:	7e 70                	jle    c001d907 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d897:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d89b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d89f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d8a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8aa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d8b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d8b5:	89 f8                	mov    eax,edi
c001d8b7:	83 c0 20             	add    eax,0x20
c001d8ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8be:	56                   	push   esi
c001d8bf:	e8 78 ff ff ff       	call   c001d83c <Video::getWidth()>
c001d8c4:	5a                   	pop    edx
c001d8c5:	39 c7                	cmp    edi,eax
c001d8c7:	7d 34                	jge    c001d8fd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d8c9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d8ce:	74 05                	je     c001d8d5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d8d0:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8d2:	55                   	push   ebp
c001d8d3:	eb 0d                	jmp    c001d8e2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d8d5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d8da:	74 12                	je     c001d8ee <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d8dc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d8e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d8e6:	57                   	push   edi
c001d8e7:	56                   	push   esi
c001d8e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d8eb:	83 c4 10             	add    esp,0x10
c001d8ee:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d8f2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d8f6:	47                   	inc    edi
c001d8f7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d8fb:	75 c1                	jne    c001d8be <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d8fd:	43                   	inc    ebx
c001d8fe:	83 fb 20             	cmp    ebx,0x20
c001d901:	0f 85 79 ff ff ff    	jne    c001d880 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d907:	83 c4 2c             	add    esp,0x2c
c001d90a:	5b                   	pop    ebx
c001d90b:	5e                   	pop    esi
c001d90c:	5f                   	pop    edi
c001d90d:	5d                   	pop    ebp
c001d90e:	c3                   	ret    
c001d90f:	90                   	nop

c001d910 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d910:	55                   	push   ebp
c001d911:	57                   	push   edi
c001d912:	56                   	push   esi
c001d913:	53                   	push   ebx
c001d914:	83 ec 48             	sub    esp,0x48
c001d917:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d91b:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d91f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d923:	c1 e0 08             	shl    eax,0x8
c001d926:	01 d0                	add    eax,edx
c001d928:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d92c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d930:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d934:	c1 e0 08             	shl    eax,0x8
c001d937:	01 d0                	add    eax,edx
c001d939:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d93d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d941:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d946:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d94a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d94e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d955:	50                   	push   eax
c001d956:	e8 5c 8c ff ff       	call   c00165b7 <malloc>
c001d95b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d95f:	83 c4 10             	add    esp,0x10
c001d962:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d967:	75 10                	jne    c001d979 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d969:	83 ec 0c             	sub    esp,0xc
c001d96c:	68 a0 2a 03 c0       	push   0xc0032aa0
c001d971:	e8 08 2e 00 00       	call   c002077e <KePanic(char const*)>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	51                   	push   ecx
c001d97a:	51                   	push   ecx
c001d97b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d97f:	50                   	push   eax
c001d980:	68 b0 2a 03 c0       	push   0xc0032ab0
c001d985:	e8 bb ba ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001d98a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d98d:	83 e0 20             	and    eax,0x20
c001d990:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d994:	85 c0                	test   eax,eax
c001d996:	5e                   	pop    esi
c001d997:	0f 94 c0             	sete   al
c001d99a:	5f                   	pop    edi
c001d99b:	0f b6 c0             	movzx  eax,al
c001d99e:	be 12 00 00 00       	mov    esi,0x12
c001d9a3:	50                   	push   eax
c001d9a4:	68 ba 2a 03 c0       	push   0xc0032aba
c001d9a9:	e8 97 ba ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001d9ae:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d9b2:	83 c4 10             	add    esp,0x10
c001d9b5:	89 d0                	mov    eax,edx
c001d9b7:	85 d2                	test   edx,edx
c001d9b9:	74 11                	je     c001d9cc <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d9bb:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d9bf:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d9c3:	c1 fe 03             	sar    esi,0x3
c001d9c6:	0f af f1             	imul   esi,ecx
c001d9c9:	83 c6 12             	add    esi,0x12
c001d9cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d9d1:	74 07                	je     c001d9da <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d9d3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d9d8:	75 12                	jne    c001d9ec <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d9da:	83 ec 0c             	sub    esp,0xc
c001d9dd:	68 c8 2a 03 c0       	push   0xc0032ac8
c001d9e2:	e8 5e ba ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001d9e7:	e9 a0 02 00 00       	jmp    c001dc8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d9ec:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d9f0:	83 f9 02             	cmp    ecx,0x2
c001d9f3:	74 0e                	je     c001da03 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d9f5:	83 f9 0a             	cmp    ecx,0xa
c001d9f8:	0f 84 c8 00 00 00    	je     c001dac6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d9fe:	e9 72 02 00 00       	jmp    c001dc75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001da03:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001da08:	75 0e                	jne    c001da18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001da0a:	84 c0                	test   al,al
c001da0c:	75 0a                	jne    c001da18 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001da0e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001da11:	83 e8 18             	sub    eax,0x18
c001da14:	a8 f7                	test   al,0xf7
c001da16:	74 0d                	je     c001da25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001da18:	83 ec 0c             	sub    esp,0xc
c001da1b:	68 dd 2a 03 c0       	push   0xc0032add
c001da20:	e9 58 02 00 00       	jmp    c001dc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001da25:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001da2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001da32:	31 c0                	xor    eax,eax
c001da34:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001da38:	89 c7                	mov    edi,eax
c001da3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001da42:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001da47:	75 15                	jne    c001da5e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001da49:	99                   	cdq    
c001da4a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001da4e:	85 d2                	test   edx,edx
c001da50:	75 0c                	jne    c001da5e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001da52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001da56:	29 c7                	sub    edi,eax
c001da58:	4f                   	dec    edi
c001da59:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001da5e:	31 d2                	xor    edx,edx
c001da60:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001da64:	75 08                	jne    c001da6e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001da66:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001da6b:	c1 e2 18             	shl    edx,0x18
c001da6e:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001da73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001da77:	c1 e1 10             	shl    ecx,0x10
c001da7a:	8d 47 01             	lea    eax,[edi+0x1]
c001da7d:	89 cd                	mov    ebp,ecx
c001da7f:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001da84:	c1 e1 08             	shl    ecx,0x8
c001da87:	09 e9                	or     ecx,ebp
c001da89:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001da8d:	09 e9                	or     ecx,ebp
c001da8f:	09 d1                	or     ecx,edx
c001da91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da95:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001da98:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001da9c:	c1 fa 03             	sar    edx,0x3
c001da9f:	01 d6                	add    esi,edx
c001daa1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001daa5:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001daa9:	7e 04                	jle    c001daaf <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001daab:	89 c7                	mov    edi,eax
c001daad:	eb 93                	jmp    c001da42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001daaf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001dab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dab7:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001dabb:	0f 8f 77 ff ff ff    	jg     c001da38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001dac1:	e9 d3 01 00 00       	jmp    c001dc99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001dac6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001dacb:	75 0e                	jne    c001dadb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001dacd:	85 d2                	test   edx,edx
c001dacf:	75 0a                	jne    c001dadb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001dad1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001dad4:	83 e8 18             	sub    eax,0x18
c001dad7:	a8 f7                	test   al,0xf7
c001dad9:	74 0d                	je     c001dae8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001dadb:	83 ec 0c             	sub    esp,0xc
c001dade:	68 eb 2a 03 c0       	push   0xc0032aeb
c001dae3:	e9 95 01 00 00       	jmp    c001dc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001dae8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001daf0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001daf8:	31 c9                	xor    ecx,ecx
c001dafa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001dafe:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001db02:	0f 8e 91 01 00 00    	jle    c001dc99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001db08:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001db0c:	0f 8d 87 01 00 00    	jge    c001dc99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001db12:	8d 46 01             	lea    eax,[esi+0x1]
c001db15:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001db19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db1d:	83 fd 7f             	cmp    ebp,0x7f
c001db20:	89 e8                	mov    eax,ebp
c001db22:	0f 8e 9d 00 00 00    	jle    c001dbc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001db28:	83 e0 7f             	and    eax,0x7f
c001db2b:	31 d2                	xor    edx,edx
c001db2d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db31:	40                   	inc    eax
c001db32:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db3a:	75 0a                	jne    c001db46 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001db3c:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001db41:	89 ea                	mov    edx,ebp
c001db43:	c1 e2 18             	shl    edx,0x18
c001db46:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001db4b:	c1 e0 10             	shl    eax,0x10
c001db4e:	89 c7                	mov    edi,eax
c001db50:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001db55:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001db59:	c1 e0 08             	shl    eax,0x8
c001db5c:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001db60:	09 f8                	or     eax,edi
c001db62:	31 f6                	xor    esi,esi
c001db64:	09 c5                	or     ebp,eax
c001db66:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001db6b:	09 d5                	or     ebp,edx
c001db6d:	85 ff                	test   edi,edi
c001db6f:	75 1d                	jne    c001db8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001db71:	89 c8                	mov    eax,ecx
c001db73:	99                   	cdq    
c001db74:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001db78:	85 d2                	test   edx,edx
c001db7a:	75 12                	jne    c001db8e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001db7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db80:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001db84:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001db88:	49                   	dec    ecx
c001db89:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001db8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db92:	8d 51 01             	lea    edx,[ecx+0x1]
c001db95:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001db98:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001db9c:	8d 46 01             	lea    eax,[esi+0x1]
c001db9f:	7e 06                	jle    c001dba7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001dba1:	89 c6                	mov    esi,eax
c001dba3:	89 d1                	mov    ecx,edx
c001dba5:	eb c6                	jmp    c001db6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001dba7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dbab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dbaf:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001dbb3:	c1 f8 03             	sar    eax,0x3
c001dbb6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001dbba:	89 d1                	mov    ecx,edx
c001dbbc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001dbc0:	e9 35 ff ff ff       	jmp    c001dafa <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001dbc5:	8d 45 01             	lea    eax,[ebp+0x1]
c001dbc8:	31 f6                	xor    esi,esi
c001dbca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dbce:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001dbd3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dbd7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001dbdc:	75 1d                	jne    c001dbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001dbde:	89 c8                	mov    eax,ecx
c001dbe0:	99                   	cdq    
c001dbe1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001dbe5:	85 d2                	test   edx,edx
c001dbe7:	75 12                	jne    c001dbfb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001dbe9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dbed:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001dbf1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001dbf5:	49                   	dec    ecx
c001dbf6:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001dbfb:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001dc03:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dc07:	75 10                	jne    c001dc19 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001dc09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc0d:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001dc12:	c1 e7 18             	shl    edi,0x18
c001dc15:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001dc19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc1d:	8d 51 01             	lea    edx,[ecx+0x1]
c001dc20:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001dc25:	c1 e0 10             	shl    eax,0x10
c001dc28:	89 c7                	mov    edi,eax
c001dc2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc2e:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001dc33:	c1 e0 08             	shl    eax,0x8
c001dc36:	09 f8                	or     eax,edi
c001dc38:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dc3c:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001dc40:	09 f8                	or     eax,edi
c001dc42:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001dc46:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001dc4a:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001dc4d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dc51:	c1 f8 03             	sar    eax,0x3
c001dc54:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001dc58:	8d 46 01             	lea    eax,[esi+0x1]
c001dc5b:	39 f5                	cmp    ebp,esi
c001dc5d:	7e 09                	jle    c001dc68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001dc5f:	89 c6                	mov    esi,eax
c001dc61:	89 d1                	mov    ecx,edx
c001dc63:	e9 6f ff ff ff       	jmp    c001dbd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001dc68:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dc6c:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001dc70:	e9 45 ff ff ff       	jmp    c001dbba <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001dc75:	52                   	push   edx
c001dc76:	52                   	push   edx
c001dc77:	51                   	push   ecx
c001dc78:	68 fa 2a 03 c0       	push   0xc0032afa
c001dc7d:	e8 c3 b7 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001dc82:	58                   	pop    eax
c001dc83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc87:	e8 3b 89 ff ff       	call   c00165c7 <free>
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dc97:	eb 14                	jmp    c001dcad <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001dc99:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc9d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dca1:	89 18                	mov    DWORD PTR [eax],ebx
c001dca3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dca7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcab:	89 18                	mov    DWORD PTR [eax],ebx
c001dcad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcb1:	83 c4 3c             	add    esp,0x3c
c001dcb4:	5b                   	pop    ebx
c001dcb5:	5e                   	pop    esi
c001dcb6:	5f                   	pop    edi
c001dcb7:	5d                   	pop    ebp
c001dcb8:	c3                   	ret    
c001dcb9:	90                   	nop

c001dcba <Video::putTGA(int, int, unsigned char*, int)>:
c001dcba:	55                   	push   ebp
c001dcbb:	57                   	push   edi
c001dcbc:	56                   	push   esi
c001dcbd:	53                   	push   ebx
c001dcbe:	83 ec 28             	sub    esp,0x28
c001dcc1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dcc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcc9:	50                   	push   eax
c001dcca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcce:	50                   	push   eax
c001dccf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dcd3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dcd7:	57                   	push   edi
c001dcd8:	e8 33 fc ff ff       	call   c001d910 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dcdd:	83 c4 20             	add    esp,0x20
c001dce0:	85 c0                	test   eax,eax
c001dce2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dce6:	74 3a                	je     c001dd22 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dce8:	89 c6                	mov    esi,eax
c001dcea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcee:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dcf2:	39 d8                	cmp    eax,ebx
c001dcf4:	7e 2c                	jle    c001dd22 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dcf6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dcfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcfe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd02:	39 e8                	cmp    eax,ebp
c001dd04:	7e 19                	jle    c001dd1f <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001dd06:	83 c6 04             	add    esi,0x4
c001dd09:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dd0c:	85 c0                	test   eax,eax
c001dd0e:	79 0c                	jns    c001dd1c <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001dd10:	8b 17                	mov    edx,DWORD PTR [edi]
c001dd12:	50                   	push   eax
c001dd13:	53                   	push   ebx
c001dd14:	55                   	push   ebp
c001dd15:	57                   	push   edi
c001dd16:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	45                   	inc    ebp
c001dd1d:	eb db                	jmp    c001dcfa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dd1f:	43                   	inc    ebx
c001dd20:	eb c8                	jmp    c001dcea <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dd22:	83 c4 1c             	add    esp,0x1c
c001dd25:	5b                   	pop    ebx
c001dd26:	5e                   	pop    esi
c001dd27:	5f                   	pop    edi
c001dd28:	5d                   	pop    ebp
c001dd29:	c3                   	ret    
c001dd2a:	66 90                	xchg   ax,ax

c001dd2c <ACPI::close(int, int, void*)>:
c001dd2c:	83 ec 1c             	sub    esp,0x1c
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	68 5c 2b 03 c0       	push   0xc0032b5c
c001dd37:	e8 09 b7 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001dd3c:	83 c4 10             	add    esp,0x10
c001dd3f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dd47:	74 1b                	je     c001dd64 <ACPI::close(int, int, void*)+0x38>
c001dd49:	83 ec 0c             	sub    esp,0xc
c001dd4c:	68 6b 2b 03 c0       	push   0xc0032b6b
c001dd51:	e8 ef b6 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	b8 00 00 00 00       	mov    eax,0x0
c001dd5e:	e9 01 01 00 00       	jmp    c001de64 <ACPI::close(int, int, void*)+0x138>
c001dd63:	90                   	nop
c001dd64:	83 ec 0c             	sub    esp,0xc
c001dd67:	68 7c 2b 03 c0       	push   0xc0032b7c
c001dd6c:	e8 d4 b6 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001dd71:	83 c4 10             	add    esp,0x10
c001dd74:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dd79:	75 45                	jne    c001ddc0 <ACPI::close(int, int, void*)+0x94>
c001dd7b:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dd80:	83 ec 08             	sub    esp,0x8
c001dd83:	50                   	push   eax
c001dd84:	68 8b 2b 03 c0       	push   0xc0032b8b
c001dd89:	e8 b7 b6 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001dd8e:	83 c4 10             	add    esp,0x10
c001dd91:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dd96:	85 c0                	test   eax,eax
c001dd98:	74 0a                	je     c001dda4 <ACPI::close(int, int, void*)+0x78>
c001dd9a:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dd9f:	ff d0                	call   eax
c001dda1:	8d 76 00             	lea    esi,[esi+0x0]
c001dda4:	83 ec 0c             	sub    esp,0xc
c001dda7:	68 5c 2d 03 c0       	push   0xc0032d5c
c001ddac:	e8 cd 29 00 00       	call   c002077e <KePanic(char const*)>
c001ddb1:	83 c4 10             	add    esp,0x10
c001ddb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ddb9:	e9 a6 00 00 00       	jmp    c001de64 <ACPI::close(int, int, void*)+0x138>
c001ddbe:	66 90                	xchg   ax,ax
c001ddc0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001ddc5:	0f 85 81 00 00 00    	jne    c001de4c <ACPI::close(int, int, void*)+0x120>
c001ddcb:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001ddd0:	83 ec 08             	sub    esp,0x8
c001ddd3:	50                   	push   eax
c001ddd4:	68 a9 2b 03 c0       	push   0xc0032ba9
c001ddd9:	e8 67 b6 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001ddde:	83 c4 10             	add    esp,0x10
c001dde1:	a1 04 04 04 c0       	mov    eax,ds:0xc0040404
c001dde6:	85 c0                	test   eax,eax
c001dde8:	74 0a                	je     c001ddf4 <ACPI::close(int, int, void*)+0xc8>
c001ddea:	a1 04 04 04 c0       	mov    eax,ds:0xc0040404
c001ddef:	ff d0                	call   eax
c001ddf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ddf4:	83 ec 0c             	sub    esp,0xc
c001ddf7:	68 c4 2b 03 c0       	push   0xc0032bc4
c001ddfc:	e8 44 b6 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001de09:	8d 76 00             	lea    esi,[esi+0x0]
c001de0c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001de11:	83 e0 02             	and    eax,0x2
c001de14:	74 1e                	je     c001de34 <ACPI::close(int, int, void*)+0x108>
c001de16:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001de1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de21:	89 c2                	mov    edx,eax
c001de23:	ec                   	in     al,dx
c001de24:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001de28:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001de2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001de30:	eb da                	jmp    c001de0c <ACPI::close(int, int, void*)+0xe0>
c001de32:	66 90                	xchg   ax,ax
c001de34:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001de3b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001de40:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001de44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de48:	ee                   	out    dx,al
c001de49:	8d 76 00             	lea    esi,[esi+0x0]
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	68 d6 2b 03 c0       	push   0xc0032bd6
c001de54:	e8 ec b5 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001de59:	83 c4 10             	add    esp,0x10
c001de5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001de61:	8d 76 00             	lea    esi,[esi+0x0]
c001de64:	83 c4 1c             	add    esp,0x1c
c001de67:	c3                   	ret    

c001de68 <findRSDP()>:
c001de68:	83 ec 1c             	sub    esp,0x1c
c001de6b:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001de70:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de76:	83 e0 04             	and    eax,0x4
c001de79:	0f b6 c0             	movzx  eax,al
c001de7c:	85 c0                	test   eax,eax
c001de7e:	75 08                	jne    c001de88 <findRSDP()+0x20>
c001de80:	b8 00 00 00 00       	mov    eax,0x0
c001de85:	eb 75                	jmp    c001defc <findRSDP()+0x94>
c001de87:	90                   	nop
c001de88:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c001de8d:	3d ff 07 00 00       	cmp    eax,0x7ff
c001de92:	7f 1c                	jg     c001deb0 <findRSDP()+0x48>
c001de94:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001de99:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001de9f:	83 e2 fb             	and    edx,0xfffffffb
c001dea2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dea8:	b8 00 00 00 00       	mov    eax,0x0
c001dead:	eb 4d                	jmp    c001defc <findRSDP()+0x94>
c001deaf:	90                   	nop
c001deb0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001deb8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dec0:	77 32                	ja     c001def4 <findRSDP()+0x8c>
c001dec2:	83 ec 04             	sub    esp,0x4
c001dec5:	6a 08                	push   0x8
c001dec7:	68 e5 2b 03 c0       	push   0xc0032be5
c001decc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ded0:	e8 ab 24 fe ff       	call   c0000380 <memcmp>
c001ded5:	83 c4 10             	add    esp,0x10
c001ded8:	85 c0                	test   eax,eax
c001deda:	0f 94 c0             	sete   al
c001dedd:	0f b6 c0             	movzx  eax,al
c001dee0:	85 c0                	test   eax,eax
c001dee2:	74 08                	je     c001deec <findRSDP()+0x84>
c001dee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dee8:	eb 12                	jmp    c001defc <findRSDP()+0x94>
c001deea:	66 90                	xchg   ax,ax
c001deec:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001def1:	eb c5                	jmp    c001deb8 <findRSDP()+0x50>
c001def3:	90                   	nop
c001def4:	b8 00 00 00 00       	mov    eax,0x0
c001def9:	8d 76 00             	lea    esi,[esi+0x0]
c001defc:	83 c4 1c             	add    esp,0x1c
c001deff:	c3                   	ret    

c001df00 <loadACPITables(unsigned char*)>:
c001df00:	57                   	push   edi
c001df01:	56                   	push   esi
c001df02:	53                   	push   ebx
c001df03:	83 ec 60             	sub    esp,0x60
c001df06:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001df0b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df11:	83 e0 04             	and    eax,0x4
c001df14:	0f b6 c0             	movzx  eax,al
c001df17:	85 c0                	test   eax,eax
c001df19:	0f 84 41 02 00 00    	je     c001e160 <loadACPITables(unsigned char*)+0x260>
c001df1f:	a0 20 06 04 c0       	mov    al,ds:0xc0040620
c001df24:	0f b6 c0             	movzx  eax,al
c001df27:	85 c0                	test   eax,eax
c001df29:	74 79                	je     c001dfa4 <loadACPITables(unsigned char*)+0xa4>
c001df2b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df2f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001df33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df3a:	83 e8 24             	sub    eax,0x24
c001df3d:	c1 e8 03             	shr    eax,0x3
c001df40:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df44:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001df4c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df50:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001df54:	0f 8d ba 00 00 00    	jge    c001e014 <loadACPITables(unsigned char*)+0x114>
c001df5a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df5e:	83 c0 24             	add    eax,0x24
c001df61:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001df65:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df69:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df6d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df71:	c1 e0 03             	shl    eax,0x3
c001df74:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001df78:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001df7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001df81:	89 c1                	mov    ecx,eax
c001df83:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001df88:	8d 50 01             	lea    edx,[eax+0x1]
c001df8b:	89 15 0c 04 04 c0    	mov    DWORD PTR ds:0xc004040c,edx
c001df91:	89 ca                	mov    edx,ecx
c001df93:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001df9a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001df9f:	eb ab                	jmp    c001df4c <loadACPITables(unsigned char*)+0x4c>
c001dfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfa4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfa8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dfb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfb3:	83 e8 24             	sub    eax,0x24
c001dfb6:	c1 e8 02             	shr    eax,0x2
c001dfb9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dfbd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dfc5:	8d 76 00             	lea    esi,[esi+0x0]
c001dfc8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfcc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dfd0:	7d 42                	jge    c001e014 <loadACPITables(unsigned char*)+0x114>
c001dfd2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfd6:	83 c0 24             	add    eax,0x24
c001dfd9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dfdd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfe1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dfe5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfe9:	c1 e0 02             	shl    eax,0x2
c001dfec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dff0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dff4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dff6:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001dffb:	8d 50 01             	lea    edx,[eax+0x1]
c001dffe:	89 15 0c 04 04 c0    	mov    DWORD PTR ds:0xc004040c,edx
c001e004:	89 ca                	mov    edx,ecx
c001e006:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001e00d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001e012:	eb b4                	jmp    c001dfc8 <loadACPITables(unsigned char*)+0xc8>
c001e014:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001e01c:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e021:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001e025:	0f 8d 39 01 00 00    	jge    c001e164 <loadACPITables(unsigned char*)+0x264>
c001e02b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e02f:	8b 04 c5 24 04 04 c0 	mov    eax,DWORD PTR [eax*8-0x3ffbfbdc]
c001e036:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e03a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e03e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e046:	25 ff 0f 00 00       	and    eax,0xfff
c001e04b:	89 c6                	mov    esi,eax
c001e04d:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	6a 01                	push   0x1
c001e058:	e8 b0 a0 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c001e05d:	83 c4 10             	add    esp,0x10
c001e060:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e064:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	6a 01                	push   0x1
c001e06f:	6a 01                	push   0x1
c001e071:	50                   	push   eax
c001e072:	52                   	push   edx
c001e073:	53                   	push   ebx
c001e074:	e8 a1 a9 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e079:	83 c4 20             	add    esp,0x20
c001e07c:	09 f0                	or     eax,esi
c001e07e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e082:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e086:	c1 e0 03             	shl    eax,0x3
c001e089:	05 20 04 04 c0       	add    eax,0xc0040420
c001e08e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e096:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e09a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001e0a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e0aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e0b6:	89 c6                	mov    esi,eax
c001e0b8:	89 d7                	mov    edi,edx
c001e0ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0bc:	89 c8                	mov    eax,ecx
c001e0be:	89 fa                	mov    edx,edi
c001e0c0:	89 f3                	mov    ebx,esi
c001e0c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e0c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0dd:	05 00 10 00 00       	add    eax,0x1000
c001e0e2:	c1 e8 0c             	shr    eax,0xc
c001e0e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e0e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0f5:	25 ff 0f 00 00       	and    eax,0xfff
c001e0fa:	89 c6                	mov    esi,eax
c001e0fc:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e102:	83 ec 0c             	sub    esp,0xc
c001e105:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e109:	e8 ff 9f ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c001e10e:	83 c4 10             	add    esp,0x10
c001e111:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e115:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e11b:	83 ec 0c             	sub    esp,0xc
c001e11e:	6a 01                	push   0x1
c001e120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e124:	50                   	push   eax
c001e125:	52                   	push   edx
c001e126:	53                   	push   ebx
c001e127:	e8 ee a8 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e12c:	83 c4 20             	add    esp,0x20
c001e12f:	09 f0                	or     eax,esi
c001e131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e139:	83 ec 0c             	sub    esp,0xc
c001e13c:	50                   	push   eax
c001e13d:	e8 e9 a2 ff ff       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c001e142:	83 c4 10             	add    esp,0x10
c001e145:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e149:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e14d:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001e154:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e159:	e9 be fe ff ff       	jmp    c001e01c <loadACPITables(unsigned char*)+0x11c>
c001e15e:	66 90                	xchg   ax,ax
c001e160:	90                   	nop
c001e161:	8d 76 00             	lea    esi,[esi+0x0]
c001e164:	83 c4 60             	add    esp,0x60
c001e167:	5b                   	pop    ebx
c001e168:	5e                   	pop    esi
c001e169:	5f                   	pop    edi
c001e16a:	c3                   	ret    
c001e16b:	90                   	nop

c001e16c <findRSDT(unsigned char*)>:
c001e16c:	57                   	push   edi
c001e16d:	56                   	push   esi
c001e16e:	53                   	push   ebx
c001e16f:	83 ec 50             	sub    esp,0x50
c001e172:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e177:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e17d:	83 e0 04             	and    eax,0x4
c001e180:	0f b6 c0             	movzx  eax,al
c001e183:	85 c0                	test   eax,eax
c001e185:	75 0d                	jne    c001e194 <findRSDT(unsigned char*)+0x28>
c001e187:	b8 00 00 00 00       	mov    eax,0x0
c001e18c:	e9 2b 01 00 00       	jmp    c001e2bc <findRSDT(unsigned char*)+0x150>
c001e191:	8d 76 00             	lea    esi,[esi+0x0]
c001e194:	89 e0                	mov    eax,esp
c001e196:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e19a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e19e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e1a2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e1aa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e1b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e1b6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e1ba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1be:	89 c6                	mov    esi,eax
c001e1c0:	89 d7                	mov    edi,edx
c001e1c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1c4:	89 c8                	mov    eax,ecx
c001e1c6:	89 fa                	mov    edx,edi
c001e1c8:	89 f3                	mov    ebx,esi
c001e1ca:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e1ce:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e1d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1d6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1da:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e1de:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e1e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e1fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e1fe:	25 ff 0f 00 00       	and    eax,0xfff
c001e203:	89 c6                	mov    esi,eax
c001e205:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e20b:	83 ec 0c             	sub    esp,0xc
c001e20e:	6a 02                	push   0x2
c001e210:	e8 f8 9e ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c001e215:	83 c4 10             	add    esp,0x10
c001e218:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e21c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	6a 01                	push   0x1
c001e227:	6a 02                	push   0x2
c001e229:	50                   	push   eax
c001e22a:	52                   	push   edx
c001e22b:	53                   	push   ebx
c001e22c:	e8 e9 a7 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e231:	83 c4 20             	add    esp,0x20
c001e234:	09 f0                	or     eax,esi
c001e236:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e23a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e23e:	25 ff 0f 00 00       	and    eax,0xfff
c001e243:	89 c6                	mov    esi,eax
c001e245:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	6a 02                	push   0x2
c001e250:	e8 b8 9e ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e25c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e262:	83 ec 0c             	sub    esp,0xc
c001e265:	6a 01                	push   0x1
c001e267:	6a 02                	push   0x2
c001e269:	50                   	push   eax
c001e26a:	52                   	push   edx
c001e26b:	53                   	push   ebx
c001e26c:	e8 a9 a7 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e271:	83 c4 20             	add    esp,0x20
c001e274:	09 f0                	or     eax,esi
c001e276:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e27a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e27f:	85 c0                	test   eax,eax
c001e281:	75 11                	jne    c001e294 <findRSDT(unsigned char*)+0x128>
c001e283:	c6 05 20 06 04 c0 00 	mov    BYTE PTR ds:0xc0040620,0x0
c001e28a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e28e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e292:	eb 24                	jmp    c001e2b8 <findRSDT(unsigned char*)+0x14c>
c001e294:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e299:	83 f8 02             	cmp    eax,0x2
c001e29c:	75 12                	jne    c001e2b0 <findRSDT(unsigned char*)+0x144>
c001e29e:	c6 05 20 06 04 c0 01 	mov    BYTE PTR ds:0xc0040620,0x1
c001e2a5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2ad:	eb 09                	jmp    c001e2b8 <findRSDT(unsigned char*)+0x14c>
c001e2af:	90                   	nop
c001e2b0:	b8 00 00 00 00       	mov    eax,0x0
c001e2b5:	eb 05                	jmp    c001e2bc <findRSDT(unsigned char*)+0x150>
c001e2b7:	90                   	nop
c001e2b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e2bc:	83 c4 50             	add    esp,0x50
c001e2bf:	5b                   	pop    ebx
c001e2c0:	5e                   	pop    esi
c001e2c1:	5f                   	pop    edi
c001e2c2:	c3                   	ret    
c001e2c3:	90                   	nop

c001e2c4 <findDataTable(unsigned char*, char*)>:
c001e2c4:	83 ec 1c             	sub    esp,0x1c
c001e2c7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e2cc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e2d2:	83 e0 04             	and    eax,0x4
c001e2d5:	0f b6 c0             	movzx  eax,al
c001e2d8:	85 c0                	test   eax,eax
c001e2da:	75 08                	jne    c001e2e4 <findDataTable(unsigned char*, char*)+0x20>
c001e2dc:	b8 00 00 00 00       	mov    eax,0x0
c001e2e1:	eb 5d                	jmp    c001e340 <findDataTable(unsigned char*, char*)+0x7c>
c001e2e3:	90                   	nop
c001e2e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e2ec:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e2f1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e2f5:	7d 41                	jge    c001e338 <findDataTable(unsigned char*, char*)+0x74>
c001e2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e2fb:	c1 e0 03             	shl    eax,0x3
c001e2fe:	05 20 04 04 c0       	add    eax,0xc0040420
c001e303:	83 ec 04             	sub    esp,0x4
c001e306:	6a 04                	push   0x4
c001e308:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e30c:	50                   	push   eax
c001e30d:	e8 6e 20 fe ff       	call   c0000380 <memcmp>
c001e312:	83 c4 10             	add    esp,0x10
c001e315:	85 c0                	test   eax,eax
c001e317:	0f 94 c0             	sete   al
c001e31a:	0f b6 c0             	movzx  eax,al
c001e31d:	85 c0                	test   eax,eax
c001e31f:	74 0f                	je     c001e330 <findDataTable(unsigned char*, char*)+0x6c>
c001e321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e325:	8b 04 c5 24 04 04 c0 	mov    eax,DWORD PTR [eax*8-0x3ffbfbdc]
c001e32c:	eb 12                	jmp    c001e340 <findDataTable(unsigned char*, char*)+0x7c>
c001e32e:	66 90                	xchg   ax,ax
c001e330:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e335:	eb b5                	jmp    c001e2ec <findDataTable(unsigned char*, char*)+0x28>
c001e337:	90                   	nop
c001e338:	b8 00 00 00 00       	mov    eax,0x0
c001e33d:	8d 76 00             	lea    esi,[esi+0x0]
c001e340:	83 c4 1c             	add    esp,0x1c
c001e343:	c3                   	ret    

c001e344 <scanMADT()>:
c001e344:	53                   	push   ebx
c001e345:	83 ec 38             	sub    esp,0x38
c001e348:	a1 d4 b9 03 c0       	mov    eax,ds:0xc003b9d4
c001e34d:	25 00 04 00 00       	and    eax,0x400
c001e352:	74 14                	je     c001e368 <scanMADT()+0x24>
c001e354:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e359:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e35f:	83 e2 fb             	and    edx,0xfffffffb
c001e362:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e368:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e36d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e373:	83 e0 04             	and    eax,0x4
c001e376:	0f b6 c0             	movzx  eax,al
c001e379:	85 c0                	test   eax,eax
c001e37b:	0f 84 6b 04 00 00    	je     c001e7ec <scanMADT()+0x4a8>
c001e381:	e8 e2 fa ff ff       	call   c001de68 <findRSDP()>
c001e386:	a3 2c 06 04 c0       	mov    ds:0xc004062c,eax
c001e38b:	a1 2c 06 04 c0       	mov    eax,ds:0xc004062c
c001e390:	85 c0                	test   eax,eax
c001e392:	75 1c                	jne    c001e3b0 <scanMADT()+0x6c>
c001e394:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e399:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e39f:	83 e2 fb             	and    edx,0xfffffffb
c001e3a2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e3a8:	e9 47 04 00 00       	jmp    c001e7f4 <scanMADT()+0x4b0>
c001e3ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e3b0:	a1 2c 06 04 c0       	mov    eax,ds:0xc004062c
c001e3b5:	83 ec 0c             	sub    esp,0xc
c001e3b8:	50                   	push   eax
c001e3b9:	e8 ae fd ff ff       	call   c001e16c <findRSDT(unsigned char*)>
c001e3be:	83 c4 10             	add    esp,0x10
c001e3c1:	a3 28 06 04 c0       	mov    ds:0xc0040628,eax
c001e3c6:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e3cb:	85 c0                	test   eax,eax
c001e3cd:	75 19                	jne    c001e3e8 <scanMADT()+0xa4>
c001e3cf:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e3d4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e3da:	83 e2 fb             	and    edx,0xfffffffb
c001e3dd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e3e3:	e9 0c 04 00 00       	jmp    c001e7f4 <scanMADT()+0x4b0>
c001e3e8:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e3ed:	83 ec 0c             	sub    esp,0xc
c001e3f0:	50                   	push   eax
c001e3f1:	e8 0a fb ff ff       	call   c001df00 <loadACPITables(unsigned char*)>
c001e3f6:	83 c4 10             	add    esp,0x10
c001e3f9:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e3fe:	83 ec 08             	sub    esp,0x8
c001e401:	68 ee 2b 03 c0       	push   0xc0032bee
c001e406:	50                   	push   eax
c001e407:	e8 b8 fe ff ff       	call   c001e2c4 <findDataTable(unsigned char*, char*)>
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e413:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e418:	75 1a                	jne    c001e434 <scanMADT()+0xf0>
c001e41a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e41f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e425:	83 e2 fe             	and    edx,0xfffffffe
c001e428:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e42e:	e9 c1 03 00 00       	jmp    c001e7f4 <scanMADT()+0x4b0>
c001e433:	90                   	nop
c001e434:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e43c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e440:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e443:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e447:	0f 87 a7 03 00 00    	ja     c001e7f4 <scanMADT()+0x4b0>
c001e44d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e455:	0f 87 99 03 00 00    	ja     c001e7f4 <scanMADT()+0x4b0>
c001e45b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e45f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e467:	8d 50 01             	lea    edx,[eax+0x1]
c001e46a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e46e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e472:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e476:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e47a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e47e:	8d 50 01             	lea    edx,[eax+0x1]
c001e481:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e485:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e489:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e48d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e491:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e496:	83 f8 02             	cmp    eax,0x2
c001e499:	0f 86 51 03 00 00    	jbe    c001e7f0 <scanMADT()+0x4ac>
c001e49f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4a4:	85 c0                	test   eax,eax
c001e4a6:	75 58                	jne    c001e500 <scanMADT()+0x1bc>
c001e4a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4ac:	8d 50 01             	lea    edx,[eax+0x1]
c001e4af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4b3:	8a 15 20 08 04 c0    	mov    dl,BYTE PTR ds:0xc0040820
c001e4b9:	0f b6 d2             	movzx  edx,dl
c001e4bc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4c0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4c4:	88 82 60 08 04 c0    	mov    BYTE PTR [edx-0x3ffbf7a0],al
c001e4ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4ce:	8d 50 01             	lea    edx,[eax+0x1]
c001e4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4d5:	8a 15 20 08 04 c0    	mov    dl,BYTE PTR ds:0xc0040820
c001e4db:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e4de:	88 0d 20 08 04 c0    	mov    BYTE PTR ds:0xc0040820,cl
c001e4e4:	0f b6 d2             	movzx  edx,dl
c001e4e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4eb:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4ef:	88 82 40 08 04 c0    	mov    BYTE PTR [edx-0x3ffbf7c0],al
c001e4f5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e4fa:	e9 d9 02 00 00       	jmp    c001e7d8 <scanMADT()+0x494>
c001e4ff:	90                   	nop
c001e500:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e505:	83 f8 01             	cmp    eax,0x1
c001e508:	0f 85 1a 01 00 00    	jne    c001e628 <scanMADT()+0x2e4>
c001e50e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e512:	8d 50 01             	lea    edx,[eax+0x1]
c001e515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e519:	8a 15 e0 06 04 c0    	mov    dl,BYTE PTR ds:0xc00406e0
c001e51f:	0f b6 d2             	movzx  edx,dl
c001e522:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e526:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e52a:	88 82 00 07 04 c0    	mov    BYTE PTR [edx-0x3ffbf900],al
c001e530:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e539:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e53d:	01 d0                	add    eax,edx
c001e53f:	83 c0 2c             	add    eax,0x2c
c001e542:	8a 00                	mov    al,BYTE PTR [eax]
c001e544:	0f b6 d0             	movzx  edx,al
c001e547:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e54b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e54e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e552:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e556:	0f b6 c0             	movzx  eax,al
c001e559:	c1 e0 08             	shl    eax,0x8
c001e55c:	89 d1                	mov    ecx,edx
c001e55e:	09 c1                	or     ecx,eax
c001e560:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e564:	8d 50 02             	lea    edx,[eax+0x2]
c001e567:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e56b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e56f:	0f b6 c0             	movzx  eax,al
c001e572:	c1 e0 10             	shl    eax,0x10
c001e575:	09 c1                	or     ecx,eax
c001e577:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e57b:	8d 50 03             	lea    edx,[eax+0x3]
c001e57e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e582:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e586:	0f b6 c0             	movzx  eax,al
c001e589:	c1 e0 18             	shl    eax,0x18
c001e58c:	09 c1                	or     ecx,eax
c001e58e:	89 ca                	mov    edx,ecx
c001e590:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e595:	0f b6 c0             	movzx  eax,al
c001e598:	89 14 85 20 07 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf8e0],edx
c001e59f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e5a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ac:	01 d0                	add    eax,edx
c001e5ae:	83 c0 2c             	add    eax,0x2c
c001e5b1:	8a 00                	mov    al,BYTE PTR [eax]
c001e5b3:	0f b6 d0             	movzx  edx,al
c001e5b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ba:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5c1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e5c5:	0f b6 c0             	movzx  eax,al
c001e5c8:	c1 e0 08             	shl    eax,0x8
c001e5cb:	89 d1                	mov    ecx,edx
c001e5cd:	09 c1                	or     ecx,eax
c001e5cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5d3:	8d 50 02             	lea    edx,[eax+0x2]
c001e5d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5da:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5de:	0f b6 c0             	movzx  eax,al
c001e5e1:	c1 e0 10             	shl    eax,0x10
c001e5e4:	09 c1                	or     ecx,eax
c001e5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5ea:	8d 50 03             	lea    edx,[eax+0x3]
c001e5ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5f1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5f5:	0f b6 c0             	movzx  eax,al
c001e5f8:	c1 e0 18             	shl    eax,0x18
c001e5fb:	09 c1                	or     ecx,eax
c001e5fd:	89 ca                	mov    edx,ecx
c001e5ff:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e604:	0f b6 c0             	movzx  eax,al
c001e607:	89 14 85 a0 07 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf860],edx
c001e60e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e613:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e618:	83 c0 01             	add    eax,0x1
c001e61b:	a2 e0 06 04 c0       	mov    ds:0xc00406e0,al
c001e620:	e9 b3 01 00 00       	jmp    c001e7d8 <scanMADT()+0x494>
c001e625:	8d 76 00             	lea    esi,[esi+0x0]
c001e628:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e62d:	83 f8 02             	cmp    eax,0x2
c001e630:	0f 85 ea 00 00 00    	jne    c001e720 <scanMADT()+0x3dc>
c001e636:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e63a:	8d 50 01             	lea    edx,[eax+0x1]
c001e63d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e641:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e645:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e649:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e64d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e651:	8d 50 01             	lea    edx,[eax+0x1]
c001e654:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e658:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e65c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e660:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e664:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e66c:	01 d0                	add    eax,edx
c001e66e:	83 c0 2c             	add    eax,0x2c
c001e671:	8a 00                	mov    al,BYTE PTR [eax]
c001e673:	0f b6 d0             	movzx  edx,al
c001e676:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e67a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e67d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e681:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e685:	0f b6 c0             	movzx  eax,al
c001e688:	c1 e0 08             	shl    eax,0x8
c001e68b:	89 d1                	mov    ecx,edx
c001e68d:	09 c1                	or     ecx,eax
c001e68f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e693:	8d 50 02             	lea    edx,[eax+0x2]
c001e696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e69a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e69e:	0f b6 c0             	movzx  eax,al
c001e6a1:	c1 e0 10             	shl    eax,0x10
c001e6a4:	09 c1                	or     ecx,eax
c001e6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6aa:	8d 50 03             	lea    edx,[eax+0x3]
c001e6ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6b5:	0f b6 c0             	movzx  eax,al
c001e6b8:	c1 e0 18             	shl    eax,0x18
c001e6bb:	09 c8                	or     eax,ecx
c001e6bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6c1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e6c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6ce:	01 d0                	add    eax,edx
c001e6d0:	83 c0 2c             	add    eax,0x2c
c001e6d3:	8a 00                	mov    al,BYTE PTR [eax]
c001e6d5:	0f b6 c0             	movzx  eax,al
c001e6d8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e6dc:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e6df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6e3:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e6e7:	0f b6 d2             	movzx  edx,dl
c001e6ea:	c1 e2 08             	shl    edx,0x8
c001e6ed:	09 d0                	or     eax,edx
c001e6ef:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e6f4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e6f9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e6fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e702:	88 90 88 44 03 c0    	mov    BYTE PTR [eax-0x3ffcbb78],dl
c001e708:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e70d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e712:	66 89 84 12 c0 06 04 c0 	mov    WORD PTR [edx+edx*1-0x3ffbf940],ax
c001e71a:	e9 b9 00 00 00       	jmp    c001e7d8 <scanMADT()+0x494>
c001e71f:	90                   	nop
c001e720:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e725:	83 f8 04             	cmp    eax,0x4
c001e728:	0f 85 9a 00 00 00    	jne    c001e7c8 <scanMADT()+0x484>
c001e72e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e732:	8d 50 01             	lea    edx,[eax+0x1]
c001e735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e739:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e73d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e741:	0f b6 c0             	movzx  eax,al
c001e744:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e748:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e74c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e750:	01 d0                	add    eax,edx
c001e752:	83 c0 2c             	add    eax,0x2c
c001e755:	8a 00                	mov    al,BYTE PTR [eax]
c001e757:	0f b6 d0             	movzx  edx,al
c001e75a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e75e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e761:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e765:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e769:	0f b6 c0             	movzx  eax,al
c001e76c:	c1 e0 08             	shl    eax,0x8
c001e76f:	09 d0                	or     eax,edx
c001e771:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e775:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e77a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e77e:	8d 50 01             	lea    edx,[eax+0x1]
c001e781:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e785:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e789:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e78d:	0f b6 c0             	movzx  eax,al
c001e790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e798:	c1 e0 08             	shl    eax,0x8
c001e79b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e79f:	89 c1                	mov    ecx,eax
c001e7a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7a5:	c1 e0 18             	shl    eax,0x18
c001e7a8:	89 c3                	mov    ebx,eax
c001e7aa:	a1 30 06 04 c0       	mov    eax,ds:0xc0040630
c001e7af:	8d 50 01             	lea    edx,[eax+0x1]
c001e7b2:	89 15 30 06 04 c0    	mov    DWORD PTR ds:0xc0040630,edx
c001e7b8:	09 d9                	or     ecx,ebx
c001e7ba:	89 ca                	mov    edx,ecx
c001e7bc:	89 14 85 40 06 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf9c0],edx
c001e7c3:	eb 13                	jmp    c001e7d8 <scanMADT()+0x494>
c001e7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7c8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e7cd:	83 f8 05             	cmp    eax,0x5
c001e7d0:	75 06                	jne    c001e7d8 <scanMADT()+0x494>
c001e7d2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e7d7:	90                   	nop
c001e7d8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e7dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e7e1:	01 d0                	add    eax,edx
c001e7e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e7e7:	e9 50 fc ff ff       	jmp    c001e43c <scanMADT()+0xf8>
c001e7ec:	90                   	nop
c001e7ed:	eb 05                	jmp    c001e7f4 <scanMADT()+0x4b0>
c001e7ef:	90                   	nop
c001e7f0:	90                   	nop
c001e7f1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7f4:	83 c4 38             	add    esp,0x38
c001e7f7:	5b                   	pop    ebx
c001e7f8:	c3                   	ret    
c001e7f9:	90                   	nop
c001e7fa:	66 90                	xchg   ax,ax

c001e7fc <ACPI::ACPI()>:
c001e7fc:	83 ec 0c             	sub    esp,0xc
c001e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e803:	83 ec 08             	sub    esp,0x8
c001e806:	68 f3 2b 03 c0       	push   0xc0032bf3
c001e80b:	50                   	push   eax
c001e80c:	e8 53 cf ff ff       	call   c001b764 <Device::Device(char const*)>
c001e811:	83 c4 10             	add    esp,0x10
c001e814:	ba 00 2e 03 c0       	mov    edx,0xc0032e00
c001e819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81d:	89 10                	mov    DWORD PTR [eax],edx
c001e81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e823:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e846:	e8 f9 fa ff ff       	call   c001e344 <scanMADT()>
c001e84b:	90                   	nop
c001e84c:	83 c4 0c             	add    esp,0xc
c001e84f:	c3                   	ret    

c001e850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e850:	83 ec 2c             	sub    esp,0x2c
c001e853:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e85b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e85f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e863:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e868:	88 d0                	mov    al,dl
c001e86a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e86e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e873:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e87b:	90                   	nop
c001e87c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e880:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e886:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e88a:	0f 8d b0 00 00 00    	jge    c001e940 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e890:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e898:	83 c2 2a             	add    edx,0x2a
c001e89b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e89f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8a4:	0f b7 c0             	movzx  eax,ax
c001e8a7:	39 c2                	cmp    edx,eax
c001e8a9:	0f 85 85 00 00 00    	jne    c001e934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8b7:	83 c2 2a             	add    edx,0x2a
c001e8ba:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e8be:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e8c3:	0f b6 c0             	movzx  eax,al
c001e8c6:	39 c2                	cmp    edx,eax
c001e8c8:	75 6a                	jne    c001e934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8ca:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e8cf:	85 c0                	test   eax,eax
c001e8d1:	74 3d                	je     c001e910 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e8d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8db:	83 c2 2a             	add    edx,0x2a
c001e8de:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e8e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e9:	39 c2                	cmp    edx,eax
c001e8eb:	74 13                	je     c001e900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e8ed:	83 ec 0c             	sub    esp,0xc
c001e8f0:	68 80 2d 03 c0       	push   0xc0032d80
c001e8f5:	e8 84 1e 00 00       	call   c002077e <KePanic(char const*)>
c001e8fa:	83 c4 10             	add    esp,0x10
c001e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e900:	83 ec 0c             	sub    esp,0xc
c001e903:	68 f8 2b 03 c0       	push   0xc0032bf8
c001e908:	e8 71 1e 00 00       	call   c002077e <KePanic(char const*)>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e914:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e91c:	83 c2 2a             	add    edx,0x2a
c001e91f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e923:	8b 02                	mov    eax,DWORD PTR [edx]
c001e925:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e928:	89 01                	mov    DWORD PTR [ecx],eax
c001e92a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e92d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e932:	66 90                	xchg   ax,ax
c001e934:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e939:	e9 3e ff ff ff       	jmp    c001e87c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e93e:	66 90                	xchg   ax,ax
c001e940:	90                   	nop
c001e941:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e945:	83 c4 2c             	add    esp,0x2c
c001e948:	c2 04 00             	ret    0x4
c001e94b:	90                   	nop

c001e94c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e94c:	83 ec 1c             	sub    esp,0x1c
c001e94f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e953:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e957:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e95b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e960:	88 c8                	mov    al,cl
c001e962:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e966:	88 d0                	mov    al,dl
c001e968:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e970:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e97a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e97d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e981:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e989:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e98f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e993:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e99a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e99f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9a3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9a9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e9ad:	83 c0 01             	add    eax,0x1
c001e9b0:	88 c1                	mov    cl,al
c001e9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b6:	83 c2 2a             	add    edx,0x2a
c001e9b9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e9bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9cb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e9ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9d2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9da:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e9e0:	8d 50 01             	lea    edx,[eax+0x1]
c001e9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9e7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9f1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e9f7:	3d 00 02 00 00       	cmp    eax,0x200
c001e9fc:	75 12                	jne    c001ea10 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e9fe:	83 ec 0c             	sub    esp,0xc
c001ea01:	68 07 2c 03 c0       	push   0xc0032c07
c001ea06:	e8 73 1d 00 00       	call   c002077e <KePanic(char const*)>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	66 90                	xchg   ax,ax
c001ea10:	90                   	nop
c001ea11:	83 c4 1c             	add    esp,0x1c
c001ea14:	c3                   	ret    
c001ea15:	90                   	nop
c001ea16:	66 90                	xchg   ax,ax

c001ea18 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001ea18:	b8 00 00 00 00       	mov    eax,0x0
c001ea1d:	c3                   	ret    
c001ea1e:	66 90                	xchg   ax,ax

c001ea20 <ACPI::detectPCI()>:
c001ea20:	53                   	push   ebx
c001ea21:	83 ec 28             	sub    esp,0x28
c001ea24:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ea29:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001ea2e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ea33:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea39:	83 e0 04             	and    eax,0x4
c001ea3c:	0f b6 c0             	movzx  eax,al
c001ea3f:	85 c0                	test   eax,eax
c001ea41:	74 2d                	je     c001ea70 <ACPI::detectPCI()+0x50>
c001ea43:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001ea48:	83 ec 08             	sub    esp,0x8
c001ea4b:	68 24 2c 03 c0       	push   0xc0032c24
c001ea50:	50                   	push   eax
c001ea51:	e8 6e f8 ff ff       	call   c001e2c4 <findDataTable(unsigned char*, char*)>
c001ea56:	83 c4 10             	add    esp,0x10
c001ea59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea5d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ea62:	74 0c                	je     c001ea70 <ACPI::detectPCI()+0x50>
c001ea64:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea69:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea6e:	66 90                	xchg   ax,ax
c001ea70:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001ea78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea7c:	8a 00                	mov    al,BYTE PTR [eax]
c001ea7e:	0f b6 c0             	movzx  eax,al
c001ea81:	83 f8 01             	cmp    eax,0x1
c001ea84:	75 0e                	jne    c001ea94 <ACPI::detectPCI()+0x74>
c001ea86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea8b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea90:	eb 2e                	jmp    c001eac0 <ACPI::detectPCI()+0xa0>
c001ea92:	66 90                	xchg   ax,ax
c001ea94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea98:	8a 00                	mov    al,BYTE PTR [eax]
c001ea9a:	0f b6 c0             	movzx  eax,al
c001ea9d:	83 f8 02             	cmp    eax,0x2
c001eaa0:	75 1e                	jne    c001eac0 <ACPI::detectPCI()+0xa0>
c001eaa2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eaa7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eaac:	85 c0                	test   eax,eax
c001eaae:	74 10                	je     c001eac0 <ACPI::detectPCI()+0xa0>
c001eab0:	83 ec 0c             	sub    esp,0xc
c001eab3:	68 b0 2d 03 c0       	push   0xc0032db0
c001eab8:	e8 c1 1c 00 00       	call   c002077e <KePanic(char const*)>
c001eabd:	83 c4 10             	add    esp,0x10
c001eac0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001eac4:	83 f0 01             	xor    eax,0x1
c001eac7:	0f b6 c0             	movzx  eax,al
c001eaca:	85 c0                	test   eax,eax
c001eacc:	74 46                	je     c001eb14 <ACPI::detectPCI()+0xf4>
c001eace:	e8 5d 16 fe ff       	call   c0000130 <manualPCIProbe>
c001ead3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ead7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eadc:	75 0e                	jne    c001eaec <ACPI::detectPCI()+0xcc>
c001eade:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eae3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eae8:	eb 2a                	jmp    c001eb14 <ACPI::detectPCI()+0xf4>
c001eaea:	66 90                	xchg   ax,ax
c001eaec:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001eaf1:	75 21                	jne    c001eb14 <ACPI::detectPCI()+0xf4>
c001eaf3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eaf8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eafd:	85 c0                	test   eax,eax
c001eaff:	74 13                	je     c001eb14 <ACPI::detectPCI()+0xf4>
c001eb01:	83 ec 0c             	sub    esp,0xc
c001eb04:	68 b0 2d 03 c0       	push   0xc0032db0
c001eb09:	e8 70 1c 00 00       	call   c002077e <KePanic(char const*)>
c001eb0e:	83 c4 10             	add    esp,0x10
c001eb11:	8d 76 00             	lea    esi,[esi+0x0]
c001eb14:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001eb19:	85 c0                	test   eax,eax
c001eb1b:	0f 84 87 00 00 00    	je     c001eba8 <ACPI::detectPCI()+0x188>
c001eb21:	83 ec 0c             	sub    esp,0xc
c001eb24:	68 29 2c 03 c0       	push   0xc0032c29
c001eb29:	e8 09 13 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001eb39:	83 ec 0c             	sub    esp,0xc
c001eb3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb40:	e8 72 7a ff ff       	call   c00165b7 <malloc>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	89 c3                	mov    ebx,eax
c001eb4a:	83 ec 0c             	sub    esp,0xc
c001eb4d:	53                   	push   ebx
c001eb4e:	e8 41 bb 00 00       	call   c002a694 <PCI::PCI()>
c001eb53:	83 c4 10             	add    esp,0x10
c001eb56:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001eb5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb5e:	83 ec 08             	sub    esp,0x8
c001eb61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb65:	50                   	push   eax
c001eb66:	e8 97 ca ff ff       	call   c001b602 <Device::addChild(Device*)>
c001eb6b:	83 c4 10             	add    esp,0x10
c001eb6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb72:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb74:	83 c0 08             	add    eax,0x8
c001eb77:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb79:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001eb7e:	85 d2                	test   edx,edx
c001eb80:	74 0a                	je     c001eb8c <ACPI::detectPCI()+0x16c>
c001eb82:	ba 01 00 00 00       	mov    edx,0x1
c001eb87:	eb 0b                	jmp    c001eb94 <ACPI::detectPCI()+0x174>
c001eb89:	8d 76 00             	lea    esi,[esi+0x0]
c001eb8c:	ba 02 00 00 00       	mov    edx,0x2
c001eb91:	8d 76 00             	lea    esi,[esi+0x0]
c001eb94:	6a 00                	push   0x0
c001eb96:	6a 00                	push   0x0
c001eb98:	52                   	push   edx
c001eb99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eb9d:	ff d0                	call   eax
c001eb9f:	83 c4 10             	add    esp,0x10
c001eba2:	e9 91 00 00 00       	jmp    c001ec38 <ACPI::detectPCI()+0x218>
c001eba7:	90                   	nop
c001eba8:	83 ec 0c             	sub    esp,0xc
c001ebab:	68 41 2c 03 c0       	push   0xc0032c41
c001ebb0:	e8 82 12 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001ebb5:	83 c4 10             	add    esp,0x10
c001ebb8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001ebbf:	83 ec 0c             	sub    esp,0xc
c001ebc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ebc6:	e8 ec 79 ff ff       	call   c00165b7 <malloc>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	89 c3                	mov    ebx,eax
c001ebd0:	83 ec 0c             	sub    esp,0xc
c001ebd3:	53                   	push   ebx
c001ebd4:	e8 c1 c6 00 00       	call   c002b29a <IDE::IDE()>
c001ebd9:	83 c4 10             	add    esp,0x10
c001ebdc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ebe0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ebe4:	83 ec 08             	sub    esp,0x8
c001ebe7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ebeb:	50                   	push   eax
c001ebec:	e8 11 ca ff ff       	call   c001b602 <Device::addChild(Device*)>
c001ebf1:	83 c4 10             	add    esp,0x10
c001ebf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebf8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001ec02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec06:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001ec0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec13:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001ec1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec22:	83 c0 08             	add    eax,0x8
c001ec25:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec27:	6a 00                	push   0x0
c001ec29:	6a 00                	push   0x0
c001ec2b:	6a 00                	push   0x0
c001ec2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec31:	ff d0                	call   eax
c001ec33:	83 c4 10             	add    esp,0x10
c001ec36:	66 90                	xchg   ax,ax
c001ec38:	90                   	nop
c001ec39:	83 c4 28             	add    esp,0x28
c001ec3c:	5b                   	pop    ebx
c001ec3d:	c3                   	ret    
c001ec3e:	66 90                	xchg   ax,ax

c001ec40 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001ec40:	83 ec 1c             	sub    esp,0x1c
c001ec43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ec47:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001ec4a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec4e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ec53:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec58:	83 ec 08             	sub    esp,0x8
c001ec5b:	52                   	push   edx
c001ec5c:	50                   	push   eax
c001ec5d:	e8 9a 6f ff ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ec69:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ec6e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec73:	83 ec 04             	sub    esp,0x4
c001ec76:	6a 01                	push   0x1
c001ec78:	52                   	push   edx
c001ec79:	50                   	push   eax
c001ec7a:	e8 97 70 ff ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c001ec7f:	83 c4 10             	add    esp,0x10
c001ec82:	90                   	nop
c001ec83:	83 c4 1c             	add    esp,0x1c
c001ec86:	c3                   	ret    
c001ec87:	90                   	nop

c001ec88 <ACPI::sleep()>:
c001ec88:	83 ec 0c             	sub    esp,0xc
c001ec8b:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c001ec90:	85 c0                	test   eax,eax
c001ec92:	74 08                	je     c001ec9c <ACPI::sleep()+0x14>
c001ec94:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c001ec99:	ff d0                	call   eax
c001ec9b:	90                   	nop
c001ec9c:	90                   	nop
c001ec9d:	83 c4 0c             	add    esp,0xc
c001eca0:	c3                   	ret    
c001eca1:	90                   	nop
c001eca2:	66 90                	xchg   ax,ax

c001eca4 <ACPI::open(int, int, void*)>:
c001eca4:	57                   	push   edi
c001eca5:	56                   	push   esi
c001eca6:	53                   	push   ebx
c001eca7:	81 ec 70 01 00 00    	sub    esp,0x170
c001ecad:	83 ec 0c             	sub    esp,0xc
c001ecb0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ecb7:	e8 64 fd ff ff       	call   c001ea20 <ACPI::detectPCI()>
c001ecbc:	83 c4 10             	add    esp,0x10
c001ecbf:	83 ec 0c             	sub    esp,0xc
c001ecc2:	68 d8 2d 03 c0       	push   0xc0032dd8
c001ecc7:	e8 6b 11 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	b8 4c 05 00 00       	mov    eax,0x54c
c001ecd4:	8a 00                	mov    al,BYTE PTR [eax]
c001ecd6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001ecdd:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ece5:	83 f8 01             	cmp    eax,0x1
c001ece8:	75 12                	jne    c001ecfc <ACPI::open(int, int, void*)+0x58>
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	68 56 2c 03 c0       	push   0xc0032c56
c001ecf2:	e8 95 55 00 00       	call   c002428c <Thr::loadKernelSymbolTable(char const*)>
c001ecf7:	83 c4 10             	add    esp,0x10
c001ecfa:	eb 34                	jmp    c001ed30 <ACPI::open(int, int, void*)+0x8c>
c001ecfc:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ed04:	3d bb 00 00 00       	cmp    eax,0xbb
c001ed09:	75 15                	jne    c001ed20 <ACPI::open(int, int, void*)+0x7c>
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	68 74 2c 03 c0       	push   0xc0032c74
c001ed13:	e8 74 55 00 00       	call   c002428c <Thr::loadKernelSymbolTable(char const*)>
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	eb 13                	jmp    c001ed30 <ACPI::open(int, int, void*)+0x8c>
c001ed1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	68 92 2c 03 c0       	push   0xc0032c92
c001ed28:	e8 51 1a 00 00       	call   c002077e <KePanic(char const*)>
c001ed2d:	83 c4 10             	add    esp,0x10
c001ed30:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ed38:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ed43:	83 ec 0c             	sub    esp,0xc
c001ed46:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ed4d:	e8 65 78 ff ff       	call   c00165b7 <malloc>
c001ed52:	83 c4 10             	add    esp,0x10
c001ed55:	89 c3                	mov    ebx,eax
c001ed57:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ed5c:	83 ec 04             	sub    esp,0x4
c001ed5f:	50                   	push   eax
c001ed60:	68 ac 2c 03 c0       	push   0xc0032cac
c001ed65:	53                   	push   ebx
c001ed66:	e8 e1 b8 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c001ed6b:	83 c4 10             	add    esp,0x10
c001ed6e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ed75:	83 ec 08             	sub    esp,0x8
c001ed78:	6a 01                	push   0x1
c001ed7a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ed81:	e8 e4 b8 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ed90:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ed98:	75 16                	jne    c001edb0 <ACPI::open(int, int, void*)+0x10c>
c001ed9a:	83 ec 0c             	sub    esp,0xc
c001ed9d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001eda4:	e8 1f b9 ff ff       	call   c001a6c8 <File::close()>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	eb 0a                	jmp    c001edb8 <ACPI::open(int, int, void*)+0x114>
c001edae:	66 90                	xchg   ax,ax
c001edb0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001edb8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001edc0:	74 1e                	je     c001ede0 <ACPI::open(int, int, void*)+0x13c>
c001edc2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001edc9:	8b 00                	mov    eax,DWORD PTR [eax]
c001edcb:	83 c0 08             	add    eax,0x8
c001edce:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd0:	83 ec 0c             	sub    esp,0xc
c001edd3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001edda:	ff d0                	call   eax
c001eddc:	83 c4 10             	add    esp,0x10
c001eddf:	90                   	nop
c001ede0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001ede7:	83 f0 01             	xor    eax,0x1
c001edea:	0f b6 c0             	movzx  eax,al
c001eded:	85 c0                	test   eax,eax
c001edef:	74 43                	je     c001ee34 <ACPI::open(int, int, void*)+0x190>
c001edf1:	83 ec 0c             	sub    esp,0xc
c001edf4:	68 ca 2c 03 c0       	push   0xc0032cca
c001edf9:	e8 39 10 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	83 ec 04             	sub    esp,0x4
c001ee04:	6a 0c                	push   0xc
c001ee06:	68 e5 2c 03 c0       	push   0xc0032ce5
c001ee0b:	68 f6 2c 03 c0       	push   0xc0032cf6
c001ee10:	e8 be 46 00 00       	call   c00234d3 <Reg::readIntWithDefault(char*, char*, int)>
c001ee15:	83 c4 10             	add    esp,0x10
c001ee18:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ee1f:	83 ec 0c             	sub    esp,0xc
c001ee22:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ee29:	e8 0e 95 ff ff       	call   c001833c <Virt::setupPageSwapping(int)>
c001ee2e:	83 c4 10             	add    esp,0x10
c001ee31:	8d 76 00             	lea    esi,[esi+0x0]
c001ee34:	83 ec 0c             	sub    esp,0xc
c001ee37:	68 04 16 03 c0       	push   0xc0031604
c001ee3c:	e8 f6 0f 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001ee41:	83 c4 10             	add    esp,0x10
c001ee44:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ee4b:	83 ec 08             	sub    esp,0x8
c001ee4e:	6a 13                	push   0x13
c001ee50:	50                   	push   eax
c001ee51:	e8 da ca ff ff       	call   c001b930 <getDevicesOfType(DeviceType)>
c001ee56:	83 c4 0c             	add    esp,0xc
c001ee59:	8d 76 00             	lea    esi,[esi+0x0]
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ee66:	50                   	push   eax
c001ee67:	e8 44 06 01 00       	call   c002f4b0 <LinkedList<Device>::isEmpty()>
c001ee6c:	83 c4 10             	add    esp,0x10
c001ee6f:	83 f0 01             	xor    eax,0x1
c001ee72:	0f b6 c0             	movzx  eax,al
c001ee75:	85 c0                	test   eax,eax
c001ee77:	0f 84 47 01 00 00    	je     c001efc4 <ACPI::open(int, int, void*)+0x320>
c001ee7d:	83 ec 0c             	sub    esp,0xc
c001ee80:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ee87:	50                   	push   eax
c001ee88:	e8 3f 06 01 00       	call   c002f4cc <LinkedList<Device>::getFirstElement()>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001ee97:	83 ec 0c             	sub    esp,0xc
c001ee9a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eea1:	50                   	push   eax
c001eea2:	e8 2d 06 01 00       	call   c002f4d4 <LinkedList<Device>::removeFirst()>
c001eea7:	83 c4 10             	add    esp,0x10
c001eeaa:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eeb1:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eeb8:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001eebf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eec3:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001eec9:	ba 09 00 00 00       	mov    edx,0x9
c001eece:	fc                   	cld    
c001eecf:	89 c7                	mov    edi,eax
c001eed1:	89 de                	mov    esi,ebx
c001eed3:	89 d1                	mov    ecx,edx
c001eed5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eed7:	83 ec 08             	sub    esp,0x8
c001eeda:	8d 44 24 38          	lea    eax,[esp+0x38]
c001eede:	50                   	push   eax
c001eedf:	83 ec 24             	sub    esp,0x24
c001eee2:	89 e0                	mov    eax,esp
c001eee4:	89 c3                	mov    ebx,eax
c001eee6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001eeea:	ba 09 00 00 00       	mov    edx,0x9
c001eeef:	89 df                	mov    edi,ebx
c001eef1:	89 c6                	mov    esi,eax
c001eef3:	89 d1                	mov    ecx,edx
c001eef5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eef7:	e8 82 bc 00 00       	call   c002ab7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eefc:	83 c4 30             	add    esp,0x30
c001eeff:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001ef06:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001ef0e:	0f 84 48 ff ff ff    	je     c001ee5c <ACPI::open(int, int, void*)+0x1b8>
c001ef14:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001ef1f:	83 ec 0c             	sub    esp,0xc
c001ef22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ef29:	e8 89 76 ff ff       	call   c00165b7 <malloc>
c001ef2e:	83 c4 10             	add    esp,0x10
c001ef31:	89 c3                	mov    ebx,eax
c001ef33:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ef38:	83 ec 04             	sub    esp,0x4
c001ef3b:	50                   	push   eax
c001ef3c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ef43:	53                   	push   ebx
c001ef44:	e8 03 b7 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ef53:	83 ec 0c             	sub    esp,0xc
c001ef56:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ef5d:	e8 cc b9 ff ff       	call   c001a92e <File::exists()>
c001ef62:	83 c4 10             	add    esp,0x10
c001ef65:	0f b6 c0             	movzx  eax,al
c001ef68:	85 c0                	test   eax,eax
c001ef6a:	74 28                	je     c001ef94 <ACPI::open(int, int, void*)+0x2f0>
c001ef6c:	83 ec 08             	sub    esp,0x8
c001ef6f:	6a 01                	push   0x1
c001ef71:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ef78:	e8 89 5d 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	83 ec 08             	sub    esp,0x8
c001ef83:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ef8a:	50                   	push   eax
c001ef8b:	e8 c8 5f 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001ef90:	83 c4 10             	add    esp,0x10
c001ef93:	90                   	nop
c001ef94:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ef9c:	0f 84 ba fe ff ff    	je     c001ee5c <ACPI::open(int, int, void*)+0x1b8>
c001efa2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001efa9:	8b 00                	mov    eax,DWORD PTR [eax]
c001efab:	83 c0 08             	add    eax,0x8
c001efae:	8b 00                	mov    eax,DWORD PTR [eax]
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001efba:	ff d0                	call   eax
c001efbc:	83 c4 10             	add    esp,0x10
c001efbf:	e9 98 fe ff ff       	jmp    c001ee5c <ACPI::open(int, int, void*)+0x1b8>
c001efc4:	83 ec 0c             	sub    esp,0xc
c001efc7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001efce:	50                   	push   eax
c001efcf:	e8 d8 04 01 00       	call   c002f4ac <LinkedList<Device>::~LinkedList()>
c001efd4:	83 c4 10             	add    esp,0x10
c001efd7:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001efdd:	83 ec 08             	sub    esp,0x8
c001efe0:	6a 01                	push   0x1
c001efe2:	68 fd 2c 03 c0       	push   0xc0032cfd
c001efe7:	e8 1a 5d 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001efec:	83 c4 10             	add    esp,0x10
c001efef:	83 ec 08             	sub    esp,0x8
c001eff2:	53                   	push   ebx
c001eff3:	50                   	push   eax
c001eff4:	e8 5f 5f 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001eff9:	83 c4 10             	add    esp,0x10
c001effc:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001f001:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001f007:	83 e0 04             	and    eax,0x4
c001f00a:	0f b6 c0             	movzx  eax,al
c001f00d:	85 c0                	test   eax,eax
c001f00f:	0f 84 1b 01 00 00    	je     c001f130 <ACPI::open(int, int, void*)+0x48c>
c001f015:	83 ec 0c             	sub    esp,0xc
c001f018:	68 1a 2d 03 c0       	push   0xc0032d1a
c001f01d:	e8 15 0e 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001f022:	83 c4 10             	add    esp,0x10
c001f025:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001f03a:	e8 78 75 ff ff       	call   c00165b7 <malloc>
c001f03f:	83 c4 10             	add    esp,0x10
c001f042:	89 c3                	mov    ebx,eax
c001f044:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001f049:	83 ec 04             	sub    esp,0x4
c001f04c:	50                   	push   eax
c001f04d:	68 37 2d 03 c0       	push   0xc0032d37
c001f052:	53                   	push   ebx
c001f053:	e8 f4 b5 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c001f058:	83 c4 10             	add    esp,0x10
c001f05b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001f062:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f06a:	74 20                	je     c001f08c <ACPI::open(int, int, void*)+0x3e8>
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001f076:	e8 b3 b8 ff ff       	call   c001a92e <File::exists()>
c001f07b:	83 c4 10             	add    esp,0x10
c001f07e:	0f b6 c0             	movzx  eax,al
c001f081:	85 c0                	test   eax,eax
c001f083:	74 07                	je     c001f08c <ACPI::open(int, int, void*)+0x3e8>
c001f085:	b0 01                	mov    al,0x1
c001f087:	eb 07                	jmp    c001f090 <ACPI::open(int, int, void*)+0x3ec>
c001f089:	8d 76 00             	lea    esi,[esi+0x0]
c001f08c:	b0 00                	mov    al,0x0
c001f08e:	66 90                	xchg   ax,ax
c001f090:	0f b6 c0             	movzx  eax,al
c001f093:	85 c0                	test   eax,eax
c001f095:	74 25                	je     c001f0bc <ACPI::open(int, int, void*)+0x418>
c001f097:	83 ec 08             	sub    esp,0x8
c001f09a:	6a 01                	push   0x1
c001f09c:	68 37 2d 03 c0       	push   0xc0032d37
c001f0a1:	e8 60 5c 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c001f0a6:	83 c4 10             	add    esp,0x10
c001f0a9:	83 ec 08             	sub    esp,0x8
c001f0ac:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001f0b3:	50                   	push   eax
c001f0b4:	e8 9f 5e 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c001f0b9:	83 c4 10             	add    esp,0x10
c001f0bc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f0c4:	74 2a                	je     c001f0f0 <ACPI::open(int, int, void*)+0x44c>
c001f0c6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001f0ce:	74 20                	je     c001f0f0 <ACPI::open(int, int, void*)+0x44c>
c001f0d0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001f0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0d9:	83 c0 08             	add    eax,0x8
c001f0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001f0e8:	ff d0                	call   eax
c001f0ea:	83 c4 10             	add    esp,0x10
c001f0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001f0f0:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001f0f5:	83 ec 08             	sub    esp,0x8
c001f0f8:	68 54 2d 03 c0       	push   0xc0032d54
c001f0fd:	50                   	push   eax
c001f0fe:	e8 c1 f1 ff ff       	call   c001e2c4 <findDataTable(unsigned char*, char*)>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001f10d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001f115:	74 19                	je     c001f130 <ACPI::open(int, int, void*)+0x48c>
c001f117:	83 ec 08             	sub    esp,0x8
c001f11a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f121:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001f128:	e8 13 fb ff ff       	call   c001ec40 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	b8 00 00 00 00       	mov    eax,0x0
c001f135:	81 c4 70 01 00 00    	add    esp,0x170
c001f13b:	5b                   	pop    ebx
c001f13c:	5e                   	pop    esi
c001f13d:	5f                   	pop    edi
c001f13e:	c3                   	ret    
c001f13f:	90                   	nop

c001f140 <CPU::close(int, int, void*)>:
c001f140:	31 c0                	xor    eax,eax
c001f142:	c3                   	ret    
c001f143:	90                   	nop

c001f144 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f144:	60                   	pusha  
c001f145:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f14d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f151:	9c                   	pushf  
c001f152:	fa                   	cli    
c001f153:	0f 09                	wbinvd 
c001f155:	0f 30                	wrmsr  
c001f157:	9d                   	popf   
c001f158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f15c:	89 02                	mov    DWORD PTR [edx],eax
c001f15e:	61                   	popa   
c001f15f:	c3                   	ret    

c001f160 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f160:	60                   	pusha  
c001f161:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f165:	9c                   	pushf  
c001f166:	fa                   	cli    
c001f167:	0f 09                	wbinvd 
c001f169:	31 c0                	xor    eax,eax
c001f16b:	31 d2                	xor    edx,edx
c001f16d:	0f 32                	rdmsr  
c001f16f:	9d                   	popf   
c001f170:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f174:	89 02                	mov    DWORD PTR [edx],eax
c001f176:	61                   	popa   
c001f177:	c3                   	ret    

c001f178 <CPU::AMD_K6_writeback(int, int, int)>:
c001f178:	56                   	push   esi
c001f179:	53                   	push   ebx
c001f17a:	83 ec 10             	sub    esp,0x10
c001f17d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f181:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f186:	75 5d                	jne    c001f1e5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f188:	83 f8 08             	cmp    eax,0x8
c001f18b:	75 09                	jne    c001f196 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f18d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f192:	7e 13                	jle    c001f1a7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f194:	eb 30                	jmp    c001f1c6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f196:	83 f8 06             	cmp    eax,0x6
c001f199:	7c 4a                	jl     c001f1e5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f19b:	83 f8 07             	cmp    eax,0x7
c001f19e:	7e 07                	jle    c001f1a7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f1a0:	83 f8 09             	cmp    eax,0x9
c001f1a3:	74 21                	je     c001f1c6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f1a5:	eb 3e                	jmp    c001f1e5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f1a7:	89 e6                	mov    esi,esp
c001f1a9:	8b 1d e0 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e0
c001f1af:	56                   	push   esi
c001f1b0:	c1 eb 15             	shr    ebx,0x15
c001f1b3:	68 82 00 00 c0       	push   0xc0000082
c001f1b8:	83 e3 7e             	and    ebx,0x7e
c001f1bb:	e8 a0 ff ff ff       	call   c001f160 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f1c0:	56                   	push   esi
c001f1c1:	6a 00                	push   0x0
c001f1c3:	53                   	push   ebx
c001f1c4:	eb 12                	jmp    c001f1d8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f1c6:	89 e3                	mov    ebx,esp
c001f1c8:	53                   	push   ebx
c001f1c9:	68 82 00 00 c0       	push   0xc0000082
c001f1ce:	e8 8d ff ff ff       	call   c001f160 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f1d3:	53                   	push   ebx
c001f1d4:	6a 00                	push   0x0
c001f1d6:	6a 00                	push   0x0
c001f1d8:	68 82 00 00 c0       	push   0xc0000082
c001f1dd:	e8 62 ff ff ff       	call   c001f144 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f1e2:	83 c4 18             	add    esp,0x18
c001f1e5:	83 c4 10             	add    esp,0x10
c001f1e8:	5b                   	pop    ebx
c001f1e9:	5e                   	pop    esi
c001f1ea:	c3                   	ret    
c001f1eb:	90                   	nop

c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f1ec:	55                   	push   ebp
c001f1ed:	57                   	push   edi
c001f1ee:	56                   	push   esi
c001f1ef:	53                   	push   ebx
c001f1f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1f4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f1f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f1fc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f200:	39 05 98 44 03 c0    	cmp    DWORD PTR ds:0xc0034498,eax
c001f206:	75 23                	jne    c001f22b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f208:	a1 8c 08 04 c0       	mov    eax,ds:0xc004088c
c001f20d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f211:	89 06                	mov    DWORD PTR [esi],eax
c001f213:	a1 88 08 04 c0       	mov    eax,ds:0xc0040888
c001f218:	89 07                	mov    DWORD PTR [edi],eax
c001f21a:	a1 84 08 04 c0       	mov    eax,ds:0xc0040884
c001f21f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f222:	a1 80 08 04 c0       	mov    eax,ds:0xc0040880
c001f227:	89 02                	mov    DWORD PTR [edx],eax
c001f229:	eb 3f                	jmp    c001f26a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f22b:	31 c9                	xor    ecx,ecx
c001f22d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f231:	0f a2                	cpuid  
c001f233:	89 06                	mov    DWORD PTR [esi],eax
c001f235:	89 1f                	mov    DWORD PTR [edi],ebx
c001f237:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f23b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f23e:	89 10                	mov    DWORD PTR [eax],edx
c001f240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f244:	a3 98 44 03 c0       	mov    ds:0xc0034498,eax
c001f249:	8b 06                	mov    eax,DWORD PTR [esi]
c001f24b:	a3 8c 08 04 c0       	mov    ds:0xc004088c,eax
c001f250:	8b 07                	mov    eax,DWORD PTR [edi]
c001f252:	a3 88 08 04 c0       	mov    ds:0xc0040888,eax
c001f257:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f25a:	a3 84 08 04 c0       	mov    ds:0xc0040884,eax
c001f25f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f263:	8b 00                	mov    eax,DWORD PTR [eax]
c001f265:	a3 80 08 04 c0       	mov    ds:0xc0040880,eax
c001f26a:	5b                   	pop    ebx
c001f26b:	5e                   	pop    esi
c001f26c:	5f                   	pop    edi
c001f26d:	5d                   	pop    ebp
c001f26e:	c3                   	ret    
c001f26f:	90                   	nop

c001f270 <CPU::cpuidCheckEDX(unsigned int)>:
c001f270:	83 ec 10             	sub    esp,0x10
c001f273:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f277:	50                   	push   eax
c001f278:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f27c:	50                   	push   eax
c001f27d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f281:	50                   	push   eax
c001f282:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f286:	50                   	push   eax
c001f287:	6a 01                	push   0x1
c001f289:	e8 5e ff ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f28e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f292:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f296:	0f 95 c0             	setne  al
c001f299:	83 c4 24             	add    esp,0x24
c001f29c:	c3                   	ret    
c001f29d:	90                   	nop

c001f29e <CPU::cpuidCheckECX(unsigned int)>:
c001f29e:	83 ec 10             	sub    esp,0x10
c001f2a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2a5:	50                   	push   eax
c001f2a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2aa:	50                   	push   eax
c001f2ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2af:	50                   	push   eax
c001f2b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2b4:	50                   	push   eax
c001f2b5:	6a 01                	push   0x1
c001f2b7:	e8 30 ff ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f2bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2c0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f2c4:	0f 95 c0             	setne  al
c001f2c7:	83 c4 24             	add    esp,0x24
c001f2ca:	c3                   	ret    
c001f2cb:	90                   	nop

c001f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f2cc:	83 ec 10             	sub    esp,0x10
c001f2cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2d3:	50                   	push   eax
c001f2d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2d8:	50                   	push   eax
c001f2d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2dd:	50                   	push   eax
c001f2de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f2e2:	50                   	push   eax
c001f2e3:	6a 07                	push   0x7
c001f2e5:	e8 02 ff ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f2ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f2ee:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f2f2:	0f 95 c0             	setne  al
c001f2f5:	83 c4 24             	add    esp,0x24
c001f2f8:	c3                   	ret    
c001f2f9:	90                   	nop

c001f2fa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f2fa:	83 ec 10             	sub    esp,0x10
c001f2fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f301:	50                   	push   eax
c001f302:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f306:	50                   	push   eax
c001f307:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f30b:	50                   	push   eax
c001f30c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f310:	50                   	push   eax
c001f311:	6a 07                	push   0x7
c001f313:	e8 d4 fe ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f318:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f31c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f320:	0f 95 c0             	setne  al
c001f323:	83 c4 24             	add    esp,0x24
c001f326:	c3                   	ret    
c001f327:	90                   	nop

c001f328 <CPU::CPU()>:
c001f328:	83 ec 0c             	sub    esp,0xc
c001f32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32f:	83 ec 08             	sub    esp,0x8
c001f332:	68 15 2f 03 c0       	push   0xc0032f15
c001f337:	50                   	push   eax
c001f338:	e8 27 c4 ff ff       	call   c001b764 <Device::Device(char const*)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	ba a8 2f 03 c0       	mov    edx,0xc0032fa8
c001f345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f349:	89 10                	mov    DWORD PTR [eax],edx
c001f34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35d:	05 78 01 00 00       	add    eax,0x178
c001f362:	83 ec 0c             	sub    esp,0xc
c001f365:	50                   	push   eax
c001f366:	e8 75 6a ff ff       	call   c0015de0 <GDT::GDT()>
c001f36b:	83 c4 10             	add    esp,0x10
c001f36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f372:	05 7c 09 00 00       	add    eax,0x97c
c001f377:	83 ec 0c             	sub    esp,0xc
c001f37a:	50                   	push   eax
c001f37b:	e8 b0 6c ff ff       	call   c0016030 <IDT::IDT()>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f387:	05 7c 11 00 00       	add    eax,0x117c
c001f38c:	83 ec 0c             	sub    esp,0xc
c001f38f:	50                   	push   eax
c001f390:	e8 af 86 ff ff       	call   c0017a44 <TSS::TSS()>
c001f395:	83 c4 10             	add    esp,0x10
c001f398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f39c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a7:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f3b1:	90                   	nop
c001f3b2:	83 c4 0c             	add    esp,0xc
c001f3b5:	c3                   	ret    

c001f3b6 <CPU::displayFeatures()>:
c001f3b6:	c3                   	ret    
c001f3b7:	90                   	nop

c001f3b8 <CPU::detectFeatures()>:
c001f3b8:	55                   	push   ebp
c001f3b9:	57                   	push   edi
c001f3ba:	56                   	push   esi
c001f3bb:	53                   	push   ebx
c001f3bc:	83 ec 30             	sub    esp,0x30
c001f3bf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f3c3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f3cd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f3d4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f3da:	6a 0d                	push   0xd
c001f3dc:	6a 00                	push   0x0
c001f3de:	55                   	push   ebp
c001f3df:	e8 0c 11 fe ff       	call   c00004f0 <memset>
c001f3e4:	83 c4 10             	add    esp,0x10
c001f3e7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001f3ec:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f3f3:	0f 84 db 05 00 00    	je     c001f9d4 <CPU::detectFeatures()+0x61c>
c001f3f9:	83 ec 0c             	sub    esp,0xc
c001f3fc:	89 ef                	mov    edi,ebp
c001f3fe:	6a 10                	push   0x10
c001f400:	e8 6b fe ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f405:	83 e0 01             	and    eax,0x1
c001f408:	8d 14 00             	lea    edx,[eax+eax*1]
c001f40b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f411:	83 e0 fd             	and    eax,0xfffffffd
c001f414:	09 d0                	or     eax,edx
c001f416:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f41c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f423:	e8 48 fe ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f428:	83 e0 01             	and    eax,0x1
c001f42b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f432:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f438:	83 e0 fb             	and    eax,0xfffffffb
c001f43b:	09 d0                	or     eax,edx
c001f43d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f443:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f44a:	e8 21 fe ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f44f:	83 e0 01             	and    eax,0x1
c001f452:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f459:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f45f:	83 e0 f7             	and    eax,0xfffffff7
c001f462:	09 d0                	or     eax,edx
c001f464:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f46a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f471:	e8 fa fd ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f476:	83 e0 01             	and    eax,0x1
c001f479:	c1 e0 04             	shl    eax,0x4
c001f47c:	89 c2                	mov    edx,eax
c001f47e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f484:	83 e0 ef             	and    eax,0xffffffef
c001f487:	09 d0                	or     eax,edx
c001f489:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f48f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f496:	e8 d5 fd ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f49b:	83 e0 01             	and    eax,0x1
c001f49e:	c1 e0 05             	shl    eax,0x5
c001f4a1:	89 c2                	mov    edx,eax
c001f4a3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4a9:	83 e0 df             	and    eax,0xffffffdf
c001f4ac:	09 d0                	or     eax,edx
c001f4ae:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f4bb:	e8 b0 fd ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f4c0:	83 e0 01             	and    eax,0x1
c001f4c3:	8d 14 00             	lea    edx,[eax+eax*1]
c001f4c6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f4cc:	83 e0 fd             	and    eax,0xfffffffd
c001f4cf:	09 d0                	or     eax,edx
c001f4d1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f4d7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f4de:	e8 8d fd ff ff       	call   c001f270 <CPU::cpuidCheckEDX(unsigned int)>
c001f4e3:	83 e0 01             	and    eax,0x1
c001f4e6:	c1 e0 06             	shl    eax,0x6
c001f4e9:	89 c2                	mov    edx,eax
c001f4eb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4f1:	83 e0 bf             	and    eax,0xffffffbf
c001f4f4:	09 d0                	or     eax,edx
c001f4f6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4fc:	58                   	pop    eax
c001f4fd:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f501:	50                   	push   eax
c001f502:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f506:	50                   	push   eax
c001f507:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f50b:	56                   	push   esi
c001f50c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f510:	50                   	push   eax
c001f511:	6a 00                	push   0x0
c001f513:	e8 d4 fc ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f518:	b8 04 00 00 00       	mov    eax,0x4
c001f51d:	89 c1                	mov    ecx,eax
c001f51f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f521:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f527:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f52b:	89 c1                	mov    ecx,eax
c001f52d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f52f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f535:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f539:	89 c1                	mov    ecx,eax
c001f53b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f53d:	83 c4 18             	add    esp,0x18
c001f540:	68 24 2e 03 c0       	push   0xc0032e24
c001f545:	55                   	push   ebp
c001f546:	e8 05 12 fe ff       	call   c0000750 <strcmp>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	85 c0                	test   eax,eax
c001f550:	75 0f                	jne    c001f561 <CPU::detectFeatures()+0x1a9>
c001f552:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f55c:	e9 22 02 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f561:	50                   	push   eax
c001f562:	50                   	push   eax
c001f563:	68 31 2e 03 c0       	push   0xc0032e31
c001f568:	55                   	push   ebp
c001f569:	e8 e2 11 fe ff       	call   c0000750 <strcmp>
c001f56e:	83 c4 10             	add    esp,0x10
c001f571:	85 c0                	test   eax,eax
c001f573:	74 dd                	je     c001f552 <CPU::detectFeatures()+0x19a>
c001f575:	50                   	push   eax
c001f576:	50                   	push   eax
c001f577:	68 3e 2e 03 c0       	push   0xc0032e3e
c001f57c:	55                   	push   ebp
c001f57d:	e8 ce 11 fe ff       	call   c0000750 <strcmp>
c001f582:	83 c4 10             	add    esp,0x10
c001f585:	85 c0                	test   eax,eax
c001f587:	74 2a                	je     c001f5b3 <CPU::detectFeatures()+0x1fb>
c001f589:	50                   	push   eax
c001f58a:	50                   	push   eax
c001f58b:	68 4b 2e 03 c0       	push   0xc0032e4b
c001f590:	55                   	push   ebp
c001f591:	e8 ba 11 fe ff       	call   c0000750 <strcmp>
c001f596:	83 c4 10             	add    esp,0x10
c001f599:	85 c0                	test   eax,eax
c001f59b:	74 16                	je     c001f5b3 <CPU::detectFeatures()+0x1fb>
c001f59d:	50                   	push   eax
c001f59e:	50                   	push   eax
c001f59f:	68 58 2e 03 c0       	push   0xc0032e58
c001f5a4:	55                   	push   ebp
c001f5a5:	e8 a6 11 fe ff       	call   c0000750 <strcmp>
c001f5aa:	83 c4 10             	add    esp,0x10
c001f5ad:	85 c0                	test   eax,eax
c001f5af:	74 48                	je     c001f5f9 <CPU::detectFeatures()+0x241>
c001f5b1:	eb 0f                	jmp    c001f5c2 <CPU::detectFeatures()+0x20a>
c001f5b3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f5bd:	e9 c1 01 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f5c2:	50                   	push   eax
c001f5c3:	50                   	push   eax
c001f5c4:	68 65 2e 03 c0       	push   0xc0032e65
c001f5c9:	55                   	push   ebp
c001f5ca:	e8 81 11 fe ff       	call   c0000750 <strcmp>
c001f5cf:	83 c4 10             	add    esp,0x10
c001f5d2:	85 c0                	test   eax,eax
c001f5d4:	74 23                	je     c001f5f9 <CPU::detectFeatures()+0x241>
c001f5d6:	57                   	push   edi
c001f5d7:	57                   	push   edi
c001f5d8:	68 72 2e 03 c0       	push   0xc0032e72
c001f5dd:	55                   	push   ebp
c001f5de:	e8 6d 11 fe ff       	call   c0000750 <strcmp>
c001f5e3:	83 c4 10             	add    esp,0x10
c001f5e6:	85 c0                	test   eax,eax
c001f5e8:	75 1e                	jne    c001f608 <CPU::detectFeatures()+0x250>
c001f5ea:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f5f4:	e9 8a 01 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f5f9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f603:	e9 7b 01 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f608:	56                   	push   esi
c001f609:	56                   	push   esi
c001f60a:	68 7f 2e 03 c0       	push   0xc0032e7f
c001f60f:	55                   	push   ebp
c001f610:	e8 3b 11 fe ff       	call   c0000750 <strcmp>
c001f615:	83 c4 10             	add    esp,0x10
c001f618:	85 c0                	test   eax,eax
c001f61a:	75 0f                	jne    c001f62b <CPU::detectFeatures()+0x273>
c001f61c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f626:	e9 58 01 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f62b:	51                   	push   ecx
c001f62c:	51                   	push   ecx
c001f62d:	68 3e 2e 03 c0       	push   0xc0032e3e
c001f632:	55                   	push   ebp
c001f633:	e8 18 11 fe ff       	call   c0000750 <strcmp>
c001f638:	83 c4 10             	add    esp,0x10
c001f63b:	85 c0                	test   eax,eax
c001f63d:	75 0f                	jne    c001f64e <CPU::detectFeatures()+0x296>
c001f63f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f649:	e9 35 01 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f64e:	52                   	push   edx
c001f64f:	52                   	push   edx
c001f650:	68 8c 2e 03 c0       	push   0xc0032e8c
c001f655:	55                   	push   ebp
c001f656:	e8 f5 10 fe ff       	call   c0000750 <strcmp>
c001f65b:	83 c4 10             	add    esp,0x10
c001f65e:	85 c0                	test   eax,eax
c001f660:	75 0f                	jne    c001f671 <CPU::detectFeatures()+0x2b9>
c001f662:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f66c:	e9 12 01 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f671:	50                   	push   eax
c001f672:	50                   	push   eax
c001f673:	68 99 2e 03 c0       	push   0xc0032e99
c001f678:	55                   	push   ebp
c001f679:	e8 d2 10 fe ff       	call   c0000750 <strcmp>
c001f67e:	83 c4 10             	add    esp,0x10
c001f681:	85 c0                	test   eax,eax
c001f683:	75 0f                	jne    c001f694 <CPU::detectFeatures()+0x2dc>
c001f685:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f68f:	e9 ef 00 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f694:	50                   	push   eax
c001f695:	50                   	push   eax
c001f696:	68 a6 2e 03 c0       	push   0xc0032ea6
c001f69b:	55                   	push   ebp
c001f69c:	e8 af 10 fe ff       	call   c0000750 <strcmp>
c001f6a1:	83 c4 10             	add    esp,0x10
c001f6a4:	85 c0                	test   eax,eax
c001f6a6:	75 0f                	jne    c001f6b7 <CPU::detectFeatures()+0x2ff>
c001f6a8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f6b2:	e9 cc 00 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f6b7:	50                   	push   eax
c001f6b8:	50                   	push   eax
c001f6b9:	68 b3 2e 03 c0       	push   0xc0032eb3
c001f6be:	55                   	push   ebp
c001f6bf:	e8 8c 10 fe ff       	call   c0000750 <strcmp>
c001f6c4:	83 c4 10             	add    esp,0x10
c001f6c7:	85 c0                	test   eax,eax
c001f6c9:	75 0f                	jne    c001f6da <CPU::detectFeatures()+0x322>
c001f6cb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f6d5:	e9 a9 00 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f6da:	50                   	push   eax
c001f6db:	50                   	push   eax
c001f6dc:	68 c0 2e 03 c0       	push   0xc0032ec0
c001f6e1:	55                   	push   ebp
c001f6e2:	e8 69 10 fe ff       	call   c0000750 <strcmp>
c001f6e7:	83 c4 10             	add    esp,0x10
c001f6ea:	85 c0                	test   eax,eax
c001f6ec:	75 0f                	jne    c001f6fd <CPU::detectFeatures()+0x345>
c001f6ee:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f6f8:	e9 86 00 00 00       	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f6fd:	50                   	push   eax
c001f6fe:	50                   	push   eax
c001f6ff:	68 cd 2e 03 c0       	push   0xc0032ecd
c001f704:	55                   	push   ebp
c001f705:	e8 46 10 fe ff       	call   c0000750 <strcmp>
c001f70a:	83 c4 10             	add    esp,0x10
c001f70d:	85 c0                	test   eax,eax
c001f70f:	75 0c                	jne    c001f71d <CPU::detectFeatures()+0x365>
c001f711:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f71b:	eb 66                	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f71d:	50                   	push   eax
c001f71e:	50                   	push   eax
c001f71f:	68 da 2e 03 c0       	push   0xc0032eda
c001f724:	55                   	push   ebp
c001f725:	e8 26 10 fe ff       	call   c0000750 <strcmp>
c001f72a:	83 c4 10             	add    esp,0x10
c001f72d:	85 c0                	test   eax,eax
c001f72f:	75 0c                	jne    c001f73d <CPU::detectFeatures()+0x385>
c001f731:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f73b:	eb 46                	jmp    c001f783 <CPU::detectFeatures()+0x3cb>
c001f73d:	57                   	push   edi
c001f73e:	57                   	push   edi
c001f73f:	68 e7 2e 03 c0       	push   0xc0032ee7
c001f744:	55                   	push   ebp
c001f745:	e8 06 10 fe ff       	call   c0000750 <strcmp>
c001f74a:	83 c4 10             	add    esp,0x10
c001f74d:	85 c0                	test   eax,eax
c001f74f:	74 e0                	je     c001f731 <CPU::detectFeatures()+0x379>
c001f751:	56                   	push   esi
c001f752:	56                   	push   esi
c001f753:	68 f4 2e 03 c0       	push   0xc0032ef4
c001f758:	55                   	push   ebp
c001f759:	e8 f2 0f fe ff       	call   c0000750 <strcmp>
c001f75e:	83 c4 10             	add    esp,0x10
c001f761:	85 c0                	test   eax,eax
c001f763:	74 cc                	je     c001f731 <CPU::detectFeatures()+0x379>
c001f765:	51                   	push   ecx
c001f766:	51                   	push   ecx
c001f767:	68 01 2f 03 c0       	push   0xc0032f01
c001f76c:	55                   	push   ebp
c001f76d:	e8 de 0f fe ff       	call   c0000750 <strcmp>
c001f772:	83 c4 10             	add    esp,0x10
c001f775:	85 c0                	test   eax,eax
c001f777:	74 b8                	je     c001f731 <CPU::detectFeatures()+0x379>
c001f779:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f783:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f788:	0f 86 be 00 00 00    	jbe    c001f84c <CPU::detectFeatures()+0x494>
c001f78e:	83 ec 0c             	sub    esp,0xc
c001f791:	68 80 00 00 00       	push   0x80
c001f796:	e8 31 fb ff ff       	call   c001f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f79b:	83 e0 01             	and    eax,0x1
c001f79e:	c1 e0 06             	shl    eax,0x6
c001f7a1:	89 c2                	mov    edx,eax
c001f7a3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f7a9:	83 e0 bf             	and    eax,0xffffffbf
c001f7ac:	09 d0                	or     eax,edx
c001f7ae:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f7b4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f7bb:	e8 0c fb ff ff       	call   c001f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7c0:	83 e0 01             	and    eax,0x1
c001f7c3:	c1 e0 04             	shl    eax,0x4
c001f7c6:	89 c2                	mov    edx,eax
c001f7c8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f7ce:	83 e0 ef             	and    eax,0xffffffef
c001f7d1:	09 d0                	or     eax,edx
c001f7d3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f7d9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f7e0:	e8 e7 fa ff ff       	call   c001f2cc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f7e5:	89 c2                	mov    edx,eax
c001f7e7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f7ed:	c1 e2 07             	shl    edx,0x7
c001f7f0:	83 e0 7f             	and    eax,0x7f
c001f7f3:	09 d0                	or     eax,edx
c001f7f5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f7fb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f802:	e8 f3 fa ff ff       	call   c001f2fa <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f807:	83 e0 01             	and    eax,0x1
c001f80a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f811:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f817:	83 e0 f7             	and    eax,0xfffffff7
c001f81a:	09 d0                	or     eax,edx
c001f81c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f822:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f829:	e8 cc fa ff ff       	call   c001f2fa <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f82e:	83 c4 10             	add    esp,0x10
c001f831:	83 e0 01             	and    eax,0x1
c001f834:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f83b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f841:	83 e0 fb             	and    eax,0xfffffffb
c001f844:	09 d0                	or     eax,edx
c001f846:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f84c:	83 ec 0c             	sub    esp,0xc
c001f84f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f853:	50                   	push   eax
c001f854:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f858:	50                   	push   eax
c001f859:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f85d:	57                   	push   edi
c001f85e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f862:	56                   	push   esi
c001f863:	6a 01                	push   0x1
c001f865:	e8 82 f9 ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f86a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f86e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f874:	89 c1                	mov    ecx,eax
c001f876:	83 e2 f0             	and    edx,0xfffffff0
c001f879:	83 e1 0f             	and    ecx,0xf
c001f87c:	09 ca                	or     edx,ecx
c001f87e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f884:	89 c2                	mov    edx,eax
c001f886:	c1 ea 04             	shr    edx,0x4
c001f889:	83 e2 0f             	and    edx,0xf
c001f88c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f890:	89 d1                	mov    ecx,edx
c001f892:	83 c4 20             	add    esp,0x20
c001f895:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f89b:	c1 e1 06             	shl    ecx,0x6
c001f89e:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f8a4:	09 ca                	or     edx,ecx
c001f8a6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f8ad:	89 c2                	mov    edx,eax
c001f8af:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f8b5:	c1 ea 08             	shr    edx,0x8
c001f8b8:	83 e1 3f             	and    ecx,0x3f
c001f8bb:	83 e2 0f             	and    edx,0xf
c001f8be:	89 d5                	mov    ebp,edx
c001f8c0:	83 e5 03             	and    ebp,0x3
c001f8c3:	c1 e5 06             	shl    ebp,0x6
c001f8c6:	09 e9                	or     ecx,ebp
c001f8c8:	89 d5                	mov    ebp,edx
c001f8ca:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f8d0:	c1 ed 02             	shr    ebp,0x2
c001f8d3:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f8d9:	83 e1 c0             	and    ecx,0xffffffc0
c001f8dc:	09 e9                	or     ecx,ebp
c001f8de:	89 c5                	mov    ebp,eax
c001f8e0:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f8e6:	c1 ed 08             	shr    ebp,0x8
c001f8e9:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f8ef:	83 e5 30             	and    ebp,0x30
c001f8f2:	83 e1 cf             	and    ecx,0xffffffcf
c001f8f5:	09 e9                	or     ecx,ebp
c001f8f7:	83 fa 06             	cmp    edx,0x6
c001f8fa:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f900:	74 05                	je     c001f907 <CPU::detectFeatures()+0x54f>
c001f902:	83 fa 0f             	cmp    edx,0xf
c001f905:	75 64                	jne    c001f96b <CPU::detectFeatures()+0x5b3>
c001f907:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f90d:	89 c1                	mov    ecx,eax
c001f90f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f915:	c1 e9 10             	shr    ecx,0x10
c001f918:	c1 e1 04             	shl    ecx,0x4
c001f91b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f91f:	0f b6 c9             	movzx  ecx,cl
c001f922:	c1 e1 06             	shl    ecx,0x6
c001f925:	09 e9                	or     ecx,ebp
c001f927:	83 fa 0f             	cmp    edx,0xf
c001f92a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f931:	75 38                	jne    c001f96b <CPU::detectFeatures()+0x5b3>
c001f933:	c1 e8 14             	shr    eax,0x14
c001f936:	83 c0 0f             	add    eax,0xf
c001f939:	0f b6 c0             	movzx  eax,al
c001f93c:	89 c2                	mov    edx,eax
c001f93e:	c1 e8 02             	shr    eax,0x2
c001f941:	83 e2 03             	and    edx,0x3
c001f944:	89 d1                	mov    ecx,edx
c001f946:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f94c:	c1 e1 06             	shl    ecx,0x6
c001f94f:	83 e2 3f             	and    edx,0x3f
c001f952:	09 ca                	or     edx,ecx
c001f954:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f95a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f960:	83 e2 c0             	and    edx,0xffffffc0
c001f963:	09 d0                	or     eax,edx
c001f965:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f96b:	83 ec 0c             	sub    esp,0xc
c001f96e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f974:	83 c8 07             	or     eax,0x7
c001f977:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f97d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f981:	50                   	push   eax
c001f982:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f986:	55                   	push   ebp
c001f987:	57                   	push   edi
c001f988:	56                   	push   esi
c001f989:	68 00 00 00 80       	push   0x80000000
c001f98e:	e8 59 f8 ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f993:	83 c4 20             	add    esp,0x20
c001f996:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f99e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9a2:	76 1e                	jbe    c001f9c2 <CPU::detectFeatures()+0x60a>
c001f9a4:	83 ec 0c             	sub    esp,0xc
c001f9a7:	50                   	push   eax
c001f9a8:	55                   	push   ebp
c001f9a9:	57                   	push   edi
c001f9aa:	56                   	push   esi
c001f9ab:	68 01 00 00 80       	push   0x80000001
c001f9b0:	e8 37 f8 ff ff       	call   c001f1ec <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f9b5:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f9bf:	83 c4 20             	add    esp,0x20
c001f9c2:	52                   	push   edx
c001f9c3:	52                   	push   edx
c001f9c4:	68 0d 2f 03 c0       	push   0xc0032f0d
c001f9c9:	53                   	push   ebx
c001f9ca:	e8 87 bd ff ff       	call   c001b756 <Device::setName(char const*)>
c001f9cf:	83 c4 10             	add    esp,0x10
c001f9d2:	eb 69                	jmp    c001fa3d <CPU::detectFeatures()+0x685>
c001f9d4:	50                   	push   eax
c001f9d5:	50                   	push   eax
c001f9d6:	68 72 2e 03 c0       	push   0xc0032e72
c001f9db:	55                   	push   ebp
c001f9dc:	e8 5f 0c fe ff       	call   c0000640 <strcpy>
c001f9e1:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f9eb:	e8 d3 07 fe ff       	call   c00001c3 <is486>
c001f9f0:	83 c4 10             	add    esp,0x10
c001f9f3:	85 c0                	test   eax,eax
c001f9f5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f9fb:	74 1f                	je     c001fa1c <CPU::detectFeatures()+0x664>
c001f9fd:	83 c8 07             	or     eax,0x7
c001fa00:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001fa06:	0f 20 c0             	mov    eax,cr0
c001fa09:	83 e0 14             	and    eax,0x14
c001fa0c:	83 f8 04             	cmp    eax,0x4
c001fa0f:	75 10                	jne    c001fa21 <CPU::detectFeatures()+0x669>
c001fa11:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa17:	83 e0 fd             	and    eax,0xfffffffd
c001fa1a:	eb 1b                	jmp    c001fa37 <CPU::detectFeatures()+0x67f>
c001fa1c:	83 e0 f8             	and    eax,0xfffffff8
c001fa1f:	eb df                	jmp    c001fa00 <CPU::detectFeatures()+0x648>
c001fa21:	e8 78 07 fe ff       	call   c000019e <hasLegacyFPU>
c001fa26:	83 e0 01             	and    eax,0x1
c001fa29:	8d 14 00             	lea    edx,[eax+eax*1]
c001fa2c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa32:	83 e0 fd             	and    eax,0xfffffffd
c001fa35:	09 d0                	or     eax,edx
c001fa37:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001fa3d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001fa44:	74 17                	je     c001fa5d <CPU::detectFeatures()+0x6a5>
c001fa46:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001fa4c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001fa52:	83 c8 10             	or     eax,0x10
c001fa55:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001fa5b:	eb 20                	jmp    c001fa7d <CPU::detectFeatures()+0x6c5>
c001fa5d:	e8 3c 07 fe ff       	call   c000019e <hasLegacyFPU>
c001fa62:	83 e0 01             	and    eax,0x1
c001fa65:	8d 14 00             	lea    edx,[eax+eax*1]
c001fa68:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001fa6e:	83 e0 fd             	and    eax,0xfffffffd
c001fa71:	09 d0                	or     eax,edx
c001fa73:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001fa79:	a8 02                	test   al,0x2
c001fa7b:	75 c9                	jne    c001fa46 <CPU::detectFeatures()+0x68e>
c001fa7d:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001fa84:	83 c4 2c             	add    esp,0x2c
c001fa87:	5b                   	pop    ebx
c001fa88:	5e                   	pop    esi
c001fa89:	5f                   	pop    edi
c001fa8a:	5d                   	pop    ebp
c001fa8b:	c3                   	ret    

c001fa8c <CPU::setupSMEP()>:
c001fa8c:	0f 20 e0             	mov    eax,cr4
c001fa8f:	0d 00 00 10 00       	or     eax,0x100000
c001fa94:	0f 22 e0             	mov    cr4,eax
c001fa97:	c3                   	ret    

c001fa98 <CPU::setupUMIP()>:
c001fa98:	0f 20 e0             	mov    eax,cr4
c001fa9b:	80 cc 08             	or     ah,0x8
c001fa9e:	0f 22 e0             	mov    cr4,eax
c001faa1:	c3                   	ret    

c001faa2 <CPU::setupTSC()>:
c001faa2:	0f 20 e0             	mov    eax,cr4
c001faa5:	83 c8 04             	or     eax,0x4
c001faa8:	0f 22 e0             	mov    cr4,eax
c001faab:	c3                   	ret    

c001faac <CPU::setupLargePages()>:
c001faac:	0f 20 e0             	mov    eax,cr4
c001faaf:	83 c8 10             	or     eax,0x10
c001fab2:	0f 22 e0             	mov    cr4,eax
c001fab5:	c3                   	ret    

c001fab6 <CPU::setupPAT()>:
c001fab6:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001fabb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001fac2:	74 2c                	je     c001faf0 <CPU::setupPAT()+0x3a>
c001fac4:	53                   	push   ebx
c001fac5:	83 ec 10             	sub    esp,0x10
c001fac8:	68 77 02 00 00       	push   0x277
c001facd:	50                   	push   eax
c001face:	e8 71 60 ff ff       	call   c0015b44 <Computer::rdmsr(unsigned int)>
c001fad3:	83 e2 f8             	and    edx,0xfffffff8
c001fad6:	83 ca 01             	or     edx,0x1
c001fad9:	52                   	push   edx
c001fada:	50                   	push   eax
c001fadb:	68 77 02 00 00       	push   0x277
c001fae0:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001fae6:	e8 85 60 ff ff       	call   c0015b70 <Computer::wrmsr(unsigned int, unsigned long long)>
c001faeb:	83 c4 28             	add    esp,0x28
c001faee:	5b                   	pop    ebx
c001faef:	c3                   	ret    
c001faf0:	c3                   	ret    
c001faf1:	90                   	nop

c001faf2 <CPU::setupMTRR()>:
c001faf2:	c3                   	ret    
c001faf3:	90                   	nop

c001faf4 <CPU::setupGlobalPages()>:
c001faf4:	0f 20 e0             	mov    eax,cr4
c001faf7:	0c 80                	or     al,0x80
c001faf9:	0f 22 e0             	mov    cr4,eax
c001fafc:	c3                   	ret    
c001fafd:	90                   	nop

c001fafe <CPU::allowUsermodeDataAccess()>:
c001fafe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb02:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fb09:	74 03                	je     c001fb0e <CPU::allowUsermodeDataAccess()+0x10>
c001fb0b:	0f 01 cb             	stac   
c001fb0e:	c3                   	ret    
c001fb0f:	90                   	nop

c001fb10 <CPU::prohibitUsermodeDataAccess()>:
c001fb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb14:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fb1b:	74 03                	je     c001fb20 <CPU::prohibitUsermodeDataAccess()+0x10>
c001fb1d:	0f 01 ca             	clac   
c001fb20:	c3                   	ret    
c001fb21:	90                   	nop

c001fb22 <CPU::setupSMAP()>:
c001fb22:	0f 20 e0             	mov    eax,cr4
c001fb25:	0d 00 00 20 00       	or     eax,0x200000
c001fb2a:	0f 22 e0             	mov    cr4,eax
c001fb2d:	eb e1                	jmp    c001fb10 <CPU::prohibitUsermodeDataAccess()>
c001fb2f:	90                   	nop

c001fb30 <CPU::setupFeatures()>:
c001fb30:	53                   	push   ebx
c001fb31:	83 ec 08             	sub    esp,0x8
c001fb34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb38:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001fb3f:	74 18                	je     c001fb59 <CPU::setupFeatures()+0x29>
c001fb41:	83 ec 0c             	sub    esp,0xc
c001fb44:	68 19 2f 03 c0       	push   0xc0032f19
c001fb49:	e8 f7 98 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fb4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb51:	e8 42 ff ff ff       	call   c001fa98 <CPU::setupUMIP()>
c001fb56:	83 c4 10             	add    esp,0x10
c001fb59:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fb60:	74 18                	je     c001fb7a <CPU::setupFeatures()+0x4a>
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	68 23 2f 03 c0       	push   0xc0032f23
c001fb6a:	e8 d6 98 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fb6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb72:	e8 2b ff ff ff       	call   c001faa2 <CPU::setupTSC()>
c001fb77:	83 c4 10             	add    esp,0x10
c001fb7a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fb81:	74 18                	je     c001fb9b <CPU::setupFeatures()+0x6b>
c001fb83:	83 ec 0c             	sub    esp,0xc
c001fb86:	68 2c 2f 03 c0       	push   0xc0032f2c
c001fb8b:	e8 b5 98 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fb90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb93:	e8 14 ff ff ff       	call   c001faac <CPU::setupLargePages()>
c001fb98:	83 c4 10             	add    esp,0x10
c001fb9b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001fba2:	74 18                	je     c001fbbc <CPU::setupFeatures()+0x8c>
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	68 35 2f 03 c0       	push   0xc0032f35
c001fbac:	e8 94 98 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fbb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbb4:	e8 3b ff ff ff       	call   c001faf4 <CPU::setupGlobalPages()>
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fbc3:	74 18                	je     c001fbdd <CPU::setupFeatures()+0xad>
c001fbc5:	83 ec 0c             	sub    esp,0xc
c001fbc8:	68 47 2f 03 c0       	push   0xc0032f47
c001fbcd:	e8 73 98 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fbd2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbd5:	e8 dc fe ff ff       	call   c001fab6 <CPU::setupPAT()>
c001fbda:	83 c4 10             	add    esp,0x10
c001fbdd:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fbe4:	74 11                	je     c001fbf7 <CPU::setupFeatures()+0xc7>
c001fbe6:	c7 44 24 10 50 2f 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032f50
c001fbee:	83 c4 08             	add    esp,0x8
c001fbf1:	5b                   	pop    ebx
c001fbf2:	e9 4e 98 ff ff       	jmp    c0019445 <Dbg::kprintf(char const*, ...)>
c001fbf7:	83 c4 08             	add    esp,0x8
c001fbfa:	5b                   	pop    ebx
c001fbfb:	c3                   	ret    

c001fbfc <CPU::open(int, int, void*)>:
c001fbfc:	55                   	push   ebp
c001fbfd:	57                   	push   edi
c001fbfe:	56                   	push   esi
c001fbff:	53                   	push   ebx
c001fc00:	83 ec 18             	sub    esp,0x18
c001fc03:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fc07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fc0b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fc0f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fc15:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fc1b:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fc21:	50                   	push   eax
c001fc22:	e8 1b 62 ff ff       	call   c0015e42 <GDT::setup()>
c001fc27:	83 c4 0c             	add    esp,0xc
c001fc2a:	6a 00                	push   0x0
c001fc2c:	68 ef be ad de       	push   0xdeadbeef
c001fc31:	55                   	push   ebp
c001fc32:	e8 51 7e ff ff       	call   c0017a88 <TSS::setup(unsigned long, unsigned long)>
c001fc37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fc3a:	e8 29 7e ff ff       	call   c0017a68 <TSS::flush()>
c001fc3f:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fc45:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc48:	e8 59 64 ff ff       	call   c00160a6 <IDT::setup()>
c001fc4d:	b8 00 04 00 00       	mov    eax,0x400
c001fc52:	0f 23 f8             	mov    db7,eax
c001fc55:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fc5f:	e8 5c 6c ff ff       	call   c00168c0 <Phys::allocatePage()>
c001fc64:	83 c4 10             	add    esp,0x10
c001fc67:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fc6d:	85 f6                	test   esi,esi
c001fc6f:	89 38                	mov    DWORD PTR [eax],edi
c001fc71:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fc77:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fc7a:	74 10                	je     c001fc8c <CPU::open(int, int, void*)+0x90>
c001fc7c:	50                   	push   eax
c001fc7d:	50                   	push   eax
c001fc7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc84:	56                   	push   esi
c001fc85:	e8 24 87 ff ff       	call   c00183ae <VAS::setCPUSpecific(unsigned long)>
c001fc8a:	eb 0d                	jmp    c001fc99 <CPU::open(int, int, void*)+0x9d>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	68 5a 2f 03 c0       	push   0xc0032f5a
c001fc94:	e8 e5 0a 00 00       	call   c002077e <KePanic(char const*)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	83 ec 0c             	sub    esp,0xc
c001fc9f:	68 68 2f 03 c0       	push   0xc0032f68
c001fca4:	e8 8e 01 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001fca9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcac:	e8 07 f7 ff ff       	call   c001f3b8 <CPU::detectFeatures()>
c001fcb1:	c7 04 24 8b 2f 03 c0 	mov    DWORD PTR [esp],0xc0032f8b
c001fcb8:	e8 7a 01 00 00       	call   c001fe37 <KeSetBootMessage(char const*)>
c001fcbd:	e8 cc 79 00 00       	call   c002768e <HalInitialise()>
c001fcc2:	a1 d4 b9 03 c0       	mov    eax,ds:0xc003b9d4
c001fcc7:	83 e0 10             	and    eax,0x10
c001fcca:	83 f8 01             	cmp    eax,0x1
c001fccd:	19 c0                	sbb    eax,eax
c001fccf:	83 e0 46             	and    eax,0x46
c001fcd2:	83 c0 1e             	add    eax,0x1e
c001fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcd8:	e8 5c d3 ff ff       	call   c001d039 <setupTimer(int)>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fce6:	f6 05 d4 b9 03 c0 20 	test   BYTE PTR ds:0xc003b9d4,0x20
c001fced:	74 0c                	je     c001fcfb <CPU::open(int, int, void*)+0xff>
c001fcef:	83 ec 0c             	sub    esp,0xc
c001fcf2:	53                   	push   ebx
c001fcf3:	e8 38 fe ff ff       	call   c001fb30 <CPU::setupFeatures()>
c001fcf8:	83 c4 10             	add    esp,0x10
c001fcfb:	83 c4 0c             	add    esp,0xc
c001fcfe:	31 c0                	xor    eax,eax
c001fd00:	5b                   	pop    ebx
c001fd01:	5e                   	pop    esi
c001fd02:	5f                   	pop    edi
c001fd03:	5d                   	pop    ebp
c001fd04:	c3                   	ret    

c001fd05 <KeInitialiseAtexit()>:
c001fd05:	83 ec 10             	sub    esp,0x10
c001fd08:	c7 05 a0 08 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00408a0,0x0
c001fd12:	6a 60                	push   0x60
c001fd14:	6a 00                	push   0x0
c001fd16:	68 20 09 04 c0       	push   0xc0040920
c001fd1b:	e8 d0 07 fe ff       	call   c00004f0 <memset>
c001fd20:	83 c4 1c             	add    esp,0x1c
c001fd23:	c3                   	ret    

c001fd24 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fd24:	a1 a0 08 04 c0       	mov    eax,ds:0xc00408a0
c001fd29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fd2d:	89 14 85 20 09 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf6e0],edx
c001fd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd38:	89 14 85 c0 08 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf740],edx
c001fd3f:	40                   	inc    eax
c001fd40:	a3 a0 08 04 c0       	mov    ds:0xc00408a0,eax
c001fd45:	83 f8 17             	cmp    eax,0x17
c001fd48:	7e 0d                	jle    c001fd57 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fd4a:	c7 44 24 04 cc 2f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032fcc
c001fd52:	e9 27 0a 00 00       	jmp    c002077e <KePanic(char const*)>
c001fd57:	c3                   	ret    

c001fd58 <KeExecuteAtexit()>:
c001fd58:	53                   	push   ebx
c001fd59:	31 db                	xor    ebx,ebx
c001fd5b:	83 ec 08             	sub    esp,0x8
c001fd5e:	39 1d a0 08 04 c0    	cmp    DWORD PTR ds:0xc00408a0,ebx
c001fd64:	7e 50                	jle    c001fdb6 <KeExecuteAtexit()+0x5e>
c001fd66:	8b 04 9d 20 09 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf6e0]
c001fd6d:	85 c0                	test   eax,eax
c001fd6f:	74 42                	je     c001fdb3 <KeExecuteAtexit()+0x5b>
c001fd71:	51                   	push   ecx
c001fd72:	50                   	push   eax
c001fd73:	53                   	push   ebx
c001fd74:	68 e5 2f 03 c0       	push   0xc0032fe5
c001fd79:	e8 c7 96 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fd7e:	58                   	pop    eax
c001fd7f:	ff 34 9d c0 08 04 c0 	push   DWORD PTR [ebx*4-0x3ffbf740]
c001fd86:	ff 14 9d 20 09 04 c0 	call   DWORD PTR [ebx*4-0x3ffbf6e0]
c001fd8d:	c7 04 24 07 30 03 c0 	mov    DWORD PTR [esp],0xc0033007
c001fd94:	e8 ac 96 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fd99:	c7 04 24 33 42 03 c0 	mov    DWORD PTR [esp],0xc0034233
c001fda0:	c7 04 9d 20 09 04 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffbf6e0],0x0
c001fdab:	e8 95 96 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fdb0:	83 c4 10             	add    esp,0x10
c001fdb3:	43                   	inc    ebx
c001fdb4:	eb a8                	jmp    c001fd5e <KeExecuteAtexit()+0x6>
c001fdb6:	83 c4 08             	add    esp,0x8
c001fdb9:	5b                   	pop    ebx
c001fdba:	c3                   	ret    

c001fdbb <KeDisplaySplashScreen()>:
c001fdbb:	55                   	push   ebp
c001fdbc:	bd 05 00 00 00       	mov    ebp,0x5
c001fdc1:	57                   	push   edi
c001fdc2:	bf 0a 00 00 00       	mov    edi,0xa
c001fdc7:	56                   	push   esi
c001fdc8:	31 f6                	xor    esi,esi
c001fdca:	53                   	push   ebx
c001fdcb:	31 db                	xor    ebx,ebx
c001fdcd:	83 ec 0c             	sub    esp,0xc
c001fdd0:	0f b6 96 a0 44 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcbb60]
c001fdd7:	89 d0                	mov    eax,edx
c001fdd9:	85 d2                	test   edx,edx
c001fddb:	74 52                	je     c001fe2f <KeDisplaySplashScreen()+0x74>
c001fddd:	80 bb d6 44 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcbb2a],0xdb
c001fde4:	75 13                	jne    c001fdf9 <KeDisplaySplashScreen()+0x3e>
c001fde6:	0f b6 8b d5 44 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcbb2b]
c001fded:	83 e1 fe             	and    ecx,0xfffffffe
c001fdf0:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fdf6:	75 01                	jne    c001fdf9 <KeDisplaySplashScreen()+0x3e>
c001fdf8:	47                   	inc    edi
c001fdf9:	83 fa 0d             	cmp    edx,0xd
c001fdfc:	74 28                	je     c001fe26 <KeDisplaySplashScreen()+0x6b>
c001fdfe:	83 fa 0a             	cmp    edx,0xa
c001fe01:	75 0a                	jne    c001fe0d <KeDisplaySplashScreen()+0x52>
c001fe03:	45                   	inc    ebp
c001fe04:	bf 0a 00 00 00       	mov    edi,0xa
c001fe09:	31 db                	xor    ebx,ebx
c001fe0b:	eb 19                	jmp    c001fe26 <KeDisplaySplashScreen()+0x6b>
c001fe0d:	83 ec 0c             	sub    esp,0xc
c001fe10:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fe13:	55                   	push   ebp
c001fe14:	0f be c0             	movsx  eax,al
c001fe17:	52                   	push   edx
c001fe18:	43                   	inc    ebx
c001fe19:	6a 00                	push   0x0
c001fe1b:	6a 0e                	push   0xe
c001fe1d:	50                   	push   eax
c001fe1e:	e8 ed 84 00 00       	call   c0028310 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fe23:	83 c4 20             	add    esp,0x20
c001fe26:	46                   	inc    esi
c001fe27:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fe2d:	75 a1                	jne    c001fdd0 <KeDisplaySplashScreen()+0x15>
c001fe2f:	83 c4 0c             	add    esp,0xc
c001fe32:	5b                   	pop    ebx
c001fe33:	5e                   	pop    esi
c001fe34:	5f                   	pop    edi
c001fe35:	5d                   	pop    ebp
c001fe36:	c3                   	ret    

c001fe37 <KeSetBootMessage(char const*)>:
c001fe37:	57                   	push   edi
c001fe38:	56                   	push   esi
c001fe39:	53                   	push   ebx
c001fe3a:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fe40:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fe47:	68 9e 00 00 00       	push   0x9e
c001fe4c:	6a 00                	push   0x0
c001fe4e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fe52:	56                   	push   esi
c001fe53:	e8 98 06 fe ff       	call   c00004f0 <memset>
c001fe58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe5b:	e8 10 07 fe ff       	call   c0000570 <strlen>
c001fe60:	ba 50 00 00 00       	mov    edx,0x50
c001fe65:	83 c4 10             	add    esp,0x10
c001fe68:	29 c2                	sub    edx,eax
c001fe6a:	31 c9                	xor    ecx,ecx
c001fe6c:	83 e2 fe             	and    edx,0xfffffffe
c001fe6f:	01 f2                	add    edx,esi
c001fe71:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fe76:	84 c0                	test   al,al
c001fe78:	74 0a                	je     c001fe84 <KeSetBootMessage(char const*)+0x4d>
c001fe7a:	80 cc 0f             	or     ah,0xf
c001fe7d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fe81:	41                   	inc    ecx
c001fe82:	eb ed                	jmp    c001fe71 <KeSetBootMessage(char const*)+0x3a>
c001fe84:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fe89:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fe8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe90:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fe96:	5b                   	pop    ebx
c001fe97:	5e                   	pop    esi
c001fe98:	5f                   	pop    edi
c001fe99:	c3                   	ret    
c001fe9a:	66 90                	xchg   ax,ax

c001fe9c <CUnlockScheduler>:
c001fe9c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001fea1:	83 e8 01             	sub    eax,0x1
c001fea4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001fea9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001feae:	85 c0                	test   eax,eax
c001feb0:	75 02                	jne    c001feb4 <CUnlockScheduler+0x18>
c001feb2:	fb                   	sti    
c001feb3:	90                   	nop
c001feb4:	90                   	nop
c001feb5:	c3                   	ret    
c001feb6:	66 90                	xchg   ax,ax

c001feb8 <CLockScheduler>:
c001feb8:	fa                   	cli    
c001feb9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001febe:	83 c0 01             	add    eax,0x1
c001fec1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001fec6:	90                   	nop
c001fec7:	c3                   	ret    

c001fec8 <CPrintf>:
c001fec8:	83 ec 0c             	sub    esp,0xc
c001fecb:	83 ec 08             	sub    esp,0x8
c001fece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fed2:	68 70 01 03 c0       	push   0xc0030170
c001fed7:	e8 69 95 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c001fedc:	83 c4 10             	add    esp,0x10
c001fedf:	90                   	nop
c001fee0:	83 c4 0c             	add    esp,0xc
c001fee3:	c3                   	ret    

c001fee4 <Krnl::handlePowerButton()>:
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	e8 ed 08 00 00       	call   c00207d9 <KeHandlePowerButton()>
c001feec:	90                   	nop
c001feed:	83 c4 0c             	add    esp,0xc
c001fef0:	c3                   	ret    
c001fef1:	8d 76 00             	lea    esi,[esi+0x0]

c001fef4 <Krnl::handleSleepButton()>:
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	e8 12 09 00 00       	call   c002080e <KeHandleSleepButton()>
c001fefc:	90                   	nop
c001fefd:	83 c4 0c             	add    esp,0xc
c001ff00:	c3                   	ret    

c001ff01 <KeCalculateCRC32(unsigned char*, int)>:
c001ff01:	53                   	push   ebx
c001ff02:	83 c8 ff             	or     eax,0xffffffff
c001ff05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ff09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ff0d:	01 cb                	add    ebx,ecx
c001ff0f:	39 d9                	cmp    ecx,ebx
c001ff11:	74 15                	je     c001ff28 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001ff13:	41                   	inc    ecx
c001ff14:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001ff17:	31 c2                	xor    edx,eax
c001ff19:	c1 e8 08             	shr    eax,0x8
c001ff1c:	0f b6 d2             	movzx  edx,dl
c001ff1f:	33 04 95 00 46 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcba00]
c001ff26:	eb e7                	jmp    c001ff0f <KeCalculateCRC32(unsigned char*, int)+0xe>
c001ff28:	f7 d0                	not    eax
c001ff2a:	5b                   	pop    ebx
c001ff2b:	c3                   	ret    

c001ff2c <EnvVarContainer::getEnv(char const*)>:
c001ff2c:	57                   	push   edi
c001ff2d:	56                   	push   esi
c001ff2e:	53                   	push   ebx
c001ff2f:	31 db                	xor    ebx,ebx
c001ff31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff35:	39 1e                	cmp    DWORD PTR [esi],ebx
c001ff37:	7e 2b                	jle    c001ff64 <EnvVarContainer::getEnv(char const*)+0x38>
c001ff39:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001ff40:	50                   	push   eax
c001ff41:	50                   	push   eax
c001ff42:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff45:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001ff48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ff4c:	e8 ff 07 fe ff       	call   c0000750 <strcmp>
c001ff51:	83 c4 10             	add    esp,0x10
c001ff54:	85 c0                	test   eax,eax
c001ff56:	75 09                	jne    c001ff61 <EnvVarContainer::getEnv(char const*)+0x35>
c001ff58:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001ff5b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001ff5f:	eb 05                	jmp    c001ff66 <EnvVarContainer::getEnv(char const*)+0x3a>
c001ff61:	43                   	inc    ebx
c001ff62:	eb d1                	jmp    c001ff35 <EnvVarContainer::getEnv(char const*)+0x9>
c001ff64:	31 c0                	xor    eax,eax
c001ff66:	5b                   	pop    ebx
c001ff67:	5e                   	pop    esi
c001ff68:	5f                   	pop    edi
c001ff69:	c3                   	ret    

c001ff6a <EnvVarContainer::setEnv(char const*, char const*)>:
c001ff6a:	55                   	push   ebp
c001ff6b:	57                   	push   edi
c001ff6c:	56                   	push   esi
c001ff6d:	53                   	push   ebx
c001ff6e:	83 ec 28             	sub    esp,0x28
c001ff71:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001ff75:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ff79:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ff7d:	56                   	push   esi
c001ff7e:	e8 ed 05 fe ff       	call   c0000570 <strlen>
c001ff83:	40                   	inc    eax
c001ff84:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff87:	e8 2b 66 ff ff       	call   c00165b7 <malloc>
c001ff8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff93:	e8 d8 05 fe ff       	call   c0000570 <strlen>
c001ff98:	40                   	inc    eax
c001ff99:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff9c:	e8 16 66 ff ff       	call   c00165b7 <malloc>
c001ffa1:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ffa8:	e8 c3 05 fe ff       	call   c0000570 <strlen>
c001ffad:	83 c4 0c             	add    esp,0xc
c001ffb0:	40                   	inc    eax
c001ffb1:	50                   	push   eax
c001ffb2:	6a 00                	push   0x0
c001ffb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffb8:	e8 33 05 fe ff       	call   c00004f0 <memset>
c001ffbd:	89 34 24             	mov    DWORD PTR [esp],esi
c001ffc0:	e8 ab 05 fe ff       	call   c0000570 <strlen>
c001ffc5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffc9:	8d 48 01             	lea    ecx,[eax+0x1]
c001ffcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffd1:	89 de                	mov    esi,ebx
c001ffd3:	e8 98 05 fe ff       	call   c0000570 <strlen>
c001ffd8:	83 c4 0c             	add    esp,0xc
c001ffdb:	40                   	inc    eax
c001ffdc:	50                   	push   eax
c001ffdd:	6a 00                	push   0x0
c001ffdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ffe3:	e8 08 05 fe ff       	call   c00004f0 <memset>
c001ffe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffeb:	e8 80 05 fe ff       	call   c0000570 <strlen>
c001fff0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fff4:	8d 48 01             	lea    ecx,[eax+0x1]
c001fff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fff9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fffc:	40                   	inc    eax
c001fffd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0020000:	c1 e0 03             	shl    eax,0x3
c0020003:	5a                   	pop    edx
c0020004:	59                   	pop    ecx
c0020005:	50                   	push   eax
c0020006:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0020009:	e8 95 65 ff ff       	call   c00165a3 <realloc>
c002000e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0020012:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020015:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0020018:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c002001c:	b9 08 00 00 00       	mov    ecx,0x8
c0020021:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020023:	83 c4 2c             	add    esp,0x2c
c0020026:	5b                   	pop    ebx
c0020027:	5e                   	pop    esi
c0020028:	5f                   	pop    edi
c0020029:	5d                   	pop    ebp
c002002a:	c3                   	ret    
c002002b:	90                   	nop

c002002c <EnvVarContainer::deleteEnv(char const*)>:
c002002c:	c3                   	ret    
c002002d:	90                   	nop

c002002e <EnvVarContainer::loadFrom(char const*, char const*)>:
c002002e:	55                   	push   ebp
c002002f:	57                   	push   edi
c0020030:	56                   	push   esi
c0020031:	53                   	push   ebx
c0020032:	81 ec 38 01 00 00    	sub    esp,0x138
c0020038:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c002003f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0020046:	68 14 01 00 00       	push   0x114
c002004b:	e8 67 65 ff ff       	call   c00165b7 <malloc>
c0020050:	83 c4 0c             	add    esp,0xc
c0020053:	89 c3                	mov    ebx,eax
c0020055:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020058:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002005f:	50                   	push   eax
c0020060:	e8 e7 a5 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0020065:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020068:	e8 c1 a8 ff ff       	call   c001a92e <File::exists()>
c002006d:	83 c4 10             	add    esp,0x10
c0020070:	84 c0                	test   al,al
c0020072:	75 31                	jne    c00200a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0020074:	50                   	push   eax
c0020075:	50                   	push   eax
c0020076:	6a 12                	push   0x12
c0020078:	53                   	push   ebx
c0020079:	e8 ec a5 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c002007e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020080:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0020083:	89 34 24             	mov    DWORD PTR [esp],esi
c0020086:	e8 e5 04 fe ff       	call   c0000570 <strlen>
c002008b:	5a                   	pop    edx
c002008c:	31 d2                	xor    edx,edx
c002008e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0020092:	51                   	push   ecx
c0020093:	56                   	push   esi
c0020094:	52                   	push   edx
c0020095:	50                   	push   eax
c0020096:	53                   	push   ebx
c0020097:	ff d7                	call   edi
c0020099:	83 c4 14             	add    esp,0x14
c002009c:	53                   	push   ebx
c002009d:	e8 26 a6 ff ff       	call   c001a6c8 <File::close()>
c00200a2:	83 c4 10             	add    esp,0x10
c00200a5:	56                   	push   esi
c00200a6:	31 f6                	xor    esi,esi
c00200a8:	68 00 01 00 00       	push   0x100
c00200ad:	6a 00                	push   0x0
c00200af:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00200b3:	50                   	push   eax
c00200b4:	e8 37 04 fe ff       	call   c00004f0 <memset>
c00200b9:	5f                   	pop    edi
c00200ba:	58                   	pop    eax
c00200bb:	6a 01                	push   0x1
c00200bd:	53                   	push   ebx
c00200be:	e8 a7 a5 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c00200c3:	83 c4 10             	add    esp,0x10
c00200c6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00200d6:	83 ec 0c             	sub    esp,0xc
c00200d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00200db:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00200df:	51                   	push   ecx
c00200e0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00200e4:	52                   	push   edx
c00200e5:	6a 00                	push   0x0
c00200e7:	6a 01                	push   0x1
c00200e9:	53                   	push   ebx
c00200ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00200ed:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00200f2:	83 c4 20             	add    esp,0x20
c00200f5:	89 c2                	mov    edx,eax
c00200f7:	85 c0                	test   eax,eax
c00200f9:	0f 84 36 01 00 00    	je     c0020235 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00200ff:	83 f8 0d             	cmp    eax,0xd
c0020102:	0f 84 22 01 00 00    	je     c002022a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020108:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002010d:	0f 84 f0 00 00 00    	je     c0020203 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0020113:	83 f8 0a             	cmp    eax,0xa
c0020116:	74 13                	je     c002012b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0020118:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002011d:	74 0c                	je     c002012b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c002011f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020125:	0f 8e f6 00 00 00    	jle    c0020221 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c002012b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	8d 78 01             	lea    edi,[eax+0x1]
c0020135:	57                   	push   edi
c0020136:	e8 7c 64 ff ff       	call   c00165b7 <malloc>
c002013b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c002013f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020143:	8d 56 04             	lea    edx,[esi+0x4]
c0020146:	89 14 24             	mov    DWORD PTR [esp],edx
c0020149:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002014d:	e8 65 64 ff ff       	call   c00165b7 <malloc>
c0020152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0020156:	83 c4 0c             	add    esp,0xc
c0020159:	57                   	push   edi
c002015a:	6a 00                	push   0x0
c002015c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020160:	e8 8b 03 fe ff       	call   c00004f0 <memset>
c0020165:	8d 74 24 30          	lea    esi,[esp+0x30]
c0020169:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002016d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020171:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020173:	83 c4 0c             	add    esp,0xc
c0020176:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002017a:	52                   	push   edx
c002017b:	6a 00                	push   0x0
c002017d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020181:	e8 6a 03 fe ff       	call   c00004f0 <memset>
c0020186:	8d 74 24 30          	lea    esi,[esp+0x30]
c002018a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c002018e:	89 34 24             	mov    DWORD PTR [esp],esi
c0020191:	e8 da 03 fe ff       	call   c0000570 <strlen>
c0020196:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002019a:	89 c1                	mov    ecx,eax
c002019c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002019e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00201a1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00201a4:	40                   	inc    eax
c00201a5:	83 c4 10             	add    esp,0x10
c00201a8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00201ab:	85 d2                	test   edx,edx
c00201ad:	75 0c                	jne    c00201bb <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00201af:	83 ec 0c             	sub    esp,0xc
c00201b2:	6a 08                	push   0x8
c00201b4:	e8 fe 63 ff ff       	call   c00165b7 <malloc>
c00201b9:	eb 0c                	jmp    c00201c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00201bb:	c1 e0 03             	shl    eax,0x3
c00201be:	51                   	push   ecx
c00201bf:	51                   	push   ecx
c00201c0:	50                   	push   eax
c00201c1:	52                   	push   edx
c00201c2:	e8 dc 63 ff ff       	call   c00165a3 <realloc>
c00201c7:	83 c4 10             	add    esp,0x10
c00201ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00201cd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00201d0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00201d3:	8d 74 24 18          	lea    esi,[esp+0x18]
c00201d7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00201db:	b9 08 00 00 00       	mov    ecx,0x8
c00201e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00201e2:	31 f6                	xor    esi,esi
c00201e4:	50                   	push   eax
c00201e5:	68 00 01 00 00       	push   0x100
c00201ea:	6a 00                	push   0x0
c00201ec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00201f0:	50                   	push   eax
c00201f1:	e8 fa 02 fe ff       	call   c00004f0 <memset>
c00201f6:	83 c4 10             	add    esp,0x10
c00201f9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020201:	eb 27                	jmp    c002022a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020203:	83 f8 3d             	cmp    eax,0x3d
c0020206:	74 1e                	je     c0020226 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0020208:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002020e:	7f 07                	jg     c0020217 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0020210:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0020214:	46                   	inc    esi
c0020215:	eb 13                	jmp    c002022a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020217:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002021f:	eb 09                	jmp    c002022a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020221:	83 f8 3d             	cmp    eax,0x3d
c0020224:	75 ea                	jne    c0020210 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0020226:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002022a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002022f:	0f 85 99 fe ff ff    	jne    c00200ce <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0020235:	83 ec 0c             	sub    esp,0xc
c0020238:	53                   	push   ebx
c0020239:	e8 8a a4 ff ff       	call   c001a6c8 <File::close()>
c002023e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020240:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020243:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020246:	81 c4 3c 01 00 00    	add    esp,0x13c
c002024c:	5b                   	pop    ebx
c002024d:	5e                   	pop    esi
c002024e:	5f                   	pop    edi
c002024f:	5d                   	pop    ebp
c0020250:	c3                   	ret    
c0020251:	90                   	nop

c0020252 <EnvVarContainer::__loadSystem()>:
c0020252:	83 ec 10             	sub    esp,0x10
c0020255:	68 00 4a 03 c0       	push   0xc0034a00
c002025a:	68 0c 30 03 c0       	push   0xc003300c
c002025f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020263:	e8 c6 fd ff ff       	call   c002002e <EnvVarContainer::loadFrom(char const*, char const*)>
c0020268:	83 c4 1c             	add    esp,0x1c
c002026b:	c3                   	ret    

c002026c <EnvVarContainer::__loadUser()>:
c002026c:	c3                   	ret    
c002026d:	90                   	nop

c002026e <EnvVarContainer::EnvVarContainer(Process*)>:
c002026e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020272:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002027c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020280:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020287:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002028e:	90                   	nop
c002028f:	c3                   	ret    

c0020290 <EnvVarContainer::~EnvVarContainer()>:
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020297:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002029a:	85 c0                	test   eax,eax
c002029c:	74 1d                	je     c00202bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c002029e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00202a4:	85 c0                	test   eax,eax
c00202a6:	74 13                	je     c00202bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202af:	83 ec 0c             	sub    esp,0xc
c00202b2:	50                   	push   eax
c00202b3:	e8 0f 63 ff ff       	call   c00165c7 <free>
c00202b8:	83 c4 10             	add    esp,0x10
c00202bb:	90                   	nop
c00202bc:	83 c4 0c             	add    esp,0xc
c00202bf:	c3                   	ret    

c00202c0 <KeGetEnv(Process*, char const*)>:
c00202c0:	53                   	push   ebx
c00202c1:	83 ec 08             	sub    esp,0x8
c00202c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00202cc:	39 05 f8 11 04 c0    	cmp    DWORD PTR ds:0xc00411f8,eax
c00202d2:	74 04                	je     c00202d8 <KeGetEnv(Process*, char const*)+0x18>
c00202d4:	85 c0                	test   eax,eax
c00202d6:	75 0b                	jne    c00202e3 <KeGetEnv(Process*, char const*)+0x23>
c00202d8:	a1 80 09 04 c0       	mov    eax,ds:0xc0040980
c00202dd:	85 c0                	test   eax,eax
c00202df:	75 19                	jne    c00202fa <KeGetEnv(Process*, char const*)+0x3a>
c00202e1:	eb 27                	jmp    c002030a <KeGetEnv(Process*, char const*)+0x4a>
c00202e3:	52                   	push   edx
c00202e4:	52                   	push   edx
c00202e5:	53                   	push   ebx
c00202e6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00202ec:	e8 3b fc ff ff       	call   c001ff2c <EnvVarContainer::getEnv(char const*)>
c00202f1:	83 c4 10             	add    esp,0x10
c00202f4:	85 c0                	test   eax,eax
c00202f6:	75 28                	jne    c0020320 <KeGetEnv(Process*, char const*)+0x60>
c00202f8:	eb de                	jmp    c00202d8 <KeGetEnv(Process*, char const*)+0x18>
c00202fa:	52                   	push   edx
c00202fb:	52                   	push   edx
c00202fc:	53                   	push   ebx
c00202fd:	50                   	push   eax
c00202fe:	e8 29 fc ff ff       	call   c001ff2c <EnvVarContainer::getEnv(char const*)>
c0020303:	83 c4 10             	add    esp,0x10
c0020306:	85 c0                	test   eax,eax
c0020308:	75 16                	jne    c0020320 <KeGetEnv(Process*, char const*)+0x60>
c002030a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002030e:	a1 84 09 04 c0       	mov    eax,ds:0xc0040984
c0020313:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020317:	83 c4 08             	add    esp,0x8
c002031a:	5b                   	pop    ebx
c002031b:	e9 0c fc ff ff       	jmp    c001ff2c <EnvVarContainer::getEnv(char const*)>
c0020320:	83 c4 08             	add    esp,0x8
c0020323:	5b                   	pop    ebx
c0020324:	c3                   	ret    

c0020325 <KeSetEnvSystem(char const*, char const*)>:
c0020325:	83 ec 10             	sub    esp,0x10
c0020328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002032c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020330:	ff 35 84 09 04 c0    	push   DWORD PTR ds:0xc0040984
c0020336:	e8 2f fc ff ff       	call   c001ff6a <EnvVarContainer::setEnv(char const*, char const*)>
c002033b:	83 c4 1c             	add    esp,0x1c
c002033e:	c3                   	ret    

c002033f <KeSetEnvUser(char const*, char const*)>:
c002033f:	a1 80 09 04 c0       	mov    eax,ds:0xc0040980
c0020344:	85 c0                	test   eax,eax
c0020346:	74 15                	je     c002035d <KeSetEnvUser(char const*, char const*)+0x1e>
c0020348:	83 ec 10             	sub    esp,0x10
c002034b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002034f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020353:	50                   	push   eax
c0020354:	e8 11 fc ff ff       	call   c001ff6a <EnvVarContainer::setEnv(char const*, char const*)>
c0020359:	83 c4 1c             	add    esp,0x1c
c002035c:	c3                   	ret    
c002035d:	c3                   	ret    

c002035e <KeSetEnvProcess(Process*, char const*, char const*)>:
c002035e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020362:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020368:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002036c:	e9 f9 fb ff ff       	jmp    c001ff6a <EnvVarContainer::setEnv(char const*, char const*)>

c0020371 <KeDeleteEnvSystem(char const*)>:
c0020371:	c3                   	ret    

c0020372 <KeDeleteEnvUser(char const*)>:
c0020372:	c3                   	ret    

c0020373 <KeDeleteEnvProcess(Process*, char const*)>:
c0020373:	c3                   	ret    

c0020374 <KeNewProcessEnv(Process*)>:
c0020374:	83 ec 28             	sub    esp,0x28
c0020377:	6a 0c                	push   0xc
c0020379:	e8 39 62 ff ff       	call   c00165b7 <malloc>
c002037e:	5a                   	pop    edx
c002037f:	59                   	pop    ecx
c0020380:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020384:	50                   	push   eax
c0020385:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020389:	e8 e0 fe ff ff       	call   c002026e <EnvVarContainer::EnvVarContainer(Process*)>
c002038e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020392:	83 c4 2c             	add    esp,0x2c
c0020395:	c3                   	ret    

c0020396 <KeCopyProcessEnv(Process*, Process*)>:
c0020396:	57                   	push   edi
c0020397:	56                   	push   esi
c0020398:	53                   	push   ebx
c0020399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002039d:	83 ec 0c             	sub    esp,0xc
c00203a0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00203a6:	6a 0c                	push   0xc
c00203a8:	e8 0a 62 ff ff       	call   c00165b7 <malloc>
c00203ad:	89 c3                	mov    ebx,eax
c00203af:	58                   	pop    eax
c00203b0:	5a                   	pop    edx
c00203b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203b5:	53                   	push   ebx
c00203b6:	e8 b3 fe ff ff       	call   c002026e <EnvVarContainer::EnvVarContainer(Process*)>
c00203bb:	8b 07                	mov    eax,DWORD PTR [edi]
c00203bd:	89 03                	mov    DWORD PTR [ebx],eax
c00203bf:	c1 e0 03             	shl    eax,0x3
c00203c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00203c5:	e8 ed 61 ff ff       	call   c00165b7 <malloc>
c00203ca:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00203cd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00203cf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00203d2:	c1 e1 03             	shl    ecx,0x3
c00203d5:	89 c7                	mov    edi,eax
c00203d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00203d9:	83 c4 10             	add    esp,0x10
c00203dc:	89 d8                	mov    eax,ebx
c00203de:	5b                   	pop    ebx
c00203df:	5e                   	pop    esi
c00203e0:	5f                   	pop    edi
c00203e1:	c3                   	ret    

c00203e2 <KeLoadSystemEnv()>:
c00203e2:	53                   	push   ebx
c00203e3:	83 ec 14             	sub    esp,0x14
c00203e6:	6a 0c                	push   0xc
c00203e8:	e8 ca 61 ff ff       	call   c00165b7 <malloc>
c00203ed:	89 c3                	mov    ebx,eax
c00203ef:	58                   	pop    eax
c00203f0:	5a                   	pop    edx
c00203f1:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00203f7:	53                   	push   ebx
c00203f8:	e8 71 fe ff ff       	call   c002026e <EnvVarContainer::EnvVarContainer(Process*)>
c00203fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020400:	89 1d 84 09 04 c0    	mov    DWORD PTR ds:0xc0040984,ebx
c0020406:	e8 47 fe ff ff       	call   c0020252 <EnvVarContainer::__loadSystem()>
c002040b:	83 c4 18             	add    esp,0x18
c002040e:	5b                   	pop    ebx
c002040f:	c3                   	ret    

c0020410 <KeLoadUserEnv()>:
c0020410:	53                   	push   ebx
c0020411:	83 ec 14             	sub    esp,0x14
c0020414:	6a 0c                	push   0xc
c0020416:	e8 9c 61 ff ff       	call   c00165b7 <malloc>
c002041b:	89 c3                	mov    ebx,eax
c002041d:	58                   	pop    eax
c002041e:	5a                   	pop    edx
c002041f:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0020425:	53                   	push   ebx
c0020426:	e8 43 fe ff ff       	call   c002026e <EnvVarContainer::EnvVarContainer(Process*)>
c002042b:	89 1d 80 09 04 c0    	mov    DWORD PTR ds:0xc0040980,ebx
c0020431:	83 c4 18             	add    esp,0x18
c0020434:	5b                   	pop    ebx
c0020435:	c3                   	ret    

c0020436 <KeFlushEnv()>:
c0020436:	c3                   	ret    

c0020437 <KeGetProcessTotalEnvCount(Process*)>:
c0020437:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002043b:	8b 15 80 09 04 c0    	mov    edx,DWORD PTR ds:0xc0040980
c0020441:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020447:	a1 84 09 04 c0       	mov    eax,ds:0xc0040984
c002044c:	8b 00                	mov    eax,DWORD PTR [eax]
c002044e:	03 01                	add    eax,DWORD PTR [ecx]
c0020450:	85 d2                	test   edx,edx
c0020452:	74 02                	je     c0020456 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020454:	03 02                	add    eax,DWORD PTR [edx]
c0020456:	c3                   	ret    

c0020457 <KeGetProcessEnvPair(Process*, int)>:
c0020457:	57                   	push   edi
c0020458:	56                   	push   esi
c0020459:	8b 35 80 09 04 c0    	mov    esi,DWORD PTR ds:0xc0040980
c002045f:	53                   	push   ebx
c0020460:	85 f6                	test   esi,esi
c0020462:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020466:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002046a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020474:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020476:	75 16                	jne    c002048e <KeGetProcessEnvPair(Process*, int)+0x37>
c0020478:	39 c2                	cmp    edx,eax
c002047a:	7c 16                	jl     c0020492 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002047c:	8b 0d 84 09 04 c0    	mov    ecx,DWORD PTR ds:0xc0040984
c0020482:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020484:	01 c6                	add    esi,eax
c0020486:	39 d6                	cmp    esi,edx
c0020488:	7e 3c                	jle    c00204c6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002048a:	29 c2                	sub    edx,eax
c002048c:	eb 04                	jmp    c0020492 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002048e:	39 c2                	cmp    edx,eax
c0020490:	7d 05                	jge    c0020497 <KeGetProcessEnvPair(Process*, int)+0x40>
c0020492:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020495:	eb 20                	jmp    c00204b7 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020497:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020499:	8d 0c 07             	lea    ecx,[edi+eax*1]
c002049c:	39 d1                	cmp    ecx,edx
c002049e:	7e 04                	jle    c00204a4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00204a0:	29 c2                	sub    edx,eax
c00204a2:	eb 10                	jmp    c00204b4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00204a4:	8b 35 84 09 04 c0    	mov    esi,DWORD PTR ds:0xc0040984
c00204aa:	03 0e                	add    ecx,DWORD PTR [esi]
c00204ac:	39 d1                	cmp    ecx,edx
c00204ae:	7e 16                	jle    c00204c6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00204b0:	29 c2                	sub    edx,eax
c00204b2:	29 fa                	sub    edx,edi
c00204b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00204b7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00204ba:	8b 02                	mov    eax,DWORD PTR [edx]
c00204bc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00204bf:	89 03                	mov    DWORD PTR [ebx],eax
c00204c1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00204c4:	eb 1d                	jmp    c00204e3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00204c6:	83 ec 0c             	sub    esp,0xc
c00204c9:	68 2e 30 03 c0       	push   0xc003302e
c00204ce:	e8 ab 02 00 00       	call   c002077e <KePanic(char const*)>
c00204d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00204d9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00204e0:	83 c4 10             	add    esp,0x10
c00204e3:	89 d8                	mov    eax,ebx
c00204e5:	5b                   	pop    ebx
c00204e6:	5e                   	pop    esi
c00204e7:	5f                   	pop    edi
c00204e8:	c2 04 00             	ret    0x4

c00204eb <CPU::current()>:
c00204eb:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00204f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204f6:	c3                   	ret    

c00204f7 <operator new(unsigned long)>:
c00204f7:	e9 bb 60 ff ff       	jmp    c00165b7 <malloc>

c00204fc <operator delete(void*)>:
c00204fc:	e9 d6 60 ff ff       	jmp    c00165d7 <rfree>

c0020501 <disableIRQs()>:
c0020501:	fa                   	cli    
c0020502:	c3                   	ret    

c0020503 <enableIRQs()>:
c0020503:	fb                   	sti    
c0020504:	c3                   	ret    

c0020505 <lockScheduler()>:
c0020505:	fa                   	cli    
c0020506:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002050c:	c3                   	ret    

c002050d <unlockScheduler()>:
c002050d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020512:	48                   	dec    eax
c0020513:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020518:	75 01                	jne    c002051b <unlockScheduler()+0xe>
c002051a:	fb                   	sti    
c002051b:	c3                   	ret    

c002051c <lockStuff()>:
c002051c:	fa                   	cli    
c002051d:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0020523:	ff 05 cc 11 04 c0    	inc    DWORD PTR ds:0xc00411cc
c0020529:	c3                   	ret    

c002052a <unlockStuff()>:
c002052a:	83 ec 0c             	sub    esp,0xc
c002052d:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020532:	48                   	dec    eax
c0020533:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020538:	75 18                	jne    c0020552 <unlockStuff()+0x28>
c002053a:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c0020541:	74 0f                	je     c0020552 <unlockStuff()+0x28>
c0020543:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c002054d:	e8 3a 52 00 00       	call   c002578c <schedule()>
c0020552:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020557:	48                   	dec    eax
c0020558:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002055d:	75 01                	jne    c0020560 <unlockStuff()+0x36>
c002055f:	fb                   	sti    
c0020560:	83 c4 0c             	add    esp,0xc
c0020563:	c3                   	ret    

c0020564 <Virt::getAKernelVAS()>:
c0020564:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c0020569:	c3                   	ret    

c002056a <__not_memcpy>:
c002056a:	57                   	push   edi
c002056b:	56                   	push   esi
c002056c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020570:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020574:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020578:	89 c7                	mov    edi,eax
c002057a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002057c:	5e                   	pop    esi
c002057d:	5f                   	pop    edi
c002057e:	c3                   	ret    
c002057f:	90                   	nop

c0020580 <KeMailboxTryPost(Mailbox*, void*)>:
c0020580:	83 ec 10             	sub    esp,0x10
c0020583:	fa                   	cli    
c0020584:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020589:	83 c0 01             	add    eax,0x1
c002058c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020591:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0020596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002059a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002059d:	85 c0                	test   eax,eax
c002059f:	75 23                	jne    c00205c4 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c00205a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00205a9:	89 10                	mov    DWORD PTR [eax],edx
c00205ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00205b2:	8d 50 01             	lea    edx,[eax+0x1]
c00205b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00205bc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00205c1:	8d 76 00             	lea    esi,[esi+0x0]
c00205c4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205c9:	83 e8 01             	sub    eax,0x1
c00205cc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00205d1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205d6:	85 c0                	test   eax,eax
c00205d8:	75 02                	jne    c00205dc <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c00205da:	fb                   	sti    
c00205db:	90                   	nop
c00205dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00205e0:	83 c4 10             	add    esp,0x10
c00205e3:	c3                   	ret    

c00205e4 <KeMailboxTryGet(Mailbox*, void**)>:
c00205e4:	83 ec 10             	sub    esp,0x10
c00205e7:	fa                   	cli    
c00205e8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205ed:	83 c0 01             	add    eax,0x1
c00205f0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00205f5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00205fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020601:	83 f8 01             	cmp    eax,0x1
c0020604:	75 22                	jne    c0020628 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c0020606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002060a:	8b 10                	mov    edx,DWORD PTR [eax]
c002060c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020610:	89 10                	mov    DWORD PTR [eax],edx
c0020612:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020616:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020619:	8d 50 ff             	lea    edx,[eax-0x1]
c002061c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020620:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020623:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0020628:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002062d:	83 e8 01             	sub    eax,0x1
c0020630:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020635:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002063a:	85 c0                	test   eax,eax
c002063c:	75 02                	jne    c0020640 <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c002063e:	fb                   	sti    
c002063f:	90                   	nop
c0020640:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	c3                   	ret    

c0020648 <KeMailboxCreate()>:
c0020648:	83 ec 1c             	sub    esp,0x1c
c002064b:	83 ec 0c             	sub    esp,0xc
c002064e:	6a 08                	push   0x8
c0020650:	e8 62 5f ff ff       	call   c00165b7 <malloc>
c0020655:	83 c4 10             	add    esp,0x10
c0020658:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002065c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020660:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020666:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002066a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020675:	83 c4 1c             	add    esp,0x1c
c0020678:	c3                   	ret    
c0020679:	8d 76 00             	lea    esi,[esi+0x0]

c002067c <KeMailboxPost(Mailbox*, void*)>:
c002067c:	83 ec 1c             	sub    esp,0x1c
c002067f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0020684:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020688:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002068c:	e8 ef fe ff ff       	call   c0020580 <KeMailboxTryPost(Mailbox*, void*)>
c0020691:	83 c4 08             	add    esp,0x8
c0020694:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002069c:	83 f0 01             	xor    eax,0x1
c002069f:	0f b6 c0             	movzx  eax,al
c00206a2:	85 c0                	test   eax,eax
c00206a4:	74 2a                	je     c00206d0 <KeMailboxPost(Mailbox*, void*)+0x54>
c00206a6:	fa                   	cli    
c00206a7:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206ac:	83 c0 01             	add    eax,0x1
c00206af:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00206b4:	e8 d3 50 00 00       	call   c002578c <schedule()>
c00206b9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206be:	83 e8 01             	sub    eax,0x1
c00206c1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00206c6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206cb:	85 c0                	test   eax,eax
c00206cd:	75 01                	jne    c00206d0 <KeMailboxPost(Mailbox*, void*)+0x54>
c00206cf:	fb                   	sti    
c00206d0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00206d5:	85 c0                	test   eax,eax
c00206d7:	75 03                	jne    c00206dc <KeMailboxPost(Mailbox*, void*)+0x60>
c00206d9:	eb a9                	jmp    c0020684 <KeMailboxPost(Mailbox*, void*)+0x8>
c00206db:	90                   	nop
c00206dc:	90                   	nop
c00206dd:	83 c4 1c             	add    esp,0x1c
c00206e0:	c3                   	ret    
c00206e1:	8d 76 00             	lea    esi,[esi+0x0]

c00206e4 <KeMailboxGet(Mailbox*, void**)>:
c00206e4:	83 ec 1c             	sub    esp,0x1c
c00206e7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00206ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00206f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00206f4:	e8 eb fe ff ff       	call   c00205e4 <KeMailboxTryGet(Mailbox*, void**)>
c00206f9:	83 c4 08             	add    esp,0x8
c00206fc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020700:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020704:	83 f0 01             	xor    eax,0x1
c0020707:	0f b6 c0             	movzx  eax,al
c002070a:	85 c0                	test   eax,eax
c002070c:	74 2a                	je     c0020738 <KeMailboxGet(Mailbox*, void**)+0x54>
c002070e:	fa                   	cli    
c002070f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020714:	83 c0 01             	add    eax,0x1
c0020717:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002071c:	e8 6b 50 00 00       	call   c002578c <schedule()>
c0020721:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020726:	83 e8 01             	sub    eax,0x1
c0020729:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002072e:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020733:	85 c0                	test   eax,eax
c0020735:	75 01                	jne    c0020738 <KeMailboxGet(Mailbox*, void**)+0x54>
c0020737:	fb                   	sti    
c0020738:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002073d:	85 c0                	test   eax,eax
c002073f:	75 03                	jne    c0020744 <KeMailboxGet(Mailbox*, void**)+0x60>
c0020741:	eb a9                	jmp    c00206ec <KeMailboxGet(Mailbox*, void**)+0x8>
c0020743:	90                   	nop
c0020744:	90                   	nop
c0020745:	83 c4 1c             	add    esp,0x1c
c0020748:	c3                   	ret    
c0020749:	8d 76 00             	lea    esi,[esi+0x0]

c002074c <KeMailboxDestroy(Mailbox*)>:
c002074c:	83 ec 0c             	sub    esp,0xc
c002074f:	83 ec 0c             	sub    esp,0xc
c0020752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020756:	e8 6c 5e ff ff       	call   c00165c7 <free>
c002075b:	83 c4 10             	add    esp,0x10
c002075e:	90                   	nop
c002075f:	83 c4 0c             	add    esp,0xc
c0020762:	c3                   	ret    
c0020763:	90                   	nop

c0020764 <Mutex::Mutex()>:
c0020764:	83 ec 0c             	sub    esp,0xc
c0020767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002076b:	83 ec 08             	sub    esp,0x8
c002076e:	6a 01                	push   0x1
c0020770:	50                   	push   eax
c0020771:	e8 b2 03 00 00       	call   c0020b28 <Semaphore::Semaphore(int)>
c0020776:	83 c4 10             	add    esp,0x10
c0020779:	90                   	nop
c002077a:	83 c4 0c             	add    esp,0xc
c002077d:	c3                   	ret    

c002077e <KePanic(char const*)>:
c002077e:	c6 05 88 09 04 c0 01 	mov    BYTE PTR ds:0xc0040988,0x1
c0020785:	e9 d5 6d 00 00       	jmp    c002755f <HalPanic(char const*)>

c002078a <KePowerThread(void*)>:
c002078a:	83 ec 0c             	sub    esp,0xc
c002078d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020792:	48                   	dec    eax
c0020793:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020798:	75 01                	jne    c002079b <KePowerThread(void*)+0x11>
c002079a:	fb                   	sti    
c002079b:	83 ec 0c             	sub    esp,0xc
c002079e:	c6 05 a0 09 04 c0 00 	mov    BYTE PTR ds:0xc00409a0,0x0
c00207a5:	6a 0a                	push   0xa
c00207a7:	e8 cc 51 00 00       	call   c0025978 <sleep(unsigned int)>
c00207ac:	83 05 e4 09 04 c0 0a 	add    DWORD PTR ds:0xc00409e4,0xa
c00207b3:	83 c4 10             	add    esp,0x10
c00207b6:	eb e3                	jmp    c002079b <KePowerThread(void*)+0x11>

c00207b8 <KeChangePowerSettings(PowerSettings)>:
c00207b8:	57                   	push   edi
c00207b9:	b9 09 00 00 00       	mov    ecx,0x9
c00207be:	56                   	push   esi
c00207bf:	bf c0 09 04 c0       	mov    edi,0xc00409c0
c00207c4:	fc                   	cld    
c00207c5:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00207c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00207cb:	5e                   	pop    esi
c00207cc:	5f                   	pop    edi
c00207cd:	c3                   	ret    

c00207ce <KeUserIOReceived()>:
c00207ce:	c7 05 e4 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409e4,0x0
c00207d8:	c3                   	ret    

c00207d9 <KeHandlePowerButton()>:
c00207d9:	83 ec 0c             	sub    esp,0xc
c00207dc:	a1 c0 09 04 c0       	mov    eax,ds:0xc00409c0
c00207e1:	83 f8 02             	cmp    eax,0x2
c00207e4:	75 10                	jne    c00207f6 <KeHandlePowerButton()+0x1d>
c00207e6:	83 ec 0c             	sub    esp,0xc
c00207e9:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00207ef:	e8 b8 53 ff ff       	call   c0015bac <Computer::shutdown()>
c00207f4:	eb 11                	jmp    c0020807 <KeHandlePowerButton()+0x2e>
c00207f6:	48                   	dec    eax
c00207f7:	75 11                	jne    c002080a <KeHandlePowerButton()+0x31>
c00207f9:	83 ec 0c             	sub    esp,0xc
c00207fc:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020802:	e8 d5 53 ff ff       	call   c0015bdc <Computer::sleep()>
c0020807:	83 c4 10             	add    esp,0x10
c002080a:	83 c4 0c             	add    esp,0xc
c002080d:	c3                   	ret    

c002080e <KeHandleSleepButton()>:
c002080e:	83 ec 0c             	sub    esp,0xc
c0020811:	a1 c4 09 04 c0       	mov    eax,ds:0xc00409c4
c0020816:	83 f8 02             	cmp    eax,0x2
c0020819:	75 10                	jne    c002082b <KeHandleSleepButton()+0x1d>
c002081b:	83 ec 0c             	sub    esp,0xc
c002081e:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020824:	e8 83 53 ff ff       	call   c0015bac <Computer::shutdown()>
c0020829:	eb 11                	jmp    c002083c <KeHandleSleepButton()+0x2e>
c002082b:	48                   	dec    eax
c002082c:	75 11                	jne    c002083f <KeHandleSleepButton()+0x31>
c002082e:	83 ec 0c             	sub    esp,0xc
c0020831:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020837:	e8 a0 53 ff ff       	call   c0015bdc <Computer::sleep()>
c002083c:	83 c4 10             	add    esp,0x10
c002083f:	83 c4 0c             	add    esp,0xc
c0020842:	c3                   	ret    

c0020843 <KeSetupPowerManager()>:
c0020843:	83 ec 0c             	sub    esp,0xc
c0020846:	c7 05 e4 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409e4,0x0
c0020850:	68 f0 00 00 00       	push   0xf0
c0020855:	c6 05 a0 09 04 c0 00 	mov    BYTE PTR ds:0xc00409a0,0x0
c002085c:	6a 00                	push   0x0
c002085e:	68 8a 07 02 c0       	push   0xc002078a
c0020863:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0020869:	e8 ce 4c 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c002086e:	c7 05 c0 09 04 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00409c0,0x2
c0020878:	c7 05 c4 09 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00409c4,0x1
c0020882:	c7 05 c8 09 04 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00409c8,0x3
c002088c:	c7 05 cc 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409cc,0x0
c0020896:	c7 05 d8 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409d8,0x0
c00208a0:	c7 05 d0 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409d0,0x0
c00208aa:	c7 05 dc 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409dc,0x0
c00208b4:	c7 05 d4 09 04 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00409d4,0x3c
c00208be:	c7 05 e0 09 04 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00409e0,0x3c
c00208c8:	83 c4 1c             	add    esp,0x1c
c00208cb:	c3                   	ret    

c00208cc <KeRand()>:
c00208cc:	69 05 e8 09 04 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00409e8,0x2875
c00208d6:	69 0d ec 09 04 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00409ec,0xa2e7b175
c00208e0:	53                   	push   ebx
c00208e1:	01 c1                	add    ecx,eax
c00208e3:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00208e8:	f7 25 e8 09 04 c0    	mul    DWORD PTR ds:0xc00409e8
c00208ee:	01 ca                	add    edx,ecx
c00208f0:	05 ef 04 b5 00       	add    eax,0xb504ef
c00208f5:	83 d2 00             	adc    edx,0x0
c00208f8:	a3 e8 09 04 c0       	mov    ds:0xc00409e8,eax
c00208fd:	0f b7 da             	movzx  ebx,dx
c0020900:	89 da                	mov    edx,ebx
c0020902:	89 1d ec 09 04 c0    	mov    DWORD PTR ds:0xc00409ec,ebx
c0020908:	0f ac d0 0e          	shrd   eax,edx,0xe
c002090c:	5b                   	pop    ebx
c002090d:	c3                   	ret    

c002090e <KeSeedRand(unsigned int)>:
c002090e:	53                   	push   ebx
c002090f:	83 ec 08             	sub    esp,0x8
c0020912:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020916:	e8 63 6f 00 00       	call   c002787e <HalGetRand()>
c002091b:	c7 05 ec 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409ec,0x0
c0020925:	31 d8                	xor    eax,ebx
c0020927:	a3 e8 09 04 c0       	mov    ds:0xc00409e8,eax
c002092c:	e8 9b ff ff ff       	call   c00208cc <KeRand()>
c0020931:	83 c4 08             	add    esp,0x8
c0020934:	5b                   	pop    ebx
c0020935:	eb 95                	jmp    c00208cc <KeRand()>

c0020937 <KeInitRand()>:
c0020937:	83 ec 0c             	sub    esp,0xc
c002093a:	e8 34 6d 00 00       	call   c0027673 <HalQueryPerformanceCounter()>
c002093f:	0f 20 da             	mov    edx,cr3
c0020942:	0f 22 da             	mov    cr3,edx
c0020945:	0f 20 da             	mov    edx,cr3
c0020948:	0f 22 da             	mov    cr3,edx
c002094b:	0f 20 da             	mov    edx,cr3
c002094e:	0f 22 da             	mov    cr3,edx
c0020951:	0f 20 da             	mov    edx,cr3
c0020954:	0f 22 da             	mov    cr3,edx
c0020957:	83 ec 0c             	sub    esp,0xc
c002095a:	35 03 8a 95 38       	xor    eax,0x38958a03
c002095f:	50                   	push   eax
c0020960:	e8 a9 ff ff ff       	call   c002090e <KeSeedRand(unsigned int)>
c0020965:	83 c4 1c             	add    esp,0x1c
c0020968:	c3                   	ret    
c0020969:	66 90                	xchg   ax,ax
c002096b:	90                   	nop

c002096c <KeResolveCompatibilitySymbol(char*)>:
c002096c:	83 ec 0c             	sub    esp,0xc
c002096f:	83 ec 08             	sub    esp,0x8
c0020972:	68 48 30 03 c0       	push   0xc0033048
c0020977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002097b:	e8 d0 fd fd ff       	call   c0000750 <strcmp>
c0020980:	83 c4 10             	add    esp,0x10
c0020983:	85 c0                	test   eax,eax
c0020985:	0f 94 c0             	sete   al
c0020988:	0f b6 c0             	movzx  eax,al
c002098b:	85 c0                	test   eax,eax
c002098d:	74 0d                	je     c002099c <KeResolveCompatibilitySymbol(char*)+0x30>
c002098f:	b8 bc b9 03 c0       	mov    eax,0xc003b9bc
c0020994:	e9 8b 01 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020999:	8d 76 00             	lea    esi,[esi+0x0]
c002099c:	83 ec 08             	sub    esp,0x8
c002099f:	68 51 30 03 c0       	push   0xc0033051
c00209a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209a8:	e8 a3 fd fd ff       	call   c0000750 <strcmp>
c00209ad:	83 c4 10             	add    esp,0x10
c00209b0:	85 c0                	test   eax,eax
c00209b2:	0f 94 c0             	sete   al
c00209b5:	0f b6 c0             	movzx  eax,al
c00209b8:	85 c0                	test   eax,eax
c00209ba:	74 0c                	je     c00209c8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00209bc:	b8 d0 ec 02 c0       	mov    eax,0xc002ecd0
c00209c1:	e9 5e 01 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00209c6:	66 90                	xchg   ax,ax
c00209c8:	83 ec 08             	sub    esp,0x8
c00209cb:	68 5b 30 03 c0       	push   0xc003305b
c00209d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209d4:	e8 77 fd fd ff       	call   c0000750 <strcmp>
c00209d9:	83 c4 10             	add    esp,0x10
c00209dc:	85 c0                	test   eax,eax
c00209de:	0f 94 c0             	sete   al
c00209e1:	0f b6 c0             	movzx  eax,al
c00209e4:	85 c0                	test   eax,eax
c00209e6:	74 0c                	je     c00209f4 <KeResolveCompatibilitySymbol(char*)+0x88>
c00209e8:	b8 04 ea 02 c0       	mov    eax,0xc002ea04
c00209ed:	e9 32 01 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00209f2:	66 90                	xchg   ax,ax
c00209f4:	83 ec 08             	sub    esp,0x8
c00209f7:	68 64 30 03 c0       	push   0xc0033064
c00209fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a00:	e8 4b fd fd ff       	call   c0000750 <strcmp>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	85 c0                	test   eax,eax
c0020a0a:	0f 94 c0             	sete   al
c0020a0d:	0f b6 c0             	movzx  eax,al
c0020a10:	85 c0                	test   eax,eax
c0020a12:	74 0c                	je     c0020a20 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020a14:	b8 7e 07 02 c0       	mov    eax,0xc002077e
c0020a19:	e9 06 01 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a1e:	66 90                	xchg   ax,ax
c0020a20:	83 ec 08             	sub    esp,0x8
c0020a23:	68 77 30 03 c0       	push   0xc0033077
c0020a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a2c:	e8 1f fd fd ff       	call   c0000750 <strcmp>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	85 c0                	test   eax,eax
c0020a36:	0f 94 c0             	sete   al
c0020a39:	0f b6 c0             	movzx  eax,al
c0020a3c:	85 c0                	test   eax,eax
c0020a3e:	74 0c                	je     c0020a4c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020a40:	b8 37 fe 01 c0       	mov    eax,0xc001fe37
c0020a45:	e9 da 00 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a4a:	66 90                	xchg   ax,ax
c0020a4c:	83 ec 08             	sub    esp,0x8
c0020a4f:	68 94 30 03 c0       	push   0xc0033094
c0020a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a58:	e8 f3 fc fd ff       	call   c0000750 <strcmp>
c0020a5d:	83 c4 10             	add    esp,0x10
c0020a60:	85 c0                	test   eax,eax
c0020a62:	0f 94 c0             	sete   al
c0020a65:	0f b6 c0             	movzx  eax,al
c0020a68:	85 c0                	test   eax,eax
c0020a6a:	74 0c                	je     c0020a78 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020a6c:	b8 d0 ed 02 c0       	mov    eax,0xc002edd0
c0020a71:	e9 ae 00 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a76:	66 90                	xchg   ax,ax
c0020a78:	83 ec 08             	sub    esp,0x8
c0020a7b:	68 9e 30 03 c0       	push   0xc003309e
c0020a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a84:	e8 c7 fc fd ff       	call   c0000750 <strcmp>
c0020a89:	83 c4 10             	add    esp,0x10
c0020a8c:	85 c0                	test   eax,eax
c0020a8e:	0f 94 c0             	sete   al
c0020a91:	0f b6 c0             	movzx  eax,al
c0020a94:	85 c0                	test   eax,eax
c0020a96:	74 0c                	je     c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020a98:	b8 50 eb 02 c0       	mov    eax,0xc002eb50
c0020a9d:	e9 82 00 00 00       	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020aa2:	66 90                	xchg   ax,ax
c0020aa4:	83 ec 08             	sub    esp,0x8
c0020aa7:	68 a7 30 03 c0       	push   0xc00330a7
c0020aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ab0:	e8 9b fc fd ff       	call   c0000750 <strcmp>
c0020ab5:	83 c4 10             	add    esp,0x10
c0020ab8:	85 c0                	test   eax,eax
c0020aba:	0f 94 c0             	sete   al
c0020abd:	0f b6 c0             	movzx  eax,al
c0020ac0:	85 c0                	test   eax,eax
c0020ac2:	74 08                	je     c0020acc <KeResolveCompatibilitySymbol(char*)+0x160>
c0020ac4:	b8 c0 b9 03 c0       	mov    eax,0xc003b9c0
c0020ac9:	eb 59                	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020acb:	90                   	nop
c0020acc:	83 ec 08             	sub    esp,0x8
c0020acf:	68 bf 30 03 c0       	push   0xc00330bf
c0020ad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ad8:	e8 73 fc fd ff       	call   c0000750 <strcmp>
c0020add:	83 c4 10             	add    esp,0x10
c0020ae0:	85 c0                	test   eax,eax
c0020ae2:	0f 94 c0             	sete   al
c0020ae5:	0f b6 c0             	movzx  eax,al
c0020ae8:	85 c0                	test   eax,eax
c0020aea:	74 08                	je     c0020af4 <KeResolveCompatibilitySymbol(char*)+0x188>
c0020aec:	b8 c0 b9 03 c0       	mov    eax,0xc003b9c0
c0020af1:	eb 31                	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020af3:	90                   	nop
c0020af4:	83 ec 08             	sub    esp,0x8
c0020af7:	68 cc 30 03 c0       	push   0xc00330cc
c0020afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b00:	e8 4b fc fd ff       	call   c0000750 <strcmp>
c0020b05:	83 c4 10             	add    esp,0x10
c0020b08:	85 c0                	test   eax,eax
c0020b0a:	0f 94 c0             	sete   al
c0020b0d:	0f b6 c0             	movzx  eax,al
c0020b10:	85 c0                	test   eax,eax
c0020b12:	74 08                	je     c0020b1c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020b14:	b8 c1 b9 03 c0       	mov    eax,0xc003b9c1
c0020b19:	eb 09                	jmp    c0020b24 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020b1b:	90                   	nop
c0020b1c:	b8 00 00 00 00       	mov    eax,0x0
c0020b21:	8d 76 00             	lea    esi,[esi+0x0]
c0020b24:	83 c4 0c             	add    esp,0xc
c0020b27:	c3                   	ret    

c0020b28 <Semaphore::Semaphore(int)>:
c0020b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020b30:	89 10                	mov    DWORD PTR [eax],edx
c0020b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b36:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020b4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020b53:	90                   	nop
c0020b54:	c3                   	ret    
c0020b55:	90                   	nop
c0020b56:	66 90                	xchg   ax,ax

c0020b58 <Semaphore::tryAcquire()>:
c0020b58:	83 ec 0c             	sub    esp,0xc
c0020b5b:	fa                   	cli    
c0020b5c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020b61:	83 c0 01             	add    eax,0x1
c0020b64:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020b69:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b6e:	83 c0 01             	add    eax,0x1
c0020b71:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b7a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b83:	39 c2                	cmp    edx,eax
c0020b85:	7d 5d                	jge    c0020be4 <Semaphore::tryAcquire()+0x8c>
c0020b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020b8e:	8d 50 01             	lea    edx,[eax+0x1]
c0020b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b95:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020b98:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b9d:	83 e8 01             	sub    eax,0x1
c0020ba0:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020ba5:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020baa:	85 c0                	test   eax,eax
c0020bac:	75 1a                	jne    c0020bc8 <Semaphore::tryAcquire()+0x70>
c0020bae:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020bb3:	85 c0                	test   eax,eax
c0020bb5:	74 11                	je     c0020bc8 <Semaphore::tryAcquire()+0x70>
c0020bb7:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020bc1:	e8 c6 4b 00 00       	call   c002578c <schedule()>
c0020bc6:	66 90                	xchg   ax,ax
c0020bc8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020bcd:	83 e8 01             	sub    eax,0x1
c0020bd0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020bd5:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020bda:	85 c0                	test   eax,eax
c0020bdc:	75 02                	jne    c0020be0 <Semaphore::tryAcquire()+0x88>
c0020bde:	fb                   	sti    
c0020bdf:	90                   	nop
c0020be0:	b0 01                	mov    al,0x1
c0020be2:	eb 4c                	jmp    c0020c30 <Semaphore::tryAcquire()+0xd8>
c0020be4:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020be9:	83 e8 01             	sub    eax,0x1
c0020bec:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020bf1:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020bf6:	85 c0                	test   eax,eax
c0020bf8:	75 1a                	jne    c0020c14 <Semaphore::tryAcquire()+0xbc>
c0020bfa:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020bff:	85 c0                	test   eax,eax
c0020c01:	74 11                	je     c0020c14 <Semaphore::tryAcquire()+0xbc>
c0020c03:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020c0d:	e8 7a 4b 00 00       	call   c002578c <schedule()>
c0020c12:	66 90                	xchg   ax,ax
c0020c14:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c19:	83 e8 01             	sub    eax,0x1
c0020c1c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020c21:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c26:	85 c0                	test   eax,eax
c0020c28:	75 02                	jne    c0020c2c <Semaphore::tryAcquire()+0xd4>
c0020c2a:	fb                   	sti    
c0020c2b:	90                   	nop
c0020c2c:	b0 00                	mov    al,0x0
c0020c2e:	66 90                	xchg   ax,ax
c0020c30:	83 c4 0c             	add    esp,0xc
c0020c33:	c3                   	ret    

c0020c34 <Semaphore::assertLocked(char const*)>:
c0020c34:	83 ec 0c             	sub    esp,0xc
c0020c37:	fa                   	cli    
c0020c38:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c3d:	83 c0 01             	add    eax,0x1
c0020c40:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020c45:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c4a:	83 c0 01             	add    eax,0x1
c0020c4d:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c56:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c5f:	39 c2                	cmp    edx,eax
c0020c61:	7d 11                	jge    c0020c74 <Semaphore::assertLocked(char const*)+0x40>
c0020c63:	83 ec 0c             	sub    esp,0xc
c0020c66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020c6a:	e8 0f fb ff ff       	call   c002077e <KePanic(char const*)>
c0020c6f:	83 c4 10             	add    esp,0x10
c0020c72:	66 90                	xchg   ax,ax
c0020c74:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c79:	83 e8 01             	sub    eax,0x1
c0020c7c:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020c81:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c86:	85 c0                	test   eax,eax
c0020c88:	75 1a                	jne    c0020ca4 <Semaphore::assertLocked(char const*)+0x70>
c0020c8a:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020c8f:	85 c0                	test   eax,eax
c0020c91:	74 11                	je     c0020ca4 <Semaphore::assertLocked(char const*)+0x70>
c0020c93:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020c9d:	e8 ea 4a 00 00       	call   c002578c <schedule()>
c0020ca2:	66 90                	xchg   ax,ax
c0020ca4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020ca9:	83 e8 01             	sub    eax,0x1
c0020cac:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020cb1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020cb6:	85 c0                	test   eax,eax
c0020cb8:	75 02                	jne    c0020cbc <Semaphore::assertLocked(char const*)+0x88>
c0020cba:	fb                   	sti    
c0020cbb:	90                   	nop
c0020cbc:	90                   	nop
c0020cbd:	83 c4 0c             	add    esp,0xc
c0020cc0:	c3                   	ret    
c0020cc1:	90                   	nop
c0020cc2:	66 90                	xchg   ax,ax

c0020cc4 <Semaphore::acquire(int)>:
c0020cc4:	83 ec 1c             	sub    esp,0x1c
c0020cc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ccc:	0f 84 9a 00 00 00    	je     c0020d6c <Semaphore::acquire(int)+0xa8>
c0020cd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020cda:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020cdf:	90                   	nop
c0020ce0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020ce5:	85 c0                	test   eax,eax
c0020ce7:	74 77                	je     c0020d60 <Semaphore::acquire(int)+0x9c>
c0020ce9:	83 ec 0c             	sub    esp,0xc
c0020cec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cf0:	e8 63 fe ff ff       	call   c0020b58 <Semaphore::tryAcquire()>
c0020cf5:	83 c4 10             	add    esp,0x10
c0020cf8:	83 f0 01             	xor    eax,0x1
c0020cfb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020cff:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020d03:	83 f0 01             	xor    eax,0x1
c0020d06:	0f b6 c0             	movzx  eax,al
c0020d09:	85 c0                	test   eax,eax
c0020d0b:	75 4f                	jne    c0020d5c <Semaphore::acquire(int)+0x98>
c0020d0d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020d12:	7f 2c                	jg     c0020d40 <Semaphore::acquire(int)+0x7c>
c0020d14:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020d18:	89 d0                	mov    eax,edx
c0020d1a:	c1 e0 02             	shl    eax,0x2
c0020d1d:	01 d0                	add    eax,edx
c0020d1f:	01 c0                	add    eax,eax
c0020d21:	83 ec 0c             	sub    esp,0xc
c0020d24:	50                   	push   eax
c0020d25:	e8 3a 4c 00 00       	call   c0025964 <milliTenthSleep(unsigned int)>
c0020d2a:	83 c4 10             	add    esp,0x10
c0020d2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020d31:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020d35:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020d3d:	eb a1                	jmp    c0020ce0 <Semaphore::acquire(int)+0x1c>
c0020d3f:	90                   	nop
c0020d40:	83 ec 0c             	sub    esp,0xc
c0020d43:	68 90 01 00 00       	push   0x190
c0020d48:	e8 17 4c 00 00       	call   c0025964 <milliTenthSleep(unsigned int)>
c0020d4d:	83 c4 10             	add    esp,0x10
c0020d50:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020d55:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020d5a:	eb 84                	jmp    c0020ce0 <Semaphore::acquire(int)+0x1c>
c0020d5c:	90                   	nop
c0020d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0020d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d64:	e9 ff 00 00 00       	jmp    c0020e68 <Semaphore::acquire(int)+0x1a4>
c0020d69:	8d 76 00             	lea    esi,[esi+0x0]
c0020d6c:	fa                   	cli    
c0020d6d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020d72:	83 c0 01             	add    eax,0x1
c0020d75:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020d7a:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020d7f:	83 c0 01             	add    eax,0x1
c0020d82:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d8b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d94:	39 c2                	cmp    edx,eax
c0020d96:	7d 14                	jge    c0020dac <Semaphore::acquire(int)+0xe8>
c0020d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0020da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020da6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020da9:	eb 6d                	jmp    c0020e18 <Semaphore::acquire(int)+0x154>
c0020dab:	90                   	nop
c0020dac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0020db3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020dba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020dc1:	85 c0                	test   eax,eax
c0020dc3:	75 13                	jne    c0020dd8 <Semaphore::acquire(int)+0x114>
c0020dc5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020dca:	8b 10                	mov    edx,DWORD PTR [eax]
c0020dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020dd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020dd3:	eb 17                	jmp    c0020dec <Semaphore::acquire(int)+0x128>
c0020dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0020dd8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020de4:	8b 12                	mov    edx,DWORD PTR [edx]
c0020de6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020de9:	8d 76 00             	lea    esi,[esi+0x0]
c0020dec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020df1:	8b 10                	mov    edx,DWORD PTR [eax]
c0020df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020dfa:	83 ec 0c             	sub    esp,0xc
c0020dfd:	68 dc 30 03 c0       	push   0xc00330dc
c0020e02:	e8 3e 86 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0020e07:	83 c4 10             	add    esp,0x10
c0020e0a:	83 ec 0c             	sub    esp,0xc
c0020e0d:	6a 05                	push   0x5
c0020e0f:	e8 34 4a 00 00       	call   c0025848 <blockTask(TaskState)>
c0020e14:	83 c4 10             	add    esp,0x10
c0020e17:	90                   	nop
c0020e18:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e1d:	83 e8 01             	sub    eax,0x1
c0020e20:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020e25:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e2a:	85 c0                	test   eax,eax
c0020e2c:	75 1a                	jne    c0020e48 <Semaphore::acquire(int)+0x184>
c0020e2e:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020e33:	85 c0                	test   eax,eax
c0020e35:	74 11                	je     c0020e48 <Semaphore::acquire(int)+0x184>
c0020e37:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020e41:	e8 46 49 00 00       	call   c002578c <schedule()>
c0020e46:	66 90                	xchg   ax,ax
c0020e48:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020e4d:	83 e8 01             	sub    eax,0x1
c0020e50:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020e55:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020e5a:	85 c0                	test   eax,eax
c0020e5c:	75 02                	jne    c0020e60 <Semaphore::acquire(int)+0x19c>
c0020e5e:	fb                   	sti    
c0020e5f:	90                   	nop
c0020e60:	b8 00 00 00 00       	mov    eax,0x0
c0020e65:	8d 76 00             	lea    esi,[esi+0x0]
c0020e68:	83 c4 1c             	add    esp,0x1c
c0020e6b:	c3                   	ret    

c0020e6c <Semaphore::acquire()>:
c0020e6c:	83 ec 0c             	sub    esp,0xc
c0020e6f:	83 ec 08             	sub    esp,0x8
c0020e72:	6a 00                	push   0x0
c0020e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e78:	e8 47 fe ff ff       	call   c0020cc4 <Semaphore::acquire(int)>
c0020e7d:	83 c4 10             	add    esp,0x10
c0020e80:	90                   	nop
c0020e81:	83 c4 0c             	add    esp,0xc
c0020e84:	c3                   	ret    
c0020e85:	90                   	nop
c0020e86:	66 90                	xchg   ax,ax

c0020e88 <Semaphore::release()>:
c0020e88:	83 ec 1c             	sub    esp,0x1c
c0020e8b:	fa                   	cli    
c0020e8c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020e91:	83 c0 01             	add    eax,0x1
c0020e94:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020e99:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e9e:	83 c0 01             	add    eax,0x1
c0020ea1:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ead:	85 c0                	test   eax,eax
c0020eaf:	74 2b                	je     c0020edc <Semaphore::release()+0x54>
c0020eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020eb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ec0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020eca:	83 ec 0c             	sub    esp,0xc
c0020ecd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ed1:	e8 ae 4b 00 00       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c0020ed6:	83 c4 10             	add    esp,0x10
c0020ed9:	eb 15                	jmp    c0020ef0 <Semaphore::release()+0x68>
c0020edb:	90                   	nop
c0020edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ee0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020ee3:	8d 50 ff             	lea    edx,[eax-0x1]
c0020ee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020eed:	8d 76 00             	lea    esi,[esi+0x0]
c0020ef0:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020ef5:	83 e8 01             	sub    eax,0x1
c0020ef8:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020efd:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020f02:	85 c0                	test   eax,eax
c0020f04:	75 1a                	jne    c0020f20 <Semaphore::release()+0x98>
c0020f06:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020f0b:	85 c0                	test   eax,eax
c0020f0d:	74 11                	je     c0020f20 <Semaphore::release()+0x98>
c0020f0f:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020f19:	e8 6e 48 00 00       	call   c002578c <schedule()>
c0020f1e:	66 90                	xchg   ax,ax
c0020f20:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020f25:	83 e8 01             	sub    eax,0x1
c0020f28:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020f2d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020f32:	85 c0                	test   eax,eax
c0020f34:	75 02                	jne    c0020f38 <Semaphore::release()+0xb0>
c0020f36:	fb                   	sti    
c0020f37:	90                   	nop
c0020f38:	90                   	nop
c0020f39:	83 c4 1c             	add    esp,0x1c
c0020f3c:	c3                   	ret    

c0020f3d <KiSigKill(int)>:
c0020f3d:	83 ec 0c             	sub    esp,0xc
c0020f40:	6a 00                	push   0x0
c0020f42:	6a 00                	push   0x0
c0020f44:	6a ff                	push   0xffffffff
c0020f46:	6a 01                	push   0x1
c0020f48:	e8 05 51 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020f4d:	83 c4 1c             	add    esp,0x1c
c0020f50:	c3                   	ret    

c0020f51 <KiDefaultSignalHandlerIgnore(int)>:
c0020f51:	c3                   	ret    

c0020f52 <KiDefaultSignalHandlerPause(int)>:
c0020f52:	57                   	push   edi
c0020f53:	b9 07 00 00 00       	mov    ecx,0x7
c0020f58:	56                   	push   esi
c0020f59:	be 37 31 03 c0       	mov    esi,0xc0033137
c0020f5e:	83 ec 24             	sub    esp,0x24
c0020f61:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020f65:	fc                   	cld    
c0020f66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020f68:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020f6c:	50                   	push   eax
c0020f6d:	6a 00                	push   0x0
c0020f6f:	6a 00                	push   0x0
c0020f71:	6a 27                	push   0x27
c0020f73:	e8 da 50 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020f78:	83 c4 34             	add    esp,0x34
c0020f7b:	5e                   	pop    esi
c0020f7c:	5f                   	pop    edi
c0020f7d:	c3                   	ret    

c0020f7e <KiDefaultSignalHandlerResume(int)>:
c0020f7e:	57                   	push   edi
c0020f7f:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020f84:	56                   	push   esi
c0020f85:	be 53 31 03 c0       	mov    esi,0xc0033153
c0020f8a:	83 ec 24             	sub    esp,0x24
c0020f8d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020f91:	fc                   	cld    
c0020f92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f94:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020f98:	50                   	push   eax
c0020f99:	6a 00                	push   0x0
c0020f9b:	6a 00                	push   0x0
c0020f9d:	6a 27                	push   0x27
c0020f9f:	e8 ae 50 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020fa4:	83 c4 34             	add    esp,0x34
c0020fa7:	5e                   	pop    esi
c0020fa8:	5f                   	pop    edi
c0020fa9:	c3                   	ret    

c0020faa <KeDeinitSignals(SigHandlerBlock*)>:
c0020faa:	e9 18 56 ff ff       	jmp    c00165c7 <free>

c0020faf <KeInitSignals()>:
c0020faf:	53                   	push   ebx
c0020fb0:	83 ec 14             	sub    esp,0x14
c0020fb3:	68 c8 00 00 00       	push   0xc8
c0020fb8:	e8 fa 55 ff ff       	call   c00165b7 <malloc>
c0020fbd:	83 c4 0c             	add    esp,0xc
c0020fc0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020fca:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020fd4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020fdb:	89 c3                	mov    ebx,eax
c0020fdd:	6a 20                	push   0x20
c0020fdf:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020fe5:	6a 00                	push   0x0
c0020fe7:	50                   	push   eax
c0020fe8:	e8 03 f5 fd ff       	call   c00004f0 <memset>
c0020fed:	83 c4 0c             	add    esp,0xc
c0020ff0:	6a 44                	push   0x44
c0020ff2:	6a 00                	push   0x0
c0020ff4:	53                   	push   ebx
c0020ff5:	e8 f6 f4 fd ff       	call   c00004f0 <memset>
c0020ffa:	89 d8                	mov    eax,ebx
c0020ffc:	83 c4 18             	add    esp,0x18
c0020fff:	5b                   	pop    ebx
c0021000:	c3                   	ret    

c0021001 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0021001:	53                   	push   ebx
c0021002:	b8 01 00 00 00       	mov    eax,0x1
c0021007:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002100b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002100f:	83 f9 10             	cmp    ecx,0x10
c0021012:	7f 21                	jg     c0021035 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0021014:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0021017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002101b:	89 03                	mov    DWORD PTR [ebx],eax
c002101d:	b8 01 00 00 00       	mov    eax,0x1
c0021022:	d3 e0                	shl    eax,cl
c0021024:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0021028:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002102b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0021033:	31 c0                	xor    eax,eax
c0021035:	5b                   	pop    ebx
c0021036:	c3                   	ret    

c0021037 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0021037:	55                   	push   ebp
c0021038:	57                   	push   edi
c0021039:	bf 08 00 00 00       	mov    edi,0x8
c002103e:	56                   	push   esi
c002103f:	53                   	push   ebx
c0021040:	83 ec 18             	sub    esp,0x18
c0021043:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021047:	68 70 31 03 c0       	push   0xc0033170
c002104c:	e8 f4 83 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0021051:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0021058:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c002105e:	83 c4 10             	add    esp,0x10
c0021061:	31 c9                	xor    ecx,ecx
c0021063:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021067:	99                   	cdq    
c0021068:	f7 ff                	idiv   edi
c002106a:	8d 42 24             	lea    eax,[edx+0x24]
c002106d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0021071:	85 f6                	test   esi,esi
c0021073:	75 1a                	jne    c002108f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0021075:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021079:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c002107d:	50                   	push   eax
c002107e:	50                   	push   eax
c002107f:	52                   	push   edx
c0021080:	68 81 31 03 c0       	push   0xc0033181
c0021085:	e8 bb 83 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002108a:	83 c4 10             	add    esp,0x10
c002108d:	eb 1b                	jmp    c00210aa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c002108f:	41                   	inc    ecx
c0021090:	83 f9 08             	cmp    ecx,0x8
c0021093:	75 ce                	jne    c0021063 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0021095:	83 ec 0c             	sub    esp,0xc
c0021098:	be 01 00 00 00       	mov    esi,0x1
c002109d:	68 a2 31 03 c0       	push   0xc00331a2
c00210a2:	e8 9e 83 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00210a7:	83 c4 10             	add    esp,0x10
c00210aa:	83 c4 0c             	add    esp,0xc
c00210ad:	89 f0                	mov    eax,esi
c00210af:	5b                   	pop    ebx
c00210b0:	5e                   	pop    esi
c00210b1:	5f                   	pop    edi
c00210b2:	5d                   	pop    ebp
c00210b3:	c3                   	ret    

c00210b4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00210b4:	55                   	push   ebp
c00210b5:	57                   	push   edi
c00210b6:	56                   	push   esi
c00210b7:	53                   	push   ebx
c00210b8:	51                   	push   ecx
c00210b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00210bd:	85 db                	test   ebx,ebx
c00210bf:	0f 84 bc 00 00 00    	je     c0021181 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00210c5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00210cc:	0f 84 af 00 00 00    	je     c0021181 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00210d2:	31 c9                	xor    ecx,ecx
c00210d4:	bf 08 00 00 00       	mov    edi,0x8
c00210d9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00210df:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00210e2:	99                   	cdq    
c00210e3:	f7 ff                	idiv   edi
c00210e5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00210ec:	85 ed                	test   ebp,ebp
c00210ee:	0f 84 9e 00 00 00    	je     c0021192 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00210f4:	89 e9                	mov    ecx,ebp
c00210f6:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00210fc:	bf 01 00 00 00       	mov    edi,0x1
c0021101:	89 04 24             	mov    DWORD PTR [esp],eax
c0021104:	d3 e7                	shl    edi,cl
c0021106:	31 c9                	xor    ecx,ecx
c0021108:	b8 01 00 00 00       	mov    eax,0x1
c002110d:	d3 e0                	shl    eax,cl
c002110f:	85 04 24             	test   DWORD PTR [esp],eax
c0021112:	74 06                	je     c002111a <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0021114:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0021118:	75 67                	jne    c0021181 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002111a:	41                   	inc    ecx
c002111b:	83 f9 11             	cmp    ecx,0x11
c002111e:	75 e8                	jne    c0021108 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0021120:	46                   	inc    esi
c0021121:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021124:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c002112a:	09 f8                	or     eax,edi
c002112c:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0021137:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c002113d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0021144:	31 c0                	xor    eax,eax
c0021146:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c002114e:	74 09                	je     c0021159 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0021150:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0021157:	eb 06                	jmp    c002115f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0021159:	40                   	inc    eax
c002115a:	83 f8 08             	cmp    eax,0x8
c002115d:	75 e7                	jne    c0021146 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c002115f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0021162:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021166:	83 fd 09             	cmp    ebp,0x9
c0021169:	89 2a                	mov    DWORD PTR [edx],ebp
c002116b:	75 07                	jne    c0021174 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c002116d:	b8 3d 0f 02 c0       	mov    eax,0xc0020f3d
c0021172:	eb 31                	jmp    c00211a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021174:	83 f8 01             	cmp    eax,0x1
c0021177:	75 0c                	jne    c0021185 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0021179:	f7 d7                	not    edi
c002117b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0021181:	31 c0                	xor    eax,eax
c0021183:	eb 20                	jmp    c00211a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021185:	85 c0                	test   eax,eax
c0021187:	75 1c                	jne    c00211a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021189:	8b 04 ad 60 4a 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcb5a0]
c0021190:	eb 13                	jmp    c00211a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021192:	46                   	inc    esi
c0021193:	41                   	inc    ecx
c0021194:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c002119a:	83 f9 08             	cmp    ecx,0x8
c002119d:	0f 85 36 ff ff ff    	jne    c00210d9 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00211a3:	eb dc                	jmp    c0021181 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00211a5:	5a                   	pop    edx
c00211a6:	5b                   	pop    ebx
c00211a7:	5e                   	pop    esi
c00211a8:	5f                   	pop    edi
c00211a9:	5d                   	pop    ebp
c00211aa:	c3                   	ret    

c00211ab <KiCheckSignalZ>:
c00211ab:	83 ec 10             	sub    esp,0x10
c00211ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211b2:	50                   	push   eax
c00211b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211bb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00211c1:	e8 ee fe ff ff       	call   c00210b4 <KeCheckSignal(SigHandlerBlock*, int*)>
c00211c6:	5a                   	pop    edx
c00211c7:	31 d2                	xor    edx,edx
c00211c9:	59                   	pop    ecx
c00211ca:	85 c0                	test   eax,eax
c00211cc:	74 19                	je     c00211e7 <KiCheckSignalZ+0x3c>
c00211ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00211d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00211d7:	89 02                	mov    DWORD PTR [edx],eax
c00211d9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00211e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00211e7:	89 d0                	mov    eax,edx
c00211e9:	83 c4 10             	add    esp,0x10
c00211ec:	c3                   	ret    

c00211ed <KeCompleteSignal(SigHandlerBlock*, int)>:
c00211ed:	56                   	push   esi
c00211ee:	53                   	push   ebx
c00211ef:	bb 01 00 00 00       	mov    ebx,0x1
c00211f4:	52                   	push   edx
c00211f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00211f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00211fd:	d3 e3                	shl    ebx,cl
c00211ff:	83 f9 10             	cmp    ecx,0x10
c0021202:	7f 08                	jg     c002120c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0021204:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c002120a:	75 10                	jne    c002121c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c002120c:	83 ec 0c             	sub    esp,0xc
c002120f:	68 b3 31 03 c0       	push   0xc00331b3
c0021214:	e8 65 f5 ff ff       	call   c002077e <KePanic(char const*)>
c0021219:	83 c4 10             	add    esp,0x10
c002121c:	f7 d3                	not    ebx
c002121e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0021224:	58                   	pop    eax
c0021225:	5b                   	pop    ebx
c0021226:	5e                   	pop    esi
c0021227:	c3                   	ret    

c0021228 <KiFinishSignalZ>:
c0021228:	53                   	push   ebx
c0021229:	83 ec 10             	sub    esp,0x10
c002122c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021230:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0021233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021238:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002123b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0021241:	e8 a7 ff ff ff       	call   c00211ed <KeCompleteSignal(SigHandlerBlock*, int)>
c0021246:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002124c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021253:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c002125a:	83 c4 18             	add    esp,0x18
c002125d:	5b                   	pop    ebx
c002125e:	c3                   	ret    

c002125f <SysSeekDir(regs*)>:
c002125f:	31 c0                	xor    eax,eax
c0021261:	31 d2                	xor    edx,edx
c0021263:	c3                   	ret    

c0021264 <SysTellDir(regs*)>:
c0021264:	31 c0                	xor    eax,eax
c0021266:	31 d2                	xor    edx,edx
c0021268:	c3                   	ret    

c0021269 <SysVerify(regs*)>:
c0021269:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002126d:	31 d2                	xor    edx,edx
c002126f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021272:	c3                   	ret    

c0021273 <SysGetArgc(regs*)>:
c0021273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021278:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002127b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0021281:	89 c2                	mov    edx,eax
c0021283:	c1 fa 1f             	sar    edx,0x1f
c0021286:	c3                   	ret    

c0021287 <SysTTYName(regs*)>:
c0021287:	b8 01 00 00 00       	mov    eax,0x1
c002128c:	31 d2                	xor    edx,edx
c002128e:	c3                   	ret    

c002128f <SysFormatDisk(regs*)>:
c002128f:	56                   	push   esi
c0021290:	53                   	push   ebx
c0021291:	83 ec 04             	sub    esp,0x4
c0021294:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021298:	8b 1d 04 df 03 c0    	mov    ebx,DWORD PTR ds:0xc003df04
c002129e:	eb 28                	jmp    c00212c8 <SysFormatDisk(regs*)+0x39>
c00212a0:	83 ec 0c             	sub    esp,0xc
c00212a3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00212a6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00212a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00212ab:	51                   	push   ecx
c00212ac:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00212af:	51                   	push   ecx
c00212b0:	50                   	push   eax
c00212b1:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c00212b8:	50                   	push   eax
c00212b9:	53                   	push   ebx
c00212ba:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00212bd:	83 c4 20             	add    esp,0x20
c00212c0:	83 f8 08             	cmp    eax,0x8
c00212c3:	75 14                	jne    c00212d9 <SysFormatDisk(regs*)+0x4a>
c00212c5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00212c8:	85 db                	test   ebx,ebx
c00212ca:	75 d4                	jne    c00212a0 <SysFormatDisk(regs*)+0x11>
c00212cc:	83 c4 04             	add    esp,0x4
c00212cf:	b8 03 00 00 00       	mov    eax,0x3
c00212d4:	31 d2                	xor    edx,edx
c00212d6:	5b                   	pop    ebx
c00212d7:	5e                   	pop    esi
c00212d8:	c3                   	ret    
c00212d9:	85 c0                	test   eax,eax
c00212db:	74 1f                	je     c00212fc <SysFormatDisk(regs*)+0x6d>
c00212dd:	83 f8 09             	cmp    eax,0x9
c00212e0:	74 0d                	je     c00212ef <SysFormatDisk(regs*)+0x60>
c00212e2:	83 c4 04             	add    esp,0x4
c00212e5:	b8 02 00 00 00       	mov    eax,0x2
c00212ea:	31 d2                	xor    edx,edx
c00212ec:	5b                   	pop    ebx
c00212ed:	5e                   	pop    esi
c00212ee:	c3                   	ret    
c00212ef:	83 c4 04             	add    esp,0x4
c00212f2:	b8 01 00 00 00       	mov    eax,0x1
c00212f7:	31 d2                	xor    edx,edx
c00212f9:	5b                   	pop    ebx
c00212fa:	5e                   	pop    esi
c00212fb:	c3                   	ret    
c00212fc:	83 c4 04             	add    esp,0x4
c00212ff:	31 c0                	xor    eax,eax
c0021301:	31 d2                	xor    edx,edx
c0021303:	5b                   	pop    ebx
c0021304:	5e                   	pop    esi
c0021305:	c3                   	ret    

c0021306 <SysSetDiskVolumeLabel(regs*)>:
c0021306:	56                   	push   esi
c0021307:	53                   	push   ebx
c0021308:	83 ec 04             	sub    esp,0x4
c002130b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002130f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021312:	83 f8 19             	cmp    eax,0x19
c0021315:	77 33                	ja     c002134a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021317:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c002131e:	85 c9                	test   ecx,ecx
c0021320:	74 28                	je     c002134a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021322:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021325:	85 db                	test   ebx,ebx
c0021327:	74 21                	je     c002134a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021329:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002132f:	85 d2                	test   edx,edx
c0021331:	74 17                	je     c002134a <SysSetDiskVolumeLabel(regs*)+0x44>
c0021333:	8b 32                	mov    esi,DWORD PTR [edx]
c0021335:	53                   	push   ebx
c0021336:	50                   	push   eax
c0021337:	51                   	push   ecx
c0021338:	52                   	push   edx
c0021339:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c002133c:	83 c4 10             	add    esp,0x10
c002133f:	89 c2                	mov    edx,eax
c0021341:	83 c4 04             	add    esp,0x4
c0021344:	c1 fa 1f             	sar    edx,0x1f
c0021347:	5b                   	pop    ebx
c0021348:	5e                   	pop    esi
c0021349:	c3                   	ret    
c002134a:	83 c4 04             	add    esp,0x4
c002134d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021352:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021357:	5b                   	pop    ebx
c0021358:	5e                   	pop    esi
c0021359:	c3                   	ret    

c002135a <SysGetDiskVolumeLabel(regs*)>:
c002135a:	57                   	push   edi
c002135b:	56                   	push   esi
c002135c:	53                   	push   ebx
c002135d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021361:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021364:	83 fa 19             	cmp    edx,0x19
c0021367:	77 3c                	ja     c00213a5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021369:	8b 0c 95 80 03 04 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffbfc80]
c0021370:	85 c9                	test   ecx,ecx
c0021372:	74 31                	je     c00213a5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021374:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0021377:	85 db                	test   ebx,ebx
c0021379:	74 2a                	je     c00213a5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002137b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002137e:	85 f6                	test   esi,esi
c0021380:	74 23                	je     c00213a5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021382:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0021388:	85 c0                	test   eax,eax
c002138a:	74 19                	je     c00213a5 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002138c:	83 ec 0c             	sub    esp,0xc
c002138f:	8b 38                	mov    edi,DWORD PTR [eax]
c0021391:	56                   	push   esi
c0021392:	53                   	push   ebx
c0021393:	52                   	push   edx
c0021394:	51                   	push   ecx
c0021395:	50                   	push   eax
c0021396:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0021399:	83 c4 20             	add    esp,0x20
c002139c:	89 c2                	mov    edx,eax
c002139e:	5b                   	pop    ebx
c002139f:	c1 fa 1f             	sar    edx,0x1f
c00213a2:	5e                   	pop    esi
c00213a3:	5f                   	pop    edi
c00213a4:	c3                   	ret    
c00213a5:	5b                   	pop    ebx
c00213a6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00213ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213b0:	5e                   	pop    esi
c00213b1:	5f                   	pop    edi
c00213b2:	c3                   	ret    

c00213b3 <SysShutdown(regs*)>:
c00213b3:	83 ec 0c             	sub    esp,0xc
c00213b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213bd:	85 c0                	test   eax,eax
c00213bf:	74 18                	je     c00213d9 <SysShutdown(regs*)+0x26>
c00213c1:	83 f8 01             	cmp    eax,0x1
c00213c4:	74 38                	je     c00213fe <SysShutdown(regs*)+0x4b>
c00213c6:	83 f8 02             	cmp    eax,0x2
c00213c9:	74 24                	je     c00213ef <SysShutdown(regs*)+0x3c>
c00213cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213d5:	83 c4 0c             	add    esp,0xc
c00213d8:	c3                   	ret    
c00213d9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00213de:	8b 10                	mov    edx,DWORD PTR [eax]
c00213e0:	6a 00                	push   0x0
c00213e2:	6a 00                	push   0x0
c00213e4:	6a 00                	push   0x0
c00213e6:	50                   	push   eax
c00213e7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00213ea:	83 c4 10             	add    esp,0x10
c00213ed:	eb dc                	jmp    c00213cb <SysShutdown(regs*)+0x18>
c00213ef:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00213f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00213f6:	6a 00                	push   0x0
c00213f8:	6a 00                	push   0x0
c00213fa:	6a 01                	push   0x1
c00213fc:	eb e8                	jmp    c00213e6 <SysShutdown(regs*)+0x33>
c00213fe:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c0021403:	85 c0                	test   eax,eax
c0021405:	74 02                	je     c0021409 <SysShutdown(regs*)+0x56>
c0021407:	ff d0                	call   eax
c0021409:	31 c0                	xor    eax,eax
c002140b:	31 d2                	xor    edx,edx
c002140d:	83 c4 0c             	add    esp,0xc
c0021410:	c3                   	ret    

c0021411 <SysRealpath(regs*)>:
c0021411:	83 ec 0c             	sub    esp,0xc
c0021414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021418:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c002141b:	85 d2                	test   edx,edx
c002141d:	74 07                	je     c0021426 <SysRealpath(regs*)+0x15>
c002141f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021422:	85 c0                	test   eax,eax
c0021424:	75 0b                	jne    c0021431 <SysRealpath(regs*)+0x20>
c0021426:	b8 01 00 00 00       	mov    eax,0x1
c002142b:	31 d2                	xor    edx,edx
c002142d:	83 c4 0c             	add    esp,0xc
c0021430:	c3                   	ret    
c0021431:	6a 00                	push   0x0
c0021433:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021439:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002143c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0021442:	51                   	push   ecx
c0021443:	52                   	push   edx
c0021444:	50                   	push   eax
c0021445:	e8 0a 8f ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002144a:	83 c4 10             	add    esp,0x10
c002144d:	31 c0                	xor    eax,eax
c002144f:	31 d2                	xor    edx,edx
c0021451:	83 c4 0c             	add    esp,0xc
c0021454:	c3                   	ret    

c0021455 <SysReadDir(regs*)>:
c0021455:	53                   	push   ebx
c0021456:	83 ec 18             	sub    esp,0x18
c0021459:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002145d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021460:	83 f8 02             	cmp    eax,0x2
c0021463:	76 61                	jbe    c00214c6 <SysReadDir(regs*)+0x71>
c0021465:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c002146c:	77 49                	ja     c00214b7 <SysReadDir(regs*)+0x62>
c002146e:	83 ec 0c             	sub    esp,0xc
c0021471:	50                   	push   eax
c0021472:	e8 3c 6b ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c0021477:	83 c4 10             	add    esp,0x10
c002147a:	85 c0                	test   eax,eax
c002147c:	74 39                	je     c00214b7 <SysReadDir(regs*)+0x62>
c002147e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021486:	83 ec 0c             	sub    esp,0xc
c0021489:	8b 10                	mov    edx,DWORD PTR [eax]
c002148b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002148f:	51                   	push   ecx
c0021490:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021493:	51                   	push   ecx
c0021494:	6a 00                	push   0x0
c0021496:	68 10 01 00 00       	push   0x110
c002149b:	50                   	push   eax
c002149c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002149f:	83 c4 20             	add    esp,0x20
c00214a2:	85 c0                	test   eax,eax
c00214a4:	74 29                	je     c00214cf <SysReadDir(regs*)+0x7a>
c00214a6:	83 f8 07             	cmp    eax,0x7
c00214a9:	74 1b                	je     c00214c6 <SysReadDir(regs*)+0x71>
c00214ab:	b8 02 00 00 00       	mov    eax,0x2
c00214b0:	31 d2                	xor    edx,edx
c00214b2:	83 c4 18             	add    esp,0x18
c00214b5:	5b                   	pop    ebx
c00214b6:	c3                   	ret    
c00214b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214c1:	83 c4 18             	add    esp,0x18
c00214c4:	5b                   	pop    ebx
c00214c5:	c3                   	ret    
c00214c6:	b8 01 00 00 00       	mov    eax,0x1
c00214cb:	31 d2                	xor    edx,edx
c00214cd:	eb e3                	jmp    c00214b2 <SysReadDir(regs*)+0x5d>
c00214cf:	31 c0                	xor    eax,eax
c00214d1:	31 d2                	xor    edx,edx
c00214d3:	eb dd                	jmp    c00214b2 <SysReadDir(regs*)+0x5d>

c00214d5 <SysIsATTY(regs*)>:
c00214d5:	83 ec 0c             	sub    esp,0xc
c00214d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214df:	83 f8 02             	cmp    eax,0x2
c00214e2:	76 07                	jbe    c00214eb <SysIsATTY(regs*)+0x16>
c00214e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00214e9:	75 26                	jne    c0021511 <SysIsATTY(regs*)+0x3c>
c00214eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00214f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00214f9:	85 c0                	test   eax,eax
c00214fb:	74 24                	je     c0021521 <SysIsATTY(regs*)+0x4c>
c00214fd:	83 ec 0c             	sub    esp,0xc
c0021500:	8b 10                	mov    edx,DWORD PTR [eax]
c0021502:	50                   	push   eax
c0021503:	ff 12                	call   DWORD PTR [edx]
c0021505:	31 d2                	xor    edx,edx
c0021507:	0f b6 c0             	movzx  eax,al
c002150a:	83 c4 10             	add    esp,0x10
c002150d:	83 c4 0c             	add    esp,0xc
c0021510:	c3                   	ret    
c0021511:	83 ec 0c             	sub    esp,0xc
c0021514:	50                   	push   eax
c0021515:	e8 99 6a ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c002151a:	83 c4 10             	add    esp,0x10
c002151d:	85 c0                	test   eax,eax
c002151f:	75 dc                	jne    c00214fd <SysIsATTY(regs*)+0x28>
c0021521:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021526:	ba ff ff ff ff       	mov    edx,0xffffffff
c002152b:	83 c4 0c             	add    esp,0xc
c002152e:	c3                   	ret    

c002152f <SysSeek(regs*)>:
c002152f:	53                   	push   ebx
c0021530:	83 ec 08             	sub    esp,0x8
c0021533:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021537:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002153a:	8d 50 fd             	lea    edx,[eax-0x3]
c002153d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021543:	77 32                	ja     c0021577 <SysSeek(regs*)+0x48>
c0021545:	83 ec 0c             	sub    esp,0xc
c0021548:	50                   	push   eax
c0021549:	e8 65 6a ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c002154e:	83 c4 0c             	add    esp,0xc
c0021551:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0021554:	31 db                	xor    ebx,ebx
c0021556:	53                   	push   ebx
c0021557:	51                   	push   ecx
c0021558:	50                   	push   eax
c0021559:	e8 ca 91 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c002155e:	83 c4 10             	add    esp,0x10
c0021561:	85 c0                	test   eax,eax
c0021563:	0f 95 c0             	setne  al
c0021566:	31 d2                	xor    edx,edx
c0021568:	0f b6 c0             	movzx  eax,al
c002156b:	f7 d8                	neg    eax
c002156d:	83 d2 00             	adc    edx,0x0
c0021570:	83 c4 08             	add    esp,0x8
c0021573:	f7 da                	neg    edx
c0021575:	5b                   	pop    ebx
c0021576:	c3                   	ret    
c0021577:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002157c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021581:	83 c4 08             	add    esp,0x8
c0021584:	5b                   	pop    ebx
c0021585:	c3                   	ret    

c0021586 <SysTell(regs*)>:
c0021586:	53                   	push   ebx
c0021587:	83 ec 08             	sub    esp,0x8
c002158a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002158e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021591:	83 f8 02             	cmp    eax,0x2
c0021594:	76 4e                	jbe    c00215e4 <SysTell(regs*)+0x5e>
c0021596:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c002159b:	76 19                	jbe    c00215b6 <SysTell(regs*)+0x30>
c002159d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00215a0:	31 d2                	xor    edx,edx
c00215a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215af:	31 c0                	xor    eax,eax
c00215b1:	83 c4 08             	add    esp,0x8
c00215b4:	5b                   	pop    ebx
c00215b5:	c3                   	ret    
c00215b6:	83 ec 0c             	sub    esp,0xc
c00215b9:	50                   	push   eax
c00215ba:	e8 f4 69 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c00215bf:	5a                   	pop    edx
c00215c0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00215c3:	59                   	pop    ecx
c00215c4:	53                   	push   ebx
c00215c5:	50                   	push   eax
c00215c6:	e8 09 92 ff ff       	call   c001a7d4 <File::tell(unsigned long long*)>
c00215cb:	83 c4 10             	add    esp,0x10
c00215ce:	85 c0                	test   eax,eax
c00215d0:	0f 95 c0             	setne  al
c00215d3:	31 d2                	xor    edx,edx
c00215d5:	0f b6 c0             	movzx  eax,al
c00215d8:	f7 d8                	neg    eax
c00215da:	83 d2 00             	adc    edx,0x0
c00215dd:	83 c4 08             	add    esp,0x8
c00215e0:	f7 da                	neg    edx
c00215e2:	5b                   	pop    ebx
c00215e3:	c3                   	ret    
c00215e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00215e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00215ee:	83 c4 08             	add    esp,0x8
c00215f1:	5b                   	pop    ebx
c00215f2:	c3                   	ret    

c00215f3 <SysSize(regs*)>:
c00215f3:	53                   	push   ebx
c00215f4:	83 ec 18             	sub    esp,0x18
c00215f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00215fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00215fe:	83 f8 02             	cmp    eax,0x2
c0021601:	76 54                	jbe    c0021657 <SysSize(regs*)+0x64>
c0021603:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021608:	76 19                	jbe    c0021623 <SysSize(regs*)+0x30>
c002160a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002160d:	31 d2                	xor    edx,edx
c002160f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021615:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002161c:	31 c0                	xor    eax,eax
c002161e:	83 c4 18             	add    esp,0x18
c0021621:	5b                   	pop    ebx
c0021622:	c3                   	ret    
c0021623:	83 ec 0c             	sub    esp,0xc
c0021626:	50                   	push   eax
c0021627:	e8 87 69 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c002162c:	83 c4 0c             	add    esp,0xc
c002162f:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021633:	52                   	push   edx
c0021634:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021637:	52                   	push   edx
c0021638:	50                   	push   eax
c0021639:	e8 2e 93 ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c002163e:	83 c4 10             	add    esp,0x10
c0021641:	85 c0                	test   eax,eax
c0021643:	0f 95 c0             	setne  al
c0021646:	31 d2                	xor    edx,edx
c0021648:	0f b6 c0             	movzx  eax,al
c002164b:	f7 d8                	neg    eax
c002164d:	83 d2 00             	adc    edx,0x0
c0021650:	83 c4 18             	add    esp,0x18
c0021653:	f7 da                	neg    edx
c0021655:	5b                   	pop    ebx
c0021656:	c3                   	ret    
c0021657:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002165c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021661:	83 c4 18             	add    esp,0x18
c0021664:	5b                   	pop    ebx
c0021665:	c3                   	ret    

c0021666 <SysSizeFromFilename(regs*)>:
c0021666:	55                   	push   ebp
c0021667:	57                   	push   edi
c0021668:	56                   	push   esi
c0021669:	53                   	push   ebx
c002166a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021670:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021677:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002167a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002167d:	85 f6                	test   esi,esi
c002167f:	74 34                	je     c00216b5 <SysSizeFromFilename(regs*)+0x4f>
c0021681:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021687:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002168a:	83 f8 02             	cmp    eax,0x2
c002168d:	76 2d                	jbe    c00216bc <SysSizeFromFilename(regs*)+0x56>
c002168f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021694:	76 3b                	jbe    c00216d1 <SysSizeFromFilename(regs*)+0x6b>
c0021696:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021699:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002169f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00216a6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00216ac:	31 c0                	xor    eax,eax
c00216ae:	5b                   	pop    ebx
c00216af:	31 d2                	xor    edx,edx
c00216b1:	5e                   	pop    esi
c00216b2:	5f                   	pop    edi
c00216b3:	5d                   	pop    ebp
c00216b4:	c3                   	ret    
c00216b5:	89 f8                	mov    eax,edi
c00216b7:	83 f8 02             	cmp    eax,0x2
c00216ba:	77 d3                	ja     c002168f <SysSizeFromFilename(regs*)+0x29>
c00216bc:	81 c4 5c 02 00 00    	add    esp,0x25c
c00216c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00216c7:	5b                   	pop    ebx
c00216c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00216cd:	5e                   	pop    esi
c00216ce:	5f                   	pop    edi
c00216cf:	5d                   	pop    ebp
c00216d0:	c3                   	ret    
c00216d1:	83 ec 0c             	sub    esp,0xc
c00216d4:	68 14 01 00 00       	push   0x114
c00216d9:	e8 d9 4e ff ff       	call   c00165b7 <malloc>
c00216de:	6a 01                	push   0x1
c00216e0:	89 c5                	mov    ebp,eax
c00216e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216e7:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00216ea:	51                   	push   ecx
c00216eb:	57                   	push   edi
c00216ec:	55                   	push   ebp
c00216ed:	e8 7c 8e ff ff       	call   c001a56e <File::File(char const*, Process*, bool)>
c00216f2:	83 c4 1c             	add    esp,0x1c
c00216f5:	8d 44 24 23          	lea    eax,[esp+0x23]
c00216f9:	50                   	push   eax
c00216fa:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00216fd:	53                   	push   ebx
c00216fe:	55                   	push   ebp
c00216ff:	e8 68 92 ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c0021704:	83 c4 10             	add    esp,0x10
c0021707:	85 ed                	test   ebp,ebp
c0021709:	74 15                	je     c0021720 <SysSizeFromFilename(regs*)+0xba>
c002170b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002170f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021712:	83 ec 0c             	sub    esp,0xc
c0021715:	55                   	push   ebp
c0021716:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021719:	83 c4 10             	add    esp,0x10
c002171c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021720:	85 c0                	test   eax,eax
c0021722:	75 98                	jne    c00216bc <SysSizeFromFilename(regs*)+0x56>
c0021724:	6a 00                	push   0x0
c0021726:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002172b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002172e:	05 0c 01 00 00       	add    eax,0x10c
c0021733:	50                   	push   eax
c0021734:	57                   	push   edi
c0021735:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002173c:	53                   	push   ebx
c002173d:	e8 12 8c ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021742:	58                   	pop    eax
c0021743:	5a                   	pop    edx
c0021744:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021748:	50                   	push   eax
c0021749:	53                   	push   ebx
c002174a:	e8 6d 86 ff ff       	call   c0019dbc <KeDereferenceSymlink(char const*, char*)>
c002174f:	83 c4 10             	add    esp,0x10
c0021752:	83 f8 01             	cmp    eax,0x1
c0021755:	74 1a                	je     c0021771 <SysSizeFromFilename(regs*)+0x10b>
c0021757:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c002175c:	74 26                	je     c0021784 <SysSizeFromFilename(regs*)+0x11e>
c002175e:	85 f6                	test   esi,esi
c0021760:	0f 84 40 ff ff ff    	je     c00216a6 <SysSizeFromFilename(regs*)+0x40>
c0021766:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002176c:	e9 35 ff ff ff       	jmp    c00216a6 <SysSizeFromFilename(regs*)+0x40>
c0021771:	85 f6                	test   esi,esi
c0021773:	0f 84 2d ff ff ff    	je     c00216a6 <SysSizeFromFilename(regs*)+0x40>
c0021779:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002177f:	e9 22 ff ff ff       	jmp    c00216a6 <SysSizeFromFilename(regs*)+0x40>
c0021784:	85 f6                	test   esi,esi
c0021786:	0f 84 1a ff ff ff    	je     c00216a6 <SysSizeFromFilename(regs*)+0x40>
c002178c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021792:	e9 0f ff ff ff       	jmp    c00216a6 <SysSizeFromFilename(regs*)+0x40>

c0021797 <SysSizeFromFilenameNoSymlink(regs*)>:
c0021797:	55                   	push   ebp
c0021798:	57                   	push   edi
c0021799:	56                   	push   esi
c002179a:	53                   	push   ebx
c002179b:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00217a1:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00217a8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00217ab:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00217ae:	85 f6                	test   esi,esi
c00217b0:	74 34                	je     c00217e6 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00217b2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00217b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00217bb:	83 f8 02             	cmp    eax,0x2
c00217be:	76 2d                	jbe    c00217ed <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00217c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00217c5:	76 3b                	jbe    c0021802 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00217c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00217ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00217d7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00217dd:	31 c0                	xor    eax,eax
c00217df:	5b                   	pop    ebx
c00217e0:	31 d2                	xor    edx,edx
c00217e2:	5e                   	pop    esi
c00217e3:	5f                   	pop    edi
c00217e4:	5d                   	pop    ebp
c00217e5:	c3                   	ret    
c00217e6:	89 f8                	mov    eax,edi
c00217e8:	83 f8 02             	cmp    eax,0x2
c00217eb:	77 d3                	ja     c00217c0 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00217ed:	81 c4 5c 02 00 00    	add    esp,0x25c
c00217f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00217f8:	5b                   	pop    ebx
c00217f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00217fe:	5e                   	pop    esi
c00217ff:	5f                   	pop    edi
c0021800:	5d                   	pop    ebp
c0021801:	c3                   	ret    
c0021802:	83 ec 0c             	sub    esp,0xc
c0021805:	68 14 01 00 00       	push   0x114
c002180a:	e8 a8 4d ff ff       	call   c00165b7 <malloc>
c002180f:	6a 00                	push   0x0
c0021811:	89 c5                	mov    ebp,eax
c0021813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021818:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002181b:	51                   	push   ecx
c002181c:	57                   	push   edi
c002181d:	55                   	push   ebp
c002181e:	e8 4b 8d ff ff       	call   c001a56e <File::File(char const*, Process*, bool)>
c0021823:	83 c4 1c             	add    esp,0x1c
c0021826:	8d 44 24 23          	lea    eax,[esp+0x23]
c002182a:	50                   	push   eax
c002182b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002182e:	53                   	push   ebx
c002182f:	55                   	push   ebp
c0021830:	e8 37 91 ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c0021835:	83 c4 10             	add    esp,0x10
c0021838:	85 ed                	test   ebp,ebp
c002183a:	74 15                	je     c0021851 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c002183c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021840:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0021843:	83 ec 0c             	sub    esp,0xc
c0021846:	55                   	push   ebp
c0021847:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002184a:	83 c4 10             	add    esp,0x10
c002184d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021851:	85 c0                	test   eax,eax
c0021853:	75 98                	jne    c00217ed <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0021855:	6a 00                	push   0x0
c0021857:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002185c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002185f:	05 0c 01 00 00       	add    eax,0x10c
c0021864:	50                   	push   eax
c0021865:	57                   	push   edi
c0021866:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c002186d:	53                   	push   ebx
c002186e:	e8 e1 8a ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021873:	58                   	pop    eax
c0021874:	5a                   	pop    edx
c0021875:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021879:	50                   	push   eax
c002187a:	53                   	push   ebx
c002187b:	e8 3c 85 ff ff       	call   c0019dbc <KeDereferenceSymlink(char const*, char*)>
c0021880:	83 c4 10             	add    esp,0x10
c0021883:	83 f8 01             	cmp    eax,0x1
c0021886:	74 1a                	je     c00218a2 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0021888:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c002188d:	74 26                	je     c00218b5 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c002188f:	85 f6                	test   esi,esi
c0021891:	0f 84 40 ff ff ff    	je     c00217d7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021897:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002189d:	e9 35 ff ff ff       	jmp    c00217d7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218a2:	85 f6                	test   esi,esi
c00218a4:	0f 84 2d ff ff ff    	je     c00217d7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218aa:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00218b0:	e9 22 ff ff ff       	jmp    c00217d7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218b5:	85 f6                	test   esi,esi
c00218b7:	0f 84 1a ff ff ff    	je     c00217d7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00218bd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00218c3:	e9 0f ff ff ff       	jmp    c00217d7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00218c8 <SysClose(regs*)>:
c00218c8:	53                   	push   ebx
c00218c9:	83 ec 08             	sub    esp,0x8
c00218cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218d3:	83 f8 02             	cmp    eax,0x2
c00218d6:	76 41                	jbe    c0021919 <SysClose(regs*)+0x51>
c00218d8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00218de:	83 fa 01             	cmp    edx,0x1
c00218e1:	76 2d                	jbe    c0021910 <SysClose(regs*)+0x48>
c00218e3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00218e8:	77 2f                	ja     c0021919 <SysClose(regs*)+0x51>
c00218ea:	83 ec 0c             	sub    esp,0xc
c00218ed:	50                   	push   eax
c00218ee:	e8 c0 66 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c00218f3:	89 c3                	mov    ebx,eax
c00218f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00218f8:	e8 cb 8d ff ff       	call   c001a6c8 <File::close()>
c00218fd:	83 c4 10             	add    esp,0x10
c0021900:	85 db                	test   ebx,ebx
c0021902:	74 0c                	je     c0021910 <SysClose(regs*)+0x48>
c0021904:	83 ec 0c             	sub    esp,0xc
c0021907:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021909:	53                   	push   ebx
c002190a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002190d:	83 c4 10             	add    esp,0x10
c0021910:	31 c0                	xor    eax,eax
c0021912:	31 d2                	xor    edx,edx
c0021914:	83 c4 08             	add    esp,0x8
c0021917:	5b                   	pop    ebx
c0021918:	c3                   	ret    
c0021919:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002191e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021923:	83 c4 08             	add    esp,0x8
c0021926:	5b                   	pop    ebx
c0021927:	c3                   	ret    

c0021928 <SysOpenDir(regs*)>:
c0021928:	56                   	push   esi
c0021929:	53                   	push   ebx
c002192a:	83 ec 04             	sub    esp,0x4
c002192d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021931:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021934:	85 c9                	test   ecx,ecx
c0021936:	74 5d                	je     c0021995 <SysOpenDir(regs*)+0x6d>
c0021938:	83 ec 0c             	sub    esp,0xc
c002193b:	68 14 01 00 00       	push   0x114
c0021940:	e8 72 4c ff ff       	call   c00165b7 <malloc>
c0021945:	83 c4 0c             	add    esp,0xc
c0021948:	89 c6                	mov    esi,eax
c002194a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002194f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021952:	50                   	push   eax
c0021953:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021956:	52                   	push   edx
c0021957:	56                   	push   esi
c0021958:	e8 cf 91 ff ff       	call   c001ab2c <Directory::Directory(char const*, Process*)>
c002195d:	83 c4 10             	add    esp,0x10
c0021960:	85 f6                	test   esi,esi
c0021962:	74 31                	je     c0021995 <SysOpenDir(regs*)+0x6d>
c0021964:	83 ec 0c             	sub    esp,0xc
c0021967:	56                   	push   esi
c0021968:	e8 87 92 ff ff       	call   c001abf4 <Directory::open()>
c002196d:	83 c4 10             	add    esp,0x10
c0021970:	85 c0                	test   eax,eax
c0021972:	75 21                	jne    c0021995 <SysOpenDir(regs*)+0x6d>
c0021974:	83 ec 0c             	sub    esp,0xc
c0021977:	56                   	push   esi
c0021978:	e8 39 63 ff ff       	call   c0017cb6 <UnixFile::getFileDescriptor()>
c002197d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021980:	83 c4 10             	add    esp,0x10
c0021983:	89 02                	mov    DWORD PTR [edx],eax
c0021985:	c1 f8 1f             	sar    eax,0x1f
c0021988:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002198b:	83 c4 04             	add    esp,0x4
c002198e:	31 c0                	xor    eax,eax
c0021990:	31 d2                	xor    edx,edx
c0021992:	5b                   	pop    ebx
c0021993:	5e                   	pop    esi
c0021994:	c3                   	ret    
c0021995:	83 c4 04             	add    esp,0x4
c0021998:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002199d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00219a2:	5b                   	pop    ebx
c00219a3:	5e                   	pop    esi
c00219a4:	c3                   	ret    

c00219a5 <SysMakeDir(regs*)>:
c00219a5:	56                   	push   esi
c00219a6:	53                   	push   ebx
c00219a7:	83 ec 10             	sub    esp,0x10
c00219aa:	68 14 01 00 00       	push   0x114
c00219af:	e8 03 4c ff ff       	call   c00165b7 <malloc>
c00219b4:	83 c4 0c             	add    esp,0xc
c00219b7:	89 c3                	mov    ebx,eax
c00219b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219c1:	50                   	push   eax
c00219c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219c6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00219c9:	52                   	push   edx
c00219ca:	53                   	push   ebx
c00219cb:	e8 5c 91 ff ff       	call   c001ab2c <Directory::Directory(char const*, Process*)>
c00219d0:	83 c4 10             	add    esp,0x10
c00219d3:	85 db                	test   ebx,ebx
c00219d5:	74 2c                	je     c0021a03 <SysMakeDir(regs*)+0x5e>
c00219d7:	83 ec 0c             	sub    esp,0xc
c00219da:	53                   	push   ebx
c00219db:	e8 f4 93 ff ff       	call   c001add4 <Directory::create()>
c00219e0:	89 c6                	mov    esi,eax
c00219e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00219ea:	83 c4 10             	add    esp,0x10
c00219ed:	31 c0                	xor    eax,eax
c00219ef:	85 f6                	test   esi,esi
c00219f1:	0f 95 c0             	setne  al
c00219f4:	31 d2                	xor    edx,edx
c00219f6:	f7 d8                	neg    eax
c00219f8:	83 d2 00             	adc    edx,0x0
c00219fb:	83 c4 04             	add    esp,0x4
c00219fe:	f7 da                	neg    edx
c0021a00:	5b                   	pop    ebx
c0021a01:	5e                   	pop    esi
c0021a02:	c3                   	ret    
c0021a03:	83 c4 04             	add    esp,0x4
c0021a06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a10:	5b                   	pop    ebx
c0021a11:	5e                   	pop    esi
c0021a12:	c3                   	ret    

c0021a13 <SysCloseDir(regs*)>:
c0021a13:	53                   	push   ebx
c0021a14:	83 ec 08             	sub    esp,0x8
c0021a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a1e:	8d 50 fd             	lea    edx,[eax-0x3]
c0021a21:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021a27:	77 2f                	ja     c0021a58 <SysCloseDir(regs*)+0x45>
c0021a29:	83 ec 0c             	sub    esp,0xc
c0021a2c:	50                   	push   eax
c0021a2d:	e8 81 65 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c0021a32:	89 c3                	mov    ebx,eax
c0021a34:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a37:	e8 14 92 ff ff       	call   c001ac50 <Directory::close()>
c0021a3c:	83 c4 10             	add    esp,0x10
c0021a3f:	85 db                	test   ebx,ebx
c0021a41:	74 0c                	je     c0021a4f <SysCloseDir(regs*)+0x3c>
c0021a43:	83 ec 0c             	sub    esp,0xc
c0021a46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021a48:	53                   	push   ebx
c0021a49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021a4c:	83 c4 10             	add    esp,0x10
c0021a4f:	31 c0                	xor    eax,eax
c0021a51:	31 d2                	xor    edx,edx
c0021a53:	83 c4 08             	add    esp,0x8
c0021a56:	5b                   	pop    ebx
c0021a57:	c3                   	ret    
c0021a58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a5d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a62:	83 c4 08             	add    esp,0x8
c0021a65:	5b                   	pop    ebx
c0021a66:	c3                   	ret    

c0021a67 <SysWait(regs*)>:
c0021a67:	83 ec 10             	sub    esp,0x10
c0021a6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a6e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021a71:	52                   	push   edx
c0021a72:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021a75:	51                   	push   ecx
c0021a76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a79:	50                   	push   eax
c0021a7a:	e8 01 3e 00 00       	call   c0025880 <waitTask(int, int*, int)>
c0021a7f:	83 c4 1c             	add    esp,0x1c
c0021a82:	89 c2                	mov    edx,eax
c0021a84:	c1 fa 1f             	sar    edx,0x1f
c0021a87:	c3                   	ret    

c0021a88 <SysNotImpl(regs*)>:
c0021a88:	83 ec 18             	sub    esp,0x18
c0021a8b:	68 c4 31 03 c0       	push   0xc00331c4
c0021a90:	e8 e9 ec ff ff       	call   c002077e <KePanic(char const*)>
c0021a95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a9a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a9f:	83 c4 1c             	add    esp,0x1c
c0021aa2:	c3                   	ret    

c0021aa3 <SysPanic(regs*)>:
c0021aa3:	83 ec 18             	sub    esp,0x18
c0021aa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021aaa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021aad:	50                   	push   eax
c0021aae:	e8 cb ec ff ff       	call   c002077e <KePanic(char const*)>
c0021ab3:	b8 01 00 00 00       	mov    eax,0x1
c0021ab8:	31 d2                	xor    edx,edx
c0021aba:	83 c4 1c             	add    esp,0x1c
c0021abd:	c3                   	ret    

c0021abe <SysRmdir(regs*)>:
c0021abe:	56                   	push   esi
c0021abf:	53                   	push   ebx
c0021ac0:	83 ec 20             	sub    esp,0x20
c0021ac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021ac7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021aca:	68 14 01 00 00       	push   0x114
c0021acf:	e8 e3 4a ff ff       	call   c00165b7 <malloc>
c0021ad4:	6a 00                	push   0x0
c0021ad6:	89 c3                	mov    ebx,eax
c0021ad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021add:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021ae0:	50                   	push   eax
c0021ae1:	56                   	push   esi
c0021ae2:	53                   	push   ebx
c0021ae3:	e8 86 8a ff ff       	call   c001a56e <File::File(char const*, Process*, bool)>
c0021ae8:	83 c4 14             	add    esp,0x14
c0021aeb:	53                   	push   ebx
c0021aec:	e8 47 8d ff ff       	call   c001a838 <File::unlink()>
c0021af1:	83 c4 10             	add    esp,0x10
c0021af4:	85 db                	test   ebx,ebx
c0021af6:	74 14                	je     c0021b0c <SysRmdir(regs*)+0x4e>
c0021af8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021afc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021afe:	83 ec 0c             	sub    esp,0xc
c0021b01:	53                   	push   ebx
c0021b02:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021b05:	83 c4 10             	add    esp,0x10
c0021b08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b0c:	85 c0                	test   eax,eax
c0021b0e:	0f 95 c0             	setne  al
c0021b11:	31 d2                	xor    edx,edx
c0021b13:	0f b6 c0             	movzx  eax,al
c0021b16:	f7 d8                	neg    eax
c0021b18:	83 d2 00             	adc    edx,0x0
c0021b1b:	83 c4 14             	add    esp,0x14
c0021b1e:	f7 da                	neg    edx
c0021b20:	5b                   	pop    ebx
c0021b21:	5e                   	pop    esi
c0021b22:	c3                   	ret    

c0021b23 <SysUnlink(regs*)>:
c0021b23:	56                   	push   esi
c0021b24:	53                   	push   ebx
c0021b25:	83 ec 20             	sub    esp,0x20
c0021b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021b2c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021b2f:	68 14 01 00 00       	push   0x114
c0021b34:	e8 7e 4a ff ff       	call   c00165b7 <malloc>
c0021b39:	6a 00                	push   0x0
c0021b3b:	89 c3                	mov    ebx,eax
c0021b3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021b42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021b45:	50                   	push   eax
c0021b46:	56                   	push   esi
c0021b47:	53                   	push   ebx
c0021b48:	e8 21 8a ff ff       	call   c001a56e <File::File(char const*, Process*, bool)>
c0021b4d:	83 c4 14             	add    esp,0x14
c0021b50:	53                   	push   ebx
c0021b51:	e8 e2 8c ff ff       	call   c001a838 <File::unlink()>
c0021b56:	83 c4 10             	add    esp,0x10
c0021b59:	85 db                	test   ebx,ebx
c0021b5b:	74 14                	je     c0021b71 <SysUnlink(regs*)+0x4e>
c0021b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b61:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021b63:	83 ec 0c             	sub    esp,0xc
c0021b66:	53                   	push   ebx
c0021b67:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021b6a:	83 c4 10             	add    esp,0x10
c0021b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b71:	85 c0                	test   eax,eax
c0021b73:	0f 95 c0             	setne  al
c0021b76:	31 d2                	xor    edx,edx
c0021b78:	0f b6 c0             	movzx  eax,al
c0021b7b:	f7 d8                	neg    eax
c0021b7d:	83 d2 00             	adc    edx,0x0
c0021b80:	83 c4 14             	add    esp,0x14
c0021b83:	f7 da                	neg    edx
c0021b85:	5b                   	pop    ebx
c0021b86:	5e                   	pop    esi
c0021b87:	c3                   	ret    

c0021b88 <SysGetArgv(regs*)>:
c0021b88:	83 ec 0c             	sub    esp,0xc
c0021b8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021b8f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021b92:	85 c0                	test   eax,eax
c0021b94:	78 2c                	js     c0021bc2 <SysGetArgv(regs*)+0x3a>
c0021b96:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021b9c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021b9f:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021ba5:	7d 1b                	jge    c0021bc2 <SysGetArgv(regs*)+0x3a>
c0021ba7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0021bae:	85 c0                	test   eax,eax
c0021bb0:	74 18                	je     c0021bca <SysGetArgv(regs*)+0x42>
c0021bb2:	83 ec 08             	sub    esp,0x8
c0021bb5:	50                   	push   eax
c0021bb6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021bb9:	50                   	push   eax
c0021bba:	e8 81 ea fd ff       	call   c0000640 <strcpy>
c0021bbf:	83 c4 10             	add    esp,0x10
c0021bc2:	31 c0                	xor    eax,eax
c0021bc4:	31 d2                	xor    edx,edx
c0021bc6:	83 c4 0c             	add    esp,0xc
c0021bc9:	c3                   	ret    
c0021bca:	b8 01 00 00 00       	mov    eax,0x1
c0021bcf:	31 d2                	xor    edx,edx
c0021bd1:	83 c4 0c             	add    esp,0xc
c0021bd4:	c3                   	ret    

c0021bd5 <SysUSleep(regs*)>:
c0021bd5:	83 ec 1c             	sub    esp,0x1c
c0021bd8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021bdc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021bdf:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021be2:	6a 00                	push   0x0
c0021be4:	6a 64                	push   0x64
c0021be6:	52                   	push   edx
c0021be7:	50                   	push   eax
c0021be8:	e8 e3 d0 00 00       	call   c002ecd0 <__udivdi3>
c0021bed:	83 c4 14             	add    esp,0x14
c0021bf0:	50                   	push   eax
c0021bf1:	e8 6e 3d 00 00       	call   c0025964 <milliTenthSleep(unsigned int)>
c0021bf6:	31 c0                	xor    eax,eax
c0021bf8:	31 d2                	xor    edx,edx
c0021bfa:	83 c4 1c             	add    esp,0x1c
c0021bfd:	c3                   	ret    

c0021bfe <SysSpawn(regs*)>:
c0021bfe:	56                   	push   esi
c0021bff:	53                   	push   ebx
c0021c00:	83 ec 04             	sub    esp,0x4
c0021c03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021c07:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021c0a:	85 f6                	test   esi,esi
c0021c0c:	75 0a                	jne    c0021c18 <SysSpawn(regs*)+0x1a>
c0021c0e:	83 c4 04             	add    esp,0x4
c0021c11:	31 c0                	xor    eax,eax
c0021c13:	31 d2                	xor    edx,edx
c0021c15:	5b                   	pop    ebx
c0021c16:	5e                   	pop    esi
c0021c17:	c3                   	ret    
c0021c18:	83 ec 0c             	sub    esp,0xc
c0021c1b:	68 24 07 00 00       	push   0x724
c0021c20:	e8 92 49 ff ff       	call   c00165b7 <malloc>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021c2b:	89 c6                	mov    esi,eax
c0021c2d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021c30:	85 c9                	test   ecx,ecx
c0021c32:	75 39                	jne    c0021c6d <SysSpawn(regs*)+0x6f>
c0021c34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021c39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021c3c:	52                   	push   edx
c0021c3d:	50                   	push   eax
c0021c3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c41:	50                   	push   eax
c0021c42:	56                   	push   esi
c0021c43:	e8 c0 34 00 00       	call   c0025108 <Process::Process(char const*, Process*, char**)>
c0021c48:	83 c4 10             	add    esp,0x10
c0021c4b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021c52:	75 ba                	jne    c0021c0e <SysSpawn(regs*)+0x10>
c0021c54:	83 ec 0c             	sub    esp,0xc
c0021c57:	56                   	push   esi
c0021c58:	e8 eb 39 00 00       	call   c0025648 <Process::createUserThread()>
c0021c5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0021c5f:	83 c4 10             	add    esp,0x10
c0021c62:	89 c2                	mov    edx,eax
c0021c64:	83 c4 04             	add    esp,0x4
c0021c67:	c1 fa 1f             	sar    edx,0x1f
c0021c6a:	5b                   	pop    ebx
c0021c6b:	5e                   	pop    esi
c0021c6c:	c3                   	ret    
c0021c6d:	31 c0                	xor    eax,eax
c0021c6f:	eb cb                	jmp    c0021c3c <SysSpawn(regs*)+0x3e>

c0021c71 <SysGetEnv(regs*)>:
c0021c71:	57                   	push   edi
c0021c72:	56                   	push   esi
c0021c73:	53                   	push   ebx
c0021c74:	83 ec 1c             	sub    esp,0x1c
c0021c77:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021c7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021c80:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021c83:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021c86:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021c89:	51                   	push   ecx
c0021c8a:	e8 a8 e7 ff ff       	call   c0020437 <KeGetProcessTotalEnvCount(Process*)>
c0021c8f:	83 c4 10             	add    esp,0x10
c0021c92:	39 c7                	cmp    edi,eax
c0021c94:	7c 14                	jl     c0021caa <SysGetEnv(regs*)+0x39>
c0021c96:	85 f6                	test   esi,esi
c0021c98:	75 0b                	jne    c0021ca5 <SysGetEnv(regs*)+0x34>
c0021c9a:	83 c4 10             	add    esp,0x10
c0021c9d:	31 c0                	xor    eax,eax
c0021c9f:	5b                   	pop    ebx
c0021ca0:	31 d2                	xor    edx,edx
c0021ca2:	5e                   	pop    esi
c0021ca3:	5f                   	pop    edi
c0021ca4:	c3                   	ret    
c0021ca5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021ca8:	eb f0                	jmp    c0021c9a <SysGetEnv(regs*)+0x29>
c0021caa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cae:	83 ec 04             	sub    esp,0x4
c0021cb1:	57                   	push   edi
c0021cb2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021cb8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021cbb:	57                   	push   edi
c0021cbc:	50                   	push   eax
c0021cbd:	e8 95 e7 ff ff       	call   c0020457 <KeGetProcessEnvPair(Process*, int)>
c0021cc2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021cc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021cc9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021ccd:	83 c4 0c             	add    esp,0xc
c0021cd0:	85 d2                	test   edx,edx
c0021cd2:	75 23                	jne    c0021cf7 <SysGetEnv(regs*)+0x86>
c0021cd4:	83 ec 0c             	sub    esp,0xc
c0021cd7:	50                   	push   eax
c0021cd8:	e8 93 e8 fd ff       	call   c0000570 <strlen>
c0021cdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021ce0:	89 c3                	mov    ebx,eax
c0021ce2:	e8 89 e8 fd ff       	call   c0000570 <strlen>
c0021ce7:	83 c4 10             	add    esp,0x10
c0021cea:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021cee:	83 c4 10             	add    esp,0x10
c0021cf1:	31 d2                	xor    edx,edx
c0021cf3:	5b                   	pop    ebx
c0021cf4:	5e                   	pop    esi
c0021cf5:	5f                   	pop    edi
c0021cf6:	c3                   	ret    
c0021cf7:	83 ec 08             	sub    esp,0x8
c0021cfa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021cfd:	50                   	push   eax
c0021cfe:	56                   	push   esi
c0021cff:	e8 3c e9 fd ff       	call   c0000640 <strcpy>
c0021d04:	58                   	pop    eax
c0021d05:	5a                   	pop    edx
c0021d06:	68 de 31 03 c0       	push   0xc00331de
c0021d0b:	56                   	push   esi
c0021d0c:	e8 2f eb fd ff       	call   c0000840 <strcat>
c0021d11:	59                   	pop    ecx
c0021d12:	5b                   	pop    ebx
c0021d13:	57                   	push   edi
c0021d14:	56                   	push   esi
c0021d15:	e8 26 eb fd ff       	call   c0000840 <strcat>
c0021d1a:	83 c4 10             	add    esp,0x10
c0021d1d:	e9 78 ff ff ff       	jmp    c0021c9a <SysGetEnv(regs*)+0x29>

c0021d22 <SysSetFatAttrib(regs*)>:
c0021d22:	57                   	push   edi
c0021d23:	56                   	push   esi
c0021d24:	53                   	push   ebx
c0021d25:	83 ec 1c             	sub    esp,0x1c
c0021d28:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021d2c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021d2f:	68 14 01 00 00       	push   0x114
c0021d34:	e8 7e 48 ff ff       	call   c00165b7 <malloc>
c0021d39:	83 c4 0c             	add    esp,0xc
c0021d3c:	89 c3                	mov    ebx,eax
c0021d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021d43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021d46:	50                   	push   eax
c0021d47:	57                   	push   edi
c0021d48:	53                   	push   ebx
c0021d49:	e8 fe 88 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0021d4e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021d51:	83 c4 0c             	add    esp,0xc
c0021d54:	0f b6 d4             	movzx  edx,ah
c0021d57:	0f b6 c0             	movzx  eax,al
c0021d5a:	52                   	push   edx
c0021d5b:	50                   	push   eax
c0021d5c:	53                   	push   ebx
c0021d5d:	e8 70 8b ff ff       	call   c001a8d2 <File::chfatattr(unsigned char, unsigned char)>
c0021d62:	83 c4 10             	add    esp,0x10
c0021d65:	85 db                	test   ebx,ebx
c0021d67:	74 14                	je     c0021d7d <SysSetFatAttrib(regs*)+0x5b>
c0021d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021d6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021d6f:	83 ec 0c             	sub    esp,0xc
c0021d72:	53                   	push   ebx
c0021d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021d76:	83 c4 10             	add    esp,0x10
c0021d79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d7d:	85 c0                	test   eax,eax
c0021d7f:	0f 95 c0             	setne  al
c0021d82:	31 d2                	xor    edx,edx
c0021d84:	0f b6 c0             	movzx  eax,al
c0021d87:	f7 d8                	neg    eax
c0021d89:	83 d2 00             	adc    edx,0x0
c0021d8c:	83 c4 10             	add    esp,0x10
c0021d8f:	f7 da                	neg    edx
c0021d91:	5b                   	pop    ebx
c0021d92:	5e                   	pop    esi
c0021d93:	5f                   	pop    edi
c0021d94:	c3                   	ret    

c0021d95 <SysPipe(regs*)>:
c0021d95:	57                   	push   edi
c0021d96:	56                   	push   esi
c0021d97:	53                   	push   ebx
c0021d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9c:	83 ec 0c             	sub    esp,0xc
c0021d9f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021da2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021da5:	6a 20                	push   0x20
c0021da7:	e8 0b 48 ff ff       	call   c00165b7 <malloc>
c0021dac:	89 c3                	mov    ebx,eax
c0021dae:	58                   	pop    eax
c0021daf:	5a                   	pop    edx
c0021db0:	68 00 50 00 00       	push   0x5000
c0021db5:	53                   	push   ebx
c0021db6:	e8 6d 51 ff ff       	call   c0016f28 <Pipe::Pipe(int)>
c0021dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dbe:	e8 f3 5e ff ff       	call   c0017cb6 <UnixFile::getFileDescriptor()>
c0021dc3:	89 07                	mov    DWORD PTR [edi],eax
c0021dc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021dc8:	e8 e9 5e ff ff       	call   c0017cb6 <UnixFile::getFileDescriptor()>
c0021dcd:	83 c4 10             	add    esp,0x10
c0021dd0:	89 06                	mov    DWORD PTR [esi],eax
c0021dd2:	31 d2                	xor    edx,edx
c0021dd4:	5b                   	pop    ebx
c0021dd5:	31 c0                	xor    eax,eax
c0021dd7:	5e                   	pop    esi
c0021dd8:	5f                   	pop    edi
c0021dd9:	c3                   	ret    

c0021dda <SysGetUnixTime(regs*)>:
c0021dda:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0021ddf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021de5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021de9:	e9 68 93 ff ff       	jmp    c001b156 <Clock::timeInSecondsLocal()>

c0021dee <string_ends_with(char const*, char const*)>:
c0021dee:	57                   	push   edi
c0021def:	56                   	push   esi
c0021df0:	53                   	push   ebx
c0021df1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021df5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021df9:	83 ec 0c             	sub    esp,0xc
c0021dfc:	53                   	push   ebx
c0021dfd:	e8 6e e7 fd ff       	call   c0000570 <strlen>
c0021e02:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021e05:	89 c6                	mov    esi,eax
c0021e07:	e8 64 e7 fd ff       	call   c0000570 <strlen>
c0021e0c:	83 c4 10             	add    esp,0x10
c0021e0f:	39 c6                	cmp    esi,eax
c0021e11:	7d 06                	jge    c0021e19 <string_ends_with(char const*, char const*)+0x2b>
c0021e13:	5b                   	pop    ebx
c0021e14:	31 c0                	xor    eax,eax
c0021e16:	5e                   	pop    esi
c0021e17:	5f                   	pop    edi
c0021e18:	c3                   	ret    
c0021e19:	83 ec 08             	sub    esp,0x8
c0021e1c:	29 c6                	sub    esi,eax
c0021e1e:	57                   	push   edi
c0021e1f:	01 f3                	add    ebx,esi
c0021e21:	53                   	push   ebx
c0021e22:	e8 29 e9 fd ff       	call   c0000750 <strcmp>
c0021e27:	83 c4 10             	add    esp,0x10
c0021e2a:	85 c0                	test   eax,eax
c0021e2c:	5b                   	pop    ebx
c0021e2d:	0f 94 c0             	sete   al
c0021e30:	5e                   	pop    esi
c0021e31:	0f b6 c0             	movzx  eax,al
c0021e34:	5f                   	pop    edi
c0021e35:	c3                   	ret    

c0021e36 <SysOpen(regs*)>:
c0021e36:	56                   	push   esi
c0021e37:	53                   	push   ebx
c0021e38:	81 ec 04 01 00 00    	sub    esp,0x104
c0021e3e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021e45:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021e48:	85 c0                	test   eax,eax
c0021e4a:	0f 84 bc 01 00 00    	je     c002200c <SysOpen(regs*)+0x1d6>
c0021e50:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021e53:	85 c0                	test   eax,eax
c0021e55:	0f 84 b1 01 00 00    	je     c002200c <SysOpen(regs*)+0x1d6>
c0021e5b:	6a 00                	push   0x0
c0021e5d:	68 e0 31 03 c0       	push   0xc00331e0
c0021e62:	50                   	push   eax
c0021e63:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021e67:	56                   	push   esi
c0021e68:	e8 e7 84 ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021e6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e70:	e8 fb e6 fd ff       	call   c0000570 <strlen>
c0021e75:	83 c4 10             	add    esp,0x10
c0021e78:	83 e8 01             	sub    eax,0x1
c0021e7b:	74 21                	je     c0021e9e <SysOpen(regs*)+0x68>
c0021e7d:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021e81:	eb 12                	jmp    c0021e95 <SysOpen(regs*)+0x5f>
c0021e83:	83 fa 3a             	cmp    edx,0x3a
c0021e86:	74 12                	je     c0021e9a <SysOpen(regs*)+0x64>
c0021e88:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021e8c:	83 e8 01             	sub    eax,0x1
c0021e8f:	74 0d                	je     c0021e9e <SysOpen(regs*)+0x68>
c0021e91:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021e95:	83 fa 2e             	cmp    edx,0x2e
c0021e98:	75 e9                	jne    c0021e83 <SysOpen(regs*)+0x4d>
c0021e9a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021e9e:	83 ec 08             	sub    esp,0x8
c0021ea1:	68 e4 31 03 c0       	push   0xc00331e4
c0021ea6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021ea9:	50                   	push   eax
c0021eaa:	e8 3f ff ff ff       	call   c0021dee <string_ends_with(char const*, char const*)>
c0021eaf:	83 c4 10             	add    esp,0x10
c0021eb2:	85 c0                	test   eax,eax
c0021eb4:	74 1d                	je     c0021ed3 <SysOpen(regs*)+0x9d>
c0021eb6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021eb9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021ebf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ec6:	81 c4 04 01 00 00    	add    esp,0x104
c0021ecc:	31 c0                	xor    eax,eax
c0021ece:	31 d2                	xor    edx,edx
c0021ed0:	5b                   	pop    ebx
c0021ed1:	5e                   	pop    esi
c0021ed2:	c3                   	ret    
c0021ed3:	83 ec 08             	sub    esp,0x8
c0021ed6:	68 e9 31 03 c0       	push   0xc00331e9
c0021edb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021ede:	50                   	push   eax
c0021edf:	e8 0a ff ff ff       	call   c0021dee <string_ends_with(char const*, char const*)>
c0021ee4:	83 c4 10             	add    esp,0x10
c0021ee7:	85 c0                	test   eax,eax
c0021ee9:	75 cb                	jne    c0021eb6 <SysOpen(regs*)+0x80>
c0021eeb:	83 ec 08             	sub    esp,0x8
c0021eee:	68 e5 31 03 c0       	push   0xc00331e5
c0021ef3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021ef6:	50                   	push   eax
c0021ef7:	e8 54 e8 fd ff       	call   c0000750 <strcmp>
c0021efc:	83 c4 10             	add    esp,0x10
c0021eff:	85 c0                	test   eax,eax
c0021f01:	74 b3                	je     c0021eb6 <SysOpen(regs*)+0x80>
c0021f03:	83 ec 08             	sub    esp,0x8
c0021f06:	68 e4 31 03 c0       	push   0xc00331e4
c0021f0b:	56                   	push   esi
c0021f0c:	e8 dd fe ff ff       	call   c0021dee <string_ends_with(char const*, char const*)>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	85 c0                	test   eax,eax
c0021f16:	75 9e                	jne    c0021eb6 <SysOpen(regs*)+0x80>
c0021f18:	83 ec 08             	sub    esp,0x8
c0021f1b:	68 ee 31 03 c0       	push   0xc00331ee
c0021f20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021f23:	50                   	push   eax
c0021f24:	e8 c5 fe ff ff       	call   c0021dee <string_ends_with(char const*, char const*)>
c0021f29:	83 c4 10             	add    esp,0x10
c0021f2c:	85 c0                	test   eax,eax
c0021f2e:	0f 85 eb 00 00 00    	jne    c002201f <SysOpen(regs*)+0x1e9>
c0021f34:	83 ec 08             	sub    esp,0x8
c0021f37:	68 f3 31 03 c0       	push   0xc00331f3
c0021f3c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021f3f:	50                   	push   eax
c0021f40:	e8 a9 fe ff ff       	call   c0021dee <string_ends_with(char const*, char const*)>
c0021f45:	83 c4 10             	add    esp,0x10
c0021f48:	85 c0                	test   eax,eax
c0021f4a:	0f 85 cf 00 00 00    	jne    c002201f <SysOpen(regs*)+0x1e9>
c0021f50:	83 ec 08             	sub    esp,0x8
c0021f53:	68 ef 31 03 c0       	push   0xc00331ef
c0021f58:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021f5b:	51                   	push   ecx
c0021f5c:	e8 ef e7 fd ff       	call   c0000750 <strcmp>
c0021f61:	83 c4 10             	add    esp,0x10
c0021f64:	85 c0                	test   eax,eax
c0021f66:	0f 84 b3 00 00 00    	je     c002201f <SysOpen(regs*)+0x1e9>
c0021f6c:	83 ec 08             	sub    esp,0x8
c0021f6f:	68 ee 31 03 c0       	push   0xc00331ee
c0021f74:	56                   	push   esi
c0021f75:	e8 74 fe ff ff       	call   c0021dee <string_ends_with(char const*, char const*)>
c0021f7a:	83 c4 10             	add    esp,0x10
c0021f7d:	85 c0                	test   eax,eax
c0021f7f:	0f 85 9a 00 00 00    	jne    c002201f <SysOpen(regs*)+0x1e9>
c0021f85:	83 ec 0c             	sub    esp,0xc
c0021f88:	68 14 01 00 00       	push   0x114
c0021f8d:	e8 25 46 ff ff       	call   c00165b7 <malloc>
c0021f92:	83 c4 0c             	add    esp,0xc
c0021f95:	89 c6                	mov    esi,eax
c0021f97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021f9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021f9f:	50                   	push   eax
c0021fa0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021fa3:	52                   	push   edx
c0021fa4:	56                   	push   esi
c0021fa5:	e8 a2 86 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0021faa:	83 c4 10             	add    esp,0x10
c0021fad:	85 f6                	test   esi,esi
c0021faf:	74 5b                	je     c002200c <SysOpen(regs*)+0x1d6>
c0021fb1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021fb4:	0f b6 c2             	movzx  eax,dl
c0021fb7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021fba:	89 d0                	mov    eax,edx
c0021fbc:	83 e0 01             	and    eax,0x1
c0021fbf:	f6 c2 02             	test   dl,0x2
c0021fc2:	74 03                	je     c0021fc7 <SysOpen(regs*)+0x191>
c0021fc4:	83 c8 02             	or     eax,0x2
c0021fc7:	f6 c2 04             	test   dl,0x4
c0021fca:	74 03                	je     c0021fcf <SysOpen(regs*)+0x199>
c0021fcc:	83 c8 04             	or     eax,0x4
c0021fcf:	f6 c2 08             	test   dl,0x8
c0021fd2:	74 03                	je     c0021fd7 <SysOpen(regs*)+0x1a1>
c0021fd4:	83 c8 0a             	or     eax,0xa
c0021fd7:	80 e2 10             	and    dl,0x10
c0021fda:	74 03                	je     c0021fdf <SysOpen(regs*)+0x1a9>
c0021fdc:	83 c8 12             	or     eax,0x12
c0021fdf:	83 ec 08             	sub    esp,0x8
c0021fe2:	50                   	push   eax
c0021fe3:	56                   	push   esi
c0021fe4:	e8 81 86 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0021fe9:	83 c4 10             	add    esp,0x10
c0021fec:	85 c0                	test   eax,eax
c0021fee:	75 1c                	jne    c002200c <SysOpen(regs*)+0x1d6>
c0021ff0:	83 ec 0c             	sub    esp,0xc
c0021ff3:	56                   	push   esi
c0021ff4:	e8 bd 5c ff ff       	call   c0017cb6 <UnixFile::getFileDescriptor()>
c0021ff9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021ffc:	83 c4 10             	add    esp,0x10
c0021fff:	89 02                	mov    DWORD PTR [edx],eax
c0022001:	c1 f8 1f             	sar    eax,0x1f
c0022004:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0022007:	e9 ba fe ff ff       	jmp    c0021ec6 <SysOpen(regs*)+0x90>
c002200c:	81 c4 04 01 00 00    	add    esp,0x104
c0022012:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022017:	ba ff ff ff ff       	mov    edx,0xffffffff
c002201c:	5b                   	pop    ebx
c002201d:	5e                   	pop    esi
c002201e:	c3                   	ret    
c002201f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0022022:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0022028:	e9 92 fe ff ff       	jmp    c0021ebf <SysOpen(regs*)+0x89>

c002202d <KeSystemCall(regs*, void*)>:
c002202d:	53                   	push   ebx
c002202e:	83 ec 08             	sub    esp,0x8
c0022031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022035:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0022038:	83 f8 3e             	cmp    eax,0x3e
c002203b:	77 16                	ja     c0022053 <KeSystemCall(regs*, void*)+0x26>
c002203d:	8b 14 85 c0 4a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcb540]
c0022044:	85 d2                	test   edx,edx
c0022046:	74 0b                	je     c0022053 <KeSystemCall(regs*, void*)+0x26>
c0022048:	83 ec 0c             	sub    esp,0xc
c002204b:	53                   	push   ebx
c002204c:	ff d2                	call   edx
c002204e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0022051:	eb 0d                	jmp    c0022060 <KeSystemCall(regs*, void*)+0x33>
c0022053:	52                   	push   edx
c0022054:	52                   	push   edx
c0022055:	50                   	push   eax
c0022056:	68 f8 31 03 c0       	push   0xc00331f8
c002205b:	e8 e5 73 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0022060:	83 c4 10             	add    esp,0x10
c0022063:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0022068:	31 d2                	xor    edx,edx
c002206a:	83 c4 08             	add    esp,0x8
c002206d:	5b                   	pop    ebx
c002206e:	c3                   	ret    
c002206f:	90                   	nop

c0022070 <KeSwitchEndian16(unsigned short)>:
c0022070:	83 ec 04             	sub    esp,0x4
c0022073:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022077:	66 89 04 24          	mov    WORD PTR [esp],ax
c002207b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c002207f:	c1 f8 08             	sar    eax,0x8
c0022082:	89 c2                	mov    edx,eax
c0022084:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0022088:	c1 e0 08             	shl    eax,0x8
c002208b:	09 d0                	or     eax,edx
c002208d:	83 c4 04             	add    esp,0x4
c0022090:	c3                   	ret    
c0022091:	8d 76 00             	lea    esi,[esi+0x0]

c0022094 <KeSwitchEndian32(unsigned int)>:
c0022094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022098:	c1 e8 18             	shr    eax,0x18
c002209b:	89 c2                	mov    edx,eax
c002209d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a1:	c1 e0 08             	shl    eax,0x8
c00220a4:	25 00 00 ff 00       	and    eax,0xff0000
c00220a9:	09 c2                	or     edx,eax
c00220ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220af:	c1 e8 08             	shr    eax,0x8
c00220b2:	25 00 ff 00 00       	and    eax,0xff00
c00220b7:	09 c2                	or     edx,eax
c00220b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220bd:	c1 e0 18             	shl    eax,0x18
c00220c0:	09 d0                	or     eax,edx
c00220c2:	c3                   	ret    
c00220c3:	90                   	nop

c00220c4 <EthernetCRC32(unsigned char*, int)>:
c00220c4:	83 ec 10             	sub    esp,0x10
c00220c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00220cc:	75 0a                	jne    c00220d8 <EthernetCRC32(unsigned char*, int)+0x14>
c00220ce:	b8 00 00 00 00       	mov    eax,0x0
c00220d3:	e9 8c 00 00 00       	jmp    c0022164 <EthernetCRC32(unsigned char*, int)+0xa0>
c00220d8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00220dd:	7f 09                	jg     c00220e8 <EthernetCRC32(unsigned char*, int)+0x24>
c00220df:	b8 00 00 00 00       	mov    eax,0x0
c00220e4:	eb 7e                	jmp    c0022164 <EthernetCRC32(unsigned char*, int)+0xa0>
c00220e6:	66 90                	xchg   ax,ax
c00220e8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00220f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00220f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220fc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0022100:	7d 5a                	jge    c002215c <EthernetCRC32(unsigned char*, int)+0x98>
c0022102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002210a:	01 d0                	add    eax,edx
c002210c:	8a 00                	mov    al,BYTE PTR [eax]
c002210e:	0f b6 c0             	movzx  eax,al
c0022111:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0022115:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002211d:	8d 76 00             	lea    esi,[esi+0x0]
c0022120:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0022125:	7f 2d                	jg     c0022154 <EthernetCRC32(unsigned char*, int)+0x90>
c0022127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002212b:	83 e0 01             	and    eax,0x1
c002212e:	74 10                	je     c0022140 <EthernetCRC32(unsigned char*, int)+0x7c>
c0022130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022134:	d1 e8                	shr    eax,1
c0022136:	35 20 83 b8 ed       	xor    eax,0xedb88320
c002213b:	eb 0b                	jmp    c0022148 <EthernetCRC32(unsigned char*, int)+0x84>
c002213d:	8d 76 00             	lea    esi,[esi+0x0]
c0022140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022144:	d1 e8                	shr    eax,1
c0022146:	66 90                	xchg   ax,ax
c0022148:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002214c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0022151:	eb cd                	jmp    c0022120 <EthernetCRC32(unsigned char*, int)+0x5c>
c0022153:	90                   	nop
c0022154:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0022159:	eb 9d                	jmp    c00220f8 <EthernetCRC32(unsigned char*, int)+0x34>
c002215b:	90                   	nop
c002215c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022160:	f7 d0                	not    eax
c0022162:	66 90                	xchg   ax,ax
c0022164:	83 c4 10             	add    esp,0x10
c0022167:	c3                   	ret    

c0022168 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0022168:	83 ec 2c             	sub    esp,0x2c
c002216b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002216f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0022174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022178:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002217c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022180:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0022183:	0f b7 c0             	movzx  eax,ax
c0022186:	3d 06 08 00 00       	cmp    eax,0x806
c002218b:	75 13                	jne    c00221a0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c002218d:	83 ec 0c             	sub    esp,0xc
c0022190:	68 0c 32 03 c0       	push   0xc003320c
c0022195:	e8 ab 72 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002219a:	83 c4 10             	add    esp,0x10
c002219d:	eb 25                	jmp    c00221c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c002219f:	90                   	nop
c00221a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00221a7:	0f b7 c0             	movzx  eax,ax
c00221aa:	3d 00 08 00 00       	cmp    eax,0x800
c00221af:	75 13                	jne    c00221c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00221b1:	83 ec 0c             	sub    esp,0xc
c00221b4:	68 22 32 03 c0       	push   0xc0033222
c00221b9:	e8 87 72 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00221be:	83 c4 10             	add    esp,0x10
c00221c1:	8d 76 00             	lea    esi,[esi+0x0]
c00221c4:	90                   	nop
c00221c5:	83 c4 2c             	add    esp,0x2c
c00221c8:	c3                   	ret    
c00221c9:	66 90                	xchg   ax,ax
c00221cb:	90                   	nop

c00221cc <KeNetCreateSemaphore>:
c00221cc:	53                   	push   ebx
c00221cd:	83 ec 18             	sub    esp,0x18
c00221d0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00221d8:	83 ec 0c             	sub    esp,0xc
c00221db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221df:	e8 d3 43 ff ff       	call   c00165b7 <malloc>
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	89 c3                	mov    ebx,eax
c00221e9:	83 ec 08             	sub    esp,0x8
c00221ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00221f0:	53                   	push   ebx
c00221f1:	e8 32 e9 ff ff       	call   c0020b28 <Semaphore::Semaphore(int)>
c00221f6:	83 c4 10             	add    esp,0x10
c00221f9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00221fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022205:	89 10                	mov    DWORD PTR [eax],edx
c0022207:	90                   	nop
c0022208:	83 c4 18             	add    esp,0x18
c002220b:	5b                   	pop    ebx
c002220c:	c3                   	ret    
c002220d:	8d 76 00             	lea    esi,[esi+0x0]

c0022210 <KeNetFreeSemaphore>:
c0022210:	83 ec 0c             	sub    esp,0xc
c0022213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022217:	8b 00                	mov    eax,DWORD PTR [eax]
c0022219:	83 ec 08             	sub    esp,0x8
c002221c:	6a 10                	push   0x10
c002221e:	50                   	push   eax
c002221f:	e8 f4 70 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c0022224:	83 c4 10             	add    esp,0x10
c0022227:	90                   	nop
c0022228:	83 c4 0c             	add    esp,0xc
c002222b:	c3                   	ret    

c002222c <KeNetSignalSemaphore>:
c002222c:	83 ec 0c             	sub    esp,0xc
c002222f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022233:	8b 00                	mov    eax,DWORD PTR [eax]
c0022235:	83 ec 0c             	sub    esp,0xc
c0022238:	50                   	push   eax
c0022239:	e8 4a ec ff ff       	call   c0020e88 <Semaphore::release()>
c002223e:	83 c4 10             	add    esp,0x10
c0022241:	90                   	nop
c0022242:	83 c4 0c             	add    esp,0xc
c0022245:	c3                   	ret    
c0022246:	66 90                	xchg   ax,ax

c0022248 <KeNetWaitSemaphore>:
c0022248:	83 ec 0c             	sub    esp,0xc
c002224b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022251:	83 ec 08             	sub    esp,0x8
c0022254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022258:	50                   	push   eax
c0022259:	e8 66 ea ff ff       	call   c0020cc4 <Semaphore::acquire(int)>
c002225e:	83 c4 10             	add    esp,0x10
c0022261:	83 c4 0c             	add    esp,0xc
c0022264:	c3                   	ret    
c0022265:	8d 76 00             	lea    esi,[esi+0x0]

c0022268 <KeNetCreateThread>:
c0022268:	83 ec 0c             	sub    esp,0xc
c002226b:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0022270:	68 80 00 00 00       	push   0x80
c0022275:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022279:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002227d:	50                   	push   eax
c002227e:	e8 b9 32 00 00       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c0022283:	83 c4 10             	add    esp,0x10
c0022286:	90                   	nop
c0022287:	83 c4 0c             	add    esp,0xc
c002228a:	c3                   	ret    
c002228b:	90                   	nop

c002228c <KeCPanic>:
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	83 ec 0c             	sub    esp,0xc
c0022292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022296:	e8 e3 e4 ff ff       	call   c002077e <KePanic(char const*)>
c002229b:	83 c4 10             	add    esp,0x10
c002229e:	90                   	nop
c002229f:	83 c4 0c             	add    esp,0xc
c00222a2:	c3                   	ret    
c00222a3:	90                   	nop

c00222a4 <KeCPuts>:
c00222a4:	83 ec 0c             	sub    esp,0xc
c00222a7:	83 ec 08             	sub    esp,0x8
c00222aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222ae:	68 f2 38 03 c0       	push   0xc00338f2
c00222b3:	e8 8d 71 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00222b8:	83 c4 10             	add    esp,0x10
c00222bb:	90                   	nop
c00222bc:	83 c4 0c             	add    esp,0xc
c00222bf:	c3                   	ret    

c00222c0 <CmOpen(char const*)>:
c00222c0:	57                   	push   edi
c00222c1:	56                   	push   esi
c00222c2:	53                   	push   ebx
c00222c3:	83 ec 1c             	sub    esp,0x1c
c00222c6:	6a 30                	push   0x30
c00222c8:	e8 ea 42 ff ff       	call   c00165b7 <malloc>
c00222cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00222d4:	89 c3                	mov    ebx,eax
c00222d6:	e8 dc 42 ff ff       	call   c00165b7 <malloc>
c00222db:	83 c4 0c             	add    esp,0xc
c00222de:	89 c6                	mov    esi,eax
c00222e0:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00222e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00222ea:	50                   	push   eax
c00222eb:	e8 5c 83 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c00222f0:	83 c4 0c             	add    esp,0xc
c00222f3:	89 33                	mov    DWORD PTR [ebx],esi
c00222f5:	8d 44 24 07          	lea    eax,[esp+0x7]
c00222f9:	50                   	push   eax
c00222fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00222fe:	50                   	push   eax
c00222ff:	56                   	push   esi
c0022300:	e8 67 86 ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c0022305:	5a                   	pop    edx
c0022306:	59                   	pop    ecx
c0022307:	6a 01                	push   0x1
c0022309:	ff 33                	push   DWORD PTR [ebx]
c002230b:	e8 5a 83 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0022310:	5e                   	pop    esi
c0022311:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022315:	e8 9d 42 ff ff       	call   c00165b7 <malloc>
c002231a:	5a                   	pop    edx
c002231b:	89 c7                	mov    edi,eax
c002231d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022321:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022323:	8b 10                	mov    edx,DWORD PTR [eax]
c0022325:	56                   	push   esi
c0022326:	57                   	push   edi
c0022327:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002232b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002232f:	50                   	push   eax
c0022330:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022333:	83 c4 14             	add    esp,0x14
c0022336:	ff 33                	push   DWORD PTR [ebx]
c0022338:	e8 8b 83 ff ff       	call   c001a6c8 <File::close()>
c002233d:	59                   	pop    ecx
c002233e:	58                   	pop    eax
c002233f:	6a 13                	push   0x13
c0022341:	ff 33                	push   DWORD PTR [ebx]
c0022343:	e8 22 83 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0022348:	8b 03                	mov    eax,DWORD PTR [ebx]
c002234a:	8b 10                	mov    edx,DWORD PTR [eax]
c002234c:	89 34 24             	mov    DWORD PTR [esp],esi
c002234f:	57                   	push   edi
c0022350:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022358:	50                   	push   eax
c0022359:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002235c:	83 c4 14             	add    esp,0x14
c002235f:	57                   	push   edi
c0022360:	e8 62 42 ff ff       	call   c00165c7 <free>
c0022365:	83 c4 10             	add    esp,0x10
c0022368:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c002236b:	75 10                	jne    c002237d <CmOpen(char const*)+0xbd>
c002236d:	83 ec 0c             	sub    esp,0xc
c0022370:	68 37 32 03 c0       	push   0xc0033237
c0022375:	e8 04 e4 ff ff       	call   c002077e <KePanic(char const*)>
c002237a:	83 c4 10             	add    esp,0x10
c002237d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0022380:	50                   	push   eax
c0022381:	6a 00                	push   0x0
c0022383:	6a 00                	push   0x0
c0022385:	ff 33                	push   DWORD PTR [ebx]
c0022387:	e8 9c 83 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c002238c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002238e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022390:	89 34 24             	mov    DWORD PTR [esp],esi
c0022393:	57                   	push   edi
c0022394:	6a 00                	push   0x0
c0022396:	6a 2b                	push   0x2b
c0022398:	50                   	push   eax
c0022399:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002239c:	83 c4 1c             	add    esp,0x1c
c002239f:	6a 00                	push   0x0
c00223a1:	6a 00                	push   0x0
c00223a3:	ff 33                	push   DWORD PTR [ebx]
c00223a5:	e8 7e 83 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00223aa:	83 c4 0c             	add    esp,0xc
c00223ad:	6a 08                	push   0x8
c00223af:	68 48 32 03 c0       	push   0xc0033248
c00223b4:	57                   	push   edi
c00223b5:	e8 c6 df fd ff       	call   c0000380 <memcmp>
c00223ba:	83 c4 10             	add    esp,0x10
c00223bd:	85 c0                	test   eax,eax
c00223bf:	74 10                	je     c00223d1 <CmOpen(char const*)+0x111>
c00223c1:	83 ec 0c             	sub    esp,0xc
c00223c4:	68 51 32 03 c0       	push   0xc0033251
c00223c9:	e8 b0 e3 ff ff       	call   c002077e <KePanic(char const*)>
c00223ce:	83 c4 10             	add    esp,0x10
c00223d1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00223d5:	89 d8                	mov    eax,ebx
c00223d7:	83 c4 10             	add    esp,0x10
c00223da:	5b                   	pop    ebx
c00223db:	5e                   	pop    esi
c00223dc:	5f                   	pop    edi
c00223dd:	c3                   	ret    

c00223de <CmClose(Reghive_Tag*)>:
c00223de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00223e6:	74 0b                	je     c00223f3 <CmClose(Reghive_Tag*)+0x15>
c00223e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00223ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00223ee:	e9 d5 82 ff ff       	jmp    c001a6c8 <File::close()>
c00223f3:	c3                   	ret    

c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00223f4:	53                   	push   ebx
c00223f5:	83 ec 18             	sub    esp,0x18
c00223f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00223fc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022400:	74 29                	je     c002242b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022402:	50                   	push   eax
c0022403:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022408:	99                   	cdq    
c0022409:	52                   	push   edx
c002240a:	50                   	push   eax
c002240b:	ff 33                	push   DWORD PTR [ebx]
c002240d:	e8 16 83 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0022412:	5a                   	pop    edx
c0022413:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022415:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022419:	8b 10                	mov    edx,DWORD PTR [eax]
c002241b:	51                   	push   ecx
c002241c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022420:	6a 00                	push   0x0
c0022422:	6a 2b                	push   0x2b
c0022424:	50                   	push   eax
c0022425:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022428:	83 c4 20             	add    esp,0x20
c002242b:	83 c4 18             	add    esp,0x18
c002242e:	5b                   	pop    ebx
c002242f:	c3                   	ret    

c0022430 <CmGetString(Reghive_Tag*, int, char*)>:
c0022430:	55                   	push   ebp
c0022431:	57                   	push   edi
c0022432:	56                   	push   esi
c0022433:	53                   	push   ebx
c0022434:	31 db                	xor    ebx,ebx
c0022436:	83 ec 70             	sub    esp,0x70
c0022439:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0022440:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0022444:	50                   	push   eax
c0022445:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002244c:	55                   	push   ebp
c002244d:	e8 a2 ff ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022452:	83 c4 10             	add    esp,0x10
c0022455:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c002245a:	c1 e0 08             	shl    eax,0x8
c002245d:	89 c2                	mov    edx,eax
c002245f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0022464:	09 d0                	or     eax,edx
c0022466:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c002246b:	c1 e0 08             	shl    eax,0x8
c002246e:	09 d0                	or     eax,edx
c0022470:	74 25                	je     c0022497 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0022472:	6b fb 0d             	imul   edi,ebx,0xd
c0022475:	52                   	push   edx
c0022476:	8d 54 24 39          	lea    edx,[esp+0x39]
c002247a:	52                   	push   edx
c002247b:	50                   	push   eax
c002247c:	55                   	push   ebp
c002247d:	e8 72 ff ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022482:	8d 74 24 49          	lea    esi,[esp+0x49]
c0022486:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c002248d:	b9 27 00 00 00       	mov    ecx,0x27
c0022492:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022494:	83 c4 10             	add    esp,0x10
c0022497:	83 c3 03             	add    ebx,0x3
c002249a:	83 fb 15             	cmp    ebx,0x15
c002249d:	75 b6                	jne    c0022455 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c002249f:	83 c4 6c             	add    esp,0x6c
c00224a2:	5b                   	pop    ebx
c00224a3:	5e                   	pop    esi
c00224a4:	5f                   	pop    edi
c00224a5:	5d                   	pop    ebp
c00224a6:	c3                   	ret    

c00224a7 <CmEnterDirectory(Reghive_Tag*, int)>:
c00224a7:	83 ec 40             	sub    esp,0x40
c00224aa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00224ae:	50                   	push   eax
c00224af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224b7:	e8 38 ff ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224bc:	83 c4 10             	add    esp,0x10
c00224bf:	83 c8 ff             	or     eax,0xffffffff
c00224c2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00224c7:	75 19                	jne    c00224e2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00224c9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00224ce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00224d3:	c1 e0 08             	shl    eax,0x8
c00224d6:	09 c2                	or     edx,eax
c00224d8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00224dd:	c1 e0 10             	shl    eax,0x10
c00224e0:	09 d0                	or     eax,edx
c00224e2:	83 c4 3c             	add    esp,0x3c
c00224e5:	c3                   	ret    

c00224e6 <CmGetNext(Reghive_Tag*, int)>:
c00224e6:	83 ec 40             	sub    esp,0x40
c00224e9:	8d 44 24 09          	lea    eax,[esp+0x9]
c00224ed:	50                   	push   eax
c00224ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224f6:	e8 f9 fe ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224fb:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0022500:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022505:	c1 e0 08             	shl    eax,0x8
c0022508:	09 c2                	or     edx,eax
c002250a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002250f:	83 c4 4c             	add    esp,0x4c
c0022512:	c1 e0 10             	shl    eax,0x10
c0022515:	09 d0                	or     eax,edx
c0022517:	c3                   	ret    

c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022518:	53                   	push   ebx
c0022519:	83 ec 18             	sub    esp,0x18
c002251c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022520:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022524:	74 29                	je     c002254f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022526:	50                   	push   eax
c0022527:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c002252c:	99                   	cdq    
c002252d:	52                   	push   edx
c002252e:	50                   	push   eax
c002252f:	ff 33                	push   DWORD PTR [ebx]
c0022531:	e8 f2 81 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0022536:	5a                   	pop    edx
c0022537:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022539:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002253d:	8b 10                	mov    edx,DWORD PTR [eax]
c002253f:	51                   	push   ecx
c0022540:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022544:	6a 00                	push   0x0
c0022546:	6a 2b                	push   0x2b
c0022548:	50                   	push   eax
c0022549:	ff 52 10             	call   DWORD PTR [edx+0x10]
c002254c:	83 c4 20             	add    esp,0x20
c002254f:	83 c4 18             	add    esp,0x18
c0022552:	5b                   	pop    ebx
c0022553:	c3                   	ret    

c0022554 <CmFreeExtent(Reghive_Tag*, int)>:
c0022554:	53                   	push   ebx
c0022555:	83 ec 3c             	sub    esp,0x3c
c0022558:	6a 2b                	push   0x2b
c002255a:	6a 00                	push   0x0
c002255c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022560:	53                   	push   ebx
c0022561:	e8 8a df fd ff       	call   c00004f0 <memset>
c0022566:	83 c4 0c             	add    esp,0xc
c0022569:	53                   	push   ebx
c002256a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002256e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022572:	e8 a1 ff ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022577:	83 c4 48             	add    esp,0x48
c002257a:	5b                   	pop    ebx
c002257b:	c3                   	ret    

c002257c <CmUpdateHeader(Reghive_Tag*)>:
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022583:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022587:	74 10                	je     c0022599 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022589:	52                   	push   edx
c002258a:	8d 50 05             	lea    edx,[eax+0x5]
c002258d:	52                   	push   edx
c002258e:	6a 00                	push   0x0
c0022590:	50                   	push   eax
c0022591:	e8 82 ff ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022596:	83 c4 10             	add    esp,0x10
c0022599:	83 c4 0c             	add    esp,0xc
c002259c:	c3                   	ret    

c002259d <CmExpand(Reghive_Tag*, int)>:
c002259d:	57                   	push   edi
c002259e:	56                   	push   esi
c002259f:	83 ce ff             	or     esi,0xffffffff
c00225a2:	53                   	push   ebx
c00225a3:	83 ec 30             	sub    esp,0x30
c00225a6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00225aa:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00225ae:	74 5f                	je     c002260f <CmExpand(Reghive_Tag*, int)+0x72>
c00225b0:	31 d2                	xor    edx,edx
c00225b2:	31 f6                	xor    esi,esi
c00225b4:	50                   	push   eax
c00225b5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00225b9:	52                   	push   edx
c00225ba:	50                   	push   eax
c00225bb:	ff 33                	push   DWORD PTR [ebx]
c00225bd:	e8 66 81 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00225c2:	83 c4 0c             	add    esp,0xc
c00225c5:	6a 2b                	push   0x2b
c00225c7:	6a 00                	push   0x0
c00225c9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00225cd:	57                   	push   edi
c00225ce:	e8 1d df fd ff       	call   c00004f0 <memset>
c00225d3:	83 c4 10             	add    esp,0x10
c00225d6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00225da:	7d 1b                	jge    c00225f7 <CmExpand(Reghive_Tag*, int)+0x5a>
c00225dc:	83 ec 0c             	sub    esp,0xc
c00225df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00225e1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00225e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00225e7:	46                   	inc    esi
c00225e8:	51                   	push   ecx
c00225e9:	57                   	push   edi
c00225ea:	6a 00                	push   0x0
c00225ec:	6a 2b                	push   0x2b
c00225ee:	50                   	push   eax
c00225ef:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00225f2:	83 c4 20             	add    esp,0x20
c00225f5:	eb df                	jmp    c00225d6 <CmExpand(Reghive_Tag*, int)+0x39>
c00225f7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00225fb:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00225fe:	83 ec 0c             	sub    esp,0xc
c0022601:	01 f2                	add    edx,esi
c0022603:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0022606:	53                   	push   ebx
c0022607:	e8 70 ff ff ff       	call   c002257c <CmUpdateHeader(Reghive_Tag*)>
c002260c:	83 c4 10             	add    esp,0x10
c002260f:	83 c4 30             	add    esp,0x30
c0022612:	89 f0                	mov    eax,esi
c0022614:	5b                   	pop    ebx
c0022615:	5e                   	pop    esi
c0022616:	5f                   	pop    edi
c0022617:	c3                   	ret    

c0022618 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022618:	55                   	push   ebp
c0022619:	57                   	push   edi
c002261a:	56                   	push   esi
c002261b:	53                   	push   ebx
c002261c:	83 cb ff             	or     ebx,0xffffffff
c002261f:	83 ec 1c             	sub    esp,0x1c
c0022622:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022626:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c002262a:	74 68                	je     c0022694 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002262c:	be 2b 00 00 00       	mov    esi,0x2b
c0022631:	51                   	push   ecx
c0022632:	31 ff                	xor    edi,edi
c0022634:	6a 00                	push   0x0
c0022636:	31 db                	xor    ebx,ebx
c0022638:	6a 00                	push   0x0
c002263a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002263d:	e8 e6 80 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0022642:	83 c4 10             	add    esp,0x10
c0022645:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022648:	76 3b                	jbe    c0022685 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c002264a:	83 ec 0c             	sub    esp,0xc
c002264d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022650:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022654:	8b 10                	mov    edx,DWORD PTR [eax]
c0022656:	51                   	push   ecx
c0022657:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c002265b:	51                   	push   ecx
c002265c:	6a 00                	push   0x0
c002265e:	6a 01                	push   0x1
c0022660:	50                   	push   eax
c0022661:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022664:	83 c4 20             	add    esp,0x20
c0022667:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002266c:	74 26                	je     c0022694 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002266e:	43                   	inc    ebx
c002266f:	52                   	push   edx
c0022670:	57                   	push   edi
c0022671:	56                   	push   esi
c0022672:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022675:	e8 ae 80 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c002267a:	83 c6 2b             	add    esi,0x2b
c002267d:	83 d7 00             	adc    edi,0x0
c0022680:	83 c4 10             	add    esp,0x10
c0022683:	eb c0                	jmp    c0022645 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022685:	50                   	push   eax
c0022686:	50                   	push   eax
c0022687:	6a 40                	push   0x40
c0022689:	55                   	push   ebp
c002268a:	e8 0e ff ff ff       	call   c002259d <CmExpand(Reghive_Tag*, int)>
c002268f:	83 c4 10             	add    esp,0x10
c0022692:	89 c3                	mov    ebx,eax
c0022694:	83 c4 1c             	add    esp,0x1c
c0022697:	89 d8                	mov    eax,ebx
c0022699:	5b                   	pop    ebx
c002269a:	5e                   	pop    esi
c002269b:	5f                   	pop    edi
c002269c:	5d                   	pop    ebp
c002269d:	c3                   	ret    

c002269e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c002269e:	55                   	push   ebp
c002269f:	57                   	push   edi
c00226a0:	56                   	push   esi
c00226a1:	53                   	push   ebx
c00226a2:	81 ec 88 00 00 00    	sub    esp,0x88
c00226a8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00226af:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00226b6:	e8 5d ff ff ff       	call   c0022618 <CmFindUnusedExtent(Reghive_Tag*)>
c00226bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00226bf:	83 c4 0c             	add    esp,0xc
c00226c2:	6a 2b                	push   0x2b
c00226c4:	6a 00                	push   0x0
c00226c6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00226ca:	55                   	push   ebp
c00226cb:	e8 20 de fd ff       	call   c00004f0 <memset>
c00226d0:	83 c4 10             	add    esp,0x10
c00226d3:	85 db                	test   ebx,ebx
c00226d5:	74 12                	je     c00226e9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00226d7:	51                   	push   ecx
c00226d8:	55                   	push   ebp
c00226d9:	53                   	push   ebx
c00226da:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00226e1:	e8 0e fd ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226e6:	83 c4 10             	add    esp,0x10
c00226e9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00226ed:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00226f4:	b9 2b 00 00 00       	mov    ecx,0x2b
c00226f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00226fb:	85 db                	test   ebx,ebx
c00226fd:	74 49                	je     c0022748 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00226ff:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0022704:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0022709:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002270d:	c1 e0 08             	shl    eax,0x8
c0022710:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0022716:	09 c8                	or     eax,ecx
c0022718:	74 11                	je     c002272b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c002271a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c002271e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0022722:	c1 e8 10             	shr    eax,0x10
c0022725:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022729:	eb 0f                	jmp    c002273a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c002272b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022730:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022735:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002273a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c002273e:	c1 ea 08             	shr    edx,0x8
c0022741:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022746:	eb 0f                	jmp    c0022757 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022748:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c002274d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022752:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022757:	52                   	push   edx
c0022758:	8d 44 24 49          	lea    eax,[esp+0x49]
c002275c:	50                   	push   eax
c002275d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022761:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022768:	e8 ab fd ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002276d:	83 c4 10             	add    esp,0x10
c0022770:	85 db                	test   ebx,ebx
c0022772:	74 12                	je     c0022786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022774:	50                   	push   eax
c0022775:	55                   	push   ebp
c0022776:	53                   	push   ebx
c0022777:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002277e:	e8 95 fd ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022783:	83 c4 10             	add    esp,0x10
c0022786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002278a:	83 c4 7c             	add    esp,0x7c
c002278d:	5b                   	pop    ebx
c002278e:	5e                   	pop    esi
c002278f:	5f                   	pop    edi
c0022790:	5d                   	pop    ebp
c0022791:	c3                   	ret    

c0022792 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022792:	55                   	push   ebp
c0022793:	57                   	push   edi
c0022794:	56                   	push   esi
c0022795:	53                   	push   ebx
c0022796:	bb 27 00 00 00       	mov    ebx,0x27
c002279b:	81 ec 88 00 00 00    	sub    esp,0x88
c00227a1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00227a8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00227af:	e8 bc dd fd ff       	call   c0000570 <strlen>
c00227b4:	8d 48 26             	lea    ecx,[eax+0x26]
c00227b7:	89 c8                	mov    eax,ecx
c00227b9:	99                   	cdq    
c00227ba:	f7 fb                	idiv   ebx
c00227bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00227c0:	83 c4 10             	add    esp,0x10
c00227c3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00227c9:	7e 10                	jle    c00227db <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00227cb:	83 ec 0c             	sub    esp,0xc
c00227ce:	68 62 32 03 c0       	push   0xc0033262
c00227d3:	e8 a6 df ff ff       	call   c002077e <KePanic(char const*)>
c00227d8:	83 c4 10             	add    esp,0x10
c00227db:	31 ff                	xor    edi,edi
c00227dd:	50                   	push   eax
c00227de:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00227e2:	53                   	push   ebx
c00227e3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00227ea:	56                   	push   esi
c00227eb:	e8 04 fc ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227f0:	83 c4 10             	add    esp,0x10
c00227f3:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00227f7:	89 d0                	mov    eax,edx
c00227f9:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00227fd:	c1 e0 08             	shl    eax,0x8
c0022800:	09 c2                	or     edx,eax
c0022802:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0022806:	c1 e2 08             	shl    edx,0x8
c0022809:	09 c2                	or     edx,eax
c002280b:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002280f:	7e 76                	jle    c0022887 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0022811:	85 d2                	test   edx,edx
c0022813:	75 25                	jne    c002283a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022815:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c002281a:	8d 44 24 45          	lea    eax,[esp+0x45]
c002281e:	50                   	push   eax
c002281f:	6a 00                	push   0x0
c0022821:	6a 00                	push   0x0
c0022823:	56                   	push   esi
c0022824:	e8 75 fe ff ff       	call   c002269e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022829:	83 c4 10             	add    esp,0x10
c002282c:	89 c2                	mov    edx,eax
c002282e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022831:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022834:	c1 f8 10             	sar    eax,0x10
c0022837:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c002283a:	55                   	push   ebp
c002283b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c002283f:	55                   	push   ebp
c0022840:	52                   	push   edx
c0022841:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022845:	56                   	push   esi
c0022846:	e8 a9 fb ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002284b:	83 c4 0c             	add    esp,0xc
c002284e:	6a 27                	push   0x27
c0022850:	6a 00                	push   0x0
c0022852:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022856:	51                   	push   ecx
c0022857:	e8 94 dc fd ff       	call   c00004f0 <memset>
c002285c:	83 c4 0c             	add    esp,0xc
c002285f:	6b c7 27             	imul   eax,edi,0x27
c0022862:	6a 27                	push   0x27
c0022864:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002286b:	50                   	push   eax
c002286c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022870:	51                   	push   ecx
c0022871:	e8 0a de fd ff       	call   c0000680 <strncpy>
c0022876:	83 c4 0c             	add    esp,0xc
c0022879:	55                   	push   ebp
c002287a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002287e:	52                   	push   edx
c002287f:	56                   	push   esi
c0022880:	e8 93 fc ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022885:	eb 19                	jmp    c00228a0 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0022887:	85 d2                	test   edx,edx
c0022889:	74 18                	je     c00228a3 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c002288b:	51                   	push   ecx
c002288c:	51                   	push   ecx
c002288d:	52                   	push   edx
c002288e:	56                   	push   esi
c002288f:	e8 c0 fc ff ff       	call   c0022554 <CmFreeExtent(Reghive_Tag*, int)>
c0022894:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022898:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c002289c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00228a0:	83 c4 10             	add    esp,0x10
c00228a3:	47                   	inc    edi
c00228a4:	83 c3 03             	add    ebx,0x3
c00228a7:	83 ff 07             	cmp    edi,0x7
c00228aa:	0f 85 43 ff ff ff    	jne    c00227f3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00228b0:	50                   	push   eax
c00228b1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00228b5:	50                   	push   eax
c00228b6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00228bd:	56                   	push   esi
c00228be:	e8 55 fc ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00228c3:	81 c4 8c 00 00 00    	add    esp,0x8c
c00228c9:	5b                   	pop    ebx
c00228ca:	5e                   	pop    esi
c00228cb:	5f                   	pop    edi
c00228cc:	5d                   	pop    ebp
c00228cd:	c3                   	ret    

c00228ce <CmGetMatch(char*, char*, bool, bool*)>:
c00228ce:	56                   	push   esi
c00228cf:	53                   	push   ebx
c00228d0:	50                   	push   eax
c00228d1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00228d5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00228da:	74 25                	je     c0022901 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00228dc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00228df:	31 db                	xor    ebx,ebx
c00228e1:	50                   	push   eax
c00228e2:	50                   	push   eax
c00228e3:	8d 04 9d c0 4b 03 c0 	lea    eax,[ebx*4-0x3ffcb440]
c00228ea:	50                   	push   eax
c00228eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ef:	e8 5c de fd ff       	call   c0000750 <strcmp>
c00228f4:	83 c4 10             	add    esp,0x10
c00228f7:	85 c0                	test   eax,eax
c00228f9:	74 2e                	je     c0022929 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00228fb:	43                   	inc    ebx
c00228fc:	83 fb 3f             	cmp    ebx,0x3f
c00228ff:	75 e0                	jne    c00228e1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0022901:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022904:	31 db                	xor    ebx,ebx
c0022906:	8d 04 9d c0 4b 03 c0 	lea    eax,[ebx*4-0x3ffcb440]
c002290d:	51                   	push   ecx
c002290e:	51                   	push   ecx
c002290f:	50                   	push   eax
c0022910:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022914:	e8 37 de fd ff       	call   c0000750 <strcmp>
c0022919:	83 c4 10             	add    esp,0x10
c002291c:	85 c0                	test   eax,eax
c002291e:	74 09                	je     c0022929 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022920:	43                   	inc    ebx
c0022921:	83 fb 3f             	cmp    ebx,0x3f
c0022924:	75 e0                	jne    c0022906 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022926:	83 cb ff             	or     ebx,0xffffffff
c0022929:	89 d8                	mov    eax,ebx
c002292b:	5a                   	pop    edx
c002292c:	5b                   	pop    ebx
c002292d:	5e                   	pop    esi
c002292e:	c3                   	ret    

c002292f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002292f:	55                   	push   ebp
c0022930:	31 c0                	xor    eax,eax
c0022932:	57                   	push   edi
c0022933:	56                   	push   esi
c0022934:	53                   	push   ebx
c0022935:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022939:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002293d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002293f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022943:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002294a:	83 fd 1f             	cmp    ebp,0x1f
c002294d:	7f 0b                	jg     c002295a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002294f:	0f b6 c2             	movzx  eax,dl
c0022952:	d3 e0                	shl    eax,cl
c0022954:	09 07                	or     DWORD PTR [edi],eax
c0022956:	b0 01                	mov    al,0x1
c0022958:	01 33                	add    DWORD PTR [ebx],esi
c002295a:	5b                   	pop    ebx
c002295b:	5e                   	pop    esi
c002295c:	5f                   	pop    edi
c002295d:	5d                   	pop    ebp
c002295e:	c3                   	ret    

c002295f <CmGetShift(unsigned int*, int*, int, bool*)>:
c002295f:	57                   	push   edi
c0022960:	56                   	push   esi
c0022961:	53                   	push   ebx
c0022962:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022966:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002296a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002296e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022972:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022974:	7c 17                	jl     c002298d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022976:	8b 17                	mov    edx,DWORD PTR [edi]
c0022978:	b8 01 00 00 00       	mov    eax,0x1
c002297d:	d3 e0                	shl    eax,cl
c002297f:	48                   	dec    eax
c0022980:	21 d0                	and    eax,edx
c0022982:	d3 ea                	shr    edx,cl
c0022984:	89 17                	mov    DWORD PTR [edi],edx
c0022986:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022988:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002298b:	eb 05                	jmp    c0022992 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c002298d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022990:	31 c0                	xor    eax,eax
c0022992:	5b                   	pop    ebx
c0022993:	5e                   	pop    esi
c0022994:	5f                   	pop    edi
c0022995:	c3                   	ret    

c0022996 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022996:	83 ec 40             	sub    esp,0x40
c0022999:	8d 44 24 09          	lea    eax,[esp+0x9]
c002299d:	50                   	push   eax
c002299e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00229a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00229a6:	e8 49 fa ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00229ab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00229af:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00229b3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00229b7:	89 10                	mov    DWORD PTR [eax],edx
c00229b9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00229bc:	83 c4 4c             	add    esp,0x4c
c00229bf:	c3                   	ret    

c00229c0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00229c0:	55                   	push   ebp
c00229c1:	57                   	push   edi
c00229c2:	56                   	push   esi
c00229c3:	53                   	push   ebx
c00229c4:	83 ec 40             	sub    esp,0x40
c00229c7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00229cb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00229cf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00229d3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00229d7:	53                   	push   ebx
c00229d8:	56                   	push   esi
c00229d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00229dd:	e8 12 fa ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00229e2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00229e6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00229ea:	83 c4 0c             	add    esp,0xc
c00229ed:	53                   	push   ebx
c00229ee:	56                   	push   esi
c00229ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00229f3:	e8 20 fb ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00229f8:	83 c4 4c             	add    esp,0x4c
c00229fb:	5b                   	pop    ebx
c00229fc:	5e                   	pop    esi
c00229fd:	5f                   	pop    edi
c00229fe:	5d                   	pop    ebp
c00229ff:	c3                   	ret    

c0022a00 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0022a00:	55                   	push   ebp
c0022a01:	57                   	push   edi
c0022a02:	56                   	push   esi
c0022a03:	31 f6                	xor    esi,esi
c0022a05:	53                   	push   ebx
c0022a06:	31 db                	xor    ebx,ebx
c0022a08:	83 ec 40             	sub    esp,0x40
c0022a0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022a13:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0022a1b:	6a 12                	push   0x12
c0022a1d:	68 ee 00 00 00       	push   0xee
c0022a22:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022a26:	e8 c5 da fd ff       	call   c00004f0 <memset>
c0022a2b:	83 c4 10             	add    esp,0x10
c0022a2e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022a32:	6a 08                	push   0x8
c0022a34:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022a38:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022a3c:	50                   	push   eax
c0022a3d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022a41:	55                   	push   ebp
c0022a42:	57                   	push   edi
c0022a43:	e8 e7 fe ff ff       	call   c002292f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022a48:	83 c4 10             	add    esp,0x10
c0022a4b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022a4f:	50                   	push   eax
c0022a50:	6a 06                	push   0x6
c0022a52:	55                   	push   ebp
c0022a53:	57                   	push   edi
c0022a54:	e8 06 ff ff ff       	call   c002295f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022a59:	83 c4 10             	add    esp,0x10
c0022a5c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022a61:	74 07                	je     c0022a6a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022a63:	46                   	inc    esi
c0022a64:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022a68:	eb e1                	jmp    c0022a4b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022a6a:	43                   	inc    ebx
c0022a6b:	83 fb 12             	cmp    ebx,0x12
c0022a6e:	75 c2                	jne    c0022a32 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022a70:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022a74:	31 db                	xor    ebx,ebx
c0022a76:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a79:	50                   	push   eax
c0022a7a:	50                   	push   eax
c0022a7b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0022a80:	43                   	inc    ebx
c0022a81:	8d 04 85 c0 4b 03 c0 	lea    eax,[eax*4-0x3ffcb440]
c0022a88:	50                   	push   eax
c0022a89:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022a8d:	e8 ae dd fd ff       	call   c0000840 <strcat>
c0022a92:	83 c4 10             	add    esp,0x10
c0022a95:	83 fb 18             	cmp    ebx,0x18
c0022a98:	75 df                	jne    c0022a79 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022a9a:	83 c4 3c             	add    esp,0x3c
c0022a9d:	31 c0                	xor    eax,eax
c0022a9f:	5b                   	pop    ebx
c0022aa0:	5e                   	pop    esi
c0022aa1:	5f                   	pop    edi
c0022aa2:	5d                   	pop    ebp
c0022aa3:	c3                   	ret    

c0022aa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022aa4:	83 ec 40             	sub    esp,0x40
c0022aa7:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022aab:	50                   	push   eax
c0022aac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022ab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022ab4:	e8 3b f9 ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022ab9:	58                   	pop    eax
c0022aba:	5a                   	pop    edx
c0022abb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022abf:	8d 44 24 15          	lea    eax,[esp+0x15]
c0022ac3:	50                   	push   eax
c0022ac4:	e8 37 ff ff ff       	call   c0022a00 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022ac9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0022ace:	83 c4 4c             	add    esp,0x4c
c0022ad1:	c3                   	ret    

c0022ad2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0022ad2:	55                   	push   ebp
c0022ad3:	57                   	push   edi
c0022ad4:	56                   	push   esi
c0022ad5:	53                   	push   ebx
c0022ad6:	31 db                	xor    ebx,ebx
c0022ad8:	83 ec 70             	sub    esp,0x70
c0022adb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0022ae2:	6a 30                	push   0x30
c0022ae4:	6a 00                	push   0x0
c0022ae6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0022aea:	56                   	push   esi
c0022aeb:	e8 00 da fd ff       	call   c00004f0 <memset>
c0022af0:	83 c4 10             	add    esp,0x10
c0022af3:	83 ec 0c             	sub    esp,0xc
c0022af6:	57                   	push   edi
c0022af7:	e8 74 da fd ff       	call   c0000570 <strlen>
c0022afc:	83 c4 10             	add    esp,0x10
c0022aff:	39 d8                	cmp    eax,ebx
c0022b01:	76 16                	jbe    c0022b19 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0022b03:	83 ec 0c             	sub    esp,0xc
c0022b06:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022b0a:	50                   	push   eax
c0022b0b:	e8 20 de fd ff       	call   c0000930 <toupper>
c0022b10:	83 c4 10             	add    esp,0x10
c0022b13:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b16:	43                   	inc    ebx
c0022b17:	eb da                	jmp    c0022af3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022b19:	31 f6                	xor    esi,esi
c0022b1b:	52                   	push   edx
c0022b1c:	31 ff                	xor    edi,edi
c0022b1e:	6a 18                	push   0x18
c0022b20:	6a 3f                	push   0x3f
c0022b22:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b26:	50                   	push   eax
c0022b27:	e8 c4 d9 fd ff       	call   c00004f0 <memset>
c0022b2c:	83 c4 10             	add    esp,0x10
c0022b2f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0022b33:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0022b37:	84 c0                	test   al,al
c0022b39:	0f 84 b0 00 00 00    	je     c0022bef <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022b3f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022b43:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022b48:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022b4c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0022b51:	8d 6e 01             	lea    ebp,[esi+0x1]
c0022b54:	83 ec 0c             	sub    esp,0xc
c0022b57:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022b5b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022b5f:	53                   	push   ebx
c0022b60:	e8 0b da fd ff       	call   c0000570 <strlen>
c0022b65:	83 c4 10             	add    esp,0x10
c0022b68:	85 c0                	test   eax,eax
c0022b6a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022b6e:	74 0b                	je     c0022b7b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022b70:	50                   	push   eax
c0022b71:	6a 01                	push   0x1
c0022b73:	53                   	push   ebx
c0022b74:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022b78:	50                   	push   eax
c0022b79:	eb 0a                	jmp    c0022b85 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022b7b:	50                   	push   eax
c0022b7c:	6a 00                	push   0x0
c0022b7e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b82:	50                   	push   eax
c0022b83:	6a 00                	push   0x0
c0022b85:	e8 44 fd ff ff       	call   c00228ce <CmGetMatch(char*, char*, bool, bool*)>
c0022b8a:	83 c4 10             	add    esp,0x10
c0022b8d:	83 f8 ff             	cmp    eax,0xffffffff
c0022b90:	75 1a                	jne    c0022bac <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022b92:	83 ec 0c             	sub    esp,0xc
c0022b95:	68 77 32 03 c0       	push   0xc0033277
c0022b9a:	e8 df db ff ff       	call   c002077e <KePanic(char const*)>
c0022b9f:	83 c4 10             	add    esp,0x10
c0022ba2:	b8 02 00 00 00       	mov    eax,0x2
c0022ba7:	e9 bc 00 00 00       	jmp    c0022c68 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022bac:	83 ff 18             	cmp    edi,0x18
c0022baf:	75 1a                	jne    c0022bcb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0022bb1:	83 ec 0c             	sub    esp,0xc
c0022bb4:	68 8c 32 03 c0       	push   0xc003328c
c0022bb9:	e8 c0 db ff ff       	call   c002077e <KePanic(char const*)>
c0022bbe:	83 c4 10             	add    esp,0x10
c0022bc1:	b8 01 00 00 00       	mov    eax,0x1
c0022bc6:	e9 9d 00 00 00       	jmp    c0022c68 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022bcb:	47                   	inc    edi
c0022bcc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022bd1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0022bd5:	74 02                	je     c0022bd9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0022bd7:	89 ee                	mov    esi,ebp
c0022bd9:	83 ec 0c             	sub    esp,0xc
c0022bdc:	53                   	push   ebx
c0022bdd:	e8 8e d9 fd ff       	call   c0000570 <strlen>
c0022be2:	83 c4 10             	add    esp,0x10
c0022be5:	85 c0                	test   eax,eax
c0022be7:	74 06                	je     c0022bef <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022be9:	46                   	inc    esi
c0022bea:	e9 40 ff ff ff       	jmp    c0022b2f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0022bef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022bf7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022bff:	31 f6                	xor    esi,esi
c0022c01:	50                   	push   eax
c0022c02:	31 ff                	xor    edi,edi
c0022c04:	6a 12                	push   0x12
c0022c06:	68 ee 00 00 00       	push   0xee
c0022c0b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c12:	e8 d9 d8 fd ff       	call   c00004f0 <memset>
c0022c17:	83 c4 10             	add    esp,0x10
c0022c1a:	83 fe 17             	cmp    esi,0x17
c0022c1d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022c21:	7e 26                	jle    c0022c49 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0022c23:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022c27:	50                   	push   eax
c0022c28:	6a 08                	push   0x8
c0022c2a:	55                   	push   ebp
c0022c2b:	53                   	push   ebx
c0022c2c:	e8 2e fd ff ff       	call   c002295f <CmGetShift(unsigned int*, int*, int, bool*)>
c0022c31:	83 c4 10             	add    esp,0x10
c0022c34:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022c39:	74 26                	je     c0022c61 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022c3b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022c42:	4e                   	dec    esi
c0022c43:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022c46:	47                   	inc    edi
c0022c47:	eb 1c                	jmp    c0022c65 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022c49:	6a 06                	push   0x6
c0022c4b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022c50:	50                   	push   eax
c0022c51:	55                   	push   ebp
c0022c52:	53                   	push   ebx
c0022c53:	e8 d7 fc ff ff       	call   c002292f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022c58:	83 c4 10             	add    esp,0x10
c0022c5b:	84 c0                	test   al,al
c0022c5d:	75 06                	jne    c0022c65 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022c5f:	eb c2                	jmp    c0022c23 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022c61:	31 c0                	xor    eax,eax
c0022c63:	eb 03                	jmp    c0022c68 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022c65:	46                   	inc    esi
c0022c66:	eb b2                	jmp    c0022c1a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022c68:	83 c4 6c             	add    esp,0x6c
c0022c6b:	5b                   	pop    ebx
c0022c6c:	5e                   	pop    esi
c0022c6d:	5f                   	pop    edi
c0022c6e:	5d                   	pop    ebp
c0022c6f:	c3                   	ret    

c0022c70 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022c70:	53                   	push   ebx
c0022c71:	83 ec 3c             	sub    esp,0x3c
c0022c74:	6a 2b                	push   0x2b
c0022c76:	6a 00                	push   0x0
c0022c78:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022c7c:	53                   	push   ebx
c0022c7d:	e8 6e d8 fd ff       	call   c00004f0 <memset>
c0022c82:	58                   	pop    eax
c0022c83:	5a                   	pop    edx
c0022c84:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022c88:	50                   	push   eax
c0022c89:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022c8d:	e8 40 fe ff ff       	call   c0022ad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022c92:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022c97:	83 c4 0c             	add    esp,0xc
c0022c9a:	6a 15                	push   0x15
c0022c9c:	6a 00                	push   0x0
c0022c9e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022ca2:	50                   	push   eax
c0022ca3:	e8 48 d8 fd ff       	call   c00004f0 <memset>
c0022ca8:	53                   	push   ebx
c0022ca9:	6a 00                	push   0x0
c0022cab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022caf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022cb3:	e8 e6 f9 ff ff       	call   c002269e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022cb8:	83 c4 58             	add    esp,0x58
c0022cbb:	5b                   	pop    ebx
c0022cbc:	c3                   	ret    

c0022cbd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022cbd:	56                   	push   esi
c0022cbe:	53                   	push   ebx
c0022cbf:	83 ec 48             	sub    esp,0x48
c0022cc2:	6a 12                	push   0x12
c0022cc4:	68 ff 00 00 00       	push   0xff
c0022cc9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022ccd:	56                   	push   esi
c0022cce:	e8 1d d8 fd ff       	call   c00004f0 <memset>
c0022cd3:	5a                   	pop    edx
c0022cd4:	59                   	pop    ecx
c0022cd5:	56                   	push   esi
c0022cd6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022cda:	e8 f3 fd ff ff       	call   c0022ad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022cdf:	83 c4 10             	add    esp,0x10
c0022ce2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022ce6:	85 db                	test   ebx,ebx
c0022ce8:	74 42                	je     c0022d2c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022cea:	50                   	push   eax
c0022ceb:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022cef:	50                   	push   eax
c0022cf0:	53                   	push   ebx
c0022cf1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022cf5:	e8 fa f6 ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022cfa:	83 c4 0c             	add    esp,0xc
c0022cfd:	6a 12                	push   0x12
c0022cff:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022d03:	50                   	push   eax
c0022d04:	56                   	push   esi
c0022d05:	e8 76 d6 fd ff       	call   c0000380 <memcmp>
c0022d0a:	83 c4 10             	add    esp,0x10
c0022d0d:	85 c0                	test   eax,eax
c0022d0f:	74 1e                	je     c0022d2f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022d11:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022d16:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022d1b:	c1 e3 08             	shl    ebx,0x8
c0022d1e:	09 d8                	or     eax,ebx
c0022d20:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022d25:	c1 e3 10             	shl    ebx,0x10
c0022d28:	09 c3                	or     ebx,eax
c0022d2a:	eb ba                	jmp    c0022ce6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022d2c:	83 cb ff             	or     ebx,0xffffffff
c0022d2f:	89 d8                	mov    eax,ebx
c0022d31:	83 c4 44             	add    esp,0x44
c0022d34:	5b                   	pop    ebx
c0022d35:	5e                   	pop    esi
c0022d36:	c3                   	ret    

c0022d37 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022d37:	57                   	push   edi
c0022d38:	56                   	push   esi
c0022d39:	53                   	push   ebx
c0022d3a:	83 ec 34             	sub    esp,0x34
c0022d3d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022d41:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022d45:	6a 2b                	push   0x2b
c0022d47:	6a 00                	push   0x0
c0022d49:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022d4d:	53                   	push   ebx
c0022d4e:	e8 9d d7 fd ff       	call   c00004f0 <memset>
c0022d53:	58                   	pop    eax
c0022d54:	5a                   	pop    edx
c0022d55:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022d59:	50                   	push   eax
c0022d5a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022d5e:	e8 6f fd ff ff       	call   c0022ad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022d63:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022d67:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022d6b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022d6f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022d73:	53                   	push   ebx
c0022d74:	6a 00                	push   0x0
c0022d76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d7a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d7e:	e8 1b f9 ff ff       	call   c002269e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022d83:	83 c4 50             	add    esp,0x50
c0022d86:	5b                   	pop    ebx
c0022d87:	5e                   	pop    esi
c0022d88:	5f                   	pop    edi
c0022d89:	c3                   	ret    

c0022d8a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022d8a:	55                   	push   ebp
c0022d8b:	57                   	push   edi
c0022d8c:	56                   	push   esi
c0022d8d:	53                   	push   ebx
c0022d8e:	83 ec 40             	sub    esp,0x40
c0022d91:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022d95:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022d99:	6a 2b                	push   0x2b
c0022d9b:	6a 00                	push   0x0
c0022d9d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022da1:	56                   	push   esi
c0022da2:	e8 49 d7 fd ff       	call   c00004f0 <memset>
c0022da7:	5f                   	pop    edi
c0022da8:	89 ef                	mov    edi,ebp
c0022daa:	58                   	pop    eax
c0022dab:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022daf:	50                   	push   eax
c0022db0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022db4:	e8 19 fd ff ff       	call   c0022ad2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022db9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022dbe:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022dc3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022dc8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022dcd:	83 c4 10             	add    esp,0x10
c0022dd0:	85 ed                	test   ebp,ebp
c0022dd2:	74 14                	je     c0022de8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022dd4:	51                   	push   ecx
c0022dd5:	51                   	push   ecx
c0022dd6:	57                   	push   edi
c0022dd7:	53                   	push   ebx
c0022dd8:	e8 09 f7 ff ff       	call   c00224e6 <CmGetNext(Reghive_Tag*, int)>
c0022ddd:	83 c4 10             	add    esp,0x10
c0022de0:	85 c0                	test   eax,eax
c0022de2:	74 04                	je     c0022de8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022de4:	89 c7                	mov    edi,eax
c0022de6:	eb e8                	jmp    c0022dd0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022de8:	56                   	push   esi
c0022de9:	6a 00                	push   0x0
c0022deb:	57                   	push   edi
c0022dec:	53                   	push   ebx
c0022ded:	e8 ac f8 ff ff       	call   c002269e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022df2:	83 c4 0c             	add    esp,0xc
c0022df5:	89 c7                	mov    edi,eax
c0022df7:	56                   	push   esi
c0022df8:	50                   	push   eax
c0022df9:	53                   	push   ebx
c0022dfa:	e8 f5 f5 ff ff       	call   c00223f4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022dff:	58                   	pop    eax
c0022e00:	5a                   	pop    edx
c0022e01:	6a 6c                	push   0x6c
c0022e03:	6a 00                	push   0x0
c0022e05:	6a 00                	push   0x0
c0022e07:	68 9d 32 03 c0       	push   0xc003329d
c0022e0c:	57                   	push   edi
c0022e0d:	53                   	push   ebx
c0022e0e:	e8 24 ff ff ff       	call   c0022d37 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022e13:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022e17:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022e1b:	c1 e8 10             	shr    eax,0x10
c0022e1e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022e22:	83 c4 1c             	add    esp,0x1c
c0022e25:	56                   	push   esi
c0022e26:	57                   	push   edi
c0022e27:	53                   	push   ebx
c0022e28:	e8 eb f6 ff ff       	call   c0022518 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022e2d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022e32:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022e37:	c1 e0 08             	shl    eax,0x8
c0022e3a:	09 c2                	or     edx,eax
c0022e3c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022e41:	83 c4 4c             	add    esp,0x4c
c0022e44:	c1 e0 10             	shl    eax,0x10
c0022e47:	5b                   	pop    ebx
c0022e48:	09 d0                	or     eax,edx
c0022e4a:	5e                   	pop    esi
c0022e4b:	5f                   	pop    edi
c0022e4c:	5d                   	pop    ebp
c0022e4d:	c3                   	ret    

c0022e4e <zStrtok(char*, char const*)>:
c0022e4e:	55                   	push   ebp
c0022e4f:	57                   	push   edi
c0022e50:	56                   	push   esi
c0022e51:	53                   	push   ebx
c0022e52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022e56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e5a:	85 db                	test   ebx,ebx
c0022e5c:	74 2f                	je     c0022e8d <zStrtok(char*, char const*)+0x3f>
c0022e5e:	85 c0                	test   eax,eax
c0022e60:	75 09                	jne    c0022e6b <zStrtok(char*, char const*)+0x1d>
c0022e62:	a1 f0 09 04 c0       	mov    eax,ds:0xc00409f0
c0022e67:	85 c0                	test   eax,eax
c0022e69:	74 50                	je     c0022ebb <zStrtok(char*, char const*)+0x6d>
c0022e6b:	31 c9                	xor    ecx,ecx
c0022e6d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022e71:	74 03                	je     c0022e76 <zStrtok(char*, char const*)+0x28>
c0022e73:	41                   	inc    ecx
c0022e74:	eb f7                	jmp    c0022e6d <zStrtok(char*, char const*)+0x1f>
c0022e76:	31 d2                	xor    edx,edx
c0022e78:	39 ca                	cmp    edx,ecx
c0022e7a:	74 15                	je     c0022e91 <zStrtok(char*, char const*)+0x43>
c0022e7c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022e80:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022e83:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022e86:	39 ee                	cmp    esi,ebp
c0022e88:	74 13                	je     c0022e9d <zStrtok(char*, char const*)+0x4f>
c0022e8a:	42                   	inc    edx
c0022e8b:	eb eb                	jmp    c0022e78 <zStrtok(char*, char const*)+0x2a>
c0022e8d:	31 c0                	xor    eax,eax
c0022e8f:	eb 2a                	jmp    c0022ebb <zStrtok(char*, char const*)+0x6d>
c0022e91:	c7 05 f0 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409f0,0x0
c0022e9b:	eb 1e                	jmp    c0022ebb <zStrtok(char*, char const*)+0x6d>
c0022e9d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022ea0:	39 ce                	cmp    esi,ecx
c0022ea2:	75 0a                	jne    c0022eae <zStrtok(char*, char const*)+0x60>
c0022ea4:	40                   	inc    eax
c0022ea5:	a3 f0 09 04 c0       	mov    ds:0xc00409f0,eax
c0022eaa:	89 d8                	mov    eax,ebx
c0022eac:	eb 0d                	jmp    c0022ebb <zStrtok(char*, char const*)+0x6d>
c0022eae:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022eb2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022eb5:	89 15 f0 09 04 c0    	mov    DWORD PTR ds:0xc00409f0,edx
c0022ebb:	5b                   	pop    ebx
c0022ebc:	5e                   	pop    esi
c0022ebd:	5f                   	pop    edi
c0022ebe:	5d                   	pop    ebp
c0022ebf:	c3                   	ret    

c0022ec0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022ec0:	57                   	push   edi
c0022ec1:	56                   	push   esi
c0022ec2:	53                   	push   ebx
c0022ec3:	81 ec 08 01 00 00    	sub    esp,0x108
c0022ec9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022ed0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022ed7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022edb:	53                   	push   ebx
c0022edc:	e8 5f d7 fd ff       	call   c0000640 <strcpy>
c0022ee1:	59                   	pop    ecx
c0022ee2:	5e                   	pop    esi
c0022ee3:	68 3f 36 03 c0       	push   0xc003363f
c0022ee8:	53                   	push   ebx
c0022ee9:	bb 01 00 00 00       	mov    ebx,0x1
c0022eee:	e8 5b ff ff ff       	call   c0022e4e <zStrtok(char*, char const*)>
c0022ef3:	83 c4 10             	add    esp,0x10
c0022ef6:	85 c0                	test   eax,eax
c0022ef8:	74 3b                	je     c0022f35 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022efa:	52                   	push   edx
c0022efb:	50                   	push   eax
c0022efc:	6a 01                	push   0x1
c0022efe:	57                   	push   edi
c0022eff:	e8 b9 fd ff ff       	call   c0022cbd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022f04:	59                   	pop    ecx
c0022f05:	89 c3                	mov    ebx,eax
c0022f07:	5e                   	pop    esi
c0022f08:	68 3f 36 03 c0       	push   0xc003363f
c0022f0d:	6a 00                	push   0x0
c0022f0f:	e8 3a ff ff ff       	call   c0022e4e <zStrtok(char*, char const*)>
c0022f14:	83 c4 10             	add    esp,0x10
c0022f17:	89 c6                	mov    esi,eax
c0022f19:	85 c0                	test   eax,eax
c0022f1b:	74 18                	je     c0022f35 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022f1d:	52                   	push   edx
c0022f1e:	52                   	push   edx
c0022f1f:	53                   	push   ebx
c0022f20:	57                   	push   edi
c0022f21:	e8 81 f5 ff ff       	call   c00224a7 <CmEnterDirectory(Reghive_Tag*, int)>
c0022f26:	83 c4 10             	add    esp,0x10
c0022f29:	89 c3                	mov    ebx,eax
c0022f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0022f2e:	74 05                	je     c0022f35 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022f30:	50                   	push   eax
c0022f31:	56                   	push   esi
c0022f32:	53                   	push   ebx
c0022f33:	eb c9                	jmp    c0022efe <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022f35:	81 c4 00 01 00 00    	add    esp,0x100
c0022f3b:	89 d8                	mov    eax,ebx
c0022f3d:	5b                   	pop    ebx
c0022f3e:	5e                   	pop    esi
c0022f3f:	5f                   	pop    edi
c0022f40:	c3                   	ret    

c0022f41 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022f41:	55                   	push   ebp
c0022f42:	57                   	push   edi
c0022f43:	56                   	push   esi
c0022f44:	53                   	push   ebx
c0022f45:	83 ec 5c             	sub    esp,0x5c
c0022f48:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022f4c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022f50:	85 db                	test   ebx,ebx
c0022f52:	0f 8e 84 00 00 00    	jle    c0022fdc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022f58:	31 ed                	xor    ebp,ebp
c0022f5a:	57                   	push   edi
c0022f5b:	6a 32                	push   0x32
c0022f5d:	6a 00                	push   0x0
c0022f5f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022f63:	57                   	push   edi
c0022f64:	e8 87 d5 fd ff       	call   c00004f0 <memset>
c0022f69:	83 c4 0c             	add    esp,0xc
c0022f6c:	57                   	push   edi
c0022f6d:	53                   	push   ebx
c0022f6e:	56                   	push   esi
c0022f6f:	e8 30 fb ff ff       	call   c0022aa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022f74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022f78:	83 c4 10             	add    esp,0x10
c0022f7b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022f7f:	7d 13                	jge    c0022f94 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022f81:	83 ec 0c             	sub    esp,0xc
c0022f84:	45                   	inc    ebp
c0022f85:	68 df 39 03 c0       	push   0xc00339df
c0022f8a:	e8 b6 64 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0022f8f:	83 c4 10             	add    esp,0x10
c0022f92:	eb e7                	jmp    c0022f7b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022f94:	51                   	push   ecx
c0022f95:	57                   	push   edi
c0022f96:	53                   	push   ebx
c0022f97:	68 a3 32 03 c0       	push   0xc00332a3
c0022f9c:	e8 a4 64 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0022fa1:	83 c4 10             	add    esp,0x10
c0022fa4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022fa9:	75 1e                	jne    c0022fc9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022fab:	52                   	push   edx
c0022fac:	52                   	push   edx
c0022fad:	53                   	push   ebx
c0022fae:	56                   	push   esi
c0022faf:	e8 f3 f4 ff ff       	call   c00224a7 <CmEnterDirectory(Reghive_Tag*, int)>
c0022fb4:	83 c4 0c             	add    esp,0xc
c0022fb7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022fbb:	8d 51 04             	lea    edx,[ecx+0x4]
c0022fbe:	52                   	push   edx
c0022fbf:	50                   	push   eax
c0022fc0:	56                   	push   esi
c0022fc1:	e8 7b ff ff ff       	call   c0022f41 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022fc6:	83 c4 10             	add    esp,0x10
c0022fc9:	50                   	push   eax
c0022fca:	50                   	push   eax
c0022fcb:	53                   	push   ebx
c0022fcc:	56                   	push   esi
c0022fcd:	e8 14 f5 ff ff       	call   c00224e6 <CmGetNext(Reghive_Tag*, int)>
c0022fd2:	83 c4 10             	add    esp,0x10
c0022fd5:	89 c3                	mov    ebx,eax
c0022fd7:	e9 74 ff ff ff       	jmp    c0022f50 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022fdc:	83 c4 5c             	add    esp,0x5c
c0022fdf:	5b                   	pop    ebx
c0022fe0:	5e                   	pop    esi
c0022fe1:	5f                   	pop    edi
c0022fe2:	5d                   	pop    ebp
c0022fe3:	c3                   	ret    

c0022fe4 <CmSplitFinalSlashInPlace(char*)>:
c0022fe4:	53                   	push   ebx
c0022fe5:	83 ec 14             	sub    esp,0x14
c0022fe8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022fec:	53                   	push   ebx
c0022fed:	e8 7e d5 fd ff       	call   c0000570 <strlen>
c0022ff2:	83 c4 10             	add    esp,0x10
c0022ff5:	48                   	dec    eax
c0022ff6:	85 c0                	test   eax,eax
c0022ff8:	74 15                	je     c002300f <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022ffa:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022ffd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0023001:	75 09                	jne    c002300c <CmSplitFinalSlashInPlace(char*)+0x28>
c0023003:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0023006:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c002300a:	eb 05                	jmp    c0023011 <CmSplitFinalSlashInPlace(char*)+0x2d>
c002300c:	48                   	dec    eax
c002300d:	eb e7                	jmp    c0022ff6 <CmSplitFinalSlashInPlace(char*)+0x12>
c002300f:	31 c0                	xor    eax,eax
c0023011:	83 c4 08             	add    esp,0x8
c0023014:	5b                   	pop    ebx
c0023015:	c3                   	ret    

c0023016 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0023016:	55                   	push   ebp
c0023017:	57                   	push   edi
c0023018:	56                   	push   esi
c0023019:	53                   	push   ebx
c002301a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023020:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0023027:	8a 13                	mov    dl,BYTE PTR [ebx]
c0023029:	8d 6b 01             	lea    ebp,[ebx+0x1]
c002302c:	80 fa 40             	cmp    dl,0x40
c002302f:	75 1c                	jne    c002304d <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0023031:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0023034:	85 c9                	test   ecx,ecx
c0023036:	0f 84 09 01 00 00    	je     c0023145 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002303c:	8d 43 01             	lea    eax,[ebx+0x1]
c002303f:	83 f9 3a             	cmp    ecx,0x3a
c0023042:	74 04                	je     c0023048 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0023044:	89 c3                	mov    ebx,eax
c0023046:	eb e9                	jmp    c0023031 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0023048:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c002304b:	89 c3                	mov    ebx,eax
c002304d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0023051:	50                   	push   eax
c0023052:	6a 40                	push   0x40
c0023054:	6a 00                	push   0x0
c0023056:	8d 44 24 24          	lea    eax,[esp+0x24]
c002305a:	50                   	push   eax
c002305b:	e8 90 d4 fd ff       	call   c00004f0 <memset>
c0023060:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0023067:	31 c0                	xor    eax,eax
c0023069:	83 c4 10             	add    esp,0x10
c002306c:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0023071:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0023074:	89 d1                	mov    ecx,edx
c0023076:	85 d2                	test   edx,edx
c0023078:	0f 84 c7 00 00 00    	je     c0023145 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c002307e:	3d c7 00 00 00       	cmp    eax,0xc7
c0023083:	0f 8f bc 00 00 00    	jg     c0023145 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0023089:	83 fa 0a             	cmp    edx,0xa
c002308c:	0f 85 a4 00 00 00    	jne    c0023136 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0023092:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0023097:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c002309c:	89 c8                	mov    eax,ecx
c002309e:	a8 df                	test   al,0xdf
c00230a0:	0f 94 c2             	sete   dl
c00230a3:	83 f9 23             	cmp    ecx,0x23
c00230a6:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00230ab:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00230af:	80 e2 01             	and    dl,0x1
c00230b2:	75 4a                	jne    c00230fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00230b4:	83 e8 09             	sub    eax,0x9
c00230b7:	3c 01                	cmp    al,0x1
c00230b9:	76 43                	jbe    c00230fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00230bb:	83 f9 5b             	cmp    ecx,0x5b
c00230be:	75 42                	jne    c0023102 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00230c0:	83 fe 40             	cmp    esi,0x40
c00230c3:	75 39                	jne    c00230fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00230c5:	83 ec 0c             	sub    esp,0xc
c00230c8:	8d 54 24 65          	lea    edx,[esp+0x65]
c00230cc:	52                   	push   edx
c00230cd:	e8 9e d4 fd ff       	call   c0000570 <strlen>
c00230d2:	83 c4 10             	add    esp,0x10
c00230d5:	83 f8 3f             	cmp    eax,0x3f
c00230d8:	77 6b                	ja     c0023145 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00230da:	50                   	push   eax
c00230db:	50                   	push   eax
c00230dc:	8d 54 24 61          	lea    edx,[esp+0x61]
c00230e0:	52                   	push   edx
c00230e1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00230e5:	52                   	push   edx
c00230e6:	e8 55 d5 fd ff       	call   c0000640 <strcpy>
c00230eb:	58                   	pop    eax
c00230ec:	8d 54 24 24          	lea    edx,[esp+0x24]
c00230f0:	52                   	push   edx
c00230f1:	e8 7a d4 fd ff       	call   c0000570 <strlen>
c00230f6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00230fb:	83 c4 10             	add    esp,0x10
c00230fe:	31 d2                	xor    edx,edx
c0023100:	eb 3b                	jmp    c002313d <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0023102:	83 fe 40             	cmp    esi,0x40
c0023105:	74 06                	je     c002310d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0023107:	8d 44 24 58          	lea    eax,[esp+0x58]
c002310b:	eb 20                	jmp    c002312d <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c002310d:	50                   	push   eax
c002310e:	50                   	push   eax
c002310f:	55                   	push   ebp
c0023110:	8d 44 24 24          	lea    eax,[esp+0x24]
c0023114:	50                   	push   eax
c0023115:	e8 36 d6 fd ff       	call   c0000750 <strcmp>
c002311a:	83 c4 10             	add    esp,0x10
c002311d:	85 c0                	test   eax,eax
c002311f:	75 dd                	jne    c00230fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0023121:	eb e4                	jmp    c0023107 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0023123:	8d 50 01             	lea    edx,[eax+0x1]
c0023126:	83 f9 3d             	cmp    ecx,0x3d
c0023129:	74 1e                	je     c0023149 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c002312b:	89 d0                	mov    eax,edx
c002312d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0023130:	85 c9                	test   ecx,ecx
c0023132:	75 ef                	jne    c0023123 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0023134:	eb 0f                	jmp    c0023145 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0023136:	8d 50 01             	lea    edx,[eax+0x1]
c0023139:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c002313d:	47                   	inc    edi
c002313e:	89 d0                	mov    eax,edx
c0023140:	e9 2c ff ff ff       	jmp    c0023071 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0023145:	31 c0                	xor    eax,eax
c0023147:	eb 33                	jmp    c002317c <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0023149:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002314d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023150:	50                   	push   eax
c0023151:	50                   	push   eax
c0023152:	8d 44 24 60          	lea    eax,[esp+0x60]
c0023156:	50                   	push   eax
c0023157:	53                   	push   ebx
c0023158:	e8 f3 d5 fd ff       	call   c0000750 <strcmp>
c002315d:	83 c4 10             	add    esp,0x10
c0023160:	85 c0                	test   eax,eax
c0023162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023166:	75 96                	jne    c00230fe <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0023168:	51                   	push   ecx
c0023169:	51                   	push   ecx
c002316a:	52                   	push   edx
c002316b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0023172:	e8 c9 d4 fd ff       	call   c0000640 <strcpy>
c0023177:	83 c4 10             	add    esp,0x10
c002317a:	b0 01                	mov    al,0x1
c002317c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023182:	5b                   	pop    ebx
c0023183:	5e                   	pop    esi
c0023184:	5f                   	pop    edi
c0023185:	5d                   	pop    ebp
c0023186:	c3                   	ret    

c0023187 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0023187:	57                   	push   edi
c0023188:	56                   	push   esi
c0023189:	53                   	push   ebx
c002318a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023190:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0023197:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002319e:	53                   	push   ebx
c002319f:	e8 cc d3 fd ff       	call   c0000570 <strlen>
c00231a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00231a7:	89 c7                	mov    edi,eax
c00231a9:	e8 c2 d3 fd ff       	call   c0000570 <strlen>
c00231ae:	83 c4 10             	add    esp,0x10
c00231b1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00231b5:	3d ff 00 00 00       	cmp    eax,0xff
c00231ba:	0f 87 d3 00 00 00    	ja     c0023293 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00231c0:	57                   	push   edi
c00231c1:	57                   	push   edi
c00231c2:	56                   	push   esi
c00231c3:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00231c7:	56                   	push   esi
c00231c8:	e8 73 d4 fd ff       	call   c0000640 <strcpy>
c00231cd:	58                   	pop    eax
c00231ce:	5a                   	pop    edx
c00231cf:	68 3f 36 03 c0       	push   0xc003363f
c00231d4:	56                   	push   esi
c00231d5:	e8 66 d6 fd ff       	call   c0000840 <strcat>
c00231da:	59                   	pop    ecx
c00231db:	5f                   	pop    edi
c00231dc:	53                   	push   ebx
c00231dd:	56                   	push   esi
c00231de:	e8 5d d6 fd ff       	call   c0000840 <strcat>
c00231e3:	58                   	pop    eax
c00231e4:	5a                   	pop    edx
c00231e5:	68 ad 32 03 c0       	push   0xc00332ad
c00231ea:	56                   	push   esi
c00231eb:	e8 50 d6 fd ff       	call   c0000840 <strcat>
c00231f0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00231f7:	e8 bb 33 ff ff       	call   c00165b7 <malloc>
c00231fc:	83 c4 0c             	add    esp,0xc
c00231ff:	89 c3                	mov    ebx,eax
c0023201:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0023207:	56                   	push   esi
c0023208:	50                   	push   eax
c0023209:	e8 3e 74 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c002320e:	83 c4 10             	add    esp,0x10
c0023211:	85 db                	test   ebx,ebx
c0023213:	74 7e                	je     c0023293 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0023215:	51                   	push   ecx
c0023216:	51                   	push   ecx
c0023217:	6a 01                	push   0x1
c0023219:	53                   	push   ebx
c002321a:	e8 4b 74 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c002321f:	83 c4 10             	add    esp,0x10
c0023222:	85 c0                	test   eax,eax
c0023224:	74 08                	je     c002322e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0023226:	83 ec 0c             	sub    esp,0xc
c0023229:	8b 03                	mov    eax,DWORD PTR [ebx]
c002322b:	53                   	push   ebx
c002322c:	eb 5f                	jmp    c002328d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c002322e:	52                   	push   edx
c002322f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0023233:	50                   	push   eax
c0023234:	8d 44 24 20          	lea    eax,[esp+0x20]
c0023238:	50                   	push   eax
c0023239:	53                   	push   ebx
c002323a:	e8 2d 77 ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c002323f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023243:	83 c4 10             	add    esp,0x10
c0023246:	89 c1                	mov    ecx,eax
c0023248:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c002324c:	74 31                	je     c002327f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c002324e:	83 ec 0c             	sub    esp,0xc
c0023251:	50                   	push   eax
c0023252:	e8 60 33 ff ff       	call   c00165b7 <malloc>
c0023257:	89 c6                	mov    esi,eax
c0023259:	58                   	pop    eax
c002325a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002325c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0023260:	52                   	push   edx
c0023261:	56                   	push   esi
c0023262:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0023266:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002326a:	53                   	push   ebx
c002326b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002326e:	83 c4 20             	add    esp,0x20
c0023271:	85 c0                	test   eax,eax
c0023273:	75 0a                	jne    c002327f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0023275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023279:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c002327d:	74 18                	je     c0023297 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c002327f:	83 ec 0c             	sub    esp,0xc
c0023282:	53                   	push   ebx
c0023283:	e8 40 74 ff ff       	call   c001a6c8 <File::close()>
c0023288:	8b 03                	mov    eax,DWORD PTR [ebx]
c002328a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002328d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023290:	83 c4 10             	add    esp,0x10
c0023293:	31 c0                	xor    eax,eax
c0023295:	eb 3b                	jmp    c00232d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0023297:	83 ec 0c             	sub    esp,0xc
c002329a:	53                   	push   ebx
c002329b:	e8 28 74 ff ff       	call   c001a6c8 <File::close()>
c00232a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00232a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00232a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00232a8:	83 c4 0c             	add    esp,0xc
c00232ab:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00232b2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00232b9:	56                   	push   esi
c00232ba:	e8 57 fd ff ff       	call   c0023016 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00232bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00232c2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00232c6:	e8 fc 32 ff ff       	call   c00165c7 <free>
c00232cb:	83 c4 10             	add    esp,0x10
c00232ce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00232d2:	81 c4 20 01 00 00    	add    esp,0x120
c00232d8:	5b                   	pop    ebx
c00232d9:	5e                   	pop    esi
c00232da:	5f                   	pop    edi
c00232db:	c3                   	ret    

c00232dc <Reg::getLine(char*, char*, char*)>:
c00232dc:	57                   	push   edi
c00232dd:	56                   	push   esi
c00232de:	53                   	push   ebx
c00232df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00232e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00232eb:	57                   	push   edi
c00232ec:	56                   	push   esi
c00232ed:	53                   	push   ebx
c00232ee:	68 b2 32 03 c0       	push   0xc00332b2
c00232f3:	e8 8f fe ff ff       	call   c0023187 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00232f8:	83 c4 10             	add    esp,0x10
c00232fb:	84 c0                	test   al,al
c00232fd:	75 10                	jne    c002330f <Reg::getLine(char*, char*, char*)+0x33>
c00232ff:	57                   	push   edi
c0023300:	56                   	push   esi
c0023301:	53                   	push   ebx
c0023302:	68 d7 32 03 c0       	push   0xc00332d7
c0023307:	e8 7b fe ff ff       	call   c0023187 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c002330c:	83 c4 10             	add    esp,0x10
c002330f:	5b                   	pop    ebx
c0023310:	5e                   	pop    esi
c0023311:	5f                   	pop    edi
c0023312:	c3                   	ret    

c0023313 <Reg::readInt(char*, char*, int*)>:
c0023313:	55                   	push   ebp
c0023314:	57                   	push   edi
c0023315:	56                   	push   esi
c0023316:	53                   	push   ebx
c0023317:	81 ec f0 00 00 00    	sub    esp,0xf0
c002331d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0023321:	55                   	push   ebp
c0023322:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023329:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023330:	e8 a7 ff ff ff       	call   c00232dc <Reg::getLine(char*, char*, char*)>
c0023335:	83 c4 10             	add    esp,0x10
c0023338:	84 c0                	test   al,al
c002333a:	0f 84 b6 00 00 00    	je     c00233f6 <Reg::readInt(char*, char*, int*)+0xe3>
c0023340:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0023345:	83 fa 2b             	cmp    edx,0x2b
c0023348:	74 0c                	je     c0023356 <Reg::readInt(char*, char*, int*)+0x43>
c002334a:	83 fa 2d             	cmp    edx,0x2d
c002334d:	75 0e                	jne    c002335d <Reg::readInt(char*, char*, int*)+0x4a>
c002334f:	ba 01 00 00 00       	mov    edx,0x1
c0023354:	eb 0b                	jmp    c0023361 <Reg::readInt(char*, char*, int*)+0x4e>
c0023356:	ba 01 00 00 00       	mov    edx,0x1
c002335b:	eb 02                	jmp    c002335f <Reg::readInt(char*, char*, int*)+0x4c>
c002335d:	31 d2                	xor    edx,edx
c002335f:	31 c0                	xor    eax,eax
c0023361:	be 0a 00 00 00       	mov    esi,0xa
c0023366:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c002336b:	75 21                	jne    c002338e <Reg::readInt(char*, char*, int*)+0x7b>
c002336d:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0023372:	83 f9 78             	cmp    ecx,0x78
c0023375:	75 0a                	jne    c0023381 <Reg::readInt(char*, char*, int*)+0x6e>
c0023377:	83 c2 02             	add    edx,0x2
c002337a:	be 10 00 00 00       	mov    esi,0x10
c002337f:	eb 0d                	jmp    c002338e <Reg::readInt(char*, char*, int*)+0x7b>
c0023381:	83 f9 62             	cmp    ecx,0x62
c0023384:	75 08                	jne    c002338e <Reg::readInt(char*, char*, int*)+0x7b>
c0023386:	83 c2 02             	add    edx,0x2
c0023389:	be 02 00 00 00       	mov    esi,0x2
c002338e:	01 d5                	add    ebp,edx
c0023390:	31 d2                	xor    edx,edx
c0023392:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0023396:	83 f9 0d             	cmp    ecx,0xd
c0023399:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c002339d:	0f 94 c3             	sete   bl
c00233a0:	85 c9                	test   ecx,ecx
c00233a2:	89 df                	mov    edi,ebx
c00233a4:	0f 94 c3             	sete   bl
c00233a7:	09 df                	or     edi,ebx
c00233a9:	89 fb                	mov    ebx,edi
c00233ab:	83 e7 01             	and    edi,0x1
c00233ae:	75 35                	jne    c00233e5 <Reg::readInt(char*, char*, int*)+0xd2>
c00233b0:	0f af d6             	imul   edx,esi
c00233b3:	83 fe 10             	cmp    esi,0x10
c00233b6:	75 26                	jne    c00233de <Reg::readInt(char*, char*, int*)+0xcb>
c00233b8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00233bc:	83 ef 41             	sub    edi,0x41
c00233bf:	89 fb                	mov    ebx,edi
c00233c1:	80 fb 05             	cmp    bl,0x5
c00233c4:	77 06                	ja     c00233cc <Reg::readInt(char*, char*, int*)+0xb9>
c00233c6:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00233ca:	eb 16                	jmp    c00233e2 <Reg::readInt(char*, char*, int*)+0xcf>
c00233cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00233d0:	83 eb 61             	sub    ebx,0x61
c00233d3:	80 fb 05             	cmp    bl,0x5
c00233d6:	77 06                	ja     c00233de <Reg::readInt(char*, char*, int*)+0xcb>
c00233d8:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00233dc:	eb 04                	jmp    c00233e2 <Reg::readInt(char*, char*, int*)+0xcf>
c00233de:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00233e2:	45                   	inc    ebp
c00233e3:	eb ad                	jmp    c0023392 <Reg::readInt(char*, char*, int*)+0x7f>
c00233e5:	84 c0                	test   al,al
c00233e7:	74 02                	je     c00233eb <Reg::readInt(char*, char*, int*)+0xd8>
c00233e9:	f7 da                	neg    edx
c00233eb:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00233f2:	89 10                	mov    DWORD PTR [eax],edx
c00233f4:	88 d8                	mov    al,bl
c00233f6:	81 c4 ec 00 00 00    	add    esp,0xec
c00233fc:	5b                   	pop    ebx
c00233fd:	5e                   	pop    esi
c00233fe:	5f                   	pop    edi
c00233ff:	5d                   	pop    ebp
c0023400:	c3                   	ret    

c0023401 <Reg::readString(char*, char*, char*, int)>:
c0023401:	57                   	push   edi
c0023402:	56                   	push   esi
c0023403:	53                   	push   ebx
c0023404:	81 ec d4 00 00 00    	sub    esp,0xd4
c002340a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0023411:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0023415:	57                   	push   edi
c0023416:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c002341d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023424:	e8 b3 fe ff ff       	call   c00232dc <Reg::getLine(char*, char*, char*)>
c0023429:	83 c4 10             	add    esp,0x10
c002342c:	89 c6                	mov    esi,eax
c002342e:	84 c0                	test   al,al
c0023430:	74 44                	je     c0023476 <Reg::readString(char*, char*, char*, int)+0x75>
c0023432:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0023439:	31 c0                	xor    eax,eax
c002343b:	4a                   	dec    edx
c002343c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c002343f:	84 c9                	test   cl,cl
c0023441:	74 0f                	je     c0023452 <Reg::readString(char*, char*, char*, int)+0x51>
c0023443:	39 c2                	cmp    edx,eax
c0023445:	7e 0b                	jle    c0023452 <Reg::readString(char*, char*, char*, int)+0x51>
c0023447:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c002344a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c002344f:	40                   	inc    eax
c0023450:	eb ea                	jmp    c002343c <Reg::readString(char*, char*, char*, int)+0x3b>
c0023452:	83 ec 0c             	sub    esp,0xc
c0023455:	53                   	push   ebx
c0023456:	e8 15 d1 fd ff       	call   c0000570 <strlen>
c002345b:	83 c4 10             	add    esp,0x10
c002345e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0023463:	75 11                	jne    c0023476 <Reg::readString(char*, char*, char*, int)+0x75>
c0023465:	83 ec 0c             	sub    esp,0xc
c0023468:	53                   	push   ebx
c0023469:	e8 02 d1 fd ff       	call   c0000570 <strlen>
c002346e:	83 c4 10             	add    esp,0x10
c0023471:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0023476:	81 c4 d0 00 00 00    	add    esp,0xd0
c002347c:	89 f0                	mov    eax,esi
c002347e:	5b                   	pop    ebx
c002347f:	5e                   	pop    esi
c0023480:	5f                   	pop    edi
c0023481:	c3                   	ret    

c0023482 <Reg::readBool(char*, char*, bool*)>:
c0023482:	83 ec 20             	sub    esp,0x20
c0023485:	8d 44 24 10          	lea    eax,[esp+0x10]
c0023489:	50                   	push   eax
c002348a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002348e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023492:	e8 7c fe ff ff       	call   c0023313 <Reg::readInt(char*, char*, int*)>
c0023497:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002349c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00234a0:	0f 95 02             	setne  BYTE PTR [edx]
c00234a3:	83 c4 2c             	add    esp,0x2c
c00234a6:	c3                   	ret    

c00234a7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00234a7:	53                   	push   ebx
c00234a8:	83 ec 1c             	sub    esp,0x1c
c00234ab:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00234af:	8d 44 24 13          	lea    eax,[esp+0x13]
c00234b3:	50                   	push   eax
c00234b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234bc:	e8 c1 ff ff ff       	call   c0023482 <Reg::readBool(char*, char*, bool*)>
c00234c1:	83 c4 10             	add    esp,0x10
c00234c4:	84 c0                	test   al,al
c00234c6:	74 04                	je     c00234cc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00234c8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00234cc:	88 d8                	mov    al,bl
c00234ce:	83 c4 18             	add    esp,0x18
c00234d1:	5b                   	pop    ebx
c00234d2:	c3                   	ret    

c00234d3 <Reg::readIntWithDefault(char*, char*, int)>:
c00234d3:	53                   	push   ebx
c00234d4:	83 ec 1c             	sub    esp,0x1c
c00234d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00234db:	8d 44 24 10          	lea    eax,[esp+0x10]
c00234df:	50                   	push   eax
c00234e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00234e8:	e8 26 fe ff ff       	call   c0023313 <Reg::readInt(char*, char*, int*)>
c00234ed:	83 c4 10             	add    esp,0x10
c00234f0:	84 c0                	test   al,al
c00234f2:	74 04                	je     c00234f8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00234f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00234f8:	89 d8                	mov    eax,ebx
c00234fa:	83 c4 18             	add    esp,0x18
c00234fd:	5b                   	pop    ebx
c00234fe:	c3                   	ret    

c00234ff <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00234ff:	57                   	push   edi
c0023500:	56                   	push   esi
c0023501:	56                   	push   esi
c0023502:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023506:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002350a:	56                   	push   esi
c002350b:	57                   	push   edi
c002350c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023514:	e8 e8 fe ff ff       	call   c0023401 <Reg::readString(char*, char*, char*, int)>
c0023519:	83 c4 10             	add    esp,0x10
c002351c:	84 c0                	test   al,al
c002351e:	75 1a                	jne    c002353a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0023520:	51                   	push   ecx
c0023521:	56                   	push   esi
c0023522:	6a 00                	push   0x0
c0023524:	57                   	push   edi
c0023525:	e8 c6 cf fd ff       	call   c00004f0 <memset>
c002352a:	8d 4e ff             	lea    ecx,[esi-0x1]
c002352d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023533:	83 c4 10             	add    esp,0x10
c0023536:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002353a:	89 f8                	mov    eax,edi
c002353c:	5a                   	pop    edx
c002353d:	5e                   	pop    esi
c002353e:	5f                   	pop    edi
c002353f:	c3                   	ret    

c0023540 <SysEject(regs*)>:
c0023540:	83 ec 0c             	sub    esp,0xc
c0023543:	83 ca ff             	or     edx,0xffffffff
c0023546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002354d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0023552:	83 e9 41             	sub    ecx,0x41
c0023555:	83 f9 19             	cmp    ecx,0x19
c0023558:	77 18                	ja     c0023572 <SysEject(regs*)+0x32>
c002355a:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c0023561:	85 c9                	test   ecx,ecx
c0023563:	74 0d                	je     c0023572 <SysEject(regs*)+0x32>
c0023565:	83 ec 0c             	sub    esp,0xc
c0023568:	51                   	push   ecx
c0023569:	e8 1c 94 ff ff       	call   c001c98a <LogicalDisk::eject()>
c002356e:	83 c4 10             	add    esp,0x10
c0023571:	99                   	cdq    
c0023572:	83 c4 0c             	add    esp,0xc
c0023575:	c3                   	ret    

c0023576 <SysExit(regs*)>:
c0023576:	83 ec 18             	sub    esp,0x18
c0023579:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002357d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023580:	e8 87 29 00 00       	call   c0025f0c <terminateTask(int)>
c0023585:	83 c8 ff             	or     eax,0xffffffff
c0023588:	83 c4 1c             	add    esp,0x1c
c002358b:	89 c2                	mov    edx,eax
c002358d:	c3                   	ret    

c002358e <SysGetCwd(regs*)>:
c002358e:	83 ec 10             	sub    esp,0x10
c0023591:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023595:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0023598:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002359b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235a0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00235a3:	e8 58 6d ff ff       	call   c001a300 <Fs::getcwd(Process*, char*, int)>
c00235a8:	83 c4 1c             	add    esp,0x1c
c00235ab:	99                   	cdq    
c00235ac:	c3                   	ret    

c00235ad <SysGetPID(regs*)>:
c00235ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00235b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00235b7:	99                   	cdq    
c00235b8:	c3                   	ret    

c00235b9 <SysGetRAMData(regs*)>:
c00235b9:	8b 0d ec b9 03 c0    	mov    ecx,DWORD PTR ds:0xc003b9ec
c00235bf:	69 05 e8 b9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003b9e8,0xc8
c00235c9:	99                   	cdq    
c00235ca:	f7 f9                	idiv   ecx
c00235cc:	c1 e0 18             	shl    eax,0x18
c00235cf:	09 c8                	or     eax,ecx
c00235d1:	99                   	cdq    
c00235d2:	c3                   	ret    

c00235d3 <SysGetVGAPtr(regs*)>:
c00235d3:	55                   	push   ebp
c00235d4:	57                   	push   edi
c00235d5:	56                   	push   esi
c00235d6:	53                   	push   ebx
c00235d7:	83 ec 18             	sub    esp,0x18
c00235da:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00235de:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00235e1:	e8 f2 23 00 00       	call   c00259d8 <Thr::processFromPID(int)>
c00235e6:	83 c4 10             	add    esp,0x10
c00235e9:	89 c1                	mov    ecx,eax
c00235eb:	b8 01 00 00 00       	mov    eax,0x1
c00235f0:	85 c9                	test   ecx,ecx
c00235f2:	74 57                	je     c002364b <SysGetVGAPtr(regs*)+0x78>
c00235f4:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00235fa:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00235fe:	74 0c                	je     c002360c <SysGetVGAPtr(regs*)+0x39>
c0023600:	83 ec 0c             	sub    esp,0xc
c0023603:	55                   	push   ebp
c0023604:	e8 50 3c ff ff       	call   c0017259 <setActiveTerminal(VgaText*)>
c0023609:	83 c4 10             	add    esp,0x10
c002360c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002360f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023612:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023617:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023619:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002361c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002361f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023625:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023628:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002362b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023631:	50                   	push   eax
c0023632:	50                   	push   eax
c0023633:	68 f2 32 03 c0       	push   0xc00332f2
c0023638:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002363b:	05 a8 0f 00 00       	add    eax,0xfa8
c0023640:	50                   	push   eax
c0023641:	e8 fa cf fd ff       	call   c0000640 <strcpy>
c0023646:	83 c4 10             	add    esp,0x10
c0023649:	31 c0                	xor    eax,eax
c002364b:	83 c4 0c             	add    esp,0xc
c002364e:	31 d2                	xor    edx,edx
c0023650:	5b                   	pop    ebx
c0023651:	5e                   	pop    esi
c0023652:	5f                   	pop    edi
c0023653:	5d                   	pop    ebp
c0023654:	c3                   	ret    
c0023655:	66 90                	xchg   ax,ax
c0023657:	90                   	nop

c0023658 <SysKill(regs*)>:
c0023658:	53                   	push   ebx
c0023659:	83 ec 08             	sub    esp,0x8
c002365c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023660:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023664:	75 16                	jne    c002367c <SysKill(regs*)+0x24>
c0023666:	83 ec 0c             	sub    esp,0xc
c0023669:	68 fc 32 03 c0       	push   0xc00332fc
c002366e:	e8 0b d1 ff ff       	call   c002077e <KePanic(char const*)>
c0023673:	83 c4 10             	add    esp,0x10
c0023676:	e9 89 00 00 00       	jmp    c0023704 <SysKill(regs*)+0xac>
c002367b:	90                   	nop
c002367c:	83 ec 0c             	sub    esp,0xc
c002367f:	68 ec 11 04 c0       	push   0xc00411ec
c0023684:	e8 33 bc 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023689:	8d 76 00             	lea    esi,[esi+0x0]
c002368c:	83 c4 10             	add    esp,0x10
c002368f:	85 c0                	test   eax,eax
c0023691:	74 19                	je     c00236ac <SysKill(regs*)+0x54>
c0023693:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023696:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023699:	39 0a                	cmp    DWORD PTR [edx],ecx
c002369b:	74 33                	je     c00236d0 <SysKill(regs*)+0x78>
c002369d:	52                   	push   edx
c002369e:	52                   	push   edx
c002369f:	50                   	push   eax
c00236a0:	68 ec 11 04 c0       	push   0xc00411ec
c00236a5:	e8 32 bf 00 00       	call   c002f5dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00236aa:	eb e0                	jmp    c002368c <SysKill(regs*)+0x34>
c00236ac:	83 ec 0c             	sub    esp,0xc
c00236af:	68 e0 11 04 c0       	push   0xc00411e0
c00236b4:	e8 03 bc 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00236b9:	8d 76 00             	lea    esi,[esi+0x0]
c00236bc:	83 c4 10             	add    esp,0x10
c00236bf:	85 c0                	test   eax,eax
c00236c1:	74 41                	je     c0023704 <SysKill(regs*)+0xac>
c00236c3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00236c6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00236c9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00236cb:	75 27                	jne    c00236f4 <SysKill(regs*)+0x9c>
c00236cd:	8d 76 00             	lea    esi,[esi+0x0]
c00236d0:	51                   	push   ecx
c00236d1:	51                   	push   ecx
c00236d2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236dd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00236e3:	e8 4f d9 ff ff       	call   c0021037 <KeRaiseSignal(SigHandlerBlock*, int)>
c00236e8:	83 c4 10             	add    esp,0x10
c00236eb:	31 c0                	xor    eax,eax
c00236ed:	31 d2                	xor    edx,edx
c00236ef:	eb 1b                	jmp    c002370c <SysKill(regs*)+0xb4>
c00236f1:	8d 76 00             	lea    esi,[esi+0x0]
c00236f4:	52                   	push   edx
c00236f5:	52                   	push   edx
c00236f6:	50                   	push   eax
c00236f7:	68 e0 11 04 c0       	push   0xc00411e0
c00236fc:	e8 db be 00 00       	call   c002f5dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023701:	eb b9                	jmp    c00236bc <SysKill(regs*)+0x64>
c0023703:	90                   	nop
c0023704:	83 c8 ff             	or     eax,0xffffffff
c0023707:	89 c2                	mov    edx,eax
c0023709:	8d 76 00             	lea    esi,[esi+0x0]
c002370c:	83 c4 08             	add    esp,0x8
c002370f:	5b                   	pop    ebx
c0023710:	c3                   	ret    

c0023711 <SysLoadDLL(regs*)>:
c0023711:	56                   	push   esi
c0023712:	53                   	push   ebx
c0023713:	31 d2                	xor    edx,edx
c0023715:	51                   	push   ecx
c0023716:	b8 01 00 00 00       	mov    eax,0x1
c002371b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002371f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0023723:	0f 84 8c 00 00 00    	je     c00237b5 <SysLoadDLL(regs*)+0xa4>
c0023729:	83 ec 0c             	sub    esp,0xc
c002372c:	68 14 01 00 00       	push   0x114
c0023731:	e8 81 2e ff ff       	call   c00165b7 <malloc>
c0023736:	83 c4 0c             	add    esp,0xc
c0023739:	89 c3                	mov    ebx,eax
c002373b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023740:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023743:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023746:	53                   	push   ebx
c0023747:	e8 00 6f ff ff       	call   c001a64c <File::File(char const*, Process*)>
c002374c:	83 c4 10             	add    esp,0x10
c002374f:	31 d2                	xor    edx,edx
c0023751:	b8 02 00 00 00       	mov    eax,0x2
c0023756:	85 db                	test   ebx,ebx
c0023758:	74 5b                	je     c00237b5 <SysLoadDLL(regs*)+0xa4>
c002375a:	83 ec 0c             	sub    esp,0xc
c002375d:	53                   	push   ebx
c002375e:	e8 cb 71 ff ff       	call   c001a92e <File::exists()>
c0023763:	83 c4 10             	add    esp,0x10
c0023766:	84 c0                	test   al,al
c0023768:	8b 03                	mov    eax,DWORD PTR [ebx]
c002376a:	75 11                	jne    c002377d <SysLoadDLL(regs*)+0x6c>
c002376c:	83 ec 0c             	sub    esp,0xc
c002376f:	53                   	push   ebx
c0023770:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023773:	83 c4 10             	add    esp,0x10
c0023776:	b8 03 00 00 00       	mov    eax,0x3
c002377b:	eb 36                	jmp    c00237b3 <SysLoadDLL(regs*)+0xa2>
c002377d:	83 ec 0c             	sub    esp,0xc
c0023780:	53                   	push   ebx
c0023781:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023784:	58                   	pop    eax
c0023785:	5a                   	pop    edx
c0023786:	6a 00                	push   0x0
c0023788:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002378b:	e8 76 15 00 00       	call   c0024d06 <Thr::loadDLL(char const*, bool)>
c0023790:	83 c4 10             	add    esp,0x10
c0023793:	89 c1                	mov    ecx,eax
c0023795:	31 d2                	xor    edx,edx
c0023797:	b8 04 00 00 00       	mov    eax,0x4
c002379c:	85 c9                	test   ecx,ecx
c002379e:	74 15                	je     c00237b5 <SysLoadDLL(regs*)+0xa4>
c00237a0:	53                   	push   ebx
c00237a1:	53                   	push   ebx
c00237a2:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00237a8:	51                   	push   ecx
c00237a9:	e8 aa 17 00 00       	call   c0024f58 <Thr::executeDLL(unsigned long, void*)>
c00237ae:	83 c4 10             	add    esp,0x10
c00237b1:	31 c0                	xor    eax,eax
c00237b3:	31 d2                	xor    edx,edx
c00237b5:	59                   	pop    ecx
c00237b6:	5b                   	pop    ebx
c00237b7:	5e                   	pop    esi
c00237b8:	c3                   	ret    

c00237b9 <SysRead(regs*)>:
c00237b9:	57                   	push   edi
c00237ba:	56                   	push   esi
c00237bb:	53                   	push   ebx
c00237bc:	83 ec 10             	sub    esp,0x10
c00237bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00237c6:	83 f8 02             	cmp    eax,0x2
c00237c9:	77 10                	ja     c00237db <SysRead(regs*)+0x22>
c00237cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237d3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00237d9:	eb 0e                	jmp    c00237e9 <SysRead(regs*)+0x30>
c00237db:	83 ec 0c             	sub    esp,0xc
c00237de:	50                   	push   eax
c00237df:	e8 cf 47 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c00237e4:	83 c4 10             	add    esp,0x10
c00237e7:	89 c1                	mov    ecx,eax
c00237e9:	83 c8 ff             	or     eax,0xffffffff
c00237ec:	85 c9                	test   ecx,ecx
c00237ee:	89 c2                	mov    edx,eax
c00237f0:	74 28                	je     c002381a <SysRead(regs*)+0x61>
c00237f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237fa:	31 ff                	xor    edi,edi
c00237fc:	83 ec 0c             	sub    esp,0xc
c00237ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023801:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023805:	52                   	push   edx
c0023806:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023809:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c002380c:	57                   	push   edi
c002380d:	56                   	push   esi
c002380e:	51                   	push   ecx
c002380f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023816:	83 c4 20             	add    esp,0x20
c0023819:	99                   	cdq    
c002381a:	83 c4 10             	add    esp,0x10
c002381d:	5b                   	pop    ebx
c002381e:	5e                   	pop    esi
c002381f:	5f                   	pop    edi
c0023820:	c3                   	ret    

c0023821 <SysRegisterSignal(regs*)>:
c0023821:	83 ec 18             	sub    esp,0x18
c0023824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023828:	6a 00                	push   0x0
c002382a:	6a 00                	push   0x0
c002382c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002382f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023837:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002383a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023840:	e8 bc d7 ff ff       	call   c0021001 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023845:	83 c4 2c             	add    esp,0x2c
c0023848:	99                   	cdq    
c0023849:	c3                   	ret    

c002384a <SysRegistryGetTypeFromPath(regs*)>:
c002384a:	57                   	push   edi
c002384b:	56                   	push   esi
c002384c:	53                   	push   ebx
c002384d:	81 ec 38 01 00 00    	sub    esp,0x138
c0023853:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002385a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002385d:	68 1d 33 03 c0       	push   0xc003331d
c0023862:	e8 de 5b ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0023867:	5a                   	pop    edx
c0023868:	59                   	pop    ecx
c0023869:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002386c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002386f:	e8 4c f6 ff ff       	call   c0022ec0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023874:	5f                   	pop    edi
c0023875:	89 c6                	mov    esi,eax
c0023877:	5a                   	pop    edx
c0023878:	50                   	push   eax
c0023879:	68 3d 33 03 c0       	push   0xc003333d
c002387e:	e8 c2 5b ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0023883:	83 c4 10             	add    esp,0x10
c0023886:	85 f6                	test   esi,esi
c0023888:	74 28                	je     c00238b2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002388a:	50                   	push   eax
c002388b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002388f:	57                   	push   edi
c0023890:	56                   	push   esi
c0023891:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023894:	e8 0b f2 ff ff       	call   c0022aa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023899:	83 c4 0c             	add    esp,0xc
c002389c:	89 c3                	mov    ebx,eax
c002389e:	57                   	push   edi
c002389f:	50                   	push   eax
c00238a0:	68 45 33 03 c0       	push   0xc0033345
c00238a5:	e8 9b 5b ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00238aa:	89 d8                	mov    eax,ebx
c00238ac:	83 c4 10             	add    esp,0x10
c00238af:	99                   	cdq    
c00238b0:	eb 05                	jmp    c00238b7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00238b2:	83 c8 ff             	or     eax,0xffffffff
c00238b5:	89 c2                	mov    edx,eax
c00238b7:	81 c4 30 01 00 00    	add    esp,0x130
c00238bd:	5b                   	pop    ebx
c00238be:	5e                   	pop    esi
c00238bf:	5f                   	pop    edi
c00238c0:	c3                   	ret    

c00238c1 <SysRegistryReadExtent(regs*)>:
c00238c1:	83 ec 1c             	sub    esp,0x1c
c00238c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00238c8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00238cb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00238ce:	85 c0                	test   eax,eax
c00238d0:	79 1f                	jns    c00238f1 <SysRegistryReadExtent(regs*)+0x30>
c00238d2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00238d7:	52                   	push   edx
c00238d8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00238dc:	52                   	push   edx
c00238dd:	50                   	push   eax
c00238de:	51                   	push   ecx
c00238df:	e8 b2 f0 ff ff       	call   c0022996 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00238e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00238e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00238ec:	83 c4 10             	add    esp,0x10
c00238ef:	eb 14                	jmp    c0023905 <SysRegistryReadExtent(regs*)+0x44>
c00238f1:	83 ec 04             	sub    esp,0x4
c00238f4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00238f7:	50                   	push   eax
c00238f8:	51                   	push   ecx
c00238f9:	e8 32 eb ff ff       	call   c0022430 <CmGetString(Reghive_Tag*, int, char*)>
c00238fe:	83 c4 10             	add    esp,0x10
c0023901:	31 c0                	xor    eax,eax
c0023903:	31 d2                	xor    edx,edx
c0023905:	83 c4 1c             	add    esp,0x1c
c0023908:	c3                   	ret    

c0023909 <SysRegistryPathToExtentLookup(regs*)>:
c0023909:	53                   	push   ebx
c002390a:	83 ec 10             	sub    esp,0x10
c002390d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023911:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023914:	68 5b 33 03 c0       	push   0xc003335b
c0023919:	e8 27 5b ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002391e:	58                   	pop    eax
c002391f:	5a                   	pop    edx
c0023920:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023923:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023926:	e8 95 f5 ff ff       	call   c0022ec0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002392b:	83 c4 18             	add    esp,0x18
c002392e:	99                   	cdq    
c002392f:	5b                   	pop    ebx
c0023930:	c3                   	ret    

c0023931 <SysRegistryEnterDirectory(regs*)>:
c0023931:	53                   	push   ebx
c0023932:	83 ec 10             	sub    esp,0x10
c0023935:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023939:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002393c:	68 7e 33 03 c0       	push   0xc003337e
c0023941:	e8 ff 5a ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0023946:	58                   	pop    eax
c0023947:	5a                   	pop    edx
c0023948:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002394b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002394e:	e8 54 eb ff ff       	call   c00224a7 <CmEnterDirectory(Reghive_Tag*, int)>
c0023953:	83 c4 18             	add    esp,0x18
c0023956:	99                   	cdq    
c0023957:	5b                   	pop    ebx
c0023958:	c3                   	ret    

c0023959 <SysRegistryGetNext(regs*)>:
c0023959:	53                   	push   ebx
c002395a:	83 ec 10             	sub    esp,0x10
c002395d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023961:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023964:	68 9c 33 03 c0       	push   0xc003339c
c0023969:	e8 d7 5a ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002396e:	58                   	pop    eax
c002396f:	5a                   	pop    edx
c0023970:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023973:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023976:	e8 6b eb ff ff       	call   c00224e6 <CmGetNext(Reghive_Tag*, int)>
c002397b:	83 c4 18             	add    esp,0x18
c002397e:	99                   	cdq    
c002397f:	5b                   	pop    ebx
c0023980:	c3                   	ret    

c0023981 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023981:	57                   	push   edi
c0023982:	56                   	push   esi
c0023983:	53                   	push   ebx
c0023984:	81 ec 34 01 00 00    	sub    esp,0x134
c002398a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023991:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023995:	57                   	push   edi
c0023996:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023999:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002399c:	e8 03 f1 ff ff       	call   c0022aa4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00239a1:	89 c3                	mov    ebx,eax
c00239a3:	58                   	pop    eax
c00239a4:	5a                   	pop    edx
c00239a5:	57                   	push   edi
c00239a6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00239a9:	e8 92 cc fd ff       	call   c0000640 <strcpy>
c00239ae:	89 d8                	mov    eax,ebx
c00239b0:	81 c4 40 01 00 00    	add    esp,0x140
c00239b6:	99                   	cdq    
c00239b7:	5b                   	pop    ebx
c00239b8:	5e                   	pop    esi
c00239b9:	5f                   	pop    edi
c00239ba:	c3                   	ret    

c00239bb <SysRegistryOpen(regs*)>:
c00239bb:	83 ec 18             	sub    esp,0x18
c00239be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00239c2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00239c5:	e8 f6 e8 ff ff       	call   c00222c0 <CmOpen(char const*)>
c00239ca:	83 c4 1c             	add    esp,0x1c
c00239cd:	99                   	cdq    
c00239ce:	c3                   	ret    

c00239cf <SysRegistryClose(regs*)>:
c00239cf:	83 ec 18             	sub    esp,0x18
c00239d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00239d6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00239d9:	e8 00 ea ff ff       	call   c00223de <CmClose(Reghive_Tag*)>
c00239de:	31 c0                	xor    eax,eax
c00239e0:	31 d2                	xor    edx,edx
c00239e2:	83 c4 1c             	add    esp,0x1c
c00239e5:	c3                   	ret    

c00239e6 <SysSbrk(regs*)>:
c00239e6:	56                   	push   esi
c00239e7:	53                   	push   ebx
c00239e8:	50                   	push   eax
c00239e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00239f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239f5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00239f8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00239fe:	85 db                	test   ebx,ebx
c0023a00:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0023a03:	74 02                	je     c0023a07 <SysSbrk(regs*)+0x21>
c0023a05:	79 06                	jns    c0023a0d <SysSbrk(regs*)+0x27>
c0023a07:	89 f0                	mov    eax,esi
c0023a09:	31 d2                	xor    edx,edx
c0023a0b:	eb 2a                	jmp    c0023a37 <SysSbrk(regs*)+0x51>
c0023a0d:	83 c8 ff             	or     eax,0xffffffff
c0023a10:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023a16:	89 c2                	mov    edx,eax
c0023a18:	77 1d                	ja     c0023a37 <SysSbrk(regs*)+0x51>
c0023a1a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023a20:	50                   	push   eax
c0023a21:	c1 ea 0c             	shr    edx,0xc
c0023a24:	68 07 0c 00 00       	push   0xc07
c0023a29:	52                   	push   edx
c0023a2a:	51                   	push   ecx
c0023a2b:	e8 f4 4e ff ff       	call   c0018924 <VAS::allocatePages(int, int)>
c0023a30:	89 f0                	mov    eax,esi
c0023a32:	31 d2                	xor    edx,edx
c0023a34:	83 c4 10             	add    esp,0x10
c0023a37:	59                   	pop    ecx
c0023a38:	5b                   	pop    ebx
c0023a39:	5e                   	pop    esi
c0023a3a:	c3                   	ret    

c0023a3b <SysSetCwd(regs*)>:
c0023a3b:	83 ec 14             	sub    esp,0x14
c0023a3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a42:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023a45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a4a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023a4d:	e8 7b 6f ff ff       	call   c001a9cd <Fs::setcwd(Process*, char*)>
c0023a52:	83 c4 1c             	add    esp,0x1c
c0023a55:	99                   	cdq    
c0023a56:	c3                   	ret    

c0023a57 <SysSetTime(regs*)>:
c0023a57:	55                   	push   ebp
c0023a58:	31 c9                	xor    ecx,ecx
c0023a5a:	57                   	push   edi
c0023a5b:	bd 0c 00 00 00       	mov    ebp,0xc
c0023a60:	56                   	push   esi
c0023a61:	53                   	push   ebx
c0023a62:	31 db                	xor    ebx,ebx
c0023a64:	83 ec 10             	sub    esp,0x10
c0023a67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023a6b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023a6e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023a71:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023a74:	89 c2                	mov    edx,eax
c0023a76:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023a7c:	83 e2 1f             	and    edx,0x1f
c0023a7f:	c1 e7 10             	shl    edi,0x10
c0023a82:	42                   	inc    edx
c0023a83:	c1 e8 05             	shr    eax,0x5
c0023a86:	88 d1                	mov    cl,dl
c0023a88:	31 d2                	xor    edx,edx
c0023a8a:	f7 f5                	div    ebp
c0023a8c:	89 dd                	mov    ebp,ebx
c0023a8e:	88 d5                	mov    ch,dl
c0023a90:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023a96:	0f b7 c1             	movzx  eax,cx
c0023a99:	31 d2                	xor    edx,edx
c0023a9b:	09 f8                	or     eax,edi
c0023a9d:	bf 3c 00 00 00       	mov    edi,0x3c
c0023aa2:	89 c1                	mov    ecx,eax
c0023aa4:	89 f0                	mov    eax,esi
c0023aa6:	f7 f7                	div    edi
c0023aa8:	c1 e2 10             	shl    edx,0x10
c0023aab:	09 d5                	or     ebp,edx
c0023aad:	31 d2                	xor    edx,edx
c0023aaf:	89 eb                	mov    ebx,ebp
c0023ab1:	f7 f7                	div    edi
c0023ab3:	bf 10 0e 00 00       	mov    edi,0xe10
c0023ab8:	88 d7                	mov    bh,dl
c0023aba:	89 f0                	mov    eax,esi
c0023abc:	31 d2                	xor    edx,edx
c0023abe:	f7 f7                	div    edi
c0023ac0:	bf 18 00 00 00       	mov    edi,0x18
c0023ac5:	31 d2                	xor    edx,edx
c0023ac7:	f7 f7                	div    edi
c0023ac9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0023ace:	88 d3                	mov    bl,dl
c0023ad0:	53                   	push   ebx
c0023ad1:	51                   	push   ecx
c0023ad2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0023ad8:	e8 39 78 ff ff       	call   c001b316 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0023add:	83 c4 1c             	add    esp,0x1c
c0023ae0:	83 f0 01             	xor    eax,0x1
c0023ae3:	5b                   	pop    ebx
c0023ae4:	0f b6 c0             	movzx  eax,al
c0023ae7:	5e                   	pop    esi
c0023ae8:	31 d2                	xor    edx,edx
c0023aea:	5f                   	pop    edi
c0023aeb:	5d                   	pop    ebp
c0023aec:	c3                   	ret    

c0023aed <SysSymlink(regs*)>:
c0023aed:	56                   	push   esi
c0023aee:	83 c8 ff             	or     eax,0xffffffff
c0023af1:	53                   	push   ebx
c0023af2:	89 c2                	mov    edx,eax
c0023af4:	81 ec 34 02 00 00    	sub    esp,0x234
c0023afa:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0023b01:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023b05:	74 50                	je     c0023b57 <SysSymlink(regs*)+0x6a>
c0023b07:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023b0a:	85 c9                	test   ecx,ecx
c0023b0c:	74 49                	je     c0023b57 <SysSymlink(regs*)+0x6a>
c0023b0e:	6a 01                	push   0x1
c0023b10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023b18:	05 0c 01 00 00       	add    eax,0x10c
c0023b1d:	50                   	push   eax
c0023b1e:	51                   	push   ecx
c0023b1f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0023b23:	56                   	push   esi
c0023b24:	e8 2b 68 ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023b29:	6a 01                	push   0x1
c0023b2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023b33:	05 0c 01 00 00       	add    eax,0x10c
c0023b38:	50                   	push   eax
c0023b39:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023b3c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023b43:	53                   	push   ebx
c0023b44:	e8 0b 68 ff ff       	call   c001a354 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023b49:	83 c4 18             	add    esp,0x18
c0023b4c:	56                   	push   esi
c0023b4d:	53                   	push   ebx
c0023b4e:	e8 10 64 ff ff       	call   c0019f63 <KeCreateSymlink(char const*, char const*)>
c0023b53:	83 c4 10             	add    esp,0x10
c0023b56:	99                   	cdq    
c0023b57:	81 c4 34 02 00 00    	add    esp,0x234
c0023b5d:	5b                   	pop    ebx
c0023b5e:	5e                   	pop    esi
c0023b5f:	c3                   	ret    

c0023b60 <SysTimezone(regs*)>:
c0023b60:	83 ec 0c             	sub    esp,0xc
c0023b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b67:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023b6b:	75 17                	jne    c0023b84 <SysTimezone(regs*)+0x24>
c0023b6d:	83 ec 0c             	sub    esp,0xc
c0023b70:	68 b3 33 03 c0       	push   0xc00333b3
c0023b75:	e8 cb 58 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0023b7a:	83 c8 ff             	or     eax,0xffffffff
c0023b7d:	83 c4 10             	add    esp,0x10
c0023b80:	89 c2                	mov    edx,eax
c0023b82:	eb 17                	jmp    c0023b9b <SysTimezone(regs*)+0x3b>
c0023b84:	83 ec 0c             	sub    esp,0xc
c0023b87:	68 c8 33 03 c0       	push   0xc00333c8
c0023b8c:	e8 b4 58 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0023b91:	83 c4 10             	add    esp,0x10
c0023b94:	b8 01 00 00 00       	mov    eax,0x1
c0023b99:	31 d2                	xor    edx,edx
c0023b9b:	83 c4 0c             	add    esp,0xc
c0023b9e:	c3                   	ret    

c0023b9f <SysTruncate(regs*)>:
c0023b9f:	55                   	push   ebp
c0023ba0:	57                   	push   edi
c0023ba1:	31 ff                	xor    edi,edi
c0023ba3:	56                   	push   esi
c0023ba4:	53                   	push   ebx
c0023ba5:	83 ec 0c             	sub    esp,0xc
c0023ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023bac:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023baf:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023bb2:	89 ce                	mov    esi,ecx
c0023bb4:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023bb8:	0f 84 9a 00 00 00    	je     c0023c58 <SysTruncate(regs*)+0xb9>
c0023bbe:	83 ec 0c             	sub    esp,0xc
c0023bc1:	68 14 01 00 00       	push   0x114
c0023bc6:	e8 ec 29 ff ff       	call   c00165b7 <malloc>
c0023bcb:	83 c4 0c             	add    esp,0xc
c0023bce:	89 c3                	mov    ebx,eax
c0023bd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023bd5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023bd8:	55                   	push   ebp
c0023bd9:	53                   	push   ebx
c0023bda:	e8 6d 6a ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0023bdf:	83 c4 10             	add    esp,0x10
c0023be2:	31 d2                	xor    edx,edx
c0023be4:	b8 03 00 00 00       	mov    eax,0x3
c0023be9:	85 db                	test   ebx,ebx
c0023beb:	0f 84 a2 00 00 00    	je     c0023c93 <SysTruncate(regs*)+0xf4>
c0023bf1:	51                   	push   ecx
c0023bf2:	51                   	push   ecx
c0023bf3:	6a 02                	push   0x2
c0023bf5:	53                   	push   ebx
c0023bf6:	e8 6f 6a ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0023bfb:	83 c4 10             	add    esp,0x10
c0023bfe:	85 c0                	test   eax,eax
c0023c00:	74 13                	je     c0023c15 <SysTruncate(regs*)+0x76>
c0023c02:	83 ec 0c             	sub    esp,0xc
c0023c05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c07:	53                   	push   ebx
c0023c08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c0b:	83 c4 10             	add    esp,0x10
c0023c0e:	b8 04 00 00 00       	mov    eax,0x4
c0023c13:	eb 7c                	jmp    c0023c91 <SysTruncate(regs*)+0xf2>
c0023c15:	52                   	push   edx
c0023c16:	57                   	push   edi
c0023c17:	56                   	push   esi
c0023c18:	53                   	push   ebx
c0023c19:	e8 60 6b ff ff       	call   c001a77e <File::truncate(unsigned long long)>
c0023c1e:	83 c4 10             	add    esp,0x10
c0023c21:	85 c0                	test   eax,eax
c0023c23:	74 1b                	je     c0023c40 <SysTruncate(regs*)+0xa1>
c0023c25:	83 ec 0c             	sub    esp,0xc
c0023c28:	53                   	push   ebx
c0023c29:	e8 9a 6a ff ff       	call   c001a6c8 <File::close()>
c0023c2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c36:	83 c4 10             	add    esp,0x10
c0023c39:	b8 05 00 00 00       	mov    eax,0x5
c0023c3e:	eb 51                	jmp    c0023c91 <SysTruncate(regs*)+0xf2>
c0023c40:	83 ec 0c             	sub    esp,0xc
c0023c43:	53                   	push   ebx
c0023c44:	e8 7f 6a ff ff       	call   c001a6c8 <File::close()>
c0023c49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c51:	83 c4 10             	add    esp,0x10
c0023c54:	31 c0                	xor    eax,eax
c0023c56:	eb 39                	jmp    c0023c91 <SysTruncate(regs*)+0xf2>
c0023c58:	31 d2                	xor    edx,edx
c0023c5a:	b8 01 00 00 00       	mov    eax,0x1
c0023c5f:	83 fd 02             	cmp    ebp,0x2
c0023c62:	7e 2f                	jle    c0023c93 <SysTruncate(regs*)+0xf4>
c0023c64:	83 ec 0c             	sub    esp,0xc
c0023c67:	51                   	push   ecx
c0023c68:	e8 46 43 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c0023c6d:	83 c4 10             	add    esp,0x10
c0023c70:	89 c1                	mov    ecx,eax
c0023c72:	31 d2                	xor    edx,edx
c0023c74:	b8 02 00 00 00       	mov    eax,0x2
c0023c79:	85 c9                	test   ecx,ecx
c0023c7b:	74 16                	je     c0023c93 <SysTruncate(regs*)+0xf4>
c0023c7d:	50                   	push   eax
c0023c7e:	57                   	push   edi
c0023c7f:	56                   	push   esi
c0023c80:	51                   	push   ecx
c0023c81:	e8 f8 6a ff ff       	call   c001a77e <File::truncate(unsigned long long)>
c0023c86:	83 c4 10             	add    esp,0x10
c0023c89:	85 c0                	test   eax,eax
c0023c8b:	0f 95 c0             	setne  al
c0023c8e:	0f b6 c0             	movzx  eax,al
c0023c91:	31 d2                	xor    edx,edx
c0023c93:	83 c4 0c             	add    esp,0xc
c0023c96:	5b                   	pop    ebx
c0023c97:	5e                   	pop    esi
c0023c98:	5f                   	pop    edi
c0023c99:	5d                   	pop    ebp
c0023c9a:	c3                   	ret    

c0023c9b <SysWrite(regs*)>:
c0023c9b:	57                   	push   edi
c0023c9c:	56                   	push   esi
c0023c9d:	53                   	push   ebx
c0023c9e:	83 ec 10             	sub    esp,0x10
c0023ca1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023ca5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023ca8:	83 f8 02             	cmp    eax,0x2
c0023cab:	77 10                	ja     c0023cbd <SysWrite(regs*)+0x22>
c0023cad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023cb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cb5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023cbb:	eb 0e                	jmp    c0023ccb <SysWrite(regs*)+0x30>
c0023cbd:	83 ec 0c             	sub    esp,0xc
c0023cc0:	50                   	push   eax
c0023cc1:	e8 ed 42 ff ff       	call   c0017fb3 <KeGetFileFromDescriptor(int)>
c0023cc6:	83 c4 10             	add    esp,0x10
c0023cc9:	89 c1                	mov    ecx,eax
c0023ccb:	83 c8 ff             	or     eax,0xffffffff
c0023cce:	85 c9                	test   ecx,ecx
c0023cd0:	89 c2                	mov    edx,eax
c0023cd2:	74 28                	je     c0023cfc <SysWrite(regs*)+0x61>
c0023cd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023cdc:	31 ff                	xor    edi,edi
c0023cde:	83 ec 0c             	sub    esp,0xc
c0023ce1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023ce3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023ce7:	52                   	push   edx
c0023ce8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023ceb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023cee:	57                   	push   edi
c0023cef:	56                   	push   esi
c0023cf0:	51                   	push   ecx
c0023cf1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023cf8:	83 c4 20             	add    esp,0x20
c0023cfb:	99                   	cdq    
c0023cfc:	83 c4 10             	add    esp,0x10
c0023cff:	5b                   	pop    ebx
c0023d00:	5e                   	pop    esi
c0023d01:	5f                   	pop    edi
c0023d02:	c3                   	ret    

c0023d03 <SysWsbe(regs*)>:
c0023d03:	57                   	push   edi
c0023d04:	b9 0b 00 00 00       	mov    ecx,0xb
c0023d09:	56                   	push   esi
c0023d0a:	be 07 34 03 c0       	mov    esi,0xc0033407
c0023d0f:	53                   	push   ebx
c0023d10:	83 ec 30             	sub    esp,0x30
c0023d13:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023d17:	fc                   	cld    
c0023d18:	83 ec 0c             	sub    esp,0xc
c0023d1b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023d1d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023d26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023d29:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023d2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d31:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023d34:	57                   	push   edi
c0023d35:	e8 36 c8 fd ff       	call   c0000570 <strlen>
c0023d3a:	5a                   	pop    edx
c0023d3b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023d3f:	52                   	push   edx
c0023d40:	31 d2                	xor    edx,edx
c0023d42:	57                   	push   edi
c0023d43:	52                   	push   edx
c0023d44:	50                   	push   eax
c0023d45:	56                   	push   esi
c0023d46:	ff d3                	call   ebx
c0023d48:	83 c4 14             	add    esp,0x14
c0023d4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023d4f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023d52:	e8 b5 21 00 00       	call   c0025f0c <terminateTask(int)>
c0023d57:	83 c4 40             	add    esp,0x40
c0023d5a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023d5f:	5b                   	pop    ebx
c0023d60:	31 d2                	xor    edx,edx
c0023d62:	5e                   	pop    esi
c0023d63:	5f                   	pop    edi
c0023d64:	c3                   	ret    

c0023d65 <SysYield(regs*)>:
c0023d65:	83 ec 0c             	sub    esp,0xc
c0023d68:	fa                   	cli    
c0023d69:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023d6f:	e8 18 1a 00 00       	call   c002578c <schedule()>
c0023d74:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023d79:	48                   	dec    eax
c0023d7a:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023d7f:	75 01                	jne    c0023d82 <SysYield(regs*)+0x1d>
c0023d81:	fb                   	sti    
c0023d82:	31 c0                	xor    eax,eax
c0023d84:	31 d2                	xor    edx,edx
c0023d86:	83 c4 0c             	add    esp,0xc
c0023d89:	c3                   	ret    

c0023d8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023d8a:	55                   	push   ebp
c0023d8b:	57                   	push   edi
c0023d8c:	56                   	push   esi
c0023d8d:	53                   	push   ebx
c0023d8e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023d94:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023d9c:	0f 95 c0             	setne  al
c0023d9f:	31 d2                	xor    edx,edx
c0023da1:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023da9:	0f 94 c2             	sete   dl
c0023dac:	85 c2                	test   edx,eax
c0023dae:	74 34                	je     c0023de4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023db0:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023dbb:	74 27                	je     c0023de4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023dbd:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023dc4:	05 00 10 00 00       	add    eax,0x1000
c0023dc9:	89 c1                	mov    ecx,eax
c0023dcb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023dd0:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0023dd6:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023ddd:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0023de4:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023deb:	83 ec 0c             	sub    esp,0xc
c0023dee:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023df4:	6a 01                	push   0x1
c0023df6:	e8 12 43 ff ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c0023dfb:	83 c4 10             	add    esp,0x10
c0023dfe:	89 c3                	mov    ebx,eax
c0023e00:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023e06:	0f 86 25 01 00 00    	jbe    c0023f31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023e0c:	c1 ee 0c             	shr    esi,0xc
c0023e0f:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023e16:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023e1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023e22:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023e29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023e2d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023e34:	29 ef                	sub    edi,ebp
c0023e36:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023e3a:	0f 83 f8 00 00 00    	jae    c0023f38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023e40:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023e46:	76 05                	jbe    c0023e4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023e48:	bf 00 10 00 00       	mov    edi,0x1000
c0023e4d:	83 ec 0c             	sub    esp,0xc
c0023e50:	31 d2                	xor    edx,edx
c0023e52:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023e59:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023e5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023e5f:	50                   	push   eax
c0023e60:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023e64:	56                   	push   esi
c0023e65:	52                   	push   edx
c0023e66:	57                   	push   edi
c0023e67:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023e6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e71:	83 c4 20             	add    esp,0x20
c0023e74:	85 c0                	test   eax,eax
c0023e76:	75 06                	jne    c0023e7e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023e78:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023e7c:	74 13                	je     c0023e91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023e7e:	83 ec 0c             	sub    esp,0xc
c0023e81:	53                   	push   ebx
c0023e82:	e8 a4 45 ff ff       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c0023e87:	83 c4 10             	add    esp,0x10
c0023e8a:	31 c0                	xor    eax,eax
c0023e8c:	e9 7c 01 00 00       	jmp    c002400d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023e91:	fa                   	cli    
c0023e92:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023e98:	e8 23 2a ff ff       	call   c00168c0 <Phys::allocatePage()>
c0023e9d:	6a 07                	push   0x7
c0023e9f:	89 c7                	mov    edi,eax
c0023ea1:	53                   	push   ebx
c0023ea2:	50                   	push   eax
c0023ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ea8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023eab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023eb1:	e8 6a 49 ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023eb6:	83 c4 0c             	add    esp,0xc
c0023eb9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023ec0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ec6:	6a 00                	push   0x0
c0023ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ecd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ed0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ed6:	e8 ab 47 ff ff       	call   c0018686 <VAS::mapOtherVASIn(bool, VAS*)>
c0023edb:	58                   	pop    eax
c0023edc:	5a                   	pop    edx
c0023edd:	68 07 0c 00 00       	push   0xc07
c0023ee2:	55                   	push   ebp
c0023ee3:	57                   	push   edi
c0023ee4:	89 df                	mov    edi,ebx
c0023ee6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023eed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ef3:	6a 00                	push   0x0
c0023ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023efa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023efd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f03:	e8 6a 4b ff ff       	call   c0018a72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023f08:	b9 00 10 00 00       	mov    ecx,0x1000
c0023f0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023f0f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023f14:	83 c4 20             	add    esp,0x20
c0023f17:	48                   	dec    eax
c0023f18:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023f1d:	85 c0                	test   eax,eax
c0023f1f:	75 01                	jne    c0023f22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0023f21:	fb                   	sti    
c0023f22:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023f28:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023f2c:	e9 f1 fe ff ff       	jmp    c0023e22 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023f31:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023f38:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023f3f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023f45:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023f4b:	0f 86 ae 00 00 00    	jbe    c0023fff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023f51:	fa                   	cli    
c0023f52:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023f58:	c1 ee 0c             	shr    esi,0xc
c0023f5b:	51                   	push   ecx
c0023f5c:	31 ff                	xor    edi,edi
c0023f5e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023f65:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f6b:	6a 00                	push   0x0
c0023f6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023f72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023f75:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f7b:	e8 06 47 ff ff       	call   c0018686 <VAS::mapOtherVASIn(bool, VAS*)>
c0023f80:	83 c4 10             	add    esp,0x10
c0023f83:	e8 38 29 ff ff       	call   c00168c0 <Phys::allocatePage()>
c0023f88:	47                   	inc    edi
c0023f89:	6a 07                	push   0x7
c0023f8b:	53                   	push   ebx
c0023f8c:	50                   	push   eax
c0023f8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023f91:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023f97:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023f9a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023fa0:	e8 7b 48 ff ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023fa5:	58                   	pop    eax
c0023fa6:	5a                   	pop    edx
c0023fa7:	68 07 0c 00 00       	push   0xc07
c0023fac:	55                   	push   ebp
c0023fad:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023fb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fb7:	50                   	push   eax
c0023fb8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023fbf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023fc5:	6a 00                	push   0x0
c0023fc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023fcc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023fcf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023fd5:	e8 98 4a ff ff       	call   c0018a72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023fda:	83 c4 1c             	add    esp,0x1c
c0023fdd:	68 00 10 00 00       	push   0x1000
c0023fe2:	6a 00                	push   0x0
c0023fe4:	53                   	push   ebx
c0023fe5:	e8 06 c5 fd ff       	call   c00004f0 <memset>
c0023fea:	83 c4 10             	add    esp,0x10
c0023fed:	39 fe                	cmp    esi,edi
c0023fef:	77 92                	ja     c0023f83 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023ff1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023ff6:	48                   	dec    eax
c0023ff7:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023ffc:	75 01                	jne    c0023fff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023ffe:	fb                   	sti    
c0023fff:	83 ec 0c             	sub    esp,0xc
c0024002:	53                   	push   ebx
c0024003:	e8 23 44 ff ff       	call   c001842b <Virt::freeKernelVirtualPages(unsigned long)>
c0024008:	83 c4 10             	add    esp,0x10
c002400b:	b0 01                	mov    al,0x1
c002400d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0024013:	5b                   	pop    ebx
c0024014:	5e                   	pop    esi
c0024015:	5f                   	pop    edi
c0024016:	5d                   	pop    ebp
c0024017:	c3                   	ret    

c0024018 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0024018:	55                   	push   ebp
c0024019:	57                   	push   edi
c002401a:	56                   	push   esi
c002401b:	53                   	push   ebx
c002401c:	83 ec 48             	sub    esp,0x48
c002401f:	68 14 01 00 00       	push   0x114
c0024024:	e8 8e 25 ff ff       	call   c00165b7 <malloc>
c0024029:	83 c4 0c             	add    esp,0xc
c002402c:	89 c6                	mov    esi,eax
c002402e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0024032:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024036:	50                   	push   eax
c0024037:	e8 10 66 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c002403c:	58                   	pop    eax
c002403d:	5a                   	pop    edx
c002403e:	6a 01                	push   0x1
c0024040:	56                   	push   esi
c0024041:	e8 24 66 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0024046:	83 c4 10             	add    esp,0x10
c0024049:	85 c0                	test   eax,eax
c002404b:	0f 85 43 01 00 00    	jne    c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0024051:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0024059:	83 ec 0c             	sub    esp,0xc
c002405c:	6a 34                	push   0x34
c002405e:	e8 54 25 ff ff       	call   c00165b7 <malloc>
c0024063:	89 c3                	mov    ebx,eax
c0024065:	58                   	pop    eax
c0024066:	8b 06                	mov    eax,DWORD PTR [esi]
c0024068:	8d 7c 24 38          	lea    edi,[esp+0x38]
c002406c:	57                   	push   edi
c002406d:	53                   	push   ebx
c002406e:	6a 00                	push   0x0
c0024070:	6a 34                	push   0x34
c0024072:	56                   	push   esi
c0024073:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024076:	83 c4 20             	add    esp,0x20
c0024079:	85 c0                	test   eax,eax
c002407b:	0f 85 13 01 00 00    	jne    c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0024081:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0024087:	0f 85 07 01 00 00    	jne    c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c002408d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0024090:	85 c0                	test   eax,eax
c0024092:	0f 84 fc 00 00 00    	je     c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0024098:	31 d2                	xor    edx,edx
c002409a:	55                   	push   ebp
c002409b:	52                   	push   edx
c002409c:	50                   	push   eax
c002409d:	56                   	push   esi
c002409e:	e8 85 66 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00240a3:	83 c4 10             	add    esp,0x10
c00240a6:	85 c0                	test   eax,eax
c00240a8:	0f 85 e6 00 00 00    	jne    c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00240ae:	83 ec 0c             	sub    esp,0xc
c00240b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00240b4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00240b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00240bc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00240c0:	0f af c2             	imul   eax,edx
c00240c3:	50                   	push   eax
c00240c4:	e8 ee 24 ff ff       	call   c00165b7 <malloc>
c00240c9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00240cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00240cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00240d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00240d6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00240da:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00240de:	0f af c2             	imul   eax,edx
c00240e1:	99                   	cdq    
c00240e2:	52                   	push   edx
c00240e3:	50                   	push   eax
c00240e4:	56                   	push   esi
c00240e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240e8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00240eb:	83 c4 20             	add    esp,0x20
c00240ee:	85 c0                	test   eax,eax
c00240f0:	0f 84 9e 00 00 00    	je     c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00240f6:	31 d2                	xor    edx,edx
c00240f8:	51                   	push   ecx
c00240f9:	52                   	push   edx
c00240fa:	50                   	push   eax
c00240fb:	56                   	push   esi
c00240fc:	e8 27 66 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0024101:	83 c4 10             	add    esp,0x10
c0024104:	85 c0                	test   eax,eax
c0024106:	0f 85 88 00 00 00    	jne    c0024194 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c002410c:	83 ec 0c             	sub    esp,0xc
c002410f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0024113:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0024117:	31 ed                	xor    ebp,ebp
c0024119:	0f af c2             	imul   eax,edx
c002411c:	50                   	push   eax
c002411d:	e8 95 24 ff ff       	call   c00165b7 <malloc>
c0024122:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0024124:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024128:	89 3c 24             	mov    DWORD PTR [esp],edi
c002412b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002412f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0024133:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0024137:	0f af c2             	imul   eax,edx
c002413a:	99                   	cdq    
c002413b:	52                   	push   edx
c002413c:	50                   	push   eax
c002413d:	56                   	push   esi
c002413e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024141:	83 c4 20             	add    esp,0x20
c0024144:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002414c:	0f b7 fd             	movzx  edi,bp
c002414f:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0024153:	73 7d                	jae    c00241d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0024155:	c1 e7 05             	shl    edi,0x5
c0024158:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c002415c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c002415f:	75 6b                	jne    c00241cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0024161:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0024164:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024168:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c002416b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002416f:	52                   	push   edx
c0024170:	31 d2                	xor    edx,edx
c0024172:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0024175:	52                   	push   edx
c0024176:	50                   	push   eax
c0024177:	56                   	push   esi
c0024178:	e8 ab 65 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c002417d:	83 c4 10             	add    esp,0x10
c0024180:	85 c0                	test   eax,eax
c0024182:	74 17                	je     c002419b <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0024184:	83 ec 0c             	sub    esp,0xc
c0024187:	68 33 34 03 c0       	push   0xc0033433
c002418c:	e8 b4 52 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024191:	83 c4 10             	add    esp,0x10
c0024194:	31 c0                	xor    eax,eax
c0024196:	e9 87 00 00 00       	jmp    c0024222 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c002419b:	83 ec 0c             	sub    esp,0xc
c002419e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00241a1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00241a4:	50                   	push   eax
c00241a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00241a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241ad:	56                   	push   esi
c00241ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00241b2:	e8 d3 fb ff ff       	call   c0023d8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00241b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00241bb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00241bf:	83 c4 20             	add    esp,0x20
c00241c2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00241c6:	73 04                	jae    c00241cc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00241c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00241cc:	45                   	inc    ebp
c00241cd:	e9 7a ff ff ff       	jmp    c002414c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00241d2:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00241d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241de:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00241e4:	83 ec 0c             	sub    esp,0xc
c00241e7:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00241ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00241f2:	05 00 10 00 00       	add    eax,0x1000
c00241f7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00241fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241fe:	e8 c4 23 ff ff       	call   c00165c7 <free>
c0024203:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024206:	e8 bc 23 ff ff       	call   c00165c7 <free>
c002420b:	58                   	pop    eax
c002420c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024210:	e8 b2 23 ff ff       	call   c00165c7 <free>
c0024215:	89 34 24             	mov    DWORD PTR [esp],esi
c0024218:	e8 ab 64 ff ff       	call   c001a6c8 <File::close()>
c002421d:	83 c4 10             	add    esp,0x10
c0024220:	b0 01                	mov    al,0x1
c0024222:	83 c4 3c             	add    esp,0x3c
c0024225:	5b                   	pop    ebx
c0024226:	5e                   	pop    esi
c0024227:	5f                   	pop    edi
c0024228:	5d                   	pop    ebp
c0024229:	c3                   	ret    

c002422a <Thr::runtimeReferenceHelper()>:
c002422a:	83 ec 18             	sub    esp,0x18
c002422d:	68 3b 34 03 c0       	push   0xc003343b
c0024232:	e8 0e 52 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024237:	fa                   	cli    
c0024238:	83 c4 10             	add    esp,0x10
c002423b:	eb fe                	jmp    c002423b <Thr::runtimeReferenceHelper()+0x11>

c002423d <Thr::getAddressOfKernelSymbol(char const*)>:
c002423d:	57                   	push   edi
c002423e:	56                   	push   esi
c002423f:	53                   	push   ebx
c0024240:	31 db                	xor    ebx,ebx
c0024242:	39 1d a0 11 04 c0    	cmp    DWORD PTR ds:0xc00411a0,ebx
c0024248:	7e 3c                	jle    c0024286 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c002424a:	8b 34 9d 20 11 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbeee0]
c0024251:	31 ff                	xor    edi,edi
c0024253:	39 3c 9d 20 10 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbefe0],edi
c002425a:	7e 27                	jle    c0024283 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c002425c:	50                   	push   eax
c002425d:	50                   	push   eax
c002425e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024262:	8b 06                	mov    eax,DWORD PTR [esi]
c0024264:	03 04 9d a0 10 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbef60]
c002426b:	50                   	push   eax
c002426c:	e8 df c4 fd ff       	call   c0000750 <strcmp>
c0024271:	83 c4 10             	add    esp,0x10
c0024274:	85 c0                	test   eax,eax
c0024276:	75 05                	jne    c002427d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0024278:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c002427b:	eb 0b                	jmp    c0024288 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c002427d:	83 c6 10             	add    esi,0x10
c0024280:	47                   	inc    edi
c0024281:	eb d0                	jmp    c0024253 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0024283:	43                   	inc    ebx
c0024284:	eb bc                	jmp    c0024242 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0024286:	31 c0                	xor    eax,eax
c0024288:	5b                   	pop    ebx
c0024289:	5e                   	pop    esi
c002428a:	5f                   	pop    edi
c002428b:	c3                   	ret    

c002428c <Thr::loadKernelSymbolTable(char const*)>:
c002428c:	55                   	push   ebp
c002428d:	57                   	push   edi
c002428e:	56                   	push   esi
c002428f:	53                   	push   ebx
c0024290:	83 ec 68             	sub    esp,0x68
c0024293:	8b 35 f8 11 04 c0    	mov    esi,DWORD PTR ds:0xc00411f8
c0024299:	68 14 01 00 00       	push   0x114
c002429e:	e8 14 23 ff ff       	call   c00165b7 <malloc>
c00242a3:	83 c4 0c             	add    esp,0xc
c00242a6:	89 c3                	mov    ebx,eax
c00242a8:	56                   	push   esi
c00242a9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00242ad:	50                   	push   eax
c00242ae:	e8 99 63 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c00242b3:	5e                   	pop    esi
c00242b4:	5f                   	pop    edi
c00242b5:	6a 01                	push   0x1
c00242b7:	53                   	push   ebx
c00242b8:	e8 ad 63 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c00242bd:	83 c4 10             	add    esp,0x10
c00242c0:	85 c0                	test   eax,eax
c00242c2:	74 0a                	je     c00242ce <Thr::loadKernelSymbolTable(char const*)+0x42>
c00242c4:	83 ec 0c             	sub    esp,0xc
c00242c7:	68 5d 34 03 c0       	push   0xc003345d
c00242cc:	eb 34                	jmp    c0024302 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00242ce:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00242d6:	83 ec 0c             	sub    esp,0xc
c00242d9:	6a 34                	push   0x34
c00242db:	e8 d7 22 ff ff       	call   c00165b7 <malloc>
c00242e0:	59                   	pop    ecx
c00242e1:	89 c7                	mov    edi,eax
c00242e3:	8d 74 24 34          	lea    esi,[esp+0x34]
c00242e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00242e9:	56                   	push   esi
c00242ea:	57                   	push   edi
c00242eb:	6a 00                	push   0x0
c00242ed:	6a 34                	push   0x34
c00242ef:	53                   	push   ebx
c00242f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242f3:	83 c4 20             	add    esp,0x20
c00242f6:	85 c0                	test   eax,eax
c00242f8:	74 17                	je     c0024311 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00242fa:	83 ec 0c             	sub    esp,0xc
c00242fd:	68 74 34 03 c0       	push   0xc0033474
c0024302:	e8 77 c4 ff ff       	call   c002077e <KePanic(char const*)>
c0024307:	83 c4 10             	add    esp,0x10
c002430a:	31 c0                	xor    eax,eax
c002430c:	e9 31 02 00 00       	jmp    c0024542 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0024311:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0024317:	75 e1                	jne    c00242fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024319:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c002431c:	85 c0                	test   eax,eax
c002431e:	74 da                	je     c00242fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024320:	52                   	push   edx
c0024321:	31 d2                	xor    edx,edx
c0024323:	52                   	push   edx
c0024324:	50                   	push   eax
c0024325:	53                   	push   ebx
c0024326:	e8 fd 63 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c002432b:	83 c4 10             	add    esp,0x10
c002432e:	85 c0                	test   eax,eax
c0024330:	75 c8                	jne    c00242fa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024332:	83 ec 0c             	sub    esp,0xc
c0024335:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024339:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002433d:	31 ed                	xor    ebp,ebp
c002433f:	0f af c2             	imul   eax,edx
c0024342:	50                   	push   eax
c0024343:	e8 6f 22 ff ff       	call   c00165b7 <malloc>
c0024348:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002434a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002434e:	89 34 24             	mov    DWORD PTR [esp],esi
c0024351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024355:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024359:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002435d:	0f af c2             	imul   eax,edx
c0024360:	99                   	cdq    
c0024361:	52                   	push   edx
c0024362:	50                   	push   eax
c0024363:	53                   	push   ebx
c0024364:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024367:	83 c4 20             	add    esp,0x20
c002436a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024372:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002437a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024382:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002438a:	0f b7 f5             	movzx  esi,bp
c002438d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0024391:	0f 83 a7 00 00 00    	jae    c002443e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0024397:	6b f6 28             	imul   esi,esi,0x28
c002439a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002439e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00243a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243a5:	50                   	push   eax
c00243a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00243aa:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00243ae:	8b 16                	mov    edx,DWORD PTR [esi]
c00243b0:	6b c0 28             	imul   eax,eax,0x28
c00243b3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00243b7:	89 d0                	mov    eax,edx
c00243b9:	31 d2                	xor    edx,edx
c00243bb:	52                   	push   edx
c00243bc:	50                   	push   eax
c00243bd:	53                   	push   ebx
c00243be:	e8 65 63 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00243c3:	83 c4 0c             	add    esp,0xc
c00243c6:	6a 20                	push   0x20
c00243c8:	6a 00                	push   0x0
c00243ca:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00243ce:	52                   	push   edx
c00243cf:	e8 1c c1 fd ff       	call   c00004f0 <memset>
c00243d4:	58                   	pop    eax
c00243d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00243d7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00243db:	51                   	push   ecx
c00243dc:	8d 54 24 40          	lea    edx,[esp+0x40]
c00243e0:	52                   	push   edx
c00243e1:	6a 00                	push   0x0
c00243e3:	6a 1f                	push   0x1f
c00243e5:	53                   	push   ebx
c00243e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00243e9:	83 c4 18             	add    esp,0x18
c00243ec:	68 8b 34 03 c0       	push   0xc003348b
c00243f1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00243f5:	52                   	push   edx
c00243f6:	e8 55 c3 fd ff       	call   c0000750 <strcmp>
c00243fb:	83 c4 10             	add    esp,0x10
c00243fe:	85 c0                	test   eax,eax
c0024400:	75 0f                	jne    c0024411 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0024402:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024405:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024409:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002440d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024411:	50                   	push   eax
c0024412:	50                   	push   eax
c0024413:	68 93 34 03 c0       	push   0xc0033493
c0024418:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002441c:	50                   	push   eax
c002441d:	e8 2e c3 fd ff       	call   c0000750 <strcmp>
c0024422:	83 c4 10             	add    esp,0x10
c0024425:	85 c0                	test   eax,eax
c0024427:	75 0f                	jne    c0024438 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0024429:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002442c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024430:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024434:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024438:	45                   	inc    ebp
c0024439:	e9 4c ff ff ff       	jmp    c002438a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c002443e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024443:	75 10                	jne    c0024455 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0024445:	83 ec 0c             	sub    esp,0xc
c0024448:	68 9b 34 03 c0       	push   0xc003349b
c002444d:	e8 2c c3 ff ff       	call   c002077e <KePanic(char const*)>
c0024452:	83 c4 10             	add    esp,0x10
c0024455:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c002445a:	75 10                	jne    c002446c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c002445c:	83 ec 0c             	sub    esp,0xc
c002445f:	68 9b 34 03 c0       	push   0xc003349b
c0024464:	e8 15 c3 ff ff       	call   c002077e <KePanic(char const*)>
c0024469:	83 c4 10             	add    esp,0x10
c002446c:	31 d2                	xor    edx,edx
c002446e:	50                   	push   eax
c002446f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024473:	52                   	push   edx
c0024474:	50                   	push   eax
c0024475:	53                   	push   ebx
c0024476:	e8 ad 62 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c002447b:	5a                   	pop    edx
c002447c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024480:	e8 32 21 ff ff       	call   c00165b7 <malloc>
c0024485:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024489:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002448d:	31 c9                	xor    ecx,ecx
c002448f:	5e                   	pop    esi
c0024490:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024492:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0024496:	55                   	push   ebp
c0024497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002449b:	51                   	push   ecx
c002449c:	52                   	push   edx
c002449d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00244a1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00244a5:	53                   	push   ebx
c00244a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00244a9:	83 c4 14             	add    esp,0x14
c00244ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00244b0:	e8 02 21 ff ff       	call   c00165b7 <malloc>
c00244b5:	89 c6                	mov    esi,eax
c00244b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00244b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00244bc:	56                   	push   esi
c00244bd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00244c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00244c5:	51                   	push   ecx
c00244c6:	52                   	push   edx
c00244c7:	53                   	push   ebx
c00244c8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00244cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244cf:	8b 15 a0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411a0
c00244d5:	83 c4 1c             	add    esp,0x1c
c00244d8:	c1 e8 04             	shr    eax,0x4
c00244db:	89 04 95 20 10 04 c0 	mov    DWORD PTR [edx*4-0x3ffbefe0],eax
c00244e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244e6:	31 d2                	xor    edx,edx
c00244e8:	52                   	push   edx
c00244e9:	50                   	push   eax
c00244ea:	53                   	push   ebx
c00244eb:	e8 38 62 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00244f0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00244f2:	31 d2                	xor    edx,edx
c00244f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00244f7:	56                   	push   esi
c00244f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244fc:	52                   	push   edx
c00244fd:	50                   	push   eax
c00244fe:	53                   	push   ebx
c00244ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024502:	83 c4 14             	add    esp,0x14
c0024505:	53                   	push   ebx
c0024506:	e8 bd 61 ff ff       	call   c001a6c8 <File::close()>
c002450b:	5d                   	pop    ebp
c002450c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024510:	e8 b2 20 ff ff       	call   c00165c7 <free>
c0024515:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024518:	e8 aa 20 ff ff       	call   c00165c7 <free>
c002451d:	a1 a0 11 04 c0       	mov    eax,ds:0xc00411a0
c0024522:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024526:	8d 50 01             	lea    edx,[eax+0x1]
c0024529:	89 0c 85 20 11 04 c0 	mov    DWORD PTR [eax*4-0x3ffbeee0],ecx
c0024530:	89 34 85 a0 10 04 c0 	mov    DWORD PTR [eax*4-0x3ffbef60],esi
c0024537:	89 15 a0 11 04 c0    	mov    DWORD PTR ds:0xc00411a0,edx
c002453d:	83 c4 10             	add    esp,0x10
c0024540:	b0 01                	mov    al,0x1
c0024542:	83 c4 5c             	add    esp,0x5c
c0024545:	5b                   	pop    ebx
c0024546:	5e                   	pop    esi
c0024547:	5f                   	pop    edi
c0024548:	5d                   	pop    ebp
c0024549:	c3                   	ret    

c002454a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c002454a:	55                   	push   ebp
c002454b:	57                   	push   edi
c002454c:	56                   	push   esi
c002454d:	53                   	push   ebx
c002454e:	81 ec 68 03 00 00    	sub    esp,0x368
c0024554:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c002455b:	8b 1d f8 11 04 c0    	mov    ebx,DWORD PTR ds:0xc00411f8
c0024561:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0024565:	68 14 01 00 00       	push   0x114
c002456a:	e8 48 20 ff ff       	call   c00165b7 <malloc>
c002456f:	83 c4 0c             	add    esp,0xc
c0024572:	89 c5                	mov    ebp,eax
c0024574:	53                   	push   ebx
c0024575:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c002457c:	50                   	push   eax
c002457d:	e8 ca 60 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0024582:	5e                   	pop    esi
c0024583:	5f                   	pop    edi
c0024584:	6a 01                	push   0x1
c0024586:	55                   	push   ebp
c0024587:	e8 de 60 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c002458c:	83 c4 10             	add    esp,0x10
c002458f:	85 c0                	test   eax,eax
c0024591:	0f 85 aa 06 00 00    	jne    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024597:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002459f:	83 ec 0c             	sub    esp,0xc
c00245a2:	6a 34                	push   0x34
c00245a4:	e8 0e 20 ff ff       	call   c00165b7 <malloc>
c00245a9:	5b                   	pop    ebx
c00245aa:	89 c7                	mov    edi,eax
c00245ac:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00245b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00245b3:	53                   	push   ebx
c00245b4:	57                   	push   edi
c00245b5:	6a 00                	push   0x0
c00245b7:	6a 34                	push   0x34
c00245b9:	55                   	push   ebp
c00245ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00245bd:	83 c4 20             	add    esp,0x20
c00245c0:	85 c0                	test   eax,eax
c00245c2:	0f 85 79 06 00 00    	jne    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245c8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00245ce:	0f 85 6d 06 00 00    	jne    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245d4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00245d7:	85 c0                	test   eax,eax
c00245d9:	0f 84 62 06 00 00    	je     c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245df:	31 d2                	xor    edx,edx
c00245e1:	51                   	push   ecx
c00245e2:	52                   	push   edx
c00245e3:	50                   	push   eax
c00245e4:	55                   	push   ebp
c00245e5:	e8 3e 61 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00245ea:	83 c4 10             	add    esp,0x10
c00245ed:	85 c0                	test   eax,eax
c00245ef:	0f 85 4c 06 00 00    	jne    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00245f5:	83 ec 0c             	sub    esp,0xc
c00245f8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00245fb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00245ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024603:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024607:	0f af c2             	imul   eax,edx
c002460a:	50                   	push   eax
c002460b:	e8 a7 1f ff ff       	call   c00165b7 <malloc>
c0024610:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024613:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002461a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002461e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024622:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024626:	0f af c2             	imul   eax,edx
c0024629:	99                   	cdq    
c002462a:	52                   	push   edx
c002462b:	50                   	push   eax
c002462c:	55                   	push   ebp
c002462d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024630:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0024633:	83 c4 20             	add    esp,0x20
c0024636:	85 c0                	test   eax,eax
c0024638:	0f 84 03 06 00 00    	je     c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002463e:	52                   	push   edx
c002463f:	31 d2                	xor    edx,edx
c0024641:	52                   	push   edx
c0024642:	50                   	push   eax
c0024643:	55                   	push   ebp
c0024644:	e8 df 60 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0024649:	83 c4 10             	add    esp,0x10
c002464c:	85 c0                	test   eax,eax
c002464e:	0f 85 ed 05 00 00    	jne    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024654:	83 ec 0c             	sub    esp,0xc
c0024657:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002465b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002465f:	31 f6                	xor    esi,esi
c0024661:	0f af c2             	imul   eax,edx
c0024664:	50                   	push   eax
c0024665:	e8 4d 1f ff ff       	call   c00165b7 <malloc>
c002466a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002466d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024671:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024678:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c002467c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024680:	0f af c2             	imul   eax,edx
c0024683:	99                   	cdq    
c0024684:	52                   	push   edx
c0024685:	50                   	push   eax
c0024686:	55                   	push   ebp
c0024687:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002468a:	83 c4 20             	add    esp,0x20
c002468d:	0f b7 de             	movzx  ebx,si
c0024690:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0024694:	0f 83 87 00 00 00    	jae    c0024721 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c002469a:	c1 e3 05             	shl    ebx,0x5
c002469d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00246a1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00246a4:	75 75                	jne    c002471b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00246a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00246a9:	31 d2                	xor    edx,edx
c00246ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00246af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00246b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00246b6:	50                   	push   eax
c00246b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00246ba:	52                   	push   edx
c00246bb:	50                   	push   eax
c00246bc:	55                   	push   ebp
c00246bd:	e8 66 60 ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00246c2:	83 c4 10             	add    esp,0x10
c00246c5:	85 c0                	test   eax,eax
c00246c7:	0f 85 74 05 00 00    	jne    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00246cd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00246d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00246d7:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00246db:	31 d2                	xor    edx,edx
c00246dd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00246e1:	83 ec 0c             	sub    esp,0xc
c00246e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00246e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00246ef:	50                   	push   eax
c00246f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00246f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246f8:	52                   	push   edx
c00246f9:	50                   	push   eax
c00246fa:	55                   	push   ebp
c00246fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00246fe:	83 c4 1c             	add    esp,0x1c
c0024701:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0024704:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0024707:	50                   	push   eax
c0024708:	6a 00                	push   0x0
c002470a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002470e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0024712:	50                   	push   eax
c0024713:	e8 d8 bd fd ff       	call   c00004f0 <memset>
c0024718:	83 c4 10             	add    esp,0x10
c002471b:	46                   	inc    esi
c002471c:	e9 6c ff ff ff       	jmp    c002468d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0024721:	53                   	push   ebx
c0024722:	31 db                	xor    ebx,ebx
c0024724:	68 00 01 00 00       	push   0x100
c0024729:	6a 00                	push   0x0
c002472b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002472f:	50                   	push   eax
c0024730:	e8 bb bd fd ff       	call   c00004f0 <memset>
c0024735:	83 c4 0c             	add    esp,0xc
c0024738:	68 00 01 00 00       	push   0x100
c002473d:	6a 00                	push   0x0
c002473f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024746:	50                   	push   eax
c0024747:	e8 a4 bd fd ff       	call   c00004f0 <memset>
c002474c:	83 c4 10             	add    esp,0x10
c002474f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024757:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002475f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024767:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002476f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0024777:	0f b7 f3             	movzx  esi,bx
c002477a:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c002477e:	0f 83 2d 01 00 00    	jae    c00248b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0024784:	6b f6 28             	imul   esi,esi,0x28
c0024787:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002478b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002478e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024792:	52                   	push   edx
c0024793:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024797:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c002479b:	8b 06                	mov    eax,DWORD PTR [esi]
c002479d:	6b d2 28             	imul   edx,edx,0x28
c00247a0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00247a4:	31 d2                	xor    edx,edx
c00247a6:	52                   	push   edx
c00247a7:	50                   	push   eax
c00247a8:	55                   	push   ebp
c00247a9:	e8 7a 5f ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00247ae:	83 c4 0c             	add    esp,0xc
c00247b1:	6a 20                	push   0x20
c00247b3:	6a 00                	push   0x0
c00247b5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247bc:	51                   	push   ecx
c00247bd:	e8 2e bd fd ff       	call   c00004f0 <memset>
c00247c2:	59                   	pop    ecx
c00247c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247c6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00247ca:	52                   	push   edx
c00247cb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00247d2:	51                   	push   ecx
c00247d3:	6a 00                	push   0x0
c00247d5:	6a 1f                	push   0x1f
c00247d7:	55                   	push   ebp
c00247d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00247db:	83 c4 1c             	add    esp,0x1c
c00247de:	6a 09                	push   0x9
c00247e0:	68 b5 34 03 c0       	push   0xc00334b5
c00247e5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00247ec:	51                   	push   ecx
c00247ed:	e8 8e bb fd ff       	call   c0000380 <memcmp>
c00247f2:	83 c4 10             	add    esp,0x10
c00247f5:	85 c0                	test   eax,eax
c00247f7:	75 21                	jne    c002481a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00247f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00247fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024801:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0024805:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024809:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002480c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024813:	89 d0                	mov    eax,edx
c0024815:	40                   	inc    eax
c0024816:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002481a:	50                   	push   eax
c002481b:	6a 09                	push   0x9
c002481d:	68 bf 34 03 c0       	push   0xc00334bf
c0024822:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024829:	50                   	push   eax
c002482a:	e8 51 bb fd ff       	call   c0000380 <memcmp>
c002482f:	83 c4 10             	add    esp,0x10
c0024832:	85 c0                	test   eax,eax
c0024834:	75 21                	jne    c0024857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002483a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002483e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024842:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024846:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024849:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024850:	89 d0                	mov    eax,edx
c0024852:	40                   	inc    eax
c0024853:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024857:	50                   	push   eax
c0024858:	50                   	push   eax
c0024859:	68 8b 34 03 c0       	push   0xc003348b
c002485e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024865:	50                   	push   eax
c0024866:	e8 e5 be fd ff       	call   c0000750 <strcmp>
c002486b:	83 c4 10             	add    esp,0x10
c002486e:	85 c0                	test   eax,eax
c0024870:	75 0f                	jne    c0024881 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024872:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024875:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002487d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024881:	50                   	push   eax
c0024882:	50                   	push   eax
c0024883:	68 93 34 03 c0       	push   0xc0033493
c0024888:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002488f:	50                   	push   eax
c0024890:	e8 bb be fd ff       	call   c0000750 <strcmp>
c0024895:	83 c4 10             	add    esp,0x10
c0024898:	85 c0                	test   eax,eax
c002489a:	75 0f                	jne    c00248ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c002489c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002489f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00248a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00248ab:	43                   	inc    ebx
c00248ac:	e9 c6 fe ff ff       	jmp    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00248b1:	31 d2                	xor    edx,edx
c00248b3:	50                   	push   eax
c00248b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00248b8:	52                   	push   edx
c00248b9:	50                   	push   eax
c00248ba:	55                   	push   ebp
c00248bb:	e8 68 5e ff ff       	call   c001a728 <File::seek(unsigned long long)>
c00248c0:	58                   	pop    eax
c00248c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00248c5:	e8 ed 1c ff ff       	call   c00165b7 <malloc>
c00248ca:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00248cd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00248d1:	31 d2                	xor    edx,edx
c00248d3:	58                   	pop    eax
c00248d4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00248d8:	53                   	push   ebx
c00248d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00248dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00248e1:	52                   	push   edx
c00248e2:	50                   	push   eax
c00248e3:	55                   	push   ebp
c00248e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00248e7:	83 c4 14             	add    esp,0x14
c00248ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00248ee:	e8 c4 1c ff ff       	call   c00165b7 <malloc>
c00248f3:	31 d2                	xor    edx,edx
c00248f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00248f9:	83 c4 0c             	add    esp,0xc
c00248fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024900:	52                   	push   edx
c0024901:	50                   	push   eax
c0024902:	55                   	push   ebp
c0024903:	e8 20 5e ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0024908:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002490b:	31 d2                	xor    edx,edx
c002490d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024910:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024914:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024918:	52                   	push   edx
c0024919:	50                   	push   eax
c002491a:	55                   	push   ebp
c002491b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002491e:	83 c4 20             	add    esp,0x20
c0024921:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0024926:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002492e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024932:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024936:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c002493a:	0f 84 05 03 00 00    	je     c0024c45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0024940:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0024947:	31 d2                	xor    edx,edx
c0024949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002494d:	c1 e8 03             	shr    eax,0x3
c0024950:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0024954:	51                   	push   ecx
c0024955:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024959:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002495d:	52                   	push   edx
c002495e:	50                   	push   eax
c002495f:	55                   	push   ebp
c0024960:	e8 c3 5d ff ff       	call   c001a728 <File::seek(unsigned long long)>
c0024965:	5b                   	pop    ebx
c0024966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002496a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024971:	e8 41 1c ff ff       	call   c00165b7 <malloc>
c0024976:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024979:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002497d:	31 d2                	xor    edx,edx
c002497f:	5e                   	pop    esi
c0024980:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024984:	50                   	push   eax
c0024985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024989:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002498d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0024994:	52                   	push   edx
c0024995:	50                   	push   eax
c0024996:	55                   	push   ebp
c0024997:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002499a:	83 c4 20             	add    esp,0x20
c002499d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00249a5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00249a9:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00249ad:	0f 8d 76 02 00 00    	jge    c0024c29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00249b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00249b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00249bb:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00249c0:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00249c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00249c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00249cb:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00249cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00249d3:	c1 e8 08             	shr    eax,0x8
c00249d6:	89 c6                	mov    esi,eax
c00249d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00249dc:	c1 e6 04             	shl    esi,0x4
c00249df:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00249e3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00249e6:	85 db                	test   ebx,ebx
c00249e8:	0f 85 b3 00 00 00    	jne    c0024aa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00249ee:	83 ec 0c             	sub    esp,0xc
c00249f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00249f5:	03 06                	add    eax,DWORD PTR [esi]
c00249f7:	50                   	push   eax
c00249f8:	e8 40 f8 ff ff       	call   c002423d <Thr::getAddressOfKernelSymbol(char const*)>
c00249fd:	83 c4 10             	add    esp,0x10
c0024a00:	89 c3                	mov    ebx,eax
c0024a02:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0024a07:	85 c0                	test   eax,eax
c0024a09:	0f 85 92 00 00 00    	jne    c0024aa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024a0f:	83 ec 0c             	sub    esp,0xc
c0024a12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024a16:	03 06                	add    eax,DWORD PTR [esi]
c0024a18:	50                   	push   eax
c0024a19:	e8 4e bf ff ff       	call   c002096c <KeResolveCompatibilitySymbol(char*)>
c0024a1e:	83 c4 10             	add    esp,0x10
c0024a21:	89 c3                	mov    ebx,eax
c0024a23:	85 c0                	test   eax,eax
c0024a25:	75 7a                	jne    c0024aa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024a27:	51                   	push   ecx
c0024a28:	51                   	push   ecx
c0024a29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a2d:	03 06                	add    eax,DWORD PTR [esi]
c0024a2f:	50                   	push   eax
c0024a30:	68 c9 34 03 c0       	push   0xc00334c9
c0024a35:	e8 0b 4a ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024a3a:	58                   	pop    eax
c0024a3b:	5a                   	pop    edx
c0024a3c:	68 e3 34 03 c0       	push   0xc00334e3
c0024a41:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a48:	50                   	push   eax
c0024a49:	e8 f2 bb fd ff       	call   c0000640 <strcpy>
c0024a4e:	59                   	pop    ecx
c0024a4f:	58                   	pop    eax
c0024a50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a54:	03 06                	add    eax,DWORD PTR [esi]
c0024a56:	50                   	push   eax
c0024a57:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a5e:	50                   	push   eax
c0024a5f:	e8 dc bd fd ff       	call   c0000840 <strcat>
c0024a64:	58                   	pop    eax
c0024a65:	5a                   	pop    edx
c0024a66:	68 7d 35 03 c0       	push   0xc003357d
c0024a6b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a72:	50                   	push   eax
c0024a73:	e8 c8 bd fd ff       	call   c0000840 <strcat>
c0024a78:	83 c4 10             	add    esp,0x10
c0024a7b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024a80:	0f 84 5d 01 00 00    	je     c0024be3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024a86:	83 ec 0c             	sub    esp,0xc
c0024a89:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024a90:	50                   	push   eax
c0024a91:	e8 e8 bc ff ff       	call   c002077e <KePanic(char const*)>
c0024a96:	83 c4 10             	add    esp,0x10
c0024a99:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024a9d:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024aa1:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0024aa6:	83 f8 01             	cmp    eax,0x1
c0024aa9:	0f 85 8f 00 00 00    	jne    c0024b3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0024aaf:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0024ab6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024aba:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024abe:	01 ce                	add    esi,ecx
c0024ac0:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024ac8:	0f 94 c0             	sete   al
c0024acb:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024ad3:	0f 94 c2             	sete   dl
c0024ad6:	09 c2                	or     edx,eax
c0024ad8:	8b 06                	mov    eax,DWORD PTR [esi]
c0024ada:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024adf:	0f b6 d2             	movzx  edx,dl
c0024ae2:	74 41                	je     c0024b25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0024ae4:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0024ae7:	85 d2                	test   edx,edx
c0024ae9:	75 15                	jne    c0024b00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0024aeb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024aef:	66 83 f8 0c          	cmp    ax,0xc
c0024af3:	76 05                	jbe    c0024afa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0024af5:	b8 0c 00 00 00       	mov    eax,0xc
c0024afa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024afe:	76 37                	jbe    c0024b37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b00:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0024b04:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024b09:	0f 84 d4 00 00 00    	je     c0024be3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024b0f:	83 ec 0c             	sub    esp,0xc
c0024b12:	68 fa 34 03 c0       	push   0xc00334fa
c0024b17:	e8 62 bc ff ff       	call   c002077e <KePanic(char const*)>
c0024b1c:	83 c4 10             	add    esp,0x10
c0024b1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024b23:	eb 12                	jmp    c0024b37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b25:	01 c1                	add    ecx,eax
c0024b27:	85 d2                	test   edx,edx
c0024b29:	75 0c                	jne    c0024b37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024b2f:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024b33:	77 02                	ja     c0024b37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024b35:	01 d9                	add    ecx,ebx
c0024b37:	89 0e                	mov    DWORD PTR [esi],ecx
c0024b39:	e9 e2 00 00 00       	jmp    c0024c20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024b3e:	83 f8 02             	cmp    eax,0x2
c0024b41:	75 77                	jne    c0024bba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0024b43:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0024b4a:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024b4e:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024b52:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024b5a:	74 21                	je     c0024b7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024b5c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0024b64:	74 17                	je     c0024b7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024b66:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0024b6a:	b8 0a 00 00 00       	mov    eax,0xa
c0024b6f:	83 fa 0e             	cmp    edx,0xe
c0024b72:	77 03                	ja     c0024b77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0024b74:	8d 42 fc             	lea    eax,[edx-0x4]
c0024b77:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024b7b:	76 17                	jbe    c0024b94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024b7d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024b82:	74 5f                	je     c0024be3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024b84:	83 ec 0c             	sub    esp,0xc
c0024b87:	68 16 35 03 c0       	push   0xc0033516
c0024b8c:	e8 ed bb ff ff       	call   c002077e <KePanic(char const*)>
c0024b91:	83 c4 10             	add    esp,0x10
c0024b94:	8b 06                	mov    eax,DWORD PTR [esi]
c0024b96:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024b9b:	74 13                	je     c0024bb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024b9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024ba1:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0024ba8:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0024bac:	01 d0                	add    eax,edx
c0024bae:	eb 04                	jmp    c0024bb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0024bb0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0024bb4:	01 c3                	add    ebx,eax
c0024bb6:	89 1e                	mov    DWORD PTR [esi],ebx
c0024bb8:	eb 66                	jmp    c0024c20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024bba:	52                   	push   edx
c0024bbb:	52                   	push   edx
c0024bbc:	50                   	push   eax
c0024bbd:	68 32 35 03 c0       	push   0xc0033532
c0024bc2:	e8 7e 48 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024bc7:	83 c4 10             	add    esp,0x10
c0024bca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024bcf:	74 12                	je     c0024be3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024bd1:	83 ec 0c             	sub    esp,0xc
c0024bd4:	68 3d 35 03 c0       	push   0xc003353d
c0024bd9:	e8 a0 bb ff ff       	call   c002077e <KePanic(char const*)>
c0024bde:	83 c4 10             	add    esp,0x10
c0024be1:	eb 3d                	jmp    c0024c20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024be3:	83 ec 0c             	sub    esp,0xc
c0024be6:	55                   	push   ebp
c0024be7:	e8 dc 5a ff ff       	call   c001a6c8 <File::close()>
c0024bec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024bef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024bf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024bf5:	59                   	pop    ecx
c0024bf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024bfa:	e8 c8 19 ff ff       	call   c00165c7 <free>
c0024bff:	5b                   	pop    ebx
c0024c00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c04:	e8 be 19 ff ff       	call   c00165c7 <free>
c0024c09:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024c0c:	e8 b6 19 ff ff       	call   c00165c7 <free>
c0024c11:	5e                   	pop    esi
c0024c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c16:	e8 ac 19 ff ff       	call   c00165c7 <free>
c0024c1b:	83 c4 10             	add    esp,0x10
c0024c1e:	eb 21                	jmp    c0024c41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024c20:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0024c24:	e9 7c fd ff ff       	jmp    c00249a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0024c29:	83 ec 0c             	sub    esp,0xc
c0024c2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024c30:	e8 92 19 ff ff       	call   c00165c7 <free>
c0024c35:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024c39:	83 c4 10             	add    esp,0x10
c0024c3c:	e9 f1 fc ff ff       	jmp    c0024932 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024c41:	31 c0                	xor    eax,eax
c0024c43:	eb 33                	jmp    c0024c78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024c45:	83 ec 0c             	sub    esp,0xc
c0024c48:	55                   	push   ebp
c0024c49:	e8 7a 5a ff ff       	call   c001a6c8 <File::close()>
c0024c4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024c51:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024c54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c57:	58                   	pop    eax
c0024c58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c5c:	e8 66 19 ff ff       	call   c00165c7 <free>
c0024c61:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024c64:	e8 5e 19 ff ff       	call   c00165c7 <free>
c0024c69:	5a                   	pop    edx
c0024c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c6e:	e8 54 19 ff ff       	call   c00165c7 <free>
c0024c73:	83 c4 10             	add    esp,0x10
c0024c76:	b0 01                	mov    al,0x1
c0024c78:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024c7e:	5b                   	pop    ebx
c0024c7f:	5e                   	pop    esi
c0024c80:	5f                   	pop    edi
c0024c81:	5d                   	pop    ebp
c0024c82:	c3                   	ret    

c0024c83 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024c83:	56                   	push   esi
c0024c84:	31 d2                	xor    edx,edx
c0024c86:	53                   	push   ebx
c0024c87:	8b 1d 00 0a 04 c0    	mov    ebx,DWORD PTR ds:0xc0040a00
c0024c8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024c91:	39 d3                	cmp    ebx,edx
c0024c93:	7e 1b                	jle    c0024cb0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024c95:	8b 04 95 20 0c 04 c0 	mov    eax,DWORD PTR [edx*4-0x3ffbf3e0]
c0024c9c:	39 c8                	cmp    eax,ecx
c0024c9e:	77 0d                	ja     c0024cad <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024ca0:	8b 34 95 20 0a 04 c0 	mov    esi,DWORD PTR [edx*4-0x3ffbf5e0]
c0024ca7:	01 c6                	add    esi,eax
c0024ca9:	39 ce                	cmp    esi,ecx
c0024cab:	77 05                	ja     c0024cb2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024cad:	42                   	inc    edx
c0024cae:	eb e1                	jmp    c0024c91 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024cb0:	31 c0                	xor    eax,eax
c0024cb2:	5b                   	pop    ebx
c0024cb3:	5e                   	pop    esi
c0024cb4:	c3                   	ret    

c0024cb5 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024cb5:	53                   	push   ebx
c0024cb6:	31 c0                	xor    eax,eax
c0024cb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024cbc:	8b 1d 00 0a 04 c0    	mov    ebx,DWORD PTR ds:0xc0040a00
c0024cc2:	39 c3                	cmp    ebx,eax
c0024cc4:	7e 22                	jle    c0024ce8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024cc6:	8b 14 85 20 0c 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf3e0]
c0024ccd:	39 ca                	cmp    edx,ecx
c0024ccf:	77 14                	ja     c0024ce5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024cd1:	03 14 85 20 0a 04 c0 	add    edx,DWORD PTR [eax*4-0x3ffbf5e0]
c0024cd8:	39 ca                	cmp    edx,ecx
c0024cda:	76 09                	jbe    c0024ce5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024cdc:	8b 04 85 20 0e 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf1e0]
c0024ce3:	eb 05                	jmp    c0024cea <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024ce5:	40                   	inc    eax
c0024ce6:	eb da                	jmp    c0024cc2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024ce8:	31 c0                	xor    eax,eax
c0024cea:	5b                   	pop    ebx
c0024ceb:	c3                   	ret    

c0024cec <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024cec:	53                   	push   ebx
c0024ced:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024cf1:	53                   	push   ebx
c0024cf2:	e8 8c ff ff ff       	call   c0024c83 <Thr::getDriverBaseFromAddress(unsigned long)>
c0024cf7:	5a                   	pop    edx
c0024cf8:	31 d2                	xor    edx,edx
c0024cfa:	85 c0                	test   eax,eax
c0024cfc:	74 04                	je     c0024d02 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024cfe:	89 da                	mov    edx,ebx
c0024d00:	29 c2                	sub    edx,eax
c0024d02:	89 d0                	mov    eax,edx
c0024d04:	5b                   	pop    ebx
c0024d05:	c3                   	ret    

c0024d06 <Thr::loadDLL(char const*, bool)>:
c0024d06:	55                   	push   ebp
c0024d07:	57                   	push   edi
c0024d08:	56                   	push   esi
c0024d09:	53                   	push   ebx
c0024d0a:	81 ec 34 01 00 00    	sub    esp,0x134
c0024d10:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024d17:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024d1e:	56                   	push   esi
c0024d1f:	68 55 35 03 c0       	push   0xc0033555
c0024d24:	e8 1c 47 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024d29:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024d30:	e8 82 18 ff ff       	call   c00165b7 <malloc>
c0024d35:	83 c4 0c             	add    esp,0xc
c0024d38:	89 c3                	mov    ebx,eax
c0024d3a:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0024d40:	56                   	push   esi
c0024d41:	50                   	push   eax
c0024d42:	e8 05 59 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0024d47:	83 c4 10             	add    esp,0x10
c0024d4a:	85 db                	test   ebx,ebx
c0024d4c:	75 3c                	jne    c0024d8a <Thr::loadDLL(char const*, bool)+0x84>
c0024d4e:	89 f8                	mov    eax,edi
c0024d50:	84 c0                	test   al,al
c0024d52:	0f 84 f3 01 00 00    	je     c0024f4b <Thr::loadDLL(char const*, bool)+0x245>
c0024d58:	55                   	push   ebp
c0024d59:	55                   	push   ebp
c0024d5a:	68 66 35 03 c0       	push   0xc0033566
c0024d5f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024d63:	55                   	push   ebp
c0024d64:	e8 d7 b8 fd ff       	call   c0000640 <strcpy>
c0024d69:	58                   	pop    eax
c0024d6a:	5a                   	pop    edx
c0024d6b:	56                   	push   esi
c0024d6c:	55                   	push   ebp
c0024d6d:	e8 ce ba fd ff       	call   c0000840 <strcat>
c0024d72:	59                   	pop    ecx
c0024d73:	58                   	pop    eax
c0024d74:	68 7d 35 03 c0       	push   0xc003357d
c0024d79:	55                   	push   ebp
c0024d7a:	e8 c1 ba fd ff       	call   c0000840 <strcat>
c0024d7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024d82:	e8 f7 b9 ff ff       	call   c002077e <KePanic(char const*)>
c0024d87:	83 c4 10             	add    esp,0x10
c0024d8a:	51                   	push   ecx
c0024d8b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024d8f:	50                   	push   eax
c0024d90:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024d94:	50                   	push   eax
c0024d95:	53                   	push   ebx
c0024d96:	e8 d1 5b ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c0024d9b:	83 c4 10             	add    esp,0x10
c0024d9e:	89 c5                	mov    ebp,eax
c0024da0:	85 db                	test   ebx,ebx
c0024da2:	74 0c                	je     c0024db0 <Thr::loadDLL(char const*, bool)+0xaa>
c0024da4:	83 ec 0c             	sub    esp,0xc
c0024da7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024da9:	53                   	push   ebx
c0024daa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024dad:	83 c4 10             	add    esp,0x10
c0024db0:	83 ec 0c             	sub    esp,0xc
c0024db3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024db8:	50                   	push   eax
c0024db9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dc1:	55                   	push   ebp
c0024dc2:	68 7f 35 03 c0       	push   0xc003357f
c0024dc7:	e8 79 46 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024dcc:	83 c4 20             	add    esp,0x20
c0024dcf:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024dd4:	75 0a                	jne    c0024de0 <Thr::loadDLL(char const*, bool)+0xda>
c0024dd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024dda:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024dde:	75 3c                	jne    c0024e1c <Thr::loadDLL(char const*, bool)+0x116>
c0024de0:	89 f8                	mov    eax,edi
c0024de2:	84 c0                	test   al,al
c0024de4:	0f 84 49 01 00 00    	je     c0024f33 <Thr::loadDLL(char const*, bool)+0x22d>
c0024dea:	51                   	push   ecx
c0024deb:	51                   	push   ecx
c0024dec:	68 a0 35 03 c0       	push   0xc00335a0
c0024df1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024df5:	53                   	push   ebx
c0024df6:	e8 45 b8 fd ff       	call   c0000640 <strcpy>
c0024dfb:	5d                   	pop    ebp
c0024dfc:	58                   	pop    eax
c0024dfd:	56                   	push   esi
c0024dfe:	53                   	push   ebx
c0024dff:	e8 3c ba fd ff       	call   c0000840 <strcat>
c0024e04:	58                   	pop    eax
c0024e05:	5a                   	pop    edx
c0024e06:	68 7d 35 03 c0       	push   0xc003357d
c0024e0b:	53                   	push   ebx
c0024e0c:	e8 2f ba fd ff       	call   c0000840 <strcat>
c0024e11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e14:	e8 65 b9 ff ff       	call   c002077e <KePanic(char const*)>
c0024e19:	83 c4 10             	add    esp,0x10
c0024e1c:	52                   	push   edx
c0024e1d:	6a 03                	push   0x3
c0024e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024e27:	05 ff 0f 00 00       	add    eax,0xfff
c0024e2c:	83 d2 00             	adc    edx,0x0
c0024e2f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024e33:	50                   	push   eax
c0024e34:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0024e3a:	e8 e5 3a ff ff       	call   c0018924 <VAS::allocatePages(int, int)>
c0024e3f:	59                   	pop    ecx
c0024e40:	89 c3                	mov    ebx,eax
c0024e42:	5d                   	pop    ebp
c0024e43:	50                   	push   eax
c0024e44:	68 96 18 03 c0       	push   0xc0031896
c0024e49:	e8 f7 45 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024e4e:	89 34 24             	mov    DWORD PTR [esp],esi
c0024e51:	e8 1a b7 fd ff       	call   c0000570 <strlen>
c0024e56:	8b 2d 00 0a 04 c0    	mov    ebp,DWORD PTR ds:0xc0040a00
c0024e5c:	40                   	inc    eax
c0024e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0024e60:	e8 52 17 ff ff       	call   c00165b7 <malloc>
c0024e65:	89 04 ad 20 0e 04 c0 	mov    DWORD PTR [ebp*4-0x3ffbf1e0],eax
c0024e6c:	58                   	pop    eax
c0024e6d:	a1 00 0a 04 c0       	mov    eax,ds:0xc0040a00
c0024e72:	5a                   	pop    edx
c0024e73:	56                   	push   esi
c0024e74:	ff 34 85 20 0e 04 c0 	push   DWORD PTR [eax*4-0x3ffbf1e0]
c0024e7b:	e8 c0 b7 fd ff       	call   c0000640 <strcpy>
c0024e80:	a1 00 0a 04 c0       	mov    eax,ds:0xc0040a00
c0024e85:	8d 50 01             	lea    edx,[eax+0x1]
c0024e88:	89 1c 85 20 0c 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf3e0],ebx
c0024e8f:	89 15 00 0a 04 c0    	mov    DWORD PTR ds:0xc0040a00,edx
c0024e95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024e99:	83 c4 0c             	add    esp,0xc
c0024e9c:	89 14 85 20 0a 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf5e0],edx
c0024ea3:	6a 01                	push   0x1
c0024ea5:	53                   	push   ebx
c0024ea6:	56                   	push   esi
c0024ea7:	e8 9e f6 ff ff       	call   c002454a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024eac:	83 c4 10             	add    esp,0x10
c0024eaf:	0f b6 c0             	movzx  eax,al
c0024eb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024eb6:	85 c0                	test   eax,eax
c0024eb8:	0f 85 89 00 00 00    	jne    c0024f47 <Thr::loadDLL(char const*, bool)+0x241>
c0024ebe:	89 f8                	mov    eax,edi
c0024ec0:	84 c0                	test   al,al
c0024ec2:	74 73                	je     c0024f37 <Thr::loadDLL(char const*, bool)+0x231>
c0024ec4:	83 ec 0c             	sub    esp,0xc
c0024ec7:	68 b9 35 03 c0       	push   0xc00335b9
c0024ecc:	e8 ad b8 ff ff       	call   c002077e <KePanic(char const*)>
c0024ed1:	83 c4 10             	add    esp,0x10
c0024ed4:	eb 61                	jmp    c0024f37 <Thr::loadDLL(char const*, bool)+0x231>
c0024ed6:	50                   	push   eax
c0024ed7:	50                   	push   eax
c0024ed8:	89 e8                	mov    eax,ebp
c0024eda:	c1 e0 0c             	shl    eax,0xc
c0024edd:	01 d8                	add    eax,ebx
c0024edf:	50                   	push   eax
c0024ee0:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0024ee6:	e8 21 35 ff ff       	call   c001840c <VAS::getPageTableEntry(unsigned long)>
c0024eeb:	83 c4 10             	add    esp,0x10
c0024eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ef0:	a8 60                	test   al,0x60
c0024ef2:	75 11                	jne    c0024f05 <Thr::loadDLL(char const*, bool)+0x1ff>
c0024ef4:	83 ec 0c             	sub    esp,0xc
c0024ef7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024efc:	50                   	push   eax
c0024efd:	e8 55 19 ff ff       	call   c0016857 <Phys::freePage(unsigned long)>
c0024f02:	83 c4 10             	add    esp,0x10
c0024f05:	45                   	inc    ebp
c0024f06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024f0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024f0e:	05 ff 0f 00 00       	add    eax,0xfff
c0024f13:	bf 00 00 00 00       	mov    edi,0x0
c0024f18:	83 d2 00             	adc    edx,0x0
c0024f1b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024f1f:	c1 ea 0c             	shr    edx,0xc
c0024f22:	39 c5                	cmp    ebp,eax
c0024f24:	89 d1                	mov    ecx,edx
c0024f26:	89 f8                	mov    eax,edi
c0024f28:	19 c8                	sbb    eax,ecx
c0024f2a:	72 aa                	jb     c0024ed6 <Thr::loadDLL(char const*, bool)+0x1d0>
c0024f2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024f31:	75 18                	jne    c0024f4b <Thr::loadDLL(char const*, bool)+0x245>
c0024f33:	31 db                	xor    ebx,ebx
c0024f35:	eb 14                	jmp    c0024f4b <Thr::loadDLL(char const*, bool)+0x245>
c0024f37:	83 ec 0c             	sub    esp,0xc
c0024f3a:	68 d8 35 03 c0       	push   0xc00335d8
c0024f3f:	e8 3a b8 ff ff       	call   c002077e <KePanic(char const*)>
c0024f44:	83 c4 10             	add    esp,0x10
c0024f47:	31 ed                	xor    ebp,ebp
c0024f49:	eb bb                	jmp    c0024f06 <Thr::loadDLL(char const*, bool)+0x200>
c0024f4b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024f51:	89 d8                	mov    eax,ebx
c0024f53:	5b                   	pop    ebx
c0024f54:	5e                   	pop    esi
c0024f55:	5f                   	pop    edi
c0024f56:	5d                   	pop    ebp
c0024f57:	c3                   	ret    

c0024f58 <Thr::executeDLL(unsigned long, void*)>:
c0024f58:	56                   	push   esi
c0024f59:	53                   	push   ebx
c0024f5a:	52                   	push   edx
c0024f5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024f63:	85 db                	test   ebx,ebx
c0024f65:	75 10                	jne    c0024f77 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024f67:	83 ec 0c             	sub    esp,0xc
c0024f6a:	68 f4 35 03 c0       	push   0xc00335f4
c0024f6f:	e8 0a b8 ff ff       	call   c002077e <KePanic(char const*)>
c0024f74:	83 c4 10             	add    esp,0x10
c0024f77:	50                   	push   eax
c0024f78:	50                   	push   eax
c0024f79:	53                   	push   ebx
c0024f7a:	68 1e 36 03 c0       	push   0xc003361e
c0024f7f:	e8 c1 44 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0024f84:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024f88:	89 d8                	mov    eax,ebx
c0024f8a:	83 c4 14             	add    esp,0x14
c0024f8d:	5b                   	pop    ebx
c0024f8e:	5e                   	pop    esi
c0024f8f:	ff e0                	jmp    eax
c0024f91:	66 90                	xchg   ax,ax
c0024f93:	90                   	nop

c0024f94 <userModeEntryPoint(void*)>:
c0024f94:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0024f99:	83 e8 01             	sub    eax,0x1
c0024f9c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0024fa1:	75 01                	jne    c0024fa4 <userModeEntryPoint(void*)+0x10>
c0024fa3:	fb                   	sti    
c0024fa4:	fb                   	sti    
c0024fa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024faa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024fad:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024fb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fb7:	e9 83 b2 fd ff       	jmp    c000023f <goToUsermode>

c0024fbc <changeTSS>:
c0024fbc:	83 ec 14             	sub    esp,0x14
c0024fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024fc4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024fc7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024fcc:	c1 e2 15             	shl    edx,0x15
c0024fcf:	29 d0                	sub    eax,edx
c0024fd1:	50                   	push   eax
c0024fd2:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0024fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fdd:	05 7c 11 00 00       	add    eax,0x117c
c0024fe2:	50                   	push   eax
c0024fe3:	e8 6c 2a ff ff       	call   c0017a54 <TSS::setESP(unsigned long)>
c0024fe8:	83 c4 1c             	add    esp,0x1c
c0024feb:	c3                   	ret    

c0024fec <switchToThread(ThreadControlBlock*)>:
c0024fec:	57                   	push   edi
c0024fed:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0024ff3:	56                   	push   esi
c0024ff4:	85 c9                	test   ecx,ecx
c0024ff6:	53                   	push   ebx
c0024ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ffb:	0f 85 8b 00 00 00    	jne    c002508c <switchToThread(ThreadControlBlock*)+0xa0>
c0025001:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0025005:	81 fa ff 00 00 00    	cmp    edx,0xff
c002500b:	74 7b                	je     c0025088 <switchToThread(ThreadControlBlock*)+0x9c>
c002500d:	b8 00 04 00 00       	mov    eax,0x400
c0025012:	29 d0                	sub    eax,edx
c0025014:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0025017:	d1 f8                	sar    eax,1
c0025019:	01 d0                	add    eax,edx
c002501b:	90                   	nop
c002501c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c002501f:	e8 4f 26 00 00       	call   c0027673 <HalQueryPerformanceCounter()>
c0025024:	a3 10 12 04 c0       	mov    ds:0xc0041210,eax
c0025029:	89 15 14 12 04 c0    	mov    DWORD PTR ds:0xc0041214,edx
c002502f:	89 c6                	mov    esi,eax
c0025031:	89 d7                	mov    edi,edx
c0025033:	2b 35 00 12 04 c0    	sub    esi,DWORD PTR ds:0xc0041200
c0025039:	a3 00 12 04 c0       	mov    ds:0xc0041200,eax
c002503e:	1b 3d 04 12 04 c0    	sbb    edi,DWORD PTR ds:0xc0041204
c0025044:	89 35 08 12 04 c0    	mov    DWORD PTR ds:0xc0041208,esi
c002504a:	89 3d 0c 12 04 c0    	mov    DWORD PTR ds:0xc004120c,edi
c0025050:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025056:	89 15 04 12 04 c0    	mov    DWORD PTR ds:0xc0041204,edx
c002505c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c002505f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0025062:	01 c6                	add    esi,eax
c0025064:	11 d7                	adc    edi,edx
c0025066:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0025069:	83 ec 0c             	sub    esp,0xc
c002506c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c002506f:	53                   	push   ebx
c0025070:	e8 02 b2 fd ff       	call   c0000277 <switchToThreadASM>
c0025075:	0f 20 c0             	mov    eax,cr0
c0025078:	83 c8 08             	or     eax,0x8
c002507b:	0f 22 c0             	mov    cr0,eax
c002507e:	83 c4 10             	add    esp,0x10
c0025081:	5b                   	pop    ebx
c0025082:	5e                   	pop    esi
c0025083:	5f                   	pop    edi
c0025084:	c3                   	ret    
c0025085:	8d 76 00             	lea    esi,[esi+0x0]
c0025088:	31 c0                	xor    eax,eax
c002508a:	eb 90                	jmp    c002501c <switchToThread(ThreadControlBlock*)+0x30>
c002508c:	5b                   	pop    ebx
c002508d:	c7 05 c8 11 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x1
c0025097:	5e                   	pop    esi
c0025098:	5f                   	pop    edi
c0025099:	c3                   	ret    
c002509a:	66 90                	xchg   ax,ax

c002509c <Process::addArgs(char**)>:
c002509c:	57                   	push   edi
c002509d:	56                   	push   esi
c002509e:	53                   	push   ebx
c002509f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00250a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00250a7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00250b1:	85 ff                	test   edi,edi
c00250b3:	74 4f                	je     c0025104 <Process::addArgs(char**)+0x68>
c00250b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00250b7:	85 c0                	test   eax,eax
c00250b9:	74 49                	je     c0025104 <Process::addArgs(char**)+0x68>
c00250bb:	31 db                	xor    ebx,ebx
c00250bd:	8d 76 00             	lea    esi,[esi+0x0]
c00250c0:	83 ec 0c             	sub    esp,0xc
c00250c3:	50                   	push   eax
c00250c4:	e8 a7 b4 fd ff       	call   c0000570 <strlen>
c00250c9:	83 c0 01             	add    eax,0x1
c00250cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00250cf:	e8 e3 14 ff ff       	call   c00165b7 <malloc>
c00250d4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00250db:	5a                   	pop    edx
c00250dc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00250df:	59                   	pop    ecx
c00250e0:	83 c3 01             	add    ebx,0x1
c00250e3:	52                   	push   edx
c00250e4:	50                   	push   eax
c00250e5:	e8 56 b5 fd ff       	call   c0000640 <strcpy>
c00250ea:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00250f0:	83 c4 10             	add    esp,0x10
c00250f3:	83 c1 01             	add    ecx,0x1
c00250f6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00250fc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00250ff:	85 c0                	test   eax,eax
c0025101:	75 bd                	jne    c00250c0 <Process::addArgs(char**)+0x24>
c0025103:	90                   	nop
c0025104:	5b                   	pop    ebx
c0025105:	5e                   	pop    esi
c0025106:	5f                   	pop    edi
c0025107:	c3                   	ret    

c0025108 <Process::Process(char const*, Process*, char**)>:
c0025108:	56                   	push   esi
c0025109:	53                   	push   ebx
c002510a:	83 ec 14             	sub    esp,0x14
c002510d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025111:	05 0c 02 00 00       	add    eax,0x20c
c0025116:	bb 07 00 00 00       	mov    ebx,0x7
c002511b:	89 c6                	mov    esi,eax
c002511d:	8d 76 00             	lea    esi,[esi+0x0]
c0025120:	85 db                	test   ebx,ebx
c0025122:	78 14                	js     c0025138 <Process::Process(char const*, Process*, char**)+0x30>
c0025124:	83 ec 0c             	sub    esp,0xc
c0025127:	56                   	push   esi
c0025128:	e8 bb a4 00 00       	call   c002f5e8 <ThreadControlBlock::ThreadControlBlock()>
c002512d:	83 c4 10             	add    esp,0x10
c0025130:	83 c6 5f             	add    esi,0x5f
c0025133:	83 eb 01             	sub    ebx,0x1
c0025136:	eb e8                	jmp    c0025120 <Process::Process(char const*, Process*, char**)+0x18>
c0025138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002513c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025147:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002514e:	83 ec 0c             	sub    esp,0xc
c0025151:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025155:	e8 1a b2 ff ff       	call   c0020374 <KeNewProcessEnv(Process*)>
c002515a:	83 c4 10             	add    esp,0x10
c002515d:	89 c2                	mov    edx,eax
c002515f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025163:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0025169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002516d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0025176:	a1 c0 4c 03 c0       	mov    eax,ds:0xc0034cc0
c002517b:	8d 50 01             	lea    edx,[eax+0x1]
c002517e:	89 15 c0 4c 03 c0    	mov    DWORD PTR ds:0xc0034cc0,edx
c0025184:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025188:	89 02                	mov    DWORD PTR [edx],eax
c002518a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0025192:	83 ec 0c             	sub    esp,0xc
c0025195:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025199:	e8 19 14 ff ff       	call   c00165b7 <malloc>
c002519e:	83 c4 10             	add    esp,0x10
c00251a1:	89 c3                	mov    ebx,eax
c00251a3:	83 ec 08             	sub    esp,0x8
c00251a6:	6a 00                	push   0x0
c00251a8:	53                   	push   ebx
c00251a9:	e8 ba 39 ff ff       	call   c0018b68 <VAS::VAS(bool)>
c00251ae:	83 c4 10             	add    esp,0x10
c00251b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251b5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00251bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251bf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00251c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00251d1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00251d7:	e8 d3 bd ff ff       	call   c0020faf <KeInitSignals()>
c00251dc:	89 c2                	mov    edx,eax
c00251de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251e2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00251e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251ec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251f2:	85 c0                	test   eax,eax
c00251f4:	74 42                	je     c0025238 <Process::Process(char const*, Process*, char**)+0x130>
c00251f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251fa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025200:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002520a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0025210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025214:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002521a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025224:	05 0c 01 00 00       	add    eax,0x10c
c0025229:	83 ec 08             	sub    esp,0x8
c002522c:	52                   	push   edx
c002522d:	50                   	push   eax
c002522e:	e8 0d b4 fd ff       	call   c0000640 <strcpy>
c0025233:	83 c4 10             	add    esp,0x10
c0025236:	eb 64                	jmp    c002529c <Process::Process(char const*, Process*, char**)+0x194>
c0025238:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0025240:	83 ec 0c             	sub    esp,0xc
c0025243:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025247:	e8 6b 13 ff ff       	call   c00165b7 <malloc>
c002524c:	83 c4 10             	add    esp,0x10
c002524f:	89 c3                	mov    ebx,eax
c0025251:	83 ec 08             	sub    esp,0x8
c0025254:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025258:	53                   	push   ebx
c0025259:	e8 08 25 ff ff       	call   c0017766 <VgaText::VgaText(char const*)>
c002525e:	83 c4 10             	add    esp,0x10
c0025261:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025265:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c002526b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002526f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025275:	83 ec 0c             	sub    esp,0xc
c0025278:	50                   	push   eax
c0025279:	e8 86 1d ff ff       	call   c0017004 <addToTerminalCycle(VgaText*)>
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025285:	05 0c 01 00 00       	add    eax,0x10c
c002528a:	83 ec 08             	sub    esp,0x8
c002528d:	68 3d 36 03 c0       	push   0xc003363d
c0025292:	50                   	push   eax
c0025293:	e8 a8 b3 fd ff       	call   c0000640 <strcpy>
c0025298:	83 c4 10             	add    esp,0x10
c002529b:	90                   	nop
c002529c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252a0:	83 c0 0c             	add    eax,0xc
c00252a3:	83 ec 08             	sub    esp,0x8
c00252a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252aa:	50                   	push   eax
c00252ab:	e8 90 b3 fd ff       	call   c0000640 <strcpy>
c00252b0:	83 c4 10             	add    esp,0x10
c00252b3:	83 ec 08             	sub    esp,0x8
c00252b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00252ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252be:	e8 d9 fd ff ff       	call   c002509c <Process::addArgs(char**)>
c00252c3:	83 c4 10             	add    esp,0x10
c00252c6:	83 ec 08             	sub    esp,0x8
c00252c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252d1:	e8 42 ed ff ff       	call   c0024018 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00252d6:	83 c4 10             	add    esp,0x10
c00252d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00252e1:	83 f0 01             	xor    eax,0x1
c00252e4:	88 c2                	mov    dl,al
c00252e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252ea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00252f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00252f5:	83 ec 04             	sub    esp,0x4
c00252f8:	50                   	push   eax
c00252f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252fd:	68 94 36 03 c0       	push   0xc0033694
c0025302:	e8 3e 41 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0025307:	83 c4 10             	add    esp,0x10
c002530a:	90                   	nop
c002530b:	83 c4 14             	add    esp,0x14
c002530e:	5b                   	pop    ebx
c002530f:	5e                   	pop    esi
c0025310:	c3                   	ret    
c0025311:	90                   	nop
c0025312:	66 90                	xchg   ax,ax

c0025314 <Process::Process(bool, char const*, Process*, char**)>:
c0025314:	56                   	push   esi
c0025315:	53                   	push   ebx
c0025316:	83 ec 24             	sub    esp,0x24
c0025319:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002531d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0025321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025325:	05 0c 02 00 00       	add    eax,0x20c
c002532a:	bb 07 00 00 00       	mov    ebx,0x7
c002532f:	89 c6                	mov    esi,eax
c0025331:	8d 76 00             	lea    esi,[esi+0x0]
c0025334:	85 db                	test   ebx,ebx
c0025336:	78 14                	js     c002534c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0025338:	83 ec 0c             	sub    esp,0xc
c002533b:	56                   	push   esi
c002533c:	e8 a7 a2 00 00       	call   c002f5e8 <ThreadControlBlock::ThreadControlBlock()>
c0025341:	83 c4 10             	add    esp,0x10
c0025344:	83 c6 5f             	add    esi,0x5f
c0025347:	83 eb 01             	sub    ebx,0x1
c002534a:	eb e8                	jmp    c0025334 <Process::Process(bool, char const*, Process*, char**)+0x20>
c002534c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025350:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002535b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0025362:	83 ec 0c             	sub    esp,0xc
c0025365:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025369:	e8 06 b0 ff ff       	call   c0020374 <KeNewProcessEnv(Process*)>
c002536e:	83 c4 10             	add    esp,0x10
c0025371:	89 c2                	mov    edx,eax
c0025373:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025377:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c002537d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025381:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c002538a:	a1 c0 4c 03 c0       	mov    eax,ds:0xc0034cc0
c002538f:	8d 50 01             	lea    edx,[eax+0x1]
c0025392:	89 15 c0 4c 03 c0    	mov    DWORD PTR ds:0xc0034cc0,edx
c0025398:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002539c:	89 02                	mov    DWORD PTR [edx],eax
c002539e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00253a6:	83 ec 0c             	sub    esp,0xc
c00253a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00253ad:	e8 05 12 ff ff       	call   c00165b7 <malloc>
c00253b2:	83 c4 10             	add    esp,0x10
c00253b5:	89 c3                	mov    ebx,eax
c00253b7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00253bc:	83 ec 08             	sub    esp,0x8
c00253bf:	50                   	push   eax
c00253c0:	53                   	push   ebx
c00253c1:	e8 a2 37 ff ff       	call   c0018b68 <VAS::VAS(bool)>
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253cd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00253d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253d7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00253e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253e5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253e9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00253ef:	e8 bb bb ff ff       	call   c0020faf <KeInitSignals()>
c00253f4:	89 c2                	mov    edx,eax
c00253f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253fa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0025400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025404:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002540a:	85 c0                	test   eax,eax
c002540c:	74 42                	je     c0025450 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c002540e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025412:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025418:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c002541e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025422:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0025428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002542c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025432:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025438:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002543c:	05 0c 01 00 00       	add    eax,0x10c
c0025441:	83 ec 08             	sub    esp,0x8
c0025444:	52                   	push   edx
c0025445:	50                   	push   eax
c0025446:	e8 f5 b1 fd ff       	call   c0000640 <strcpy>
c002544b:	83 c4 10             	add    esp,0x10
c002544e:	eb 64                	jmp    c00254b4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0025450:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0025458:	83 ec 0c             	sub    esp,0xc
c002545b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002545f:	e8 53 11 ff ff       	call   c00165b7 <malloc>
c0025464:	83 c4 10             	add    esp,0x10
c0025467:	89 c3                	mov    ebx,eax
c0025469:	83 ec 08             	sub    esp,0x8
c002546c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025470:	53                   	push   ebx
c0025471:	e8 f0 22 ff ff       	call   c0017766 <VgaText::VgaText(char const*)>
c0025476:	83 c4 10             	add    esp,0x10
c0025479:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002547d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0025483:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025487:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002548d:	83 ec 0c             	sub    esp,0xc
c0025490:	50                   	push   eax
c0025491:	e8 6e 1b ff ff       	call   c0017004 <addToTerminalCycle(VgaText*)>
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002549d:	05 0c 01 00 00       	add    eax,0x10c
c00254a2:	83 ec 08             	sub    esp,0x8
c00254a5:	68 3d 36 03 c0       	push   0xc003363d
c00254aa:	50                   	push   eax
c00254ab:	e8 90 b1 fd ff       	call   c0000640 <strcpy>
c00254b0:	83 c4 10             	add    esp,0x10
c00254b3:	90                   	nop
c00254b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00254b8:	83 c0 0c             	add    eax,0xc
c00254bb:	83 ec 08             	sub    esp,0x8
c00254be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00254c2:	50                   	push   eax
c00254c3:	e8 78 b1 fd ff       	call   c0000640 <strcpy>
c00254c8:	83 c4 10             	add    esp,0x10
c00254cb:	83 ec 08             	sub    esp,0x8
c00254ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00254d6:	e8 c1 fb ff ff       	call   c002509c <Process::addArgs(char**)>
c00254db:	83 c4 10             	add    esp,0x10
c00254de:	90                   	nop
c00254df:	83 c4 24             	add    esp,0x24
c00254e2:	5b                   	pop    ebx
c00254e3:	5e                   	pop    esi
c00254e4:	c3                   	ret    
c00254e5:	8d 76 00             	lea    esi,[esi+0x0]

c00254e8 <taskStartupFunction>:
c00254e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00254ed:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00254f0:	c3                   	ret    
c00254f1:	8d 76 00             	lea    esi,[esi+0x0]

c00254f4 <KeDisablePreemption()>:
c00254f4:	a1 ac 11 04 c0       	mov    eax,ds:0xc00411ac
c00254f9:	85 c0                	test   eax,eax
c00254fb:	75 13                	jne    c0025510 <KeDisablePreemption()+0x1c>
c00254fd:	8a 15 c0 b9 03 c0    	mov    dl,BYTE PTR ds:0xc003b9c0
c0025503:	c6 05 c0 b9 03 c0 00 	mov    BYTE PTR ds:0xc003b9c0,0x0
c002550a:	88 15 a8 11 04 c0    	mov    BYTE PTR ds:0xc00411a8,dl
c0025510:	83 c0 01             	add    eax,0x1
c0025513:	a3 ac 11 04 c0       	mov    ds:0xc00411ac,eax
c0025518:	c3                   	ret    
c0025519:	8d 76 00             	lea    esi,[esi+0x0]

c002551c <KeRestorePreemption()>:
c002551c:	a1 ac 11 04 c0       	mov    eax,ds:0xc00411ac
c0025521:	83 e8 01             	sub    eax,0x1
c0025524:	a3 ac 11 04 c0       	mov    ds:0xc00411ac,eax
c0025529:	75 0d                	jne    c0025538 <KeRestorePreemption()+0x1c>
c002552b:	a0 a8 11 04 c0       	mov    al,ds:0xc00411a8
c0025530:	a2 c0 b9 03 c0       	mov    ds:0xc003b9c0,al
c0025535:	8d 76 00             	lea    esi,[esi+0x0]
c0025538:	c3                   	ret    
c0025539:	90                   	nop
c002553a:	66 90                	xchg   ax,ax

c002553c <Process::createThread(void (*)(void*), void*, int)>:
c002553c:	57                   	push   edi
c002553d:	31 c9                	xor    ecx,ecx
c002553f:	56                   	push   esi
c0025540:	53                   	push   ebx
c0025541:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025545:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c002554c:	89 f2                	mov    edx,esi
c002554e:	66 90                	xchg   ax,ax
c0025550:	0f b7 c2             	movzx  eax,dx
c0025553:	80 e2 01             	and    dl,0x1
c0025556:	74 14                	je     c002556c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025558:	d1 f8                	sar    eax,1
c002555a:	83 c1 01             	add    ecx,0x1
c002555d:	89 c2                	mov    edx,eax
c002555f:	83 f9 10             	cmp    ecx,0x10
c0025562:	75 ec                	jne    c0025550 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025564:	31 db                	xor    ebx,ebx
c0025566:	89 d8                	mov    eax,ebx
c0025568:	5b                   	pop    ebx
c0025569:	5e                   	pop    esi
c002556a:	5f                   	pop    edi
c002556b:	c3                   	ret    
c002556c:	b8 01 00 00 00       	mov    eax,0x1
c0025571:	d3 e0                	shl    eax,cl
c0025573:	09 c6                	or     esi,eax
c0025575:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0025578:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002557f:	01 c0                	add    eax,eax
c0025581:	01 c8                	add    eax,ecx
c0025583:	8d 04 80             	lea    eax,[eax+eax*4]
c0025586:	01 d8                	add    eax,ebx
c0025588:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002558f:	75 0b                	jne    c002559c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0025591:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c002559b:	90                   	nop
c002559c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00255a2:	83 ec 0c             	sub    esp,0xc
c00255a5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00255a8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00255ab:	01 c0                	add    eax,eax
c00255ad:	01 c8                	add    eax,ecx
c00255af:	8d 3c 80             	lea    edi,[eax+eax*4]
c00255b2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00255b5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00255bb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00255c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00255c5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00255cb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00255d1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00255d7:	89 ca                	mov    edx,ecx
c00255d9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00255e0:	f7 da                	neg    edx
c00255e2:	c1 e2 15             	shl    edx,0x15
c00255e5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00255eb:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00255f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00255f5:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00255ff:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025605:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025609:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c002560f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0025619:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025623:	68 00 01 00 00       	push   0x100
c0025628:	e8 8a 0f ff ff       	call   c00165b7 <malloc>
c002562d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025630:	58                   	pop    eax
c0025631:	5a                   	pop    edx
c0025632:	53                   	push   ebx
c0025633:	68 ec 11 04 c0       	push   0xc00411ec
c0025638:	e8 43 9d 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002563d:	83 c4 10             	add    esp,0x10
c0025640:	89 d8                	mov    eax,ebx
c0025642:	5b                   	pop    ebx
c0025643:	5e                   	pop    esi
c0025644:	5f                   	pop    edi
c0025645:	c3                   	ret    
c0025646:	66 90                	xchg   ax,ax

c0025648 <Process::createUserThread()>:
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	68 80 00 00 00       	push   0x80
c0025650:	6a 00                	push   0x0
c0025652:	68 94 4f 02 c0       	push   0xc0024f94
c0025657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002565b:	50                   	push   eax
c002565c:	e8 db fe ff ff       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c0025661:	83 c4 1c             	add    esp,0x1c
c0025664:	c3                   	ret    
c0025665:	8d 76 00             	lea    esi,[esi+0x0]

c0025668 <setupMultitasking(void (*)())>:
c0025668:	56                   	push   esi
c0025669:	53                   	push   ebx
c002566a:	83 ec 04             	sub    esp,0x4
c002566d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025671:	eb 11                	jmp    c0025684 <setupMultitasking(void (*)())+0x1c>
c0025673:	90                   	nop
c0025674:	83 ec 0c             	sub    esp,0xc
c0025677:	68 ec 11 04 c0       	push   0xc00411ec
c002567c:	e8 43 9c 00 00       	call   c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025681:	83 c4 10             	add    esp,0x10
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	68 ec 11 04 c0       	push   0xc00411ec
c002568c:	e8 0f 9c 00 00       	call   c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025691:	83 c4 10             	add    esp,0x10
c0025694:	84 c0                	test   al,al
c0025696:	74 dc                	je     c0025674 <setupMultitasking(void (*)())+0xc>
c0025698:	83 ec 0c             	sub    esp,0xc
c002569b:	68 24 07 00 00       	push   0x724
c00256a0:	e8 12 0f ff ff       	call   c00165b7 <malloc>
c00256a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00256ac:	89 c3                	mov    ebx,eax
c00256ae:	6a 00                	push   0x0
c00256b0:	68 41 36 03 c0       	push   0xc0033641
c00256b5:	6a 01                	push   0x1
c00256b7:	50                   	push   eax
c00256b8:	e8 57 fc ff ff       	call   c0025314 <Process::Process(bool, char const*, Process*, char**)>
c00256bd:	83 c4 14             	add    esp,0x14
c00256c0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00256c6:	89 1d f8 11 04 c0    	mov    DWORD PTR ds:0xc00411f8,ebx
c00256cc:	50                   	push   eax
c00256cd:	e8 87 1b ff ff       	call   c0017259 <setActiveTerminal(VgaText*)>
c00256d2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00256d9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00256e3:	83 c8 01             	or     eax,0x1
c00256e6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00256ed:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00256f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00256f6:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025700:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025706:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c002570c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025716:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025720:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002572a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025730:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002573a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025740:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002574a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025751:	e8 61 0e ff ff       	call   c00165b7 <malloc>
c0025756:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002575c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025762:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025768:	5a                   	pop    edx
c0025769:	59                   	pop    ecx
c002576a:	68 3d 36 03 c0       	push   0xc003363d
c002576f:	50                   	push   eax
c0025770:	e8 cb ae fd ff       	call   c0000640 <strcpy>
c0025775:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002577c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025780:	83 c4 14             	add    esp,0x14
c0025783:	5b                   	pop    ebx
c0025784:	5e                   	pop    esi
c0025785:	e9 df aa fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002578a:	66 90                	xchg   ax,ax

c002578c <schedule()>:
c002578c:	8b 15 cc 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411cc
c0025792:	85 d2                	test   edx,edx
c0025794:	74 0e                	je     c00257a4 <schedule()+0x18>
c0025796:	c7 05 c8 11 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x1
c00257a0:	c3                   	ret    
c00257a1:	8d 76 00             	lea    esi,[esi+0x0]
c00257a4:	53                   	push   ebx
c00257a5:	83 ec 14             	sub    esp,0x14
c00257a8:	68 ec 11 04 c0       	push   0xc00411ec
c00257ad:	e8 ee 9a 00 00       	call   c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00257b2:	83 c4 10             	add    esp,0x10
c00257b5:	84 c0                	test   al,al
c00257b7:	75 3f                	jne    c00257f8 <schedule()+0x6c>
c00257b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00257be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00257c1:	83 fa 01             	cmp    edx,0x1
c00257c4:	74 3a                	je     c0025800 <schedule()+0x74>
c00257c6:	66 90                	xchg   ax,ax
c00257c8:	83 ec 0c             	sub    esp,0xc
c00257cb:	68 ec 11 04 c0       	push   0xc00411ec
c00257d0:	e8 e7 9a 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257d5:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c00257dc:	89 c3                	mov    ebx,eax
c00257de:	e8 e1 9a 00 00       	call   c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257e3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00257ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00257ed:	e8 fa f7 ff ff       	call   c0024fec <switchToThread(ThreadControlBlock*)>
c00257f2:	83 c4 10             	add    esp,0x10
c00257f5:	8d 76 00             	lea    esi,[esi+0x0]
c00257f8:	83 c4 08             	add    esp,0x8
c00257fb:	5b                   	pop    ebx
c00257fc:	c3                   	ret    
c00257fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025800:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025807:	83 ec 08             	sub    esp,0x8
c002580a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002580f:	50                   	push   eax
c0025810:	68 ec 11 04 c0       	push   0xc00411ec
c0025815:	e8 66 9b 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002581a:	83 c4 10             	add    esp,0x10
c002581d:	eb a9                	jmp    c00257c8 <schedule()+0x3c>
c002581f:	90                   	nop

c0025820 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025820:	83 ec 0c             	sub    esp,0xc
c0025823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025828:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002582c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002582f:	e8 58 ff ff ff       	call   c002578c <schedule()>
c0025834:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025839:	83 e8 01             	sub    eax,0x1
c002583c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025841:	75 01                	jne    c0025844 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025843:	fb                   	sti    
c0025844:	83 c4 0c             	add    esp,0xc
c0025847:	c3                   	ret    

c0025848 <blockTask(TaskState)>:
c0025848:	83 ec 0c             	sub    esp,0xc
c002584b:	fa                   	cli    
c002584c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025851:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025855:	83 c0 01             	add    eax,0x1
c0025858:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002585d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025862:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025865:	e8 22 ff ff ff       	call   c002578c <schedule()>
c002586a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002586f:	83 e8 01             	sub    eax,0x1
c0025872:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025877:	75 03                	jne    c002587c <blockTask(TaskState)+0x34>
c0025879:	fb                   	sti    
c002587a:	66 90                	xchg   ax,ax
c002587c:	83 c4 0c             	add    esp,0xc
c002587f:	c3                   	ret    

c0025880 <waitTask(int, int*, int)>:
c0025880:	83 ec 18             	sub    esp,0x18
c0025883:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025888:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002588c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002588f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025898:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c002589b:	6a 07                	push   0x7
c002589d:	e8 a6 ff ff ff       	call   c0025848 <blockTask(TaskState)>
c00258a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00258a7:	83 c4 10             	add    esp,0x10
c00258aa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00258ad:	85 d2                	test   edx,edx
c00258af:	74 0b                	je     c00258bc <waitTask(int, int*, int)+0x3c>
c00258b1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00258b4:	89 02                	mov    DWORD PTR [edx],eax
c00258b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00258bb:	90                   	nop
c00258bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00258bf:	83 c4 0c             	add    esp,0xc
c00258c2:	c3                   	ret    
c00258c3:	90                   	nop

c00258c4 <milliTenthSleepUntil(unsigned int)>:
c00258c4:	83 ec 0c             	sub    esp,0xc
c00258c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258cb:	39 05 ec 03 04 c0    	cmp    DWORD PTR ds:0xc00403ec,eax
c00258d1:	76 05                	jbe    c00258d8 <milliTenthSleepUntil(unsigned int)+0x14>
c00258d3:	90                   	nop
c00258d4:	83 c4 0c             	add    esp,0xc
c00258d7:	c3                   	ret    
c00258d8:	fa                   	cli    
c00258d9:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c00258df:	83 ec 08             	sub    esp,0x8
c00258e2:	83 c2 01             	add    edx,0x1
c00258e5:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c00258eb:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c00258f1:	83 c1 01             	add    ecx,0x1
c00258f4:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c00258fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025900:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025903:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025908:	50                   	push   eax
c0025909:	68 e0 11 04 c0       	push   0xc00411e0
c002590e:	e8 6d 9a 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025913:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002591a:	e8 29 ff ff ff       	call   c0025848 <blockTask(TaskState)>
c002591f:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025924:	83 c4 10             	add    esp,0x10
c0025927:	83 e8 01             	sub    eax,0x1
c002592a:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c002592f:	85 c0                	test   eax,eax
c0025931:	75 09                	jne    c002593c <milliTenthSleepUntil(unsigned int)+0x78>
c0025933:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0025938:	85 c0                	test   eax,eax
c002593a:	75 14                	jne    c0025950 <milliTenthSleepUntil(unsigned int)+0x8c>
c002593c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025941:	83 e8 01             	sub    eax,0x1
c0025944:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025949:	75 89                	jne    c00258d4 <milliTenthSleepUntil(unsigned int)+0x10>
c002594b:	fb                   	sti    
c002594c:	83 c4 0c             	add    esp,0xc
c002594f:	c3                   	ret    
c0025950:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c002595a:	e8 2d fe ff ff       	call   c002578c <schedule()>
c002595f:	eb db                	jmp    c002593c <milliTenthSleepUntil(unsigned int)+0x78>
c0025961:	8d 76 00             	lea    esi,[esi+0x0]

c0025964 <milliTenthSleep(unsigned int)>:
c0025964:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025968:	a1 ec 03 04 c0       	mov    eax,ds:0xc00403ec
c002596d:	01 c2                	add    edx,eax
c002596f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025973:	e9 4c ff ff ff       	jmp    c00258c4 <milliTenthSleepUntil(unsigned int)>

c0025978 <sleep(unsigned int)>:
c0025978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002597c:	8d 04 80             	lea    eax,[eax+eax*4]
c002597f:	8d 04 80             	lea    eax,[eax+eax*4]
c0025982:	8d 04 80             	lea    eax,[eax+eax*4]
c0025985:	8d 04 80             	lea    eax,[eax+eax*4]
c0025988:	c1 e0 04             	shl    eax,0x4
c002598b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002598f:	eb d3                	jmp    c0025964 <milliTenthSleep(unsigned int)>
c0025991:	8d 76 00             	lea    esi,[esi+0x0]

c0025994 <taskReturned>:
c0025994:	83 ec 18             	sub    esp,0x18
c0025997:	68 c0 36 03 c0       	push   0xc00336c0
c002599c:	e8 dd ad ff ff       	call   c002077e <KePanic(char const*)>
c00259a1:	83 c4 10             	add    esp,0x10
c00259a4:	83 ec 0c             	sub    esp,0xc
c00259a7:	6a 02                	push   0x2
c00259a9:	e8 9a fe ff ff       	call   c0025848 <blockTask(TaskState)>
c00259ae:	fa                   	cli    
c00259af:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00259b4:	83 c0 01             	add    eax,0x1
c00259b7:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00259bc:	e8 cb fd ff ff       	call   c002578c <schedule()>
c00259c1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00259c6:	83 c4 10             	add    esp,0x10
c00259c9:	83 e8 01             	sub    eax,0x1
c00259cc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00259d1:	85 c0                	test   eax,eax
c00259d3:	75 cf                	jne    c00259a4 <taskReturned+0x10>
c00259d5:	fb                   	sti    
c00259d6:	eb cc                	jmp    c00259a4 <taskReturned+0x10>

c00259d8 <Thr::processFromPID(int)>:
c00259d8:	57                   	push   edi
c00259d9:	56                   	push   esi
c00259da:	53                   	push   ebx
c00259db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00259df:	fa                   	cli    
c00259e0:	8b 0d d0 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411d0
c00259e6:	83 ec 0c             	sub    esp,0xc
c00259e9:	83 c1 01             	add    ecx,0x1
c00259ec:	68 ec 11 04 c0       	push   0xc00411ec
c00259f1:	89 0d d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,ecx
c00259f7:	e8 c0 98 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00259fc:	83 c4 10             	add    esp,0x10
c00259ff:	89 c7                	mov    edi,eax
c0025a01:	eb 15                	jmp    c0025a18 <Thr::processFromPID(int)+0x40>
c0025a03:	90                   	nop
c0025a04:	83 ec 0c             	sub    esp,0xc
c0025a07:	68 ec 11 04 c0       	push   0xc00411ec
c0025a0c:	e8 ab 98 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a11:	83 c4 10             	add    esp,0x10
c0025a14:	39 f8                	cmp    eax,edi
c0025a16:	74 50                	je     c0025a68 <Thr::processFromPID(int)+0x90>
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	68 ec 11 04 c0       	push   0xc00411ec
c0025a20:	e8 97 98 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a25:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025a2c:	89 c3                	mov    ebx,eax
c0025a2e:	e8 91 98 00 00       	call   c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025a33:	58                   	pop    eax
c0025a34:	5a                   	pop    edx
c0025a35:	53                   	push   ebx
c0025a36:	68 ec 11 04 c0       	push   0xc00411ec
c0025a3b:	e8 40 99 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a40:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a43:	83 c4 10             	add    esp,0x10
c0025a46:	39 30                	cmp    DWORD PTR [eax],esi
c0025a48:	75 ba                	jne    c0025a04 <Thr::processFromPID(int)+0x2c>
c0025a4a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a4f:	83 e8 01             	sub    eax,0x1
c0025a52:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a57:	74 0b                	je     c0025a64 <Thr::processFromPID(int)+0x8c>
c0025a59:	8d 76 00             	lea    esi,[esi+0x0]
c0025a5c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a5f:	5b                   	pop    ebx
c0025a60:	5e                   	pop    esi
c0025a61:	5f                   	pop    edi
c0025a62:	c3                   	ret    
c0025a63:	90                   	nop
c0025a64:	fb                   	sti    
c0025a65:	eb f5                	jmp    c0025a5c <Thr::processFromPID(int)+0x84>
c0025a67:	90                   	nop
c0025a68:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a6d:	83 e8 01             	sub    eax,0x1
c0025a70:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a75:	75 05                	jne    c0025a7c <Thr::processFromPID(int)+0xa4>
c0025a77:	fb                   	sti    
c0025a78:	5b                   	pop    ebx
c0025a79:	5e                   	pop    esi
c0025a7a:	5f                   	pop    edi
c0025a7b:	c3                   	ret    
c0025a7c:	5b                   	pop    ebx
c0025a7d:	31 c0                	xor    eax,eax
c0025a7f:	5e                   	pop    esi
c0025a80:	5f                   	pop    edi
c0025a81:	c3                   	ret    
c0025a82:	66 90                	xchg   ax,ax

c0025a84 <unblockTask(ThreadControlBlock*)>:
c0025a84:	53                   	push   ebx
c0025a85:	83 ec 08             	sub    esp,0x8
c0025a88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025a8c:	fa                   	cli    
c0025a8d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a92:	83 c0 01             	add    eax,0x1
c0025a95:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a9a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025a9d:	85 c0                	test   eax,eax
c0025a9f:	74 67                	je     c0025b08 <unblockTask(ThreadControlBlock*)+0x84>
c0025aa1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025aa4:	83 f8 01             	cmp    eax,0x1
c0025aa7:	74 37                	je     c0025ae0 <unblockTask(ThreadControlBlock*)+0x5c>
c0025aa9:	83 ec 0c             	sub    esp,0xc
c0025aac:	68 ec 11 04 c0       	push   0xc00411ec
c0025ab1:	e8 06 98 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025ab6:	83 c4 10             	add    esp,0x10
c0025ab9:	85 c0                	test   eax,eax
c0025abb:	75 1b                	jne    c0025ad8 <unblockTask(ThreadControlBlock*)+0x54>
c0025abd:	eb 5d                	jmp    c0025b1c <unblockTask(ThreadControlBlock*)+0x98>
c0025abf:	90                   	nop
c0025ac0:	83 ec 08             	sub    esp,0x8
c0025ac3:	50                   	push   eax
c0025ac4:	68 ec 11 04 c0       	push   0xc00411ec
c0025ac9:	e8 0e 9b 00 00       	call   c002f5dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0025ace:	83 c4 10             	add    esp,0x10
c0025ad1:	85 c0                	test   eax,eax
c0025ad3:	74 47                	je     c0025b1c <unblockTask(ThreadControlBlock*)+0x98>
c0025ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0025ad8:	39 c3                	cmp    ebx,eax
c0025ada:	75 e4                	jne    c0025ac0 <unblockTask(ThreadControlBlock*)+0x3c>
c0025adc:	eb 12                	jmp    c0025af0 <unblockTask(ThreadControlBlock*)+0x6c>
c0025ade:	66 90                	xchg   ax,ax
c0025ae0:	83 ec 0c             	sub    esp,0xc
c0025ae3:	68 5f 36 03 c0       	push   0xc003365f
c0025ae8:	e8 58 39 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0025aed:	83 c4 10             	add    esp,0x10
c0025af0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025af5:	83 e8 01             	sub    eax,0x1
c0025af8:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025afd:	75 01                	jne    c0025b00 <unblockTask(ThreadControlBlock*)+0x7c>
c0025aff:	fb                   	sti    
c0025b00:	83 c4 08             	add    esp,0x8
c0025b03:	5b                   	pop    ebx
c0025b04:	c3                   	ret    
c0025b05:	8d 76 00             	lea    esi,[esi+0x0]
c0025b08:	83 ec 0c             	sub    esp,0xc
c0025b0b:	68 48 36 03 c0       	push   0xc0033648
c0025b10:	e8 30 39 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0025b15:	83 c4 10             	add    esp,0x10
c0025b18:	eb d6                	jmp    c0025af0 <unblockTask(ThreadControlBlock*)+0x6c>
c0025b1a:	66 90                	xchg   ax,ax
c0025b1c:	83 ec 08             	sub    esp,0x8
c0025b1f:	53                   	push   ebx
c0025b20:	68 ec 11 04 c0       	push   0xc00411ec
c0025b25:	e8 56 98 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025b2a:	83 c4 10             	add    esp,0x10
c0025b2d:	eb c1                	jmp    c0025af0 <unblockTask(ThreadControlBlock*)+0x6c>
c0025b2f:	90                   	nop

c0025b30 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025b30:	55                   	push   ebp
c0025b31:	57                   	push   edi
c0025b32:	56                   	push   esi
c0025b33:	53                   	push   ebx
c0025b34:	83 ec 1c             	sub    esp,0x1c
c0025b37:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025b3b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b3e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025b44:	85 ed                	test   ebp,ebp
c0025b46:	7e 28                	jle    c0025b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025b48:	31 f6                	xor    esi,esi
c0025b4a:	66 90                	xchg   ax,ax
c0025b4c:	83 ec 0c             	sub    esp,0xc
c0025b4f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025b56:	83 c6 01             	add    esi,0x1
c0025b59:	57                   	push   edi
c0025b5a:	e8 68 0a ff ff       	call   c00165c7 <free>
c0025b5f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b62:	83 c4 10             	add    esp,0x10
c0025b65:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025b6b:	7f df                	jg     c0025b4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b70:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025b7a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025b7f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025b82:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025b85:	d3 c0                	rol    eax,cl
c0025b87:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025b8e:	21 c8                	and    eax,ecx
c0025b90:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025b97:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025b9a:	89 f7                	mov    edi,esi
c0025b9c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025ba4:	0f 85 72 01 00 00    	jne    c0025d1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025baa:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025bb0:	85 ed                	test   ebp,ebp
c0025bb2:	74 1c                	je     c0025bd0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025bb4:	83 ec 0c             	sub    esp,0xc
c0025bb7:	55                   	push   ebp
c0025bb8:	e8 d3 a6 ff ff       	call   c0020290 <EnvVarContainer::~EnvVarContainer()>
c0025bbd:	59                   	pop    ecx
c0025bbe:	5e                   	pop    esi
c0025bbf:	6a 0c                	push   0xc
c0025bc1:	55                   	push   ebp
c0025bc2:	e8 51 37 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c0025bc7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025bca:	83 c4 10             	add    esp,0x10
c0025bcd:	89 f7                	mov    edi,esi
c0025bcf:	90                   	nop
c0025bd0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025bd6:	85 c0                	test   eax,eax
c0025bd8:	0f 84 b2 00 00 00    	je     c0025c90 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025bde:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025be1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025be5:	31 c9                	xor    ecx,ecx
c0025be7:	eb 17                	jmp    c0025c00 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025be9:	8d 76 00             	lea    esi,[esi+0x0]
c0025bec:	83 c1 01             	add    ecx,0x1
c0025bef:	83 f9 10             	cmp    ecx,0x10
c0025bf2:	0f 84 98 00 00 00    	je     c0025c90 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025bf8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025bfe:	66 90                	xchg   ax,ax
c0025c00:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025c07:	d3 fa                	sar    edx,cl
c0025c09:	80 e2 01             	and    dl,0x1
c0025c0c:	74 de                	je     c0025bec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c0e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0025c11:	01 d2                	add    edx,edx
c0025c13:	01 ca                	add    edx,ecx
c0025c15:	8d 14 92             	lea    edx,[edx+edx*4]
c0025c18:	01 d0                	add    eax,edx
c0025c1a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025c20:	83 fd 07             	cmp    ebp,0x7
c0025c23:	75 c7                	jne    c0025bec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c25:	05 40 02 00 00       	add    eax,0x240
c0025c2a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025c2d:	83 fd ff             	cmp    ebp,0xffffffff
c0025c30:	0f 8c ee 00 00 00    	jl     c0025d24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025c36:	0f 84 ac 01 00 00    	je     c0025de8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025c3c:	85 ed                	test   ebp,ebp
c0025c3e:	0f 84 90 01 00 00    	je     c0025dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025c44:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025c46:	75 a4                	jne    c0025bec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c48:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025c4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025c52:	01 d0                	add    eax,edx
c0025c54:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025c58:	83 ec 0c             	sub    esp,0xc
c0025c5b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025c61:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c64:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025c6a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025c71:	50                   	push   eax
c0025c72:	e8 0d fe ff ff       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c0025c77:	83 c4 10             	add    esp,0x10
c0025c7a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025c7d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025c81:	89 f7                	mov    edi,esi
c0025c83:	83 c1 01             	add    ecx,0x1
c0025c86:	83 f9 10             	cmp    ecx,0x10
c0025c89:	0f 85 69 ff ff ff    	jne    c0025bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025c8f:	90                   	nop
c0025c90:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025c96:	85 c0                	test   eax,eax
c0025c98:	74 62                	je     c0025cfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025c9a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025ca0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025ca6:	74 54                	je     c0025cfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025ca8:	83 ec 0c             	sub    esp,0xc
c0025cab:	68 ec 11 04 c0       	push   0xc00411ec
c0025cb0:	e8 07 96 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025cb5:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025cbc:	89 c7                	mov    edi,eax
c0025cbe:	e8 dd 95 00 00       	call   c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025cc3:	83 c4 10             	add    esp,0x10
c0025cc6:	84 c0                	test   al,al
c0025cc8:	0f 84 ce 00 00 00    	je     c0025d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025cce:	66 90                	xchg   ax,ax
c0025cd0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025cd3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025cd9:	85 d2                	test   edx,edx
c0025cdb:	74 0f                	je     c0025cec <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025cdd:	83 ec 0c             	sub    esp,0xc
c0025ce0:	8b 02                	mov    eax,DWORD PTR [edx]
c0025ce2:	52                   	push   edx
c0025ce3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025ce6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025ce9:	83 c4 10             	add    esp,0x10
c0025cec:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025cf6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0025cfc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025d02:	85 db                	test   ebx,ebx
c0025d04:	74 16                	je     c0025d1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025d06:	83 ec 0c             	sub    esp,0xc
c0025d09:	53                   	push   ebx
c0025d0a:	e8 a3 29 ff ff       	call   c00186b2 <VAS::~VAS()>
c0025d0f:	58                   	pop    eax
c0025d10:	5a                   	pop    edx
c0025d11:	6a 14                	push   0x14
c0025d13:	53                   	push   ebx
c0025d14:	e8 ff 35 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c0025d19:	83 c4 10             	add    esp,0x10
c0025d1c:	83 c4 1c             	add    esp,0x1c
c0025d1f:	5b                   	pop    ebx
c0025d20:	5e                   	pop    esi
c0025d21:	5f                   	pop    edi
c0025d22:	5d                   	pop    ebp
c0025d23:	c3                   	ret    
c0025d24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025d28:	83 ec 0c             	sub    esp,0xc
c0025d2b:	68 f4 36 03 c0       	push   0xc00336f4
c0025d30:	e8 49 aa ff ff       	call   c002077e <KePanic(char const*)>
c0025d35:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025d38:	83 c4 10             	add    esp,0x10
c0025d3b:	89 f7                	mov    edi,esi
c0025d3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025d41:	e9 a6 fe ff ff       	jmp    c0025bec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025d46:	66 90                	xchg   ax,ax
c0025d48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025d4e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025d54:	75 1e                	jne    c0025d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025d56:	83 ec 0c             	sub    esp,0xc
c0025d59:	68 5c 37 03 c0       	push   0xc003375c
c0025d5e:	e8 e2 36 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0025d63:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025d6a:	e8 d9 fa ff ff       	call   c0025848 <blockTask(TaskState)>
c0025d6f:	83 c4 10             	add    esp,0x10
c0025d72:	66 90                	xchg   ax,ax
c0025d74:	83 ec 08             	sub    esp,0x8
c0025d77:	56                   	push   esi
c0025d78:	68 ec 11 04 c0       	push   0xc00411ec
c0025d7d:	e8 fe 95 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025d82:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025d89:	e8 2e 95 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025d8e:	83 c4 10             	add    esp,0x10
c0025d91:	39 f8                	cmp    eax,edi
c0025d93:	0f 84 37 ff ff ff    	je     c0025cd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025d99:	8d 76 00             	lea    esi,[esi+0x0]
c0025d9c:	83 ec 0c             	sub    esp,0xc
c0025d9f:	68 ec 11 04 c0       	push   0xc00411ec
c0025da4:	e8 13 95 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025da9:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025db0:	89 c6                	mov    esi,eax
c0025db2:	e8 0d 95 00 00       	call   c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025db7:	83 c4 10             	add    esp,0x10
c0025dba:	39 f3                	cmp    ebx,esi
c0025dbc:	74 b6                	je     c0025d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025dbe:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025dc1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025dc4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025dca:	75 a8                	jne    c0025d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025dcc:	e9 77 ff ff ff       	jmp    c0025d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0025dd4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025dd8:	83 ec 0c             	sub    esp,0xc
c0025ddb:	68 28 37 03 c0       	push   0xc0033728
c0025de0:	e9 4b ff ff ff       	jmp    c0025d30 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025de5:	8d 76 00             	lea    esi,[esi+0x0]
c0025de8:	8b 36                	mov    esi,DWORD PTR [esi]
c0025dea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025dee:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025df1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025df4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025dfa:	01 d7                	add    edi,edx
c0025dfc:	89 f8                	mov    eax,edi
c0025dfe:	e9 51 fe ff ff       	jmp    c0025c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025e03:	90                   	nop

c0025e04 <cleanerTaskFunction(void*)>:
c0025e04:	53                   	push   ebx
c0025e05:	83 ec 08             	sub    esp,0x8
c0025e08:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025e0d:	83 e8 01             	sub    eax,0x1
c0025e10:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025e15:	75 01                	jne    c0025e18 <cleanerTaskFunction(void*)+0x14>
c0025e17:	fb                   	sti    
c0025e18:	fa                   	cli    
c0025e19:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025e1e:	80 3d b4 11 04 c0 00 	cmp    BYTE PTR ds:0xc00411b4,0x0
c0025e25:	8d 50 01             	lea    edx,[eax+0x1]
c0025e28:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025e2e:	0f 84 c4 00 00 00    	je     c0025ef8 <cleanerTaskFunction(void*)+0xf4>
c0025e34:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025e39:	85 c0                	test   eax,eax
c0025e3b:	75 03                	jne    c0025e40 <cleanerTaskFunction(void*)+0x3c>
c0025e3d:	fb                   	sti    
c0025e3e:	66 90                	xchg   ax,ax
c0025e40:	c6 05 b4 11 04 c0 00 	mov    BYTE PTR ds:0xc00411b4,0x0
c0025e47:	fa                   	cli    
c0025e48:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c0025e4e:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025e54:	83 c2 01             	add    edx,0x1
c0025e57:	83 c1 01             	add    ecx,0x1
c0025e5a:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025e60:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c0025e66:	fa                   	cli    
c0025e67:	8b 1d d0 11 04 c0    	mov    ebx,DWORD PTR ds:0xc00411d0
c0025e6d:	83 c3 01             	add    ebx,0x1
c0025e70:	89 1d d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,ebx
c0025e76:	eb 28                	jmp    c0025ea0 <cleanerTaskFunction(void*)+0x9c>
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	68 d4 11 04 c0       	push   0xc00411d4
c0025e80:	e8 37 94 00 00       	call   c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025e85:	c7 04 24 d4 11 04 c0 	mov    DWORD PTR [esp],0xc00411d4
c0025e8c:	89 c3                	mov    ebx,eax
c0025e8e:	e8 31 94 00 00       	call   c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025e93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025e96:	e8 95 fc ff ff       	call   c0025b30 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025e9b:	83 c4 10             	add    esp,0x10
c0025e9e:	66 90                	xchg   ax,ax
c0025ea0:	83 ec 0c             	sub    esp,0xc
c0025ea3:	68 d4 11 04 c0       	push   0xc00411d4
c0025ea8:	e8 f3 93 00 00       	call   c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025ead:	83 c4 10             	add    esp,0x10
c0025eb0:	84 c0                	test   al,al
c0025eb2:	74 c4                	je     c0025e78 <cleanerTaskFunction(void*)+0x74>
c0025eb4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025eb9:	83 e8 01             	sub    eax,0x1
c0025ebc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025ec1:	75 01                	jne    c0025ec4 <cleanerTaskFunction(void*)+0xc0>
c0025ec3:	fb                   	sti    
c0025ec4:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025ec9:	83 e8 01             	sub    eax,0x1
c0025ecc:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0025ed1:	0f 85 31 ff ff ff    	jne    c0025e08 <cleanerTaskFunction(void*)+0x4>
c0025ed7:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0025edc:	85 c0                	test   eax,eax
c0025ede:	0f 84 24 ff ff ff    	je     c0025e08 <cleanerTaskFunction(void*)+0x4>
c0025ee4:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0025eee:	e8 99 f8 ff ff       	call   c002578c <schedule()>
c0025ef3:	e9 10 ff ff ff       	jmp    c0025e08 <cleanerTaskFunction(void*)+0x4>
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	6a 02                	push   0x2
c0025efd:	e8 1e f9 ff ff       	call   c0025820 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025f02:	83 c4 10             	add    esp,0x10
c0025f05:	e9 36 ff ff ff       	jmp    c0025e40 <cleanerTaskFunction(void*)+0x3c>
c0025f0a:	66 90                	xchg   ax,ax

c0025f0c <terminateTask(int)>:
c0025f0c:	83 ec 14             	sub    esp,0x14
c0025f0f:	fa                   	cli    
c0025f10:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c0025f16:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025f1c:	83 c2 01             	add    edx,0x1
c0025f1f:	83 c1 01             	add    ecx,0x1
c0025f22:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025f28:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c0025f2e:	fa                   	cli    
c0025f2f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025f38:	83 c0 01             	add    eax,0x1
c0025f3b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f45:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025f48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f4d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025f50:	50                   	push   eax
c0025f51:	68 d4 11 04 c0       	push   0xc00411d4
c0025f56:	e8 25 94 00 00       	call   c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f60:	83 c4 10             	add    esp,0x10
c0025f63:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025f6a:	a1 b0 11 04 c0       	mov    eax,ds:0xc00411b0
c0025f6f:	85 c0                	test   eax,eax
c0025f71:	74 65                	je     c0025fd8 <terminateTask(int)+0xcc>
c0025f73:	83 ec 0c             	sub    esp,0xc
c0025f76:	c6 05 b4 11 04 c0 01 	mov    BYTE PTR ds:0xc00411b4,0x1
c0025f7d:	50                   	push   eax
c0025f7e:	e8 01 fb ff ff       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c0025f83:	83 c4 10             	add    esp,0x10
c0025f86:	66 90                	xchg   ax,ax
c0025f88:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f8d:	83 e8 01             	sub    eax,0x1
c0025f90:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f95:	75 01                	jne    c0025f98 <terminateTask(int)+0x8c>
c0025f97:	fb                   	sti    
c0025f98:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025f9d:	83 e8 01             	sub    eax,0x1
c0025fa0:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0025fa5:	75 09                	jne    c0025fb0 <terminateTask(int)+0xa4>
c0025fa7:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c0025fae:	75 3c                	jne    c0025fec <terminateTask(int)+0xe0>
c0025fb0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025fb5:	83 e8 01             	sub    eax,0x1
c0025fb8:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025fbd:	75 01                	jne    c0025fc0 <terminateTask(int)+0xb4>
c0025fbf:	fb                   	sti    
c0025fc0:	fa                   	cli    
c0025fc1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025fc6:	83 c0 01             	add    eax,0x1
c0025fc9:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025fce:	66 90                	xchg   ax,ax
c0025fd0:	e8 b7 f7 ff ff       	call   c002578c <schedule()>
c0025fd5:	eb d9                	jmp    c0025fb0 <terminateTask(int)+0xa4>
c0025fd7:	90                   	nop
c0025fd8:	83 ec 0c             	sub    esp,0xc
c0025fdb:	68 76 36 03 c0       	push   0xc0033676
c0025fe0:	e8 60 34 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0025fe5:	83 c4 10             	add    esp,0x10
c0025fe8:	eb 9e                	jmp    c0025f88 <terminateTask(int)+0x7c>
c0025fea:	66 90                	xchg   ax,ax
c0025fec:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0025ff6:	eb d8                	jmp    c0025fd0 <terminateTask(int)+0xc4>

c0025ff8 <Thr::terminateFromIRQ(int)>:
c0025ff8:	83 ec 18             	sub    esp,0x18
c0025ffb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fff:	50                   	push   eax
c0026000:	e8 07 ff ff ff       	call   c0025f0c <terminateTask(int)>
c0026005:	8d 76 00             	lea    esi,[esi+0x0]

c0026008 <__static_initialization_and_destruction_0(int, int)>:
c0026008:	83 ec 0c             	sub    esp,0xc
c002600b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0026010:	0f 85 8e 00 00 00    	jne    c00260a4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0026016:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002601e:	0f 85 80 00 00 00    	jne    c00260a4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0026024:	83 ec 0c             	sub    esp,0xc
c0026027:	68 ec 11 04 c0       	push   0xc00411ec
c002602c:	e8 03 96 00 00       	call   c002f634 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0026031:	83 c4 10             	add    esp,0x10
c0026034:	83 ec 04             	sub    esp,0x4
c0026037:	68 b8 43 03 c0       	push   0xc00343b8
c002603c:	68 ec 11 04 c0       	push   0xc00411ec
c0026041:	68 e4 f5 02 c0       	push   0xc002f5e4
c0026046:	e8 7d 32 ff ff       	call   c00192c8 <__cxa_atexit>
c002604b:	83 c4 10             	add    esp,0x10
c002604e:	83 ec 0c             	sub    esp,0xc
c0026051:	68 e0 11 04 c0       	push   0xc00411e0
c0026056:	e8 d9 95 00 00       	call   c002f634 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c002605b:	83 c4 10             	add    esp,0x10
c002605e:	83 ec 04             	sub    esp,0x4
c0026061:	68 b8 43 03 c0       	push   0xc00343b8
c0026066:	68 e0 11 04 c0       	push   0xc00411e0
c002606b:	68 e4 f5 02 c0       	push   0xc002f5e4
c0026070:	e8 53 32 ff ff       	call   c00192c8 <__cxa_atexit>
c0026075:	83 c4 10             	add    esp,0x10
c0026078:	83 ec 0c             	sub    esp,0xc
c002607b:	68 d4 11 04 c0       	push   0xc00411d4
c0026080:	e8 af 95 00 00       	call   c002f634 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0026085:	83 c4 10             	add    esp,0x10
c0026088:	83 ec 04             	sub    esp,0x4
c002608b:	68 b8 43 03 c0       	push   0xc00343b8
c0026090:	68 d4 11 04 c0       	push   0xc00411d4
c0026095:	68 e4 f5 02 c0       	push   0xc002f5e4
c002609a:	e8 29 32 ff ff       	call   c00192c8 <__cxa_atexit>
c002609f:	83 c4 10             	add    esp,0x10
c00260a2:	66 90                	xchg   ax,ax
c00260a4:	90                   	nop
c00260a5:	83 c4 0c             	add    esp,0xc
c00260a8:	c3                   	ret    
c00260a9:	8d 76 00             	lea    esi,[esi+0x0]

c00260ac <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00260ac:	83 ec 0c             	sub    esp,0xc
c00260af:	83 ec 08             	sub    esp,0x8
c00260b2:	68 ff ff 00 00       	push   0xffff
c00260b7:	6a 01                	push   0x1
c00260b9:	e8 4a ff ff ff       	call   c0026008 <__static_initialization_and_destruction_0(int, int)>
c00260be:	83 c4 10             	add    esp,0x10
c00260c1:	83 c4 0c             	add    esp,0xc
c00260c4:	c3                   	ret    

c00260c5 <Vm::inbv(unsigned short)>:
c00260c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00260c9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00260ce:	75 06                	jne    c00260d6 <Vm::inbv(unsigned short)+0x11>
c00260d0:	a0 30 12 04 c0       	mov    al,ds:0xc0041230
c00260d5:	c3                   	ret    
c00260d6:	ec                   	in     al,dx
c00260d7:	c3                   	ret    

c00260d8 <Vm::outbv(unsigned short, unsigned char)>:
c00260d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00260dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260e0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00260e5:	75 25                	jne    c002610c <Vm::outbv(unsigned short, unsigned char)+0x34>
c00260e7:	8b 0d 30 12 04 c0    	mov    ecx,DWORD PTR ds:0xc0041230
c00260ed:	8d 51 01             	lea    edx,[ecx+0x1]
c00260f0:	88 81 40 12 04 c0    	mov    BYTE PTR [ecx-0x3ffbedc0],al
c00260f6:	89 15 30 12 04 c0    	mov    DWORD PTR ds:0xc0041230,edx
c00260fc:	83 fa 20             	cmp    edx,0x20
c00260ff:	75 0c                	jne    c002610d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0026101:	c7 05 30 12 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x1f
c002610b:	c3                   	ret    
c002610c:	ee                   	out    dx,al
c002610d:	c3                   	ret    

c002610e <Vm::realToLinear(unsigned short, unsigned short)>:
c002610e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026113:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026118:	c1 e0 04             	shl    eax,0x4
c002611b:	01 d0                	add    eax,edx
c002611d:	c3                   	ret    

c002611e <Vm::getSegment(unsigned int)>:
c002611e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026122:	c1 e8 10             	shr    eax,0x10
c0026125:	c3                   	ret    

c0026126 <Vm::getOffset(unsigned int)>:
c0026126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002612a:	c3                   	ret    

c002612b <Vm::mainloop2()>:
c002612b:	83 ec 18             	sub    esp,0x18
c002612e:	fa                   	cli    
c002612f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026135:	6a 02                	push   0x2
c0026137:	c6 05 29 12 04 c0 01 	mov    BYTE PTR ds:0xc0041229,0x1
c002613e:	e8 dd f6 ff ff       	call   c0025820 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0026143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026148:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c002614c:	52                   	push   edx
c002614d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0026151:	52                   	push   edx
c0026152:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0026156:	52                   	push   edx
c0026157:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c002615b:	50                   	push   eax
c002615c:	e8 ae a0 fd ff       	call   c000020f <goToVM86>
c0026161:	83 c4 2c             	add    esp,0x2c
c0026164:	c3                   	ret    

c0026165 <Vm::mainVm8086Loop(void*)>:
c0026165:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002616a:	48                   	dec    eax
c002616b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026170:	75 01                	jne    c0026173 <Vm::mainVm8086Loop(void*)+0xe>
c0026172:	fb                   	sti    
c0026173:	eb b6                	jmp    c002612b <Vm::mainloop2()>

c0026175 <Vm::mainloop3(unsigned long)>:
c0026175:	83 ec 18             	sub    esp,0x18
c0026178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002617c:	fa                   	cli    
c002617d:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026183:	6a 02                	push   0x2
c0026185:	c6 05 28 12 04 c0 01 	mov    BYTE PTR ds:0xc0041228,0x1
c002618c:	a3 24 12 04 c0       	mov    ds:0xc0041224,eax
c0026191:	e8 8a f6 ff ff       	call   c0025820 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0026196:	83 c4 1c             	add    esp,0x1c
c0026199:	eb 90                	jmp    c002612b <Vm::mainloop2()>

c002619b <Vm::initialise8086()>:
c002619b:	83 ec 0c             	sub    esp,0xc
c002619e:	68 80 00 00 00       	push   0x80
c00261a3:	6a 00                	push   0x0
c00261a5:	68 65 61 02 c0       	push   0xc0026165
c00261aa:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00261b0:	e8 87 f3 ff ff       	call   c002553c <Process::createThread(void (*)(void*), void*, int)>
c00261b5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00261bc:	a3 2c 12 04 c0       	mov    ds:0xc004122c,eax
c00261c1:	68 10 01 00 00       	push   0x110
c00261c6:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00261cb:	6a 00                	push   0x0
c00261cd:	6a 00                	push   0x0
c00261cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00261d5:	e8 40 28 ff ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00261da:	83 c4 2c             	add    esp,0x2c
c00261dd:	c3                   	ret    

c00261de <Vm::resetConventionalMemory8086()>:
c00261de:	c3                   	ret    

c00261df <Vm::finish8086()>:
c00261df:	53                   	push   ebx
c00261e0:	83 ec 08             	sub    esp,0x8
c00261e3:	fa                   	cli    
c00261e4:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00261ea:	80 3d 28 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041228,0x0
c00261f1:	75 15                	jne    c0026208 <Vm::finish8086()+0x29>
c00261f3:	e8 94 f5 ff ff       	call   c002578c <schedule()>
c00261f8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00261fd:	48                   	dec    eax
c00261fe:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026203:	75 de                	jne    c00261e3 <Vm::finish8086()+0x4>
c0026205:	fb                   	sti    
c0026206:	eb db                	jmp    c00261e3 <Vm::finish8086()+0x4>
c0026208:	83 ec 0c             	sub    esp,0xc
c002620b:	8b 1d 24 12 04 c0    	mov    ebx,DWORD PTR ds:0xc0041224
c0026211:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c0026217:	c6 05 28 12 04 c0 00 	mov    BYTE PTR ds:0xc0041228,0x0
c002621e:	e8 61 f8 ff ff       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c0026223:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026228:	83 c4 10             	add    esp,0x10
c002622b:	8d 50 ff             	lea    edx,[eax-0x1]
c002622e:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0026234:	85 d2                	test   edx,edx
c0026236:	75 01                	jne    c0026239 <Vm::finish8086()+0x5a>
c0026238:	fb                   	sti    
c0026239:	89 d8                	mov    eax,ebx
c002623b:	83 c4 08             	add    esp,0x8
c002623e:	5b                   	pop    ebx
c002623f:	c3                   	ret    

c0026240 <Vm::getOutput8086(unsigned char*)>:
c0026240:	57                   	push   edi
c0026241:	8b 0d 30 12 04 c0    	mov    ecx,DWORD PTR ds:0xc0041230
c0026247:	56                   	push   esi
c0026248:	be 40 12 04 c0       	mov    esi,0xc0041240
c002624d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0026253:	a1 30 12 04 c0       	mov    eax,ds:0xc0041230
c0026258:	5e                   	pop    esi
c0026259:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c0026263:	5f                   	pop    edi
c0026264:	c3                   	ret    

c0026265 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026265:	55                   	push   ebp
c0026266:	57                   	push   edi
c0026267:	56                   	push   esi
c0026268:	53                   	push   ebx
c0026269:	83 ec 2c             	sub    esp,0x2c
c002626c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0026270:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0026274:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0026278:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c002627c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026280:	80 3d 20 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041220,0x0
c0026287:	75 5d                	jne    c00262e6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026289:	83 ec 0c             	sub    esp,0xc
c002628c:	68 14 01 00 00       	push   0x114
c0026291:	e8 21 03 ff ff       	call   c00165b7 <malloc>
c0026296:	83 c4 0c             	add    esp,0xc
c0026299:	89 c7                	mov    edi,eax
c002629b:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00262a1:	68 84 37 03 c0       	push   0xc0033784
c00262a6:	50                   	push   eax
c00262a7:	e8 a0 43 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c00262ac:	58                   	pop    eax
c00262ad:	5a                   	pop    edx
c00262ae:	6a 12                	push   0x12
c00262b0:	57                   	push   edi
c00262b1:	e8 b4 43 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c00262b6:	59                   	pop    ecx
c00262b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00262b9:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00262bd:	51                   	push   ecx
c00262be:	6a 00                	push   0x0
c00262c0:	6a 00                	push   0x0
c00262c2:	68 00 00 11 00       	push   0x110000
c00262c7:	57                   	push   edi
c00262c8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00262cb:	83 c4 14             	add    esp,0x14
c00262ce:	57                   	push   edi
c00262cf:	e8 f4 43 ff ff       	call   c001a6c8 <File::close()>
c00262d4:	8b 07                	mov    eax,DWORD PTR [edi]
c00262d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00262d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00262dc:	c6 05 20 12 04 c0 01 	mov    BYTE PTR ds:0xc0041220,0x1
c00262e3:	83 c4 10             	add    esp,0x10
c00262e6:	fa                   	cli    
c00262e7:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00262ed:	80 3d 29 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041229,0x0
c00262f4:	75 15                	jne    c002630b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c00262f6:	e8 91 f4 ff ff       	call   c002578c <schedule()>
c00262fb:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026300:	48                   	dec    eax
c0026301:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026306:	75 de                	jne    c00262e6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026308:	fb                   	sti    
c0026309:	eb db                	jmp    c00262e6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c002630b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002630f:	a1 2c 12 04 c0       	mov    eax,ds:0xc004122c
c0026314:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c002631e:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0026322:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0026326:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c002632a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c002632e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026332:	0f b7 f6             	movzx  esi,si
c0026335:	0f b7 db             	movzx  ebx,bx
c0026338:	50                   	push   eax
c0026339:	6a 20                	push   0x20
c002633b:	6a 00                	push   0x0
c002633d:	68 40 12 04 c0       	push   0xc0041240
c0026342:	e8 a9 a1 fd ff       	call   c00004f0 <memset>
c0026347:	5a                   	pop    edx
c0026348:	59                   	pop    ecx
c0026349:	56                   	push   esi
c002634a:	53                   	push   ebx
c002634b:	e8 be fd ff ff       	call   c002610e <Vm::realToLinear(unsigned short, unsigned short)>
c0026350:	83 c4 10             	add    esp,0x10
c0026353:	89 c7                	mov    edi,eax
c0026355:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0026359:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c002635d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002635f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026364:	c6 05 29 12 04 c0 00 	mov    BYTE PTR ds:0xc0041229,0x0
c002636b:	48                   	dec    eax
c002636c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026371:	75 01                	jne    c0026374 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c0026373:	fb                   	sti    
c0026374:	83 ec 0c             	sub    esp,0xc
c0026377:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c002637d:	e8 02 f7 ff ff       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c0026382:	83 c4 3c             	add    esp,0x3c
c0026385:	b0 01                	mov    al,0x1
c0026387:	5b                   	pop    ebx
c0026388:	5e                   	pop    esi
c0026389:	5f                   	pop    edi
c002638a:	5d                   	pop    ebp
c002638b:	c3                   	ret    

c002638c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c002638c:	55                   	push   ebp
c002638d:	57                   	push   edi
c002638e:	56                   	push   esi
c002638f:	53                   	push   ebx
c0026390:	83 ec 2c             	sub    esp,0x2c
c0026393:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0026397:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002639b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002639f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00263a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263a7:	80 3d 20 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041220,0x0
c00263ae:	75 5d                	jne    c002640d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00263b0:	83 ec 0c             	sub    esp,0xc
c00263b3:	68 14 01 00 00       	push   0x114
c00263b8:	e8 fa 01 ff ff       	call   c00165b7 <malloc>
c00263bd:	83 c4 0c             	add    esp,0xc
c00263c0:	89 c6                	mov    esi,eax
c00263c2:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00263c8:	68 84 37 03 c0       	push   0xc0033784
c00263cd:	50                   	push   eax
c00263ce:	e8 79 42 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c00263d3:	58                   	pop    eax
c00263d4:	5a                   	pop    edx
c00263d5:	6a 12                	push   0x12
c00263d7:	56                   	push   esi
c00263d8:	e8 8d 42 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c00263dd:	59                   	pop    ecx
c00263de:	8b 06                	mov    eax,DWORD PTR [esi]
c00263e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00263e4:	52                   	push   edx
c00263e5:	6a 00                	push   0x0
c00263e7:	6a 00                	push   0x0
c00263e9:	68 00 00 11 00       	push   0x110000
c00263ee:	56                   	push   esi
c00263ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00263f2:	83 c4 14             	add    esp,0x14
c00263f5:	56                   	push   esi
c00263f6:	e8 cd 42 ff ff       	call   c001a6c8 <File::close()>
c00263fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00263fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0026400:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0026403:	c6 05 20 12 04 c0 01 	mov    BYTE PTR ds:0xc0041220,0x1
c002640a:	83 c4 10             	add    esp,0x10
c002640d:	50                   	push   eax
c002640e:	50                   	push   eax
c002640f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026413:	68 9f 37 03 c0       	push   0xc003379f
c0026418:	e8 28 30 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002641d:	83 c4 10             	add    esp,0x10
c0026420:	fa                   	cli    
c0026421:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026427:	0f b6 35 29 12 04 c0 	movzx  esi,BYTE PTR ds:0xc0041229
c002642e:	89 f0                	mov    eax,esi
c0026430:	84 c0                	test   al,al
c0026432:	75 15                	jne    c0026449 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0026434:	e8 53 f3 ff ff       	call   c002578c <schedule()>
c0026439:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002643e:	48                   	dec    eax
c002643f:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026444:	75 da                	jne    c0026420 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026446:	fb                   	sti    
c0026447:	eb d7                	jmp    c0026420 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026449:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002644d:	a1 2c 12 04 c0       	mov    eax,ds:0xc004122c
c0026452:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c002645c:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c0026460:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0026464:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0026468:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c002646c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0026470:	50                   	push   eax
c0026471:	6a 20                	push   0x20
c0026473:	6a 00                	push   0x0
c0026475:	68 40 12 04 c0       	push   0xc0041240
c002647a:	e8 71 a0 fd ff       	call   c00004f0 <memset>
c002647f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0026486:	e8 2c 01 ff ff       	call   c00165b7 <malloc>
c002648b:	83 c4 0c             	add    esp,0xc
c002648e:	89 c3                	mov    ebx,eax
c0026490:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0026496:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002649a:	50                   	push   eax
c002649b:	e8 ac 41 ff ff       	call   c001a64c <File::File(char const*, Process*)>
c00264a0:	83 c4 10             	add    esp,0x10
c00264a3:	85 db                	test   ebx,ebx
c00264a5:	75 0a                	jne    c00264b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00264a7:	83 ec 0c             	sub    esp,0xc
c00264aa:	68 c1 37 03 c0       	push   0xc00337c1
c00264af:	eb 2b                	jmp    c00264dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c00264b1:	50                   	push   eax
c00264b2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00264b6:	50                   	push   eax
c00264b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00264bb:	50                   	push   eax
c00264bc:	53                   	push   ebx
c00264bd:	e8 aa 44 ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c00264c2:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00264c6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00264ca:	83 c4 10             	add    esp,0x10
c00264cd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00264d2:	74 27                	je     c00264fb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16f>
c00264d4:	83 ec 0c             	sub    esp,0xc
c00264d7:	68 d5 37 03 c0       	push   0xc00337d5
c00264dc:	e8 9d a2 ff ff       	call   c002077e <KePanic(char const*)>
c00264e1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00264e6:	83 c4 10             	add    esp,0x10
c00264e9:	48                   	dec    eax
c00264ea:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00264ef:	85 c0                	test   eax,eax
c00264f1:	75 01                	jne    c00264f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c00264f3:	fb                   	sti    
c00264f4:	31 f6                	xor    esi,esi
c00264f6:	e9 8f 00 00 00       	jmp    c002658a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c00264fb:	51                   	push   ecx
c00264fc:	51                   	push   ecx
c00264fd:	6a 01                	push   0x1
c00264ff:	53                   	push   ebx
c0026500:	e8 65 41 ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0026505:	83 c4 10             	add    esp,0x10
c0026508:	85 c0                	test   eax,eax
c002650a:	74 26                	je     c0026532 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a6>
c002650c:	83 ec 0c             	sub    esp,0xc
c002650f:	68 ee 37 03 c0       	push   0xc00337ee
c0026514:	e8 65 a2 ff ff       	call   c002077e <KePanic(char const*)>
c0026519:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002651e:	83 c4 10             	add    esp,0x10
c0026521:	48                   	dec    eax
c0026522:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026527:	85 c0                	test   eax,eax
c0026529:	75 c9                	jne    c00264f4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c002652b:	fb                   	sti    
c002652c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0026530:	eb 58                	jmp    c002658a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c0026532:	0f b7 ff             	movzx  edi,di
c0026535:	50                   	push   eax
c0026536:	50                   	push   eax
c0026537:	0f b7 c5             	movzx  eax,bp
c002653a:	57                   	push   edi
c002653b:	50                   	push   eax
c002653c:	e8 cd fb ff ff       	call   c002610e <Vm::realToLinear(unsigned short, unsigned short)>
c0026541:	5a                   	pop    edx
c0026542:	8b 13                	mov    edx,DWORD PTR [ebx]
c0026544:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0026548:	51                   	push   ecx
c0026549:	50                   	push   eax
c002654a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002654e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026552:	53                   	push   ebx
c0026553:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0026556:	83 c4 14             	add    esp,0x14
c0026559:	53                   	push   ebx
c002655a:	e8 69 41 ff ff       	call   c001a6c8 <File::close()>
c002655f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026564:	83 c4 10             	add    esp,0x10
c0026567:	48                   	dec    eax
c0026568:	c6 05 29 12 04 c0 00 	mov    BYTE PTR ds:0xc0041229,0x0
c002656f:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026574:	85 c0                	test   eax,eax
c0026576:	75 01                	jne    c0026579 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ed>
c0026578:	fb                   	sti    
c0026579:	83 ec 0c             	sub    esp,0xc
c002657c:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c0026582:	e8 fd f4 ff ff       	call   c0025a84 <unblockTask(ThreadControlBlock*)>
c0026587:	83 c4 10             	add    esp,0x10
c002658a:	83 c4 2c             	add    esp,0x2c
c002658d:	89 f0                	mov    eax,esi
c002658f:	5b                   	pop    ebx
c0026590:	5e                   	pop    esi
c0026591:	5f                   	pop    edi
c0026592:	5d                   	pop    ebp
c0026593:	c3                   	ret    

c0026594 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0026594:	57                   	push   edi
c0026595:	56                   	push   esi
c0026596:	53                   	push   ebx
c0026597:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002659b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002659f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00265a3:	83 e8 06             	sub    eax,0x6
c00265a6:	0f b7 c0             	movzx  eax,ax
c00265a9:	50                   	push   eax
c00265aa:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00265af:	50                   	push   eax
c00265b0:	e8 59 fb ff ff       	call   c002610e <Vm::realToLinear(unsigned short, unsigned short)>
c00265b5:	5a                   	pop    edx
c00265b6:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00265b9:	59                   	pop    ecx
c00265ba:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00265bd:	8d 51 fa             	lea    edx,[ecx-0x6]
c00265c0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00265c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00265c9:	8d 56 02             	lea    edx,[esi+0x2]
c00265cc:	66 89 10             	mov    WORD PTR [eax],dx
c00265cf:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00265d3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00265d7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00265da:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00265de:	0f b6 f1             	movzx  esi,cl
c00265e1:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00265e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00265eb:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00265ef:	0f b6 d5             	movzx  edx,ch
c00265f2:	74 0a                	je     c00265fe <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00265f4:	c1 e2 08             	shl    edx,0x8
c00265f7:	09 f2                	or     edx,esi
c00265f9:	80 ce 02             	or     dh,0x2
c00265fc:	eb 08                	jmp    c0026606 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00265fe:	c1 e2 08             	shl    edx,0x8
c0026601:	09 f2                	or     edx,esi
c0026603:	80 e6 fd             	and    dh,0xfd
c0026606:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c002660a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002660f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026613:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c002661b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c002661e:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026626:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026629:	5b                   	pop    ebx
c002662a:	5e                   	pop    esi
c002662b:	5f                   	pop    edi
c002662c:	c3                   	ret    

c002662d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c002662d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026632:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026637:	c1 e0 04             	shl    eax,0x4
c002663a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c002663d:	c3                   	ret    

c002663e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c002663e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026643:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026648:	c1 e0 04             	shl    eax,0x4
c002664b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c002664f:	c3                   	ret    

c0026650 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026650:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026655:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002665a:	c1 e0 04             	shl    eax,0x4
c002665d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026660:	c3                   	ret    

c0026661 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026661:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026666:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002666b:	c1 e0 04             	shl    eax,0x4
c002666e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026672:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0026675:	c3                   	ret    

c0026676 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0026676:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002667b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026680:	c1 e0 04             	shl    eax,0x4
c0026683:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026687:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c002668b:	c3                   	ret    

c002668c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c002668c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026691:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026696:	c1 e0 04             	shl    eax,0x4
c0026699:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002669d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00266a0:	c3                   	ret    

c00266a1 <Vm::faultHandler(regs*)>:
c00266a1:	55                   	push   ebp
c00266a2:	57                   	push   edi
c00266a3:	56                   	push   esi
c00266a4:	53                   	push   ebx
c00266a5:	83 ec 2c             	sub    esp,0x2c
c00266a8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00266ac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00266af:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00266b3:	0f b7 f8             	movzx  edi,ax
c00266b6:	52                   	push   edx
c00266b7:	0f b7 c0             	movzx  eax,ax
c00266ba:	50                   	push   eax
c00266bb:	e8 4e fa ff ff       	call   c002610e <Vm::realToLinear(unsigned short, unsigned short)>
c00266c0:	5a                   	pop    edx
c00266c1:	59                   	pop    ecx
c00266c2:	89 c1                	mov    ecx,eax
c00266c4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00266c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00266cb:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00266d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00266d4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00266d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00266db:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00266e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00266e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00266e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00266ec:	e8 1d fa ff ff       	call   c002610e <Vm::realToLinear(unsigned short, unsigned short)>
c00266f1:	5e                   	pop    esi
c00266f2:	be 06 00 00 00       	mov    esi,0x6
c00266f7:	5d                   	pop    ebp
c00266f8:	31 ed                	xor    ebp,ebp
c00266fa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00266ff:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026702:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026708:	0f 84 74 02 00 00    	je     c0026982 <Vm::faultHandler(regs*)+0x2e1>
c002670e:	0f 87 94 00 00 00    	ja     c00267a8 <Vm::faultHandler(regs*)+0x107>
c0026714:	83 fa 66             	cmp    edx,0x66
c0026717:	0f 84 e2 01 00 00    	je     c00268ff <Vm::faultHandler(regs*)+0x25e>
c002671d:	77 47                	ja     c0026766 <Vm::faultHandler(regs*)+0xc5>
c002671f:	83 fa 36             	cmp    edx,0x36
c0026722:	0f 84 ca 01 00 00    	je     c00268f2 <Vm::faultHandler(regs*)+0x251>
c0026728:	77 1a                	ja     c0026744 <Vm::faultHandler(regs*)+0xa3>
c002672a:	83 fa 26             	cmp    edx,0x26
c002672d:	0f 84 98 01 00 00    	je     c00268cb <Vm::faultHandler(regs*)+0x22a>
c0026733:	83 fa 2e             	cmp    edx,0x2e
c0026736:	0f 85 21 06 00 00    	jne    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c002673c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002673f:	31 f6                	xor    esi,esi
c0026741:	41                   	inc    ecx
c0026742:	eb bb                	jmp    c00266ff <Vm::faultHandler(regs*)+0x5e>
c0026744:	83 fa 64             	cmp    edx,0x64
c0026747:	0f 84 8b 01 00 00    	je     c00268d8 <Vm::faultHandler(regs*)+0x237>
c002674d:	0f 87 92 01 00 00    	ja     c00268e5 <Vm::faultHandler(regs*)+0x244>
c0026753:	83 fa 3e             	cmp    edx,0x3e
c0026756:	0f 85 01 06 00 00    	jne    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c002675c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002675f:	be 01 00 00 00       	mov    esi,0x1
c0026764:	eb db                	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c0026766:	83 fa 6d             	cmp    edx,0x6d
c0026769:	0f 84 34 03 00 00    	je     c0026aa3 <Vm::faultHandler(regs*)+0x402>
c002676f:	77 17                	ja     c0026788 <Vm::faultHandler(regs*)+0xe7>
c0026771:	83 fa 67             	cmp    edx,0x67
c0026774:	0f 84 92 01 00 00    	je     c002690c <Vm::faultHandler(regs*)+0x26b>
c002677a:	83 fa 6c             	cmp    edx,0x6c
c002677d:	0f 84 b1 02 00 00    	je     c0026a34 <Vm::faultHandler(regs*)+0x393>
c0026783:	e9 d5 05 00 00       	jmp    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c0026788:	83 fa 6f             	cmp    edx,0x6f
c002678b:	0f 84 3d 04 00 00    	je     c0026bce <Vm::faultHandler(regs*)+0x52d>
c0026791:	0f 82 9f 03 00 00    	jb     c0026b36 <Vm::faultHandler(regs*)+0x495>
c0026797:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c002679d:	0f 84 76 01 00 00    	je     c0026919 <Vm::faultHandler(regs*)+0x278>
c00267a3:	e9 b5 05 00 00       	jmp    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c00267a8:	81 fa ec 00 00 00    	cmp    edx,0xec
c00267ae:	0f 84 51 05 00 00    	je     c0026d05 <Vm::faultHandler(regs*)+0x664>
c00267b4:	0f 87 a9 00 00 00    	ja     c0026863 <Vm::faultHandler(regs*)+0x1c2>
c00267ba:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00267c0:	0f 84 d0 04 00 00    	je     c0026c96 <Vm::faultHandler(regs*)+0x5f5>
c00267c6:	77 78                	ja     c0026840 <Vm::faultHandler(regs*)+0x19f>
c00267c8:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00267ce:	0f 84 0e 02 00 00    	je     c00269e2 <Vm::faultHandler(regs*)+0x341>
c00267d4:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00267da:	0f 85 7d 05 00 00    	jne    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c00267e0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00267e4:	89 d1                	mov    ecx,edx
c00267e6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00267e9:	c1 e1 08             	shl    ecx,0x8
c00267ec:	09 ca                	or     edx,ecx
c00267ee:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00267f1:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00267f5:	89 d1                	mov    ecx,edx
c00267f7:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00267fb:	c1 e1 08             	shl    ecx,0x8
c00267fe:	09 ca                	or     edx,ecx
c0026800:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026803:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026807:	89 d1                	mov    ecx,edx
c0026809:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002680d:	c1 e1 08             	shl    ecx,0x8
c0026810:	09 ca                	or     edx,ecx
c0026812:	81 ca 00 02 02 00    	or     edx,0x20200
c0026818:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002681b:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002681f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026825:	d1 e8                	shr    eax,1
c0026827:	83 e0 01             	and    eax,0x1
c002682a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002682d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026830:	83 c0 06             	add    eax,0x6
c0026833:	25 ff ff 00 00       	and    eax,0xffff
c0026838:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002683b:	e9 19 05 00 00       	jmp    c0026d59 <Vm::faultHandler(regs*)+0x6b8>
c0026840:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026846:	0f 84 8f 04 00 00    	je     c0026cdb <Vm::faultHandler(regs*)+0x63a>
c002684c:	0f 82 60 04 00 00    	jb     c0026cb2 <Vm::faultHandler(regs*)+0x611>
c0026852:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0026858:	0f 84 94 04 00 00    	je     c0026cf2 <Vm::faultHandler(regs*)+0x651>
c002685e:	e9 fa 04 00 00       	jmp    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c0026863:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026869:	0f 84 d7 04 00 00    	je     c0026d46 <Vm::faultHandler(regs*)+0x6a5>
c002686f:	77 2e                	ja     c002689f <Vm::faultHandler(regs*)+0x1fe>
c0026871:	81 fa ed 00 00 00    	cmp    edx,0xed
c0026877:	0f 84 a4 04 00 00    	je     c0026d21 <Vm::faultHandler(regs*)+0x680>
c002687d:	81 fa ee 00 00 00    	cmp    edx,0xee
c0026883:	0f 85 d4 04 00 00    	jne    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c0026889:	50                   	push   eax
c002688a:	50                   	push   eax
c002688b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002688f:	50                   	push   eax
c0026890:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026894:	50                   	push   eax
c0026895:	e8 3e f8 ff ff       	call   c00260d8 <Vm::outbv(unsigned short, unsigned char)>
c002689a:	e9 9f 04 00 00       	jmp    c0026d3e <Vm::faultHandler(regs*)+0x69d>
c002689f:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00268a5:	0f 84 6d 01 00 00    	je     c0026a18 <Vm::faultHandler(regs*)+0x377>
c00268ab:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00268b1:	0f 84 6f 01 00 00    	je     c0026a26 <Vm::faultHandler(regs*)+0x385>
c00268b7:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00268bd:	0f 85 9a 04 00 00    	jne    c0026d5d <Vm::faultHandler(regs*)+0x6bc>
c00268c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268c6:	e9 76 fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c00268cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268ce:	be 02 00 00 00       	mov    esi,0x2
c00268d3:	e9 69 fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c00268d8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268db:	be 03 00 00 00       	mov    esi,0x3
c00268e0:	e9 5c fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c00268e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268e8:	be 04 00 00 00       	mov    esi,0x4
c00268ed:	e9 4f fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c00268f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268f5:	be 05 00 00 00       	mov    esi,0x5
c00268fa:	e9 42 fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c00268ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026902:	bd 01 00 00 00       	mov    ebp,0x1
c0026907:	e9 35 fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c002690c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002690f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026914:	e9 28 fe ff ff       	jmp    c0026741 <Vm::faultHandler(regs*)+0xa0>
c0026919:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002691c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026920:	83 e5 01             	and    ebp,0x1
c0026923:	74 30                	je     c0026955 <Vm::faultHandler(regs*)+0x2b4>
c0026925:	83 e9 04             	sub    ecx,0x4
c0026928:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002692e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026934:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026937:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002693a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026940:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026944:	0f 84 0c 04 00 00    	je     c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c002694a:	80 ce 02             	or     dh,0x2
c002694d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026950:	e9 01 04 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026955:	83 e9 02             	sub    ecx,0x2
c0026958:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002695e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026961:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026965:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002696b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002696f:	74 05                	je     c0026976 <Vm::faultHandler(regs*)+0x2d5>
c0026971:	80 ce 02             	or     dh,0x2
c0026974:	eb 03                	jmp    c0026979 <Vm::faultHandler(regs*)+0x2d8>
c0026976:	80 e6 fd             	and    dh,0xfd
c0026979:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002697d:	e9 d4 03 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026982:	83 e5 01             	and    ebp,0x1
c0026985:	74 2a                	je     c00269b1 <Vm::faultHandler(regs*)+0x310>
c0026987:	8b 10                	mov    edx,DWORD PTR [eax]
c0026989:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002698f:	81 ca 00 02 02 00    	or     edx,0x20200
c0026995:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026998:	8b 00                	mov    eax,DWORD PTR [eax]
c002699a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00269a0:	c1 e8 09             	shr    eax,0x9
c00269a3:	83 e0 01             	and    eax,0x1
c00269a6:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00269a9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00269ac:	83 c0 04             	add    eax,0x4
c00269af:	eb 24                	jmp    c00269d5 <Vm::faultHandler(regs*)+0x334>
c00269b1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00269b4:	81 ca 00 02 02 00    	or     edx,0x20200
c00269ba:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00269bd:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00269c0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00269c6:	c1 e8 09             	shr    eax,0x9
c00269c9:	83 e0 01             	and    eax,0x1
c00269cc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00269cf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00269d2:	83 c0 02             	add    eax,0x2
c00269d5:	25 ff ff 00 00       	and    eax,0xffff
c00269da:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00269dd:	e9 74 03 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c00269e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00269e6:	3d ee 00 00 00       	cmp    eax,0xee
c00269eb:	75 10                	jne    c00269fd <Vm::faultHandler(regs*)+0x35c>
c00269ed:	83 ec 0c             	sub    esp,0xc
c00269f0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00269f3:	e8 7d f7 ff ff       	call   c0026175 <Vm::mainloop3(unsigned long)>
c00269f8:	e9 44 03 00 00       	jmp    c0026d41 <Vm::faultHandler(regs*)+0x6a0>
c00269fd:	83 ec 0c             	sub    esp,0xc
c0026a00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026a08:	51                   	push   ecx
c0026a09:	50                   	push   eax
c0026a0a:	53                   	push   ebx
c0026a0b:	e8 84 fb ff ff       	call   c0026594 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0026a10:	83 c4 20             	add    esp,0x20
c0026a13:	e9 41 03 00 00       	jmp    c0026d59 <Vm::faultHandler(regs*)+0x6b8>
c0026a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026a1d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026a21:	e9 30 03 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026a26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026a2b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0026a2f:	e9 22 03 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026a34:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026a37:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026a3c:	74 2b                	je     c0026a69 <Vm::faultHandler(regs*)+0x3c8>
c0026a3e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026a45:	76 22                	jbe    c0026a69 <Vm::faultHandler(regs*)+0x3c8>
c0026a47:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026a4b:	50                   	push   eax
c0026a4c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a50:	50                   	push   eax
c0026a51:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a55:	50                   	push   eax
c0026a56:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a5a:	50                   	push   eax
c0026a5b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a5f:	50                   	push   eax
c0026a60:	6a 6c                	push   0x6c
c0026a62:	6a 6c                	push   0x6c
c0026a64:	e9 bd 01 00 00       	jmp    c0026c26 <Vm::faultHandler(regs*)+0x585>
c0026a69:	83 ec 0c             	sub    esp,0xc
c0026a6c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026a70:	0f b7 f6             	movzx  esi,si
c0026a73:	50                   	push   eax
c0026a74:	e8 4c f6 ff ff       	call   c00260c5 <Vm::inbv(unsigned short)>
c0026a79:	83 c4 0c             	add    esp,0xc
c0026a7c:	0f b6 c0             	movzx  eax,al
c0026a7f:	50                   	push   eax
c0026a80:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0026a84:	50                   	push   eax
c0026a85:	56                   	push   esi
c0026a86:	e8 d6 fb ff ff       	call   c0026661 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026a8b:	83 c4 10             	add    esp,0x10
c0026a8e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026a91:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026a95:	74 03                	je     c0026a9a <Vm::faultHandler(regs*)+0x3f9>
c0026a97:	48                   	dec    eax
c0026a98:	eb 01                	jmp    c0026a9b <Vm::faultHandler(regs*)+0x3fa>
c0026a9a:	40                   	inc    eax
c0026a9b:	0f b7 c0             	movzx  eax,ax
c0026a9e:	e9 8b 00 00 00       	jmp    c0026b2e <Vm::faultHandler(regs*)+0x48d>
c0026aa3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026aa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026aa9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026aae:	74 29                	je     c0026ad9 <Vm::faultHandler(regs*)+0x438>
c0026ab0:	3d ff ff 00 00       	cmp    eax,0xffff
c0026ab5:	76 22                	jbe    c0026ad9 <Vm::faultHandler(regs*)+0x438>
c0026ab7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026abb:	50                   	push   eax
c0026abc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026ac0:	50                   	push   eax
c0026ac1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026ac5:	50                   	push   eax
c0026ac6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026aca:	50                   	push   eax
c0026acb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026acf:	50                   	push   eax
c0026ad0:	6a 6d                	push   0x6d
c0026ad2:	6a 6d                	push   0x6d
c0026ad4:	e9 4d 01 00 00       	jmp    c0026c26 <Vm::faultHandler(regs*)+0x585>
c0026ad9:	0f b7 c8             	movzx  ecx,ax
c0026adc:	0f b7 f6             	movzx  esi,si
c0026adf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026ae2:	83 e5 01             	and    ebp,0x1
c0026ae5:	74 20                	je     c0026b07 <Vm::faultHandler(regs*)+0x466>
c0026ae7:	ed                   	in     eax,dx
c0026ae8:	55                   	push   ebp
c0026ae9:	50                   	push   eax
c0026aea:	51                   	push   ecx
c0026aeb:	56                   	push   esi
c0026aec:	e8 9b fb ff ff       	call   c002668c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026af1:	83 c4 10             	add    esp,0x10
c0026af4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026af7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026afb:	74 05                	je     c0026b02 <Vm::faultHandler(regs*)+0x461>
c0026afd:	83 e8 04             	sub    eax,0x4
c0026b00:	eb 27                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x488>
c0026b02:	83 c0 04             	add    eax,0x4
c0026b05:	eb 22                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x488>
c0026b07:	66 ed                	in     ax,dx
c0026b09:	0f b7 c0             	movzx  eax,ax
c0026b0c:	57                   	push   edi
c0026b0d:	50                   	push   eax
c0026b0e:	51                   	push   ecx
c0026b0f:	56                   	push   esi
c0026b10:	e8 61 fb ff ff       	call   c0026676 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026b15:	83 c4 10             	add    esp,0x10
c0026b18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026b1b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026b1f:	74 05                	je     c0026b26 <Vm::faultHandler(regs*)+0x485>
c0026b21:	83 e8 02             	sub    eax,0x2
c0026b24:	eb 03                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x488>
c0026b26:	83 c0 02             	add    eax,0x2
c0026b29:	25 ff ff 00 00       	and    eax,0xffff
c0026b2e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026b31:	e9 20 02 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026b36:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b39:	0f b6 f0             	movzx  esi,al
c0026b3c:	83 fe 05             	cmp    esi,0x5
c0026b3f:	77 23                	ja     c0026b64 <Vm::faultHandler(regs*)+0x4c3>
c0026b41:	ff 24 b5 64 38 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc79c]
c0026b48:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026b4d:	eb 15                	jmp    c0026b64 <Vm::faultHandler(regs*)+0x4c3>
c0026b4f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026b53:	eb 0f                	jmp    c0026b64 <Vm::faultHandler(regs*)+0x4c3>
c0026b55:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026b59:	eb 09                	jmp    c0026b64 <Vm::faultHandler(regs*)+0x4c3>
c0026b5b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026b5f:	eb 03                	jmp    c0026b64 <Vm::faultHandler(regs*)+0x4c3>
c0026b61:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026b64:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026b67:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026b6c:	74 29                	je     c0026b97 <Vm::faultHandler(regs*)+0x4f6>
c0026b6e:	3d ff ff 00 00       	cmp    eax,0xffff
c0026b73:	76 22                	jbe    c0026b97 <Vm::faultHandler(regs*)+0x4f6>
c0026b75:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026b79:	50                   	push   eax
c0026b7a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026b7e:	50                   	push   eax
c0026b7f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026b83:	50                   	push   eax
c0026b84:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026b88:	50                   	push   eax
c0026b89:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026b8d:	50                   	push   eax
c0026b8e:	6a 6e                	push   0x6e
c0026b90:	6a 6e                	push   0x6e
c0026b92:	e9 8f 00 00 00       	jmp    c0026c26 <Vm::faultHandler(regs*)+0x585>
c0026b97:	0f b7 c0             	movzx  eax,ax
c0026b9a:	52                   	push   edx
c0026b9b:	52                   	push   edx
c0026b9c:	50                   	push   eax
c0026b9d:	57                   	push   edi
c0026b9e:	e8 8a fa ff ff       	call   c002662d <Vm::readByteFromReal(unsigned short, unsigned short)>
c0026ba3:	59                   	pop    ecx
c0026ba4:	0f b6 c0             	movzx  eax,al
c0026ba7:	5e                   	pop    esi
c0026ba8:	50                   	push   eax
c0026ba9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026bad:	50                   	push   eax
c0026bae:	e8 25 f5 ff ff       	call   c00260d8 <Vm::outbv(unsigned short, unsigned char)>
c0026bb3:	83 c4 10             	add    esp,0x10
c0026bb6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026bb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026bbd:	74 03                	je     c0026bc2 <Vm::faultHandler(regs*)+0x521>
c0026bbf:	48                   	dec    eax
c0026bc0:	eb 01                	jmp    c0026bc3 <Vm::faultHandler(regs*)+0x522>
c0026bc2:	40                   	inc    eax
c0026bc3:	0f b7 c0             	movzx  eax,ax
c0026bc6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026bc9:	e9 88 01 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026bce:	8d 46 ff             	lea    eax,[esi-0x1]
c0026bd1:	0f b6 f0             	movzx  esi,al
c0026bd4:	83 fe 05             	cmp    esi,0x5
c0026bd7:	77 1e                	ja     c0026bf7 <Vm::faultHandler(regs*)+0x556>
c0026bd9:	ff 24 b5 7c 38 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc784]
c0026be0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026be4:	eb 11                	jmp    c0026bf7 <Vm::faultHandler(regs*)+0x556>
c0026be6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026be9:	eb 0c                	jmp    c0026bf7 <Vm::faultHandler(regs*)+0x556>
c0026beb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026bee:	eb 07                	jmp    c0026bf7 <Vm::faultHandler(regs*)+0x556>
c0026bf0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026bf3:	eb 02                	jmp    c0026bf7 <Vm::faultHandler(regs*)+0x556>
c0026bf5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026bf7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026bfa:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026bff:	74 37                	je     c0026c38 <Vm::faultHandler(regs*)+0x597>
c0026c01:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026c07:	76 2f                	jbe    c0026c38 <Vm::faultHandler(regs*)+0x597>
c0026c09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026c0d:	50                   	push   eax
c0026c0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026c12:	50                   	push   eax
c0026c13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026c17:	50                   	push   eax
c0026c18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026c1c:	50                   	push   eax
c0026c1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026c21:	50                   	push   eax
c0026c22:	6a 6f                	push   0x6f
c0026c24:	6a 6f                	push   0x6f
c0026c26:	68 07 38 03 c0       	push   0xc0033807
c0026c2b:	e8 15 28 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026c30:	83 c4 20             	add    esp,0x20
c0026c33:	e9 83 01 00 00       	jmp    c0026dbb <Vm::faultHandler(regs*)+0x71a>
c0026c38:	0f b7 d7             	movzx  edx,di
c0026c3b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026c3e:	0f b7 c6             	movzx  eax,si
c0026c41:	81 e1 00 04 00 00    	and    ecx,0x400
c0026c47:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026c4a:	83 e5 01             	and    ebp,0x1
c0026c4d:	74 1d                	je     c0026c6c <Vm::faultHandler(regs*)+0x5cb>
c0026c4f:	55                   	push   ebp
c0026c50:	55                   	push   ebp
c0026c51:	50                   	push   eax
c0026c52:	52                   	push   edx
c0026c53:	e8 f8 f9 ff ff       	call   c0026650 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026c58:	83 c4 10             	add    esp,0x10
c0026c5b:	89 fa                	mov    edx,edi
c0026c5d:	ef                   	out    dx,eax
c0026c5e:	85 c9                	test   ecx,ecx
c0026c60:	74 05                	je     c0026c67 <Vm::faultHandler(regs*)+0x5c6>
c0026c62:	83 ee 04             	sub    esi,0x4
c0026c65:	eb 21                	jmp    c0026c88 <Vm::faultHandler(regs*)+0x5e7>
c0026c67:	83 c6 04             	add    esi,0x4
c0026c6a:	eb 1c                	jmp    c0026c88 <Vm::faultHandler(regs*)+0x5e7>
c0026c6c:	55                   	push   ebp
c0026c6d:	55                   	push   ebp
c0026c6e:	50                   	push   eax
c0026c6f:	52                   	push   edx
c0026c70:	e8 c9 f9 ff ff       	call   c002663e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026c75:	83 c4 10             	add    esp,0x10
c0026c78:	89 fa                	mov    edx,edi
c0026c7a:	66 ef                	out    dx,ax
c0026c7c:	85 c9                	test   ecx,ecx
c0026c7e:	74 05                	je     c0026c85 <Vm::faultHandler(regs*)+0x5e4>
c0026c80:	83 ee 02             	sub    esi,0x2
c0026c83:	eb 03                	jmp    c0026c88 <Vm::faultHandler(regs*)+0x5e7>
c0026c85:	83 c6 02             	add    esi,0x2
c0026c88:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026c8e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026c91:	e9 c0 00 00 00       	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026c96:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026c9d:	83 ec 0c             	sub    esp,0xc
c0026ca0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026ca4:	50                   	push   eax
c0026ca5:	e8 1b f4 ff ff       	call   c00260c5 <Vm::inbv(unsigned short)>
c0026caa:	0f b6 c0             	movzx  eax,al
c0026cad:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026cb0:	eb 3a                	jmp    c0026cec <Vm::faultHandler(regs*)+0x64b>
c0026cb2:	83 e5 01             	and    ebp,0x1
c0026cb5:	74 07                	je     c0026cbe <Vm::faultHandler(regs*)+0x61d>
c0026cb7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026cbb:	ed                   	in     eax,dx
c0026cbc:	eb 14                	jmp    c0026cd2 <Vm::faultHandler(regs*)+0x631>
c0026cbe:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0026cc1:	66 31 f6             	xor    si,si
c0026cc4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026cc7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026ccb:	66 ed                	in     ax,dx
c0026ccd:	0f b7 c0             	movzx  eax,ax
c0026cd0:	09 f0                	or     eax,esi
c0026cd2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026cd5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026cd9:	eb 7e                	jmp    c0026d59 <Vm::faultHandler(regs*)+0x6b8>
c0026cdb:	52                   	push   edx
c0026cdc:	52                   	push   edx
c0026cdd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026ce1:	50                   	push   eax
c0026ce2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026ce6:	50                   	push   eax
c0026ce7:	e8 ec f3 ff ff       	call   c00260d8 <Vm::outbv(unsigned short, unsigned char)>
c0026cec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026cf0:	eb 4f                	jmp    c0026d41 <Vm::faultHandler(regs*)+0x6a0>
c0026cf2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026cf5:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026cf9:	83 e5 01             	and    ebp,0x1
c0026cfc:	74 03                	je     c0026d01 <Vm::faultHandler(regs*)+0x660>
c0026cfe:	ef                   	out    dx,eax
c0026cff:	eb d4                	jmp    c0026cd5 <Vm::faultHandler(regs*)+0x634>
c0026d01:	66 ef                	out    dx,ax
c0026d03:	eb d0                	jmp    c0026cd5 <Vm::faultHandler(regs*)+0x634>
c0026d05:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026d0c:	83 ec 0c             	sub    esp,0xc
c0026d0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026d13:	50                   	push   eax
c0026d14:	e8 ac f3 ff ff       	call   c00260c5 <Vm::inbv(unsigned short)>
c0026d19:	0f b6 c0             	movzx  eax,al
c0026d1c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026d1f:	eb 1d                	jmp    c0026d3e <Vm::faultHandler(regs*)+0x69d>
c0026d21:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026d24:	83 e5 01             	and    ebp,0x1
c0026d27:	74 03                	je     c0026d2c <Vm::faultHandler(regs*)+0x68b>
c0026d29:	ed                   	in     eax,dx
c0026d2a:	eb 0d                	jmp    c0026d39 <Vm::faultHandler(regs*)+0x698>
c0026d2c:	66 ed                	in     ax,dx
c0026d2e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026d31:	0f b7 c0             	movzx  eax,ax
c0026d34:	66 31 d2             	xor    dx,dx
c0026d37:	09 d0                	or     eax,edx
c0026d39:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026d3c:	eb 18                	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026d3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026d41:	83 c4 10             	add    esp,0x10
c0026d44:	eb 13                	jmp    c0026d59 <Vm::faultHandler(regs*)+0x6b8>
c0026d46:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026d49:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026d4c:	83 e5 01             	and    ebp,0x1
c0026d4f:	74 03                	je     c0026d54 <Vm::faultHandler(regs*)+0x6b3>
c0026d51:	ef                   	out    dx,eax
c0026d52:	eb 02                	jmp    c0026d56 <Vm::faultHandler(regs*)+0x6b5>
c0026d54:	66 ef                	out    dx,ax
c0026d56:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026d59:	b0 01                	mov    al,0x1
c0026d5b:	eb 60                	jmp    c0026dbd <Vm::faultHandler(regs*)+0x71c>
c0026d5d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026d61:	50                   	push   eax
c0026d62:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026d66:	50                   	push   eax
c0026d67:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026d6b:	50                   	push   eax
c0026d6c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026d70:	50                   	push   eax
c0026d71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026d75:	50                   	push   eax
c0026d76:	52                   	push   edx
c0026d77:	52                   	push   edx
c0026d78:	68 34 38 03 c0       	push   0xc0033834
c0026d7d:	e8 c3 26 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026d82:	83 c4 20             	add    esp,0x20
c0026d85:	83 ec 0c             	sub    esp,0xc
c0026d88:	6a 60                	push   0x60
c0026d8a:	e8 36 f3 ff ff       	call   c00260c5 <Vm::inbv(unsigned short)>
c0026d8f:	83 c4 10             	add    esp,0x10
c0026d92:	0f b6 d0             	movzx  edx,al
c0026d95:	83 fa 1c             	cmp    edx,0x1c
c0026d98:	74 05                	je     c0026d9f <Vm::faultHandler(regs*)+0x6fe>
c0026d9a:	83 fa 5a             	cmp    edx,0x5a
c0026d9d:	75 e6                	jne    c0026d85 <Vm::faultHandler(regs*)+0x6e4>
c0026d9f:	0f b6 c0             	movzx  eax,al
c0026da2:	83 f8 1c             	cmp    eax,0x1c
c0026da5:	74 05                	je     c0026dac <Vm::faultHandler(regs*)+0x70b>
c0026da7:	83 f8 5a             	cmp    eax,0x5a
c0026daa:	75 0f                	jne    c0026dbb <Vm::faultHandler(regs*)+0x71a>
c0026dac:	83 ec 0c             	sub    esp,0xc
c0026daf:	6a 60                	push   0x60
c0026db1:	e8 0f f3 ff ff       	call   c00260c5 <Vm::inbv(unsigned short)>
c0026db6:	83 c4 10             	add    esp,0x10
c0026db9:	eb e4                	jmp    c0026d9f <Vm::faultHandler(regs*)+0x6fe>
c0026dbb:	31 c0                	xor    eax,eax
c0026dbd:	83 c4 2c             	add    esp,0x2c
c0026dc0:	5b                   	pop    ebx
c0026dc1:	5e                   	pop    esi
c0026dc2:	5f                   	pop    edi
c0026dc3:	5d                   	pop    ebp
c0026dc4:	c3                   	ret    

c0026dc5 <noCopro(unsigned long)>:
c0026dc5:	c3                   	ret    

c0026dc6 <nmiHandler(regs*, void*)>:
c0026dc6:	83 ec 0c             	sub    esp,0xc
c0026dc9:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0026dce:	83 ec 0c             	sub    esp,0xc
c0026dd1:	50                   	push   eax
c0026dd2:	e8 63 ef fe ff       	call   c0015d3a <Computer::handleNMI()>
c0026dd7:	83 c4 10             	add    esp,0x10
c0026dda:	90                   	nop
c0026ddb:	83 c4 0c             	add    esp,0xc
c0026dde:	c3                   	ret    

c0026ddf <doubleFault(regs*, void*)>:
c0026ddf:	55                   	push   ebp
c0026de0:	89 e5                	mov    ebp,esp
c0026de2:	83 ec 08             	sub    esp,0x8
c0026de5:	83 ec 0c             	sub    esp,0xc
c0026de8:	68 94 38 03 c0       	push   0xc0033894
c0026ded:	e8 8c 99 ff ff       	call   c002077e <KePanic(char const*)>
c0026df2:	83 c4 10             	add    esp,0x10
c0026df5:	90                   	nop
c0026df6:	c9                   	leave  
c0026df7:	c3                   	ret    

c0026df8 <displayDebugInfo(regs*)>:
c0026df8:	83 ec 1c             	sub    esp,0x1c
c0026dfb:	0f 20 c0             	mov    eax,cr0
c0026dfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026e02:	0f 20 d0             	mov    eax,cr2
c0026e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026e09:	0f 20 d8             	mov    eax,cr3
c0026e0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e10:	0f 20 e0             	mov    eax,cr4
c0026e13:	89 04 24             	mov    DWORD PTR [esp],eax
c0026e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e1a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026e1d:	83 ec 08             	sub    esp,0x8
c0026e20:	50                   	push   eax
c0026e21:	68 b0 38 03 c0       	push   0xc00338b0
c0026e26:	e8 1a 26 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026e2b:	83 c4 10             	add    esp,0x10
c0026e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e32:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026e35:	83 ec 08             	sub    esp,0x8
c0026e38:	50                   	push   eax
c0026e39:	68 a1 38 03 c0       	push   0xc00338a1
c0026e3e:	e8 02 26 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026e43:	83 c4 10             	add    esp,0x10
c0026e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e4a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026e4d:	83 ec 08             	sub    esp,0x8
c0026e50:	50                   	push   eax
c0026e51:	68 ac 38 03 c0       	push   0xc00338ac
c0026e56:	e8 ea 25 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026e5b:	83 c4 10             	add    esp,0x10
c0026e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026e65:	83 ec 08             	sub    esp,0x8
c0026e68:	50                   	push   eax
c0026e69:	68 bb 38 03 c0       	push   0xc00338bb
c0026e6e:	e8 d2 25 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026e73:	83 c4 10             	add    esp,0x10
c0026e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e7a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026e7d:	83 ec 08             	sub    esp,0x8
c0026e80:	50                   	push   eax
c0026e81:	68 c6 38 03 c0       	push   0xc00338c6
c0026e86:	e8 ba 25 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026e8b:	83 c4 10             	add    esp,0x10
c0026e8e:	83 ec 08             	sub    esp,0x8
c0026e91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026e95:	68 d1 38 03 c0       	push   0xc00338d1
c0026e9a:	e8 a6 25 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026e9f:	83 c4 10             	add    esp,0x10
c0026ea2:	83 ec 08             	sub    esp,0x8
c0026ea5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026ea9:	68 dc 38 03 c0       	push   0xc00338dc
c0026eae:	e8 92 25 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026eb3:	83 c4 10             	add    esp,0x10
c0026eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026eba:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026ebd:	c1 e0 05             	shl    eax,0x5
c0026ec0:	8d 90 e0 4c 03 c0    	lea    edx,[eax-0x3ffcb320]
c0026ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026eca:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026ecd:	83 ec 04             	sub    esp,0x4
c0026ed0:	52                   	push   edx
c0026ed1:	50                   	push   eax
c0026ed2:	68 e7 38 03 c0       	push   0xc00338e7
c0026ed7:	e8 69 25 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0026edc:	83 c4 10             	add    esp,0x10
c0026edf:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026ee4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026eea:	83 ec 0c             	sub    esp,0xc
c0026eed:	50                   	push   eax
c0026eee:	e8 66 03 ff ff       	call   c0017259 <setActiveTerminal(VgaText*)>
c0026ef3:	83 c4 10             	add    esp,0x10
c0026ef6:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026efb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f01:	83 ec 08             	sub    esp,0x8
c0026f04:	68 f6 38 03 c0       	push   0xc00338f6
c0026f09:	50                   	push   eax
c0026f0a:	e8 97 06 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0026f0f:	83 c4 10             	add    esp,0x10
c0026f12:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026f21:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026f24:	83 ec 08             	sub    esp,0x8
c0026f27:	52                   	push   edx
c0026f28:	50                   	push   eax
c0026f29:	e8 32 06 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0026f2e:	83 c4 10             	add    esp,0x10
c0026f31:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f36:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f3c:	83 ec 08             	sub    esp,0x8
c0026f3f:	68 04 39 03 c0       	push   0xc0033904
c0026f44:	50                   	push   eax
c0026f45:	e8 5c 06 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0026f4a:	83 c4 10             	add    esp,0x10
c0026f4d:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f58:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026f5d:	8b 12                	mov    edx,DWORD PTR [edx]
c0026f5f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026f62:	83 c2 0c             	add    edx,0xc
c0026f65:	83 ec 08             	sub    esp,0x8
c0026f68:	52                   	push   edx
c0026f69:	50                   	push   eax
c0026f6a:	e8 37 06 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0026f6f:	83 c4 10             	add    esp,0x10
c0026f72:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f7d:	83 ec 08             	sub    esp,0x8
c0026f80:	68 0d 39 03 c0       	push   0xc003390d
c0026f85:	50                   	push   eax
c0026f86:	e8 1b 06 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0026f8b:	83 c4 10             	add    esp,0x10
c0026f8e:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f99:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026f9d:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026fa0:	83 ec 08             	sub    esp,0x8
c0026fa3:	52                   	push   edx
c0026fa4:	50                   	push   eax
c0026fa5:	e8 b6 05 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0026faa:	83 c4 10             	add    esp,0x10
c0026fad:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fb2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fb8:	83 ec 08             	sub    esp,0x8
c0026fbb:	68 15 39 03 c0       	push   0xc0033915
c0026fc0:	50                   	push   eax
c0026fc1:	e8 e0 05 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0026fc6:	83 c4 10             	add    esp,0x10
c0026fc9:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fce:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fd4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026fd8:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026fdb:	83 ec 08             	sub    esp,0x8
c0026fde:	52                   	push   edx
c0026fdf:	50                   	push   eax
c0026fe0:	e8 7b 05 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0026fe5:	83 c4 10             	add    esp,0x10
c0026fe8:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ff3:	83 ec 08             	sub    esp,0x8
c0026ff6:	68 1d 39 03 c0       	push   0xc003391d
c0026ffb:	50                   	push   eax
c0026ffc:	e8 a5 05 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0027001:	83 c4 10             	add    esp,0x10
c0027004:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027009:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002700f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027013:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0027016:	83 ec 08             	sub    esp,0x8
c0027019:	52                   	push   edx
c002701a:	50                   	push   eax
c002701b:	e8 40 05 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0027020:	83 c4 10             	add    esp,0x10
c0027023:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027028:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002702e:	83 ec 08             	sub    esp,0x8
c0027031:	68 25 39 03 c0       	push   0xc0033925
c0027036:	50                   	push   eax
c0027037:	e8 6a 05 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c002703c:	83 c4 10             	add    esp,0x10
c002703f:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027044:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002704a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002704e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0027051:	83 ec 08             	sub    esp,0x8
c0027054:	52                   	push   edx
c0027055:	50                   	push   eax
c0027056:	e8 05 05 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c002705b:	83 c4 10             	add    esp,0x10
c002705e:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027063:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027069:	83 ec 08             	sub    esp,0x8
c002706c:	68 2d 39 03 c0       	push   0xc003392d
c0027071:	50                   	push   eax
c0027072:	e8 2f 05 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0027077:	83 c4 10             	add    esp,0x10
c002707a:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002707f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027085:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027089:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c002708c:	83 ec 08             	sub    esp,0x8
c002708f:	52                   	push   edx
c0027090:	50                   	push   eax
c0027091:	e8 ca 04 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0027096:	83 c4 10             	add    esp,0x10
c0027099:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002709e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270a4:	83 ec 08             	sub    esp,0x8
c00270a7:	68 35 39 03 c0       	push   0xc0033935
c00270ac:	50                   	push   eax
c00270ad:	e8 f4 04 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c00270b2:	83 c4 10             	add    esp,0x10
c00270b5:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00270c4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00270c7:	83 ec 08             	sub    esp,0x8
c00270ca:	52                   	push   edx
c00270cb:	50                   	push   eax
c00270cc:	e8 8f 04 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c00270d1:	83 c4 10             	add    esp,0x10
c00270d4:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270df:	83 ec 08             	sub    esp,0x8
c00270e2:	68 3d 39 03 c0       	push   0xc003393d
c00270e7:	50                   	push   eax
c00270e8:	e8 b9 04 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c00270ed:	83 c4 10             	add    esp,0x10
c00270f0:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270fb:	83 ec 08             	sub    esp,0x8
c00270fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0027102:	50                   	push   eax
c0027103:	e8 58 04 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0027108:	83 c4 10             	add    esp,0x10
c002710b:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027110:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027116:	83 ec 08             	sub    esp,0x8
c0027119:	68 46 39 03 c0       	push   0xc0033946
c002711e:	50                   	push   eax
c002711f:	e8 82 04 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c0027124:	83 c4 10             	add    esp,0x10
c0027127:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002712c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027132:	83 ec 08             	sub    esp,0x8
c0027135:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0027139:	50                   	push   eax
c002713a:	e8 21 04 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c002713f:	83 c4 10             	add    esp,0x10
c0027142:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027147:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002714d:	83 ec 08             	sub    esp,0x8
c0027150:	68 4e 39 03 c0       	push   0xc003394e
c0027155:	50                   	push   eax
c0027156:	e8 4b 04 ff ff       	call   c00175a6 <VgaText::puts(char const*)>
c002715b:	83 c4 10             	add    esp,0x10
c002715e:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027163:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027169:	83 ec 08             	sub    esp,0x8
c002716c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0027170:	50                   	push   eax
c0027171:	e8 ea 03 ff ff       	call   c0017560 <VgaText::putx(unsigned int)>
c0027176:	83 c4 10             	add    esp,0x10
c0027179:	fa                   	cli    
c002717a:	f4                   	hlt    
c002717b:	eb fe                	jmp    c002717b <displayDebugInfo(regs*)+0x383>

c002717d <HalSystemIdle()>:
c002717d:	56                   	push   esi
c002717e:	53                   	push   ebx
c002717f:	83 ec 14             	sub    esp,0x14
c0027182:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027187:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002718d:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0027193:	83 e0 04             	and    eax,0x4
c0027196:	0f b6 c0             	movzx  eax,al
c0027199:	85 c0                	test   eax,eax
c002719b:	0f 95 c0             	setne  al
c002719e:	0f b6 c0             	movzx  eax,al
c00271a1:	85 c0                	test   eax,eax
c00271a3:	74 4c                	je     c00271f1 <HalSystemIdle()+0x74>
c00271a5:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00271aa:	83 ec 08             	sub    esp,0x8
c00271ad:	68 e1 00 00 00       	push   0xe1
c00271b2:	50                   	push   eax
c00271b3:	e8 8c e9 fe ff       	call   c0015b44 <Computer::rdmsr(unsigned int)>
c00271b8:	83 c4 10             	add    esp,0x10
c00271bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00271bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00271c3:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00271c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00271cc:	83 e2 02             	and    edx,0x2
c00271cf:	89 d3                	mov    ebx,edx
c00271d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00271d5:	83 e2 00             	and    edx,0x0
c00271d8:	89 d6                	mov    esi,edx
c00271da:	56                   	push   esi
c00271db:	53                   	push   ebx
c00271dc:	68 e1 00 00 00       	push   0xe1
c00271e1:	50                   	push   eax
c00271e2:	e8 89 e9 fe ff       	call   c0015b70 <Computer::wrmsr(unsigned int, unsigned long long)>
c00271e7:	83 c4 10             	add    esp,0x10
c00271ea:	e8 a5 8f fd ff       	call   c0000194 <doTPAUSE>
c00271ef:	eb 01                	jmp    c00271f2 <HalSystemIdle()+0x75>
c00271f1:	f4                   	hlt    
c00271f2:	90                   	nop
c00271f3:	83 c4 14             	add    esp,0x14
c00271f6:	5b                   	pop    ebx
c00271f7:	5e                   	pop    esi
c00271f8:	c3                   	ret    

c00271f9 <displayProgramFault(char const*)>:
c00271f9:	83 ec 0c             	sub    esp,0xc
c00271fc:	83 ec 0c             	sub    esp,0xc
c00271ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027203:	e8 3d 22 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0027208:	83 c4 10             	add    esp,0x10
c002720b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0027210:	8b 00                	mov    eax,DWORD PTR [eax]
c0027212:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027215:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002721b:	85 c0                	test   eax,eax
c002721d:	74 21                	je     c0027240 <displayProgramFault(char const*)+0x47>
c002721f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0027224:	8b 00                	mov    eax,DWORD PTR [eax]
c0027226:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0027229:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002722f:	6a 04                	push   0x4
c0027231:	6a 0f                	push   0xf
c0027233:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0027237:	50                   	push   eax
c0027238:	e8 db 03 ff ff       	call   c0017618 <VgaText::puts(char const*, VgaColour, VgaColour)>
c002723d:	83 c4 10             	add    esp,0x10
c0027240:	90                   	nop
c0027241:	83 c4 0c             	add    esp,0xc
c0027244:	c3                   	ret    

c0027245 <gpFault(regs*, void*)>:
c0027245:	83 ec 1c             	sub    esp,0x1c
c0027248:	c7 05 74 12 04 c0 a1 66 02 c0 	mov    DWORD PTR ds:0xc0041274,0xc00266a1
c0027252:	a1 74 12 04 c0       	mov    eax,ds:0xc0041274
c0027257:	85 c0                	test   eax,eax
c0027259:	74 1e                	je     c0027279 <gpFault(regs*, void*)+0x34>
c002725b:	a1 74 12 04 c0       	mov    eax,ds:0xc0041274
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027267:	ff d0                	call   eax
c0027269:	83 c4 10             	add    esp,0x10
c002726c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027270:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0027275:	85 c0                	test   eax,eax
c0027277:	75 2e                	jne    c00272a7 <gpFault(regs*, void*)+0x62>
c0027279:	83 ec 0c             	sub    esp,0xc
c002727c:	68 56 39 03 c0       	push   0xc0033956
c0027281:	e8 73 ff ff ff       	call   c00271f9 <displayProgramFault(char const*)>
c0027286:	83 c4 10             	add    esp,0x10
c0027289:	83 ec 0c             	sub    esp,0xc
c002728c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027290:	e8 63 fb ff ff       	call   c0026df8 <displayDebugInfo(regs*)>
c0027295:	83 c4 10             	add    esp,0x10
c0027298:	83 ec 0c             	sub    esp,0xc
c002729b:	6a 00                	push   0x0
c002729d:	e8 56 ed ff ff       	call   c0025ff8 <Thr::terminateFromIRQ(int)>
c00272a2:	83 c4 10             	add    esp,0x10
c00272a5:	eb 01                	jmp    c00272a8 <gpFault(regs*, void*)+0x63>
c00272a7:	90                   	nop
c00272a8:	83 c4 1c             	add    esp,0x1c
c00272ab:	c3                   	ret    

c00272ac <pgFault(regs*, void*)>:
c00272ac:	83 ec 1c             	sub    esp,0x1c
c00272af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00272b3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00272b6:	0f 20 d0             	mov    eax,cr2
c00272b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00272bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00272c1:	83 ec 04             	sub    esp,0x4
c00272c4:	52                   	push   edx
c00272c5:	50                   	push   eax
c00272c6:	68 34 3a 03 c0       	push   0xc0033a34
c00272cb:	e8 75 21 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00272d0:	83 c4 10             	add    esp,0x10
c00272d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00272d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00272da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00272dd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00272e3:	0f 20 d2             	mov    edx,cr2
c00272e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00272ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00272ee:	83 ec 08             	sub    esp,0x8
c00272f1:	52                   	push   edx
c00272f2:	50                   	push   eax
c00272f3:	e8 98 1b ff ff       	call   c0018e90 <VAS::tryLoadBackOffDisk(unsigned long)>
c00272f8:	83 c4 10             	add    esp,0x10
c00272fb:	0f b6 c0             	movzx  eax,al
c00272fe:	85 c0                	test   eax,eax
c0027300:	75 2e                	jne    c0027330 <pgFault(regs*, void*)+0x84>
c0027302:	83 ec 0c             	sub    esp,0xc
c0027305:	68 6f 39 03 c0       	push   0xc003396f
c002730a:	e8 ea fe ff ff       	call   c00271f9 <displayProgramFault(char const*)>
c002730f:	83 c4 10             	add    esp,0x10
c0027312:	83 ec 0c             	sub    esp,0xc
c0027315:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027319:	e8 da fa ff ff       	call   c0026df8 <displayDebugInfo(regs*)>
c002731e:	83 c4 10             	add    esp,0x10
c0027321:	83 ec 0c             	sub    esp,0xc
c0027324:	6a 00                	push   0x0
c0027326:	e8 cd ec ff ff       	call   c0025ff8 <Thr::terminateFromIRQ(int)>
c002732b:	83 c4 10             	add    esp,0x10
c002732e:	eb 01                	jmp    c0027331 <pgFault(regs*, void*)+0x85>
c0027330:	90                   	nop
c0027331:	83 c4 1c             	add    esp,0x1c
c0027334:	c3                   	ret    

c0027335 <otherISRHandler(regs*, void*)>:
c0027335:	83 ec 0c             	sub    esp,0xc
c0027338:	83 ec 0c             	sub    esp,0xc
c002733b:	68 5c 3a 03 c0       	push   0xc0033a5c
c0027340:	e8 b4 fe ff ff       	call   c00271f9 <displayProgramFault(char const*)>
c0027345:	83 c4 10             	add    esp,0x10
c0027348:	83 ec 0c             	sub    esp,0xc
c002734b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002734f:	e8 a4 fa ff ff       	call   c0026df8 <displayDebugInfo(regs*)>
c0027354:	83 c4 10             	add    esp,0x10
c0027357:	83 ec 0c             	sub    esp,0xc
c002735a:	6a 00                	push   0x0
c002735c:	e8 97 ec ff ff       	call   c0025ff8 <Thr::terminateFromIRQ(int)>
c0027361:	83 c4 10             	add    esp,0x10
c0027364:	90                   	nop
c0027365:	83 c4 0c             	add    esp,0xc
c0027368:	c3                   	ret    

c0027369 <opcodeFault(regs*, void*)>:
c0027369:	55                   	push   ebp
c002736a:	89 e5                	mov    ebp,esp
c002736c:	83 ec 08             	sub    esp,0x8
c002736f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027372:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0027375:	83 ec 08             	sub    esp,0x8
c0027378:	50                   	push   eax
c0027379:	68 7a 39 03 c0       	push   0xc003397a
c002737e:	e8 c2 20 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0027383:	83 c4 10             	add    esp,0x10
c0027386:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002738b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0027391:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0027397:	0f b6 c0             	movzx  eax,al
c002739a:	85 c0                	test   eax,eax
c002739c:	74 21                	je     c00273bf <opcodeFault(regs*, void*)+0x56>
c002739e:	83 ec 0c             	sub    esp,0xc
c00273a1:	68 84 3a 03 c0       	push   0xc0033a84
c00273a6:	e8 9a 20 ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00273ab:	83 c4 10             	add    esp,0x10
c00273ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00273b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00273b4:	8d 50 19             	lea    edx,[eax+0x19]
c00273b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00273ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00273bd:	eb 2b                	jmp    c00273ea <opcodeFault(regs*, void*)+0x81>
c00273bf:	83 ec 0c             	sub    esp,0xc
c00273c2:	68 88 39 03 c0       	push   0xc0033988
c00273c7:	e8 2d fe ff ff       	call   c00271f9 <displayProgramFault(char const*)>
c00273cc:	83 c4 10             	add    esp,0x10
c00273cf:	83 ec 0c             	sub    esp,0xc
c00273d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273d5:	e8 1e fa ff ff       	call   c0026df8 <displayDebugInfo(regs*)>
c00273da:	83 c4 10             	add    esp,0x10
c00273dd:	83 ec 0c             	sub    esp,0xc
c00273e0:	6a 00                	push   0x0
c00273e2:	e8 11 ec ff ff       	call   c0025ff8 <Thr::terminateFromIRQ(int)>
c00273e7:	83 c4 10             	add    esp,0x10
c00273ea:	c9                   	leave  
c00273eb:	c3                   	ret    

c00273ec <i386SaveCoprocessor(void*)>:
c00273ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00273f0:	83 c0 3f             	add    eax,0x3f
c00273f3:	83 e0 c0             	and    eax,0xffffffc0
c00273f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00273fa:	ff 25 70 12 04 c0    	jmp    DWORD PTR ds:0xc0041270

c0027400 <i386LoadCoprocessor(void*)>:
c0027400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027404:	83 c0 3f             	add    eax,0x3f
c0027407:	83 e0 c0             	and    eax,0xffffffc0
c002740a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002740e:	ff 25 6c 12 04 c0    	jmp    DWORD PTR ds:0xc004126c

c0027414 <x87EmulHandler(regs*, void*)>:
c0027414:	53                   	push   ebx
c0027415:	83 ec 08             	sub    esp,0x8
c0027418:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002741d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0027421:	74 10                	je     c0027433 <x87EmulHandler(regs*, void*)+0x1f>
c0027423:	83 ec 0c             	sub    esp,0xc
c0027426:	68 95 39 03 c0       	push   0xc0033995
c002742b:	e8 4e 93 ff ff       	call   c002077e <KePanic(char const*)>
c0027430:	83 c4 10             	add    esp,0x10
c0027433:	0f 20 c0             	mov    eax,cr0
c0027436:	a8 08                	test   al,0x8
c0027438:	74 59                	je     c0027493 <x87EmulHandler(regs*, void*)+0x7f>
c002743a:	0f 06                	clts   
c002743c:	a1 68 12 04 c0       	mov    eax,ds:0xc0041268
c0027441:	85 c0                	test   eax,eax
c0027443:	74 0e                	je     c0027453 <x87EmulHandler(regs*, void*)+0x3f>
c0027445:	83 ec 0c             	sub    esp,0xc
c0027448:	ff 70 55             	push   DWORD PTR [eax+0x55]
c002744b:	e8 9c ff ff ff       	call   c00273ec <i386SaveCoprocessor(void*)>
c0027450:	83 c4 10             	add    esp,0x10
c0027453:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0027459:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c002745d:	75 12                	jne    c0027471 <x87EmulHandler(regs*, void*)+0x5d>
c002745f:	83 ec 0c             	sub    esp,0xc
c0027462:	68 40 02 00 00       	push   0x240
c0027467:	e8 4b f1 fe ff       	call   c00165b7 <malloc>
c002746c:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c002746f:	eb 10                	jmp    c0027481 <x87EmulHandler(regs*, void*)+0x6d>
c0027471:	83 ec 0c             	sub    esp,0xc
c0027474:	a1 68 12 04 c0       	mov    eax,ds:0xc0041268
c0027479:	ff 70 55             	push   DWORD PTR [eax+0x55]
c002747c:	e8 7f ff ff ff       	call   c0027400 <i386LoadCoprocessor(void*)>
c0027481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027486:	83 c4 10             	add    esp,0x10
c0027489:	a3 68 12 04 c0       	mov    ds:0xc0041268,eax
c002748e:	83 c4 08             	add    esp,0x8
c0027491:	5b                   	pop    ebx
c0027492:	c3                   	ret    
c0027493:	83 ec 0c             	sub    esp,0xc
c0027496:	68 a9 39 03 c0       	push   0xc00339a9
c002749b:	e8 a5 1f ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c00274a0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00274a8:	83 c4 18             	add    esp,0x18
c00274ab:	5b                   	pop    ebx
c00274ac:	e9 47 eb ff ff       	jmp    c0025ff8 <Thr::terminateFromIRQ(int)>

c00274b1 <HalInitialiseCoprocessor()>:
c00274b1:	83 ec 10             	sub    esp,0x10
c00274b4:	c7 05 68 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041268,0x0
c00274be:	6a 00                	push   0x0
c00274c0:	68 14 74 02 c0       	push   0xc0027414
c00274c5:	6a 07                	push   0x7
c00274c7:	e8 82 46 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00274cc:	e8 0f 71 00 00       	call   c002e5e0 <avxDetect>
c00274d1:	83 c4 10             	add    esp,0x10
c00274d4:	85 c0                	test   eax,eax
c00274d6:	74 1c                	je     c00274f4 <HalInitialiseCoprocessor()+0x43>
c00274d8:	c7 05 70 12 04 c0 0a e6 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e60a
c00274e2:	c7 05 6c 12 04 c0 1b e6 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e61b
c00274ec:	83 c4 0c             	add    esp,0xc
c00274ef:	e9 38 71 00 00       	jmp    c002e62c <avxInit>
c00274f4:	e8 57 74 00 00       	call   c002e950 <sseDetect>
c00274f9:	85 c0                	test   eax,eax
c00274fb:	74 1c                	je     c0027519 <HalInitialiseCoprocessor()+0x68>
c00274fd:	c7 05 70 12 04 c0 68 e9 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e968
c0027507:	c7 05 6c 12 04 c0 70 e9 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e970
c0027511:	83 c4 0c             	add    esp,0xc
c0027514:	e9 5f 74 00 00       	jmp    c002e978 <sseInit>
c0027519:	e8 78 74 00 00       	call   c002e996 <x87Detect>
c002751e:	85 c0                	test   eax,eax
c0027520:	74 1c                	je     c002753e <HalInitialiseCoprocessor()+0x8d>
c0027522:	c7 05 70 12 04 c0 b1 e9 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e9b1
c002752c:	c7 05 6c 12 04 c0 b8 e9 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e9b8
c0027536:	83 c4 0c             	add    esp,0xc
c0027539:	e9 81 74 00 00       	jmp    c002e9bf <x87Init>
c002753e:	c7 05 70 12 04 c0 c5 6d 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc0026dc5
c0027548:	c7 05 6c 12 04 c0 c5 6d 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc0026dc5
c0027552:	0f 20 c0             	mov    eax,cr0
c0027555:	83 c8 04             	or     eax,0x4
c0027558:	0f 22 c0             	mov    cr0,eax
c002755b:	83 c4 0c             	add    esp,0xc
c002755e:	c3                   	ret    

c002755f <HalPanic(char const*)>:
c002755f:	53                   	push   ebx
c0027560:	83 ec 10             	sub    esp,0x10
c0027563:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0027567:	fa                   	cli    
c0027568:	53                   	push   ebx
c0027569:	68 bf 39 03 c0       	push   0xc00339bf
c002756e:	e8 d2 1e ff ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0027573:	a1 64 12 04 c0       	mov    eax,ds:0xc0041264
c0027578:	83 c4 10             	add    esp,0x10
c002757b:	85 c0                	test   eax,eax
c002757d:	74 09                	je     c0027588 <HalPanic(char const*)+0x29>
c002757f:	83 ec 0c             	sub    esp,0xc
c0027582:	53                   	push   ebx
c0027583:	ff d0                	call   eax
c0027585:	83 c4 10             	add    esp,0x10
c0027588:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c002758d:	85 c0                	test   eax,eax
c002758f:	0f 84 dc 00 00 00    	je     c0027671 <HalPanic(char const*)+0x112>
c0027595:	52                   	push   edx
c0027596:	6a 01                	push   0x1
c0027598:	6a 0f                	push   0xf
c002759a:	50                   	push   eax
c002759b:	e8 14 fb fe ff       	call   c00170b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00275a0:	59                   	pop    ecx
c00275a1:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275a7:	e8 f8 fc fe ff       	call   c00172a4 <VgaText::clearScreen()>
c00275ac:	58                   	pop    eax
c00275ad:	5a                   	pop    edx
c00275ae:	68 48 19 03 c0       	push   0xc0031948
c00275b3:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275b9:	e8 2e fb fe ff       	call   c00170ec <VgaText::setTitle(char*)>
c00275be:	83 c4 0c             	add    esp,0xc
c00275c1:	6a 01                	push   0x1
c00275c3:	6a 0f                	push   0xf
c00275c5:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275cb:	e8 e4 fa fe ff       	call   c00170b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00275d0:	59                   	pop    ecx
c00275d1:	58                   	pop    eax
c00275d2:	68 d8 39 03 c0       	push   0xc00339d8
c00275d7:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275dd:	e8 c4 ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c00275e2:	83 c4 0c             	add    esp,0xc
c00275e5:	6a 0f                	push   0xf
c00275e7:	6a 01                	push   0x1
c00275e9:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c00275ef:	e8 c0 fa fe ff       	call   c00170b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00275f4:	58                   	pop    eax
c00275f5:	5a                   	pop    edx
c00275f6:	68 e1 39 03 c0       	push   0xc00339e1
c00275fb:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027601:	e8 a0 ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c0027606:	83 c4 0c             	add    esp,0xc
c0027609:	6a 01                	push   0x1
c002760b:	6a 0f                	push   0xf
c002760d:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027613:	e8 9c fa fe ff       	call   c00170b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027618:	59                   	pop    ecx
c0027619:	58                   	pop    eax
c002761a:	68 25 3a 03 c0       	push   0xc0033a25
c002761f:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027625:	e8 7c ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c002762a:	58                   	pop    eax
c002762b:	5a                   	pop    edx
c002762c:	68 ee 39 03 c0       	push   0xc00339ee
c0027631:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027637:	e8 6a ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c002763c:	59                   	pop    ecx
c002763d:	58                   	pop    eax
c002763e:	68 28 3a 03 c0       	push   0xc0033a28
c0027643:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027649:	e8 58 ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c002764e:	58                   	pop    eax
c002764f:	5a                   	pop    edx
c0027650:	53                   	push   ebx
c0027651:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027657:	e8 4a ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c002765c:	59                   	pop    ecx
c002765d:	5b                   	pop    ebx
c002765e:	68 25 3a 03 c0       	push   0xc0033a25
c0027663:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c0027669:	e8 38 ff fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c002766e:	83 c4 10             	add    esp,0x10
c0027671:	eb fe                	jmp    c0027671 <HalPanic(char const*)+0x112>

c0027673 <HalQueryPerformanceCounter()>:
c0027673:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027678:	31 d2                	xor    edx,edx
c002767a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0027680:	31 c0                	xor    eax,eax
c0027682:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027689:	74 02                	je     c002768d <HalQueryPerformanceCounter()+0x1a>
c002768b:	0f 31                	rdtsc  
c002768d:	c3                   	ret    

c002768e <HalInitialise()>:
c002768e:	53                   	push   ebx
c002768f:	83 ec 08             	sub    esp,0x8
c0027692:	e8 e7 46 ff ff       	call   c001bd7e <setupINTS()>
c0027697:	80 3d e0 06 04 c0 00 	cmp    BYTE PTR ds:0xc00406e0,0x0
c002769e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00276a3:	75 0f                	jne    c00276b4 <HalInitialise()+0x26>
c00276a5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00276ab:	83 e2 fe             	and    edx,0xfffffffe
c00276ae:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00276b4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00276ba:	c6 05 60 12 04 c0 00 	mov    BYTE PTR ds:0xc0041260,0x0
c00276c1:	83 e2 fe             	and    edx,0xfffffffe
c00276c4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00276ca:	e8 a1 02 00 00       	call   c0027970 <picOpen()>
c00276cf:	80 3d 60 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041260,0x0
c00276d6:	74 0a                	je     c00276e2 <HalInitialise()+0x54>
c00276d8:	e8 e3 01 00 00       	call   c00278c0 <picDisable()>
c00276dd:	e8 72 68 00 00       	call   c002df54 <apicOpen()>
c00276e2:	bb 0f 00 00 00       	mov    ebx,0xf
c00276e7:	50                   	push   eax
c00276e8:	6a 00                	push   0x0
c00276ea:	68 35 73 02 c0       	push   0xc0027335
c00276ef:	6a 00                	push   0x0
c00276f1:	e8 58 44 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00276f6:	83 c4 0c             	add    esp,0xc
c00276f9:	6a 00                	push   0x0
c00276fb:	68 35 73 02 c0       	push   0xc0027335
c0027700:	6a 01                	push   0x1
c0027702:	e8 47 44 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027707:	83 c4 0c             	add    esp,0xc
c002770a:	6a 00                	push   0x0
c002770c:	68 c6 6d 02 c0       	push   0xc0026dc6
c0027711:	6a 02                	push   0x2
c0027713:	e8 36 44 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027718:	83 c4 0c             	add    esp,0xc
c002771b:	6a 00                	push   0x0
c002771d:	68 35 73 02 c0       	push   0xc0027335
c0027722:	6a 03                	push   0x3
c0027724:	e8 25 44 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027729:	83 c4 0c             	add    esp,0xc
c002772c:	6a 00                	push   0x0
c002772e:	68 35 73 02 c0       	push   0xc0027335
c0027733:	6a 04                	push   0x4
c0027735:	e8 14 44 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002773a:	83 c4 0c             	add    esp,0xc
c002773d:	6a 00                	push   0x0
c002773f:	68 35 73 02 c0       	push   0xc0027335
c0027744:	6a 05                	push   0x5
c0027746:	e8 03 44 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002774b:	83 c4 0c             	add    esp,0xc
c002774e:	6a 00                	push   0x0
c0027750:	68 69 73 02 c0       	push   0xc0027369
c0027755:	6a 06                	push   0x6
c0027757:	e8 f2 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002775c:	83 c4 0c             	add    esp,0xc
c002775f:	6a 00                	push   0x0
c0027761:	68 df 6d 02 c0       	push   0xc0026ddf
c0027766:	6a 08                	push   0x8
c0027768:	e8 e1 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002776d:	83 c4 0c             	add    esp,0xc
c0027770:	6a 00                	push   0x0
c0027772:	68 35 73 02 c0       	push   0xc0027335
c0027777:	6a 09                	push   0x9
c0027779:	e8 d0 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002777e:	83 c4 0c             	add    esp,0xc
c0027781:	6a 00                	push   0x0
c0027783:	68 35 73 02 c0       	push   0xc0027335
c0027788:	6a 0a                	push   0xa
c002778a:	e8 bf 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002778f:	83 c4 0c             	add    esp,0xc
c0027792:	6a 00                	push   0x0
c0027794:	68 35 73 02 c0       	push   0xc0027335
c0027799:	6a 0b                	push   0xb
c002779b:	e8 ae 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277a0:	83 c4 0c             	add    esp,0xc
c00277a3:	6a 00                	push   0x0
c00277a5:	68 45 72 02 c0       	push   0xc0027245
c00277aa:	6a 0d                	push   0xd
c00277ac:	e8 9d 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277b1:	83 c4 0c             	add    esp,0xc
c00277b4:	6a 00                	push   0x0
c00277b6:	68 ac 72 02 c0       	push   0xc00272ac
c00277bb:	6a 0e                	push   0xe
c00277bd:	e8 8c 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277c2:	83 c4 10             	add    esp,0x10
c00277c5:	50                   	push   eax
c00277c6:	6a 00                	push   0x0
c00277c8:	68 35 73 02 c0       	push   0xc0027335
c00277cd:	53                   	push   ebx
c00277ce:	43                   	inc    ebx
c00277cf:	e8 7a 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277d4:	83 c4 10             	add    esp,0x10
c00277d7:	83 fb 1e             	cmp    ebx,0x1e
c00277da:	75 e9                	jne    c00277c5 <HalInitialise()+0x137>
c00277dc:	50                   	push   eax
c00277dd:	6a 00                	push   0x0
c00277df:	68 2d 20 02 c0       	push   0xc002202d
c00277e4:	6a 60                	push   0x60
c00277e6:	e8 63 43 ff ff       	call   c001bb4e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00277eb:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00277f0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00277fa:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027801:	e8 b1 ed fe ff       	call   c00165b7 <malloc>
c0027806:	89 04 24             	mov    DWORD PTR [esp],eax
c0027809:	89 c3                	mov    ebx,eax
c002780b:	e8 3e 09 00 00       	call   c002814e <RTC::RTC()>
c0027810:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c002781a:	5a                   	pop    edx
c002781b:	59                   	pop    ecx
c002781c:	53                   	push   ebx
c002781d:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027823:	e8 da 3d ff ff       	call   c001b602 <Device::addChild(Device*)>
c0027828:	8b 03                	mov    eax,DWORD PTR [ebx]
c002782a:	6a 00                	push   0x0
c002782c:	6a 00                	push   0x0
c002782e:	6a 00                	push   0x0
c0027830:	53                   	push   ebx
c0027831:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027834:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027839:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002783f:	83 c4 28             	add    esp,0x28
c0027842:	5b                   	pop    ebx
c0027843:	c3                   	ret    

c0027844 <HalMakeBeep(int)>:
c0027844:	53                   	push   ebx
c0027845:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027849:	85 db                	test   ebx,ebx
c002784b:	75 07                	jne    c0027854 <HalMakeBeep(int)+0x10>
c002784d:	e4 61                	in     al,0x61
c002784f:	83 e0 fc             	and    eax,0xfffffffc
c0027852:	eb 26                	jmp    c002787a <HalMakeBeep(int)+0x36>
c0027854:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027859:	99                   	cdq    
c002785a:	f7 fb                	idiv   ebx
c002785c:	89 c1                	mov    ecx,eax
c002785e:	b0 b6                	mov    al,0xb6
c0027860:	e6 43                	out    0x43,al
c0027862:	88 c8                	mov    al,cl
c0027864:	e6 42                	out    0x42,al
c0027866:	89 c8                	mov    eax,ecx
c0027868:	c1 e8 08             	shr    eax,0x8
c002786b:	e6 42                	out    0x42,al
c002786d:	e4 61                	in     al,0x61
c002786f:	89 c2                	mov    edx,eax
c0027871:	83 ca 03             	or     edx,0x3
c0027874:	38 d0                	cmp    al,dl
c0027876:	74 04                	je     c002787c <HalMakeBeep(int)+0x38>
c0027878:	88 d0                	mov    al,dl
c002787a:	e6 61                	out    0x61,al
c002787c:	5b                   	pop    ebx
c002787d:	c3                   	ret    

c002787e <HalGetRand()>:
c002787e:	31 c0                	xor    eax,eax
c0027880:	c3                   	ret    

c0027881 <HalEndOfInterrupt(int)>:
c0027881:	80 3d 60 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041260,0x0
c0027888:	74 23                	je     c00278ad <HalEndOfInterrupt(int)+0x2c>
c002788a:	83 ec 14             	sub    esp,0x14
c002788d:	6a 1b                	push   0x1b
c002788f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027895:	e8 aa e2 fe ff       	call   c0015b44 <Computer::rdmsr(unsigned int)>
c002789a:	25 00 f0 ff ff       	and    eax,0xfffff000
c002789f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00278a9:	83 c4 1c             	add    esp,0x1c
c00278ac:	c3                   	ret    
c00278ad:	e9 42 02 00 00       	jmp    c0027af4 <picEOI(int)>

c00278b2 <HalRestart()>:
c00278b2:	c3                   	ret    

c00278b3 <HalShutdown()>:
c00278b3:	c3                   	ret    

c00278b4 <HalSleep()>:
c00278b4:	c3                   	ret    
c00278b5:	66 90                	xchg   ax,ax
c00278b7:	90                   	nop

c00278b8 <picIoWait()>:
c00278b8:	eb 00                	jmp    c00278ba <picIoWait()+0x2>
c00278ba:	eb 00                	jmp    c00278bc <picIoWait()+0x4>
c00278bc:	90                   	nop
c00278bd:	c3                   	ret    
c00278be:	66 90                	xchg   ax,ax

c00278c0 <picDisable()>:
c00278c0:	83 ec 10             	sub    esp,0x10
c00278c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00278ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00278cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00278d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00278d8:	ee                   	out    dx,al
c00278d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00278e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00278e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00278e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00278ee:	ee                   	out    dx,al
c00278ef:	90                   	nop
c00278f0:	83 c4 10             	add    esp,0x10
c00278f3:	c3                   	ret    

c00278f4 <picGetIRQReg(int)>:
c00278f4:	83 ec 10             	sub    esp,0x10
c00278f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00278fb:	0f b6 c0             	movzx  eax,al
c00278fe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027905:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027909:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002790d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027912:	ee                   	out    dx,al
c0027913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027917:	0f b6 c0             	movzx  eax,al
c002791a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027921:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027925:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027929:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002792e:	ee                   	out    dx,al
c002792f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027936:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002793b:	89 c2                	mov    edx,eax
c002793d:	ec                   	in     al,dx
c002793e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027942:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027946:	0f b6 c0             	movzx  eax,al
c0027949:	c1 e0 08             	shl    eax,0x8
c002794c:	89 c1                	mov    ecx,eax
c002794e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027955:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002795a:	89 c2                	mov    edx,eax
c002795c:	ec                   	in     al,dx
c002795d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027961:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027965:	0f b6 c0             	movzx  eax,al
c0027968:	09 c8                	or     eax,ecx
c002796a:	83 c4 10             	add    esp,0x10
c002796d:	c3                   	ret    
c002796e:	66 90                	xchg   ax,ax

c0027970 <picOpen()>:
c0027970:	83 ec 50             	sub    esp,0x50
c0027973:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c002797a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002797f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027987:	ee                   	out    dx,al
c0027988:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c002798f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0027994:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027998:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002799c:	ee                   	out    dx,al
c002799d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00279a5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00279ad:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00279b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00279b8:	89 c2                	mov    edx,eax
c00279ba:	ec                   	in     al,dx
c00279bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00279bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00279c3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00279c7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00279ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00279d2:	89 c2                	mov    edx,eax
c00279d4:	ec                   	in     al,dx
c00279d5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00279d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00279dd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00279e1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00279e8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00279ed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00279f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00279f5:	ee                   	out    dx,al
c00279f6:	e8 bd fe ff ff       	call   c00278b8 <picIoWait()>
c00279fb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0027a02:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027a07:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027a0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027a0f:	ee                   	out    dx,al
c0027a10:	e8 a3 fe ff ff       	call   c00278b8 <picIoWait()>
c0027a15:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027a19:	0f b6 c0             	movzx  eax,al
c0027a1c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027a23:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027a27:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027a2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027a2f:	ee                   	out    dx,al
c0027a30:	e8 83 fe ff ff       	call   c00278b8 <picIoWait()>
c0027a35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027a39:	0f b6 c0             	movzx  eax,al
c0027a3c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027a43:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027a47:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027a4b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027a4f:	ee                   	out    dx,al
c0027a50:	e8 63 fe ff ff       	call   c00278b8 <picIoWait()>
c0027a55:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027a5c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027a61:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027a65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027a69:	ee                   	out    dx,al
c0027a6a:	e8 49 fe ff ff       	call   c00278b8 <picIoWait()>
c0027a6f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0027a76:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027a7b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027a7f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0027a83:	ee                   	out    dx,al
c0027a84:	e8 2f fe ff ff       	call   c00278b8 <picIoWait()>
c0027a89:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027a90:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0027a95:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027a99:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027a9d:	ee                   	out    dx,al
c0027a9e:	e8 15 fe ff ff       	call   c00278b8 <picIoWait()>
c0027aa3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027aaa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0027aaf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0027ab3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027ab7:	ee                   	out    dx,al
c0027ab8:	e8 fb fd ff ff       	call   c00278b8 <picIoWait()>
c0027abd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0027ac2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027ac9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027acd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027ad1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027ad5:	ee                   	out    dx,al
c0027ad6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0027adb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0027ae2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027ae6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027aea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027aee:	ee                   	out    dx,al
c0027aef:	90                   	nop
c0027af0:	83 c4 50             	add    esp,0x50
c0027af3:	c3                   	ret    

c0027af4 <picEOI(int)>:
c0027af4:	83 ec 10             	sub    esp,0x10
c0027af7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027afc:	75 1e                	jne    c0027b1c <picEOI(int)+0x28>
c0027afe:	6a 0b                	push   0xb
c0027b00:	e8 ef fd ff ff       	call   c00278f4 <picGetIRQReg(int)>
c0027b05:	83 c4 04             	add    esp,0x4
c0027b08:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027b0d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027b12:	25 80 00 00 00       	and    eax,0x80
c0027b17:	74 73                	je     c0027b8c <picEOI(int)+0x98>
c0027b19:	8d 76 00             	lea    esi,[esi+0x0]
c0027b1c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027b21:	75 31                	jne    c0027b54 <picEOI(int)+0x60>
c0027b23:	6a 0b                	push   0xb
c0027b25:	e8 ca fd ff ff       	call   c00278f4 <picGetIRQReg(int)>
c0027b2a:	83 c4 04             	add    esp,0x4
c0027b2d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027b36:	98                   	cwde   
c0027b37:	85 c0                	test   eax,eax
c0027b39:	78 19                	js     c0027b54 <picEOI(int)+0x60>
c0027b3b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027b42:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027b47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027b4b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027b50:	ee                   	out    dx,al
c0027b51:	eb 3d                	jmp    c0027b90 <picEOI(int)+0x9c>
c0027b53:	90                   	nop
c0027b54:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027b59:	7e 19                	jle    c0027b74 <picEOI(int)+0x80>
c0027b5b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027b62:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027b67:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027b6b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027b70:	ee                   	out    dx,al
c0027b71:	8d 76 00             	lea    esi,[esi+0x0]
c0027b74:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027b7b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027b80:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027b84:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027b89:	ee                   	out    dx,al
c0027b8a:	eb 04                	jmp    c0027b90 <picEOI(int)+0x9c>
c0027b8c:	90                   	nop
c0027b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0027b90:	83 c4 10             	add    esp,0x10
c0027b93:	c3                   	ret    

c0027b94 <RTC::open(int, int, void*)>:
c0027b94:	31 c0                	xor    eax,eax
c0027b96:	c3                   	ret    
c0027b97:	90                   	nop

c0027b98 <RTC::close(int, int, void*)>:
c0027b98:	31 c0                	xor    eax,eax
c0027b9a:	c3                   	ret    
c0027b9b:	90                   	nop

c0027b9c <RTC::timeInSecondsUTC()>:
c0027b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ba0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027ba6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027bac:	c3                   	ret    
c0027bad:	90                   	nop

c0027bae <RTC::timeInDatetimeUTC()>:
c0027bae:	53                   	push   ebx
c0027baf:	83 ec 14             	sub    esp,0x14
c0027bb2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bba:	8b 10                	mov    edx,DWORD PTR [eax]
c0027bbc:	50                   	push   eax
c0027bbd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0027bc0:	83 c4 0c             	add    esp,0xc
c0027bc3:	52                   	push   edx
c0027bc4:	50                   	push   eax
c0027bc5:	53                   	push   ebx
c0027bc6:	e8 ab 37 ff ff       	call   c001b376 <secondsToDatetime(unsigned long long)>
c0027bcb:	89 d8                	mov    eax,ebx
c0027bcd:	83 c4 14             	add    esp,0x14
c0027bd0:	5b                   	pop    ebx
c0027bd1:	c2 04 00             	ret    0x4

c0027bd4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027bd4:	56                   	push   esi
c0027bd5:	53                   	push   ebx
c0027bd6:	83 ec 14             	sub    esp,0x14
c0027bd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027bdf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027be2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027be6:	52                   	push   edx
c0027be7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027beb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027bef:	50                   	push   eax
c0027bf0:	e8 81 37 ff ff       	call   c001b376 <secondsToDatetime(unsigned long long)>
c0027bf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027bf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027bfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027c01:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027c05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027c09:	89 f0                	mov    eax,esi
c0027c0b:	83 c4 20             	add    esp,0x20
c0027c0e:	5b                   	pop    ebx
c0027c0f:	5e                   	pop    esi
c0027c10:	ff e0                	jmp    eax

c0027c12 <RTC::~RTC()>:
c0027c12:	83 ec 0c             	sub    esp,0xc
c0027c15:	ba c4 3a 03 c0       	mov    edx,0xc0033ac4
c0027c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c1e:	89 10                	mov    DWORD PTR [eax],edx
c0027c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c24:	83 ec 0c             	sub    esp,0xc
c0027c27:	50                   	push   eax
c0027c28:	e8 db 34 ff ff       	call   c001b108 <Clock::~Clock()>
c0027c2d:	83 c4 10             	add    esp,0x10
c0027c30:	90                   	nop
c0027c31:	83 c4 0c             	add    esp,0xc
c0027c34:	c3                   	ret    
c0027c35:	90                   	nop

c0027c36 <RTC::~RTC()>:
c0027c36:	83 ec 0c             	sub    esp,0xc
c0027c39:	83 ec 0c             	sub    esp,0xc
c0027c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c40:	e8 cd ff ff ff       	call   c0027c12 <RTC::~RTC()>
c0027c45:	83 c4 10             	add    esp,0x10
c0027c48:	83 ec 08             	sub    esp,0x8
c0027c4b:	68 60 01 00 00       	push   0x160
c0027c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c54:	e8 bf 16 ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c0027c59:	83 c4 10             	add    esp,0x10
c0027c5c:	83 c4 0c             	add    esp,0xc
c0027c5f:	c3                   	ret    

c0027c60 <RTC::get_update_in_progress_flag()>:
c0027c60:	83 ec 14             	sub    esp,0x14
c0027c63:	6a 0a                	push   0xa
c0027c65:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c6b:	e8 8c df fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027c70:	83 c4 1c             	add    esp,0x1c
c0027c73:	0f b6 c0             	movzx  eax,al
c0027c76:	c1 e8 07             	shr    eax,0x7
c0027c79:	c3                   	ret    

c0027c7a <RTC::completeRTCRefresh()>:
c0027c7a:	55                   	push   ebp
c0027c7b:	57                   	push   edi
c0027c7c:	56                   	push   esi
c0027c7d:	53                   	push   ebx
c0027c7e:	83 ec 3c             	sub    esp,0x3c
c0027c81:	8b 1d ec 03 04 c0    	mov    ebx,DWORD PTR ds:0xc00403ec
c0027c87:	83 ec 0c             	sub    esp,0xc
c0027c8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027c8e:	e8 cd ff ff ff       	call   c0027c60 <RTC::get_update_in_progress_flag()>
c0027c93:	83 c4 10             	add    esp,0x10
c0027c96:	84 c0                	test   al,al
c0027c98:	74 0e                	je     c0027ca8 <RTC::completeRTCRefresh()+0x2e>
c0027c9a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027ca0:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c0027ca6:	73 df                	jae    c0027c87 <RTC::completeRTCRefresh()+0xd>
c0027ca8:	51                   	push   ecx
c0027ca9:	51                   	push   ecx
c0027caa:	6a 00                	push   0x0
c0027cac:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cb2:	e8 45 df fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027cb7:	5b                   	pop    ebx
c0027cb8:	89 c7                	mov    edi,eax
c0027cba:	5e                   	pop    esi
c0027cbb:	6a 02                	push   0x2
c0027cbd:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cc3:	e8 34 df fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027cc8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027ccc:	5d                   	pop    ebp
c0027ccd:	58                   	pop    eax
c0027cce:	6a 04                	push   0x4
c0027cd0:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cd6:	e8 21 df fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027cdb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027cdf:	58                   	pop    eax
c0027ce0:	5a                   	pop    edx
c0027ce1:	6a 07                	push   0x7
c0027ce3:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027ce9:	e8 0e df fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027cee:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027cf2:	59                   	pop    ecx
c0027cf3:	5b                   	pop    ebx
c0027cf4:	6a 08                	push   0x8
c0027cf6:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027cfc:	e8 fb de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d01:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027d05:	5e                   	pop    esi
c0027d06:	5d                   	pop    ebp
c0027d07:	6a 09                	push   0x9
c0027d09:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d0f:	e8 e8 de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d14:	0f b6 c0             	movzx  eax,al
c0027d17:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027d1b:	83 c4 10             	add    esp,0x10
c0027d1e:	8b 1d ec 03 04 c0    	mov    ebx,DWORD PTR ds:0xc00403ec
c0027d24:	83 ec 0c             	sub    esp,0xc
c0027d27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027d2b:	e8 30 ff ff ff       	call   c0027c60 <RTC::get_update_in_progress_flag()>
c0027d30:	83 c4 10             	add    esp,0x10
c0027d33:	84 c0                	test   al,al
c0027d35:	74 0e                	je     c0027d45 <RTC::completeRTCRefresh()+0xcb>
c0027d37:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027d3d:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c0027d43:	73 df                	jae    c0027d24 <RTC::completeRTCRefresh()+0xaa>
c0027d45:	51                   	push   ecx
c0027d46:	51                   	push   ecx
c0027d47:	6a 00                	push   0x0
c0027d49:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d4f:	e8 a8 de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d54:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027d58:	5b                   	pop    ebx
c0027d59:	5e                   	pop    esi
c0027d5a:	6a 02                	push   0x2
c0027d5c:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d62:	e8 95 de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d67:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027d6b:	5d                   	pop    ebp
c0027d6c:	58                   	pop    eax
c0027d6d:	6a 04                	push   0x4
c0027d6f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d75:	e8 82 de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d7a:	88 c3                	mov    bl,al
c0027d7c:	58                   	pop    eax
c0027d7d:	5a                   	pop    edx
c0027d7e:	6a 07                	push   0x7
c0027d80:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d86:	e8 71 de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d8b:	59                   	pop    ecx
c0027d8c:	89 c6                	mov    esi,eax
c0027d8e:	5d                   	pop    ebp
c0027d8f:	6a 08                	push   0x8
c0027d91:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d97:	e8 60 de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027d9c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027da0:	58                   	pop    eax
c0027da1:	5a                   	pop    edx
c0027da2:	6a 09                	push   0x9
c0027da4:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027daa:	e8 4d de fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027daf:	89 f9                	mov    ecx,edi
c0027db1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027db5:	0f b6 e8             	movzx  ebp,al
c0027db8:	83 c4 10             	add    esp,0x10
c0027dbb:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027dbf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027dc4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0027dc9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0027dcd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027dd1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0027dd5:	0f 94 c0             	sete   al
c0027dd8:	0f b6 fb             	movzx  edi,bl
c0027ddb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0027ddf:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0027de4:	0f 94 c2             	sete   dl
c0027de7:	21 d0                	and    eax,edx
c0027de9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027ded:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027df1:	0f 94 c2             	sete   dl
c0027df4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0027df8:	21 c2                	and    edx,eax
c0027dfa:	89 f0                	mov    eax,esi
c0027dfc:	0f b6 c0             	movzx  eax,al
c0027dff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027e03:	89 f0                	mov    eax,esi
c0027e05:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027e09:	0f 94 c0             	sete   al
c0027e0c:	21 d0                	and    eax,edx
c0027e0e:	31 d2                	xor    edx,edx
c0027e10:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027e14:	0f 94 c2             	sete   dl
c0027e17:	85 c2                	test   edx,eax
c0027e19:	75 27                	jne    c0027e42 <RTC::completeRTCRefresh()+0x1c8>
c0027e1b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027e1f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027e23:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027e27:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027e2b:	89 f0                	mov    eax,esi
c0027e2d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027e31:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027e35:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027e39:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027e3d:	e9 dc fe ff ff       	jmp    c0027d1e <RTC::completeRTCRefresh()+0xa4>
c0027e42:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027e46:	75 d3                	jne    c0027e1b <RTC::completeRTCRefresh()+0x1a1>
c0027e48:	52                   	push   edx
c0027e49:	52                   	push   edx
c0027e4a:	6a 0b                	push   0xb
c0027e4c:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027e52:	e8 a5 dd fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027e57:	83 c4 10             	add    esp,0x10
c0027e5a:	a8 04                	test   al,0x4
c0027e5c:	75 7a                	jne    c0027ed8 <RTC::completeRTCRefresh()+0x25e>
c0027e5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027e62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027e66:	83 e1 0f             	and    ecx,0xf
c0027e69:	c1 ea 04             	shr    edx,0x4
c0027e6c:	c1 ef 04             	shr    edi,0x4
c0027e6f:	6b d2 0a             	imul   edx,edx,0xa
c0027e72:	83 e6 0f             	and    esi,0xf
c0027e75:	01 d1                	add    ecx,edx
c0027e77:	c1 ed 04             	shr    ebp,0x4
c0027e7a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027e7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027e82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e86:	c1 ea 04             	shr    edx,0x4
c0027e89:	83 e1 0f             	and    ecx,0xf
c0027e8c:	6b d2 0a             	imul   edx,edx,0xa
c0027e8f:	6b ed 0a             	imul   ebp,ebp,0xa
c0027e92:	01 d1                	add    ecx,edx
c0027e94:	89 fa                	mov    edx,edi
c0027e96:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027e9a:	83 e2 07             	and    edx,0x7
c0027e9d:	89 d9                	mov    ecx,ebx
c0027e9f:	6b d2 0a             	imul   edx,edx,0xa
c0027ea2:	83 e1 0f             	and    ecx,0xf
c0027ea5:	83 e3 80             	and    ebx,0xffffff80
c0027ea8:	01 d1                	add    ecx,edx
c0027eaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027eae:	09 cb                	or     ebx,ecx
c0027eb0:	c1 ea 04             	shr    edx,0x4
c0027eb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027eb7:	6b d2 0a             	imul   edx,edx,0xa
c0027eba:	83 e1 0f             	and    ecx,0xf
c0027ebd:	01 d6                	add    esi,edx
c0027ebf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027ec3:	c1 ea 04             	shr    edx,0x4
c0027ec6:	6b d2 0a             	imul   edx,edx,0xa
c0027ec9:	01 d1                	add    ecx,edx
c0027ecb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ecf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027ed3:	83 e2 0f             	and    edx,0xf
c0027ed6:	01 d5                	add    ebp,edx
c0027ed8:	a8 02                	test   al,0x2
c0027eda:	75 15                	jne    c0027ef1 <RTC::completeRTCRefresh()+0x277>
c0027edc:	f6 c3 80             	test   bl,0x80
c0027edf:	74 10                	je     c0027ef1 <RTC::completeRTCRefresh()+0x277>
c0027ee1:	83 e3 7f             	and    ebx,0x7f
c0027ee4:	b9 18 00 00 00       	mov    ecx,0x18
c0027ee9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027eec:	99                   	cdq    
c0027eed:	f7 f9                	idiv   ecx
c0027eef:	88 d3                	mov    bl,dl
c0027ef1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027ef7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027efd:	77 06                	ja     c0027f05 <RTC::completeRTCRefresh()+0x28b>
c0027eff:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027f05:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027f0a:	31 c9                	xor    ecx,ecx
c0027f0c:	c1 e0 10             	shl    eax,0x10
c0027f0f:	89 cd                	mov    ebp,ecx
c0027f11:	c1 e7 10             	shl    edi,0x10
c0027f14:	31 d2                	xor    edx,edx
c0027f16:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027f1c:	09 c5                	or     ebp,eax
c0027f1e:	89 f0                	mov    eax,esi
c0027f20:	89 e9                	mov    ecx,ebp
c0027f22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027f26:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027f2a:	88 c2                	mov    dl,al
c0027f2c:	88 d9                	mov    cl,bl
c0027f2e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027f32:	0f b7 c2             	movzx  eax,dx
c0027f35:	09 f8                	or     eax,edi
c0027f37:	89 c2                	mov    edx,eax
c0027f39:	50                   	push   eax
c0027f3a:	50                   	push   eax
c0027f3b:	51                   	push   ecx
c0027f3c:	52                   	push   edx
c0027f3d:	e8 b5 32 ff ff       	call   c001b1f7 <datetimeToSeconds(datetime_t)>
c0027f42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027f46:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027f4c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027f52:	83 c4 4c             	add    esp,0x4c
c0027f55:	5b                   	pop    ebx
c0027f56:	5e                   	pop    esi
c0027f57:	5f                   	pop    edi
c0027f58:	5d                   	pop    ebp
c0027f59:	c3                   	ret    

c0027f5a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027f5a:	55                   	push   ebp
c0027f5b:	57                   	push   edi
c0027f5c:	56                   	push   esi
c0027f5d:	53                   	push   ebx
c0027f5e:	83 ec 30             	sub    esp,0x30
c0027f61:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027f65:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027f69:	6a 00                	push   0x0
c0027f6b:	6a 00                	push   0x0
c0027f6d:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f73:	e8 9e dd fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f78:	83 c4 0c             	add    esp,0xc
c0027f7b:	6a 00                	push   0x0
c0027f7d:	6a 02                	push   0x2
c0027f7f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f85:	e8 8c dd fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f8a:	31 d2                	xor    edx,edx
c0027f8c:	89 f9                	mov    ecx,edi
c0027f8e:	89 f8                	mov    eax,edi
c0027f90:	c1 e9 10             	shr    ecx,0x10
c0027f93:	0f b6 c4             	movzx  eax,ah
c0027f96:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027f9a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027f9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027fa2:	b9 64 00 00 00       	mov    ecx,0x64
c0027fa7:	89 f0                	mov    eax,esi
c0027fa9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027fad:	89 f0                	mov    eax,esi
c0027faf:	0f b6 c4             	movzx  eax,ah
c0027fb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027fb6:	89 f0                	mov    eax,esi
c0027fb8:	c1 e8 10             	shr    eax,0x10
c0027fbb:	f7 f1                	div    ecx
c0027fbd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027fc1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027fc5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027fc9:	59                   	pop    ecx
c0027fca:	5b                   	pop    ebx
c0027fcb:	89 fb                	mov    ebx,edi
c0027fcd:	6a 0b                	push   0xb
c0027fcf:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027fd5:	e8 22 dc fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c0027fda:	83 c4 10             	add    esp,0x10
c0027fdd:	89 c5                	mov    ebp,eax
c0027fdf:	a8 04                	test   al,0x4
c0027fe1:	75 6e                	jne    c0028051 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027fe3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027fe7:	31 d2                	xor    edx,edx
c0027fe9:	0f b6 c1             	movzx  eax,cl
c0027fec:	b9 0a 00 00 00       	mov    ecx,0xa
c0027ff1:	f7 f1                	div    ecx
c0027ff3:	c1 e0 04             	shl    eax,0x4
c0027ff6:	09 d0                	or     eax,edx
c0027ff8:	31 d2                	xor    edx,edx
c0027ffa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027ffe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0028003:	f7 f1                	div    ecx
c0028005:	c1 e0 04             	shl    eax,0x4
c0028008:	09 d0                	or     eax,edx
c002800a:	31 d2                	xor    edx,edx
c002800c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028010:	0f b6 c3             	movzx  eax,bl
c0028013:	f7 f1                	div    ecx
c0028015:	c1 e0 04             	shl    eax,0x4
c0028018:	09 d0                	or     eax,edx
c002801a:	31 d2                	xor    edx,edx
c002801c:	89 c3                	mov    ebx,eax
c002801e:	89 f0                	mov    eax,esi
c0028020:	0f b6 c0             	movzx  eax,al
c0028023:	f7 f1                	div    ecx
c0028025:	c1 e0 04             	shl    eax,0x4
c0028028:	09 d0                	or     eax,edx
c002802a:	31 d2                	xor    edx,edx
c002802c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0028030:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028035:	f7 f1                	div    ecx
c0028037:	c1 e0 04             	shl    eax,0x4
c002803a:	09 d0                	or     eax,edx
c002803c:	31 d2                	xor    edx,edx
c002803e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028042:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028046:	f7 f1                	div    ecx
c0028048:	c1 e0 04             	shl    eax,0x4
c002804b:	09 d0                	or     eax,edx
c002804d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028051:	83 e5 02             	and    ebp,0x2
c0028054:	75 1e                	jne    c0028074 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0028056:	0f b6 c3             	movzx  eax,bl
c0028059:	83 f8 0b             	cmp    eax,0xb
c002805c:	76 10                	jbe    c002806e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c002805e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0028061:	88 d3                	mov    bl,dl
c0028063:	84 d2                	test   dl,dl
c0028065:	75 02                	jne    c0028069 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0028067:	b3 0c                	mov    bl,0xc
c0028069:	83 cb 80             	or     ebx,0xffffff80
c002806c:	eb 06                	jmp    c0028074 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002806e:	85 c0                	test   eax,eax
c0028070:	75 02                	jne    c0028074 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0028072:	b3 0c                	mov    bl,0xc
c0028074:	0f b6 db             	movzx  ebx,bl
c0028077:	50                   	push   eax
c0028078:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002807d:	52                   	push   edx
c002807e:	6a 00                	push   0x0
c0028080:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0028086:	e8 8b dc fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c002808b:	83 c4 0c             	add    esp,0xc
c002808e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028093:	50                   	push   eax
c0028094:	6a 02                	push   0x2
c0028096:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c002809c:	e8 75 dc fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280a1:	83 c4 0c             	add    esp,0xc
c00280a4:	53                   	push   ebx
c00280a5:	6a 04                	push   0x4
c00280a7:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280ad:	e8 64 dc fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280b2:	83 c4 0c             	add    esp,0xc
c00280b5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00280ba:	52                   	push   edx
c00280bb:	6a 07                	push   0x7
c00280bd:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280c3:	e8 4e dc fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280c8:	83 c4 0c             	add    esp,0xc
c00280cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00280d0:	50                   	push   eax
c00280d1:	6a 08                	push   0x8
c00280d3:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280d9:	e8 38 dc fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280de:	83 c4 0c             	add    esp,0xc
c00280e1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00280e6:	55                   	push   ebp
c00280e7:	6a 09                	push   0x9
c00280e9:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00280ef:	e8 22 dc fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c00280f4:	5a                   	pop    edx
c00280f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00280f9:	e8 7c fb ff ff       	call   c0027c7a <RTC::completeRTCRefresh()>
c00280fe:	83 c4 3c             	add    esp,0x3c
c0028101:	b0 01                	mov    al,0x1
c0028103:	5b                   	pop    ebx
c0028104:	5e                   	pop    esi
c0028105:	5f                   	pop    edi
c0028106:	5d                   	pop    ebp
c0028107:	c3                   	ret    

c0028108 <rtcIRQHandler(regs*, void*)>:
c0028108:	53                   	push   ebx
c0028109:	83 ec 10             	sub    esp,0x10
c002810c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0028110:	6a 0c                	push   0xc
c0028112:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0028118:	e8 df da fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c002811d:	83 c4 10             	add    esp,0x10
c0028120:	a8 80                	test   al,0x80
c0028122:	74 24                	je     c0028148 <rtcIRQHandler(regs*, void*)+0x40>
c0028124:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c002812b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0028132:	66 ff 05 78 12 04 c0 	inc    WORD PTR ds:0xc0041278
c0028139:	75 0d                	jne    c0028148 <rtcIRQHandler(regs*, void*)+0x40>
c002813b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c002813f:	83 c4 08             	add    esp,0x8
c0028142:	5b                   	pop    ebx
c0028143:	e9 32 fb ff ff       	jmp    c0027c7a <RTC::completeRTCRefresh()>
c0028148:	83 c4 08             	add    esp,0x8
c002814b:	5b                   	pop    ebx
c002814c:	c3                   	ret    
c002814d:	90                   	nop

c002814e <RTC::RTC()>:
c002814e:	83 ec 1c             	sub    esp,0x1c
c0028151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028155:	83 ec 08             	sub    esp,0x8
c0028158:	68 a7 3a 03 c0       	push   0xc0033aa7
c002815d:	50                   	push   eax
c002815e:	e8 6f 2f ff ff       	call   c001b0d2 <Clock::Clock(char const*)>
c0028163:	83 c4 10             	add    esp,0x10
c0028166:	ba c4 3a 03 c0       	mov    edx,0xc0033ac4
c002816b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002816f:	89 10                	mov    DWORD PTR [eax],edx
c0028171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028175:	83 ec 0c             	sub    esp,0xc
c0028178:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002817c:	6a 01                	push   0x1
c002817e:	68 08 81 02 c0       	push   0xc0028108
c0028183:	6a 08                	push   0x8
c0028185:	50                   	push   eax
c0028186:	e8 23 34 ff ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002818b:	83 c4 20             	add    esp,0x20
c002818e:	89 c2                	mov    edx,eax
c0028190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028194:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002819a:	fa                   	cli    
c002819b:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00281a0:	83 c0 01             	add    eax,0x1
c00281a3:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00281a8:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00281ad:	83 ec 08             	sub    esp,0x8
c00281b0:	6a 0b                	push   0xb
c00281b2:	50                   	push   eax
c00281b3:	e8 44 da fe ff       	call   c0015bfc <Computer::readCMOS(unsigned char)>
c00281b8:	83 c4 10             	add    esp,0x10
c00281bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00281bf:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00281c4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00281c8:	83 ca 10             	or     edx,0x10
c00281cb:	0f b6 d2             	movzx  edx,dl
c00281ce:	83 ec 04             	sub    esp,0x4
c00281d1:	52                   	push   edx
c00281d2:	6a 0b                	push   0xb
c00281d4:	50                   	push   eax
c00281d5:	e8 3c db fe ff       	call   c0015d16 <Computer::writeCMOS(unsigned char, unsigned char)>
c00281da:	83 c4 10             	add    esp,0x10
c00281dd:	83 ec 0c             	sub    esp,0xc
c00281e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00281e4:	e8 91 fa ff ff       	call   c0027c7a <RTC::completeRTCRefresh()>
c00281e9:	83 c4 10             	add    esp,0x10
c00281ec:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00281f1:	83 e8 01             	sub    eax,0x1
c00281f4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00281f9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00281fe:	85 c0                	test   eax,eax
c0028200:	75 01                	jne    c0028203 <RTC::RTC()+0xb5>
c0028202:	fb                   	sti    
c0028203:	90                   	nop
c0028204:	83 c4 1c             	add    esp,0x1c
c0028207:	c3                   	ret    

c0028208 <HalConsoleScroll(int, int)>:
c0028208:	83 ec 10             	sub    esp,0x10
c002820b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0028213:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c002821b:	90                   	nop
c002821c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0028221:	0f 8f e1 00 00 00    	jg     c0028308 <HalConsoleScroll(int, int)+0x100>
c0028227:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002822f:	90                   	nop
c0028230:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0028238:	0f 8f be 00 00 00    	jg     c00282fc <HalConsoleScroll(int, int)+0xf4>
c002823e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028242:	89 d0                	mov    eax,edx
c0028244:	c1 e0 02             	shl    eax,0x2
c0028247:	01 d0                	add    eax,edx
c0028249:	c1 e0 05             	shl    eax,0x5
c002824c:	89 c2                	mov    edx,eax
c002824e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028252:	01 d0                	add    eax,edx
c0028254:	89 c2                	mov    edx,eax
c0028256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002825a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c002825d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028261:	89 d0                	mov    eax,edx
c0028263:	c1 e0 02             	shl    eax,0x2
c0028266:	01 d0                	add    eax,edx
c0028268:	c1 e0 05             	shl    eax,0x5
c002826b:	89 c2                	mov    edx,eax
c002826d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028271:	01 d0                	add    eax,edx
c0028273:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0028279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002827d:	01 c2                	add    edx,eax
c002827f:	8a 01                	mov    al,BYTE PTR [ecx]
c0028281:	88 02                	mov    BYTE PTR [edx],al
c0028283:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0028288:	75 66                	jne    c00282f0 <HalConsoleScroll(int, int)+0xe8>
c002828a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002828e:	83 e0 01             	and    eax,0x1
c0028291:	74 39                	je     c00282cc <HalConsoleScroll(int, int)+0xc4>
c0028293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028297:	83 e0 0f             	and    eax,0xf
c002829a:	88 c2                	mov    dl,al
c002829c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00282a0:	c1 e0 04             	shl    eax,0x4
c00282a3:	09 d0                	or     eax,edx
c00282a5:	88 c1                	mov    cl,al
c00282a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00282ab:	89 d0                	mov    eax,edx
c00282ad:	c1 e0 02             	shl    eax,0x2
c00282b0:	01 d0                	add    eax,edx
c00282b2:	c1 e0 05             	shl    eax,0x5
c00282b5:	89 c2                	mov    edx,eax
c00282b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00282bb:	01 d0                	add    eax,edx
c00282bd:	89 c2                	mov    edx,eax
c00282bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282c3:	01 d0                	add    eax,edx
c00282c5:	88 ca                	mov    dl,cl
c00282c7:	88 10                	mov    BYTE PTR [eax],dl
c00282c9:	eb 25                	jmp    c00282f0 <HalConsoleScroll(int, int)+0xe8>
c00282cb:	90                   	nop
c00282cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00282d0:	89 d0                	mov    eax,edx
c00282d2:	c1 e0 02             	shl    eax,0x2
c00282d5:	01 d0                	add    eax,edx
c00282d7:	c1 e0 05             	shl    eax,0x5
c00282da:	89 c2                	mov    edx,eax
c00282dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00282e0:	01 d0                	add    eax,edx
c00282e2:	89 c2                	mov    edx,eax
c00282e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282e8:	01 d0                	add    eax,edx
c00282ea:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00282ed:	8d 76 00             	lea    esi,[esi+0x0]
c00282f0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00282f5:	e9 36 ff ff ff       	jmp    c0028230 <HalConsoleScroll(int, int)+0x28>
c00282fa:	66 90                	xchg   ax,ax
c00282fc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028301:	e9 16 ff ff ff       	jmp    c002821c <HalConsoleScroll(int, int)+0x14>
c0028306:	66 90                	xchg   ax,ax
c0028308:	90                   	nop
c0028309:	83 c4 10             	add    esp,0x10
c002830c:	c3                   	ret    
c002830d:	8d 76 00             	lea    esi,[esi+0x0]

c0028310 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0028310:	83 ec 14             	sub    esp,0x14
c0028313:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028317:	88 04 24             	mov    BYTE PTR [esp],al
c002831a:	8a 04 24             	mov    al,BYTE PTR [esp]
c002831d:	0f b6 c0             	movzx  eax,al
c0028320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028324:	89 d1                	mov    ecx,edx
c0028326:	83 e1 0f             	and    ecx,0xf
c0028329:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002832d:	c1 e2 04             	shl    edx,0x4
c0028330:	0f b6 d2             	movzx  edx,dl
c0028333:	09 ca                	or     edx,ecx
c0028335:	c1 e2 08             	shl    edx,0x8
c0028338:	09 d0                	or     eax,edx
c002833a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c002833f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0028347:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002834b:	89 d0                	mov    eax,edx
c002834d:	c1 e0 02             	shl    eax,0x2
c0028350:	01 d0                	add    eax,edx
c0028352:	c1 e0 04             	shl    eax,0x4
c0028355:	89 c2                	mov    edx,eax
c0028357:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002835b:	01 d0                	add    eax,edx
c002835d:	01 c0                	add    eax,eax
c002835f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0028363:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028367:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c002836c:	66 89 02             	mov    WORD PTR [edx],ax
c002836f:	90                   	nop
c0028370:	83 c4 14             	add    esp,0x14
c0028373:	c3                   	ret    

c0028374 <HalConsoleCursorUpdate(int, int)>:
c0028374:	83 ec 20             	sub    esp,0x20
c0028377:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002837b:	89 c2                	mov    edx,eax
c002837d:	c1 e2 02             	shl    edx,0x2
c0028380:	01 d0                	add    eax,edx
c0028382:	c1 e0 04             	shl    eax,0x4
c0028385:	89 c2                	mov    edx,eax
c0028387:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002838b:	01 d0                	add    eax,edx
c002838d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0028392:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0028399:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c002839e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00283a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00283a6:	ee                   	out    dx,al
c00283a7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00283ac:	0f b6 c0             	movzx  eax,al
c00283af:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00283b6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00283ba:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00283be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283c2:	ee                   	out    dx,al
c00283c3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00283ca:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00283cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00283d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00283d7:	ee                   	out    dx,al
c00283d8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00283dd:	c1 e8 08             	shr    eax,0x8
c00283e0:	0f b6 c0             	movzx  eax,al
c00283e3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00283ea:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00283ee:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00283f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00283f6:	ee                   	out    dx,al
c00283f7:	90                   	nop
c00283f8:	83 c4 20             	add    esp,0x20
c00283fb:	c3                   	ret    

c00283fc <FAT::getName()>:
c00283fc:	b8 f8 3a 03 c0       	mov    eax,0xc0033af8
c0028401:	c3                   	ret    
c0028402:	66 90                	xchg   ax,ax

c0028404 <FAT::tell(void*, unsigned long long*)>:
c0028404:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028409:	75 09                	jne    c0028414 <FAT::tell(void*, unsigned long long*)+0x10>
c002840b:	b8 04 00 00 00       	mov    eax,0x4
c0028410:	c3                   	ret    
c0028411:	8d 76 00             	lea    esi,[esi+0x0]
c0028414:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028419:	75 09                	jne    c0028424 <FAT::tell(void*, unsigned long long*)+0x20>
c002841b:	b8 04 00 00 00       	mov    eax,0x4
c0028420:	c3                   	ret    
c0028421:	8d 76 00             	lea    esi,[esi+0x0]
c0028424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028428:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002842b:	ba 00 00 00 00       	mov    edx,0x0
c0028430:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028434:	89 01                	mov    DWORD PTR [ecx],eax
c0028436:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028439:	b8 00 00 00 00       	mov    eax,0x0
c002843e:	c3                   	ret    
c002843f:	90                   	nop

c0028440 <FAT::stat(void*, unsigned long long*)>:
c0028440:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028445:	75 09                	jne    c0028450 <FAT::stat(void*, unsigned long long*)+0x10>
c0028447:	b8 04 00 00 00       	mov    eax,0x4
c002844c:	c3                   	ret    
c002844d:	8d 76 00             	lea    esi,[esi+0x0]
c0028450:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028455:	75 09                	jne    c0028460 <FAT::stat(void*, unsigned long long*)+0x20>
c0028457:	b8 04 00 00 00       	mov    eax,0x4
c002845c:	c3                   	ret    
c002845d:	8d 76 00             	lea    esi,[esi+0x0]
c0028460:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028464:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0028467:	ba 00 00 00 00       	mov    edx,0x0
c002846c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028470:	89 01                	mov    DWORD PTR [ecx],eax
c0028472:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028475:	b8 00 00 00 00       	mov    eax,0x0
c002847a:	c3                   	ret    
c002847b:	90                   	nop

c002847c <FAT::~FAT()>:
c002847c:	83 ec 0c             	sub    esp,0xc
c002847f:	ba 44 3b 03 c0       	mov    edx,0xc0033b44
c0028484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028488:	89 10                	mov    DWORD PTR [eax],edx
c002848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848e:	83 ec 0c             	sub    esp,0xc
c0028491:	50                   	push   eax
c0028492:	e8 37 1e ff ff       	call   c001a2ce <Filesystem::~Filesystem()>
c0028497:	83 c4 10             	add    esp,0x10
c002849a:	90                   	nop
c002849b:	83 c4 0c             	add    esp,0xc
c002849e:	c3                   	ret    
c002849f:	90                   	nop

c00284a0 <FAT::~FAT()>:
c00284a0:	83 ec 0c             	sub    esp,0xc
c00284a3:	83 ec 0c             	sub    esp,0xc
c00284a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284aa:	e8 cd ff ff ff       	call   c002847c <FAT::~FAT()>
c00284af:	83 c4 10             	add    esp,0x10
c00284b2:	83 ec 08             	sub    esp,0x8
c00284b5:	6a 08                	push   0x8
c00284b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284bb:	e8 58 0e ff ff       	call   c0019318 <operator delete(void*, unsigned long)>
c00284c0:	83 c4 10             	add    esp,0x10
c00284c3:	83 c4 0c             	add    esp,0xc
c00284c6:	c3                   	ret    
c00284c7:	90                   	nop

c00284c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00284c8:	83 ec 1c             	sub    esp,0x1c
c00284cb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00284d2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00284d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00284db:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00284e2:	83 f8 ff             	cmp    eax,0xffffffff
c00284e5:	75 35                	jne    c002851c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00284e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00284eb:	88 c2                	mov    dl,al
c00284ed:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00284f2:	01 d0                	add    eax,edx
c00284f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00284f8:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c00284fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028502:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c0028509:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002850e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0028512:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c0028519:	eb 19                	jmp    c0028534 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c002851b:	90                   	nop
c002851c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028520:	88 c2                	mov    dl,al
c0028522:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028526:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c002852d:	01 d0                	add    eax,edx
c002852f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028533:	90                   	nop
c0028534:	83 ec 04             	sub    esp,0x4
c0028537:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002853b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002853f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0028543:	50                   	push   eax
c0028544:	e8 d2 cd fd ff       	call   c000531b <f_getlabel>
c0028549:	83 c4 10             	add    esp,0x10
c002854c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028550:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028555:	75 09                	jne    c0028560 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0028557:	b8 00 00 00 00       	mov    eax,0x0
c002855c:	eb 0a                	jmp    c0028568 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c002855e:	66 90                	xchg   ax,ax
c0028560:	b8 01 00 00 00       	mov    eax,0x1
c0028565:	8d 76 00             	lea    esi,[esi+0x0]
c0028568:	83 c4 1c             	add    esp,0x1c
c002856b:	c3                   	ret    

c002856c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002856c:	57                   	push   edi
c002856d:	83 ec 58             	sub    esp,0x58
c0028570:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0028578:	8d 54 24 10          	lea    edx,[esp+0x10]
c002857c:	b8 00 00 00 00       	mov    eax,0x0
c0028581:	b9 0f 00 00 00       	mov    ecx,0xf
c0028586:	fc                   	cld    
c0028587:	89 d7                	mov    edi,edx
c0028589:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002858b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002858f:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028596:	83 f8 ff             	cmp    eax,0xffffffff
c0028599:	75 35                	jne    c00285d0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c002859b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002859f:	88 c2                	mov    dl,al
c00285a1:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00285a6:	01 d0                	add    eax,edx
c00285a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00285ac:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c00285b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00285b6:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c00285bd:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00285c2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00285c6:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00285cd:	eb 19                	jmp    c00285e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00285cf:	90                   	nop
c00285d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00285d4:	88 c2                	mov    dl,al
c00285d6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00285da:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00285e1:	01 d0                	add    eax,edx
c00285e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00285e7:	90                   	nop
c00285e8:	83 ec 08             	sub    esp,0x8
c00285eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00285ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00285f3:	50                   	push   eax
c00285f4:	e8 47 82 fd ff       	call   c0000840 <strcat>
c00285f9:	83 c4 10             	add    esp,0x10
c00285fc:	83 ec 0c             	sub    esp,0xc
c00285ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028603:	50                   	push   eax
c0028604:	e8 63 ce fd ff       	call   c000546c <f_setlabel>
c0028609:	83 c4 10             	add    esp,0x10
c002860c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028610:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028615:	75 09                	jne    c0028620 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0028617:	b8 00 00 00 00       	mov    eax,0x0
c002861c:	eb 0a                	jmp    c0028628 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c002861e:	66 90                	xchg   ax,ax
c0028620:	b8 01 00 00 00       	mov    eax,0x1
c0028625:	8d 76 00             	lea    esi,[esi+0x0]
c0028628:	83 c4 58             	add    esp,0x58
c002862b:	5f                   	pop    edi
c002862c:	c3                   	ret    
c002862d:	90                   	nop
c002862e:	66 90                	xchg   ax,ax

c0028630 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028630:	83 ec 2c             	sub    esp,0x2c
c0028633:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002863b:	83 ec 08             	sub    esp,0x8
c002863e:	68 1c 3b 03 c0       	push   0xc0033b1c
c0028643:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028647:	e8 04 81 fd ff       	call   c0000750 <strcmp>
c002864c:	83 c4 10             	add    esp,0x10
c002864f:	85 c0                	test   eax,eax
c0028651:	0f 94 c0             	sete   al
c0028654:	0f b6 c0             	movzx  eax,al
c0028657:	85 c0                	test   eax,eax
c0028659:	74 0d                	je     c0028668 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002865b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028663:	e9 c0 00 00 00       	jmp    c0028728 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028668:	83 ec 08             	sub    esp,0x8
c002866b:	68 0e 3b 03 c0       	push   0xc0033b0e
c0028670:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028674:	e8 d7 80 fd ff       	call   c0000750 <strcmp>
c0028679:	83 c4 10             	add    esp,0x10
c002867c:	85 c0                	test   eax,eax
c002867e:	0f 94 c0             	sete   al
c0028681:	0f b6 c0             	movzx  eax,al
c0028684:	85 c0                	test   eax,eax
c0028686:	74 10                	je     c0028698 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028688:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028690:	e9 93 00 00 00       	jmp    c0028728 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028695:	8d 76 00             	lea    esi,[esi+0x0]
c0028698:	83 ec 08             	sub    esp,0x8
c002869b:	68 14 3b 03 c0       	push   0xc0033b14
c00286a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00286a4:	e8 a7 80 fd ff       	call   c0000750 <strcmp>
c00286a9:	83 c4 10             	add    esp,0x10
c00286ac:	85 c0                	test   eax,eax
c00286ae:	0f 94 c0             	sete   al
c00286b1:	0f b6 c0             	movzx  eax,al
c00286b4:	85 c0                	test   eax,eax
c00286b6:	74 0c                	je     c00286c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00286b8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00286c0:	eb 66                	jmp    c0028728 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00286c2:	66 90                	xchg   ax,ax
c00286c4:	83 ec 08             	sub    esp,0x8
c00286c7:	68 78 fb 02 c0       	push   0xc002fb78
c00286cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00286d0:	e8 7b 80 fd ff       	call   c0000750 <strcmp>
c00286d5:	83 c4 10             	add    esp,0x10
c00286d8:	85 c0                	test   eax,eax
c00286da:	0f 94 c0             	sete   al
c00286dd:	0f b6 c0             	movzx  eax,al
c00286e0:	85 c0                	test   eax,eax
c00286e2:	74 0c                	je     c00286f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00286e4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00286ec:	eb 3a                	jmp    c0028728 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00286ee:	66 90                	xchg   ax,ax
c00286f0:	83 ec 08             	sub    esp,0x8
c00286f3:	68 1a 3b 03 c0       	push   0xc0033b1a
c00286f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00286fc:	e8 4f 80 fd ff       	call   c0000750 <strcmp>
c0028701:	83 c4 10             	add    esp,0x10
c0028704:	85 c0                	test   eax,eax
c0028706:	0f 94 c0             	sete   al
c0028709:	0f b6 c0             	movzx  eax,al
c002870c:	85 c0                	test   eax,eax
c002870e:	74 0c                	je     c002871c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028710:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028718:	eb 0e                	jmp    c0028728 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002871a:	66 90                	xchg   ax,ax
c002871c:	b8 08 00 00 00       	mov    eax,0x8
c0028721:	e9 ea 00 00 00       	jmp    c0028810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028726:	66 90                	xchg   ax,ax
c0028728:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002872f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028734:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028738:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c002873f:	83 f8 ff             	cmp    eax,0xffffffff
c0028742:	75 34                	jne    c0028778 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028744:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028748:	88 c2                	mov    dl,al
c002874a:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002874f:	01 d0                	add    eax,edx
c0028751:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028755:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c002875b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002875f:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c0028766:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002876b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002876f:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c0028776:	eb 18                	jmp    c0028790 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028778:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002877c:	88 c2                	mov    dl,al
c002877e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028782:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028789:	01 d0                	add    eax,edx
c002878b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002878f:	90                   	nop
c0028790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028794:	88 04 24             	mov    BYTE PTR [esp],al
c0028797:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002879f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00287a7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00287ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00287b4:	83 ec 0c             	sub    esp,0xc
c00287b7:	68 00 20 00 00       	push   0x2000
c00287bc:	e8 f6 dd fe ff       	call   c00165b7 <malloc>
c00287c1:	83 c4 10             	add    esp,0x10
c00287c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00287c8:	68 00 20 00 00       	push   0x2000
c00287cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287d5:	50                   	push   eax
c00287d6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00287da:	50                   	push   eax
c00287db:	e8 89 cf fd ff       	call   c0005769 <f_mkfs>
c00287e0:	83 c4 10             	add    esp,0x10
c00287e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00287e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287ec:	75 0a                	jne    c00287f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00287ee:	b8 00 00 00 00       	mov    eax,0x0
c00287f3:	eb 1b                	jmp    c0028810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00287f5:	8d 76 00             	lea    esi,[esi+0x0]
c00287f8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00287fd:	75 09                	jne    c0028808 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00287ff:	b8 09 00 00 00       	mov    eax,0x9
c0028804:	eb 0a                	jmp    c0028810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028806:	66 90                	xchg   ax,ax
c0028808:	b8 01 00 00 00       	mov    eax,0x1
c002880d:	8d 76 00             	lea    esi,[esi+0x0]
c0028810:	83 c4 2c             	add    esp,0x2c
c0028813:	c3                   	ret    

c0028814 <FAT::tryMount(LogicalDisk*, int)>:
c0028814:	81 ec 4c 03 00 00    	sub    esp,0x34c
c002881a:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002881f:	83 f8 14             	cmp    eax,0x14
c0028822:	75 18                	jne    c002883c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028824:	83 ec 0c             	sub    esp,0xc
c0028827:	68 20 3b 03 c0       	push   0xc0033b20
c002882c:	e8 4d 7f ff ff       	call   c002077e <KePanic(char const*)>
c0028831:	83 c4 10             	add    esp,0x10
c0028834:	b0 00                	mov    al,0x0
c0028836:	e9 ed 01 00 00       	jmp    c0028a28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002883b:	90                   	nop
c002883c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028843:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028849:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002884f:	3d 00 02 00 00       	cmp    eax,0x200
c0028854:	74 0a                	je     c0028860 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0028856:	b0 00                	mov    al,0x0
c0028858:	e9 cb 01 00 00       	jmp    c0028a28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002885d:	8d 76 00             	lea    esi,[esi+0x0]
c0028860:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028868:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002886f:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028876:	83 f8 ff             	cmp    eax,0xffffffff
c0028879:	74 09                	je     c0028884 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002887b:	b0 01                	mov    al,0x1
c002887d:	e9 a6 01 00 00       	jmp    c0028a28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028882:	66 90                	xchg   ax,ax
c0028884:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c002888e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0028896:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c002889d:	88 c2                	mov    dl,al
c002889f:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00288a4:	01 d0                	add    eax,edx
c00288a6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00288ad:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c00288b3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00288ba:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c00288c1:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00288c6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00288cd:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00288d4:	83 ec 0c             	sub    esp,0xc
c00288d7:	68 34 02 00 00       	push   0x234
c00288dc:	e8 d6 dc fe ff       	call   c00165b7 <malloc>
c00288e1:	83 c4 10             	add    esp,0x10
c00288e4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00288eb:	83 ec 04             	sub    esp,0x4
c00288ee:	6a 00                	push   0x0
c00288f0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00288f7:	50                   	push   eax
c00288f8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00288ff:	e8 40 b6 fd ff       	call   c0003f44 <f_mount>
c0028904:	83 c4 10             	add    esp,0x10
c0028907:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002890e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028916:	74 1c                	je     c0028934 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028918:	83 ec 0c             	sub    esp,0xc
c002891b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028922:	e8 b0 dc fe ff       	call   c00165d7 <rfree>
c0028927:	83 c4 10             	add    esp,0x10
c002892a:	b0 00                	mov    al,0x0
c002892c:	e9 f7 00 00 00       	jmp    c0028a28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028931:	8d 76 00             	lea    esi,[esi+0x0]
c0028934:	83 ec 04             	sub    esp,0x4
c0028937:	68 00 01 00 00       	push   0x100
c002893c:	6a 00                	push   0x0
c002893e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028945:	50                   	push   eax
c0028946:	e8 a5 7b fd ff       	call   c00004f0 <memset>
c002894b:	83 c4 10             	add    esp,0x10
c002894e:	83 ec 08             	sub    esp,0x8
c0028951:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028958:	50                   	push   eax
c0028959:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028960:	50                   	push   eax
c0028961:	e8 da 7e fd ff       	call   c0000840 <strcat>
c0028966:	83 c4 10             	add    esp,0x10
c0028969:	83 ec 08             	sub    esp,0x8
c002896c:	68 2e 3b 03 c0       	push   0xc0033b2e
c0028971:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028978:	50                   	push   eax
c0028979:	e8 c2 7e fd ff       	call   c0000840 <strcat>
c002897e:	83 c4 10             	add    esp,0x10
c0028981:	83 ec 04             	sub    esp,0x4
c0028984:	6a 01                	push   0x1
c0028986:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c002898d:	50                   	push   eax
c002898e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028992:	50                   	push   eax
c0028993:	e8 0e b6 fd ff       	call   c0003fa6 <f_open>
c0028998:	83 c4 10             	add    esp,0x10
c002899b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00289a2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00289a9:	85 c0                	test   eax,eax
c00289ab:	74 0b                	je     c00289b8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00289ad:	78 31                	js     c00289e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00289af:	83 e8 04             	sub    eax,0x4
c00289b2:	83 f8 01             	cmp    eax,0x1
c00289b5:	77 29                	ja     c00289e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00289b7:	90                   	nop
c00289b8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00289c7:	50                   	push   eax
c00289c8:	e8 a8 bd fd ff       	call   c0004775 <f_close>
c00289cd:	83 c4 10             	add    esp,0x10
c00289d0:	90                   	nop
c00289d1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00289d9:	85 c0                	test   eax,eax
c00289db:	74 43                	je     c0028a20 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00289dd:	eb 31                	jmp    c0028a10 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00289df:	90                   	nop
c00289e0:	83 ec 0c             	sub    esp,0xc
c00289e3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00289ea:	e8 e8 db fe ff       	call   c00165d7 <rfree>
c00289ef:	83 c4 10             	add    esp,0x10
c00289f2:	83 ec 04             	sub    esp,0x4
c00289f5:	6a 00                	push   0x0
c00289f7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00289fe:	50                   	push   eax
c00289ff:	6a 00                	push   0x0
c0028a01:	e8 3e b5 fd ff       	call   c0003f44 <f_mount>
c0028a06:	83 c4 10             	add    esp,0x10
c0028a09:	b0 00                	mov    al,0x0
c0028a0b:	eb 1b                	jmp    c0028a28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a10:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c0028a15:	83 c0 01             	add    eax,0x1
c0028a18:	a3 80 12 04 c0       	mov    ds:0xc0041280,eax
c0028a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a20:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028a27:	90                   	nop
c0028a28:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028a2e:	c3                   	ret    
c0028a2f:	90                   	nop

c0028a30 <FAT::allocateSwapfile(char const*, int)>:
c0028a30:	55                   	push   ebp
c0028a31:	57                   	push   edi
c0028a32:	56                   	push   esi
c0028a33:	53                   	push   ebx
c0028a34:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028a3a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028a45:	83 ec 0c             	sub    esp,0xc
c0028a48:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028a4f:	e8 63 db fe ff       	call   c00165b7 <malloc>
c0028a54:	83 c4 10             	add    esp,0x10
c0028a57:	89 c7                	mov    edi,eax
c0028a59:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0028a5e:	83 ec 04             	sub    esp,0x4
c0028a61:	50                   	push   eax
c0028a62:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028a69:	57                   	push   edi
c0028a6a:	e8 dd 1b ff ff       	call   c001a64c <File::File(char const*, Process*)>
c0028a6f:	83 c4 10             	add    esp,0x10
c0028a72:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028a79:	83 ec 04             	sub    esp,0x4
c0028a7c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028a80:	50                   	push   eax
c0028a81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028a85:	50                   	push   eax
c0028a86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028a8d:	e8 da 1e ff ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c0028a92:	83 c4 10             	add    esp,0x10
c0028a95:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028a9c:	c1 e0 14             	shl    eax,0x14
c0028a9f:	89 c7                	mov    edi,eax
c0028aa1:	89 c5                	mov    ebp,eax
c0028aa3:	c1 fd 1f             	sar    ebp,0x1f
c0028aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028aae:	89 f9                	mov    ecx,edi
c0028ab0:	31 c1                	xor    ecx,eax
c0028ab2:	89 cb                	mov    ebx,ecx
c0028ab4:	89 e9                	mov    ecx,ebp
c0028ab6:	31 d1                	xor    ecx,edx
c0028ab8:	89 ce                	mov    esi,ecx
c0028aba:	89 f0                	mov    eax,esi
c0028abc:	09 d8                	or     eax,ebx
c0028abe:	0f 84 9c 00 00 00    	je     c0028b60 <FAT::allocateSwapfile(char const*, int)+0x130>
c0028ac4:	83 ec 0c             	sub    esp,0xc
c0028ac7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028ace:	e8 65 1d ff ff       	call   c001a838 <File::unlink()>
c0028ad3:	83 c4 10             	add    esp,0x10
c0028ad6:	83 ec 08             	sub    esp,0x8
c0028ad9:	6a 12                	push   0x12
c0028adb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028ae2:	e8 83 1b ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028af1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028af7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028afe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028b05:	c1 e0 14             	shl    eax,0x14
c0028b08:	83 ec 04             	sub    esp,0x4
c0028b0b:	6a 01                	push   0x1
c0028b0d:	50                   	push   eax
c0028b0e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028b15:	e8 e2 ca fd ff       	call   c00055fc <f_expand>
c0028b1a:	83 c4 10             	add    esp,0x10
c0028b1d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b26:	83 c0 10             	add    eax,0x10
c0028b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b2b:	83 ec 0c             	sub    esp,0xc
c0028b2e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028b32:	52                   	push   edx
c0028b33:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028b37:	52                   	push   edx
c0028b38:	6a 00                	push   0x0
c0028b3a:	68 00 04 00 00       	push   0x400
c0028b3f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028b46:	ff d0                	call   eax
c0028b48:	83 c4 20             	add    esp,0x20
c0028b4b:	83 ec 0c             	sub    esp,0xc
c0028b4e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028b55:	e8 6e 1b ff ff       	call   c001a6c8 <File::close()>
c0028b5a:	83 c4 10             	add    esp,0x10
c0028b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b60:	83 ec 08             	sub    esp,0x8
c0028b63:	6a 01                	push   0x1
c0028b65:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028b6c:	e8 f9 1a ff ff       	call   c001a66a <File::open(FileOpenMode)>
c0028b71:	83 c4 10             	add    esp,0x10
c0028b74:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7d:	83 c0 0c             	add    eax,0xc
c0028b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b82:	83 ec 0c             	sub    esp,0xc
c0028b85:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028b89:	52                   	push   edx
c0028b8a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028b8e:	52                   	push   edx
c0028b8f:	6a 00                	push   0x0
c0028b91:	6a 04                	push   0x4
c0028b93:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028b9a:	ff d0                	call   eax
c0028b9c:	83 c4 20             	add    esp,0x20
c0028b9f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028ba6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028bac:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028bb3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028bba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028bbd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028bc4:	83 ec 0c             	sub    esp,0xc
c0028bc7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028bce:	e8 f5 1a ff ff       	call   c001a6c8 <File::close()>
c0028bd3:	83 c4 10             	add    esp,0x10
c0028bd6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028bdd:	ba 00 00 00 00       	mov    edx,0x0
c0028be2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028be8:	5b                   	pop    ebx
c0028be9:	5e                   	pop    esi
c0028bea:	5f                   	pop    edi
c0028beb:	5d                   	pop    ebp
c0028bec:	c3                   	ret    
c0028bed:	90                   	nop
c0028bee:	66 90                	xchg   ax,ax

c0028bf0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028bf0:	57                   	push   edi
c0028bf1:	56                   	push   esi
c0028bf2:	53                   	push   ebx
c0028bf3:	81 ec 50 02 00 00    	sub    esp,0x250
c0028bf9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028c01:	74 0d                	je     c0028c10 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028c03:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028c0b:	75 0f                	jne    c0028c1c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c10:	b8 04 00 00 00       	mov    eax,0x4
c0028c15:	e9 3a 01 00 00       	jmp    c0028d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028c1a:	66 90                	xchg   ax,ax
c0028c1c:	83 ec 08             	sub    esp,0x8
c0028c1f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028c26:	50                   	push   eax
c0028c27:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028c2e:	e8 0f be fd ff       	call   c0004a42 <f_readdir>
c0028c33:	83 c4 10             	add    esp,0x10
c0028c36:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028c3d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028c4e:	83 c0 16             	add    eax,0x16
c0028c51:	50                   	push   eax
c0028c52:	e8 19 79 fd ff       	call   c0000570 <strlen>
c0028c57:	83 c4 10             	add    esp,0x10
c0028c5a:	ba 00 00 00 00       	mov    edx,0x0
c0028c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028c63:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028c67:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028c6e:	0f b6 c0             	movzx  eax,al
c0028c71:	83 e0 10             	and    eax,0x10
c0028c74:	74 0a                	je     c0028c80 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028c76:	b8 02 00 00 00       	mov    eax,0x2
c0028c7b:	eb 0b                	jmp    c0028c88 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028c80:	b8 01 00 00 00       	mov    eax,0x1
c0028c85:	8d 76 00             	lea    esi,[esi+0x0]
c0028c88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028c8c:	83 ec 08             	sub    esp,0x8
c0028c8f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028c96:	83 c0 16             	add    eax,0x16
c0028c99:	50                   	push   eax
c0028c9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c9e:	83 c0 10             	add    eax,0x10
c0028ca1:	50                   	push   eax
c0028ca2:	e8 99 79 fd ff       	call   c0000640 <strcpy>
c0028ca7:	83 c4 10             	add    esp,0x10
c0028caa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028cb1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028cb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028cbc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0028cc3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028cca:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028cd1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028cd8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028cdf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028ce6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028ced:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028cf4:	89 c6                	mov    esi,eax
c0028cf6:	89 d7                	mov    edi,edx
c0028cf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028cfa:	89 c8                	mov    eax,ecx
c0028cfc:	89 fa                	mov    edx,edi
c0028cfe:	89 f3                	mov    ebx,esi
c0028d00:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028d07:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028d0e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028d15:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028d1c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028d22:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028d29:	0f be c0             	movsx  eax,al
c0028d2c:	85 c0                	test   eax,eax
c0028d2e:	75 08                	jne    c0028d38 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028d30:	b8 07 00 00 00       	mov    eax,0x7
c0028d35:	eb 1d                	jmp    c0028d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028d37:	90                   	nop
c0028d38:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028d3f:	85 c0                	test   eax,eax
c0028d41:	75 09                	jne    c0028d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028d43:	b8 00 00 00 00       	mov    eax,0x0
c0028d48:	eb 0a                	jmp    c0028d54 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028d4a:	66 90                	xchg   ax,ax
c0028d4c:	b8 01 00 00 00       	mov    eax,0x1
c0028d51:	8d 76 00             	lea    esi,[esi+0x0]
c0028d54:	81 c4 50 02 00 00    	add    esp,0x250
c0028d5a:	5b                   	pop    ebx
c0028d5b:	5e                   	pop    esi
c0028d5c:	5f                   	pop    edi
c0028d5d:	c3                   	ret    
c0028d5e:	66 90                	xchg   ax,ax

c0028d60 <FAT::read(void*, unsigned long, void*, int*)>:
c0028d60:	83 ec 1c             	sub    esp,0x1c
c0028d63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028d68:	74 0a                	je     c0028d74 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028d6a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028d6f:	75 0b                	jne    c0028d7c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028d71:	8d 76 00             	lea    esi,[esi+0x0]
c0028d74:	b8 04 00 00 00       	mov    eax,0x4
c0028d79:	eb 41                	jmp    c0028dbc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028d7b:	90                   	nop
c0028d7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028d80:	50                   	push   eax
c0028d81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028d85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028d89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d8d:	e8 d7 b4 fd ff       	call   c0004269 <f_read>
c0028d92:	83 c4 10             	add    esp,0x10
c0028d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028d99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d9d:	89 c2                	mov    edx,eax
c0028d9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028da3:	89 10                	mov    DWORD PTR [eax],edx
c0028da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028da9:	85 c0                	test   eax,eax
c0028dab:	75 07                	jne    c0028db4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028dad:	b8 00 00 00 00       	mov    eax,0x0
c0028db2:	eb 08                	jmp    c0028dbc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028db4:	b8 01 00 00 00       	mov    eax,0x1
c0028db9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dbc:	83 c4 1c             	add    esp,0x1c
c0028dbf:	c3                   	ret    

c0028dc0 <FAT::write(void*, unsigned long, void*, int*)>:
c0028dc0:	83 ec 1c             	sub    esp,0x1c
c0028dc3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028dc8:	74 0a                	je     c0028dd4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028dca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028dcf:	75 0b                	jne    c0028ddc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0028dd4:	b8 04 00 00 00       	mov    eax,0x4
c0028dd9:	eb 41                	jmp    c0028e1c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028ddb:	90                   	nop
c0028ddc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028de0:	50                   	push   eax
c0028de1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028de5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028de9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ded:	e8 76 b6 fd ff       	call   c0004468 <f_write>
c0028df2:	83 c4 10             	add    esp,0x10
c0028df5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dfd:	89 c2                	mov    edx,eax
c0028dff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028e03:	89 10                	mov    DWORD PTR [eax],edx
c0028e05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e09:	85 c0                	test   eax,eax
c0028e0b:	75 07                	jne    c0028e14 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028e0d:	b8 00 00 00 00       	mov    eax,0x0
c0028e12:	eb 08                	jmp    c0028e1c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028e14:	b8 01 00 00 00       	mov    eax,0x1
c0028e19:	8d 76 00             	lea    esi,[esi+0x0]
c0028e1c:	83 c4 1c             	add    esp,0x1c
c0028e1f:	c3                   	ret    

c0028e20 <FAT::close(void*)>:
c0028e20:	83 ec 1c             	sub    esp,0x1c
c0028e23:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028e28:	75 0a                	jne    c0028e34 <FAT::close(void*)+0x14>
c0028e2a:	b8 04 00 00 00       	mov    eax,0x4
c0028e2f:	eb 3f                	jmp    c0028e70 <FAT::close(void*)+0x50>
c0028e31:	8d 76 00             	lea    esi,[esi+0x0]
c0028e34:	83 ec 0c             	sub    esp,0xc
c0028e37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e3b:	e8 35 b9 fd ff       	call   c0004775 <f_close>
c0028e40:	83 c4 10             	add    esp,0x10
c0028e43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028e47:	83 ec 0c             	sub    esp,0xc
c0028e4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e4e:	e8 74 d7 fe ff       	call   c00165c7 <free>
c0028e53:	83 c4 10             	add    esp,0x10
c0028e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028e5a:	85 c0                	test   eax,eax
c0028e5c:	75 0a                	jne    c0028e68 <FAT::close(void*)+0x48>
c0028e5e:	b8 00 00 00 00       	mov    eax,0x0
c0028e63:	eb 0b                	jmp    c0028e70 <FAT::close(void*)+0x50>
c0028e65:	8d 76 00             	lea    esi,[esi+0x0]
c0028e68:	b8 01 00 00 00       	mov    eax,0x1
c0028e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e70:	83 c4 1c             	add    esp,0x1c
c0028e73:	c3                   	ret    

c0028e74 <FAT::closeDir(void*)>:
c0028e74:	83 ec 1c             	sub    esp,0x1c
c0028e77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028e7c:	75 0a                	jne    c0028e88 <FAT::closeDir(void*)+0x14>
c0028e7e:	b8 04 00 00 00       	mov    eax,0x4
c0028e83:	eb 3f                	jmp    c0028ec4 <FAT::closeDir(void*)+0x50>
c0028e85:	8d 76 00             	lea    esi,[esi+0x0]
c0028e88:	83 ec 0c             	sub    esp,0xc
c0028e8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e8f:	e8 8c bb fd ff       	call   c0004a20 <f_closedir>
c0028e94:	83 c4 10             	add    esp,0x10
c0028e97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028e9b:	83 ec 0c             	sub    esp,0xc
c0028e9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ea2:	e8 20 d7 fe ff       	call   c00165c7 <free>
c0028ea7:	83 c4 10             	add    esp,0x10
c0028eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028eae:	85 c0                	test   eax,eax
c0028eb0:	75 0a                	jne    c0028ebc <FAT::closeDir(void*)+0x48>
c0028eb2:	b8 00 00 00 00       	mov    eax,0x0
c0028eb7:	eb 0b                	jmp    c0028ec4 <FAT::closeDir(void*)+0x50>
c0028eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0028ebc:	b8 01 00 00 00       	mov    eax,0x1
c0028ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ec4:	83 c4 1c             	add    esp,0x1c
c0028ec7:	c3                   	ret    

c0028ec8 <FAT::truncate(void*, unsigned long long)>:
c0028ec8:	83 ec 2c             	sub    esp,0x2c
c0028ecb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028ed3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028edb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028ee0:	75 0a                	jne    c0028eec <FAT::truncate(void*, unsigned long long)+0x24>
c0028ee2:	b8 04 00 00 00       	mov    eax,0x4
c0028ee7:	eb 47                	jmp    c0028f30 <FAT::truncate(void*, unsigned long long)+0x68>
c0028ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0028eec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028ef0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028ef3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028ef7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028eff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028f03:	83 ec 08             	sub    esp,0x8
c0028f06:	50                   	push   eax
c0028f07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028f0b:	e8 94 b8 fd ff       	call   c00047a4 <f_lseek>
c0028f10:	83 c4 10             	add    esp,0x10
c0028f13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028f17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f1b:	85 c0                	test   eax,eax
c0028f1d:	75 09                	jne    c0028f28 <FAT::truncate(void*, unsigned long long)+0x60>
c0028f1f:	b8 00 00 00 00       	mov    eax,0x0
c0028f24:	eb 0a                	jmp    c0028f30 <FAT::truncate(void*, unsigned long long)+0x68>
c0028f26:	66 90                	xchg   ax,ax
c0028f28:	b8 01 00 00 00       	mov    eax,0x1
c0028f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0028f30:	83 c4 2c             	add    esp,0x2c
c0028f33:	c3                   	ret    

c0028f34 <FAT::seek(void*, unsigned long long)>:
c0028f34:	83 ec 2c             	sub    esp,0x2c
c0028f37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028f3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028f3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028f47:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028f4c:	75 0a                	jne    c0028f58 <FAT::seek(void*, unsigned long long)+0x24>
c0028f4e:	b8 04 00 00 00       	mov    eax,0x4
c0028f53:	eb 33                	jmp    c0028f88 <FAT::seek(void*, unsigned long long)+0x54>
c0028f55:	8d 76 00             	lea    esi,[esi+0x0]
c0028f58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028f5c:	83 ec 08             	sub    esp,0x8
c0028f5f:	50                   	push   eax
c0028f60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028f64:	e8 3b b8 fd ff       	call   c00047a4 <f_lseek>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028f74:	85 c0                	test   eax,eax
c0028f76:	75 08                	jne    c0028f80 <FAT::seek(void*, unsigned long long)+0x4c>
c0028f78:	b8 00 00 00 00       	mov    eax,0x0
c0028f7d:	eb 09                	jmp    c0028f88 <FAT::seek(void*, unsigned long long)+0x54>
c0028f7f:	90                   	nop
c0028f80:	b8 01 00 00 00       	mov    eax,0x1
c0028f85:	8d 76 00             	lea    esi,[esi+0x0]
c0028f88:	83 c4 2c             	add    esp,0x2c
c0028f8b:	c3                   	ret    

c0028f8c <fatWrapperReadDisk>:
c0028f8c:	53                   	push   ebx
c0028f8d:	83 ec 18             	sub    esp,0x18
c0028f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028f94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028f98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f9d:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c0028fa4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028fa8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028fac:	ba 00 00 00 00       	mov    edx,0x0
c0028fb1:	83 ec 0c             	sub    esp,0xc
c0028fb4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028fb8:	53                   	push   ebx
c0028fb9:	52                   	push   edx
c0028fba:	50                   	push   eax
c0028fbb:	51                   	push   ecx
c0028fbc:	e8 33 3a ff ff       	call   c001c9f4 <LogicalDisk::read(unsigned long long, int, void*)>
c0028fc1:	83 c4 20             	add    esp,0x20
c0028fc4:	83 c4 18             	add    esp,0x18
c0028fc7:	5b                   	pop    ebx
c0028fc8:	c3                   	ret    
c0028fc9:	8d 76 00             	lea    esi,[esi+0x0]

c0028fcc <fatWrapperWriteDisk>:
c0028fcc:	53                   	push   ebx
c0028fcd:	83 ec 18             	sub    esp,0x18
c0028fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028fd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028fd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fdd:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c0028fe4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028fe8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028fec:	ba 00 00 00 00       	mov    edx,0x0
c0028ff1:	83 ec 0c             	sub    esp,0xc
c0028ff4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ff8:	53                   	push   ebx
c0028ff9:	52                   	push   edx
c0028ffa:	50                   	push   eax
c0028ffb:	51                   	push   ecx
c0028ffc:	e8 5f 3a ff ff       	call   c001ca60 <LogicalDisk::write(unsigned long long, int, void*)>
c0029001:	83 c4 20             	add    esp,0x20
c0029004:	83 c4 18             	add    esp,0x18
c0029007:	5b                   	pop    ebx
c0029008:	c3                   	ret    
c0029009:	8d 76 00             	lea    esi,[esi+0x0]

c002900c <fatWrapperIoctl>:
c002900c:	53                   	push   ebx
c002900d:	83 ec 28             	sub    esp,0x28
c0029010:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0029014:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029018:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002901c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029020:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029025:	83 f8 02             	cmp    eax,0x2
c0029028:	75 32                	jne    c002905c <fatWrapperIoctl+0x50>
c002902a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002902e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029032:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029037:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c002903e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0029044:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002904a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002904e:	66 89 02             	mov    WORD PTR [edx],ax
c0029051:	b8 00 00 00 00       	mov    eax,0x0
c0029056:	e9 c5 00 00 00       	jmp    c0029120 <fatWrapperIoctl+0x114>
c002905b:	90                   	nop
c002905c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029061:	83 f8 01             	cmp    eax,0x1
c0029064:	75 6a                	jne    c00290d0 <fatWrapperIoctl+0xc4>
c0029066:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002906a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002906e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029073:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c002907a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0029080:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0029086:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002908c:	89 c8                	mov    eax,ecx
c002908e:	89 da                	mov    edx,ebx
c0029090:	0f a4 c2 0a          	shld   edx,eax,0xa
c0029094:	c1 e0 0a             	shl    eax,0xa
c0029097:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002909c:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c00290a3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00290a9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00290af:	89 cb                	mov    ebx,ecx
c00290b1:	c1 fb 1f             	sar    ebx,0x1f
c00290b4:	53                   	push   ebx
c00290b5:	51                   	push   ecx
c00290b6:	52                   	push   edx
c00290b7:	50                   	push   eax
c00290b8:	e8 13 5c 00 00       	call   c002ecd0 <__udivdi3>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	89 c2                	mov    edx,eax
c00290c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00290c6:	89 10                	mov    DWORD PTR [eax],edx
c00290c8:	b8 00 00 00 00       	mov    eax,0x0
c00290cd:	eb 51                	jmp    c0029120 <fatWrapperIoctl+0x114>
c00290cf:	90                   	nop
c00290d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00290d5:	85 c0                	test   eax,eax
c00290d7:	75 07                	jne    c00290e0 <fatWrapperIoctl+0xd4>
c00290d9:	b8 00 00 00 00       	mov    eax,0x0
c00290de:	eb 40                	jmp    c0029120 <fatWrapperIoctl+0x114>
c00290e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00290e5:	83 f8 03             	cmp    eax,0x3
c00290e8:	75 1a                	jne    c0029104 <fatWrapperIoctl+0xf8>
c00290ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00290ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00290f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00290f6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00290fc:	b8 00 00 00 00       	mov    eax,0x0
c0029101:	eb 1d                	jmp    c0029120 <fatWrapperIoctl+0x114>
c0029103:	90                   	nop
c0029104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029109:	83 f8 04             	cmp    eax,0x4
c002910c:	75 0a                	jne    c0029118 <fatWrapperIoctl+0x10c>
c002910e:	b8 00 00 00 00       	mov    eax,0x0
c0029113:	eb 0b                	jmp    c0029120 <fatWrapperIoctl+0x114>
c0029115:	8d 76 00             	lea    esi,[esi+0x0]
c0029118:	b8 04 00 00 00       	mov    eax,0x4
c002911d:	8d 76 00             	lea    esi,[esi+0x0]
c0029120:	83 c4 28             	add    esp,0x28
c0029123:	5b                   	pop    ebx
c0029124:	c3                   	ret    
c0029125:	90                   	nop
c0029126:	66 90                	xchg   ax,ax

c0029128 <FAT::FAT()>:
c0029128:	83 ec 1c             	sub    esp,0x1c
c002912b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002912f:	83 ec 0c             	sub    esp,0xc
c0029132:	50                   	push   eax
c0029133:	e8 72 11 ff ff       	call   c001a2aa <Filesystem::Filesystem()>
c0029138:	83 c4 10             	add    esp,0x10
c002913b:	ba 44 3b 03 c0       	mov    edx,0xc0033b44
c0029140:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029144:	89 10                	mov    DWORD PTR [eax],edx
c0029146:	c7 05 80 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041280,0x0
c0029150:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029158:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002915d:	7f 19                	jg     c0029178 <FAT::FAT()+0x50>
c002915f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029163:	c7 04 85 a0 12 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbed60],0xffffffff
c002916e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029173:	eb e3                	jmp    c0029158 <FAT::FAT()+0x30>
c0029175:	8d 76 00             	lea    esi,[esi+0x0]
c0029178:	90                   	nop
c0029179:	83 c4 1c             	add    esp,0x1c
c002917c:	c3                   	ret    
c002917d:	90                   	nop
c002917e:	66 90                	xchg   ax,ax

c0029180 <FAT::fixFilepath(char*)>:
c0029180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029184:	8a 00                	mov    al,BYTE PTR [eax]
c0029186:	0f be c0             	movsx  eax,al
c0029189:	83 f8 40             	cmp    eax,0x40
c002918c:	7e 2e                	jle    c00291bc <FAT::fixFilepath(char*)+0x3c>
c002918e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029192:	8a 00                	mov    al,BYTE PTR [eax]
c0029194:	83 e8 41             	sub    eax,0x41
c0029197:	88 c2                	mov    dl,al
c0029199:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002919d:	88 10                	mov    BYTE PTR [eax],dl
c002919f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291a3:	8a 00                	mov    al,BYTE PTR [eax]
c00291a5:	0f be c0             	movsx  eax,al
c00291a8:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00291af:	83 c0 30             	add    eax,0x30
c00291b2:	88 c2                	mov    dl,al
c00291b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291b8:	88 10                	mov    BYTE PTR [eax],dl
c00291ba:	66 90                	xchg   ax,ax
c00291bc:	90                   	nop
c00291bd:	c3                   	ret    
c00291be:	66 90                	xchg   ax,ax

c00291c0 <FAT::open(char const*, void**, FileOpenMode)>:
c00291c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00291c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00291ce:	74 0c                	je     c00291dc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00291d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00291d8:	75 0e                	jne    c00291e8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00291da:	66 90                	xchg   ax,ax
c00291dc:	b8 04 00 00 00       	mov    eax,0x4
c00291e1:	e9 46 01 00 00       	jmp    c002932c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00291e6:	66 90                	xchg   ax,ax
c00291e8:	83 ec 08             	sub    esp,0x8
c00291eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00291f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00291f6:	50                   	push   eax
c00291f7:	e8 44 74 fd ff       	call   c0000640 <strcpy>
c00291fc:	83 c4 10             	add    esp,0x10
c00291ff:	83 ec 08             	sub    esp,0x8
c0029202:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029206:	50                   	push   eax
c0029207:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002920e:	e8 6d ff ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002921e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029225:	83 e0 01             	and    eax,0x1
c0029228:	74 12                	je     c002923c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c002922a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029231:	83 c8 01             	or     eax,0x1
c0029234:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002923b:	90                   	nop
c002923c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029243:	83 e0 04             	and    eax,0x4
c0029246:	74 24                	je     c002926c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0029248:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002924f:	83 c8 30             	or     eax,0x30
c0029252:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029259:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029260:	83 c8 02             	or     eax,0x2
c0029263:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002926a:	66 90                	xchg   ax,ax
c002926c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029273:	83 e0 02             	and    eax,0x2
c0029276:	74 14                	je     c002928c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0029278:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002927f:	83 c8 02             	or     eax,0x2
c0029282:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0029289:	8d 76 00             	lea    esi,[esi+0x0]
c002928c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029293:	83 e0 08             	and    eax,0x8
c0029296:	74 14                	je     c00292ac <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0029298:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c002929f:	83 c8 04             	or     eax,0x4
c00292a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00292a9:	8d 76 00             	lea    esi,[esi+0x0]
c00292ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00292b3:	83 e0 10             	and    eax,0x10
c00292b6:	74 14                	je     c00292cc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00292b8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00292bf:	83 c8 08             	or     eax,0x8
c00292c2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00292c9:	8d 76 00             	lea    esi,[esi+0x0]
c00292cc:	83 ec 0c             	sub    esp,0xc
c00292cf:	68 28 02 00 00       	push   0x228
c00292d4:	e8 de d2 fe ff       	call   c00165b7 <malloc>
c00292d9:	83 c4 10             	add    esp,0x10
c00292dc:	89 c2                	mov    edx,eax
c00292de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00292e5:	89 10                	mov    DWORD PTR [eax],edx
c00292e7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00292ef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00292f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00292f8:	83 ec 04             	sub    esp,0x4
c00292fb:	52                   	push   edx
c00292fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0029300:	52                   	push   edx
c0029301:	50                   	push   eax
c0029302:	e8 9f ac fd ff       	call   c0003fa6 <f_open>
c0029307:	83 c4 10             	add    esp,0x10
c002930a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0029311:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0029319:	74 09                	je     c0029324 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c002931b:	b8 01 00 00 00       	mov    eax,0x1
c0029320:	eb 0a                	jmp    c002932c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0029322:	66 90                	xchg   ax,ax
c0029324:	b8 00 00 00 00       	mov    eax,0x0
c0029329:	8d 76 00             	lea    esi,[esi+0x0]
c002932c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029332:	c3                   	ret    
c0029333:	90                   	nop

c0029334 <FAT::openDir(char const*, void**)>:
c0029334:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002933a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029342:	74 0c                	je     c0029350 <FAT::openDir(char const*, void**)+0x1c>
c0029344:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002934c:	75 0e                	jne    c002935c <FAT::openDir(char const*, void**)+0x28>
c002934e:	66 90                	xchg   ax,ax
c0029350:	b8 04 00 00 00       	mov    eax,0x4
c0029355:	e9 82 00 00 00       	jmp    c00293dc <FAT::openDir(char const*, void**)+0xa8>
c002935a:	66 90                	xchg   ax,ax
c002935c:	83 ec 08             	sub    esp,0x8
c002935f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029366:	8d 44 24 18          	lea    eax,[esp+0x18]
c002936a:	50                   	push   eax
c002936b:	e8 d0 72 fd ff       	call   c0000640 <strcpy>
c0029370:	83 c4 10             	add    esp,0x10
c0029373:	83 ec 08             	sub    esp,0x8
c0029376:	8d 44 24 14          	lea    eax,[esp+0x14]
c002937a:	50                   	push   eax
c002937b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029382:	e8 f9 fd ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c0029387:	83 c4 10             	add    esp,0x10
c002938a:	83 ec 0c             	sub    esp,0xc
c002938d:	6a 30                	push   0x30
c002938f:	e8 23 d2 fe ff       	call   c00165b7 <malloc>
c0029394:	83 c4 10             	add    esp,0x10
c0029397:	89 c2                	mov    edx,eax
c0029399:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00293a0:	89 10                	mov    DWORD PTR [eax],edx
c00293a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00293a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00293ab:	83 ec 08             	sub    esp,0x8
c00293ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00293b2:	52                   	push   edx
c00293b3:	50                   	push   eax
c00293b4:	e8 9c b5 fd ff       	call   c0004955 <f_opendir>
c00293b9:	83 c4 10             	add    esp,0x10
c00293bc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00293c3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00293cb:	74 07                	je     c00293d4 <FAT::openDir(char const*, void**)+0xa0>
c00293cd:	b8 01 00 00 00       	mov    eax,0x1
c00293d2:	eb 08                	jmp    c00293dc <FAT::openDir(char const*, void**)+0xa8>
c00293d4:	b8 00 00 00 00       	mov    eax,0x0
c00293d9:	8d 76 00             	lea    esi,[esi+0x0]
c00293dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00293e2:	c3                   	ret    
c00293e3:	90                   	nop

c00293e4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00293e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00293ea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00293f2:	75 0c                	jne    c0029400 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00293f4:	b8 04 00 00 00       	mov    eax,0x4
c00293f9:	e9 d6 00 00 00       	jmp    c00294d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00293fe:	66 90                	xchg   ax,ax
c0029400:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0029408:	75 0a                	jne    c0029414 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c002940a:	b8 04 00 00 00       	mov    eax,0x4
c002940f:	e9 c0 00 00 00       	jmp    c00294d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029414:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002941c:	75 0a                	jne    c0029428 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c002941e:	b8 04 00 00 00       	mov    eax,0x4
c0029423:	e9 ac 00 00 00       	jmp    c00294d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029428:	83 ec 08             	sub    esp,0x8
c002942b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029432:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029439:	50                   	push   eax
c002943a:	e8 01 72 fd ff       	call   c0000640 <strcpy>
c002943f:	83 c4 10             	add    esp,0x10
c0029442:	83 ec 08             	sub    esp,0x8
c0029445:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002944c:	50                   	push   eax
c002944d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029454:	e8 27 fd ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c0029459:	83 c4 10             	add    esp,0x10
c002945c:	83 ec 08             	sub    esp,0x8
c002945f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029463:	50                   	push   eax
c0029464:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002946b:	50                   	push   eax
c002946c:	e8 63 b6 fd ff       	call   c0004ad4 <f_stat>
c0029471:	83 c4 10             	add    esp,0x10
c0029474:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002947b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0029482:	85 c0                	test   eax,eax
c0029484:	74 0a                	je     c0029490 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0029486:	83 f8 04             	cmp    eax,0x4
c0029489:	74 39                	je     c00294c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c002948b:	eb 3f                	jmp    c00294cc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c002948d:	8d 76 00             	lea    esi,[esi+0x0]
c0029490:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0029494:	0f b6 c0             	movzx  eax,al
c0029497:	83 e0 10             	and    eax,0x10
c002949a:	0f 95 c2             	setne  dl
c002949d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00294a4:	88 10                	mov    BYTE PTR [eax],dl
c00294a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294aa:	ba 00 00 00 00       	mov    edx,0x0
c00294af:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00294b6:	89 01                	mov    DWORD PTR [ecx],eax
c00294b8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00294bb:	b8 00 00 00 00       	mov    eax,0x0
c00294c0:	eb 12                	jmp    c00294d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00294c2:	66 90                	xchg   ax,ax
c00294c4:	b8 02 00 00 00       	mov    eax,0x2
c00294c9:	eb 09                	jmp    c00294d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00294cb:	90                   	nop
c00294cc:	b8 01 00 00 00       	mov    eax,0x1
c00294d1:	8d 76 00             	lea    esi,[esi+0x0]
c00294d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00294da:	c3                   	ret    
c00294db:	90                   	nop

c00294dc <FAT::unlink(char const*)>:
c00294dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00294e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00294ea:	75 08                	jne    c00294f4 <FAT::unlink(char const*)+0x18>
c00294ec:	b8 04 00 00 00       	mov    eax,0x4
c00294f1:	eb 61                	jmp    c0029554 <FAT::unlink(char const*)+0x78>
c00294f3:	90                   	nop
c00294f4:	83 ec 08             	sub    esp,0x8
c00294f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00294fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029502:	50                   	push   eax
c0029503:	e8 38 71 fd ff       	call   c0000640 <strcpy>
c0029508:	83 c4 10             	add    esp,0x10
c002950b:	83 ec 08             	sub    esp,0x8
c002950e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029512:	50                   	push   eax
c0029513:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002951a:	e8 61 fc ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c002951f:	83 c4 10             	add    esp,0x10
c0029522:	83 ec 0c             	sub    esp,0xc
c0029525:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029529:	50                   	push   eax
c002952a:	e8 17 b8 fd ff       	call   c0004d46 <f_unlink>
c002952f:	83 c4 10             	add    esp,0x10
c0029532:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029539:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029540:	85 c0                	test   eax,eax
c0029542:	75 08                	jne    c002954c <FAT::unlink(char const*)+0x70>
c0029544:	b8 00 00 00 00       	mov    eax,0x0
c0029549:	eb 09                	jmp    c0029554 <FAT::unlink(char const*)+0x78>
c002954b:	90                   	nop
c002954c:	b8 01 00 00 00       	mov    eax,0x1
c0029551:	8d 76 00             	lea    esi,[esi+0x0]
c0029554:	81 c4 1c 01 00 00    	add    esp,0x11c
c002955a:	c3                   	ret    
c002955b:	90                   	nop

c002955c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002955c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0029562:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0029569:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0029570:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0029574:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029578:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029580:	75 0a                	jne    c002958c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0029582:	b8 04 00 00 00       	mov    eax,0x4
c0029587:	e9 7c 01 00 00       	jmp    c0029708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c002958c:	83 ec 08             	sub    esp,0x8
c002958f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0029596:	8d 44 24 24          	lea    eax,[esp+0x24]
c002959a:	50                   	push   eax
c002959b:	e8 a0 70 fd ff       	call   c0000640 <strcpy>
c00295a0:	83 c4 10             	add    esp,0x10
c00295a3:	83 ec 08             	sub    esp,0x8
c00295a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00295aa:	50                   	push   eax
c00295ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00295b2:	e8 c9 fb ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c00295b7:	83 c4 10             	add    esp,0x10
c00295ba:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00295c2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00295ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00295cf:	83 e0 01             	and    eax,0x1
c00295d2:	74 14                	je     c00295e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c00295d4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00295db:	83 c8 01             	or     eax,0x1
c00295de:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00295e5:	8d 76 00             	lea    esi,[esi+0x0]
c00295e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00295ed:	83 e0 02             	and    eax,0x2
c00295f0:	74 12                	je     c0029604 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c00295f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00295f9:	83 c8 20             	or     eax,0x20
c00295fc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029603:	90                   	nop
c0029604:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029609:	83 e0 04             	and    eax,0x4
c002960c:	74 12                	je     c0029620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c002960e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029615:	83 c8 04             	or     eax,0x4
c0029618:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002961f:	90                   	nop
c0029620:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029625:	83 e0 08             	and    eax,0x8
c0029628:	74 12                	je     c002963c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c002962a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029631:	83 c8 02             	or     eax,0x2
c0029634:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002963b:	90                   	nop
c002963c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029641:	83 e0 01             	and    eax,0x1
c0029644:	74 12                	je     c0029658 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0029646:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002964d:	83 c8 01             	or     eax,0x1
c0029650:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029657:	90                   	nop
c0029658:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002965d:	83 e0 02             	and    eax,0x2
c0029660:	74 12                	je     c0029674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0029662:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029669:	83 c8 20             	or     eax,0x20
c002966c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029673:	90                   	nop
c0029674:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029679:	83 e0 04             	and    eax,0x4
c002967c:	74 12                	je     c0029690 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c002967e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029685:	83 c8 04             	or     eax,0x4
c0029688:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002968f:	90                   	nop
c0029690:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029695:	83 e0 08             	and    eax,0x8
c0029698:	74 12                	je     c00296ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c002969a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00296a1:	83 c8 02             	or     eax,0x2
c00296a4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00296ab:	90                   	nop
c00296ac:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00296b3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00296ba:	09 d0                	or     eax,edx
c00296bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00296c3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00296cb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00296d3:	83 ec 04             	sub    esp,0x4
c00296d6:	52                   	push   edx
c00296d7:	50                   	push   eax
c00296d8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00296dc:	50                   	push   eax
c00296dd:	e8 d9 ba fd ff       	call   c00051bb <f_chmod>
c00296e2:	83 c4 10             	add    esp,0x10
c00296e5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00296ec:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00296f3:	85 c0                	test   eax,eax
c00296f5:	75 09                	jne    c0029700 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c00296f7:	b8 00 00 00 00       	mov    eax,0x0
c00296fc:	eb 0a                	jmp    c0029708 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00296fe:	66 90                	xchg   ax,ax
c0029700:	b8 01 00 00 00       	mov    eax,0x1
c0029705:	8d 76 00             	lea    esi,[esi+0x0]
c0029708:	81 c4 2c 01 00 00    	add    esp,0x12c
c002970e:	c3                   	ret    
c002970f:	90                   	nop

c0029710 <FAT::rename(char const*, char const*)>:
c0029710:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029716:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002971e:	74 0c                	je     c002972c <FAT::rename(char const*, char const*)+0x1c>
c0029720:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029728:	75 0e                	jne    c0029738 <FAT::rename(char const*, char const*)+0x28>
c002972a:	66 90                	xchg   ax,ax
c002972c:	b8 04 00 00 00       	mov    eax,0x4
c0029731:	e9 9e 00 00 00       	jmp    c00297d4 <FAT::rename(char const*, char const*)+0xc4>
c0029736:	66 90                	xchg   ax,ax
c0029738:	83 ec 08             	sub    esp,0x8
c002973b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029742:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029749:	50                   	push   eax
c002974a:	e8 f1 6e fd ff       	call   c0000640 <strcpy>
c002974f:	83 c4 10             	add    esp,0x10
c0029752:	83 ec 08             	sub    esp,0x8
c0029755:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002975c:	50                   	push   eax
c002975d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029764:	e8 17 fa ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c0029769:	83 c4 10             	add    esp,0x10
c002976c:	83 ec 08             	sub    esp,0x8
c002976f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0029776:	8d 44 24 18          	lea    eax,[esp+0x18]
c002977a:	50                   	push   eax
c002977b:	e8 c0 6e fd ff       	call   c0000640 <strcpy>
c0029780:	83 c4 10             	add    esp,0x10
c0029783:	83 ec 08             	sub    esp,0x8
c0029786:	8d 44 24 14          	lea    eax,[esp+0x14]
c002978a:	50                   	push   eax
c002978b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029792:	e8 e9 f9 ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c0029797:	83 c4 10             	add    esp,0x10
c002979a:	83 ec 08             	sub    esp,0x8
c002979d:	8d 44 24 14          	lea    eax,[esp+0x14]
c00297a1:	50                   	push   eax
c00297a2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00297a9:	50                   	push   eax
c00297aa:	e8 54 b8 fd ff       	call   c0005003 <f_rename>
c00297af:	83 c4 10             	add    esp,0x10
c00297b2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00297b9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00297c0:	85 c0                	test   eax,eax
c00297c2:	75 08                	jne    c00297cc <FAT::rename(char const*, char const*)+0xbc>
c00297c4:	b8 00 00 00 00       	mov    eax,0x0
c00297c9:	eb 09                	jmp    c00297d4 <FAT::rename(char const*, char const*)+0xc4>
c00297cb:	90                   	nop
c00297cc:	b8 01 00 00 00       	mov    eax,0x1
c00297d1:	8d 76 00             	lea    esi,[esi+0x0]
c00297d4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00297da:	c3                   	ret    
c00297db:	90                   	nop

c00297dc <FAT::mkdir(char const*)>:
c00297dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00297e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00297ea:	75 08                	jne    c00297f4 <FAT::mkdir(char const*)+0x18>
c00297ec:	b8 04 00 00 00       	mov    eax,0x4
c00297f1:	eb 61                	jmp    c0029854 <FAT::mkdir(char const*)+0x78>
c00297f3:	90                   	nop
c00297f4:	83 ec 08             	sub    esp,0x8
c00297f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00297fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029802:	50                   	push   eax
c0029803:	e8 38 6e fd ff       	call   c0000640 <strcpy>
c0029808:	83 c4 10             	add    esp,0x10
c002980b:	83 ec 08             	sub    esp,0x8
c002980e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029812:	50                   	push   eax
c0029813:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002981a:	e8 61 f9 ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c002981f:	83 c4 10             	add    esp,0x10
c0029822:	83 ec 0c             	sub    esp,0xc
c0029825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029829:	50                   	push   eax
c002982a:	e8 39 b6 fd ff       	call   c0004e68 <f_mkdir>
c002982f:	83 c4 10             	add    esp,0x10
c0029832:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029839:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029840:	85 c0                	test   eax,eax
c0029842:	75 08                	jne    c002984c <FAT::mkdir(char const*)+0x70>
c0029844:	b8 00 00 00 00       	mov    eax,0x0
c0029849:	eb 09                	jmp    c0029854 <FAT::mkdir(char const*)+0x78>
c002984b:	90                   	nop
c002984c:	b8 01 00 00 00       	mov    eax,0x1
c0029851:	8d 76 00             	lea    esi,[esi+0x0]
c0029854:	81 c4 1c 01 00 00    	add    esp,0x11c
c002985a:	c3                   	ret    
c002985b:	90                   	nop

c002985c <FAT::exists(char const*)>:
c002985c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0029862:	83 ec 08             	sub    esp,0x8
c0029865:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002986c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029870:	50                   	push   eax
c0029871:	e8 ca 6d fd ff       	call   c0000640 <strcpy>
c0029876:	83 c4 10             	add    esp,0x10
c0029879:	83 ec 08             	sub    esp,0x8
c002987c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029880:	50                   	push   eax
c0029881:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029888:	e8 f3 f8 ff ff       	call   c0029180 <FAT::fixFilepath(char*)>
c002988d:	83 c4 10             	add    esp,0x10
c0029890:	83 ec 08             	sub    esp,0x8
c0029893:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c002989a:	50                   	push   eax
c002989b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002989f:	50                   	push   eax
c00298a0:	e8 2f b2 fd ff       	call   c0004ad4 <f_stat>
c00298a5:	83 c4 10             	add    esp,0x10
c00298a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00298af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00298b6:	85 c0                	test   eax,eax
c00298b8:	75 06                	jne    c00298c0 <FAT::exists(char const*)+0x64>
c00298ba:	b0 01                	mov    al,0x1
c00298bc:	eb 06                	jmp    c00298c4 <FAT::exists(char const*)+0x68>
c00298be:	66 90                	xchg   ax,ax
c00298c0:	b0 00                	mov    al,0x0
c00298c2:	66 90                	xchg   ax,ax
c00298c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00298ca:	c3                   	ret    
c00298cb:	90                   	nop

c00298cc <isoReadDiscSectorHelper>:
c00298cc:	83 ec 2c             	sub    esp,0x2c
c00298cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00298d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00298d7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00298dc:	83 e8 41             	sub    eax,0x41
c00298df:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c00298e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00298ea:	ba 00 00 00 00       	mov    edx,0x0
c00298ef:	83 ec 0c             	sub    esp,0xc
c00298f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00298f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00298fa:	52                   	push   edx
c00298fb:	50                   	push   eax
c00298fc:	51                   	push   ecx
c00298fd:	e8 f2 30 ff ff       	call   c001c9f4 <LogicalDisk::read(unsigned long long, int, void*)>
c0029902:	83 c4 20             	add    esp,0x20
c0029905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029909:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002990e:	74 0c                	je     c002991c <isoReadDiscSectorHelper+0x50>
c0029910:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029914:	c1 e0 0b             	shl    eax,0xb
c0029917:	eb 0b                	jmp    c0029924 <isoReadDiscSectorHelper+0x58>
c0029919:	8d 76 00             	lea    esi,[esi+0x0]
c002991c:	b8 00 00 00 00       	mov    eax,0x0
c0029921:	8d 76 00             	lea    esi,[esi+0x0]
c0029924:	83 c4 2c             	add    esp,0x2c
c0029927:	c3                   	ret    

c0029928 <iso_kprintf>:
c0029928:	83 ec 0c             	sub    esp,0xc
c002992b:	83 ec 08             	sub    esp,0x8
c002992e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029932:	68 f2 38 03 c0       	push   0xc00338f2
c0029937:	e8 09 fb fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002993c:	83 c4 10             	add    esp,0x10
c002993f:	90                   	nop
c0029940:	83 c4 0c             	add    esp,0xc
c0029943:	c3                   	ret    

c0029944 <iso_kprintfd>:
c0029944:	83 ec 0c             	sub    esp,0xc
c0029947:	83 ec 08             	sub    esp,0x8
c002994a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002994e:	68 de 1d 03 c0       	push   0xc0031dde
c0029953:	e8 ed fa fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029958:	83 c4 10             	add    esp,0x10
c002995b:	90                   	nop
c002995c:	83 c4 0c             	add    esp,0xc
c002995f:	c3                   	ret    

c0029960 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029960:	b8 08 00 00 00       	mov    eax,0x8
c0029965:	c3                   	ret    

c0029966 <ISO9660::truncate(void*, unsigned long long)>:
c0029966:	b8 01 00 00 00       	mov    eax,0x1
c002996b:	c3                   	ret    

c002996c <ISO9660::getName()>:
c002996c:	b8 a8 3b 03 c0       	mov    eax,0xc0033ba8
c0029971:	c3                   	ret    

c0029972 <ISO9660::closeDir(void*)>:
c0029972:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029976:	8b 00                	mov    eax,DWORD PTR [eax]
c0029978:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c002997b:	90                   	nop

c002997c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002997c:	b8 01 00 00 00       	mov    eax,0x1
c0029981:	c3                   	ret    

c0029982 <ISO9660::unlink(char const*)>:
c0029982:	b8 01 00 00 00       	mov    eax,0x1
c0029987:	c3                   	ret    

c0029988 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029988:	b8 03 00 00 00       	mov    eax,0x3
c002998d:	c3                   	ret    

c002998e <ISO9660::rename(char const*, char const*)>:
c002998e:	b8 01 00 00 00       	mov    eax,0x1
c0029993:	c3                   	ret    

c0029994 <ISO9660::mkdir(char const*)>:
c0029994:	b8 01 00 00 00       	mov    eax,0x1
c0029999:	c3                   	ret    

c002999a <ISO9660::~ISO9660()>:
c002999a:	83 ec 0c             	sub    esp,0xc
c002999d:	ba e8 3c 03 c0       	mov    edx,0xc0033ce8
c00299a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a6:	89 10                	mov    DWORD PTR [eax],edx
c00299a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ac:	83 ec 0c             	sub    esp,0xc
c00299af:	50                   	push   eax
c00299b0:	e8 19 09 ff ff       	call   c001a2ce <Filesystem::~Filesystem()>
c00299b5:	83 c4 10             	add    esp,0x10
c00299b8:	90                   	nop
c00299b9:	83 c4 0c             	add    esp,0xc
c00299bc:	c3                   	ret    
c00299bd:	90                   	nop

c00299be <ISO9660::~ISO9660()>:
c00299be:	83 ec 0c             	sub    esp,0xc
c00299c1:	83 ec 0c             	sub    esp,0xc
c00299c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c8:	e8 cd ff ff ff       	call   c002999a <ISO9660::~ISO9660()>
c00299cd:	83 c4 10             	add    esp,0x10
c00299d0:	83 ec 08             	sub    esp,0x8
c00299d3:	6a 08                	push   0x8
c00299d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d9:	e8 3a f9 fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c00299de:	83 c4 10             	add    esp,0x10
c00299e1:	83 c4 0c             	add    esp,0xc
c00299e4:	c3                   	ret    
c00299e5:	90                   	nop

c00299e6 <ISO9660::exists(char const*)>:
c00299e6:	83 ec 18             	sub    esp,0x18
c00299e9:	68 c3 3b 03 c0       	push   0xc0033bc3
c00299ee:	e8 8b 6d ff ff       	call   c002077e <KePanic(char const*)>
c00299f3:	31 c0                	xor    eax,eax
c00299f5:	83 c4 1c             	add    esp,0x1c
c00299f8:	c3                   	ret    
c00299f9:	90                   	nop

c00299fa <ISO9660::open(char const*, void**, FileOpenMode)>:
c00299fa:	56                   	push   esi
c00299fb:	53                   	push   ebx
c00299fc:	53                   	push   ebx
c00299fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029a01:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029a05:	85 db                	test   ebx,ebx
c0029a07:	0f 84 ca 00 00 00    	je     c0029ad7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029a0d:	85 f6                	test   esi,esi
c0029a0f:	0f 84 c2 00 00 00    	je     c0029ad7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029a15:	b8 03 00 00 00       	mov    eax,0x3
c0029a1a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029a1f:	0f 85 b7 00 00 00    	jne    c0029adc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029a25:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029a27:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029a2e:	38 0d 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,cl
c0029a34:	74 1b                	je     c0029a51 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029a36:	85 c0                	test   eax,eax
c0029a38:	74 10                	je     c0029a4a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029a3a:	83 ec 0c             	sub    esp,0xc
c0029a3d:	68 e1 3b 03 c0       	push   0xc0033be1
c0029a42:	e8 37 6d ff ff       	call   c002077e <KePanic(char const*)>
c0029a47:	83 c4 10             	add    esp,0x10
c0029a4a:	8a 03                	mov    al,BYTE PTR [ebx]
c0029a4c:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029a51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029a54:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029a5b:	85 c0                	test   eax,eax
c0029a5d:	74 09                	je     c0029a68 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029a5f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029a66:	74 48                	je     c0029ab0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029a68:	83 ec 0c             	sub    esp,0xc
c0029a6b:	68 f1 3b 03 c0       	push   0xc0033bf1
c0029a70:	e8 d0 f9 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029a75:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029a78:	83 c4 10             	add    esp,0x10
c0029a7b:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029a82:	85 c0                	test   eax,eax
c0029a84:	74 17                	je     c0029a9d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0029a86:	83 ec 0c             	sub    esp,0xc
c0029a89:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029a90:	68 11 3c 03 c0       	push   0xc0033c11
c0029a95:	e8 ab f9 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029a9a:	83 c4 10             	add    esp,0x10
c0029a9d:	83 ec 0c             	sub    esp,0xc
c0029aa0:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029aa7:	50                   	push   eax
c0029aa8:	e8 e5 d2 fd ff       	call   c0006d92 <init_percd>
c0029aad:	83 c4 10             	add    esp,0x10
c0029ab0:	83 c3 03             	add    ebx,0x3
c0029ab3:	51                   	push   ecx
c0029ab4:	51                   	push   ecx
c0029ab5:	6a 00                	push   0x0
c0029ab7:	53                   	push   ebx
c0029ab8:	e8 9c cd fd ff       	call   c0006859 <iso_open>
c0029abd:	83 c4 10             	add    esp,0x10
c0029ac0:	89 c2                	mov    edx,eax
c0029ac2:	b8 01 00 00 00       	mov    eax,0x1
c0029ac7:	83 fa ff             	cmp    edx,0xffffffff
c0029aca:	74 10                	je     c0029adc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029acc:	83 c2 32             	add    edx,0x32
c0029acf:	31 c0                	xor    eax,eax
c0029ad1:	01 d2                	add    edx,edx
c0029ad3:	89 16                	mov    DWORD PTR [esi],edx
c0029ad5:	eb 05                	jmp    c0029adc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029ad7:	b8 04 00 00 00       	mov    eax,0x4
c0029adc:	5a                   	pop    edx
c0029add:	5b                   	pop    ebx
c0029ade:	5e                   	pop    esi
c0029adf:	c3                   	ret    

c0029ae0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029ae0:	53                   	push   ebx
c0029ae1:	83 ec 08             	sub    esp,0x8
c0029ae4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029ae8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029aec:	85 c0                	test   eax,eax
c0029aee:	74 2d                	je     c0029b1d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029af0:	85 db                	test   ebx,ebx
c0029af2:	74 29                	je     c0029b1d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029af4:	b9 02 00 00 00       	mov    ecx,0x2
c0029af9:	52                   	push   edx
c0029afa:	99                   	cdq    
c0029afb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aff:	f7 f9                	idiv   ecx
c0029b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029b05:	83 e8 32             	sub    eax,0x32
c0029b08:	50                   	push   eax
c0029b09:	e8 f3 cd fd ff       	call   c0006901 <iso_read>
c0029b0e:	83 c4 10             	add    esp,0x10
c0029b11:	89 03                	mov    DWORD PTR [ebx],eax
c0029b13:	09 d0                	or     eax,edx
c0029b15:	0f 94 c0             	sete   al
c0029b18:	0f b6 c0             	movzx  eax,al
c0029b1b:	eb 05                	jmp    c0029b22 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029b1d:	b8 04 00 00 00       	mov    eax,0x4
c0029b22:	83 c4 08             	add    esp,0x8
c0029b25:	5b                   	pop    ebx
c0029b26:	c3                   	ret    
c0029b27:	90                   	nop

c0029b28 <ISO9660::seek(void*, unsigned long long)>:
c0029b28:	57                   	push   edi
c0029b29:	56                   	push   esi
c0029b2a:	b8 04 00 00 00       	mov    eax,0x4
c0029b2f:	51                   	push   ecx
c0029b30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029b34:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029b38:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029b3c:	85 d2                	test   edx,edx
c0029b3e:	74 26                	je     c0029b66 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029b40:	6a 00                	push   0x0
c0029b42:	b9 02 00 00 00       	mov    ecx,0x2
c0029b47:	57                   	push   edi
c0029b48:	89 d0                	mov    eax,edx
c0029b4a:	56                   	push   esi
c0029b4b:	99                   	cdq    
c0029b4c:	f7 f9                	idiv   ecx
c0029b4e:	83 e8 32             	sub    eax,0x32
c0029b51:	50                   	push   eax
c0029b52:	e8 c0 ce fd ff       	call   c0006a17 <iso_seek>
c0029b57:	83 c4 10             	add    esp,0x10
c0029b5a:	31 f0                	xor    eax,esi
c0029b5c:	31 fa                	xor    edx,edi
c0029b5e:	09 d0                	or     eax,edx
c0029b60:	0f 95 c0             	setne  al
c0029b63:	0f b6 c0             	movzx  eax,al
c0029b66:	5a                   	pop    edx
c0029b67:	5e                   	pop    esi
c0029b68:	5f                   	pop    edi
c0029b69:	c3                   	ret    

c0029b6a <ISO9660::tell(void*, unsigned long long*)>:
c0029b6a:	53                   	push   ebx
c0029b6b:	83 ec 08             	sub    esp,0x8
c0029b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029b72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029b76:	85 c0                	test   eax,eax
c0029b78:	74 24                	je     c0029b9e <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029b7a:	85 db                	test   ebx,ebx
c0029b7c:	74 20                	je     c0029b9e <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029b7e:	83 ec 0c             	sub    esp,0xc
c0029b81:	b9 02 00 00 00       	mov    ecx,0x2
c0029b86:	99                   	cdq    
c0029b87:	f7 f9                	idiv   ecx
c0029b89:	83 e8 32             	sub    eax,0x32
c0029b8c:	50                   	push   eax
c0029b8d:	e8 09 cf fd ff       	call   c0006a9b <iso_tell>
c0029b92:	83 c4 10             	add    esp,0x10
c0029b95:	89 03                	mov    DWORD PTR [ebx],eax
c0029b97:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029b9a:	31 c0                	xor    eax,eax
c0029b9c:	eb 05                	jmp    c0029ba3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029b9e:	b8 04 00 00 00       	mov    eax,0x4
c0029ba3:	83 c4 08             	add    esp,0x8
c0029ba6:	5b                   	pop    ebx
c0029ba7:	c3                   	ret    

c0029ba8 <ISO9660::stat(void*, unsigned long long*)>:
c0029ba8:	53                   	push   ebx
c0029ba9:	83 ec 14             	sub    esp,0x14
c0029bac:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029bb0:	68 35 3c 03 c0       	push   0xc0033c35
c0029bb5:	e8 8b f8 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029bba:	83 c4 10             	add    esp,0x10
c0029bbd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029bc2:	74 2c                	je     c0029bf0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029bc4:	85 db                	test   ebx,ebx
c0029bc6:	74 28                	je     c0029bf0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029bc8:	83 ec 0c             	sub    esp,0xc
c0029bcb:	b9 02 00 00 00       	mov    ecx,0x2
c0029bd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029bd4:	99                   	cdq    
c0029bd5:	f7 f9                	idiv   ecx
c0029bd7:	83 e8 32             	sub    eax,0x32
c0029bda:	50                   	push   eax
c0029bdb:	e8 ec ce fd ff       	call   c0006acc <iso_total>
c0029be0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0029be7:	89 03                	mov    DWORD PTR [ebx],eax
c0029be9:	83 c4 10             	add    esp,0x10
c0029bec:	31 c0                	xor    eax,eax
c0029bee:	eb 05                	jmp    c0029bf5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029bf0:	b8 04 00 00 00       	mov    eax,0x4
c0029bf5:	83 c4 08             	add    esp,0x8
c0029bf8:	5b                   	pop    ebx
c0029bf9:	c3                   	ret    

c0029bfa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029bfa:	55                   	push   ebp
c0029bfb:	57                   	push   edi
c0029bfc:	56                   	push   esi
c0029bfd:	53                   	push   ebx
c0029bfe:	83 ec 18             	sub    esp,0x18
c0029c01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029c05:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029c09:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029c0d:	68 3d 3c 03 c0       	push   0xc0033c3d
c0029c12:	e8 2e f8 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029c17:	83 c4 10             	add    esp,0x10
c0029c1a:	85 ff                	test   edi,edi
c0029c1c:	0f 94 c0             	sete   al
c0029c1f:	85 f6                	test   esi,esi
c0029c21:	0f 94 c2             	sete   dl
c0029c24:	09 d0                	or     eax,edx
c0029c26:	a8 01                	test   al,0x1
c0029c28:	0f 85 dd 00 00 00    	jne    c0029d0b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029c2e:	85 db                	test   ebx,ebx
c0029c30:	0f 84 d5 00 00 00    	je     c0029d0b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029c36:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029c39:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029c3f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029c46:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029c4d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029c4f:	38 0d 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,cl
c0029c55:	74 1b                	je     c0029c72 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029c57:	85 c0                	test   eax,eax
c0029c59:	74 10                	je     c0029c6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029c5b:	83 ec 0c             	sub    esp,0xc
c0029c5e:	68 e1 3b 03 c0       	push   0xc0033be1
c0029c63:	e8 16 6b ff ff       	call   c002077e <KePanic(char const*)>
c0029c68:	83 c4 10             	add    esp,0x10
c0029c6b:	8a 03                	mov    al,BYTE PTR [ebx]
c0029c6d:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029c72:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029c75:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029c7c:	85 c0                	test   eax,eax
c0029c7e:	74 09                	je     c0029c89 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029c80:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029c87:	74 51                	je     c0029cda <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029c89:	83 ec 0c             	sub    esp,0xc
c0029c8c:	68 45 3c 03 c0       	push   0xc0033c45
c0029c91:	e8 af f7 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029c96:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029c99:	83 c4 10             	add    esp,0x10
c0029c9c:	83 3c 85 7c 02 04 c0 00 	cmp    DWORD PTR [eax*4-0x3ffbfd84],0x0
c0029ca4:	74 21                	je     c0029cc7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029ca6:	83 ec 0c             	sub    esp,0xc
c0029ca9:	68 65 3c 03 c0       	push   0xc0033c65
c0029cae:	e8 92 f7 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029cb3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029cb6:	83 c4 10             	add    esp,0x10
c0029cb9:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029cc0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029cc7:	83 ec 0c             	sub    esp,0xc
c0029cca:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029cd1:	50                   	push   eax
c0029cd2:	e8 bb d0 fd ff       	call   c0006d92 <init_percd>
c0029cd7:	83 c4 10             	add    esp,0x10
c0029cda:	83 c3 03             	add    ebx,0x3
c0029cdd:	52                   	push   edx
c0029cde:	52                   	push   edx
c0029cdf:	6a 00                	push   0x0
c0029ce1:	53                   	push   ebx
c0029ce2:	e8 72 cb fd ff       	call   c0006859 <iso_open>
c0029ce7:	83 c4 10             	add    esp,0x10
c0029cea:	89 c5                	mov    ebp,eax
c0029cec:	83 f8 ff             	cmp    eax,0xffffffff
c0029cef:	75 21                	jne    c0029d12 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029cf1:	50                   	push   eax
c0029cf2:	50                   	push   eax
c0029cf3:	6a 01                	push   0x1
c0029cf5:	53                   	push   ebx
c0029cf6:	e8 5e cb fd ff       	call   c0006859 <iso_open>
c0029cfb:	83 c4 10             	add    esp,0x10
c0029cfe:	ba 02 00 00 00       	mov    edx,0x2
c0029d03:	40                   	inc    eax
c0029d04:	74 2b                	je     c0029d31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029d06:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029d09:	eb 24                	jmp    c0029d2f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029d0b:	ba 04 00 00 00       	mov    edx,0x4
c0029d10:	eb 1f                	jmp    c0029d31 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029d12:	83 ec 0c             	sub    esp,0xc
c0029d15:	50                   	push   eax
c0029d16:	e8 b1 cd fd ff       	call   c0006acc <iso_total>
c0029d1b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029d22:	89 07                	mov    DWORD PTR [edi],eax
c0029d24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029d27:	e8 b7 cb fd ff       	call   c00068e3 <iso_close>
c0029d2c:	83 c4 10             	add    esp,0x10
c0029d2f:	31 d2                	xor    edx,edx
c0029d31:	83 c4 0c             	add    esp,0xc
c0029d34:	89 d0                	mov    eax,edx
c0029d36:	5b                   	pop    ebx
c0029d37:	5e                   	pop    esi
c0029d38:	5f                   	pop    edi
c0029d39:	5d                   	pop    ebp
c0029d3a:	c3                   	ret    
c0029d3b:	90                   	nop

c0029d3c <ISO9660::close(void*)>:
c0029d3c:	83 ec 0c             	sub    esp,0xc
c0029d3f:	b8 04 00 00 00       	mov    eax,0x4
c0029d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d48:	85 d2                	test   edx,edx
c0029d4a:	74 1b                	je     c0029d67 <ISO9660::close(void*)+0x2b>
c0029d4c:	83 ec 0c             	sub    esp,0xc
c0029d4f:	b9 02 00 00 00       	mov    ecx,0x2
c0029d54:	89 d0                	mov    eax,edx
c0029d56:	99                   	cdq    
c0029d57:	f7 f9                	idiv   ecx
c0029d59:	83 e8 32             	sub    eax,0x32
c0029d5c:	50                   	push   eax
c0029d5d:	e8 81 cb fd ff       	call   c00068e3 <iso_close>
c0029d62:	83 c4 10             	add    esp,0x10
c0029d65:	31 c0                	xor    eax,eax
c0029d67:	83 c4 0c             	add    esp,0xc
c0029d6a:	c3                   	ret    
c0029d6b:	90                   	nop

c0029d6c <ISO9660::openDir(char const*, void**)>:
c0029d6c:	56                   	push   esi
c0029d6d:	53                   	push   ebx
c0029d6e:	50                   	push   eax
c0029d6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029d73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029d77:	85 db                	test   ebx,ebx
c0029d79:	0f 84 bd 00 00 00    	je     c0029e3c <ISO9660::openDir(char const*, void**)+0xd0>
c0029d7f:	85 f6                	test   esi,esi
c0029d81:	0f 84 b5 00 00 00    	je     c0029e3c <ISO9660::openDir(char const*, void**)+0xd0>
c0029d87:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029d89:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029d90:	38 15 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,dl
c0029d96:	74 1b                	je     c0029db3 <ISO9660::openDir(char const*, void**)+0x47>
c0029d98:	85 c0                	test   eax,eax
c0029d9a:	74 10                	je     c0029dac <ISO9660::openDir(char const*, void**)+0x40>
c0029d9c:	83 ec 0c             	sub    esp,0xc
c0029d9f:	68 e1 3b 03 c0       	push   0xc0033be1
c0029da4:	e8 d5 69 ff ff       	call   c002077e <KePanic(char const*)>
c0029da9:	83 c4 10             	add    esp,0x10
c0029dac:	8a 03                	mov    al,BYTE PTR [ebx]
c0029dae:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029db3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029db6:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029dbd:	85 c0                	test   eax,eax
c0029dbf:	74 10                	je     c0029dd1 <ISO9660::openDir(char const*, void**)+0x65>
c0029dc1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029dc8:	74 1a                	je     c0029de4 <ISO9660::openDir(char const*, void**)+0x78>
c0029dca:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029dd1:	83 ec 0c             	sub    esp,0xc
c0029dd4:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029ddb:	50                   	push   eax
c0029ddc:	e8 b1 cf fd ff       	call   c0006d92 <init_percd>
c0029de1:	83 c4 10             	add    esp,0x10
c0029de4:	83 c3 03             	add    ebx,0x3
c0029de7:	50                   	push   eax
c0029de8:	50                   	push   eax
c0029de9:	6a 01                	push   0x1
c0029deb:	53                   	push   ebx
c0029dec:	e8 68 ca fd ff       	call   c0006859 <iso_open>
c0029df1:	83 c4 10             	add    esp,0x10
c0029df4:	89 c3                	mov    ebx,eax
c0029df6:	83 f8 ff             	cmp    eax,0xffffffff
c0029df9:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029dfe:	75 1c                	jne    c0029e1c <ISO9660::openDir(char const*, void**)+0xb0>
c0029e00:	53                   	push   ebx
c0029e01:	53                   	push   ebx
c0029e02:	68 89 3c 03 c0       	push   0xc0033c89
c0029e07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029e0d:	e8 94 d7 fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c0029e12:	83 c4 10             	add    esp,0x10
c0029e15:	b8 01 00 00 00       	mov    eax,0x1
c0029e1a:	eb 25                	jmp    c0029e41 <ISO9660::openDir(char const*, void**)+0xd5>
c0029e1c:	01 db                	add    ebx,ebx
c0029e1e:	51                   	push   ecx
c0029e1f:	83 c3 65             	add    ebx,0x65
c0029e22:	51                   	push   ecx
c0029e23:	68 9c 3c 03 c0       	push   0xc0033c9c
c0029e28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029e2e:	e8 73 d7 fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c0029e33:	89 1e                	mov    DWORD PTR [esi],ebx
c0029e35:	83 c4 10             	add    esp,0x10
c0029e38:	31 c0                	xor    eax,eax
c0029e3a:	eb 05                	jmp    c0029e41 <ISO9660::openDir(char const*, void**)+0xd5>
c0029e3c:	b8 04 00 00 00       	mov    eax,0x4
c0029e41:	5a                   	pop    edx
c0029e42:	5b                   	pop    ebx
c0029e43:	5e                   	pop    esi
c0029e44:	c3                   	ret    
c0029e45:	90                   	nop

c0029e46 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029e46:	55                   	push   ebp
c0029e47:	57                   	push   edi
c0029e48:	56                   	push   esi
c0029e49:	53                   	push   ebx
c0029e4a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029e50:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029e57:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029e5e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029e66:	0f 84 e7 00 00 00    	je     c0029f53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029e6c:	85 db                	test   ebx,ebx
c0029e6e:	0f 84 df 00 00 00    	je     c0029f53 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029e74:	83 ec 0c             	sub    esp,0xc
c0029e77:	68 af 3c 03 c0       	push   0xc0033caf
c0029e7c:	e8 c4 f5 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c0029e81:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029e88:	b9 02 00 00 00       	mov    ecx,0x2
c0029e8d:	99                   	cdq    
c0029e8e:	f7 f9                	idiv   ecx
c0029e90:	83 e8 32             	sub    eax,0x32
c0029e93:	89 04 24             	mov    DWORD PTR [esp],eax
c0029e96:	e8 83 cc fd ff       	call   c0006b1e <iso_readdir>
c0029e9b:	83 c4 10             	add    esp,0x10
c0029e9e:	89 c6                	mov    esi,eax
c0029ea0:	85 c0                	test   eax,eax
c0029ea2:	75 37                	jne    c0029edb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029ea4:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029ea9:	56                   	push   esi
c0029eaa:	56                   	push   esi
c0029eab:	68 ba 3c 03 c0       	push   0xc0033cba
c0029eb0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029eb6:	e8 eb d6 fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c0029ebb:	83 c4 0c             	add    esp,0xc
c0029ebe:	68 10 01 00 00       	push   0x110
c0029ec3:	6a 00                	push   0x0
c0029ec5:	57                   	push   edi
c0029ec6:	e8 25 66 fd ff       	call   c00004f0 <memset>
c0029ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0029ed1:	83 c4 10             	add    esp,0x10
c0029ed4:	b8 01 00 00 00       	mov    eax,0x1
c0029ed9:	eb 7d                	jmp    c0029f58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029edb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029ee1:	8d 68 08             	lea    ebp,[eax+0x8]
c0029ee4:	83 ec 0c             	sub    esp,0xc
c0029ee7:	55                   	push   ebp
c0029ee8:	e8 83 66 fd ff       	call   c0000570 <strlen>
c0029eed:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029ef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029ef9:	83 c4 10             	add    esp,0x10
c0029efc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0029f00:	75 0a                	jne    c0029f0c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0029f02:	b8 02 00 00 00       	mov    eax,0x2
c0029f07:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0029f0a:	74 05                	je     c0029f11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029f0c:	b8 01 00 00 00       	mov    eax,0x1
c0029f11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029f15:	50                   	push   eax
c0029f16:	50                   	push   eax
c0029f17:	55                   	push   ebp
c0029f18:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029f1c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029f20:	50                   	push   eax
c0029f21:	e8 1a 67 fd ff       	call   c0000640 <strcpy>
c0029f26:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029f2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029f2f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029f35:	5a                   	pop    edx
c0029f36:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029f3b:	59                   	pop    ecx
c0029f3c:	68 cd 3c 03 c0       	push   0xc0033ccd
c0029f41:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029f47:	e8 5a d6 fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c0029f4c:	83 c4 10             	add    esp,0x10
c0029f4f:	31 c0                	xor    eax,eax
c0029f51:	eb 05                	jmp    c0029f58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029f53:	b8 04 00 00 00       	mov    eax,0x4
c0029f58:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029f5e:	5b                   	pop    ebx
c0029f5f:	5e                   	pop    esi
c0029f60:	5f                   	pop    edi
c0029f61:	5d                   	pop    ebp
c0029f62:	c3                   	ret    

c0029f63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029f63:	57                   	push   edi
c0029f64:	56                   	push   esi
c0029f65:	53                   	push   ebx
c0029f66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029f6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029f6e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029f72:	39 35 84 13 04 c0    	cmp    DWORD PTR ds:0xc0041384,esi
c0029f78:	0f be cb             	movsx  ecx,bl
c0029f7b:	75 0b                	jne    c0029f88 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029f7d:	0f be 05 80 4f 03 c0 	movsx  eax,BYTE PTR ds:0xc0034f80
c0029f84:	39 c8                	cmp    eax,ecx
c0029f86:	74 47                	je     c0029fcf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029f88:	83 ec 0c             	sub    esp,0xc
c0029f8b:	31 d2                	xor    edx,edx
c0029f8d:	68 a0 13 04 c0       	push   0xc00413a0
c0029f92:	6a 01                	push   0x1
c0029f94:	52                   	push   edx
c0029f95:	56                   	push   esi
c0029f96:	ff 34 8d 7c 02 04 c0 	push   DWORD PTR [ecx*4-0x3ffbfd84]
c0029f9d:	e8 52 2a ff ff       	call   c001c9f4 <LogicalDisk::read(unsigned long long, int, void*)>
c0029fa2:	83 c4 20             	add    esp,0x20
c0029fa5:	85 c0                	test   eax,eax
c0029fa7:	75 0e                	jne    c0029fb7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029fa9:	89 35 84 13 04 c0    	mov    DWORD PTR ds:0xc0041384,esi
c0029faf:	88 1d 80 4f 03 c0    	mov    BYTE PTR ds:0xc0034f80,bl
c0029fb5:	eb 18                	jmp    c0029fcf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029fb7:	50                   	push   eax
c0029fb8:	68 00 08 00 00       	push   0x800
c0029fbd:	6a 00                	push   0x0
c0029fbf:	57                   	push   edi
c0029fc0:	e8 2b 65 fd ff       	call   c00004f0 <memset>
c0029fc5:	83 c4 10             	add    esp,0x10
c0029fc8:	b8 01 00 00 00       	mov    eax,0x1
c0029fcd:	eb 0e                	jmp    c0029fdd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029fcf:	be a0 13 04 c0       	mov    esi,0xc00413a0
c0029fd4:	b9 00 08 00 00       	mov    ecx,0x800
c0029fd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029fdb:	31 c0                	xor    eax,eax
c0029fdd:	5b                   	pop    ebx
c0029fde:	5e                   	pop    esi
c0029fdf:	5f                   	pop    edi
c0029fe0:	c3                   	ret    
c0029fe1:	90                   	nop

c0029fe2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029fe2:	53                   	push   ebx
c0029fe3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029fe9:	c7 05 84 13 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0041384,0xdeadbeef
c0029ff3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029ffa:	8d 58 41             	lea    ebx,[eax+0x41]
c0029ffd:	0f be db             	movsx  ebx,bl
c002a000:	53                   	push   ebx
c002a001:	8d 44 24 08          	lea    eax,[esp+0x8]
c002a005:	50                   	push   eax
c002a006:	6a 10                	push   0x10
c002a008:	e8 56 ff ff ff       	call   c0029f63 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002a00d:	83 c4 10             	add    esp,0x10
c002a010:	31 d2                	xor    edx,edx
c002a012:	85 c0                	test   eax,eax
c002a014:	75 33                	jne    c002a049 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a016:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002a01b:	75 2c                	jne    c002a049 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a01d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002a022:	75 25                	jne    c002a049 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a024:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002a029:	75 1e                	jne    c002a049 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a02b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002a030:	75 17                	jne    c002a049 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a032:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002a037:	75 10                	jne    c002a049 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002a039:	83 ec 0c             	sub    esp,0xc
c002a03c:	53                   	push   ebx
c002a03d:	e8 50 cd fd ff       	call   c0006d92 <init_percd>
c002a042:	83 c4 10             	add    esp,0x10
c002a045:	40                   	inc    eax
c002a046:	0f 95 c2             	setne  dl
c002a049:	88 d0                	mov    al,dl
c002a04b:	81 c4 08 08 00 00    	add    esp,0x808
c002a051:	5b                   	pop    ebx
c002a052:	c3                   	ret    
c002a053:	90                   	nop

c002a054 <ISO9660::ISO9660()>:
c002a054:	83 ec 0c             	sub    esp,0xc
c002a057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a05b:	83 ec 0c             	sub    esp,0xc
c002a05e:	50                   	push   eax
c002a05f:	e8 46 02 ff ff       	call   c001a2aa <Filesystem::Filesystem()>
c002a064:	83 c4 10             	add    esp,0x10
c002a067:	ba e8 3c 03 c0       	mov    edx,0xc0033ce8
c002a06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a070:	89 10                	mov    DWORD PTR [eax],edx
c002a072:	e8 2d ce fd ff       	call   c0006ea4 <fs_iso9660_init>
c002a077:	90                   	nop
c002a078:	83 c4 0c             	add    esp,0xc
c002a07b:	c3                   	ret    

c002a07c <SoundCard::beginPlayback()>:
c002a07c:	c7 44 24 04 4c 3d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033d4c
c002a084:	e9 f5 66 ff ff       	jmp    c002077e <KePanic(char const*)>
c002a089:	90                   	nop

c002a08a <SoundCard::stopPlayback()>:
c002a08a:	c7 44 24 04 4c 3d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033d4c
c002a092:	e9 e7 66 ff ff       	jmp    c002077e <KePanic(char const*)>
c002a097:	90                   	nop

c002a098 <SoundCard::SoundCard(char const*)>:
c002a098:	83 ec 1c             	sub    esp,0x1c
c002a09b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a09f:	83 ec 08             	sub    esp,0x8
c002a0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a0a6:	50                   	push   eax
c002a0a7:	e8 b8 16 ff ff       	call   c001b764 <Device::Device(char const*)>
c002a0ac:	83 c4 10             	add    esp,0x10
c002a0af:	ba 98 3d 03 c0       	mov    edx,0xc0033d98
c002a0b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0b8:	89 10                	mov    DWORD PTR [eax],edx
c002a0ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0be:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002a0c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0c9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c002a0d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0d7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c002a0e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0e5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c002a0ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0f3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002a0fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002a105:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002a10a:	7f 1a                	jg     c002a126 <SoundCard::SoundCard(char const*)+0x8e>
c002a10c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a110:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002a114:	83 c2 54             	add    edx,0x54
c002a117:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c002a11f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c002a124:	eb df                	jmp    c002a105 <SoundCard::SoundCard(char const*)+0x6d>
c002a126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a12a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002a131:	90                   	nop
c002a132:	83 c4 1c             	add    esp,0x1c
c002a135:	c3                   	ret    

c002a136 <SoundCard::~SoundCard()>:
c002a136:	83 ec 0c             	sub    esp,0xc
c002a139:	ba 98 3d 03 c0       	mov    edx,0xc0033d98
c002a13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a142:	89 10                	mov    DWORD PTR [eax],edx
c002a144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a148:	83 ec 0c             	sub    esp,0xc
c002a14b:	50                   	push   eax
c002a14c:	e8 b3 13 ff ff       	call   c001b504 <Device::~Device()>
c002a151:	83 c4 10             	add    esp,0x10
c002a154:	90                   	nop
c002a155:	83 c4 0c             	add    esp,0xc
c002a158:	c3                   	ret    
c002a159:	90                   	nop

c002a15a <SoundCard::~SoundCard()>:
c002a15a:	83 ec 0c             	sub    esp,0xc
c002a15d:	83 ec 0c             	sub    esp,0xc
c002a160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a164:	e8 cd ff ff ff       	call   c002a136 <SoundCard::~SoundCard()>
c002a169:	83 c4 10             	add    esp,0x10
c002a16c:	83 ec 08             	sub    esp,0x8
c002a16f:	68 e8 01 00 00       	push   0x1e8
c002a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a178:	e8 9b f1 fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002a17d:	83 c4 10             	add    esp,0x10
c002a180:	83 c4 0c             	add    esp,0xc
c002a183:	c3                   	ret    

c002a184 <SoundCard::configureRates(int, int, int)>:
c002a184:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a188:	31 c0                	xor    eax,eax
c002a18a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c002a191:	75 20                	jne    c002a1b3 <SoundCard::configureRates(int, int, int)+0x2f>
c002a193:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002a197:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c002a19d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1a1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c002a1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1ab:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002a1b1:	b0 01                	mov    al,0x1
c002a1b3:	c3                   	ret    

c002a1b4 <SoundCard::getSamples16(int, short*)>:
c002a1b4:	55                   	push   ebp
c002a1b5:	57                   	push   edi
c002a1b6:	31 ff                	xor    edi,edi
c002a1b8:	56                   	push   esi
c002a1b9:	53                   	push   ebx
c002a1ba:	31 db                	xor    ebx,ebx
c002a1bc:	83 ec 10             	sub    esp,0x10
c002a1bf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a1c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a1c7:	8d 04 36             	lea    eax,[esi+esi*1]
c002a1ca:	50                   	push   eax
c002a1cb:	6a 00                	push   0x0
c002a1cd:	55                   	push   ebp
c002a1ce:	e8 1d 63 fd ff       	call   c00004f0 <memset>
c002a1d3:	83 c4 10             	add    esp,0x10
c002a1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a1da:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c002a1e1:	85 c0                	test   eax,eax
c002a1e3:	74 1b                	je     c002a200 <SoundCard::getSamples16(int, short*)+0x4c>
c002a1e5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a1e9:	75 15                	jne    c002a200 <SoundCard::getSamples16(int, short*)+0x4c>
c002a1eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002a1ef:	55                   	push   ebp
c002a1f0:	56                   	push   esi
c002a1f1:	50                   	push   eax
c002a1f2:	e8 f1 02 00 00       	call   c002a4e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c002a1f7:	83 c4 10             	add    esp,0x10
c002a1fa:	39 c7                	cmp    edi,eax
c002a1fc:	7d 02                	jge    c002a200 <SoundCard::getSamples16(int, short*)+0x4c>
c002a1fe:	89 c7                	mov    edi,eax
c002a200:	43                   	inc    ebx
c002a201:	83 fb 20             	cmp    ebx,0x20
c002a204:	75 d0                	jne    c002a1d6 <SoundCard::getSamples16(int, short*)+0x22>
c002a206:	83 c4 0c             	add    esp,0xc
c002a209:	89 f8                	mov    eax,edi
c002a20b:	5b                   	pop    ebx
c002a20c:	5e                   	pop    esi
c002a20d:	5f                   	pop    edi
c002a20e:	5d                   	pop    ebp
c002a20f:	c3                   	ret    

c002a210 <SoundCard::getSamples32(int, int*)>:
c002a210:	55                   	push   ebp
c002a211:	57                   	push   edi
c002a212:	31 ff                	xor    edi,edi
c002a214:	56                   	push   esi
c002a215:	31 f6                	xor    esi,esi
c002a217:	53                   	push   ebx
c002a218:	83 ec 10             	sub    esp,0x10
c002a21b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002a21f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a223:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a227:	c1 e0 02             	shl    eax,0x2
c002a22a:	50                   	push   eax
c002a22b:	6a 00                	push   0x0
c002a22d:	55                   	push   ebp
c002a22e:	e8 bd 62 fd ff       	call   c00004f0 <memset>
c002a233:	83 c4 10             	add    esp,0x10
c002a236:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c002a23d:	85 c0                	test   eax,eax
c002a23f:	74 1b                	je     c002a25c <SoundCard::getSamples32(int, int*)+0x4c>
c002a241:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a245:	75 15                	jne    c002a25c <SoundCard::getSamples32(int, int*)+0x4c>
c002a247:	53                   	push   ebx
c002a248:	55                   	push   ebp
c002a249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a24d:	50                   	push   eax
c002a24e:	e8 61 03 00 00       	call   c002a5b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c002a253:	83 c4 10             	add    esp,0x10
c002a256:	39 c6                	cmp    esi,eax
c002a258:	7d 02                	jge    c002a25c <SoundCard::getSamples32(int, int*)+0x4c>
c002a25a:	89 c6                	mov    esi,eax
c002a25c:	47                   	inc    edi
c002a25d:	83 ff 20             	cmp    edi,0x20
c002a260:	75 d4                	jne    c002a236 <SoundCard::getSamples32(int, int*)+0x26>
c002a262:	85 f6                	test   esi,esi
c002a264:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c002a26b:	75 0f                	jne    c002a27c <SoundCard::getSamples32(int, int*)+0x6c>
c002a26d:	85 c0                	test   eax,eax
c002a26f:	74 1b                	je     c002a28c <SoundCard::getSamples32(int, int*)+0x7c>
c002a271:	83 ec 0c             	sub    esp,0xc
c002a274:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a276:	53                   	push   ebx
c002a277:	ff 50 28             	call   DWORD PTR [eax+0x28]
c002a27a:	eb 0d                	jmp    c002a289 <SoundCard::getSamples32(int, int*)+0x79>
c002a27c:	85 c0                	test   eax,eax
c002a27e:	75 0c                	jne    c002a28c <SoundCard::getSamples32(int, int*)+0x7c>
c002a280:	83 ec 0c             	sub    esp,0xc
c002a283:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a285:	53                   	push   ebx
c002a286:	ff 50 24             	call   DWORD PTR [eax+0x24]
c002a289:	83 c4 10             	add    esp,0x10
c002a28c:	83 c4 0c             	add    esp,0xc
c002a28f:	89 f0                	mov    eax,esi
c002a291:	5b                   	pop    ebx
c002a292:	5e                   	pop    esi
c002a293:	5f                   	pop    edi
c002a294:	5d                   	pop    ebp
c002a295:	c3                   	ret    

c002a296 <SoundCard::addChannel(SoundPort*)>:
c002a296:	83 ec 0c             	sub    esp,0xc
c002a299:	31 c0                	xor    eax,eax
c002a29b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a29f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c002a2a7:	74 1b                	je     c002a2c4 <SoundCard::addChannel(SoundPort*)+0x2e>
c002a2a9:	40                   	inc    eax
c002a2aa:	83 f8 20             	cmp    eax,0x20
c002a2ad:	75 f0                	jne    c002a29f <SoundCard::addChannel(SoundPort*)+0x9>
c002a2af:	83 ec 0c             	sub    esp,0xc
c002a2b2:	68 71 3d 03 c0       	push   0xc0033d71
c002a2b7:	e8 c2 64 ff ff       	call   c002077e <KePanic(char const*)>
c002a2bc:	83 c4 10             	add    esp,0x10
c002a2bf:	83 c8 ff             	or     eax,0xffffffff
c002a2c2:	eb 0b                	jmp    c002a2cf <SoundCard::addChannel(SoundPort*)+0x39>
c002a2c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002a2c8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c002a2cf:	83 c4 0c             	add    esp,0xc
c002a2d2:	c3                   	ret    
c002a2d3:	90                   	nop

c002a2d4 <SoundCard::removeChannel(int)>:
c002a2d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a2d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a2dc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c002a2e7:	c3                   	ret    

c002a2e8 <SoundPort::SoundPort(int, int, int, int)>:
c002a2e8:	83 ec 0c             	sub    esp,0xc
c002a2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2ef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2fa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a302:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a306:	89 10                	mov    DWORD PTR [eax],edx
c002a308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a30c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a310:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002a313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a317:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002a31b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002a31e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c002a323:	75 13                	jne    c002a338 <SoundPort::SoundPort(int, int, int, int)+0x50>
c002a325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a329:	8b 00                	mov    eax,DWORD PTR [eax]
c002a32b:	05 a0 0f 00 00       	add    eax,0xfa0
c002a330:	01 c0                	add    eax,eax
c002a332:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a336:	66 90                	xchg   ax,ax
c002a338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a33c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a340:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002a343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a347:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002a34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a352:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a355:	c1 e0 02             	shl    eax,0x2
c002a358:	83 ec 0c             	sub    esp,0xc
c002a35b:	50                   	push   eax
c002a35c:	e8 56 c2 fe ff       	call   c00165b7 <malloc>
c002a361:	83 c4 10             	add    esp,0x10
c002a364:	89 c2                	mov    edx,eax
c002a366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a36a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002a36d:	90                   	nop
c002a36e:	83 c4 0c             	add    esp,0xc
c002a371:	c3                   	ret    
c002a372:	66 90                	xchg   ax,ax

c002a374 <SoundPort::~SoundPort()>:
c002a374:	83 ec 0c             	sub    esp,0xc
c002a377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a37b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a37e:	85 c0                	test   eax,eax
c002a380:	74 1e                	je     c002a3a0 <SoundPort::~SoundPort()+0x2c>
c002a382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a386:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a389:	83 ec 0c             	sub    esp,0xc
c002a38c:	50                   	push   eax
c002a38d:	e8 35 c2 fe ff       	call   c00165c7 <free>
c002a392:	83 c4 10             	add    esp,0x10
c002a395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a399:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a3a0:	90                   	nop
c002a3a1:	83 c4 0c             	add    esp,0xc
c002a3a4:	c3                   	ret    
c002a3a5:	90                   	nop
c002a3a6:	66 90                	xchg   ax,ax

c002a3a8 <SoundPort::unpause()>:
c002a3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002a3b0:	c3                   	ret    
c002a3b1:	90                   	nop
c002a3b2:	66 90                	xchg   ax,ax

c002a3b4 <SoundPort::pause()>:
c002a3b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3b8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a3bc:	c3                   	ret    
c002a3bd:	90                   	nop
c002a3be:	66 90                	xchg   ax,ax

c002a3c0 <SoundPort::getBufferUsed()>:
c002a3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a3c7:	c3                   	ret    

c002a3c8 <SoundPort::getBufferSize()>:
c002a3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a3cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a3cf:	c3                   	ret    

c002a3d0 <SoundPort::buffer16(short*, int)>:
c002a3d0:	55                   	push   ebp
c002a3d1:	57                   	push   edi
c002a3d2:	56                   	push   esi
c002a3d3:	53                   	push   ebx
c002a3d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a3d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a3dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a3df:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a3e2:	74 68                	je     c002a44c <SoundPort::buffer16(short*, int)+0x7c>
c002a3e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a3e8:	85 c9                	test   ecx,ecx
c002a3ea:	7e 60                	jle    c002a44c <SoundPort::buffer16(short*, int)+0x7c>
c002a3ec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a3f0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a3f3:	c1 e1 0f             	shl    ecx,0xf
c002a3f6:	8d 70 01             	lea    esi,[eax+0x1]
c002a3f9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a3fc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a3ff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a402:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a405:	74 4d                	je     c002a454 <SoundPort::buffer16(short*, int)+0x84>
c002a407:	31 f6                	xor    esi,esi
c002a409:	eb 21                	jmp    c002a42c <SoundPort::buffer16(short*, int)+0x5c>
c002a40b:	90                   	nop
c002a40c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a411:	8d 79 01             	lea    edi,[ecx+0x1]
c002a414:	c1 e3 0f             	shl    ebx,0xf
c002a417:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a41a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a41d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a420:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a423:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a426:	74 1c                	je     c002a444 <SoundPort::buffer16(short*, int)+0x74>
c002a428:	89 c6                	mov    esi,eax
c002a42a:	66 90                	xchg   ax,ax
c002a42c:	8d 46 01             	lea    eax,[esi+0x1]
c002a42f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a433:	75 d7                	jne    c002a40c <SoundPort::buffer16(short*, int)+0x3c>
c002a435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a439:	8d 76 00             	lea    esi,[esi+0x0]
c002a43c:	5b                   	pop    ebx
c002a43d:	5e                   	pop    esi
c002a43e:	5f                   	pop    edi
c002a43f:	5d                   	pop    ebp
c002a440:	c3                   	ret    
c002a441:	8d 76 00             	lea    esi,[esi+0x0]
c002a444:	5b                   	pop    ebx
c002a445:	8d 46 02             	lea    eax,[esi+0x2]
c002a448:	5e                   	pop    esi
c002a449:	5f                   	pop    edi
c002a44a:	5d                   	pop    ebp
c002a44b:	c3                   	ret    
c002a44c:	5b                   	pop    ebx
c002a44d:	31 c0                	xor    eax,eax
c002a44f:	5e                   	pop    esi
c002a450:	5f                   	pop    edi
c002a451:	5d                   	pop    ebp
c002a452:	c3                   	ret    
c002a453:	90                   	nop
c002a454:	b8 01 00 00 00       	mov    eax,0x1
c002a459:	eb e1                	jmp    c002a43c <SoundPort::buffer16(short*, int)+0x6c>
c002a45b:	90                   	nop

c002a45c <SoundPort::buffer32(int*, int)>:
c002a45c:	55                   	push   ebp
c002a45d:	57                   	push   edi
c002a45e:	56                   	push   esi
c002a45f:	53                   	push   ebx
c002a460:	83 ec 04             	sub    esp,0x4
c002a463:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a46b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a46e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a472:	89 04 24             	mov    DWORD PTR [esp],eax
c002a475:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a478:	74 5a                	je     c002a4d4 <SoundPort::buffer32(int*, int)+0x78>
c002a47a:	85 c0                	test   eax,eax
c002a47c:	7e 56                	jle    c002a4d4 <SoundPort::buffer32(int*, int)+0x78>
c002a47e:	8d 71 01             	lea    esi,[ecx+0x1]
c002a481:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a484:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a487:	8b 37                	mov    esi,DWORD PTR [edi]
c002a489:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a48c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a48f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a492:	74 4c                	je     c002a4e0 <SoundPort::buffer32(int*, int)+0x84>
c002a494:	31 f6                	xor    esi,esi
c002a496:	eb 1c                	jmp    c002a4b4 <SoundPort::buffer32(int*, int)+0x58>
c002a498:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a49b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a49e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a4a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a4a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a4a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a4ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a4ae:	74 18                	je     c002a4c8 <SoundPort::buffer32(int*, int)+0x6c>
c002a4b0:	89 de                	mov    esi,ebx
c002a4b2:	66 90                	xchg   ax,ax
c002a4b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a4b7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a4ba:	75 dc                	jne    c002a498 <SoundPort::buffer32(int*, int)+0x3c>
c002a4bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a4bf:	90                   	nop
c002a4c0:	83 c4 04             	add    esp,0x4
c002a4c3:	5b                   	pop    ebx
c002a4c4:	5e                   	pop    esi
c002a4c5:	5f                   	pop    edi
c002a4c6:	5d                   	pop    ebp
c002a4c7:	c3                   	ret    
c002a4c8:	83 c4 04             	add    esp,0x4
c002a4cb:	8d 46 02             	lea    eax,[esi+0x2]
c002a4ce:	5b                   	pop    ebx
c002a4cf:	5e                   	pop    esi
c002a4d0:	5f                   	pop    edi
c002a4d1:	5d                   	pop    ebp
c002a4d2:	c3                   	ret    
c002a4d3:	90                   	nop
c002a4d4:	83 c4 04             	add    esp,0x4
c002a4d7:	31 c0                	xor    eax,eax
c002a4d9:	5b                   	pop    ebx
c002a4da:	5e                   	pop    esi
c002a4db:	5f                   	pop    edi
c002a4dc:	5d                   	pop    ebp
c002a4dd:	c3                   	ret    
c002a4de:	66 90                	xchg   ax,ax
c002a4e0:	b8 01 00 00 00       	mov    eax,0x1
c002a4e5:	eb d9                	jmp    c002a4c0 <SoundPort::buffer32(int*, int)+0x64>
c002a4e7:	90                   	nop

c002a4e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a4e8:	57                   	push   edi
c002a4e9:	56                   	push   esi
c002a4ea:	53                   	push   ebx
c002a4eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002a4ef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002a4f3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c002a4f9:	39 03                	cmp    DWORD PTR [ebx],eax
c002a4fb:	74 13                	je     c002a510 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c002a4fd:	83 ec 0c             	sub    esp,0xc
c002a500:	68 c4 3d 03 c0       	push   0xc0033dc4
c002a505:	e8 74 62 ff ff       	call   c002077e <KePanic(char const*)>
c002a50a:	83 c4 10             	add    esp,0x10
c002a50d:	8d 76 00             	lea    esi,[esi+0x0]
c002a510:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c002a516:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a519:	74 11                	je     c002a52c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c002a51b:	83 ec 0c             	sub    esp,0xc
c002a51e:	68 03 3e 03 c0       	push   0xc0033e03
c002a523:	e8 56 62 ff ff       	call   c002077e <KePanic(char const*)>
c002a528:	83 c4 10             	add    esp,0x10
c002a52b:	90                   	nop
c002a52c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c002a532:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a535:	74 11                	je     c002a548 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c002a537:	83 ec 0c             	sub    esp,0xc
c002a53a:	68 03 3e 03 c0       	push   0xc0033e03
c002a53f:	e8 3a 62 ff ff       	call   c002077e <KePanic(char const*)>
c002a544:	83 c4 10             	add    esp,0x10
c002a547:	90                   	nop
c002a548:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c002a54b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c002a54f:	7e 07                	jle    c002a558 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c002a551:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002a555:	8d 76 00             	lea    esi,[esi+0x0]
c002a558:	85 f6                	test   esi,esi
c002a55a:	7e 2c                	jle    c002a588 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c002a55c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a560:	8d 3c 36             	lea    edi,[esi+esi*1]
c002a563:	31 c9                	xor    ecx,ecx
c002a565:	01 d7                	add    edi,edx
c002a567:	90                   	nop
c002a568:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c002a56b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c002a56e:	85 c0                	test   eax,eax
c002a570:	79 06                	jns    c002a578 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c002a572:	05 ff 7f 00 00       	add    eax,0x7fff
c002a577:	90                   	nop
c002a578:	c1 f8 0f             	sar    eax,0xf
c002a57b:	83 c1 04             	add    ecx,0x4
c002a57e:	66 01 02             	add    WORD PTR [edx],ax
c002a581:	83 c2 02             	add    edx,0x2
c002a584:	39 d7                	cmp    edi,edx
c002a586:	75 e0                	jne    c002a568 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c002a588:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a58b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a58e:	83 ec 04             	sub    esp,0x4
c002a591:	29 f0                	sub    eax,esi
c002a593:	c1 e0 02             	shl    eax,0x2
c002a596:	50                   	push   eax
c002a597:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a59a:	50                   	push   eax
c002a59b:	52                   	push   edx
c002a59c:	e8 2f 5e fd ff       	call   c00003d0 <memmove>
c002a5a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a5a4:	83 c4 10             	add    esp,0x10
c002a5a7:	29 f0                	sub    eax,esi
c002a5a9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a5ac:	89 f0                	mov    eax,esi
c002a5ae:	5b                   	pop    ebx
c002a5af:	5e                   	pop    esi
c002a5b0:	5f                   	pop    edi
c002a5b1:	c3                   	ret    
c002a5b2:	66 90                	xchg   ax,ax

c002a5b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a5b4:	57                   	push   edi
c002a5b5:	56                   	push   esi
c002a5b6:	53                   	push   ebx
c002a5b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a5bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a5bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002a5c3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c002a5c9:	39 06                	cmp    DWORD PTR [esi],eax
c002a5cb:	74 13                	je     c002a5e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c002a5cd:	83 ec 0c             	sub    esp,0xc
c002a5d0:	68 e4 3d 03 c0       	push   0xc0033de4
c002a5d5:	e8 a4 61 ff ff       	call   c002077e <KePanic(char const*)>
c002a5da:	83 c4 10             	add    esp,0x10
c002a5dd:	8d 76 00             	lea    esi,[esi+0x0]
c002a5e0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c002a5e6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c002a5e9:	74 11                	je     c002a5fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c002a5eb:	83 ec 0c             	sub    esp,0xc
c002a5ee:	68 1f 3e 03 c0       	push   0xc0033e1f
c002a5f3:	e8 86 61 ff ff       	call   c002077e <KePanic(char const*)>
c002a5f8:	83 c4 10             	add    esp,0x10
c002a5fb:	90                   	nop
c002a5fc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002a602:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c002a605:	74 11                	je     c002a618 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c002a607:	83 ec 0c             	sub    esp,0xc
c002a60a:	68 1f 3e 03 c0       	push   0xc0033e1f
c002a60f:	e8 6a 61 ff ff       	call   c002077e <KePanic(char const*)>
c002a614:	83 c4 10             	add    esp,0x10
c002a617:	90                   	nop
c002a618:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a61b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a61f:	7e 07                	jle    c002a628 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a621:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a625:	8d 76 00             	lea    esi,[esi+0x0]
c002a628:	85 ff                	test   edi,edi
c002a62a:	7e 1c                	jle    c002a648 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a62c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a633:	31 c0                	xor    eax,eax
c002a635:	8d 76 00             	lea    esi,[esi+0x0]
c002a638:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a63b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a63e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a641:	83 c0 04             	add    eax,0x4
c002a644:	39 c1                	cmp    ecx,eax
c002a646:	75 f0                	jne    c002a638 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a648:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a64b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a64e:	83 ec 04             	sub    esp,0x4
c002a651:	29 f8                	sub    eax,edi
c002a653:	c1 e0 02             	shl    eax,0x2
c002a656:	50                   	push   eax
c002a657:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a65a:	50                   	push   eax
c002a65b:	52                   	push   edx
c002a65c:	e8 6f 5d fd ff       	call   c00003d0 <memmove>
c002a661:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a664:	83 c4 10             	add    esp,0x10
c002a667:	29 f8                	sub    eax,edi
c002a669:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a66c:	89 f8                	mov    eax,edi
c002a66e:	5b                   	pop    ebx
c002a66f:	5e                   	pop    esi
c002a670:	5f                   	pop    edi
c002a671:	c3                   	ret    

c002a672 <PCI::open(int, int, void*)>:
c002a672:	83 ec 18             	sub    esp,0x18
c002a675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a679:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a67d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a683:	8b 10                	mov    edx,DWORD PTR [eax]
c002a685:	50                   	push   eax
c002a686:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a689:	31 c0                	xor    eax,eax
c002a68b:	83 c4 1c             	add    esp,0x1c
c002a68e:	c3                   	ret    
c002a68f:	90                   	nop

c002a690 <PCI::close(int, int, void*)>:
c002a690:	31 c0                	xor    eax,eax
c002a692:	c3                   	ret    
c002a693:	90                   	nop

c002a694 <PCI::PCI()>:
c002a694:	83 ec 0c             	sub    esp,0xc
c002a697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a69b:	83 ec 08             	sub    esp,0x8
c002a69e:	68 3b 3e 03 c0       	push   0xc0033e3b
c002a6a3:	50                   	push   eax
c002a6a4:	e8 7f 07 ff ff       	call   c001ae28 <Bus::Bus(char const*)>
c002a6a9:	83 c4 10             	add    esp,0x10
c002a6ac:	ba 48 3f 03 c0       	mov    edx,0xc0033f48
c002a6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6b5:	89 10                	mov    DWORD PTR [eax],edx
c002a6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6bb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a6c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6c9:	a3 a0 1b 04 c0       	mov    ds:0xc0041ba0,eax
c002a6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a6d8:	0f b6 d0             	movzx  edx,al
c002a6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6df:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a6f0:	0f b6 d0             	movzx  edx,al
c002a6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a6f7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a700:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a706:	8d 50 01             	lea    edx,[eax+0x1]
c002a709:	88 d1                	mov    cl,dl
c002a70b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a70f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a715:	0f b6 d0             	movzx  edx,al
c002a718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a71c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a720:	83 c9 c0             	or     ecx,0xffffffc0
c002a723:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a727:	90                   	nop
c002a728:	83 c4 0c             	add    esp,0xc
c002a72b:	c3                   	ret    

c002a72c <PCI::readBAR8(unsigned int, int)>:
c002a72c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a734:	f6 c2 01             	test   dl,0x1
c002a737:	74 07                	je     c002a740 <PCI::readBAR8(unsigned int, int)+0x14>
c002a739:	83 e2 fc             	and    edx,0xfffffffc
c002a73c:	01 c2                	add    edx,eax
c002a73e:	ec                   	in     al,dx
c002a73f:	c3                   	ret    
c002a740:	83 e2 f0             	and    edx,0xfffffff0
c002a743:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a746:	c3                   	ret    
c002a747:	90                   	nop

c002a748 <PCI::readBAR16(unsigned int, int)>:
c002a748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a750:	f6 c2 01             	test   dl,0x1
c002a753:	74 08                	je     c002a75d <PCI::readBAR16(unsigned int, int)+0x15>
c002a755:	83 e2 fc             	and    edx,0xfffffffc
c002a758:	01 c2                	add    edx,eax
c002a75a:	66 ed                	in     ax,dx
c002a75c:	c3                   	ret    
c002a75d:	83 e2 f0             	and    edx,0xfffffff0
c002a760:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a764:	c3                   	ret    
c002a765:	90                   	nop

c002a766 <PCI::readBAR32(unsigned int, int)>:
c002a766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a76a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a76e:	f6 c2 01             	test   dl,0x1
c002a771:	74 07                	je     c002a77a <PCI::readBAR32(unsigned int, int)+0x14>
c002a773:	83 e2 fc             	and    edx,0xfffffffc
c002a776:	01 c2                	add    edx,eax
c002a778:	ed                   	in     eax,dx
c002a779:	c3                   	ret    
c002a77a:	83 e2 f0             	and    edx,0xfffffff0
c002a77d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a780:	c3                   	ret    
c002a781:	90                   	nop

c002a782 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a782:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a78a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a78e:	f6 c2 01             	test   dl,0x1
c002a791:	74 07                	je     c002a79a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a793:	83 e2 fc             	and    edx,0xfffffffc
c002a796:	01 ca                	add    edx,ecx
c002a798:	ee                   	out    dx,al
c002a799:	c3                   	ret    
c002a79a:	83 e2 f0             	and    edx,0xfffffff0
c002a79d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a7a0:	c3                   	ret    
c002a7a1:	90                   	nop

c002a7a2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a7a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a7a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a7aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a7ae:	f6 c2 01             	test   dl,0x1
c002a7b1:	74 08                	je     c002a7bb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a7b3:	83 e2 fc             	and    edx,0xfffffffc
c002a7b6:	01 ca                	add    edx,ecx
c002a7b8:	66 ef                	out    dx,ax
c002a7ba:	c3                   	ret    
c002a7bb:	83 e2 f0             	and    edx,0xfffffff0
c002a7be:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a7c2:	c3                   	ret    
c002a7c3:	90                   	nop

c002a7c4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a7c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a7c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a7cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a7d0:	f6 c2 01             	test   dl,0x1
c002a7d3:	74 07                	je     c002a7dc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a7d5:	83 e2 fc             	and    edx,0xfffffffc
c002a7d8:	01 ca                	add    edx,ecx
c002a7da:	ef                   	out    dx,eax
c002a7db:	c3                   	ret    
c002a7dc:	83 e2 f0             	and    edx,0xfffffff0
c002a7df:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a7e2:	c3                   	ret    
c002a7e3:	90                   	nop

c002a7e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a7e4:	55                   	push   ebp
c002a7e5:	57                   	push   edi
c002a7e6:	56                   	push   esi
c002a7e7:	53                   	push   ebx
c002a7e8:	83 ec 0c             	sub    esp,0xc
c002a7eb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a7f0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a7f4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a7f8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a7fc:	83 fe 07             	cmp    esi,0x7
c002a7ff:	76 10                	jbe    c002a811 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a801:	83 ec 0c             	sub    esp,0xc
c002a804:	68 43 3e 03 c0       	push   0xc0033e43
c002a809:	e8 70 5f ff ff       	call   c002077e <KePanic(char const*)>
c002a80e:	83 c4 10             	add    esp,0x10
c002a811:	0f b6 db             	movzx  ebx,bl
c002a814:	83 fb 0f             	cmp    ebx,0xf
c002a817:	76 10                	jbe    c002a829 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a819:	83 ec 0c             	sub    esp,0xc
c002a81c:	68 73 3e 03 c0       	push   0xc0033e73
c002a821:	e8 58 5f ff ff       	call   c002077e <KePanic(char const*)>
c002a826:	83 c4 10             	add    esp,0x10
c002a829:	8d 04 36             	lea    eax,[esi+esi*1]
c002a82c:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a831:	83 c8 f0             	or     eax,0xfffffff0
c002a834:	ee                   	out    dx,al
c002a835:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a83a:	89 e8                	mov    eax,ebp
c002a83c:	ee                   	out    dx,al
c002a83d:	83 c4 0c             	add    esp,0xc
c002a840:	89 d8                	mov    eax,ebx
c002a842:	89 f9                	mov    ecx,edi
c002a844:	c1 e0 08             	shl    eax,0x8
c002a847:	0f b6 d9             	movzx  ebx,cl
c002a84a:	83 e3 fc             	and    ebx,0xfffffffc
c002a84d:	09 d8                	or     eax,ebx
c002a84f:	5b                   	pop    ebx
c002a850:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a855:	5e                   	pop    esi
c002a856:	5f                   	pop    edi
c002a857:	5d                   	pop    ebp
c002a858:	c3                   	ret    
c002a859:	90                   	nop

c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a85a:	57                   	push   edi
c002a85b:	56                   	push   esi
c002a85c:	53                   	push   ebx
c002a85d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a861:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a865:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a86b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a86f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a873:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a877:	83 ff 01             	cmp    edi,0x1
c002a87a:	75 3f                	jne    c002a8bb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a87c:	89 de                	mov    esi,ebx
c002a87e:	0f b6 c0             	movzx  eax,al
c002a881:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a887:	c1 e0 10             	shl    eax,0x10
c002a88a:	0f b6 c9             	movzx  ecx,cl
c002a88d:	09 f0                	or     eax,esi
c002a88f:	c1 e1 08             	shl    ecx,0x8
c002a892:	0f b6 d2             	movzx  edx,dl
c002a895:	09 c8                	or     eax,ecx
c002a897:	c1 e2 0b             	shl    edx,0xb
c002a89a:	09 d0                	or     eax,edx
c002a89c:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a8a1:	0d 00 00 00 80       	or     eax,0x80000000
c002a8a6:	ef                   	out    dx,eax
c002a8a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a8ac:	ed                   	in     eax,dx
c002a8ad:	83 e3 02             	and    ebx,0x2
c002a8b0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a8b7:	d3 e8                	shr    eax,cl
c002a8b9:	eb 44                	jmp    c002a8ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a8bb:	83 ff 02             	cmp    edi,0x2
c002a8be:	75 2d                	jne    c002a8ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a8c0:	83 ec 0c             	sub    esp,0xc
c002a8c3:	0f b6 c9             	movzx  ecx,cl
c002a8c6:	0f b6 d2             	movzx  edx,dl
c002a8c9:	0f b6 fb             	movzx  edi,bl
c002a8cc:	0f b6 c0             	movzx  eax,al
c002a8cf:	57                   	push   edi
c002a8d0:	51                   	push   ecx
c002a8d1:	52                   	push   edx
c002a8d2:	50                   	push   eax
c002a8d3:	56                   	push   esi
c002a8d4:	e8 0b ff ff ff       	call   c002a7e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8d9:	89 c2                	mov    edx,eax
c002a8db:	ed                   	in     eax,dx
c002a8dc:	83 e3 02             	and    ebx,0x2
c002a8df:	83 c4 20             	add    esp,0x20
c002a8e2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a8e9:	d3 e8                	shr    eax,cl
c002a8eb:	eb 12                	jmp    c002a8ff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a8ed:	83 ec 0c             	sub    esp,0xc
c002a8f0:	68 a3 3e 03 c0       	push   0xc0033ea3
c002a8f5:	e8 84 5e ff ff       	call   c002077e <KePanic(char const*)>
c002a8fa:	83 c4 10             	add    esp,0x10
c002a8fd:	31 c0                	xor    eax,eax
c002a8ff:	5b                   	pop    ebx
c002a900:	5e                   	pop    esi
c002a901:	5f                   	pop    edi
c002a902:	c3                   	ret    
c002a903:	90                   	nop

c002a904 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a904:	83 ec 18             	sub    esp,0x18
c002a907:	6a 00                	push   0x0
c002a909:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a90e:	50                   	push   eax
c002a90f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a914:	50                   	push   eax
c002a915:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a91a:	50                   	push   eax
c002a91b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a91f:	e8 36 ff ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a924:	83 c4 2c             	add    esp,0x2c
c002a927:	c3                   	ret    

c002a928 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a928:	83 ec 18             	sub    esp,0x18
c002a92b:	6a 0e                	push   0xe
c002a92d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a932:	50                   	push   eax
c002a933:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a938:	50                   	push   eax
c002a939:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a93e:	50                   	push   eax
c002a93f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a943:	e8 12 ff ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a948:	83 c4 2c             	add    esp,0x2c
c002a94b:	0f b6 c0             	movzx  eax,al
c002a94e:	c3                   	ret    
c002a94f:	90                   	nop

c002a950 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a950:	55                   	push   ebp
c002a951:	57                   	push   edi
c002a952:	56                   	push   esi
c002a953:	53                   	push   ebx
c002a954:	83 ec 18             	sub    esp,0x18
c002a957:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a95c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a961:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a966:	6a 0a                	push   0xa
c002a968:	56                   	push   esi
c002a969:	55                   	push   ebp
c002a96a:	57                   	push   edi
c002a96b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a96f:	e8 e6 fe ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a974:	83 c4 14             	add    esp,0x14
c002a977:	89 c3                	mov    ebx,eax
c002a979:	6a 0a                	push   0xa
c002a97b:	0f b6 db             	movzx  ebx,bl
c002a97e:	56                   	push   esi
c002a97f:	55                   	push   ebp
c002a980:	57                   	push   edi
c002a981:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a985:	e8 d0 fe ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a98a:	83 c4 2c             	add    esp,0x2c
c002a98d:	25 00 ff 00 00       	and    eax,0xff00
c002a992:	09 d8                	or     eax,ebx
c002a994:	5b                   	pop    ebx
c002a995:	5e                   	pop    esi
c002a996:	5f                   	pop    edi
c002a997:	5d                   	pop    ebp
c002a998:	c3                   	ret    
c002a999:	90                   	nop

c002a99a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a99a:	83 ec 18             	sub    esp,0x18
c002a99d:	6a 08                	push   0x8
c002a99f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9a4:	50                   	push   eax
c002a9a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9aa:	50                   	push   eax
c002a9ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9b0:	50                   	push   eax
c002a9b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a9b5:	e8 a0 fe ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9ba:	83 c4 2c             	add    esp,0x2c
c002a9bd:	0f b6 c4             	movzx  eax,ah
c002a9c0:	c3                   	ret    
c002a9c1:	90                   	nop

c002a9c2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a9c2:	83 ec 18             	sub    esp,0x18
c002a9c5:	6a 08                	push   0x8
c002a9c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9cc:	50                   	push   eax
c002a9cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9d2:	50                   	push   eax
c002a9d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9d8:	50                   	push   eax
c002a9d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a9dd:	e8 78 fe ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9e2:	83 c4 2c             	add    esp,0x2c
c002a9e5:	c3                   	ret    

c002a9e6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a9e6:	83 ec 18             	sub    esp,0x18
c002a9e9:	6a 3c                	push   0x3c
c002a9eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9f0:	50                   	push   eax
c002a9f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9f6:	50                   	push   eax
c002a9f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a9fc:	50                   	push   eax
c002a9fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002aa01:	e8 54 fe ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa06:	83 c4 2c             	add    esp,0x2c
c002aa09:	c3                   	ret    

c002aa0a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002aa0a:	83 ec 18             	sub    esp,0x18
c002aa0d:	6a 18                	push   0x18
c002aa0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa14:	50                   	push   eax
c002aa15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa1a:	50                   	push   eax
c002aa1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002aa20:	50                   	push   eax
c002aa21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002aa25:	e8 30 fe ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa2a:	83 c4 2c             	add    esp,0x2c
c002aa2d:	0f b6 c4             	movzx  eax,ah
c002aa30:	c3                   	ret    
c002aa31:	90                   	nop

c002aa32 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002aa32:	55                   	push   ebp
c002aa33:	57                   	push   edi
c002aa34:	56                   	push   esi
c002aa35:	53                   	push   ebx
c002aa36:	83 ec 28             	sub    esp,0x28
c002aa39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002aa3d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002aa42:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002aa47:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002aa4c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002aa53:	8d 43 12             	lea    eax,[ebx+0x12]
c002aa56:	83 c3 10             	add    ebx,0x10
c002aa59:	0f b6 c0             	movzx  eax,al
c002aa5c:	0f b6 db             	movzx  ebx,bl
c002aa5f:	50                   	push   eax
c002aa60:	51                   	push   ecx
c002aa61:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002aa65:	57                   	push   edi
c002aa66:	55                   	push   ebp
c002aa67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002aa6b:	e8 ea fd ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa70:	83 c4 14             	add    esp,0x14
c002aa73:	89 c6                	mov    esi,eax
c002aa75:	53                   	push   ebx
c002aa76:	c1 e6 10             	shl    esi,0x10
c002aa79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002aa7d:	51                   	push   ecx
c002aa7e:	57                   	push   edi
c002aa7f:	55                   	push   ebp
c002aa80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002aa84:	e8 d1 fd ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa89:	83 c4 3c             	add    esp,0x3c
c002aa8c:	0f b7 c0             	movzx  eax,ax
c002aa8f:	5b                   	pop    ebx
c002aa90:	09 f0                	or     eax,esi
c002aa92:	5e                   	pop    esi
c002aa93:	5f                   	pop    edi
c002aa94:	5d                   	pop    ebp
c002aa95:	c3                   	ret    

c002aa96 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002aa96:	55                   	push   ebp
c002aa97:	57                   	push   edi
c002aa98:	56                   	push   esi
c002aa99:	53                   	push   ebx
c002aa9a:	83 ec 0c             	sub    esp,0xc
c002aa9d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002aaa1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002aaa5:	89 f5                	mov    ebp,esi
c002aaa7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002aaad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002aab1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002aab5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002aab9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002aabd:	83 f9 01             	cmp    ecx,0x1
c002aac0:	75 5d                	jne    c002ab1f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002aac2:	0f b6 c8             	movzx  ecx,al
c002aac5:	0f b6 d2             	movzx  edx,dl
c002aac8:	c1 e1 10             	shl    ecx,0x10
c002aacb:	c1 e2 0b             	shl    edx,0xb
c002aace:	89 f0                	mov    eax,esi
c002aad0:	25 fc 00 00 00       	and    eax,0xfc
c002aad5:	09 c1                	or     ecx,eax
c002aad7:	89 e8                	mov    eax,ebp
c002aad9:	0f b6 c0             	movzx  eax,al
c002aadc:	c1 e0 08             	shl    eax,0x8
c002aadf:	09 c1                	or     ecx,eax
c002aae1:	09 d1                	or     ecx,edx
c002aae3:	ba f8 0c 00 00       	mov    edx,0xcf8
c002aae8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002aaee:	89 c8                	mov    eax,ecx
c002aaf0:	ef                   	out    dx,eax
c002aaf1:	ba fc 0c 00 00       	mov    edx,0xcfc
c002aaf6:	ed                   	in     eax,dx
c002aaf7:	0f b7 db             	movzx  ebx,bx
c002aafa:	83 e6 02             	and    esi,0x2
c002aafd:	74 0a                	je     c002ab09 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002aaff:	0f b7 d0             	movzx  edx,ax
c002ab02:	c1 e3 10             	shl    ebx,0x10
c002ab05:	09 d3                	or     ebx,edx
c002ab07:	eb 05                	jmp    c002ab0e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002ab09:	66 31 c0             	xor    ax,ax
c002ab0c:	09 c3                	or     ebx,eax
c002ab0e:	ba f8 0c 00 00       	mov    edx,0xcf8
c002ab13:	89 c8                	mov    eax,ecx
c002ab15:	ef                   	out    dx,eax
c002ab16:	ba fc 0c 00 00       	mov    edx,0xcfc
c002ab1b:	89 d8                	mov    eax,ebx
c002ab1d:	eb 41                	jmp    c002ab60 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002ab1f:	83 f9 02             	cmp    ecx,0x2
c002ab22:	75 45                	jne    c002ab69 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002ab24:	83 ec 0c             	sub    esp,0xc
c002ab27:	0f b6 d2             	movzx  edx,dl
c002ab2a:	89 f1                	mov    ecx,esi
c002ab2c:	0f b6 c0             	movzx  eax,al
c002ab2f:	0f b6 f1             	movzx  esi,cl
c002ab32:	89 e9                	mov    ecx,ebp
c002ab34:	56                   	push   esi
c002ab35:	0f b6 c9             	movzx  ecx,cl
c002ab38:	51                   	push   ecx
c002ab39:	52                   	push   edx
c002ab3a:	50                   	push   eax
c002ab3b:	57                   	push   edi
c002ab3c:	e8 a3 fc ff ff       	call   c002a7e4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab41:	89 c2                	mov    edx,eax
c002ab43:	ed                   	in     eax,dx
c002ab44:	83 c4 20             	add    esp,0x20
c002ab47:	0f b7 db             	movzx  ebx,bx
c002ab4a:	f6 c2 02             	test   dl,0x2
c002ab4d:	74 0c                	je     c002ab5b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002ab4f:	0f b7 c8             	movzx  ecx,ax
c002ab52:	89 d8                	mov    eax,ebx
c002ab54:	c1 e0 10             	shl    eax,0x10
c002ab57:	09 c8                	or     eax,ecx
c002ab59:	eb 05                	jmp    c002ab60 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002ab5b:	66 31 c0             	xor    ax,ax
c002ab5e:	09 d8                	or     eax,ebx
c002ab60:	ef                   	out    dx,eax
c002ab61:	83 c4 0c             	add    esp,0xc
c002ab64:	5b                   	pop    ebx
c002ab65:	5e                   	pop    esi
c002ab66:	5f                   	pop    edi
c002ab67:	5d                   	pop    ebp
c002ab68:	c3                   	ret    
c002ab69:	c7 44 24 20 a3 3e 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033ea3
c002ab71:	83 c4 0c             	add    esp,0xc
c002ab74:	5b                   	pop    ebx
c002ab75:	5e                   	pop    esi
c002ab76:	5f                   	pop    edi
c002ab77:	5d                   	pop    ebp
c002ab78:	e9 01 5c ff ff       	jmp    c002077e <KePanic(char const*)>
c002ab7d:	90                   	nop

c002ab7e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002ab7e:	55                   	push   ebp
c002ab7f:	57                   	push   edi
c002ab80:	56                   	push   esi
c002ab81:	53                   	push   ebx
c002ab82:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002ab88:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002ab8f:	80 3d ac 1b 04 c0 00 	cmp    BYTE PTR ds:0xc0041bac,0x0
c002ab96:	0f 85 bd 00 00 00    	jne    c002ac59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002ab9c:	83 ec 0c             	sub    esp,0xc
c002ab9f:	68 14 01 00 00       	push   0x114
c002aba4:	e8 0e ba fe ff       	call   c00165b7 <malloc>
c002aba9:	83 c4 0c             	add    esp,0xc
c002abac:	89 c3                	mov    ebx,eax
c002abae:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c002abb4:	68 a9 3e 03 c0       	push   0xc0033ea9
c002abb9:	50                   	push   eax
c002abba:	e8 8d fa fe ff       	call   c001a64c <File::File(char const*, Process*)>
c002abbf:	83 c4 10             	add    esp,0x10
c002abc2:	85 db                	test   ebx,ebx
c002abc4:	0f 84 67 02 00 00    	je     c002ae31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002abca:	56                   	push   esi
c002abcb:	56                   	push   esi
c002abcc:	6a 01                	push   0x1
c002abce:	53                   	push   ebx
c002abcf:	e8 96 fa fe ff       	call   c001a66a <File::open(FileOpenMode)>
c002abd4:	83 c4 10             	add    esp,0x10
c002abd7:	85 c0                	test   eax,eax
c002abd9:	0f 85 52 02 00 00    	jne    c002ae31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002abdf:	52                   	push   edx
c002abe0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002abe4:	50                   	push   eax
c002abe5:	8d 44 24 48          	lea    eax,[esp+0x48]
c002abe9:	50                   	push   eax
c002abea:	53                   	push   ebx
c002abeb:	e8 7c fd fe ff       	call   c001a96c <File::stat(unsigned long long*, bool*)>
c002abf0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002abf4:	40                   	inc    eax
c002abf5:	89 04 24             	mov    DWORD PTR [esp],eax
c002abf8:	e8 ba b9 fe ff       	call   c00165b7 <malloc>
c002abfd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002ac01:	a3 a8 1b 04 c0       	mov    ds:0xc0041ba8,eax
c002ac06:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002ac0a:	59                   	pop    ecx
c002ac0b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002ac0d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002ac11:	51                   	push   ecx
c002ac12:	50                   	push   eax
c002ac13:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002ac17:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002ac1b:	53                   	push   ebx
c002ac1c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002ac1f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002ac23:	83 c4 20             	add    esp,0x20
c002ac26:	89 c8                	mov    eax,ecx
c002ac28:	99                   	cdq    
c002ac29:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002ac2d:	0f 85 fe 01 00 00    	jne    c002ae31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002ac33:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002ac37:	0f 85 f4 01 00 00    	jne    c002ae31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002ac3d:	83 ec 0c             	sub    esp,0xc
c002ac40:	53                   	push   ebx
c002ac41:	e8 82 fa fe ff       	call   c001a6c8 <File::close()>
c002ac46:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002ac4a:	c6 05 ac 1b 04 c0 01 	mov    BYTE PTR ds:0xc0041bac,0x1
c002ac51:	a3 a4 1b 04 c0       	mov    ds:0xc0041ba4,eax
c002ac56:	83 c4 10             	add    esp,0x10
c002ac59:	a1 a4 1b 04 c0       	mov    eax,ds:0xc0041ba4
c002ac5e:	8b 1d a8 1b 04 c0    	mov    ebx,DWORD PTR ds:0xc0041ba8
c002ac64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002ac68:	31 f6                	xor    esi,esi
c002ac6a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002ac72:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002ac79:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002ac7e:	31 c9                	xor    ecx,ecx
c002ac80:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002ac88:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002ac8d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002ac95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002ac99:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002aca1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002aca5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002aca9:	0f 8e 82 01 00 00    	jle    c002ae31 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002acaf:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002acb2:	d4 40                	aam    0x40
c002acb4:	d5 39                	aad    0x39
c002acb6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002acba:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002acbe:	d4 40                	aam    0x40
c002acc0:	d5 39                	aad    0x39
c002acc2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002acc6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002acca:	d4 40                	aam    0x40
c002accc:	d5 39                	aad    0x39
c002acce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002acd2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002acd6:	d4 40                	aam    0x40
c002acd8:	d5 39                	aad    0x39
c002acda:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002acde:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002ace2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002ace6:	3c 56                	cmp    al,0x56
c002ace8:	74 43                	je     c002ad2d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002acea:	d4 40                	aam    0x40
c002acec:	d5 39                	aad    0x39
c002acee:	8d 48 d0             	lea    ecx,[eax-0x30]
c002acf1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002acf5:	0f b6 c9             	movzx  ecx,cl
c002acf8:	c1 e1 04             	shl    ecx,0x4
c002acfb:	d4 40                	aam    0x40
c002acfd:	d5 39                	aad    0x39
c002acff:	83 e8 30             	sub    eax,0x30
c002ad02:	0f b6 c0             	movzx  eax,al
c002ad05:	09 c1                	or     ecx,eax
c002ad07:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002ad0b:	c1 e1 04             	shl    ecx,0x4
c002ad0e:	d4 40                	aam    0x40
c002ad10:	d5 39                	aad    0x39
c002ad12:	83 e8 30             	sub    eax,0x30
c002ad15:	0f b6 c0             	movzx  eax,al
c002ad18:	09 c1                	or     ecx,eax
c002ad1a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002ad1e:	c1 e1 04             	shl    ecx,0x4
c002ad21:	d4 40                	aam    0x40
c002ad23:	d5 39                	aad    0x39
c002ad25:	83 e8 30             	sub    eax,0x30
c002ad28:	0f b6 c0             	movzx  eax,al
c002ad2b:	09 c1                	or     ecx,eax
c002ad2d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002ad31:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002ad35:	3c 58                	cmp    al,0x58
c002ad37:	74 47                	je     c002ad80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002ad39:	d4 40                	aam    0x40
c002ad3b:	d5 39                	aad    0x39
c002ad3d:	8d 50 d0             	lea    edx,[eax-0x30]
c002ad40:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002ad44:	0f b6 d2             	movzx  edx,dl
c002ad47:	c1 e2 04             	shl    edx,0x4
c002ad4a:	d4 40                	aam    0x40
c002ad4c:	d5 39                	aad    0x39
c002ad4e:	83 e8 30             	sub    eax,0x30
c002ad51:	0f b6 c0             	movzx  eax,al
c002ad54:	09 c2                	or     edx,eax
c002ad56:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002ad5a:	c1 e2 04             	shl    edx,0x4
c002ad5d:	d4 40                	aam    0x40
c002ad5f:	d5 39                	aad    0x39
c002ad61:	83 e8 30             	sub    eax,0x30
c002ad64:	0f b6 c0             	movzx  eax,al
c002ad67:	09 c2                	or     edx,eax
c002ad69:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002ad6d:	c1 e2 04             	shl    edx,0x4
c002ad70:	d4 40                	aam    0x40
c002ad72:	d5 39                	aad    0x39
c002ad74:	83 e8 30             	sub    eax,0x30
c002ad77:	0f b6 c0             	movzx  eax,al
c002ad7a:	09 c2                	or     edx,eax
c002ad7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ad80:	83 c6 10             	add    esi,0x10
c002ad83:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002ad87:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002ad8b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002ad8f:	83 fa 0a             	cmp    edx,0xa
c002ad92:	74 0b                	je     c002ad9f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002ad94:	47                   	inc    edi
c002ad95:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002ad99:	75 19                	jne    c002adb4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002ad9b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002ad9f:	31 c0                	xor    eax,eax
c002ada1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002ada6:	0f 94 c0             	sete   al
c002ada9:	01 c6                	add    esi,eax
c002adab:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002adb0:	75 0b                	jne    c002adbd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002adb2:	eb 14                	jmp    c002adc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002adb4:	46                   	inc    esi
c002adb5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002adb8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002adbb:	eb ca                	jmp    c002ad87 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002adbd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002adc2:	0f 85 dd fe ff ff    	jne    c002aca5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002adc8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002adcd:	74 10                	je     c002addf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002adcf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002add4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002add9:	0f 85 c6 fe ff ff    	jne    c002aca5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002addf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ade3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002ade7:	83 e8 30             	sub    eax,0x30
c002adea:	83 ef 30             	sub    edi,0x30
c002aded:	c1 e0 04             	shl    eax,0x4
c002adf0:	09 f8                	or     eax,edi
c002adf2:	0f b6 c0             	movzx  eax,al
c002adf5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002adf9:	0f 85 a6 fe ff ff    	jne    c002aca5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002adff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002ae03:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002ae07:	83 e8 30             	sub    eax,0x30
c002ae0a:	83 ef 30             	sub    edi,0x30
c002ae0d:	c1 e0 04             	shl    eax,0x4
c002ae10:	09 f8                	or     eax,edi
c002ae12:	0f b6 c0             	movzx  eax,al
c002ae15:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002ae19:	0f 85 86 fe ff ff    	jne    c002aca5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002ae1f:	50                   	push   eax
c002ae20:	50                   	push   eax
c002ae21:	8d 44 24 48          	lea    eax,[esp+0x48]
c002ae25:	50                   	push   eax
c002ae26:	55                   	push   ebp
c002ae27:	e8 14 58 fd ff       	call   c0000640 <strcpy>
c002ae2c:	83 c4 10             	add    esp,0x10
c002ae2f:	eb 06                	jmp    c002ae37 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002ae31:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002ae35:	31 ed                	xor    ebp,ebp
c002ae37:	81 c4 4c 01 00 00    	add    esp,0x14c
c002ae3d:	89 e8                	mov    eax,ebp
c002ae3f:	5b                   	pop    ebx
c002ae40:	5e                   	pop    esi
c002ae41:	5f                   	pop    edi
c002ae42:	5d                   	pop    ebp
c002ae43:	c3                   	ret    

c002ae44 <PCI::checkBus(unsigned char)>:
c002ae44:	56                   	push   esi
c002ae45:	53                   	push   ebx
c002ae46:	31 db                	xor    ebx,ebx
c002ae48:	51                   	push   ecx
c002ae49:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002ae4e:	52                   	push   edx
c002ae4f:	53                   	push   ebx
c002ae50:	43                   	inc    ebx
c002ae51:	56                   	push   esi
c002ae52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ae56:	e8 6f 03 00 00       	call   c002b1ca <PCI::checkDevice(unsigned char, unsigned char)>
c002ae5b:	83 c4 10             	add    esp,0x10
c002ae5e:	83 fb 20             	cmp    ebx,0x20
c002ae61:	75 eb                	jne    c002ae4e <PCI::checkBus(unsigned char)+0xa>
c002ae63:	58                   	pop    eax
c002ae64:	5b                   	pop    ebx
c002ae65:	5e                   	pop    esi
c002ae66:	c3                   	ret    
c002ae67:	90                   	nop

c002ae68 <PCI::foundDevice(PCIDeviceInfo)>:
c002ae68:	55                   	push   ebp
c002ae69:	57                   	push   edi
c002ae6a:	56                   	push   esi
c002ae6b:	53                   	push   ebx
c002ae6c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c002ae72:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c002ae7a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c002ae81:	3d ff ff 00 00       	cmp    eax,0xffff
c002ae86:	0f 84 b7 01 00 00    	je     c002b043 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c002ae8c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c002ae94:	66 81 fb 06 04       	cmp    bx,0x406
c002ae99:	75 32                	jne    c002aecd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c002ae9b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c002aea3:	50                   	push   eax
c002aea4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c002aeac:	50                   	push   eax
c002aead:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002aeb5:	50                   	push   eax
c002aeb6:	55                   	push   ebp
c002aeb7:	e8 4e fb ff ff       	call   c002aa0a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002aebc:	59                   	pop    ecx
c002aebd:	0f b6 c0             	movzx  eax,al
c002aec0:	5b                   	pop    ebx
c002aec1:	50                   	push   eax
c002aec2:	55                   	push   ebp
c002aec3:	e8 7c ff ff ff       	call   c002ae44 <PCI::checkBus(unsigned char)>
c002aec8:	e9 16 01 00 00       	jmp    c002afe3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c002aecd:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c002aed4:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c002aeda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002aede:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c002aee5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c002aeed:	85 c0                	test   eax,eax
c002aeef:	74 36                	je     c002af27 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c002aef1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002aef4:	85 d2                	test   edx,edx
c002aef6:	74 2b                	je     c002af23 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c002aef8:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c002aefe:	31 f9                	xor    ecx,edi
c002af00:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c002af06:	75 1b                	jne    c002af23 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c002af08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002af0c:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c002af12:	75 0f                	jne    c002af23 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c002af14:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c002af1b:	39 f2                	cmp    edx,esi
c002af1d:	0f 84 20 01 00 00    	je     c002b043 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c002af23:	8b 00                	mov    eax,DWORD PTR [eax]
c002af25:	eb c6                	jmp    c002aeed <PCI::foundDevice(PCIDeviceInfo)+0x85>
c002af27:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002af2b:	be dc 3e 03 c0       	mov    esi,0xc0033edc
c002af30:	b9 07 00 00 00       	mov    ecx,0x7
c002af35:	fc                   	cld    
c002af36:	31 d2                	xor    edx,edx
c002af38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002af3a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c002af41:	8d 7c 24 38          	lea    edi,[esp+0x38]
c002af45:	b9 12 00 00 00       	mov    ecx,0x12
c002af4a:	83 ec 0c             	sub    esp,0xc
c002af4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002af4f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002af57:	b9 0a 00 00 00       	mov    ecx,0xa
c002af5c:	f7 f1                	div    ecx
c002af5e:	83 c0 30             	add    eax,0x30
c002af61:	83 c2 30             	add    edx,0x30
c002af64:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c002af68:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c002af6c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c002af74:	31 d2                	xor    edx,edx
c002af76:	f7 f1                	div    ecx
c002af78:	83 c0 30             	add    eax,0x30
c002af7b:	83 c2 30             	add    edx,0x30
c002af7e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c002af82:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c002af86:	8d 44 24 28          	lea    eax,[esp+0x28]
c002af8a:	50                   	push   eax
c002af8b:	e8 a7 4e ff ff       	call   c001fe37 <KeSetBootMessage(char const*)>
c002af90:	83 c4 10             	add    esp,0x10
c002af93:	81 fb 01 06 00 00    	cmp    ebx,0x601
c002af99:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c002afa0:	75 46                	jne    c002afe8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c002afa2:	83 ec 0c             	sub    esp,0xc
c002afa5:	68 64 01 00 00       	push   0x164
c002afaa:	e8 08 b6 fe ff       	call   c00165b7 <malloc>
c002afaf:	89 c3                	mov    ebx,eax
c002afb1:	89 04 24             	mov    DWORD PTR [esp],eax
c002afb4:	e8 7d 0e 00 00       	call   c002be36 <SATABus::SATABus()>
c002afb9:	58                   	pop    eax
c002afba:	5a                   	pop    edx
c002afbb:	53                   	push   ebx
c002afbc:	55                   	push   ebp
c002afbd:	e8 40 06 ff ff       	call   c001b602 <Device::addChild(Device*)>
c002afc2:	83 ec 1c             	sub    esp,0x1c
c002afc5:	b9 09 00 00 00       	mov    ecx,0x9
c002afca:	89 e7                	mov    edi,esp
c002afcc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002afce:	53                   	push   ebx
c002afcf:	e8 74 05 ff ff       	call   c001b548 <Device::preOpenPCI(PCIDeviceInfo)>
c002afd4:	83 c4 30             	add    esp,0x30
c002afd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c002afd9:	6a 00                	push   0x0
c002afdb:	6a 00                	push   0x0
c002afdd:	6a 00                	push   0x0
c002afdf:	53                   	push   ebx
c002afe0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002afe3:	83 c4 10             	add    esp,0x10
c002afe6:	eb 5b                	jmp    c002b043 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c002afe8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c002afee:	75 19                	jne    c002b009 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c002aff0:	83 ec 0c             	sub    esp,0xc
c002aff3:	68 70 02 00 00       	push   0x270
c002aff8:	e8 ba b5 fe ff       	call   c00165b7 <malloc>
c002affd:	89 c3                	mov    ebx,eax
c002afff:	89 04 24             	mov    DWORD PTR [esp],eax
c002b002:	e8 93 02 00 00       	call   c002b29a <IDE::IDE()>
c002b007:	eb b0                	jmp    c002afb9 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c002b009:	83 ec 0c             	sub    esp,0xc
c002b00c:	68 58 01 00 00       	push   0x158
c002b011:	e8 a1 b5 fe ff       	call   c00165b7 <malloc>
c002b016:	89 c3                	mov    ebx,eax
c002b018:	58                   	pop    eax
c002b019:	5a                   	pop    edx
c002b01a:	68 c2 3e 03 c0       	push   0xc0033ec2
c002b01f:	53                   	push   ebx
c002b020:	e8 91 08 ff ff       	call   c001b8b6 <DriverlessDevice::DriverlessDevice(char const*)>
c002b025:	59                   	pop    ecx
c002b026:	5f                   	pop    edi
c002b027:	53                   	push   ebx
c002b028:	55                   	push   ebp
c002b029:	e8 d4 05 ff ff       	call   c001b602 <Device::addChild(Device*)>
c002b02e:	83 ec 1c             	sub    esp,0x1c
c002b031:	b9 09 00 00 00       	mov    ecx,0x9
c002b036:	89 e7                	mov    edi,esp
c002b038:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002b03a:	53                   	push   ebx
c002b03b:	e8 08 05 ff ff       	call   c001b548 <Device::preOpenPCI(PCIDeviceInfo)>
c002b040:	83 c4 30             	add    esp,0x30
c002b043:	81 c4 8c 00 00 00    	add    esp,0x8c
c002b049:	5b                   	pop    ebx
c002b04a:	5e                   	pop    esi
c002b04b:	5f                   	pop    edi
c002b04c:	5d                   	pop    ebp
c002b04d:	c3                   	ret    

c002b04e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002b04e:	55                   	push   ebp
c002b04f:	57                   	push   edi
c002b050:	56                   	push   esi
c002b051:	53                   	push   ebx
c002b052:	83 ec 68             	sub    esp,0x68
c002b055:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002b059:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002b060:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002b064:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002b06b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002b070:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002b074:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002b07b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002b080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002b084:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002b089:	6a 0c                	push   0xc
c002b08b:	57                   	push   edi
c002b08c:	53                   	push   ebx
c002b08d:	56                   	push   esi
c002b08e:	55                   	push   ebp
c002b08f:	e8 c6 f7 ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b094:	83 c4 20             	add    esp,0x20
c002b097:	57                   	push   edi
c002b098:	53                   	push   ebx
c002b099:	56                   	push   esi
c002b09a:	55                   	push   ebp
c002b09b:	e8 b0 f8 ff ff       	call   c002a950 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002b0a0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002b0a5:	57                   	push   edi
c002b0a6:	53                   	push   ebx
c002b0a7:	56                   	push   esi
c002b0a8:	55                   	push   ebp
c002b0a9:	e8 38 f9 ff ff       	call   c002a9e6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002b0ae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002b0b2:	83 c4 14             	add    esp,0x14
c002b0b5:	6a 3c                	push   0x3c
c002b0b7:	57                   	push   edi
c002b0b8:	53                   	push   ebx
c002b0b9:	56                   	push   esi
c002b0ba:	55                   	push   ebp
c002b0bb:	e8 9a f7 ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b0c0:	0f b6 c4             	movzx  eax,ah
c002b0c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002b0c7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002b0cb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002b0cf:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002b0d4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002b0da:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002b0e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002b0e4:	83 c4 20             	add    esp,0x20
c002b0e7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002b0ec:	74 30                	je     c002b11e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002b0ee:	31 c0                	xor    eax,eax
c002b0f0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002b0f4:	7e 28                	jle    c002b11e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002b0f6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002b0fe:	39 cb                	cmp    ebx,ecx
c002b100:	75 19                	jne    c002b11b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002b102:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002b10a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002b10e:	75 0b                	jne    c002b11b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002b110:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002b117:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002b11b:	40                   	inc    eax
c002b11c:	eb d2                	jmp    c002b0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002b11e:	31 d2                	xor    edx,edx
c002b120:	83 ec 0c             	sub    esp,0xc
c002b123:	57                   	push   edi
c002b124:	53                   	push   ebx
c002b125:	56                   	push   esi
c002b126:	52                   	push   edx
c002b127:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002b12b:	55                   	push   ebp
c002b12c:	e8 01 f9 ff ff       	call   c002aa32 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b131:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002b135:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002b139:	42                   	inc    edx
c002b13a:	83 c4 20             	add    esp,0x20
c002b13d:	83 fa 06             	cmp    edx,0x6
c002b140:	75 de                	jne    c002b120 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002b142:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002b146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b14a:	c1 e2 08             	shl    edx,0x8
c002b14d:	83 ec 0c             	sub    esp,0xc
c002b150:	0f b6 c4             	movzx  eax,ah
c002b153:	09 d0                	or     eax,edx
c002b155:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002b15a:	6a 02                	push   0x2
c002b15c:	57                   	push   edi
c002b15d:	53                   	push   ebx
c002b15e:	56                   	push   esi
c002b15f:	55                   	push   ebp
c002b160:	e8 f5 f6 ff ff       	call   c002a85a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b165:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002b16a:	83 c4 20             	add    esp,0x20
c002b16d:	57                   	push   edi
c002b16e:	53                   	push   ebx
c002b16f:	56                   	push   esi
c002b170:	55                   	push   ebp
c002b171:	e8 24 f8 ff ff       	call   c002a99a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002b176:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002b17a:	57                   	push   edi
c002b17b:	53                   	push   ebx
c002b17c:	56                   	push   esi
c002b17d:	55                   	push   ebp
c002b17e:	e8 81 f7 ff ff       	call   c002a904 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b183:	b9 09 00 00 00       	mov    ecx,0x9
c002b188:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002b18d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002b191:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002b195:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002b199:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002b19d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002b1a1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002b1a5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002b1a9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002b1ad:	83 ec 0c             	sub    esp,0xc
c002b1b0:	fc                   	cld    
c002b1b1:	89 e7                	mov    edi,esp
c002b1b3:	8d 74 24 58          	lea    esi,[esp+0x58]
c002b1b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002b1b9:	55                   	push   ebp
c002b1ba:	e8 a9 fc ff ff       	call   c002ae68 <PCI::foundDevice(PCIDeviceInfo)>
c002b1bf:	81 c4 8c 00 00 00    	add    esp,0x8c
c002b1c5:	5b                   	pop    ebx
c002b1c6:	5e                   	pop    esi
c002b1c7:	5f                   	pop    edi
c002b1c8:	5d                   	pop    ebp
c002b1c9:	c3                   	ret    

c002b1ca <PCI::checkDevice(unsigned char, unsigned char)>:
c002b1ca:	55                   	push   ebp
c002b1cb:	57                   	push   edi
c002b1cc:	56                   	push   esi
c002b1cd:	53                   	push   ebx
c002b1ce:	83 ec 0c             	sub    esp,0xc
c002b1d1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002b1d5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002b1da:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002b1df:	6a 00                	push   0x0
c002b1e1:	56                   	push   esi
c002b1e2:	57                   	push   edi
c002b1e3:	55                   	push   ebp
c002b1e4:	e8 1b f7 ff ff       	call   c002a904 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b1e9:	6a 00                	push   0x0
c002b1eb:	56                   	push   esi
c002b1ec:	57                   	push   edi
c002b1ed:	55                   	push   ebp
c002b1ee:	e8 5b fe ff ff       	call   c002b04e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b1f3:	83 c4 20             	add    esp,0x20
c002b1f6:	6a 00                	push   0x0
c002b1f8:	56                   	push   esi
c002b1f9:	57                   	push   edi
c002b1fa:	55                   	push   ebp
c002b1fb:	e8 28 f7 ff ff       	call   c002a928 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b200:	83 c4 10             	add    esp,0x10
c002b203:	a8 80                	test   al,0x80
c002b205:	74 2d                	je     c002b234 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002b207:	bb 01 00 00 00       	mov    ebx,0x1
c002b20c:	53                   	push   ebx
c002b20d:	56                   	push   esi
c002b20e:	57                   	push   edi
c002b20f:	55                   	push   ebp
c002b210:	e8 ef f6 ff ff       	call   c002a904 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b215:	83 c4 10             	add    esp,0x10
c002b218:	0f b7 c0             	movzx  eax,ax
c002b21b:	3d ff ff 00 00       	cmp    eax,0xffff
c002b220:	74 0c                	je     c002b22e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002b222:	53                   	push   ebx
c002b223:	56                   	push   esi
c002b224:	57                   	push   edi
c002b225:	55                   	push   ebp
c002b226:	e8 23 fe ff ff       	call   c002b04e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b22b:	83 c4 10             	add    esp,0x10
c002b22e:	43                   	inc    ebx
c002b22f:	83 fb 08             	cmp    ebx,0x8
c002b232:	75 d8                	jne    c002b20c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002b234:	83 c4 0c             	add    esp,0xc
c002b237:	5b                   	pop    ebx
c002b238:	5e                   	pop    esi
c002b239:	5f                   	pop    edi
c002b23a:	5d                   	pop    ebp
c002b23b:	c3                   	ret    

c002b23c <PCI::detect()>:
c002b23c:	56                   	push   esi
c002b23d:	53                   	push   ebx
c002b23e:	53                   	push   ebx
c002b23f:	31 db                	xor    ebx,ebx
c002b241:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b245:	6a 00                	push   0x0
c002b247:	6a 00                	push   0x0
c002b249:	6a 00                	push   0x0
c002b24b:	56                   	push   esi
c002b24c:	e8 d7 f6 ff ff       	call   c002a928 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b251:	83 c4 10             	add    esp,0x10
c002b254:	a8 80                	test   al,0x80
c002b256:	75 21                	jne    c002b279 <PCI::detect()+0x3d>
c002b258:	51                   	push   ecx
c002b259:	51                   	push   ecx
c002b25a:	6a 00                	push   0x0
c002b25c:	56                   	push   esi
c002b25d:	e8 e2 fb ff ff       	call   c002ae44 <PCI::checkBus(unsigned char)>
c002b262:	83 c4 10             	add    esp,0x10
c002b265:	eb 2a                	jmp    c002b291 <PCI::detect()+0x55>
c002b267:	52                   	push   edx
c002b268:	52                   	push   edx
c002b269:	53                   	push   ebx
c002b26a:	43                   	inc    ebx
c002b26b:	56                   	push   esi
c002b26c:	e8 d3 fb ff ff       	call   c002ae44 <PCI::checkBus(unsigned char)>
c002b271:	83 c4 10             	add    esp,0x10
c002b274:	83 fb 08             	cmp    ebx,0x8
c002b277:	74 18                	je     c002b291 <PCI::detect()+0x55>
c002b279:	53                   	push   ebx
c002b27a:	6a 00                	push   0x0
c002b27c:	6a 00                	push   0x0
c002b27e:	56                   	push   esi
c002b27f:	e8 80 f6 ff ff       	call   c002a904 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b284:	83 c4 10             	add    esp,0x10
c002b287:	0f b7 c0             	movzx  eax,ax
c002b28a:	3d ff ff 00 00       	cmp    eax,0xffff
c002b28f:	74 d6                	je     c002b267 <PCI::detect()+0x2b>
c002b291:	58                   	pop    eax
c002b292:	5b                   	pop    ebx
c002b293:	5e                   	pop    esi
c002b294:	c3                   	ret    
c002b295:	90                   	nop

c002b296 <IDE::close(int, int, void*)>:
c002b296:	83 c8 ff             	or     eax,0xffffffff
c002b299:	c3                   	ret    

c002b29a <IDE::IDE()>:
c002b29a:	83 ec 0c             	sub    esp,0xc
c002b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b2a1:	83 ec 08             	sub    esp,0x8
c002b2a4:	68 6c 3f 03 c0       	push   0xc0033f6c
c002b2a9:	50                   	push   eax
c002b2aa:	e8 ad 06 ff ff       	call   c001b95c <HardDiskController::HardDiskController(char const*)>
c002b2af:	83 c4 10             	add    esp,0x10
c002b2b2:	ba fc 3f 03 c0       	mov    edx,0xc0033ffc
c002b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b2bb:	89 10                	mov    DWORD PTR [eax],edx
c002b2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b2c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002b2c8:	90                   	nop
c002b2c9:	83 c4 0c             	add    esp,0xc
c002b2cc:	c3                   	ret    
c002b2cd:	90                   	nop

c002b2ce <IDE::prepareInterrupt(unsigned char)>:
c002b2ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002b2d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002b2d7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002b2df:	c3                   	ret    

c002b2e0 <selectDrive(unsigned char, unsigned char)>:
c002b2e0:	c3                   	ret    
c002b2e1:	90                   	nop

c002b2e2 <IDE::getBase(unsigned char)>:
c002b2e2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002b2e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b2eb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002b2f3:	c3                   	ret    

c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002b2f4:	55                   	push   ebp
c002b2f5:	57                   	push   edi
c002b2f6:	56                   	push   esi
c002b2f7:	53                   	push   ebx
c002b2f8:	83 ec 1c             	sub    esp,0x1c
c002b2fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002b2ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b303:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002b306:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002b30a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b30e:	80 f9 03             	cmp    cl,0x3
c002b311:	77 4f                	ja     c002b362 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002b313:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b317:	0f b6 fa             	movzx  edi,dl
c002b31a:	0f b6 db             	movzx  ebx,bl
c002b31d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002b320:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002b325:	80 ca 80             	or     dl,0x80
c002b328:	52                   	push   edx
c002b329:	6a 0c                	push   0xc
c002b32b:	57                   	push   edi
c002b32c:	56                   	push   esi
c002b32d:	e8 c2 ff ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b332:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002b337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b33b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002b33f:	ee                   	out    dx,al
c002b340:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b345:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002b349:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b34d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b351:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b359:	83 c4 2c             	add    esp,0x2c
c002b35c:	5b                   	pop    ebx
c002b35d:	5e                   	pop    esi
c002b35e:	5f                   	pop    edi
c002b35f:	5d                   	pop    ebp
c002b360:	eb 92                	jmp    c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b362:	0f b6 cb             	movzx  ecx,bl
c002b365:	83 f9 07             	cmp    ecx,0x7
c002b368:	77 12                	ja     c002b37c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002b36a:	0f b6 d2             	movzx  edx,dl
c002b36d:	0f b6 db             	movzx  ebx,bl
c002b370:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002b378:	01 da                	add    edx,ebx
c002b37a:	eb 2f                	jmp    c002b3ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b37c:	83 f9 0d             	cmp    ecx,0xd
c002b37f:	77 13                	ja     c002b394 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002b381:	0f b6 d2             	movzx  edx,dl
c002b384:	0f b6 db             	movzx  ebx,bl
c002b387:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002b38e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002b392:	eb 17                	jmp    c002b3ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b394:	83 f9 15             	cmp    ecx,0x15
c002b397:	77 13                	ja     c002b3ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002b399:	0f b6 d2             	movzx  edx,dl
c002b39c:	0f b6 db             	movzx  ebx,bl
c002b39f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002b3a7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002b3ab:	ee                   	out    dx,al
c002b3ac:	83 c4 1c             	add    esp,0x1c
c002b3af:	5b                   	pop    ebx
c002b3b0:	5e                   	pop    esi
c002b3b1:	5f                   	pop    edi
c002b3b2:	5d                   	pop    ebp
c002b3b3:	c3                   	ret    

c002b3b4 <IDE::read(unsigned char, unsigned char)>:
c002b3b4:	55                   	push   ebp
c002b3b5:	57                   	push   edi
c002b3b6:	56                   	push   esi
c002b3b7:	53                   	push   ebx
c002b3b8:	83 ec 1c             	sub    esp,0x1c
c002b3bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002b3bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b3c3:	8d 43 f8             	lea    eax,[ebx-0x8]
c002b3c6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002b3ca:	3c 03                	cmp    al,0x3
c002b3cc:	77 40                	ja     c002b40e <IDE::read(unsigned char, unsigned char)+0x5a>
c002b3ce:	0f b6 f9             	movzx  edi,cl
c002b3d1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002b3d4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b3d9:	0c 80                	or     al,0x80
c002b3db:	50                   	push   eax
c002b3dc:	6a 0c                	push   0xc
c002b3de:	57                   	push   edi
c002b3df:	56                   	push   esi
c002b3e0:	e8 0f ff ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3e5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b3ea:	0f b6 d3             	movzx  edx,bl
c002b3ed:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b3f1:	ec                   	in     al,dx
c002b3f2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002b3f6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002b3fb:	52                   	push   edx
c002b3fc:	6a 0c                	push   0xc
c002b3fe:	57                   	push   edi
c002b3ff:	56                   	push   esi
c002b400:	e8 ef fe ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b405:	83 c4 20             	add    esp,0x20
c002b408:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002b40c:	eb 4c                	jmp    c002b45a <IDE::read(unsigned char, unsigned char)+0xa6>
c002b40e:	0f b6 d3             	movzx  edx,bl
c002b411:	83 fa 07             	cmp    edx,0x7
c002b414:	77 12                	ja     c002b428 <IDE::read(unsigned char, unsigned char)+0x74>
c002b416:	0f b6 c9             	movzx  ecx,cl
c002b419:	0f b6 d3             	movzx  edx,bl
c002b41c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002b424:	01 c2                	add    edx,eax
c002b426:	eb 31                	jmp    c002b459 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b428:	83 fa 0d             	cmp    edx,0xd
c002b42b:	77 13                	ja     c002b440 <IDE::read(unsigned char, unsigned char)+0x8c>
c002b42d:	0f b6 c9             	movzx  ecx,cl
c002b430:	0f b6 d3             	movzx  edx,bl
c002b433:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002b43a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b43e:	eb 19                	jmp    c002b459 <IDE::read(unsigned char, unsigned char)+0xa5>
c002b440:	31 c0                	xor    eax,eax
c002b442:	83 fa 15             	cmp    edx,0x15
c002b445:	77 13                	ja     c002b45a <IDE::read(unsigned char, unsigned char)+0xa6>
c002b447:	0f b6 c9             	movzx  ecx,cl
c002b44a:	0f b6 d3             	movzx  edx,bl
c002b44d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002b455:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b459:	ec                   	in     al,dx
c002b45a:	83 c4 1c             	add    esp,0x1c
c002b45d:	5b                   	pop    ebx
c002b45e:	5e                   	pop    esi
c002b45f:	5f                   	pop    edi
c002b460:	5d                   	pop    ebp
c002b461:	c3                   	ret    

c002b462 <IDE::waitInterrupt(unsigned char)>:
c002b462:	55                   	push   ebp
c002b463:	57                   	push   edi
c002b464:	56                   	push   esi
c002b465:	53                   	push   ebx
c002b466:	31 db                	xor    ebx,ebx
c002b468:	83 ec 0c             	sub    esp,0xc
c002b46b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b46f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b474:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b47c:	89 e8                	mov    eax,ebp
c002b47e:	84 c0                	test   al,al
c002b480:	75 30                	jne    c002b4b2 <IDE::waitInterrupt(unsigned char)+0x50>
c002b482:	50                   	push   eax
c002b483:	6a 0c                	push   0xc
c002b485:	56                   	push   esi
c002b486:	57                   	push   edi
c002b487:	e8 28 ff ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002b48c:	83 c4 10             	add    esp,0x10
c002b48f:	a8 01                	test   al,0x1
c002b491:	75 27                	jne    c002b4ba <IDE::waitInterrupt(unsigned char)+0x58>
c002b493:	f6 c3 04             	test   bl,0x4
c002b496:	75 12                	jne    c002b4aa <IDE::waitInterrupt(unsigned char)+0x48>
c002b498:	83 fb 32             	cmp    ebx,0x32
c002b49b:	7e 0d                	jle    c002b4aa <IDE::waitInterrupt(unsigned char)+0x48>
c002b49d:	83 ec 0c             	sub    esp,0xc
c002b4a0:	6a 64                	push   0x64
c002b4a2:	e8 bd a4 ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002b4a7:	83 c4 10             	add    esp,0x10
c002b4aa:	83 fb 3c             	cmp    ebx,0x3c
c002b4ad:	74 0b                	je     c002b4ba <IDE::waitInterrupt(unsigned char)+0x58>
c002b4af:	43                   	inc    ebx
c002b4b0:	eb c2                	jmp    c002b474 <IDE::waitInterrupt(unsigned char)+0x12>
c002b4b2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b4ba:	83 c4 0c             	add    esp,0xc
c002b4bd:	89 e8                	mov    eax,ebp
c002b4bf:	5b                   	pop    ebx
c002b4c0:	5e                   	pop    esi
c002b4c1:	5f                   	pop    edi
c002b4c2:	5d                   	pop    ebp
c002b4c3:	c3                   	ret    

c002b4c4 <ideChannel0IRQHandler(regs*, void*)>:
c002b4c4:	83 ec 10             	sub    esp,0x10
c002b4c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b4cb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b4d2:	6a 07                	push   0x7
c002b4d4:	6a 00                	push   0x0
c002b4d6:	50                   	push   eax
c002b4d7:	e8 d8 fe ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002b4dc:	83 c4 1c             	add    esp,0x1c
c002b4df:	c3                   	ret    

c002b4e0 <ideChannel1IRQHandler(regs*, void*)>:
c002b4e0:	83 ec 10             	sub    esp,0x10
c002b4e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b4e7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b4ee:	6a 07                	push   0x7
c002b4f0:	6a 01                	push   0x1
c002b4f2:	50                   	push   eax
c002b4f3:	e8 bc fe ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002b4f8:	83 c4 1c             	add    esp,0x1c
c002b4fb:	c3                   	ret    

c002b4fc <IDE::enableIRQs(unsigned char, bool)>:
c002b4fc:	57                   	push   edi
c002b4fd:	b8 02 00 00 00       	mov    eax,0x2
c002b502:	56                   	push   esi
c002b503:	53                   	push   ebx
c002b504:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b508:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b50c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b511:	74 02                	je     c002b515 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b513:	31 c0                	xor    eax,eax
c002b515:	0f b6 db             	movzx  ebx,bl
c002b518:	bf 04 00 00 00       	mov    edi,0x4
c002b51d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b524:	50                   	push   eax
c002b525:	6a 0c                	push   0xc
c002b527:	53                   	push   ebx
c002b528:	56                   	push   esi
c002b529:	e8 c6 fd ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b52e:	83 c4 10             	add    esp,0x10
c002b531:	50                   	push   eax
c002b532:	6a 0c                	push   0xc
c002b534:	53                   	push   ebx
c002b535:	56                   	push   esi
c002b536:	e8 79 fe ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002b53b:	83 c4 10             	add    esp,0x10
c002b53e:	4f                   	dec    edi
c002b53f:	75 f0                	jne    c002b531 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b541:	5b                   	pop    ebx
c002b542:	5e                   	pop    esi
c002b543:	5f                   	pop    edi
c002b544:	c3                   	ret    
c002b545:	90                   	nop

c002b546 <IDE::open(int, int, void*)>:
c002b546:	55                   	push   ebp
c002b547:	57                   	push   edi
c002b548:	56                   	push   esi
c002b549:	53                   	push   ebx
c002b54a:	83 ec 1c             	sub    esp,0x1c
c002b54d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b551:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b55a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b563:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b56a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b571:	0f 85 de 02 00 00    	jne    c002b855 <IDE::open(int, int, void*)+0x30f>
c002b577:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b57d:	88 04 24             	mov    BYTE PTR [esp],al
c002b580:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002b583:	83 e0 7f             	and    eax,0x7f
c002b586:	83 f8 05             	cmp    eax,0x5
c002b589:	74 05                	je     c002b590 <IDE::open(int, int, void*)+0x4a>
c002b58b:	83 f8 0f             	cmp    eax,0xf
c002b58e:	75 32                	jne    c002b5c2 <IDE::open(int, int, void*)+0x7c>
c002b590:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b596:	83 e0 fc             	and    eax,0xfffffffc
c002b599:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b5a0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b5a6:	83 e0 fc             	and    eax,0xfffffffc
c002b5a9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b5b0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b5b6:	83 e0 fc             	and    eax,0xfffffffc
c002b5b9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b5c0:	eb 14                	jmp    c002b5d6 <IDE::open(int, int, void*)+0x90>
c002b5c2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b5cc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b5d6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002b5dd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b5e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b5e8:	89 c6                	mov    esi,eax
c002b5ea:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b5ef:	c1 e6 10             	shl    esi,0x10
c002b5f2:	89 e8                	mov    eax,ebp
c002b5f4:	89 fa                	mov    edx,edi
c002b5f6:	c1 e0 0b             	shl    eax,0xb
c002b5f9:	09 f0                	or     eax,esi
c002b5fb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002b602:	c1 e6 08             	shl    esi,0x8
c002b605:	09 c6                	or     esi,eax
c002b607:	89 f0                	mov    eax,esi
c002b609:	0d 08 00 00 80       	or     eax,0x80000008
c002b60e:	ef                   	out    dx,eax
c002b60f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002b614:	89 ca                	mov    edx,ecx
c002b616:	ed                   	in     eax,dx
c002b617:	c1 e8 10             	shr    eax,0x10
c002b61a:	3d ff ff 00 00       	cmp    eax,0xffff
c002b61f:	0f 84 f9 00 00 00    	je     c002b71e <IDE::open(int, int, void*)+0x1d8>
c002b625:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002b62b:	89 fa                	mov    edx,edi
c002b62d:	89 f0                	mov    eax,esi
c002b62f:	ef                   	out    dx,eax
c002b630:	b0 fe                	mov    al,0xfe
c002b632:	89 ca                	mov    edx,ecx
c002b634:	ee                   	out    dx,al
c002b635:	89 f0                	mov    eax,esi
c002b637:	89 fa                	mov    edx,edi
c002b639:	ef                   	out    dx,eax
c002b63a:	89 ca                	mov    edx,ecx
c002b63c:	ed                   	in     eax,dx
c002b63d:	3c fe                	cmp    al,0xfe
c002b63f:	0f 85 a9 00 00 00    	jne    c002b6ee <IDE::open(int, int, void*)+0x1a8>
c002b645:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c002b64b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b652:	74 33                	je     c002b687 <IDE::open(int, int, void*)+0x141>
c002b654:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b65a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b65e:	40                   	inc    eax
c002b65f:	83 ec 0c             	sub    esp,0xc
c002b662:	0f b6 c0             	movzx  eax,al
c002b665:	50                   	push   eax
c002b666:	55                   	push   ebp
c002b667:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002b66b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b671:	51                   	push   ecx
c002b672:	e8 d9 31 ff ff       	call   c001e850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b677:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b67c:	83 c4 1c             	add    esp,0x1c
c002b67f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b685:	eb 0a                	jmp    c002b691 <IDE::open(int, int, void*)+0x14b>
c002b687:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b691:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b698:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b69f:	c1 e1 10             	shl    ecx,0x10
c002b6a2:	c1 e0 08             	shl    eax,0x8
c002b6a5:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b6aa:	09 c1                	or     ecx,eax
c002b6ac:	89 fa                	mov    edx,edi
c002b6ae:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b6b5:	c1 e0 0b             	shl    eax,0xb
c002b6b8:	09 c1                	or     ecx,eax
c002b6ba:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b6c0:	89 c8                	mov    eax,ecx
c002b6c2:	ef                   	out    dx,eax
c002b6c3:	be fc 0c 00 00       	mov    esi,0xcfc
c002b6c8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b6ce:	89 f2                	mov    edx,esi
c002b6d0:	ee                   	out    dx,al
c002b6d1:	89 c8                	mov    eax,ecx
c002b6d3:	89 fa                	mov    edx,edi
c002b6d5:	ef                   	out    dx,eax
c002b6d6:	89 f2                	mov    edx,esi
c002b6d8:	ed                   	in     eax,dx
c002b6d9:	0f b6 c0             	movzx  eax,al
c002b6dc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b6e2:	74 4a                	je     c002b72e <IDE::open(int, int, void*)+0x1e8>
c002b6e4:	83 ec 0c             	sub    esp,0xc
c002b6e7:	68 84 3f 03 c0       	push   0xc0033f84
c002b6ec:	eb 38                	jmp    c002b726 <IDE::open(int, int, void*)+0x1e0>
c002b6ee:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b6f7:	75 1b                	jne    c002b714 <IDE::open(int, int, void*)+0x1ce>
c002b6f9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b6fd:	3d 80 00 00 00       	cmp    eax,0x80
c002b702:	74 07                	je     c002b70b <IDE::open(int, int, void*)+0x1c5>
c002b704:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b709:	75 09                	jne    c002b714 <IDE::open(int, int, void*)+0x1ce>
c002b70b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b712:	eb 1a                	jmp    c002b72e <IDE::open(int, int, void*)+0x1e8>
c002b714:	83 ec 0c             	sub    esp,0xc
c002b717:	68 8c 3f 03 c0       	push   0xc0033f8c
c002b71c:	eb 08                	jmp    c002b726 <IDE::open(int, int, void*)+0x1e0>
c002b71e:	83 ec 0c             	sub    esp,0xc
c002b721:	68 bd 3f 03 c0       	push   0xc0033fbd
c002b726:	e8 53 50 ff ff       	call   c002077e <KePanic(char const*)>
c002b72b:	83 c4 10             	add    esp,0x10
c002b72e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b735:	74 1a                	je     c002b751 <IDE::open(int, int, void*)+0x20b>
c002b737:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b73d:	83 e0 fc             	and    eax,0xfffffffc
c002b740:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b747:	83 c0 08             	add    eax,0x8
c002b74a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b751:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b757:	89 c2                	mov    edx,eax
c002b759:	83 e2 0f             	and    edx,0xf
c002b75c:	83 fa 08             	cmp    edx,0x8
c002b75f:	75 0a                	jne    c002b76b <IDE::open(int, int, void*)+0x225>
c002b761:	83 e8 02             	sub    eax,0x2
c002b764:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b76b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b771:	89 c2                	mov    edx,eax
c002b773:	83 e2 0f             	and    edx,0xf
c002b776:	83 fa 08             	cmp    edx,0x8
c002b779:	75 0a                	jne    c002b785 <IDE::open(int, int, void*)+0x23f>
c002b77b:	83 e8 02             	sub    eax,0x2
c002b77e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b785:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b78c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b793:	89 d0                	mov    eax,edx
c002b795:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b798:	8d 7a 01             	lea    edi,[edx+0x1]
c002b79b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b79f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b7a3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b7a7:	83 e1 3f             	and    ecx,0x3f
c002b7aa:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b7ae:	89 f9                	mov    ecx,edi
c002b7b0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b7b7:	0f b6 c9             	movzx  ecx,cl
c002b7ba:	8d 78 02             	lea    edi,[eax+0x2]
c002b7bd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b7c0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b7c4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b7c8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b7cc:	83 e2 3f             	and    edx,0x3f
c002b7cf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b7d3:	89 f9                	mov    ecx,edi
c002b7d5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b7db:	0f b6 d1             	movzx  edx,cl
c002b7de:	8d 78 03             	lea    edi,[eax+0x3]
c002b7e1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b7e4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b7e8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b7ec:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b7f0:	83 e1 3f             	and    ecx,0x3f
c002b7f3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b7f7:	89 f9                	mov    ecx,edi
c002b7f9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b7ff:	0f b6 c9             	movzx  ecx,cl
c002b802:	8d 78 04             	lea    edi,[eax+0x4]
c002b805:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b808:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b80c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b810:	89 fa                	mov    edx,edi
c002b812:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b818:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b81c:	83 e2 3f             	and    edx,0x3f
c002b81f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b823:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b82a:	66 85 f6             	test   si,si
c002b82d:	74 65                	je     c002b894 <IDE::open(int, int, void*)+0x34e>
c002b82f:	89 f9                	mov    ecx,edi
c002b831:	83 c0 05             	add    eax,0x5
c002b834:	0f b6 d1             	movzx  edx,cl
c002b837:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b83a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b83e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b842:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b848:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b84c:	83 e0 3f             	and    eax,0x3f
c002b84f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b853:	eb 3f                	jmp    c002b894 <IDE::open(int, int, void*)+0x34e>
c002b855:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b85b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b862:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b869:	05 06 02 00 00       	add    eax,0x206
c002b86e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b875:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b87c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b883:	05 06 02 00 00       	add    eax,0x206
c002b888:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b88f:	e9 bd fe ff ff       	jmp    c002b751 <IDE::open(int, int, void*)+0x20b>
c002b894:	50                   	push   eax
c002b895:	50                   	push   eax
c002b896:	6a 00                	push   0x0
c002b898:	53                   	push   ebx
c002b899:	e8 30 fa ff ff       	call   c002b2ce <IDE::prepareInterrupt(unsigned char)>
c002b89e:	5a                   	pop    edx
c002b89f:	59                   	pop    ecx
c002b8a0:	6a 01                	push   0x1
c002b8a2:	53                   	push   ebx
c002b8a3:	e8 26 fa ff ff       	call   c002b2ce <IDE::prepareInterrupt(unsigned char)>
c002b8a8:	83 c4 0c             	add    esp,0xc
c002b8ab:	6a 00                	push   0x0
c002b8ad:	6a 00                	push   0x0
c002b8af:	53                   	push   ebx
c002b8b0:	e8 47 fc ff ff       	call   c002b4fc <IDE::enableIRQs(unsigned char, bool)>
c002b8b5:	83 c4 0c             	add    esp,0xc
c002b8b8:	6a 00                	push   0x0
c002b8ba:	6a 01                	push   0x1
c002b8bc:	53                   	push   ebx
c002b8bd:	e8 3a fc ff ff       	call   c002b4fc <IDE::enableIRQs(unsigned char, bool)>
c002b8c2:	83 c4 10             	add    esp,0x10
c002b8c5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b8cc:	74 34                	je     c002b902 <IDE::open(int, int, void*)+0x3bc>
c002b8ce:	83 ec 0c             	sub    esp,0xc
c002b8d1:	53                   	push   ebx
c002b8d2:	6a 01                	push   0x1
c002b8d4:	68 c4 b4 02 c0       	push   0xc002b4c4
c002b8d9:	6a 0e                	push   0xe
c002b8db:	53                   	push   ebx
c002b8dc:	e8 cd fc fe ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b8e1:	83 c4 14             	add    esp,0x14
c002b8e4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b8ea:	53                   	push   ebx
c002b8eb:	6a 01                	push   0x1
c002b8ed:	68 e0 b4 02 c0       	push   0xc002b4e0
c002b8f2:	6a 0f                	push   0xf
c002b8f4:	53                   	push   ebx
c002b8f5:	e8 b4 fc fe ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b8fa:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b900:	eb 38                	jmp    c002b93a <IDE::open(int, int, void*)+0x3f4>
c002b902:	83 ec 0c             	sub    esp,0xc
c002b905:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b90f:	53                   	push   ebx
c002b910:	6a 00                	push   0x0
c002b912:	68 c4 b4 02 c0       	push   0xc002b4c4
c002b917:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b91d:	53                   	push   ebx
c002b91e:	e8 8b fc fe ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b923:	83 c4 14             	add    esp,0x14
c002b926:	53                   	push   ebx
c002b927:	6a 00                	push   0x0
c002b929:	68 e0 b4 02 c0       	push   0xc002b4e0
c002b92e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b934:	53                   	push   ebx
c002b935:	e8 74 fc fe ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b93a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b93c:	83 c4 20             	add    esp,0x20
c002b93f:	83 ec 0c             	sub    esp,0xc
c002b942:	53                   	push   ebx
c002b943:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b946:	83 c4 0c             	add    esp,0xc
c002b949:	6a 07                	push   0x7
c002b94b:	6a 00                	push   0x0
c002b94d:	53                   	push   ebx
c002b94e:	e8 61 fa ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002b953:	83 c4 0c             	add    esp,0xc
c002b956:	6a 07                	push   0x7
c002b958:	6a 01                	push   0x1
c002b95a:	53                   	push   ebx
c002b95b:	e8 54 fa ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002b960:	83 c4 0c             	add    esp,0xc
c002b963:	6a 01                	push   0x1
c002b965:	6a 00                	push   0x0
c002b967:	53                   	push   ebx
c002b968:	e8 8f fb ff ff       	call   c002b4fc <IDE::enableIRQs(unsigned char, bool)>
c002b96d:	83 c4 0c             	add    esp,0xc
c002b970:	6a 01                	push   0x1
c002b972:	6a 01                	push   0x1
c002b974:	53                   	push   ebx
c002b975:	e8 82 fb ff ff       	call   c002b4fc <IDE::enableIRQs(unsigned char, bool)>
c002b97a:	83 c4 2c             	add    esp,0x2c
c002b97d:	31 c0                	xor    eax,eax
c002b97f:	5b                   	pop    ebx
c002b980:	5e                   	pop    esi
c002b981:	5f                   	pop    edi
c002b982:	5d                   	pop    ebp
c002b983:	c3                   	ret    

c002b984 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b984:	55                   	push   ebp
c002b985:	57                   	push   edi
c002b986:	56                   	push   esi
c002b987:	53                   	push   ebx
c002b988:	83 ec 1c             	sub    esp,0x1c
c002b98b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b98f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b993:	8d 42 f8             	lea    eax,[edx-0x8]
c002b996:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b99a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b99e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b9a2:	3c 03                	cmp    al,0x3
c002b9a4:	77 5a                	ja     c002ba00 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b9a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b9aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b9ae:	0f b6 db             	movzx  ebx,bl
c002b9b1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b9b4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b9b9:	0c 80                	or     al,0x80
c002b9bb:	50                   	push   eax
c002b9bc:	6a 0c                	push   0xc
c002b9be:	53                   	push   ebx
c002b9bf:	56                   	push   esi
c002b9c0:	e8 2f f9 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9c5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b9ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b9ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b9d2:	0f b6 d2             	movzx  edx,dl
c002b9d5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b9d9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b9db:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b9e0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b9e4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b9e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b9ec:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b9f4:	83 c4 2c             	add    esp,0x2c
c002b9f7:	5b                   	pop    ebx
c002b9f8:	5e                   	pop    esi
c002b9f9:	5f                   	pop    edi
c002b9fa:	5d                   	pop    ebp
c002b9fb:	e9 f4 f8 ff ff       	jmp    c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ba00:	0f b6 c2             	movzx  eax,dl
c002ba03:	83 f8 07             	cmp    eax,0x7
c002ba06:	77 12                	ja     c002ba1a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002ba08:	0f b6 c2             	movzx  eax,dl
c002ba0b:	0f b6 db             	movzx  ebx,bl
c002ba0e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002ba16:	01 c2                	add    edx,eax
c002ba18:	eb 2f                	jmp    c002ba49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002ba1a:	83 f8 0d             	cmp    eax,0xd
c002ba1d:	77 13                	ja     c002ba32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002ba1f:	0f b6 db             	movzx  ebx,bl
c002ba22:	0f b6 d2             	movzx  edx,dl
c002ba25:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002ba2c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ba30:	eb 17                	jmp    c002ba49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002ba32:	83 f8 15             	cmp    eax,0x15
c002ba35:	77 14                	ja     c002ba4b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002ba37:	0f b6 db             	movzx  ebx,bl
c002ba3a:	0f b6 d2             	movzx  edx,dl
c002ba3d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002ba45:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ba49:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002ba4b:	83 c4 1c             	add    esp,0x1c
c002ba4e:	5b                   	pop    ebx
c002ba4f:	5e                   	pop    esi
c002ba50:	5f                   	pop    edi
c002ba51:	5d                   	pop    ebp
c002ba52:	c3                   	ret    
c002ba53:	90                   	nop

c002ba54 <IDE::detect()>:
c002ba54:	55                   	push   ebp
c002ba55:	57                   	push   edi
c002ba56:	56                   	push   esi
c002ba57:	53                   	push   ebx
c002ba58:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002ba5e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002ba65:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002ba6c:	0f 85 a4 02 00 00    	jne    c002bd16 <IDE::detect()+0x2c2>
c002ba72:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002ba79:	31 f6                	xor    esi,esi
c002ba7b:	31 ed                	xor    ebp,ebp
c002ba7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002ba85:	89 e8                	mov    eax,ebp
c002ba87:	c1 e0 06             	shl    eax,0x6
c002ba8a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002ba92:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002ba96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002ba9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ba9e:	c1 e0 04             	shl    eax,0x4
c002baa1:	83 c8 a0             	or     eax,0xffffffa0
c002baa4:	0f b6 c0             	movzx  eax,al
c002baa7:	50                   	push   eax
c002baa8:	6a 06                	push   0x6
c002baaa:	56                   	push   esi
c002baab:	53                   	push   ebx
c002baac:	e8 43 f8 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bab1:	83 c4 0c             	add    esp,0xc
c002bab4:	6a 0c                	push   0xc
c002bab6:	56                   	push   esi
c002bab7:	53                   	push   ebx
c002bab8:	e8 f7 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002babd:	83 c4 0c             	add    esp,0xc
c002bac0:	6a 0c                	push   0xc
c002bac2:	56                   	push   esi
c002bac3:	53                   	push   ebx
c002bac4:	e8 eb f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bac9:	83 c4 0c             	add    esp,0xc
c002bacc:	6a 0c                	push   0xc
c002bace:	56                   	push   esi
c002bacf:	53                   	push   ebx
c002bad0:	e8 df f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bad5:	83 c4 0c             	add    esp,0xc
c002bad8:	6a 0c                	push   0xc
c002bada:	56                   	push   esi
c002badb:	53                   	push   ebx
c002badc:	e8 d3 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bae1:	68 ec 00 00 00       	push   0xec
c002bae6:	6a 07                	push   0x7
c002bae8:	56                   	push   esi
c002bae9:	53                   	push   ebx
c002baea:	e8 05 f8 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002baef:	83 c4 1c             	add    esp,0x1c
c002baf2:	6a 0c                	push   0xc
c002baf4:	56                   	push   esi
c002baf5:	53                   	push   ebx
c002baf6:	e8 b9 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bafb:	83 c4 0c             	add    esp,0xc
c002bafe:	6a 0c                	push   0xc
c002bb00:	56                   	push   esi
c002bb01:	53                   	push   ebx
c002bb02:	e8 ad f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bb07:	83 c4 0c             	add    esp,0xc
c002bb0a:	6a 0c                	push   0xc
c002bb0c:	56                   	push   esi
c002bb0d:	53                   	push   ebx
c002bb0e:	e8 a1 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bb13:	83 c4 0c             	add    esp,0xc
c002bb16:	6a 0c                	push   0xc
c002bb18:	56                   	push   esi
c002bb19:	53                   	push   ebx
c002bb1a:	e8 95 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bb1f:	83 c4 0c             	add    esp,0xc
c002bb22:	6a 0c                	push   0xc
c002bb24:	56                   	push   esi
c002bb25:	53                   	push   ebx
c002bb26:	e8 89 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bb2b:	83 c4 10             	add    esp,0x10
c002bb2e:	84 c0                	test   al,al
c002bb30:	0f 84 60 01 00 00    	je     c002bc96 <IDE::detect()+0x242>
c002bb36:	31 ff                	xor    edi,edi
c002bb38:	50                   	push   eax
c002bb39:	6a 0c                	push   0xc
c002bb3b:	56                   	push   esi
c002bb3c:	53                   	push   ebx
c002bb3d:	e8 72 f8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bb42:	83 c4 10             	add    esp,0x10
c002bb45:	a8 01                	test   al,0x1
c002bb47:	0f 85 6a 01 00 00    	jne    c002bcb7 <IDE::detect()+0x263>
c002bb4d:	a8 80                	test   al,0x80
c002bb4f:	75 04                	jne    c002bb55 <IDE::detect()+0x101>
c002bb51:	a8 08                	test   al,0x8
c002bb53:	75 23                	jne    c002bb78 <IDE::detect()+0x124>
c002bb55:	47                   	inc    edi
c002bb56:	81 ff 17 01 00 00    	cmp    edi,0x117
c002bb5c:	7e da                	jle    c002bb38 <IDE::detect()+0xe4>
c002bb5e:	83 ec 0c             	sub    esp,0xc
c002bb61:	6a 32                	push   0x32
c002bb63:	e8 fc 9d ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002bb68:	83 c4 10             	add    esp,0x10
c002bb6b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002bb71:	75 c5                	jne    c002bb38 <IDE::detect()+0xe4>
c002bb73:	e9 3f 01 00 00       	jmp    c002bcb7 <IDE::detect()+0x263>
c002bb78:	31 c9                	xor    ecx,ecx
c002bb7a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002bb7e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002bb82:	83 ec 0c             	sub    esp,0xc
c002bb85:	68 80 00 00 00       	push   0x80
c002bb8a:	57                   	push   edi
c002bb8b:	6a 00                	push   0x0
c002bb8d:	56                   	push   esi
c002bb8e:	53                   	push   ebx
c002bb8f:	e8 f0 fd ff ff       	call   c002b984 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002bb94:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002bb99:	89 e8                	mov    eax,ebp
c002bb9b:	89 d1                	mov    ecx,edx
c002bb9d:	c1 e0 06             	shl    eax,0x6
c002bba0:	01 d8                	add    eax,ebx
c002bba2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002bba9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002bbb0:	89 f2                	mov    edx,esi
c002bbb2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002bbb8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002bbbc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002bbc2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002bbc6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002bbcd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002bbd5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002bbdc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002bbe4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002bbea:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002bbf1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002bbf7:	8d 54 24 58          	lea    edx,[esp+0x58]
c002bbfb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002bbff:	83 c4 20             	add    esp,0x20
c002bc02:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002bc05:	83 c0 02             	add    eax,0x2
c002bc08:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002bc0e:	83 c7 02             	add    edi,0x2
c002bc11:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002bc14:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002bc1a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002bc1e:	75 e2                	jne    c002bc02 <IDE::detect()+0x1ae>
c002bc20:	89 e8                	mov    eax,ebp
c002bc22:	c1 e0 06             	shl    eax,0x6
c002bc25:	01 d8                	add    eax,ebx
c002bc27:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002bc2e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002bc35:	c1 ea 09             	shr    edx,0x9
c002bc38:	83 e2 01             	and    edx,0x1
c002bc3b:	80 e1 01             	and    cl,0x1
c002bc3e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002bc44:	75 22                	jne    c002bc68 <IDE::detect()+0x214>
c002bc46:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002bc4d:	74 46                	je     c002bc95 <IDE::detect()+0x241>
c002bc4f:	83 ec 0c             	sub    esp,0xc
c002bc52:	68 7c 01 00 00       	push   0x17c
c002bc57:	e8 5b a9 fe ff       	call   c00165b7 <malloc>
c002bc5c:	89 c7                	mov    edi,eax
c002bc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c002bc61:	e8 2e 05 00 00       	call   c002c194 <ATA::ATA()>
c002bc66:	eb 17                	jmp    c002bc7f <IDE::detect()+0x22b>
c002bc68:	83 ec 0c             	sub    esp,0xc
c002bc6b:	68 84 01 00 00       	push   0x184
c002bc70:	e8 42 a9 fe ff       	call   c00165b7 <malloc>
c002bc75:	89 c7                	mov    edi,eax
c002bc77:	89 04 24             	mov    DWORD PTR [esp],eax
c002bc7a:	e8 59 0e 00 00       	call   c002cad8 <ATAPI::ATAPI()>
c002bc7f:	5a                   	pop    edx
c002bc80:	59                   	pop    ecx
c002bc81:	57                   	push   edi
c002bc82:	53                   	push   ebx
c002bc83:	e8 7a f9 fe ff       	call   c001b602 <Device::addChild(Device*)>
c002bc88:	8b 07                	mov    eax,DWORD PTR [edi]
c002bc8a:	53                   	push   ebx
c002bc8b:	55                   	push   ebp
c002bc8c:	6a 00                	push   0x0
c002bc8e:	57                   	push   edi
c002bc8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002bc92:	83 c4 20             	add    esp,0x20
c002bc95:	45                   	inc    ebp
c002bc96:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002bc9b:	74 0d                	je     c002bcaa <IDE::detect()+0x256>
c002bc9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002bca5:	e9 db fd ff ff       	jmp    c002ba85 <IDE::detect()+0x31>
c002bcaa:	4e                   	dec    esi
c002bcab:	74 69                	je     c002bd16 <IDE::detect()+0x2c2>
c002bcad:	be 01 00 00 00       	mov    esi,0x1
c002bcb2:	e9 c6 fd ff ff       	jmp    c002ba7d <IDE::detect()+0x29>
c002bcb7:	50                   	push   eax
c002bcb8:	6a 04                	push   0x4
c002bcba:	56                   	push   esi
c002bcbb:	53                   	push   ebx
c002bcbc:	e8 f3 f6 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bcc1:	83 c4 0c             	add    esp,0xc
c002bcc4:	89 c7                	mov    edi,eax
c002bcc6:	6a 05                	push   0x5
c002bcc8:	56                   	push   esi
c002bcc9:	53                   	push   ebx
c002bcca:	e8 e5 f6 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bccf:	83 c4 10             	add    esp,0x10
c002bcd2:	89 f9                	mov    ecx,edi
c002bcd4:	0f b6 c0             	movzx  eax,al
c002bcd7:	0f b6 f9             	movzx  edi,cl
c002bcda:	83 ff 14             	cmp    edi,0x14
c002bcdd:	75 07                	jne    c002bce6 <IDE::detect()+0x292>
c002bcdf:	3d eb 00 00 00       	cmp    eax,0xeb
c002bce4:	eb 0a                	jmp    c002bcf0 <IDE::detect()+0x29c>
c002bce6:	3d 96 00 00 00       	cmp    eax,0x96
c002bceb:	75 a9                	jne    c002bc96 <IDE::detect()+0x242>
c002bced:	83 ff 69             	cmp    edi,0x69
c002bcf0:	75 a4                	jne    c002bc96 <IDE::detect()+0x242>
c002bcf2:	68 a1 00 00 00       	push   0xa1
c002bcf7:	6a 07                	push   0x7
c002bcf9:	56                   	push   esi
c002bcfa:	53                   	push   ebx
c002bcfb:	e8 f4 f5 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd00:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002bd07:	e8 58 9c ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002bd0c:	83 c4 10             	add    esp,0x10
c002bd0f:	b1 01                	mov    cl,0x1
c002bd11:	e9 64 fe ff ff       	jmp    c002bb7a <IDE::detect()+0x126>
c002bd16:	81 c4 1c 02 00 00    	add    esp,0x21c
c002bd1c:	5b                   	pop    ebx
c002bd1d:	5e                   	pop    esi
c002bd1e:	5f                   	pop    edi
c002bd1f:	5d                   	pop    ebp
c002bd20:	c3                   	ret    
c002bd21:	90                   	nop

c002bd22 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002bd22:	55                   	push   ebp
c002bd23:	57                   	push   edi
c002bd24:	56                   	push   esi
c002bd25:	53                   	push   ebx
c002bd26:	83 ec 1c             	sub    esp,0x1c
c002bd29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002bd2d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002bd31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002bd35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002bd39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002bd3d:	88 c3                	mov    bl,al
c002bd3f:	25 ff 00 00 00       	and    eax,0xff
c002bd44:	0f 84 88 00 00 00    	je     c002bdd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bd4a:	83 ec 0c             	sub    esp,0xc
c002bd4d:	89 c7                	mov    edi,eax
c002bd4f:	68 e7 3f 03 c0       	push   0xc0033fe7
c002bd54:	e8 ec d6 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002bd59:	83 c4 10             	add    esp,0x10
c002bd5c:	83 ff 01             	cmp    edi,0x1
c002bd5f:	74 6b                	je     c002bdcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002bd61:	83 ff 02             	cmp    edi,0x2
c002bd64:	75 58                	jne    c002bdbe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002bd66:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002bd6b:	01 ff                	add    edi,edi
c002bd6d:	50                   	push   eax
c002bd6e:	09 fe                	or     esi,edi
c002bd70:	6a 01                	push   0x1
c002bd72:	89 f0                	mov    eax,esi
c002bd74:	0f b6 f0             	movzx  esi,al
c002bd77:	c1 e6 06             	shl    esi,0x6
c002bd7a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002bd82:	50                   	push   eax
c002bd83:	55                   	push   ebp
c002bd84:	e8 2b f6 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bd89:	83 c4 10             	add    esp,0x10
c002bd8c:	a8 01                	test   al,0x1
c002bd8e:	74 02                	je     c002bd92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002bd90:	b3 07                	mov    bl,0x7
c002bd92:	a8 02                	test   al,0x2
c002bd94:	74 02                	je     c002bd98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002bd96:	b3 03                	mov    bl,0x3
c002bd98:	a8 04                	test   al,0x4
c002bd9a:	74 02                	je     c002bd9e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002bd9c:	b3 14                	mov    bl,0x14
c002bd9e:	a8 08                	test   al,0x8
c002bda0:	74 02                	je     c002bda4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002bda2:	b3 03                	mov    bl,0x3
c002bda4:	a8 10                	test   al,0x10
c002bda6:	74 02                	je     c002bdaa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002bda8:	b3 15                	mov    bl,0x15
c002bdaa:	a8 20                	test   al,0x20
c002bdac:	74 02                	je     c002bdb0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002bdae:	b3 03                	mov    bl,0x3
c002bdb0:	a8 40                	test   al,0x40
c002bdb2:	74 02                	je     c002bdb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002bdb4:	b3 16                	mov    bl,0x16
c002bdb6:	a8 80                	test   al,0x80
c002bdb8:	74 18                	je     c002bdd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdba:	b3 0d                	mov    bl,0xd
c002bdbc:	eb 14                	jmp    c002bdd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdbe:	83 ff 03             	cmp    edi,0x3
c002bdc1:	74 0d                	je     c002bdd0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002bdc3:	83 ff 04             	cmp    edi,0x4
c002bdc6:	75 0a                	jne    c002bdd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdc8:	b3 08                	mov    bl,0x8
c002bdca:	eb 06                	jmp    c002bdd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdcc:	b3 13                	mov    bl,0x13
c002bdce:	eb 02                	jmp    c002bdd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bdd0:	b3 17                	mov    bl,0x17
c002bdd2:	83 c4 1c             	add    esp,0x1c
c002bdd5:	88 d8                	mov    al,bl
c002bdd7:	5b                   	pop    ebx
c002bdd8:	5e                   	pop    esi
c002bdd9:	5f                   	pop    edi
c002bdda:	5d                   	pop    ebp
c002bddb:	c3                   	ret    

c002bddc <IDE::polling(unsigned char, unsigned int)>:
c002bddc:	57                   	push   edi
c002bddd:	56                   	push   esi
c002bdde:	53                   	push   ebx
c002bddf:	bb 04 00 00 00       	mov    ebx,0x4
c002bde4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002bde8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002bded:	52                   	push   edx
c002bdee:	6a 0c                	push   0xc
c002bdf0:	56                   	push   esi
c002bdf1:	57                   	push   edi
c002bdf2:	e8 bd f5 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002bdf7:	83 c4 10             	add    esp,0x10
c002bdfa:	4b                   	dec    ebx
c002bdfb:	75 f0                	jne    c002bded <IDE::polling(unsigned char, unsigned int)+0x11>
c002bdfd:	bb a0 86 01 00       	mov    ebx,0x186a0
c002be02:	50                   	push   eax
c002be03:	6a 0c                	push   0xc
c002be05:	56                   	push   esi
c002be06:	57                   	push   edi
c002be07:	e8 a8 f5 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002be0c:	83 c4 10             	add    esp,0x10
c002be0f:	a8 01                	test   al,0x1
c002be11:	75 17                	jne    c002be2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002be13:	a8 20                	test   al,0x20
c002be15:	75 0f                	jne    c002be26 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002be17:	4b                   	dec    ebx
c002be18:	74 10                	je     c002be2a <IDE::polling(unsigned char, unsigned int)+0x4e>
c002be1a:	a8 80                	test   al,0x80
c002be1c:	75 e4                	jne    c002be02 <IDE::polling(unsigned char, unsigned int)+0x26>
c002be1e:	a8 08                	test   al,0x8
c002be20:	74 e0                	je     c002be02 <IDE::polling(unsigned char, unsigned int)+0x26>
c002be22:	31 c0                	xor    eax,eax
c002be24:	eb 06                	jmp    c002be2c <IDE::polling(unsigned char, unsigned int)+0x50>
c002be26:	b0 01                	mov    al,0x1
c002be28:	eb 02                	jmp    c002be2c <IDE::polling(unsigned char, unsigned int)+0x50>
c002be2a:	b0 02                	mov    al,0x2
c002be2c:	5b                   	pop    ebx
c002be2d:	5e                   	pop    esi
c002be2e:	5f                   	pop    edi
c002be2f:	c3                   	ret    

c002be30 <SATABus::close(int, int, void*)>:
c002be30:	31 c0                	xor    eax,eax
c002be32:	c3                   	ret    
c002be33:	90                   	nop

c002be34 <SATABus::detect()>:
c002be34:	c3                   	ret    
c002be35:	90                   	nop

c002be36 <SATABus::SATABus()>:
c002be36:	83 ec 0c             	sub    esp,0xc
c002be39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be3d:	83 ec 08             	sub    esp,0x8
c002be40:	68 20 40 03 c0       	push   0xc0034020
c002be45:	50                   	push   eax
c002be46:	e8 11 fb fe ff       	call   c001b95c <HardDiskController::HardDiskController(char const*)>
c002be4b:	83 c4 10             	add    esp,0x10
c002be4e:	ba 4c 40 03 c0       	mov    edx,0xc003404c
c002be53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be57:	89 10                	mov    DWORD PTR [eax],edx
c002be59:	83 ec 0c             	sub    esp,0xc
c002be5c:	6a 50                	push   0x50
c002be5e:	e8 2c ab fe ff       	call   c001698f <Phys::allocateContiguousPages(int)>
c002be63:	83 c4 10             	add    esp,0x10
c002be66:	89 c2                	mov    edx,eax
c002be68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be6c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002be72:	83 ec 0c             	sub    esp,0xc
c002be75:	6a 50                	push   0x50
c002be77:	e8 91 c2 fe ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c002be7c:	83 c4 10             	add    esp,0x10
c002be7f:	89 c2                	mov    edx,eax
c002be81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002be85:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002be8b:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c002be90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002be94:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002be9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002be9e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002bea4:	83 ec 0c             	sub    esp,0xc
c002bea7:	6a 03                	push   0x3
c002bea9:	6a 50                	push   0x50
c002beab:	51                   	push   ecx
c002beac:	52                   	push   edx
c002bead:	50                   	push   eax
c002beae:	e8 67 cb fe ff       	call   c0018a1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002beb3:	83 c4 20             	add    esp,0x20
c002beb6:	90                   	nop
c002beb7:	83 c4 0c             	add    esp,0xc
c002beba:	c3                   	ret    
c002bebb:	90                   	nop

c002bebc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002bebc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bec0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002bec3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002bec6:	09 c2                	or     edx,eax
c002bec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002becc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002bed2:	8b 08                	mov    ecx,DWORD PTR [eax]
c002bed4:	31 c0                	xor    eax,eax
c002bed6:	c1 e9 08             	shr    ecx,0x8
c002bed9:	83 e1 0f             	and    ecx,0xf
c002bedc:	39 c8                	cmp    eax,ecx
c002bede:	74 0a                	je     c002beea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002bee0:	f6 c2 01             	test   dl,0x1
c002bee3:	74 08                	je     c002beed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002bee5:	d1 ea                	shr    edx,1
c002bee7:	40                   	inc    eax
c002bee8:	eb f2                	jmp    c002bedc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002beea:	83 c8 ff             	or     eax,0xffffffff
c002beed:	c3                   	ret    

c002beee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002beee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bef2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002bef5:	89 c2                	mov    edx,eax
c002bef7:	c1 ea 08             	shr    edx,0x8
c002befa:	83 e2 0f             	and    edx,0xf
c002befd:	4a                   	dec    edx
c002befe:	75 32                	jne    c002bf32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bf00:	83 e0 0f             	and    eax,0xf
c002bf03:	83 f8 03             	cmp    eax,0x3
c002bf06:	75 2a                	jne    c002bf32 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002bf08:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002bf0b:	b8 02 00 00 00       	mov    eax,0x2
c002bf10:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002bf16:	74 1c                	je     c002bf34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bf18:	b8 04 00 00 00       	mov    eax,0x4
c002bf1d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002bf23:	74 0f                	je     c002bf34 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bf25:	31 c0                	xor    eax,eax
c002bf27:	83 fa 03             	cmp    edx,0x3
c002bf2a:	0f 94 c0             	sete   al
c002bf2d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bf31:	c3                   	ret    
c002bf32:	31 c0                	xor    eax,eax
c002bf34:	c3                   	ret    
c002bf35:	90                   	nop

c002bf36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bf36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bf3a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf3d:	0f ba e2 0f          	bt     edx,0xf
c002bf41:	72 f7                	jb     c002bf3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002bf43:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf46:	83 ca 10             	or     edx,0x10
c002bf49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf4f:	83 ca 01             	or     edx,0x1
c002bf52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf55:	c3                   	ret    

c002bf56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002bf56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bf5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf5d:	83 e2 fe             	and    edx,0xfffffffe
c002bf60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf66:	83 e2 ef             	and    edx,0xffffffef
c002bf69:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bf6c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf6f:	0f ba e2 0e          	bt     edx,0xe
c002bf73:	72 f7                	jb     c002bf6c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bf75:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bf78:	0f ba e2 0f          	bt     edx,0xf
c002bf7c:	72 ee                	jb     c002bf6c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bf7e:	c3                   	ret    
c002bf7f:	90                   	nop

c002bf80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002bf80:	55                   	push   ebp
c002bf81:	57                   	push   edi
c002bf82:	56                   	push   esi
c002bf83:	53                   	push   ebx
c002bf84:	83 ec 1c             	sub    esp,0x1c
c002bf87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002bf8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002bf8f:	53                   	push   ebx
c002bf90:	56                   	push   esi
c002bf91:	e8 c0 ff ff ff       	call   c002bf56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002bf96:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002bf9a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bfa0:	83 ec 0c             	sub    esp,0xc
c002bfa3:	c1 e5 0a             	shl    ebp,0xa
c002bfa6:	01 e8                	add    eax,ebp
c002bfa8:	89 03                	mov    DWORD PTR [ebx],eax
c002bfaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c002bfac:	68 00 04 00 00       	push   0x400
c002bfb1:	6a 00                	push   0x0
c002bfb3:	50                   	push   eax
c002bfb4:	e8 37 45 fd ff       	call   c00004f0 <memset>
c002bfb9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002bfbf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002bfc3:	01 e8                	add    eax,ebp
c002bfc5:	83 c4 1c             	add    esp,0x1c
c002bfc8:	89 03                	mov    DWORD PTR [ebx],eax
c002bfca:	c1 e2 08             	shl    edx,0x8
c002bfcd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002bfd4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002bfda:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bfe0:	01 f8                	add    eax,edi
c002bfe2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bfe5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002bfe8:	68 00 01 00 00       	push   0x100
c002bfed:	6a 00                	push   0x0
c002bfef:	50                   	push   eax
c002bff0:	e8 fb 44 fd ff       	call   c00004f0 <memset>
c002bff5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002bffb:	01 fa                	add    edx,edi
c002bffd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002c001:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002c004:	c1 e7 0d             	shl    edi,0xd
c002c007:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002c00e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002c014:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002c01a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002c01e:	31 ff                	xor    edi,edi
c002c020:	83 c4 10             	add    esp,0x10
c002c023:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002c029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002c02d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002c033:	83 c5 20             	add    ebp,0x20
c002c036:	01 f8                	add    eax,edi
c002c038:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002c03b:	52                   	push   edx
c002c03c:	68 00 01 00 00       	push   0x100
c002c041:	6a 00                	push   0x0
c002c043:	50                   	push   eax
c002c044:	e8 a7 44 fd ff       	call   c00004f0 <memset>
c002c049:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002c04d:	83 c4 10             	add    esp,0x10
c002c050:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002c056:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002c05d:	01 f8                	add    eax,edi
c002c05f:	81 c7 00 01 00 00    	add    edi,0x100
c002c065:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002c068:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002c06e:	75 b3                	jne    c002c023 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002c070:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002c077:	50                   	push   eax
c002c078:	50                   	push   eax
c002c079:	53                   	push   ebx
c002c07a:	56                   	push   esi
c002c07b:	e8 b6 fe ff ff       	call   c002bf36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002c080:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002c087:	83 c4 2c             	add    esp,0x2c
c002c08a:	5b                   	pop    ebx
c002c08b:	5e                   	pop    esi
c002c08c:	5f                   	pop    edi
c002c08d:	5d                   	pop    ebp
c002c08e:	c3                   	ret    
c002c08f:	90                   	nop

c002c090 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002c090:	55                   	push   ebp
c002c091:	57                   	push   edi
c002c092:	56                   	push   esi
c002c093:	53                   	push   ebx
c002c094:	31 db                	xor    ebx,ebx
c002c096:	83 ec 0c             	sub    esp,0xc
c002c099:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c09d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002c0a1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002c0a4:	f7 c7 01 00 00 00    	test   edi,0x1
c002c0aa:	74 7a                	je     c002c126 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002c0ac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002c0b0:	89 d8                	mov    eax,ebx
c002c0b2:	c1 e0 07             	shl    eax,0x7
c002c0b5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002c0bc:	55                   	push   ebp
c002c0bd:	56                   	push   esi
c002c0be:	e8 2b fe ff ff       	call   c002beee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002c0c3:	5a                   	pop    edx
c002c0c4:	83 f8 01             	cmp    eax,0x1
c002c0c7:	59                   	pop    ecx
c002c0c8:	75 21                	jne    c002c0eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002c0ca:	50                   	push   eax
c002c0cb:	53                   	push   ebx
c002c0cc:	55                   	push   ebp
c002c0cd:	56                   	push   esi
c002c0ce:	e8 ad fe ff ff       	call   c002bf80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002c0d3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002c0da:	e8 d8 a4 fe ff       	call   c00165b7 <malloc>
c002c0df:	89 c5                	mov    ebp,eax
c002c0e1:	89 04 24             	mov    DWORD PTR [esp],eax
c002c0e4:	e8 bb 10 00 00       	call   c002d1a4 <SATA::SATA()>
c002c0e9:	eb 24                	jmp    c002c10f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002c0eb:	83 f8 04             	cmp    eax,0x4
c002c0ee:	75 36                	jne    c002c126 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002c0f0:	51                   	push   ecx
c002c0f1:	53                   	push   ebx
c002c0f2:	55                   	push   ebp
c002c0f3:	56                   	push   esi
c002c0f4:	e8 87 fe ff ff       	call   c002bf80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002c0f9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002c100:	e8 b2 a4 fe ff       	call   c00165b7 <malloc>
c002c105:	89 c5                	mov    ebp,eax
c002c107:	89 04 24             	mov    DWORD PTR [esp],eax
c002c10a:	e8 2b 18 00 00       	call   c002d93a <SATAPI::SATAPI()>
c002c10f:	58                   	pop    eax
c002c110:	5a                   	pop    edx
c002c111:	55                   	push   ebp
c002c112:	56                   	push   esi
c002c113:	e8 ea f4 fe ff       	call   c001b602 <Device::addChild(Device*)>
c002c118:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002c11b:	56                   	push   esi
c002c11c:	6a 00                	push   0x0
c002c11e:	53                   	push   ebx
c002c11f:	55                   	push   ebp
c002c120:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002c123:	83 c4 20             	add    esp,0x20
c002c126:	d1 ef                	shr    edi,1
c002c128:	43                   	inc    ebx
c002c129:	83 fb 20             	cmp    ebx,0x20
c002c12c:	0f 85 72 ff ff ff    	jne    c002c0a4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002c132:	83 c4 0c             	add    esp,0xc
c002c135:	5b                   	pop    ebx
c002c136:	5e                   	pop    esi
c002c137:	5f                   	pop    edi
c002c138:	5d                   	pop    ebp
c002c139:	c3                   	ret    

c002c13a <SATABus::open(int, int, void*)>:
c002c13a:	53                   	push   ebx
c002c13b:	83 ec 08             	sub    esp,0x8
c002c13e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c142:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002c148:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c14e:	e8 a1 93 ff ff       	call   c00254f4 <KeDisablePreemption()>
c002c153:	52                   	push   edx
c002c154:	52                   	push   edx
c002c155:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002c15b:	53                   	push   ebx
c002c15c:	e8 2f ff ff ff       	call   c002c090 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002c161:	e8 b6 93 ff ff       	call   c002551c <KeRestorePreemption()>
c002c166:	31 c0                	xor    eax,eax
c002c168:	83 c4 18             	add    esp,0x18
c002c16b:	5b                   	pop    ebx
c002c16c:	c3                   	ret    
c002c16d:	90                   	nop

c002c16e <ATA::close(int, int, void*)>:
c002c16e:	83 ec 0c             	sub    esp,0xc
c002c171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c175:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c17b:	85 c0                	test   eax,eax
c002c17d:	74 0c                	je     c002c18b <ATA::close(int, int, void*)+0x1d>
c002c17f:	83 ec 0c             	sub    esp,0xc
c002c182:	8b 10                	mov    edx,DWORD PTR [eax]
c002c184:	50                   	push   eax
c002c185:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c188:	83 c4 10             	add    esp,0x10
c002c18b:	31 c0                	xor    eax,eax
c002c18d:	83 c4 0c             	add    esp,0xc
c002c190:	c3                   	ret    
c002c191:	90                   	nop

c002c192 <ATA::powerSaving(PowerSavingLevel)>:
c002c192:	c3                   	ret    
c002c193:	90                   	nop

c002c194 <ATA::ATA()>:
c002c194:	83 ec 0c             	sub    esp,0xc
c002c197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c19b:	83 ec 04             	sub    esp,0x4
c002c19e:	68 00 02 00 00       	push   0x200
c002c1a3:	68 25 41 03 c0       	push   0xc0034125
c002c1a8:	50                   	push   eax
c002c1a9:	e8 38 f8 fe ff       	call   c001b9e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c1ae:	83 c4 10             	add    esp,0x10
c002c1b1:	ba 8c 40 03 c0       	mov    edx,0xc003408c
c002c1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c1ba:	89 10                	mov    DWORD PTR [eax],edx
c002c1bc:	90                   	nop
c002c1bd:	83 c4 0c             	add    esp,0xc
c002c1c0:	c3                   	ret    
c002c1c1:	90                   	nop

c002c1c2 <ATA::flush(bool)>:
c002c1c2:	53                   	push   ebx
c002c1c3:	83 ec 08             	sub    esp,0x8
c002c1c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c1ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002c1cf:	83 f8 01             	cmp    eax,0x1
c002c1d2:	19 c0                	sbb    eax,eax
c002c1d4:	83 e0 fd             	and    eax,0xfffffffd
c002c1d7:	05 ea 00 00 00       	add    eax,0xea
c002c1dc:	50                   	push   eax
c002c1dd:	6a 07                	push   0x7
c002c1df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c1e6:	50                   	push   eax
c002c1e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c1ed:	e8 02 f1 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c1f2:	83 c4 0c             	add    esp,0xc
c002c1f5:	6a 00                	push   0x0
c002c1f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c1fe:	50                   	push   eax
c002c1ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c205:	e8 d2 fb ff ff       	call   c002bddc <IDE::polling(unsigned char, unsigned int)>
c002c20a:	83 c4 18             	add    esp,0x18
c002c20d:	5b                   	pop    ebx
c002c20e:	c3                   	ret    
c002c20f:	90                   	nop

c002c210 <ATA::readyForCommand()>:
c002c210:	56                   	push   esi
c002c211:	53                   	push   ebx
c002c212:	53                   	push   ebx
c002c213:	31 db                	xor    ebx,ebx
c002c215:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c219:	51                   	push   ecx
c002c21a:	6a 0c                	push   0xc
c002c21c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c223:	50                   	push   eax
c002c224:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c22a:	e8 85 f1 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002c22f:	83 c4 10             	add    esp,0x10
c002c232:	a8 88                	test   al,0x88
c002c234:	74 1f                	je     c002c255 <ATA::readyForCommand()+0x45>
c002c236:	43                   	inc    ebx
c002c237:	83 fb 63             	cmp    ebx,0x63
c002c23a:	7e dd                	jle    c002c219 <ATA::readyForCommand()+0x9>
c002c23c:	83 ec 0c             	sub    esp,0xc
c002c23f:	6a 0a                	push   0xa
c002c241:	e8 1e 97 ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002c246:	83 c4 10             	add    esp,0x10
c002c249:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002c24f:	75 c8                	jne    c002c219 <ATA::readyForCommand()+0x9>
c002c251:	31 c0                	xor    eax,eax
c002c253:	eb 02                	jmp    c002c257 <ATA::readyForCommand()+0x47>
c002c255:	b0 01                	mov    al,0x1
c002c257:	5a                   	pop    edx
c002c258:	5b                   	pop    ebx
c002c259:	5e                   	pop    esi
c002c25a:	c3                   	ret    
c002c25b:	90                   	nop

c002c25c <ATA::access(unsigned long long, int, void*, bool)>:
c002c25c:	55                   	push   ebp
c002c25d:	57                   	push   edi
c002c25e:	56                   	push   esi
c002c25f:	53                   	push   ebx
c002c260:	83 ec 2c             	sub    esp,0x2c
c002c263:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002c267:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002c26b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c26f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002c273:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002c277:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002c27b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002c27f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002c285:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c289:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c28f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002c293:	c1 e0 06             	shl    eax,0x6
c002c296:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002c29e:	74 5d                	je     c002c2fd <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002c2a0:	89 fa                	mov    edx,edi
c002c2a2:	89 f0                	mov    eax,esi
c002c2a4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002c2a8:	c1 ea 1c             	shr    edx,0x1c
c002c2ab:	89 d1                	mov    ecx,edx
c002c2ad:	09 c1                	or     ecx,eax
c002c2af:	74 25                	je     c002c2d6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002c2b1:	31 ed                	xor    ebp,ebp
c002c2b3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002c2ba:	89 fa                	mov    edx,edi
c002c2bc:	89 f0                	mov    eax,esi
c002c2be:	0f ad d0             	shrd   eax,edx,cl
c002c2c1:	d3 ea                	shr    edx,cl
c002c2c3:	f6 c1 20             	test   cl,0x20
c002c2c6:	74 02                	je     c002c2ca <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002c2c8:	89 d0                	mov    eax,edx
c002c2ca:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002c2ce:	45                   	inc    ebp
c002c2cf:	83 fd 06             	cmp    ebp,0x6
c002c2d2:	75 df                	jne    c002c2b3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002c2d4:	eb 76                	jmp    c002c34c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002c2d6:	89 f0                	mov    eax,esi
c002c2d8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002c2dd:	89 fa                	mov    edx,edi
c002c2df:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c2e6:	0f ac d0 10          	shrd   eax,edx,0x10
c002c2ea:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c2ef:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002c2f3:	c1 ee 18             	shr    esi,0x18
c002c2f6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002c2fb:	eb 56                	jmp    c002c353 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002c2fd:	6a 00                	push   0x0
c002c2ff:	6a 3f                	push   0x3f
c002c301:	57                   	push   edi
c002c302:	56                   	push   esi
c002c303:	e8 c8 2a 00 00       	call   c002edd0 <__umoddi3>
c002c308:	83 c4 10             	add    esp,0x10
c002c30b:	40                   	inc    eax
c002c30c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002c310:	6a 00                	push   0x0
c002c312:	68 f0 03 00 00       	push   0x3f0
c002c317:	57                   	push   edi
c002c318:	56                   	push   esi
c002c319:	e8 b2 29 00 00       	call   c002ecd0 <__udivdi3>
c002c31e:	83 c4 10             	add    esp,0x10
c002c321:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002c326:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c32d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c332:	6a 00                	push   0x0
c002c334:	6a 3f                	push   0x3f
c002c336:	57                   	push   edi
c002c337:	56                   	push   esi
c002c338:	e8 93 29 00 00       	call   c002ecd0 <__udivdi3>
c002c33d:	83 c4 10             	add    esp,0x10
c002c340:	83 e0 0f             	and    eax,0xf
c002c343:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002c348:	89 c6                	mov    esi,eax
c002c34a:	eb 07                	jmp    c002c353 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002c34c:	31 f6                	xor    esi,esi
c002c34e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002c353:	bf 01 00 00 00       	mov    edi,0x1
c002c358:	50                   	push   eax
c002c359:	6a 00                	push   0x0
c002c35b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c362:	50                   	push   eax
c002c363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002c367:	e8 90 f1 ff ff       	call   c002b4fc <IDE::enableIRQs(unsigned char, bool)>
c002c36c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c36f:	e8 9c fe ff ff       	call   c002c210 <ATA::readyForCommand()>
c002c374:	83 c4 10             	add    esp,0x10
c002c377:	84 c0                	test   al,al
c002c379:	0f 84 69 02 00 00    	je     c002c5e8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c37f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c385:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c38b:	c1 e0 04             	shl    eax,0x4
c002c38e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002c395:	09 c6                	or     esi,eax
c002c397:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002c39c:	75 05                	jne    c002c3a3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002c39e:	83 ce a0             	or     esi,0xffffffa0
c002c3a1:	eb 03                	jmp    c002c3a6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002c3a3:	83 ce e0             	or     esi,0xffffffe0
c002c3a6:	89 f0                	mov    eax,esi
c002c3a8:	0f b6 f0             	movzx  esi,al
c002c3ab:	56                   	push   esi
c002c3ac:	6a 06                	push   0x6
c002c3ae:	51                   	push   ecx
c002c3af:	52                   	push   edx
c002c3b0:	e8 3f ef ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c3b5:	83 c4 10             	add    esp,0x10
c002c3b8:	6a 00                	push   0x0
c002c3ba:	6a 01                	push   0x1
c002c3bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c3c3:	50                   	push   eax
c002c3c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c3ca:	e8 25 ef ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c3cf:	83 c4 10             	add    esp,0x10
c002c3d2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002c3d7:	83 f8 02             	cmp    eax,0x2
c002c3da:	75 6e                	jne    c002c44a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002c3dc:	6a 00                	push   0x0
c002c3de:	6a 08                	push   0x8
c002c3e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c3e7:	50                   	push   eax
c002c3e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c3ee:	e8 01 ef ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c3f3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002c3f8:	50                   	push   eax
c002c3f9:	6a 09                	push   0x9
c002c3fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c402:	50                   	push   eax
c002c403:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c409:	e8 e6 ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c40e:	83 c4 20             	add    esp,0x20
c002c411:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002c416:	50                   	push   eax
c002c417:	6a 0a                	push   0xa
c002c419:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c420:	50                   	push   eax
c002c421:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c427:	e8 c8 ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c42c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c431:	50                   	push   eax
c002c432:	6a 0b                	push   0xb
c002c434:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c43b:	50                   	push   eax
c002c43c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c442:	e8 ad ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c447:	83 c4 20             	add    esp,0x20
c002c44a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c44f:	50                   	push   eax
c002c450:	6a 02                	push   0x2
c002c452:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c459:	50                   	push   eax
c002c45a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c460:	e8 8f ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c465:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c46a:	50                   	push   eax
c002c46b:	6a 03                	push   0x3
c002c46d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c474:	50                   	push   eax
c002c475:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c47b:	e8 74 ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c480:	83 c4 20             	add    esp,0x20
c002c483:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c488:	50                   	push   eax
c002c489:	6a 04                	push   0x4
c002c48b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c492:	50                   	push   eax
c002c493:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c499:	e8 56 ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c49e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c4a3:	50                   	push   eax
c002c4a4:	6a 05                	push   0x5
c002c4a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c4ad:	50                   	push   eax
c002c4ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c4b4:	e8 3b ee ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4b9:	83 c4 20             	add    esp,0x20
c002c4bc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c4c1:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002c4c6:	74 11                	je     c002c4d9 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002c4c8:	b8 30 00 00 00       	mov    eax,0x30
c002c4cd:	83 fa 02             	cmp    edx,0x2
c002c4d0:	75 16                	jne    c002c4e8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c4d2:	b8 34 00 00 00       	mov    eax,0x34
c002c4d7:	eb 0f                	jmp    c002c4e8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c4d9:	b8 20 00 00 00       	mov    eax,0x20
c002c4de:	83 fa 02             	cmp    edx,0x2
c002c4e1:	75 05                	jne    c002c4e8 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c4e3:	b8 24 00 00 00       	mov    eax,0x24
c002c4e8:	50                   	push   eax
c002c4e9:	6a 07                	push   0x7
c002c4eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c4f2:	50                   	push   eax
c002c4f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c4f9:	e8 f6 ed ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4fe:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c502:	83 c4 10             	add    esp,0x10
c002c505:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002c50a:	85 f6                	test   esi,esi
c002c50c:	0f 84 b3 00 00 00    	je     c002c5c5 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002c512:	50                   	push   eax
c002c513:	6a 01                	push   0x1
c002c515:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c51c:	50                   	push   eax
c002c51d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c523:	e8 b4 f8 ff ff       	call   c002bddc <IDE::polling(unsigned char, unsigned int)>
c002c528:	83 c4 10             	add    esp,0x10
c002c52b:	0f b6 f8             	movzx  edi,al
c002c52e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c534:	85 ff                	test   edi,edi
c002c536:	74 1d                	je     c002c555 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002c538:	57                   	push   edi
c002c539:	0f b6 d2             	movzx  edx,dl
c002c53c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c543:	50                   	push   eax
c002c544:	52                   	push   edx
c002c545:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c54b:	e8 d2 f7 ff ff       	call   c002bd22 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c550:	e9 90 00 00 00       	jmp    c002c5e5 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002c555:	85 ed                	test   ebp,ebp
c002c557:	74 3b                	je     c002c594 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002c559:	31 c9                	xor    ecx,ecx
c002c55b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c55f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002c563:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002c567:	50                   	push   eax
c002c568:	50                   	push   eax
c002c569:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c570:	50                   	push   eax
c002c571:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c577:	e8 66 ed ff ff       	call   c002b2e2 <IDE::getBase(unsigned char)>
c002c57c:	89 c2                	mov    edx,eax
c002c57e:	89 f8                	mov    eax,edi
c002c580:	66 ef                	out    dx,ax
c002c582:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002c586:	83 c4 10             	add    esp,0x10
c002c589:	41                   	inc    ecx
c002c58a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002c590:	75 c9                	jne    c002c55b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002c592:	eb 23                	jmp    c002c5b7 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002c594:	0f b6 d2             	movzx  edx,dl
c002c597:	51                   	push   ecx
c002c598:	51                   	push   ecx
c002c599:	52                   	push   edx
c002c59a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c5a0:	e8 3d ed ff ff       	call   c002b2e2 <IDE::getBase(unsigned char)>
c002c5a5:	b9 00 01 00 00       	mov    ecx,0x100
c002c5aa:	89 c2                	mov    edx,eax
c002c5ac:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c5b0:	fc                   	cld    
c002c5b1:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c5b4:	83 c4 10             	add    esp,0x10
c002c5b7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c5bf:	4e                   	dec    esi
c002c5c0:	e9 45 ff ff ff       	jmp    c002c50a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002c5c5:	31 ff                	xor    edi,edi
c002c5c7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c5cc:	74 1a                	je     c002c5e8 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c5ce:	50                   	push   eax
c002c5cf:	50                   	push   eax
c002c5d0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002c5d5:	83 f8 02             	cmp    eax,0x2
c002c5d8:	0f 94 c0             	sete   al
c002c5db:	0f b6 c0             	movzx  eax,al
c002c5de:	50                   	push   eax
c002c5df:	53                   	push   ebx
c002c5e0:	e8 dd fb ff ff       	call   c002c1c2 <ATA::flush(bool)>
c002c5e5:	83 c4 10             	add    esp,0x10
c002c5e8:	83 c4 2c             	add    esp,0x2c
c002c5eb:	89 f8                	mov    eax,edi
c002c5ed:	5b                   	pop    ebx
c002c5ee:	5e                   	pop    esi
c002c5ef:	5f                   	pop    edi
c002c5f0:	5d                   	pop    ebp
c002c5f1:	c3                   	ret    

c002c5f2 <ATA::detectCHS()>:
c002c5f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c5f6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c5fc:	c1 e0 06             	shl    eax,0x6
c002c5ff:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c605:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c60f:	c7 44 24 04 70 40 03 c0 	mov    DWORD PTR [esp+0x4],0xc0034070
c002c617:	e9 62 41 ff ff       	jmp    c002077e <KePanic(char const*)>

c002c61c <ATA::open(int, int, void*)>:
c002c61c:	53                   	push   ebx
c002c61d:	83 ec 08             	sub    esp,0x8
c002c620:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c624:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c628:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c62c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c632:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c638:	c1 e0 06             	shl    eax,0x6
c002c63b:	01 d0                	add    eax,edx
c002c63d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c644:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c64a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c651:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c65b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c661:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c668:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c66f:	75 0c                	jne    c002c67d <ATA::open(int, int, void*)+0x61>
c002c671:	83 ec 0c             	sub    esp,0xc
c002c674:	53                   	push   ebx
c002c675:	e8 78 ff ff ff       	call   c002c5f2 <ATA::detectCHS()>
c002c67a:	83 c4 10             	add    esp,0x10
c002c67d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c683:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c689:	c1 e0 06             	shl    eax,0x6
c002c68c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c693:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c69d:	d1 e8                	shr    eax,1
c002c69f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c6a5:	6a 04                	push   0x4
c002c6a7:	6a 0c                	push   0xc
c002c6a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c6b0:	50                   	push   eax
c002c6b1:	52                   	push   edx
c002c6b2:	e8 3d ec ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c6b7:	90                   	nop
c002c6b8:	90                   	nop
c002c6b9:	6a 00                	push   0x0
c002c6bb:	6a 0c                	push   0xc
c002c6bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c6c4:	50                   	push   eax
c002c6c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c6cb:	e8 24 ec ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c6d0:	83 c4 14             	add    esp,0x14
c002c6d3:	53                   	push   ebx
c002c6d4:	e8 75 f3 fe ff       	call   c001ba4e <PhysicalDisk::startCache()>
c002c6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c6dc:	e8 a9 05 ff ff       	call   c001cc8a <createPartitionsForDisk(PhysicalDisk*)>
c002c6e1:	31 c0                	xor    eax,eax
c002c6e3:	83 c4 18             	add    esp,0x18
c002c6e6:	5b                   	pop    ebx
c002c6e7:	c3                   	ret    

c002c6e8 <combineCharAndColour(char, unsigned char)>:
c002c6e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c6ed:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c6f3:	c1 e0 08             	shl    eax,0x8
c002c6f6:	09 d0                	or     eax,edx
c002c6f8:	c3                   	ret    

c002c6f9 <combineColours(unsigned char, unsigned char)>:
c002c6f9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c6fe:	c1 e0 04             	shl    eax,0x4
c002c701:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c705:	c3                   	ret    

c002c706 <ATA::read(unsigned long long, int, void*)>:
c002c706:	55                   	push   ebp
c002c707:	57                   	push   edi
c002c708:	56                   	push   esi
c002c709:	be 04 00 00 00       	mov    esi,0x4
c002c70e:	53                   	push   ebx
c002c70f:	83 ec 0c             	sub    esp,0xc
c002c712:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c716:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c71a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c71d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c721:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c725:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c72b:	0f 87 a1 01 00 00    	ja     c002c8d2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c731:	be 06 00 00 00       	mov    esi,0x6
c002c736:	85 c9                	test   ecx,ecx
c002c738:	0f 84 94 01 00 00    	je     c002c8d2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c73e:	55                   	push   ebp
c002c73f:	55                   	push   ebp
c002c740:	6a 00                	push   0x0
c002c742:	51                   	push   ecx
c002c743:	53                   	push   ebx
c002c744:	52                   	push   edx
c002c745:	50                   	push   eax
c002c746:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c74a:	e8 0d fb ff ff       	call   c002c25c <ATA::access(unsigned long long, int, void*, bool)>
c002c74f:	83 c4 20             	add    esp,0x20
c002c752:	89 c6                	mov    esi,eax
c002c754:	85 c0                	test   eax,eax
c002c756:	0f 85 71 01 00 00    	jne    c002c8cd <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c75c:	03 1d b4 1b 04 c0    	add    ebx,DWORD PTR ds:0xc0041bb4
c002c762:	89 da                	mov    edx,ebx
c002c764:	50                   	push   eax
c002c765:	bd 10 27 00 00       	mov    ebp,0x2710
c002c76a:	50                   	push   eax
c002c76b:	89 1d b4 1b 04 c0    	mov    DWORD PTR ds:0xc0041bb4,ebx
c002c771:	6a 0f                	push   0xf
c002c773:	6a 00                	push   0x0
c002c775:	e8 7f ff ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002c77a:	59                   	pop    ecx
c002c77b:	b9 0a 00 00 00       	mov    ecx,0xa
c002c780:	5b                   	pop    ebx
c002c781:	0f b6 d8             	movzx  ebx,al
c002c784:	89 d0                	mov    eax,edx
c002c786:	53                   	push   ebx
c002c787:	99                   	cdq    
c002c788:	f7 fd                	idiv   ebp
c002c78a:	99                   	cdq    
c002c78b:	f7 f9                	idiv   ecx
c002c78d:	83 c2 30             	add    edx,0x30
c002c790:	0f b6 d2             	movzx  edx,dl
c002c793:	52                   	push   edx
c002c794:	e8 4f ff ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c799:	5f                   	pop    edi
c002c79a:	bf e8 03 00 00       	mov    edi,0x3e8
c002c79f:	5a                   	pop    edx
c002c7a0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c7a6:	53                   	push   ebx
c002c7a7:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c7ac:	99                   	cdq    
c002c7ad:	f7 ff                	idiv   edi
c002c7af:	99                   	cdq    
c002c7b0:	f7 f9                	idiv   ecx
c002c7b2:	8d 42 30             	lea    eax,[edx+0x30]
c002c7b5:	0f b6 c0             	movzx  eax,al
c002c7b8:	50                   	push   eax
c002c7b9:	e8 2a ff ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c7be:	5f                   	pop    edi
c002c7bf:	bf 64 00 00 00       	mov    edi,0x64
c002c7c4:	5a                   	pop    edx
c002c7c5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c7cb:	53                   	push   ebx
c002c7cc:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c7d1:	99                   	cdq    
c002c7d2:	f7 ff                	idiv   edi
c002c7d4:	99                   	cdq    
c002c7d5:	f7 f9                	idiv   ecx
c002c7d7:	8d 42 30             	lea    eax,[edx+0x30]
c002c7da:	0f b6 c0             	movzx  eax,al
c002c7dd:	50                   	push   eax
c002c7de:	e8 05 ff ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c7e3:	5a                   	pop    edx
c002c7e4:	5a                   	pop    edx
c002c7e5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c7eb:	53                   	push   ebx
c002c7ec:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c7f1:	99                   	cdq    
c002c7f2:	f7 f9                	idiv   ecx
c002c7f4:	99                   	cdq    
c002c7f5:	f7 f9                	idiv   ecx
c002c7f7:	8d 42 30             	lea    eax,[edx+0x30]
c002c7fa:	0f b6 c0             	movzx  eax,al
c002c7fd:	50                   	push   eax
c002c7fe:	e8 e5 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c803:	5a                   	pop    edx
c002c804:	5a                   	pop    edx
c002c805:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c80b:	53                   	push   ebx
c002c80c:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c811:	99                   	cdq    
c002c812:	f7 f9                	idiv   ecx
c002c814:	83 c2 30             	add    edx,0x30
c002c817:	0f b6 d2             	movzx  edx,dl
c002c81a:	52                   	push   edx
c002c81b:	e8 c8 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c820:	5a                   	pop    edx
c002c821:	5a                   	pop    edx
c002c822:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c828:	53                   	push   ebx
c002c829:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c82e:	99                   	cdq    
c002c82f:	f7 fd                	idiv   ebp
c002c831:	99                   	cdq    
c002c832:	f7 f9                	idiv   ecx
c002c834:	8d 42 30             	lea    eax,[edx+0x30]
c002c837:	0f b6 c0             	movzx  eax,al
c002c83a:	50                   	push   eax
c002c83b:	e8 a8 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c840:	5d                   	pop    ebp
c002c841:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c846:	5a                   	pop    edx
c002c847:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c84d:	53                   	push   ebx
c002c84e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c853:	99                   	cdq    
c002c854:	f7 fd                	idiv   ebp
c002c856:	99                   	cdq    
c002c857:	f7 f9                	idiv   ecx
c002c859:	8d 42 30             	lea    eax,[edx+0x30]
c002c85c:	0f b6 c0             	movzx  eax,al
c002c85f:	50                   	push   eax
c002c860:	e8 83 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c865:	5d                   	pop    ebp
c002c866:	5a                   	pop    edx
c002c867:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c86d:	53                   	push   ebx
c002c86e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c873:	99                   	cdq    
c002c874:	f7 ff                	idiv   edi
c002c876:	99                   	cdq    
c002c877:	f7 f9                	idiv   ecx
c002c879:	8d 42 30             	lea    eax,[edx+0x30]
c002c87c:	0f b6 c0             	movzx  eax,al
c002c87f:	50                   	push   eax
c002c880:	e8 63 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c885:	5f                   	pop    edi
c002c886:	5d                   	pop    ebp
c002c887:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c88d:	53                   	push   ebx
c002c88e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c893:	99                   	cdq    
c002c894:	f7 f9                	idiv   ecx
c002c896:	99                   	cdq    
c002c897:	f7 f9                	idiv   ecx
c002c899:	8d 42 30             	lea    eax,[edx+0x30]
c002c89c:	0f b6 c0             	movzx  eax,al
c002c89f:	50                   	push   eax
c002c8a0:	e8 43 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c8a5:	5a                   	pop    edx
c002c8a6:	5f                   	pop    edi
c002c8a7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c8ad:	53                   	push   ebx
c002c8ae:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c8b3:	99                   	cdq    
c002c8b4:	f7 f9                	idiv   ecx
c002c8b6:	83 c2 30             	add    edx,0x30
c002c8b9:	0f b6 d2             	movzx  edx,dl
c002c8bc:	52                   	push   edx
c002c8bd:	e8 26 fe ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c8c2:	83 c4 10             	add    esp,0x10
c002c8c5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c8cb:	eb 05                	jmp    c002c8d2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c8cd:	be 01 00 00 00       	mov    esi,0x1
c002c8d2:	83 c4 0c             	add    esp,0xc
c002c8d5:	89 f0                	mov    eax,esi
c002c8d7:	5b                   	pop    ebx
c002c8d8:	5e                   	pop    esi
c002c8d9:	5f                   	pop    edi
c002c8da:	5d                   	pop    ebp
c002c8db:	c3                   	ret    

c002c8dc <ATA::write(unsigned long long, int, void*)>:
c002c8dc:	55                   	push   ebp
c002c8dd:	57                   	push   edi
c002c8de:	56                   	push   esi
c002c8df:	be 04 00 00 00       	mov    esi,0x4
c002c8e4:	53                   	push   ebx
c002c8e5:	83 ec 0c             	sub    esp,0xc
c002c8e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c8ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c8f0:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c8f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c8f7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c8fb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c901:	0f 87 9c 01 00 00    	ja     c002caa3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c907:	be 06 00 00 00       	mov    esi,0x6
c002c90c:	85 c9                	test   ecx,ecx
c002c90e:	0f 84 8f 01 00 00    	je     c002caa3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c914:	55                   	push   ebp
c002c915:	55                   	push   ebp
c002c916:	6a 01                	push   0x1
c002c918:	51                   	push   ecx
c002c919:	53                   	push   ebx
c002c91a:	52                   	push   edx
c002c91b:	50                   	push   eax
c002c91c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c920:	e8 37 f9 ff ff       	call   c002c25c <ATA::access(unsigned long long, int, void*, bool)>
c002c925:	83 c4 20             	add    esp,0x20
c002c928:	89 c6                	mov    esi,eax
c002c92a:	85 c0                	test   eax,eax
c002c92c:	0f 85 6c 01 00 00    	jne    c002ca9e <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c932:	01 1d b0 1b 04 c0    	add    DWORD PTR ds:0xc0041bb0,ebx
c002c938:	bd 10 27 00 00       	mov    ebp,0x2710
c002c93d:	50                   	push   eax
c002c93e:	50                   	push   eax
c002c93f:	6a 0f                	push   0xf
c002c941:	6a 00                	push   0x0
c002c943:	e8 b1 fd ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002c948:	5a                   	pop    edx
c002c949:	0f b6 d8             	movzx  ebx,al
c002c94c:	59                   	pop    ecx
c002c94d:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c952:	53                   	push   ebx
c002c953:	b9 0a 00 00 00       	mov    ecx,0xa
c002c958:	99                   	cdq    
c002c959:	f7 fd                	idiv   ebp
c002c95b:	99                   	cdq    
c002c95c:	f7 f9                	idiv   ecx
c002c95e:	8d 42 30             	lea    eax,[edx+0x30]
c002c961:	0f b6 c0             	movzx  eax,al
c002c964:	50                   	push   eax
c002c965:	e8 7e fd ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c96a:	5f                   	pop    edi
c002c96b:	bf e8 03 00 00       	mov    edi,0x3e8
c002c970:	5a                   	pop    edx
c002c971:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c977:	53                   	push   ebx
c002c978:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c97d:	99                   	cdq    
c002c97e:	f7 ff                	idiv   edi
c002c980:	99                   	cdq    
c002c981:	f7 f9                	idiv   ecx
c002c983:	8d 42 30             	lea    eax,[edx+0x30]
c002c986:	0f b6 c0             	movzx  eax,al
c002c989:	50                   	push   eax
c002c98a:	e8 59 fd ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c98f:	5f                   	pop    edi
c002c990:	bf 64 00 00 00       	mov    edi,0x64
c002c995:	5a                   	pop    edx
c002c996:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c99c:	53                   	push   ebx
c002c99d:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9a2:	99                   	cdq    
c002c9a3:	f7 ff                	idiv   edi
c002c9a5:	99                   	cdq    
c002c9a6:	f7 f9                	idiv   ecx
c002c9a8:	8d 42 30             	lea    eax,[edx+0x30]
c002c9ab:	0f b6 c0             	movzx  eax,al
c002c9ae:	50                   	push   eax
c002c9af:	e8 34 fd ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c9b4:	5a                   	pop    edx
c002c9b5:	5a                   	pop    edx
c002c9b6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c9bc:	53                   	push   ebx
c002c9bd:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9c2:	99                   	cdq    
c002c9c3:	f7 f9                	idiv   ecx
c002c9c5:	99                   	cdq    
c002c9c6:	f7 f9                	idiv   ecx
c002c9c8:	8d 42 30             	lea    eax,[edx+0x30]
c002c9cb:	0f b6 c0             	movzx  eax,al
c002c9ce:	50                   	push   eax
c002c9cf:	e8 14 fd ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c9d4:	5a                   	pop    edx
c002c9d5:	5a                   	pop    edx
c002c9d6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c9dc:	53                   	push   ebx
c002c9dd:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9e2:	99                   	cdq    
c002c9e3:	f7 f9                	idiv   ecx
c002c9e5:	8d 42 30             	lea    eax,[edx+0x30]
c002c9e8:	0f b6 c0             	movzx  eax,al
c002c9eb:	50                   	push   eax
c002c9ec:	e8 f7 fc ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002c9f1:	5a                   	pop    edx
c002c9f2:	5a                   	pop    edx
c002c9f3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c9f9:	53                   	push   ebx
c002c9fa:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002c9ff:	99                   	cdq    
c002ca00:	f7 fd                	idiv   ebp
c002ca02:	99                   	cdq    
c002ca03:	f7 f9                	idiv   ecx
c002ca05:	8d 42 30             	lea    eax,[edx+0x30]
c002ca08:	0f b6 c0             	movzx  eax,al
c002ca0b:	50                   	push   eax
c002ca0c:	e8 d7 fc ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002ca11:	5d                   	pop    ebp
c002ca12:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ca17:	5a                   	pop    edx
c002ca18:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002ca1e:	53                   	push   ebx
c002ca1f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca24:	99                   	cdq    
c002ca25:	f7 fd                	idiv   ebp
c002ca27:	99                   	cdq    
c002ca28:	f7 f9                	idiv   ecx
c002ca2a:	8d 42 30             	lea    eax,[edx+0x30]
c002ca2d:	0f b6 c0             	movzx  eax,al
c002ca30:	50                   	push   eax
c002ca31:	e8 b2 fc ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002ca36:	5d                   	pop    ebp
c002ca37:	5a                   	pop    edx
c002ca38:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002ca3e:	53                   	push   ebx
c002ca3f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca44:	99                   	cdq    
c002ca45:	f7 ff                	idiv   edi
c002ca47:	99                   	cdq    
c002ca48:	f7 f9                	idiv   ecx
c002ca4a:	8d 42 30             	lea    eax,[edx+0x30]
c002ca4d:	0f b6 c0             	movzx  eax,al
c002ca50:	50                   	push   eax
c002ca51:	e8 92 fc ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002ca56:	5f                   	pop    edi
c002ca57:	5d                   	pop    ebp
c002ca58:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002ca5e:	53                   	push   ebx
c002ca5f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca64:	99                   	cdq    
c002ca65:	f7 f9                	idiv   ecx
c002ca67:	99                   	cdq    
c002ca68:	f7 f9                	idiv   ecx
c002ca6a:	8d 42 30             	lea    eax,[edx+0x30]
c002ca6d:	0f b6 c0             	movzx  eax,al
c002ca70:	50                   	push   eax
c002ca71:	e8 72 fc ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002ca76:	5a                   	pop    edx
c002ca77:	5f                   	pop    edi
c002ca78:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002ca7e:	53                   	push   ebx
c002ca7f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca84:	99                   	cdq    
c002ca85:	f7 f9                	idiv   ecx
c002ca87:	83 c2 30             	add    edx,0x30
c002ca8a:	0f b6 d2             	movzx  edx,dl
c002ca8d:	52                   	push   edx
c002ca8e:	e8 55 fc ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002ca93:	83 c4 10             	add    esp,0x10
c002ca96:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002ca9c:	eb 05                	jmp    c002caa3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002ca9e:	be 01 00 00 00       	mov    esi,0x1
c002caa3:	83 c4 0c             	add    esp,0xc
c002caa6:	89 f0                	mov    eax,esi
c002caa8:	5b                   	pop    ebx
c002caa9:	5e                   	pop    esi
c002caaa:	5f                   	pop    edi
c002caab:	5d                   	pop    ebp
c002caac:	c3                   	ret    
c002caad:	90                   	nop

c002caae <ATAPI::write(unsigned long long, int, void*)>:
c002caae:	b8 03 00 00 00       	mov    eax,0x3
c002cab3:	c3                   	ret    

c002cab4 <ATAPI::close(int, int, void*)>:
c002cab4:	83 ec 0c             	sub    esp,0xc
c002cab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cabb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cac1:	85 c0                	test   eax,eax
c002cac3:	74 0c                	je     c002cad1 <ATAPI::close(int, int, void*)+0x1d>
c002cac5:	83 ec 0c             	sub    esp,0xc
c002cac8:	8b 10                	mov    edx,DWORD PTR [eax]
c002caca:	50                   	push   eax
c002cacb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cace:	83 c4 10             	add    esp,0x10
c002cad1:	31 c0                	xor    eax,eax
c002cad3:	83 c4 0c             	add    esp,0xc
c002cad6:	c3                   	ret    
c002cad7:	90                   	nop

c002cad8 <ATAPI::ATAPI()>:
c002cad8:	83 ec 0c             	sub    esp,0xc
c002cadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cadf:	83 ec 04             	sub    esp,0x4
c002cae2:	68 00 08 00 00       	push   0x800
c002cae7:	68 c5 41 03 c0       	push   0xc00341c5
c002caec:	50                   	push   eax
c002caed:	e8 f4 ee fe ff       	call   c001b9e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002caf2:	83 c4 10             	add    esp,0x10
c002caf5:	ba d4 40 03 c0       	mov    edx,0xc00340d4
c002cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cafe:	89 10                	mov    DWORD PTR [eax],edx
c002cb00:	90                   	nop
c002cb01:	83 c4 0c             	add    esp,0xc
c002cb04:	c3                   	ret    
c002cb05:	90                   	nop

c002cb06 <ATAPI::readyForCommand()>:
c002cb06:	56                   	push   esi
c002cb07:	53                   	push   ebx
c002cb08:	53                   	push   ebx
c002cb09:	31 db                	xor    ebx,ebx
c002cb0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002cb0f:	51                   	push   ecx
c002cb10:	6a 0c                	push   0xc
c002cb12:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002cb19:	50                   	push   eax
c002cb1a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002cb20:	e8 8f e8 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002cb25:	83 c4 10             	add    esp,0x10
c002cb28:	a8 88                	test   al,0x88
c002cb2a:	74 25                	je     c002cb51 <ATAPI::readyForCommand()+0x4b>
c002cb2c:	43                   	inc    ebx
c002cb2d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002cb33:	7e da                	jle    c002cb0f <ATAPI::readyForCommand()+0x9>
c002cb35:	83 ec 0c             	sub    esp,0xc
c002cb38:	68 5e 01 00 00       	push   0x15e
c002cb3d:	e8 22 8e ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002cb42:	83 c4 10             	add    esp,0x10
c002cb45:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002cb4b:	75 c2                	jne    c002cb0f <ATAPI::readyForCommand()+0x9>
c002cb4d:	31 c0                	xor    eax,eax
c002cb4f:	eb 02                	jmp    c002cb53 <ATAPI::readyForCommand()+0x4d>
c002cb51:	b0 01                	mov    al,0x1
c002cb53:	5a                   	pop    edx
c002cb54:	5b                   	pop    ebx
c002cb55:	5e                   	pop    esi
c002cb56:	c3                   	ret    
c002cb57:	90                   	nop

c002cb58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002cb58:	55                   	push   ebp
c002cb59:	57                   	push   edi
c002cb5a:	56                   	push   esi
c002cb5b:	53                   	push   ebx
c002cb5c:	83 ec 20             	sub    esp,0x20
c002cb5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002cb63:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002cb67:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002cb6b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002cb6f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cb73:	6a 01                	push   0x1
c002cb75:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cb7c:	50                   	push   eax
c002cb7d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb83:	e8 74 e9 ff ff       	call   c002b4fc <IDE::enableIRQs(unsigned char, bool)>
c002cb88:	5e                   	pop    esi
c002cb89:	58                   	pop    eax
c002cb8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cb91:	50                   	push   eax
c002cb92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cb98:	e8 31 e7 ff ff       	call   c002b2ce <IDE::prepareInterrupt(unsigned char)>
c002cb9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c002cba0:	e8 61 ff ff ff       	call   c002cb06 <ATAPI::readyForCommand()>
c002cba5:	83 c4 10             	add    esp,0x10
c002cba8:	84 c0                	test   al,al
c002cbaa:	75 0a                	jne    c002cbb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002cbac:	bb 01 00 00 00       	mov    ebx,0x1
c002cbb1:	e9 60 02 00 00       	jmp    c002ce16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002cbb6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002cbbc:	c1 e0 04             	shl    eax,0x4
c002cbbf:	0f b6 c0             	movzx  eax,al
c002cbc2:	50                   	push   eax
c002cbc3:	6a 06                	push   0x6
c002cbc5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cbcc:	50                   	push   eax
c002cbcd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cbd3:	e8 1c e7 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cbd8:	6a 00                	push   0x0
c002cbda:	6a 01                	push   0x1
c002cbdc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cbe3:	50                   	push   eax
c002cbe4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cbea:	e8 05 e7 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cbef:	83 c4 20             	add    esp,0x20
c002cbf2:	0f b6 c3             	movzx  eax,bl
c002cbf5:	0f b6 df             	movzx  ebx,bh
c002cbf8:	50                   	push   eax
c002cbf9:	6a 04                	push   0x4
c002cbfb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc02:	50                   	push   eax
c002cc03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc09:	e8 e6 e6 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc0e:	53                   	push   ebx
c002cc0f:	6a 05                	push   0x5
c002cc11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc18:	50                   	push   eax
c002cc19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc1f:	e8 d0 e6 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc24:	83 c4 20             	add    esp,0x20
c002cc27:	68 a0 00 00 00       	push   0xa0
c002cc2c:	6a 07                	push   0x7
c002cc2e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc35:	50                   	push   eax
c002cc36:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc3c:	e8 b3 e6 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cc41:	83 c4 0c             	add    esp,0xc
c002cc44:	6a 01                	push   0x1
c002cc46:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cc4d:	50                   	push   eax
c002cc4e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc54:	e8 83 f1 ff ff       	call   c002bddc <IDE::polling(unsigned char, unsigned int)>
c002cc59:	83 c4 10             	add    esp,0x10
c002cc5c:	0f b6 d8             	movzx  ebx,al
c002cc5f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002cc65:	85 db                	test   ebx,ebx
c002cc67:	74 20                	je     c002cc89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002cc69:	53                   	push   ebx
c002cc6a:	0f b6 c0             	movzx  eax,al
c002cc6d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002cc74:	52                   	push   edx
c002cc75:	50                   	push   eax
c002cc76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc7c:	e8 a1 f0 ff ff       	call   c002bd22 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002cc81:	83 c4 10             	add    esp,0x10
c002cc84:	e9 8d 01 00 00       	jmp    c002ce16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002cc89:	0f b6 c0             	movzx  eax,al
c002cc8c:	53                   	push   ebx
c002cc8d:	53                   	push   ebx
c002cc8e:	50                   	push   eax
c002cc8f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cc95:	e8 48 e6 ff ff       	call   c002b2e2 <IDE::getBase(unsigned char)>
c002cc9a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002cc9e:	b9 06 00 00 00       	mov    ecx,0x6
c002cca3:	89 c2                	mov    edx,eax
c002cca5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002cca8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002ccac:	83 c4 10             	add    esp,0x10
c002ccaf:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002ccb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ccb8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002ccbe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002ccc5:	85 db                	test   ebx,ebx
c002ccc7:	0f 84 ec 00 00 00    	je     c002cdb9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002cccd:	51                   	push   ecx
c002ccce:	51                   	push   ecx
c002cccf:	52                   	push   edx
c002ccd0:	50                   	push   eax
c002ccd1:	e8 8c e7 ff ff       	call   c002b462 <IDE::waitInterrupt(unsigned char)>
c002ccd6:	83 c4 10             	add    esp,0x10
c002ccd9:	84 c0                	test   al,al
c002ccdb:	0f 84 cb fe ff ff    	je     c002cbac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002cce1:	56                   	push   esi
c002cce2:	56                   	push   esi
c002cce3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ccea:	50                   	push   eax
c002cceb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ccf1:	e8 d8 e5 ff ff       	call   c002b2ce <IDE::prepareInterrupt(unsigned char)>
c002ccf6:	83 c4 0c             	add    esp,0xc
c002ccf9:	6a 04                	push   0x4
c002ccfb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cd02:	50                   	push   eax
c002cd03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd09:	e8 a6 e6 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002cd0e:	83 c4 0c             	add    esp,0xc
c002cd11:	89 c6                	mov    esi,eax
c002cd13:	6a 05                	push   0x5
c002cd15:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cd1c:	50                   	push   eax
c002cd1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd23:	e8 8c e6 ff ff       	call   c002b3b4 <IDE::read(unsigned char, unsigned char)>
c002cd28:	89 f1                	mov    ecx,esi
c002cd2a:	0f b6 c0             	movzx  eax,al
c002cd2d:	0f b6 f1             	movzx  esi,cl
c002cd30:	c1 e0 08             	shl    eax,0x8
c002cd33:	09 c6                	or     esi,eax
c002cd35:	d1 fe                	sar    esi,1
c002cd37:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002cd3b:	83 c4 10             	add    esp,0x10
c002cd3e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002cd43:	74 41                	je     c002cd86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002cd45:	31 c9                	xor    ecx,ecx
c002cd47:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cd4d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cd54:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002cd58:	75 0a                	jne    c002cd64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002cd5a:	01 c9                	add    ecx,ecx
c002cd5c:	01 cd                	add    ebp,ecx
c002cd5e:	4b                   	dec    ebx
c002cd5f:	e9 54 ff ff ff       	jmp    c002ccb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002cd64:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002cd69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002cd6d:	51                   	push   ecx
c002cd6e:	51                   	push   ecx
c002cd6f:	52                   	push   edx
c002cd70:	50                   	push   eax
c002cd71:	e8 6c e5 ff ff       	call   c002b2e2 <IDE::getBase(unsigned char)>
c002cd76:	89 c2                	mov    edx,eax
c002cd78:	89 f0                	mov    eax,esi
c002cd7a:	66 ef                	out    dx,ax
c002cd7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002cd80:	83 c4 10             	add    esp,0x10
c002cd83:	41                   	inc    ecx
c002cd84:	eb c1                	jmp    c002cd47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002cd86:	31 f6                	xor    esi,esi
c002cd88:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cd8e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cd95:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002cd99:	75 06                	jne    c002cda1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002cd9b:	01 f6                	add    esi,esi
c002cd9d:	01 f5                	add    ebp,esi
c002cd9f:	eb bd                	jmp    c002cd5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002cda1:	51                   	push   ecx
c002cda2:	51                   	push   ecx
c002cda3:	52                   	push   edx
c002cda4:	50                   	push   eax
c002cda5:	e8 38 e5 ff ff       	call   c002b2e2 <IDE::getBase(unsigned char)>
c002cdaa:	89 c2                	mov    edx,eax
c002cdac:	66 ed                	in     ax,dx
c002cdae:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002cdb3:	83 c4 10             	add    esp,0x10
c002cdb6:	46                   	inc    esi
c002cdb7:	eb cf                	jmp    c002cd88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002cdb9:	51                   	push   ecx
c002cdba:	51                   	push   ecx
c002cdbb:	52                   	push   edx
c002cdbc:	50                   	push   eax
c002cdbd:	e8 a0 e6 ff ff       	call   c002b462 <IDE::waitInterrupt(unsigned char)>
c002cdc2:	83 c4 10             	add    esp,0x10
c002cdc5:	84 c0                	test   al,al
c002cdc7:	0f 84 df fd ff ff    	je     c002cbac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002cdcd:	bb a0 86 01 00       	mov    ebx,0x186a0
c002cdd2:	52                   	push   edx
c002cdd3:	52                   	push   edx
c002cdd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cddb:	50                   	push   eax
c002cddc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cde2:	e8 e7 e4 ff ff       	call   c002b2ce <IDE::prepareInterrupt(unsigned char)>
c002cde7:	83 c4 10             	add    esp,0x10
c002cdea:	50                   	push   eax
c002cdeb:	50                   	push   eax
c002cdec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cdf3:	50                   	push   eax
c002cdf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cdfa:	e8 e3 e4 ff ff       	call   c002b2e2 <IDE::getBase(unsigned char)>
c002cdff:	8d 50 07             	lea    edx,[eax+0x7]
c002ce02:	ec                   	in     al,dx
c002ce03:	83 c4 10             	add    esp,0x10
c002ce06:	a8 88                	test   al,0x88
c002ce08:	74 0a                	je     c002ce14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002ce0a:	4b                   	dec    ebx
c002ce0b:	75 dd                	jne    c002cdea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002ce0d:	bb 02 00 00 00       	mov    ebx,0x2
c002ce12:	eb 02                	jmp    c002ce16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002ce14:	31 db                	xor    ebx,ebx
c002ce16:	83 c4 1c             	add    esp,0x1c
c002ce19:	89 d8                	mov    eax,ebx
c002ce1b:	5b                   	pop    ebx
c002ce1c:	5e                   	pop    esi
c002ce1d:	5f                   	pop    edi
c002ce1e:	5d                   	pop    ebp
c002ce1f:	c3                   	ret    

c002ce20 <ATAPI::diskRemoved()>:
c002ce20:	53                   	push   ebx
c002ce21:	83 ec 14             	sub    esp,0x14
c002ce24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ce28:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ce2f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002ce35:	e8 40 fb fe ff       	call   c001c97a <LogicalDisk::unmount()>
c002ce3a:	58                   	pop    eax
c002ce3b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002ce41:	e8 12 05 ff ff       	call   c001d358 <VCache::writeWriteBuffer()>
c002ce46:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002ce4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ce50:	83 c4 18             	add    esp,0x18
c002ce53:	5b                   	pop    ebx
c002ce54:	e9 ef 04 ff ff       	jmp    c001d348 <VCache::invalidateReadBuffer()>
c002ce59:	90                   	nop

c002ce5a <ATAPI::eject()>:
c002ce5a:	57                   	push   edi
c002ce5b:	b9 03 00 00 00       	mov    ecx,0x3
c002ce60:	53                   	push   ebx
c002ce61:	83 ec 14             	sub    esp,0x14
c002ce64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002ce68:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ce6c:	fc                   	cld    
c002ce6d:	31 c0                	xor    eax,eax
c002ce6f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ce71:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002ce76:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002ce7b:	50                   	push   eax
c002ce7c:	50                   	push   eax
c002ce7d:	6a 00                	push   0x0
c002ce7f:	6a 00                	push   0x0
c002ce81:	6a 00                	push   0x0
c002ce83:	6a 02                	push   0x2
c002ce85:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ce89:	50                   	push   eax
c002ce8a:	53                   	push   ebx
c002ce8b:	e8 c8 fc ff ff       	call   c002cb58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ce90:	83 c4 14             	add    esp,0x14
c002ce93:	53                   	push   ebx
c002ce94:	e8 87 ff ff ff       	call   c002ce20 <ATAPI::diskRemoved()>
c002ce99:	83 c4 24             	add    esp,0x24
c002ce9c:	31 c0                	xor    eax,eax
c002ce9e:	5b                   	pop    ebx
c002ce9f:	5f                   	pop    edi
c002cea0:	c3                   	ret    
c002cea1:	90                   	nop

c002cea2 <ATAPI::diskInserted()>:
c002cea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002cea6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002cead:	c3                   	ret    

c002ceae <ATAPI::detectMedia()>:
c002ceae:	56                   	push   esi
c002ceaf:	53                   	push   ebx
c002ceb0:	83 ec 28             	sub    esp,0x28
c002ceb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ceb7:	6a 0c                	push   0xc
c002ceb9:	6a 00                	push   0x0
c002cebb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002cebf:	56                   	push   esi
c002cec0:	e8 2b 36 fd ff       	call   c00004f0 <memset>
c002cec5:	58                   	pop    eax
c002cec6:	5a                   	pop    edx
c002cec7:	6a 00                	push   0x0
c002cec9:	6a 00                	push   0x0
c002cecb:	6a 00                	push   0x0
c002cecd:	6a 00                	push   0x0
c002cecf:	56                   	push   esi
c002ced0:	53                   	push   ebx
c002ced1:	e8 82 fc ff ff       	call   c002cb58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ced6:	83 c4 1c             	add    esp,0x1c
c002ced9:	6a 0c                	push   0xc
c002cedb:	6a 00                	push   0x0
c002cedd:	56                   	push   esi
c002cede:	e8 0d 36 fd ff       	call   c00004f0 <memset>
c002cee3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002cee8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002ceed:	59                   	pop    ecx
c002ceee:	58                   	pop    eax
c002ceef:	6a 01                	push   0x1
c002cef1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002cef5:	50                   	push   eax
c002cef6:	6a 00                	push   0x0
c002cef8:	6a 12                	push   0x12
c002cefa:	56                   	push   esi
c002cefb:	53                   	push   ebx
c002cefc:	e8 57 fc ff ff       	call   c002cb58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cf01:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002cf05:	83 c4 20             	add    esp,0x20
c002cf08:	83 e0 7f             	and    eax,0x7f
c002cf0b:	83 f8 70             	cmp    eax,0x70
c002cf0e:	74 15                	je     c002cf25 <ATAPI::detectMedia()+0x77>
c002cf10:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf17:	75 0c                	jne    c002cf25 <ATAPI::detectMedia()+0x77>
c002cf19:	83 ec 0c             	sub    esp,0xc
c002cf1c:	53                   	push   ebx
c002cf1d:	e8 80 ff ff ff       	call   c002cea2 <ATAPI::diskInserted()>
c002cf22:	83 c4 10             	add    esp,0x10
c002cf25:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cf29:	83 e0 0f             	and    eax,0xf
c002cf2c:	83 f8 02             	cmp    eax,0x2
c002cf2f:	75 1b                	jne    c002cf4c <ATAPI::detectMedia()+0x9e>
c002cf31:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cf36:	75 2d                	jne    c002cf65 <ATAPI::detectMedia()+0xb7>
c002cf38:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf3f:	74 24                	je     c002cf65 <ATAPI::detectMedia()+0xb7>
c002cf41:	83 ec 0c             	sub    esp,0xc
c002cf44:	53                   	push   ebx
c002cf45:	e8 d6 fe ff ff       	call   c002ce20 <ATAPI::diskRemoved()>
c002cf4a:	eb 16                	jmp    c002cf62 <ATAPI::detectMedia()+0xb4>
c002cf4c:	85 c0                	test   eax,eax
c002cf4e:	75 15                	jne    c002cf65 <ATAPI::detectMedia()+0xb7>
c002cf50:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cf57:	75 0c                	jne    c002cf65 <ATAPI::detectMedia()+0xb7>
c002cf59:	83 ec 0c             	sub    esp,0xc
c002cf5c:	53                   	push   ebx
c002cf5d:	e8 40 ff ff ff       	call   c002cea2 <ATAPI::diskInserted()>
c002cf62:	83 c4 10             	add    esp,0x10
c002cf65:	83 c4 24             	add    esp,0x24
c002cf68:	5b                   	pop    ebx
c002cf69:	5e                   	pop    esi
c002cf6a:	c3                   	ret    
c002cf6b:	90                   	nop

c002cf6c <ATAPI::open(int, int, void*)>:
c002cf6c:	56                   	push   esi
c002cf6d:	53                   	push   ebx
c002cf6e:	50                   	push   eax
c002cf6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002cf73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cf77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cf7b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cf81:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002cf87:	c1 e0 06             	shl    eax,0x6
c002cf8a:	01 d0                	add    eax,edx
c002cf8c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002cf93:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002cf99:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002cfa0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002cfaa:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cfb0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002cfb7:	6a 04                	push   0x4
c002cfb9:	6a 0c                	push   0xc
c002cfbb:	51                   	push   ecx
c002cfbc:	52                   	push   edx
c002cfbd:	e8 32 e3 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cfc2:	90                   	nop
c002cfc3:	90                   	nop
c002cfc4:	6a 00                	push   0x0
c002cfc6:	6a 0c                	push   0xc
c002cfc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002cfcf:	50                   	push   eax
c002cfd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002cfd6:	e8 19 e3 ff ff       	call   c002b2f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cfdb:	83 c4 14             	add    esp,0x14
c002cfde:	68 78 01 00 00       	push   0x178
c002cfe3:	e8 cf 95 fe ff       	call   c00165b7 <malloc>
c002cfe8:	83 c4 0c             	add    esp,0xc
c002cfeb:	89 c6                	mov    esi,eax
c002cfed:	6a 00                	push   0x0
c002cfef:	68 ff ff ff 7f       	push   0x7fffffff
c002cff4:	6a 00                	push   0x0
c002cff6:	6a 00                	push   0x0
c002cff8:	53                   	push   ebx
c002cff9:	68 77 42 03 c0       	push   0xc0034277
c002cffe:	50                   	push   eax
c002cfff:	e8 b4 f7 fe ff       	call   c001c7b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d004:	83 c4 14             	add    esp,0x14
c002d007:	56                   	push   esi
c002d008:	e8 6b f8 fe ff       	call   c001c878 <LogicalDisk::assignDriveLetter()>
c002d00d:	5a                   	pop    edx
c002d00e:	0f be c0             	movsx  eax,al
c002d011:	59                   	pop    ecx
c002d012:	50                   	push   eax
c002d013:	68 bc 40 03 c0       	push   0xc00340bc
c002d018:	e8 28 c4 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002d01d:	58                   	pop    eax
c002d01e:	5a                   	pop    edx
c002d01f:	56                   	push   esi
c002d020:	53                   	push   ebx
c002d021:	e8 dc e5 fe ff       	call   c001b602 <Device::addChild(Device*)>
c002d026:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002d02c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d02f:	e8 1a ea fe ff       	call   c001ba4e <PhysicalDisk::startCache()>
c002d034:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002d03b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d03e:	e8 6b fe ff ff       	call   c002ceae <ATAPI::detectMedia()>
c002d043:	83 c4 14             	add    esp,0x14
c002d046:	31 c0                	xor    eax,eax
c002d048:	5b                   	pop    ebx
c002d049:	5e                   	pop    esi
c002d04a:	c3                   	ret    
c002d04b:	90                   	nop

c002d04c <ATAPI::read(unsigned long long, int, void*)>:
c002d04c:	55                   	push   ebp
c002d04d:	57                   	push   edi
c002d04e:	56                   	push   esi
c002d04f:	53                   	push   ebx
c002d050:	83 ec 1c             	sub    esp,0x1c
c002d053:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d057:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002d05b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d05f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d066:	74 3c                	je     c002d0a4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002d068:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d06c:	b9 03 00 00 00       	mov    ecx,0x3
c002d071:	fc                   	cld    
c002d072:	31 c0                	xor    eax,eax
c002d074:	0f ce                	bswap  esi
c002d076:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d078:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002d07d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002d081:	89 e8                	mov    eax,ebp
c002d083:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002d087:	50                   	push   eax
c002d088:	50                   	push   eax
c002d089:	55                   	push   ebp
c002d08a:	c1 e5 0b             	shl    ebp,0xb
c002d08d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d091:	6a 00                	push   0x0
c002d093:	55                   	push   ebp
c002d094:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d098:	50                   	push   eax
c002d099:	53                   	push   ebx
c002d09a:	e8 b9 fa ff ff       	call   c002cb58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002d09f:	83 c4 20             	add    esp,0x20
c002d0a2:	eb 1a                	jmp    c002d0be <ATAPI::read(unsigned long long, int, void*)+0x72>
c002d0a4:	83 ec 0c             	sub    esp,0xc
c002d0a7:	53                   	push   ebx
c002d0a8:	e8 01 fe ff ff       	call   c002ceae <ATAPI::detectMedia()>
c002d0ad:	83 c4 10             	add    esp,0x10
c002d0b0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d0b7:	75 af                	jne    c002d068 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002d0b9:	b8 02 00 00 00       	mov    eax,0x2
c002d0be:	83 c4 1c             	add    esp,0x1c
c002d0c1:	5b                   	pop    ebx
c002d0c2:	5e                   	pop    esi
c002d0c3:	5f                   	pop    edi
c002d0c4:	5d                   	pop    ebp
c002d0c5:	c3                   	ret    

c002d0c6 <SATA::close(int, int, void*)>:
c002d0c6:	83 ec 0c             	sub    esp,0xc
c002d0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d0cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d0d3:	85 c0                	test   eax,eax
c002d0d5:	74 0c                	je     c002d0e3 <SATA::close(int, int, void*)+0x1d>
c002d0d7:	83 ec 0c             	sub    esp,0xc
c002d0da:	8b 10                	mov    edx,DWORD PTR [eax]
c002d0dc:	50                   	push   eax
c002d0dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d0e0:	83 c4 10             	add    esp,0x10
c002d0e3:	31 c0                	xor    eax,eax
c002d0e5:	83 c4 0c             	add    esp,0xc
c002d0e8:	c3                   	ret    
c002d0e9:	90                   	nop

c002d0ea <SATA::powerSaving(PowerSavingLevel)>:
c002d0ea:	c3                   	ret    
c002d0eb:	90                   	nop

c002d0ec <SATA::open(int, int, void*)>:
c002d0ec:	56                   	push   esi
c002d0ed:	53                   	push   ebx
c002d0ee:	83 ec 10             	sub    esp,0x10
c002d0f1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d0f5:	68 04 41 03 c0       	push   0xc0034104
c002d0fa:	e8 46 c3 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002d0ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d103:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002d10d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d113:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d11d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d121:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d12b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d131:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002d138:	e8 83 97 fe ff       	call   c00168c0 <Phys::allocatePage()>
c002d13d:	89 c6                	mov    esi,eax
c002d13f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002d145:	81 c6 00 10 00 00    	add    esi,0x1000
c002d14b:	e8 70 97 fe ff       	call   c00168c0 <Phys::allocatePage()>
c002d150:	83 c4 10             	add    esp,0x10
c002d153:	39 c6                	cmp    esi,eax
c002d155:	74 10                	je     c002d167 <SATA::open(int, int, void*)+0x7b>
c002d157:	83 ec 0c             	sub    esp,0xc
c002d15a:	68 10 41 03 c0       	push   0xc0034110
c002d15f:	e8 1a 36 ff ff       	call   c002077e <KePanic(char const*)>
c002d164:	83 c4 10             	add    esp,0x10
c002d167:	83 ec 0c             	sub    esp,0xc
c002d16a:	6a 02                	push   0x2
c002d16c:	e8 9c af fe ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c002d171:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002d177:	6a 03                	push   0x3
c002d179:	50                   	push   eax
c002d17a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002d180:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c002d186:	e8 95 b6 fe ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d18b:	83 c4 14             	add    esp,0x14
c002d18e:	53                   	push   ebx
c002d18f:	e8 ba e8 fe ff       	call   c001ba4e <PhysicalDisk::startCache()>
c002d194:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d197:	e8 ee fa fe ff       	call   c001cc8a <createPartitionsForDisk(PhysicalDisk*)>
c002d19c:	83 c4 14             	add    esp,0x14
c002d19f:	31 c0                	xor    eax,eax
c002d1a1:	5b                   	pop    ebx
c002d1a2:	5e                   	pop    esi
c002d1a3:	c3                   	ret    

c002d1a4 <SATA::SATA()>:
c002d1a4:	83 ec 0c             	sub    esp,0xc
c002d1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1ab:	83 ec 04             	sub    esp,0x4
c002d1ae:	68 00 02 00 00       	push   0x200
c002d1b3:	68 24 41 03 c0       	push   0xc0034124
c002d1b8:	50                   	push   eax
c002d1b9:	e8 28 e8 fe ff       	call   c001b9e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d1be:	83 c4 10             	add    esp,0x10
c002d1c1:	ba 94 41 03 c0       	mov    edx,0xc0034194
c002d1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1ca:	89 10                	mov    DWORD PTR [eax],edx
c002d1cc:	90                   	nop
c002d1cd:	83 c4 0c             	add    esp,0xc
c002d1d0:	c3                   	ret    
c002d1d1:	90                   	nop

c002d1d2 <SATA::access(unsigned long long, int, void*, bool)>:
c002d1d2:	55                   	push   ebp
c002d1d3:	57                   	push   edi
c002d1d4:	56                   	push   esi
c002d1d5:	53                   	push   ebx
c002d1d6:	83 ec 2c             	sub    esp,0x2c
c002d1d9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002d1dd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d1e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d1e5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002d1e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d1ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d1f1:	fa                   	cli    
c002d1f2:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002d1f8:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002d1fd:	7e 10                	jle    c002d20f <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002d1ff:	83 ec 0c             	sub    esp,0xc
c002d202:	68 34 41 03 c0       	push   0xc0034134
c002d207:	e8 72 35 ff ff       	call   c002077e <KePanic(char const*)>
c002d20c:	83 c4 10             	add    esp,0x10
c002d20f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002d215:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002d21b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d221:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d225:	89 d0                	mov    eax,edx
c002d227:	c1 e0 07             	shl    eax,0x7
c002d22a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002d22e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d238:	51                   	push   ecx
c002d239:	8d 42 02             	lea    eax,[edx+0x2]
c002d23c:	51                   	push   ecx
c002d23d:	c1 e0 07             	shl    eax,0x7
c002d240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d244:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d248:	50                   	push   eax
c002d249:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002d24f:	e8 68 ec ff ff       	call   c002bebc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d254:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d258:	83 c4 10             	add    esp,0x10
c002d25b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d260:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d264:	0f 84 aa 01 00 00    	je     c002d414 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002d26a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d26e:	c1 e0 09             	shl    eax,0x9
c002d271:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d276:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d27a:	74 0e                	je     c002d28a <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002d27c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002d282:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002d286:	89 c1                	mov    ecx,eax
c002d288:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d28a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d290:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d294:	8d 42 02             	lea    eax,[edx+0x2]
c002d297:	c1 e0 07             	shl    eax,0x7
c002d29a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002d29e:	8b 00                	mov    eax,DWORD PTR [eax]
c002d2a0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d2a6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d2ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d2b0:	c1 e1 05             	shl    ecx,0x5
c002d2b3:	01 c8                	add    eax,ecx
c002d2b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002d2b9:	83 e1 01             	and    ecx,0x1
c002d2bc:	89 ce                	mov    esi,ecx
c002d2be:	8a 08                	mov    cl,BYTE PTR [eax]
c002d2c0:	c1 e6 06             	shl    esi,0x6
c002d2c3:	83 e1 bf             	and    ecx,0xffffffbf
c002d2c6:	09 f1                	or     ecx,esi
c002d2c8:	88 08                	mov    BYTE PTR [eax],cl
c002d2ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d2cc:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002d2d2:	81 c9 05 00 01 00    	or     ecx,0x10005
c002d2d8:	89 08                	mov    DWORD PTR [eax],ecx
c002d2da:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d2e0:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002d2e6:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002d2ec:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002d2ef:	50                   	push   eax
c002d2f0:	68 90 00 00 00       	push   0x90
c002d2f5:	6a 00                	push   0x0
c002d2f7:	56                   	push   esi
c002d2f8:	e8 f3 31 fd ff       	call   c00004f0 <memset>
c002d2fd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002d303:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002d309:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d30d:	83 c4 10             	add    esp,0x10
c002d310:	48                   	dec    eax
c002d311:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d316:	89 c1                	mov    ecx,eax
c002d318:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002d31e:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d323:	09 c8                	or     eax,ecx
c002d325:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002d32b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002d331:	83 c8 80             	or     eax,0xffffff80
c002d334:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002d33a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002d33d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d341:	25 00 7f 00 00       	and    eax,0x7f00
c002d346:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d34b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d350:	66 89 06             	mov    WORD PTR [esi],ax
c002d353:	b0 35                	mov    al,0x35
c002d355:	75 02                	jne    c002d359 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002d357:	b0 25                	mov    al,0x25
c002d359:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002d35c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002d360:	89 e8                	mov    eax,ebp
c002d362:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002d366:	c1 e8 10             	shr    eax,0x10
c002d369:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002d36c:	89 e8                	mov    eax,ebp
c002d36e:	c1 e8 18             	shr    eax,0x18
c002d371:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002d374:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002d378:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002d37b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d37f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002d382:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d386:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002d38a:	89 d6                	mov    esi,edx
c002d38c:	31 c0                	xor    eax,eax
c002d38e:	c1 e6 07             	shl    esi,0x7
c002d391:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002d395:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002d39b:	80 e1 88             	and    cl,0x88
c002d39e:	74 0a                	je     c002d3aa <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002d3a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d3a5:	74 0a                	je     c002d3b1 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002d3a7:	40                   	inc    eax
c002d3a8:	eb eb                	jmp    c002d395 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002d3aa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d3af:	75 0a                	jne    c002d3bb <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002d3b1:	83 ec 0c             	sub    esp,0xc
c002d3b4:	68 6d 41 03 c0       	push   0xc003416d
c002d3b9:	eb 36                	jmp    c002d3f1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002d3bb:	b8 01 00 00 00       	mov    eax,0x1
c002d3c0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d3c4:	c1 e2 07             	shl    edx,0x7
c002d3c7:	d3 e0                	shl    eax,cl
c002d3c9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002d3cd:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002d3d3:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002d3d9:	85 c8                	test   eax,ecx
c002d3db:	74 2b                	je     c002d408 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002d3dd:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002d3e3:	0f ba e1 1e          	bt     ecx,0x1e
c002d3e7:	73 ea                	jae    c002d3d3 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002d3e9:	83 ec 0c             	sub    esp,0xc
c002d3ec:	68 7b 41 03 c0       	push   0xc003417b
c002d3f1:	e8 4f c0 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002d3f6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d3fb:	83 c4 10             	add    esp,0x10
c002d3fe:	48                   	dec    eax
c002d3ff:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d404:	85 c0                	test   eax,eax
c002d406:	eb 17                	jmp    c002d41f <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002d408:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002d40e:	0f ba e0 1e          	bt     eax,0x1e
c002d412:	73 15                	jae    c002d429 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002d414:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d419:	48                   	dec    eax
c002d41a:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d41f:	75 01                	jne    c002d422 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002d421:	fb                   	sti    
c002d422:	b8 01 00 00 00       	mov    eax,0x1
c002d427:	eb 29                	jmp    c002d452 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d429:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002d42e:	75 10                	jne    c002d440 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002d430:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d436:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d43a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002d43e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d440:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d445:	48                   	dec    eax
c002d446:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d44b:	75 03                	jne    c002d450 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d44d:	fb                   	sti    
c002d44e:	eb 02                	jmp    c002d452 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002d450:	31 c0                	xor    eax,eax
c002d452:	83 c4 2c             	add    esp,0x2c
c002d455:	5b                   	pop    ebx
c002d456:	5e                   	pop    esi
c002d457:	5f                   	pop    edi
c002d458:	5d                   	pop    ebp
c002d459:	c3                   	ret    

c002d45a <SATA::read(unsigned long long, int, void*)>:
c002d45a:	55                   	push   ebp
c002d45b:	57                   	push   edi
c002d45c:	56                   	push   esi
c002d45d:	be 04 00 00 00       	mov    esi,0x4
c002d462:	53                   	push   ebx
c002d463:	83 ec 0c             	sub    esp,0xc
c002d466:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d46a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d46e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d471:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d475:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d479:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d47f:	0f 87 1a 02 00 00    	ja     c002d69f <SATA::read(unsigned long long, int, void*)+0x245>
c002d485:	be 06 00 00 00       	mov    esi,0x6
c002d48a:	85 c9                	test   ecx,ecx
c002d48c:	0f 84 0d 02 00 00    	je     c002d69f <SATA::read(unsigned long long, int, void*)+0x245>
c002d492:	56                   	push   esi
c002d493:	56                   	push   esi
c002d494:	6a 00                	push   0x0
c002d496:	51                   	push   ecx
c002d497:	53                   	push   ebx
c002d498:	52                   	push   edx
c002d499:	50                   	push   eax
c002d49a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d49e:	e8 2f fd ff ff       	call   c002d1d2 <SATA::access(unsigned long long, int, void*, bool)>
c002d4a3:	83 c4 20             	add    esp,0x20
c002d4a6:	89 c6                	mov    esi,eax
c002d4a8:	85 c0                	test   eax,eax
c002d4aa:	0f 85 ea 01 00 00    	jne    c002d69a <SATA::read(unsigned long long, int, void*)+0x240>
c002d4b0:	01 1d b4 1b 04 c0    	add    DWORD PTR ds:0xc0041bb4,ebx
c002d4b6:	bb 0a 00 00 00       	mov    ebx,0xa
c002d4bb:	50                   	push   eax
c002d4bc:	50                   	push   eax
c002d4bd:	6a 0f                	push   0xf
c002d4bf:	6a 00                	push   0x0
c002d4c1:	e8 33 f2 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d4c6:	5a                   	pop    edx
c002d4c7:	0f b6 c0             	movzx  eax,al
c002d4ca:	59                   	pop    ecx
c002d4cb:	b9 10 27 00 00       	mov    ecx,0x2710
c002d4d0:	50                   	push   eax
c002d4d1:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d4d6:	99                   	cdq    
c002d4d7:	f7 f9                	idiv   ecx
c002d4d9:	99                   	cdq    
c002d4da:	f7 fb                	idiv   ebx
c002d4dc:	8d 42 30             	lea    eax,[edx+0x30]
c002d4df:	0f b6 c0             	movzx  eax,al
c002d4e2:	50                   	push   eax
c002d4e3:	e8 00 f2 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d4e8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d4ee:	5f                   	pop    edi
c002d4ef:	5d                   	pop    ebp
c002d4f0:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d4f5:	6a 0f                	push   0xf
c002d4f7:	6a 00                	push   0x0
c002d4f9:	e8 fb f1 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d4fe:	5a                   	pop    edx
c002d4ff:	0f b6 c0             	movzx  eax,al
c002d502:	59                   	pop    ecx
c002d503:	50                   	push   eax
c002d504:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d509:	99                   	cdq    
c002d50a:	f7 fd                	idiv   ebp
c002d50c:	99                   	cdq    
c002d50d:	f7 fb                	idiv   ebx
c002d50f:	8d 42 30             	lea    eax,[edx+0x30]
c002d512:	0f b6 c0             	movzx  eax,al
c002d515:	50                   	push   eax
c002d516:	e8 cd f1 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d51b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d521:	5f                   	pop    edi
c002d522:	bf 64 00 00 00       	mov    edi,0x64
c002d527:	58                   	pop    eax
c002d528:	6a 0f                	push   0xf
c002d52a:	6a 00                	push   0x0
c002d52c:	e8 c8 f1 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d531:	5a                   	pop    edx
c002d532:	0f b6 c0             	movzx  eax,al
c002d535:	59                   	pop    ecx
c002d536:	50                   	push   eax
c002d537:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d53c:	99                   	cdq    
c002d53d:	f7 ff                	idiv   edi
c002d53f:	99                   	cdq    
c002d540:	f7 fb                	idiv   ebx
c002d542:	8d 42 30             	lea    eax,[edx+0x30]
c002d545:	0f b6 c0             	movzx  eax,al
c002d548:	50                   	push   eax
c002d549:	e8 9a f1 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d54e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d554:	58                   	pop    eax
c002d555:	5a                   	pop    edx
c002d556:	6a 0f                	push   0xf
c002d558:	6a 00                	push   0x0
c002d55a:	e8 9a f1 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d55f:	59                   	pop    ecx
c002d560:	0f b6 c0             	movzx  eax,al
c002d563:	5a                   	pop    edx
c002d564:	50                   	push   eax
c002d565:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d56a:	99                   	cdq    
c002d56b:	f7 fb                	idiv   ebx
c002d56d:	99                   	cdq    
c002d56e:	f7 fb                	idiv   ebx
c002d570:	8d 42 30             	lea    eax,[edx+0x30]
c002d573:	0f b6 c0             	movzx  eax,al
c002d576:	50                   	push   eax
c002d577:	e8 6c f1 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d57c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d582:	59                   	pop    ecx
c002d583:	58                   	pop    eax
c002d584:	6a 0f                	push   0xf
c002d586:	6a 00                	push   0x0
c002d588:	e8 6c f1 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d58d:	5a                   	pop    edx
c002d58e:	0f b6 c0             	movzx  eax,al
c002d591:	59                   	pop    ecx
c002d592:	50                   	push   eax
c002d593:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d598:	99                   	cdq    
c002d599:	f7 fb                	idiv   ebx
c002d59b:	8d 42 30             	lea    eax,[edx+0x30]
c002d59e:	0f b6 c0             	movzx  eax,al
c002d5a1:	50                   	push   eax
c002d5a2:	e8 41 f1 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d5a7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d5ad:	58                   	pop    eax
c002d5ae:	5a                   	pop    edx
c002d5af:	6a 0f                	push   0xf
c002d5b1:	6a 00                	push   0x0
c002d5b3:	e8 41 f1 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d5b8:	59                   	pop    ecx
c002d5b9:	0f b6 c0             	movzx  eax,al
c002d5bc:	5a                   	pop    edx
c002d5bd:	b9 10 27 00 00       	mov    ecx,0x2710
c002d5c2:	50                   	push   eax
c002d5c3:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d5c8:	99                   	cdq    
c002d5c9:	f7 f9                	idiv   ecx
c002d5cb:	99                   	cdq    
c002d5cc:	f7 fb                	idiv   ebx
c002d5ce:	8d 42 30             	lea    eax,[edx+0x30]
c002d5d1:	0f b6 c0             	movzx  eax,al
c002d5d4:	50                   	push   eax
c002d5d5:	e8 0e f1 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d5da:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d5e0:	59                   	pop    ecx
c002d5e1:	58                   	pop    eax
c002d5e2:	6a 0f                	push   0xf
c002d5e4:	6a 00                	push   0x0
c002d5e6:	e8 0e f1 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d5eb:	5a                   	pop    edx
c002d5ec:	0f b6 c0             	movzx  eax,al
c002d5ef:	59                   	pop    ecx
c002d5f0:	50                   	push   eax
c002d5f1:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d5f6:	99                   	cdq    
c002d5f7:	f7 fd                	idiv   ebp
c002d5f9:	99                   	cdq    
c002d5fa:	f7 fb                	idiv   ebx
c002d5fc:	8d 42 30             	lea    eax,[edx+0x30]
c002d5ff:	0f b6 c0             	movzx  eax,al
c002d602:	50                   	push   eax
c002d603:	e8 e0 f0 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d608:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d60e:	5d                   	pop    ebp
c002d60f:	58                   	pop    eax
c002d610:	6a 0f                	push   0xf
c002d612:	6a 00                	push   0x0
c002d614:	e8 e0 f0 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d619:	5a                   	pop    edx
c002d61a:	0f b6 c0             	movzx  eax,al
c002d61d:	59                   	pop    ecx
c002d61e:	50                   	push   eax
c002d61f:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d624:	99                   	cdq    
c002d625:	f7 ff                	idiv   edi
c002d627:	99                   	cdq    
c002d628:	f7 fb                	idiv   ebx
c002d62a:	8d 42 30             	lea    eax,[edx+0x30]
c002d62d:	0f b6 c0             	movzx  eax,al
c002d630:	50                   	push   eax
c002d631:	e8 b2 f0 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d636:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d63c:	5f                   	pop    edi
c002d63d:	5d                   	pop    ebp
c002d63e:	6a 0f                	push   0xf
c002d640:	6a 00                	push   0x0
c002d642:	e8 b2 f0 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d647:	5a                   	pop    edx
c002d648:	0f b6 c0             	movzx  eax,al
c002d64b:	59                   	pop    ecx
c002d64c:	50                   	push   eax
c002d64d:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d652:	99                   	cdq    
c002d653:	f7 fb                	idiv   ebx
c002d655:	99                   	cdq    
c002d656:	f7 fb                	idiv   ebx
c002d658:	8d 42 30             	lea    eax,[edx+0x30]
c002d65b:	0f b6 c0             	movzx  eax,al
c002d65e:	50                   	push   eax
c002d65f:	e8 84 f0 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d664:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d66a:	5f                   	pop    edi
c002d66b:	5d                   	pop    ebp
c002d66c:	6a 0f                	push   0xf
c002d66e:	6a 00                	push   0x0
c002d670:	e8 84 f0 ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d675:	5a                   	pop    edx
c002d676:	0f b6 c0             	movzx  eax,al
c002d679:	59                   	pop    ecx
c002d67a:	50                   	push   eax
c002d67b:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d680:	99                   	cdq    
c002d681:	f7 fb                	idiv   ebx
c002d683:	83 c2 30             	add    edx,0x30
c002d686:	0f b6 d2             	movzx  edx,dl
c002d689:	52                   	push   edx
c002d68a:	e8 59 f0 ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d68f:	83 c4 10             	add    esp,0x10
c002d692:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d698:	eb 05                	jmp    c002d69f <SATA::read(unsigned long long, int, void*)+0x245>
c002d69a:	be 01 00 00 00       	mov    esi,0x1
c002d69f:	83 c4 0c             	add    esp,0xc
c002d6a2:	89 f0                	mov    eax,esi
c002d6a4:	5b                   	pop    ebx
c002d6a5:	5e                   	pop    esi
c002d6a6:	5f                   	pop    edi
c002d6a7:	5d                   	pop    ebp
c002d6a8:	c3                   	ret    
c002d6a9:	90                   	nop

c002d6aa <SATA::write(unsigned long long, int, void*)>:
c002d6aa:	55                   	push   ebp
c002d6ab:	b8 04 00 00 00       	mov    eax,0x4
c002d6b0:	57                   	push   edi
c002d6b1:	56                   	push   esi
c002d6b2:	53                   	push   ebx
c002d6b3:	83 ec 1c             	sub    esp,0x1c
c002d6b6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d6ba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d6be:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d6c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d6c5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d6c9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d6cf:	0f 87 32 02 00 00    	ja     c002d907 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d6d5:	b8 06 00 00 00       	mov    eax,0x6
c002d6da:	85 ff                	test   edi,edi
c002d6dc:	0f 84 25 02 00 00    	je     c002d907 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d6e2:	89 ee                	mov    esi,ebp
c002d6e4:	c1 e6 09             	shl    esi,0x9
c002d6e7:	01 fe                	add    esi,edi
c002d6e9:	89 c8                	mov    eax,ecx
c002d6eb:	89 da                	mov    edx,ebx
c002d6ed:	83 c0 01             	add    eax,0x1
c002d6f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d6f4:	83 d2 00             	adc    edx,0x0
c002d6f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d6fb:	50                   	push   eax
c002d6fc:	50                   	push   eax
c002d6fd:	6a 01                	push   0x1
c002d6ff:	57                   	push   edi
c002d700:	81 c7 00 02 00 00    	add    edi,0x200
c002d706:	6a 01                	push   0x1
c002d708:	53                   	push   ebx
c002d709:	51                   	push   ecx
c002d70a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d70e:	e8 bf fa ff ff       	call   c002d1d2 <SATA::access(unsigned long long, int, void*, bool)>
c002d713:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d717:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d71b:	83 c4 20             	add    esp,0x20
c002d71e:	39 f7                	cmp    edi,esi
c002d720:	75 c7                	jne    c002d6e9 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d722:	bb 0a 00 00 00       	mov    ebx,0xa
c002d727:	01 2d b0 1b 04 c0    	add    DWORD PTR ds:0xc0041bb0,ebp
c002d72d:	bd 10 27 00 00       	mov    ebp,0x2710
c002d732:	50                   	push   eax
c002d733:	50                   	push   eax
c002d734:	6a 0f                	push   0xf
c002d736:	6a 00                	push   0x0
c002d738:	e8 bc ef ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d73d:	5a                   	pop    edx
c002d73e:	0f b6 c0             	movzx  eax,al
c002d741:	59                   	pop    ecx
c002d742:	50                   	push   eax
c002d743:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d748:	99                   	cdq    
c002d749:	f7 fd                	idiv   ebp
c002d74b:	99                   	cdq    
c002d74c:	f7 fb                	idiv   ebx
c002d74e:	8d 42 30             	lea    eax,[edx+0x30]
c002d751:	0f b6 c0             	movzx  eax,al
c002d754:	50                   	push   eax
c002d755:	e8 8e ef ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d75a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d760:	5e                   	pop    esi
c002d761:	5f                   	pop    edi
c002d762:	bf e8 03 00 00       	mov    edi,0x3e8
c002d767:	6a 0f                	push   0xf
c002d769:	6a 00                	push   0x0
c002d76b:	e8 89 ef ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d770:	5a                   	pop    edx
c002d771:	0f b6 c0             	movzx  eax,al
c002d774:	59                   	pop    ecx
c002d775:	50                   	push   eax
c002d776:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d77b:	99                   	cdq    
c002d77c:	f7 ff                	idiv   edi
c002d77e:	99                   	cdq    
c002d77f:	f7 fb                	idiv   ebx
c002d781:	8d 42 30             	lea    eax,[edx+0x30]
c002d784:	0f b6 c0             	movzx  eax,al
c002d787:	50                   	push   eax
c002d788:	e8 5b ef ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d78d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d793:	5e                   	pop    esi
c002d794:	be 64 00 00 00       	mov    esi,0x64
c002d799:	58                   	pop    eax
c002d79a:	6a 0f                	push   0xf
c002d79c:	6a 00                	push   0x0
c002d79e:	e8 56 ef ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d7a3:	5a                   	pop    edx
c002d7a4:	0f b6 c0             	movzx  eax,al
c002d7a7:	59                   	pop    ecx
c002d7a8:	50                   	push   eax
c002d7a9:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d7ae:	99                   	cdq    
c002d7af:	f7 fe                	idiv   esi
c002d7b1:	99                   	cdq    
c002d7b2:	f7 fb                	idiv   ebx
c002d7b4:	8d 42 30             	lea    eax,[edx+0x30]
c002d7b7:	0f b6 c0             	movzx  eax,al
c002d7ba:	50                   	push   eax
c002d7bb:	e8 28 ef ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d7c0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d7c6:	58                   	pop    eax
c002d7c7:	5a                   	pop    edx
c002d7c8:	6a 0f                	push   0xf
c002d7ca:	6a 00                	push   0x0
c002d7cc:	e8 28 ef ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d7d1:	59                   	pop    ecx
c002d7d2:	0f b6 c0             	movzx  eax,al
c002d7d5:	5a                   	pop    edx
c002d7d6:	50                   	push   eax
c002d7d7:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d7dc:	99                   	cdq    
c002d7dd:	f7 fb                	idiv   ebx
c002d7df:	99                   	cdq    
c002d7e0:	f7 fb                	idiv   ebx
c002d7e2:	8d 42 30             	lea    eax,[edx+0x30]
c002d7e5:	0f b6 c0             	movzx  eax,al
c002d7e8:	50                   	push   eax
c002d7e9:	e8 fa ee ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d7ee:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d7f4:	59                   	pop    ecx
c002d7f5:	58                   	pop    eax
c002d7f6:	6a 0f                	push   0xf
c002d7f8:	6a 00                	push   0x0
c002d7fa:	e8 fa ee ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d7ff:	5a                   	pop    edx
c002d800:	0f b6 c0             	movzx  eax,al
c002d803:	59                   	pop    ecx
c002d804:	50                   	push   eax
c002d805:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d80a:	99                   	cdq    
c002d80b:	f7 fb                	idiv   ebx
c002d80d:	83 c2 30             	add    edx,0x30
c002d810:	0f b6 d2             	movzx  edx,dl
c002d813:	52                   	push   edx
c002d814:	e8 cf ee ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d819:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d81f:	58                   	pop    eax
c002d820:	5a                   	pop    edx
c002d821:	6a 0f                	push   0xf
c002d823:	6a 00                	push   0x0
c002d825:	e8 cf ee ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d82a:	59                   	pop    ecx
c002d82b:	0f b6 c0             	movzx  eax,al
c002d82e:	5a                   	pop    edx
c002d82f:	50                   	push   eax
c002d830:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d835:	99                   	cdq    
c002d836:	f7 fd                	idiv   ebp
c002d838:	99                   	cdq    
c002d839:	f7 fb                	idiv   ebx
c002d83b:	8d 42 30             	lea    eax,[edx+0x30]
c002d83e:	0f b6 c0             	movzx  eax,al
c002d841:	50                   	push   eax
c002d842:	e8 a1 ee ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d847:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d84d:	59                   	pop    ecx
c002d84e:	5d                   	pop    ebp
c002d84f:	6a 0f                	push   0xf
c002d851:	6a 00                	push   0x0
c002d853:	e8 a1 ee ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d858:	5a                   	pop    edx
c002d859:	0f b6 c0             	movzx  eax,al
c002d85c:	59                   	pop    ecx
c002d85d:	50                   	push   eax
c002d85e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d863:	99                   	cdq    
c002d864:	f7 ff                	idiv   edi
c002d866:	99                   	cdq    
c002d867:	f7 fb                	idiv   ebx
c002d869:	8d 42 30             	lea    eax,[edx+0x30]
c002d86c:	0f b6 c0             	movzx  eax,al
c002d86f:	50                   	push   eax
c002d870:	e8 73 ee ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d875:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d87b:	5f                   	pop    edi
c002d87c:	5d                   	pop    ebp
c002d87d:	6a 0f                	push   0xf
c002d87f:	6a 00                	push   0x0
c002d881:	e8 73 ee ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d886:	5a                   	pop    edx
c002d887:	0f b6 c0             	movzx  eax,al
c002d88a:	59                   	pop    ecx
c002d88b:	50                   	push   eax
c002d88c:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d891:	99                   	cdq    
c002d892:	f7 fe                	idiv   esi
c002d894:	99                   	cdq    
c002d895:	f7 fb                	idiv   ebx
c002d897:	8d 42 30             	lea    eax,[edx+0x30]
c002d89a:	0f b6 c0             	movzx  eax,al
c002d89d:	50                   	push   eax
c002d89e:	e8 45 ee ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d8a3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d8a9:	5e                   	pop    esi
c002d8aa:	5f                   	pop    edi
c002d8ab:	6a 0f                	push   0xf
c002d8ad:	6a 00                	push   0x0
c002d8af:	e8 45 ee ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d8b4:	5d                   	pop    ebp
c002d8b5:	0f b6 c0             	movzx  eax,al
c002d8b8:	5a                   	pop    edx
c002d8b9:	50                   	push   eax
c002d8ba:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d8bf:	99                   	cdq    
c002d8c0:	f7 fb                	idiv   ebx
c002d8c2:	99                   	cdq    
c002d8c3:	f7 fb                	idiv   ebx
c002d8c5:	8d 42 30             	lea    eax,[edx+0x30]
c002d8c8:	0f b6 c0             	movzx  eax,al
c002d8cb:	50                   	push   eax
c002d8cc:	e8 17 ee ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d8d1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d8d7:	59                   	pop    ecx
c002d8d8:	5e                   	pop    esi
c002d8d9:	6a 0f                	push   0xf
c002d8db:	6a 00                	push   0x0
c002d8dd:	e8 17 ee ff ff       	call   c002c6f9 <combineColours(unsigned char, unsigned char)>
c002d8e2:	5f                   	pop    edi
c002d8e3:	0f b6 c0             	movzx  eax,al
c002d8e6:	5d                   	pop    ebp
c002d8e7:	50                   	push   eax
c002d8e8:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d8ed:	99                   	cdq    
c002d8ee:	f7 fb                	idiv   ebx
c002d8f0:	83 c2 30             	add    edx,0x30
c002d8f3:	0f b6 d2             	movzx  edx,dl
c002d8f6:	52                   	push   edx
c002d8f7:	e8 ec ed ff ff       	call   c002c6e8 <combineCharAndColour(char, unsigned char)>
c002d8fc:	83 c4 10             	add    esp,0x10
c002d8ff:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d905:	31 c0                	xor    eax,eax
c002d907:	83 c4 1c             	add    esp,0x1c
c002d90a:	5b                   	pop    ebx
c002d90b:	5e                   	pop    esi
c002d90c:	5f                   	pop    edi
c002d90d:	5d                   	pop    ebp
c002d90e:	c3                   	ret    
c002d90f:	90                   	nop

c002d910 <SATAPI::write(unsigned long long, int, void*)>:
c002d910:	b8 03 00 00 00       	mov    eax,0x3
c002d915:	c3                   	ret    

c002d916 <SATAPI::close(int, int, void*)>:
c002d916:	83 ec 0c             	sub    esp,0xc
c002d919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d91d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d923:	85 c0                	test   eax,eax
c002d925:	74 0c                	je     c002d933 <SATAPI::close(int, int, void*)+0x1d>
c002d927:	83 ec 0c             	sub    esp,0xc
c002d92a:	8b 10                	mov    edx,DWORD PTR [eax]
c002d92c:	50                   	push   eax
c002d92d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d930:	83 c4 10             	add    esp,0x10
c002d933:	31 c0                	xor    eax,eax
c002d935:	83 c4 0c             	add    esp,0xc
c002d938:	c3                   	ret    
c002d939:	90                   	nop

c002d93a <SATAPI::SATAPI()>:
c002d93a:	83 ec 0c             	sub    esp,0xc
c002d93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d941:	83 ec 04             	sub    esp,0x4
c002d944:	68 00 08 00 00       	push   0x800
c002d949:	68 c4 41 03 c0       	push   0xc00341c4
c002d94e:	50                   	push   eax
c002d94f:	e8 92 e0 fe ff       	call   c001b9e6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d954:	83 c4 10             	add    esp,0x10
c002d957:	ba b8 42 03 c0       	mov    edx,0xc00342b8
c002d95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d960:	89 10                	mov    DWORD PTR [eax],edx
c002d962:	90                   	nop
c002d963:	83 c4 0c             	add    esp,0xc
c002d966:	c3                   	ret    
c002d967:	90                   	nop

c002d968 <SATAPI::diskRemoved()>:
c002d968:	c3                   	ret    
c002d969:	90                   	nop

c002d96a <SATAPI::diskInserted()>:
c002d96a:	83 ec 18             	sub    esp,0x18
c002d96d:	68 d0 41 03 c0       	push   0xc00341d0
c002d972:	e8 ce ba fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002d977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d97b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d982:	83 c4 1c             	add    esp,0x1c
c002d985:	c3                   	ret    

c002d986 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d986:	55                   	push   ebp
c002d987:	57                   	push   edi
c002d988:	56                   	push   esi
c002d989:	53                   	push   ebx
c002d98a:	83 ec 34             	sub    esp,0x34
c002d98d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d991:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d995:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d999:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d99d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d9a1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d9a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d9ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d9b1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d9b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d9bb:	83 c0 02             	add    eax,0x2
c002d9be:	c1 e0 07             	shl    eax,0x7
c002d9c1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d9c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d9c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d9cd:	c1 e0 07             	shl    eax,0x7
c002d9d0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d9d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d9d8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d9e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d9e6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d9ec:	e8 cb e4 ff ff       	call   c002bebc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d9f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d9f5:	83 c4 10             	add    esp,0x10
c002d9f8:	b8 01 00 00 00       	mov    eax,0x1
c002d9fd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002da02:	0f 84 53 02 00 00    	je     c002dc5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002da08:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002da0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002da12:	8b 00                	mov    eax,DWORD PTR [eax]
c002da14:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002da1a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002da20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002da24:	c1 e1 05             	shl    ecx,0x5
c002da27:	01 c8                	add    eax,ecx
c002da29:	8b 08                	mov    ecx,DWORD PTR [eax]
c002da2b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002da31:	81 c9 25 00 01 00    	or     ecx,0x10025
c002da37:	89 08                	mov    DWORD PTR [eax],ecx
c002da39:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002da3f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002da45:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002da4b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002da4e:	8d 7b 40             	lea    edi,[ebx+0x40]
c002da51:	50                   	push   eax
c002da52:	68 90 00 00 00       	push   0x90
c002da57:	6a 00                	push   0x0
c002da59:	53                   	push   ebx
c002da5a:	e8 91 2a fd ff       	call   c00004f0 <memset>
c002da5f:	b9 0c 00 00 00       	mov    ecx,0xc
c002da64:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002da68:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002da6a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002da70:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002da74:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002da7a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002da7e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002da82:	48                   	dec    eax
c002da83:	25 ff ff 3f 00       	and    eax,0x3fffff
c002da88:	89 c1                	mov    ecx,eax
c002da8a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002da90:	25 00 00 c0 ff       	and    eax,0xffc00000
c002da95:	09 c8                	or     eax,ecx
c002da97:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002da9d:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002daa3:	83 c8 80             	or     eax,0xffffff80
c002daa6:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002daac:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002daaf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002dab3:	25 00 7f 00 00       	and    eax,0x7f00
c002dab8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002dabc:	0d 27 80 ff ff       	or     eax,0xffff8027
c002dac1:	66 89 03             	mov    WORD PTR [ebx],ax
c002dac4:	89 d0                	mov    eax,edx
c002dac6:	c1 ea 18             	shr    edx,0x18
c002dac9:	c1 e8 10             	shr    eax,0x10
c002dacc:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002dacf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002dad2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002dad6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002dad9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002dadd:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002dae0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002dae4:	83 c4 10             	add    esp,0x10
c002dae7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002daeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002daef:	31 c0                	xor    eax,eax
c002daf1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002daf7:	80 e1 88             	and    cl,0x88
c002dafa:	74 0a                	je     c002db06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002dafc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002db01:	74 0a                	je     c002db0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002db03:	40                   	inc    eax
c002db04:	eb eb                	jmp    c002daf1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002db06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002db0b:	75 43                	jne    c002db50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002db0d:	83 ec 0c             	sub    esp,0xc
c002db10:	68 e8 41 03 c0       	push   0xc00341e8
c002db15:	e8 2b b9 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002db1a:	58                   	pop    eax
c002db1b:	5a                   	pop    edx
c002db1c:	68 fd 41 03 c0       	push   0xc00341fd
c002db21:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c002db27:	e8 7a 9a fe ff       	call   c00175a6 <VgaText::puts(char const*)>
c002db2c:	59                   	pop    ecx
c002db2d:	5b                   	pop    ebx
c002db2e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002db32:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002db38:	e8 19 e4 ff ff       	call   c002bf56 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002db3d:	5e                   	pop    esi
c002db3e:	5f                   	pop    edi
c002db3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002db43:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002db49:	e8 e8 e3 ff ff       	call   c002bf36 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002db4e:	eb 48                	jmp    c002db98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002db50:	be 01 00 00 00       	mov    esi,0x1
c002db55:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002db59:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002db5d:	d3 e6                	shl    esi,cl
c002db5f:	c1 e7 07             	shl    edi,0x7
c002db62:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002db68:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002db6d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002db71:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002db77:	85 c6                	test   esi,eax
c002db79:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002db7f:	0f 84 a3 00 00 00    	je     c002dc28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002db85:	0f ba e0 1e          	bt     eax,0x1e
c002db89:	73 1a                	jae    c002dba5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002db8b:	83 ec 0c             	sub    esp,0xc
c002db8e:	68 0f 42 03 c0       	push   0xc003420f
c002db93:	e8 ad b8 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002db98:	83 c4 10             	add    esp,0x10
c002db9b:	b8 01 00 00 00       	mov    eax,0x1
c002dba0:	e9 b6 00 00 00       	jmp    c002dc5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002dba5:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002dbab:	83 f8 0d             	cmp    eax,0xd
c002dbae:	77 0a                	ja     c002dbba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002dbb0:	83 ec 0c             	sub    esp,0xc
c002dbb3:	68 c8 00 00 00       	push   0xc8
c002dbb8:	eb 28                	jmp    c002dbe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002dbba:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002dbc0:	83 f8 0d             	cmp    eax,0xd
c002dbc3:	77 0a                	ja     c002dbcf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002dbc5:	83 ec 0c             	sub    esp,0xc
c002dbc8:	68 58 02 00 00       	push   0x258
c002dbcd:	eb 13                	jmp    c002dbe2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002dbcf:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002dbd5:	83 f8 06             	cmp    eax,0x6
c002dbd8:	77 10                	ja     c002dbea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002dbda:	83 ec 0c             	sub    esp,0xc
c002dbdd:	68 dc 05 00 00       	push   0x5dc
c002dbe2:	e8 7d 7d ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002dbe7:	83 c4 10             	add    esp,0x10
c002dbea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002dbee:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002dbf1:	75 06                	jne    c002dbf9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002dbf3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002dbf7:	74 15                	je     c002dc0e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002dbf9:	83 fb 06             	cmp    ebx,0x6
c002dbfc:	77 10                	ja     c002dc0e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002dbfe:	83 ec 0c             	sub    esp,0xc
c002dc01:	68 c4 09 00 00       	push   0x9c4
c002dc06:	e8 59 7d ff ff       	call   c0025964 <milliTenthSleep(unsigned int)>
c002dc0b:	83 c4 10             	add    esp,0x10
c002dc0e:	43                   	inc    ebx
c002dc0f:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002dc15:	0f 85 56 ff ff ff    	jne    c002db71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002dc1b:	83 ec 0c             	sub    esp,0xc
c002dc1e:	68 22 42 03 c0       	push   0xc0034222
c002dc23:	e9 6b ff ff ff       	jmp    c002db93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002dc28:	0f ba e0 1e          	bt     eax,0x1e
c002dc2c:	73 0d                	jae    c002dc3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002dc2e:	83 ec 0c             	sub    esp,0xc
c002dc31:	68 36 42 03 c0       	push   0xc0034236
c002dc36:	e9 58 ff ff ff       	jmp    c002db93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002dc3b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002dc40:	74 17                	je     c002dc59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002dc42:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002dc47:	74 10                	je     c002dc59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002dc49:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002dc4f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002dc53:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002dc57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002dc59:	31 c0                	xor    eax,eax
c002dc5b:	83 c4 2c             	add    esp,0x2c
c002dc5e:	5b                   	pop    ebx
c002dc5f:	5e                   	pop    esi
c002dc60:	5f                   	pop    edi
c002dc61:	5d                   	pop    ebp
c002dc62:	c3                   	ret    
c002dc63:	90                   	nop

c002dc64 <SATAPI::eject()>:
c002dc64:	57                   	push   edi
c002dc65:	b9 03 00 00 00       	mov    ecx,0x3
c002dc6a:	83 ec 18             	sub    esp,0x18
c002dc6d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002dc71:	fc                   	cld    
c002dc72:	31 c0                	xor    eax,eax
c002dc74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002dc76:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002dc7b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002dc80:	50                   	push   eax
c002dc81:	6a 00                	push   0x0
c002dc83:	6a 00                	push   0x0
c002dc85:	6a 00                	push   0x0
c002dc87:	6a 00                	push   0x0
c002dc89:	6a 02                	push   0x2
c002dc8b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002dc8f:	50                   	push   eax
c002dc90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002dc94:	e8 ed fc ff ff       	call   c002d986 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002dc99:	31 c0                	xor    eax,eax
c002dc9b:	83 c4 38             	add    esp,0x38
c002dc9e:	5f                   	pop    edi
c002dc9f:	c3                   	ret    

c002dca0 <SATAPI::detectMedia()>:
c002dca0:	53                   	push   ebx
c002dca1:	83 ec 14             	sub    esp,0x14
c002dca4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002dca8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002dcae:	e8 a5 f6 fe ff       	call   c001d358 <VCache::writeWriteBuffer()>
c002dcb3:	59                   	pop    ecx
c002dcb4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002dcba:	e8 89 f6 fe ff       	call   c001d348 <VCache::invalidateReadBuffer()>
c002dcbf:	c7 04 24 4b 42 03 c0 	mov    DWORD PTR [esp],0xc003424b
c002dcc6:	e8 7a b7 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002dccb:	83 c4 10             	add    esp,0x10
c002dcce:	31 c0                	xor    eax,eax
c002dcd0:	8b 14 85 80 03 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbfc80]
c002dcd7:	85 d2                	test   edx,edx
c002dcd9:	74 0f                	je     c002dcea <SATAPI::detectMedia()+0x4a>
c002dcdb:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002dce1:	75 07                	jne    c002dcea <SATAPI::detectMedia()+0x4a>
c002dce3:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002dcea:	40                   	inc    eax
c002dceb:	83 f8 1a             	cmp    eax,0x1a
c002dcee:	75 e0                	jne    c002dcd0 <SATAPI::detectMedia()+0x30>
c002dcf0:	83 c4 08             	add    esp,0x8
c002dcf3:	5b                   	pop    ebx
c002dcf4:	c3                   	ret    
c002dcf5:	90                   	nop

c002dcf6 <SATAPI::open(int, int, void*)>:
c002dcf6:	56                   	push   esi
c002dcf7:	53                   	push   ebx
c002dcf8:	51                   	push   ecx
c002dcf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002dcfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002dd01:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002dd0b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002dd11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002dd1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dd1f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002dd29:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002dd2f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002dd36:	e8 85 8b fe ff       	call   c00168c0 <Phys::allocatePage()>
c002dd3b:	89 c6                	mov    esi,eax
c002dd3d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002dd43:	81 c6 00 10 00 00    	add    esi,0x1000
c002dd49:	e8 72 8b fe ff       	call   c00168c0 <Phys::allocatePage()>
c002dd4e:	39 c6                	cmp    esi,eax
c002dd50:	74 10                	je     c002dd62 <SATAPI::open(int, int, void*)+0x6c>
c002dd52:	83 ec 0c             	sub    esp,0xc
c002dd55:	68 60 42 03 c0       	push   0xc0034260
c002dd5a:	e8 1f 2a ff ff       	call   c002077e <KePanic(char const*)>
c002dd5f:	83 c4 10             	add    esp,0x10
c002dd62:	83 ec 0c             	sub    esp,0xc
c002dd65:	6a 02                	push   0x2
c002dd67:	e8 a1 a3 fe ff       	call   c001810d <Virt::allocateKernelVirtualPages(int)>
c002dd6c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002dd72:	6a 03                	push   0x3
c002dd74:	50                   	push   eax
c002dd75:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002dd7b:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c002dd81:	e8 9a aa fe ff       	call   c0018820 <VAS::mapPage(unsigned long, unsigned long, int)>
c002dd86:	83 c4 14             	add    esp,0x14
c002dd89:	68 78 01 00 00       	push   0x178
c002dd8e:	e8 24 88 fe ff       	call   c00165b7 <malloc>
c002dd93:	83 c4 0c             	add    esp,0xc
c002dd96:	89 c6                	mov    esi,eax
c002dd98:	6a 00                	push   0x0
c002dd9a:	68 ff ff ff 7f       	push   0x7fffffff
c002dd9f:	6a 00                	push   0x0
c002dda1:	6a 00                	push   0x0
c002dda3:	53                   	push   ebx
c002dda4:	68 76 42 03 c0       	push   0xc0034276
c002dda9:	50                   	push   eax
c002ddaa:	e8 09 ea fe ff       	call   c001c7b8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002ddaf:	83 c4 14             	add    esp,0x14
c002ddb2:	56                   	push   esi
c002ddb3:	e8 c0 ea fe ff       	call   c001c878 <LogicalDisk::assignDriveLetter()>
c002ddb8:	5a                   	pop    edx
c002ddb9:	0f be c0             	movsx  eax,al
c002ddbc:	59                   	pop    ecx
c002ddbd:	50                   	push   eax
c002ddbe:	68 bc 40 03 c0       	push   0xc00340bc
c002ddc3:	e8 7d b6 fe ff       	call   c0019445 <Dbg::kprintf(char const*, ...)>
c002ddc8:	58                   	pop    eax
c002ddc9:	5a                   	pop    edx
c002ddca:	56                   	push   esi
c002ddcb:	53                   	push   ebx
c002ddcc:	e8 31 d8 fe ff       	call   c001b602 <Device::addChild(Device*)>
c002ddd1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002ddd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ddda:	e8 6f dc fe ff       	call   c001ba4e <PhysicalDisk::startCache()>
c002dddf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002dde6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002dde9:	e8 b2 fe ff ff       	call   c002dca0 <SATAPI::detectMedia()>
c002ddee:	83 c4 14             	add    esp,0x14
c002ddf1:	31 c0                	xor    eax,eax
c002ddf3:	5b                   	pop    ebx
c002ddf4:	5e                   	pop    esi
c002ddf5:	c3                   	ret    

c002ddf6 <SATAPI::read(unsigned long long, int, void*)>:
c002ddf6:	57                   	push   edi
c002ddf7:	56                   	push   esi
c002ddf8:	53                   	push   ebx
c002ddf9:	83 ec 30             	sub    esp,0x30
c002ddfc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002de00:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002de04:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002de08:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002de0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002de10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002de14:	83 fe 04             	cmp    esi,0x4
c002de17:	7e 10                	jle    c002de29 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002de19:	83 ec 0c             	sub    esp,0xc
c002de1c:	68 84 42 03 c0       	push   0xc0034284
c002de21:	e8 58 29 ff ff       	call   c002077e <KePanic(char const*)>
c002de26:	83 c4 10             	add    esp,0x10
c002de29:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002de2f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002de35:	51                   	push   ecx
c002de36:	50                   	push   eax
c002de37:	83 c0 02             	add    eax,0x2
c002de3a:	c1 e0 07             	shl    eax,0x7
c002de3d:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002de43:	50                   	push   eax
c002de44:	52                   	push   edx
c002de45:	e8 36 e1 ff ff       	call   c002bf80 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002de4a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002de4e:	b9 03 00 00 00       	mov    ecx,0x3
c002de53:	fc                   	cld    
c002de54:	31 c0                	xor    eax,eax
c002de56:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002de58:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002de5d:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002de62:	83 c4 0c             	add    esp,0xc
c002de65:	6a 00                	push   0x0
c002de67:	6a 00                	push   0x0
c002de69:	6a 00                	push   0x0
c002de6b:	6a 00                	push   0x0
c002de6d:	6a 02                	push   0x2
c002de6f:	8d 44 24 30          	lea    eax,[esp+0x30]
c002de73:	50                   	push   eax
c002de74:	53                   	push   ebx
c002de75:	e8 0c fb ff ff       	call   c002d986 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002de7a:	83 c4 20             	add    esp,0x20
c002de7d:	85 c0                	test   eax,eax
c002de7f:	75 44                	jne    c002dec5 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002de81:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002de85:	b9 03 00 00 00       	mov    ecx,0x3
c002de8a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002de8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002de90:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002de95:	0f c8                	bswap  eax
c002de97:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002de9b:	89 f0                	mov    eax,esi
c002de9d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002dea1:	50                   	push   eax
c002dea2:	56                   	push   esi
c002dea3:	c1 e6 0b             	shl    esi,0xb
c002dea6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002deaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002deae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002deb2:	56                   	push   esi
c002deb3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002deb7:	50                   	push   eax
c002deb8:	53                   	push   ebx
c002deb9:	e8 c8 fa ff ff       	call   c002d986 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002debe:	83 c4 20             	add    esp,0x20
c002dec1:	85 c0                	test   eax,eax
c002dec3:	74 14                	je     c002ded9 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002dec5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002dec9:	83 ec 0c             	sub    esp,0xc
c002decc:	53                   	push   ebx
c002decd:	e8 ce fd ff ff       	call   c002dca0 <SATAPI::detectMedia()>
c002ded2:	83 c4 10             	add    esp,0x10
c002ded5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ded9:	83 c4 30             	add    esp,0x30
c002dedc:	5b                   	pop    ebx
c002dedd:	5e                   	pop    esi
c002dede:	5f                   	pop    edi
c002dedf:	c3                   	ret    

c002dee0 <IOAPIC::close(int, int, void*)>:
c002dee0:	b8 00 00 00 00       	mov    eax,0x0
c002dee5:	c3                   	ret    

c002dee6 <apicGetBase()>:
c002dee6:	55                   	push   ebp
c002dee7:	89 e5                	mov    ebp,esp
c002dee9:	83 ec 18             	sub    esp,0x18
c002deec:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002def1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002def7:	83 e0 08             	and    eax,0x8
c002defa:	0f b6 c0             	movzx  eax,al
c002defd:	85 c0                	test   eax,eax
c002deff:	75 07                	jne    c002df08 <apicGetBase()+0x22>
c002df01:	b8 00 00 00 00       	mov    eax,0x0
c002df06:	eb 21                	jmp    c002df29 <apicGetBase()+0x43>
c002df08:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002df0d:	83 ec 08             	sub    esp,0x8
c002df10:	6a 1b                	push   0x1b
c002df12:	50                   	push   eax
c002df13:	e8 2c 7c fe ff       	call   c0015b44 <Computer::rdmsr(unsigned int)>
c002df18:	83 c4 10             	add    esp,0x10
c002df1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002df1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002df21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002df24:	25 00 00 ff ff       	and    eax,0xffff0000
c002df29:	c9                   	leave  
c002df2a:	c3                   	ret    
c002df2b:	90                   	nop

c002df2c <IOAPIC::IOAPIC()>:
c002df2c:	83 ec 0c             	sub    esp,0xc
c002df2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df33:	83 ec 08             	sub    esp,0x8
c002df36:	68 e8 42 03 c0       	push   0xc00342e8
c002df3b:	50                   	push   eax
c002df3c:	e8 23 d8 fe ff       	call   c001b764 <Device::Device(char const*)>
c002df41:	83 c4 10             	add    esp,0x10
c002df44:	ba f8 42 03 c0       	mov    edx,0xc00342f8
c002df49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df4d:	89 10                	mov    DWORD PTR [eax],edx
c002df4f:	90                   	nop
c002df50:	83 c4 0c             	add    esp,0xc
c002df53:	c3                   	ret    

c002df54 <apicOpen()>:
c002df54:	55                   	push   ebp
c002df55:	89 e5                	mov    ebp,esp
c002df57:	53                   	push   ebx
c002df58:	83 ec 34             	sub    esp,0x34
c002df5b:	a0 00 1c 04 c0       	mov    al,ds:0xc0041c00
c002df60:	83 f0 01             	xor    eax,0x1
c002df63:	0f b6 c0             	movzx  eax,al
c002df66:	85 c0                	test   eax,eax
c002df68:	0f 84 a3 00 00 00    	je     c002e011 <apicOpen()+0xbd>
c002df6e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002df72:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c002df77:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002df7b:	0f b6 c0             	movzx  eax,al
c002df7e:	39 c2                	cmp    edx,eax
c002df80:	0f 83 84 00 00 00    	jae    c002e00a <apicOpen()+0xb6>
c002df86:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002df8d:	83 ec 0c             	sub    esp,0xc
c002df90:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002df93:	e8 1f 86 fe ff       	call   c00165b7 <malloc>
c002df98:	83 c4 10             	add    esp,0x10
c002df9b:	89 c3                	mov    ebx,eax
c002df9d:	83 ec 0c             	sub    esp,0xc
c002dfa0:	53                   	push   ebx
c002dfa1:	e8 86 ff ff ff       	call   c002df2c <IOAPIC::IOAPIC()>
c002dfa6:	83 c4 10             	add    esp,0x10
c002dfa9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002dfac:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002dfb0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002dfb3:	89 14 85 e0 1b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbe420],edx
c002dfba:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c002dfbf:	83 c0 01             	add    eax,0x1
c002dfc2:	a3 c0 1b 04 c0       	mov    ds:0xc0041bc0,eax
c002dfc7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002dfcc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002dfd2:	83 ec 08             	sub    esp,0x8
c002dfd5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dfd8:	50                   	push   eax
c002dfd9:	e8 24 d6 fe ff       	call   c001b602 <Device::addChild(Device*)>
c002dfde:	83 c4 10             	add    esp,0x10
c002dfe1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dfe4:	8b 00                	mov    eax,DWORD PTR [eax]
c002dfe6:	83 c0 08             	add    eax,0x8
c002dfe9:	8b 00                	mov    eax,DWORD PTR [eax]
c002dfeb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002dfef:	6a 00                	push   0x0
c002dff1:	6a 00                	push   0x0
c002dff3:	52                   	push   edx
c002dff4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002dff7:	ff d0                	call   eax
c002dff9:	83 c4 10             	add    esp,0x10
c002dffc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002dfff:	83 c0 01             	add    eax,0x1
c002e002:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002e005:	e9 68 ff ff ff       	jmp    c002df72 <apicOpen()+0x1e>
c002e00a:	c6 05 00 1c 04 c0 01 	mov    BYTE PTR ds:0xc0041c00,0x1
c002e011:	e8 d0 fe ff ff       	call   c002dee6 <apicGetBase()>
c002e016:	05 f0 00 00 00       	add    eax,0xf0
c002e01b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e01e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002e021:	8b 00                	mov    eax,DWORD PTR [eax]
c002e023:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002e026:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002e02d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002e034:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002e037:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002e03a:	89 10                	mov    DWORD PTR [eax],edx
c002e03c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002e043:	a1 30 06 04 c0       	mov    eax,ds:0xc0040630
c002e048:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002e04b:	7d 7c                	jge    c002e0c9 <apicOpen()+0x175>
c002e04d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e050:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e057:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002e05a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e05d:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e064:	c1 e8 08             	shr    eax,0x8
c002e067:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002e06b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e06e:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e075:	c1 e8 18             	shr    eax,0x18
c002e078:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002e07b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002e07f:	3d ff 00 00 00       	cmp    eax,0xff
c002e084:	75 3a                	jne    c002e0c0 <apicOpen()+0x16c>
c002e086:	e8 5b fe ff ff       	call   c002dee6 <apicGetBase()>
c002e08b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002e08f:	83 fa 01             	cmp    edx,0x1
c002e092:	75 07                	jne    c002e09b <apicOpen()+0x147>
c002e094:	ba 60 03 00 00       	mov    edx,0x360
c002e099:	eb 05                	jmp    c002e0a0 <apicOpen()+0x14c>
c002e09b:	ba 50 03 00 00       	mov    edx,0x350
c002e0a0:	01 d0                	add    eax,edx
c002e0a2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e0a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c002e0aa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002e0ad:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002e0b4:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002e0b8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e0bb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002e0be:	89 10                	mov    DWORD PTR [eax],edx
c002e0c0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002e0c4:	e9 7a ff ff ff       	jmp    c002e043 <apicOpen()+0xef>
c002e0c9:	90                   	nop
c002e0ca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e0cd:	c9                   	leave  
c002e0ce:	c3                   	ret    
c002e0cf:	90                   	nop

c002e0d0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002e0d0:	55                   	push   ebp
c002e0d1:	89 e5                	mov    ebp,esp
c002e0d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002e0dc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002e0df:	72 1d                	jb     c002e0fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002e0e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0e4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002e0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e0ed:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002e0f3:	01 d0                	add    eax,edx
c002e0f5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002e0f8:	73 04                	jae    c002e0fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002e0fa:	b0 01                	mov    al,0x1
c002e0fc:	eb 02                	jmp    c002e100 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002e0fe:	b0 00                	mov    al,0x0
c002e100:	5d                   	pop    ebp
c002e101:	c3                   	ret    

c002e102 <IOAPIC::read(int)>:
c002e102:	55                   	push   ebp
c002e103:	89 e5                	mov    ebp,esp
c002e105:	83 ec 10             	sub    esp,0x10
c002e108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e10b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e111:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e114:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e117:	0f b6 d0             	movzx  edx,al
c002e11a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e11d:	89 10                	mov    DWORD PTR [eax],edx
c002e11f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e122:	83 c0 10             	add    eax,0x10
c002e125:	8b 00                	mov    eax,DWORD PTR [eax]
c002e127:	c9                   	leave  
c002e128:	c3                   	ret    
c002e129:	90                   	nop

c002e12a <IOAPIC::open(int, int, void*)>:
c002e12a:	55                   	push   ebp
c002e12b:	89 e5                	mov    ebp,esp
c002e12d:	57                   	push   edi
c002e12e:	56                   	push   esi
c002e12f:	53                   	push   ebx
c002e130:	83 ec 04             	sub    esp,0x4
c002e133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e136:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002e139:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e13f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e142:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e148:	8b 14 85 20 07 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf8e0]
c002e14f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e152:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e15b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e161:	8b 14 85 a0 07 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf860]
c002e168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e16b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002e171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e174:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002e17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e17d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e183:	0f b6 f0             	movzx  esi,al
c002e186:	89 d0                	mov    eax,edx
c002e188:	ba 00 00 00 00       	mov    edx,0x0
c002e18d:	89 c7                	mov    edi,eax
c002e18f:	83 e7 ff             	and    edi,0xffffffff
c002e192:	89 f9                	mov    ecx,edi
c002e194:	0f b6 da             	movzx  ebx,dl
c002e197:	89 c8                	mov    eax,ecx
c002e199:	89 da                	mov    edx,ebx
c002e19b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002e19e:	8d 5e 08             	lea    ebx,[esi+0x8]
c002e1a1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002e1a5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002e1a9:	83 e0 00             	and    eax,0x0
c002e1ac:	09 d0                	or     eax,edx
c002e1ae:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002e1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e1b5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e1bb:	8d 50 01             	lea    edx,[eax+0x1]
c002e1be:	88 d1                	mov    cl,dl
c002e1c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002e1c3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002e1c9:	0f b6 d0             	movzx  edx,al
c002e1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e1cf:	83 c2 08             	add    edx,0x8
c002e1d2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002e1d6:	0f b6 c9             	movzx  ecx,cl
c002e1d9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002e1df:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002e1e3:	6a 01                	push   0x1
c002e1e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e1e8:	e8 15 ff ff ff       	call   c002e102 <IOAPIC::read(int)>
c002e1ed:	83 c4 08             	add    esp,0x8
c002e1f0:	c1 f8 10             	sar    eax,0x10
c002e1f3:	0f b6 c0             	movzx  eax,al
c002e1f6:	8d 50 01             	lea    edx,[eax+0x1]
c002e1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e1fc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002e202:	b8 00 00 00 00       	mov    eax,0x0
c002e207:	8d 65 f4             	lea    esp,[ebp-0xc]
c002e20a:	5b                   	pop    ebx
c002e20b:	5e                   	pop    esi
c002e20c:	5f                   	pop    edi
c002e20d:	5d                   	pop    ebp
c002e20e:	c3                   	ret    
c002e20f:	90                   	nop

c002e210 <IOAPIC::write(int, int)>:
c002e210:	55                   	push   ebp
c002e211:	89 e5                	mov    ebp,esp
c002e213:	83 ec 10             	sub    esp,0x10
c002e216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e219:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e21f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e222:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e225:	0f b6 d0             	movzx  edx,al
c002e228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e22b:	89 10                	mov    DWORD PTR [eax],edx
c002e22d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e230:	8d 50 10             	lea    edx,[eax+0x10]
c002e233:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e236:	89 02                	mov    DWORD PTR [edx],eax
c002e238:	90                   	nop
c002e239:	c9                   	leave  
c002e23a:	c3                   	ret    
c002e23b:	90                   	nop

c002e23c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002e23c:	55                   	push   ebp
c002e23d:	89 e5                	mov    ebp,esp
c002e23f:	53                   	push   ebx
c002e240:	83 ec 2c             	sub    esp,0x2c
c002e243:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e246:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002e249:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002e24c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002e24f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002e252:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e255:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e258:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002e25b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002e25e:	88 d8                	mov    al,bl
c002e260:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002e263:	88 c8                	mov    al,cl
c002e265:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002e268:	88 d0                	mov    al,dl
c002e26a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002e26d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e271:	83 c0 08             	add    eax,0x8
c002e274:	01 c0                	add    eax,eax
c002e276:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002e279:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e27d:	83 c0 08             	add    eax,0x8
c002e280:	01 c0                	add    eax,eax
c002e282:	83 c0 01             	add    eax,0x1
c002e285:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002e288:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e28b:	50                   	push   eax
c002e28c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e28f:	e8 6e fe ff ff       	call   c002e102 <IOAPIC::read(int)>
c002e294:	83 c4 08             	add    esp,0x8
c002e297:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e29a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002e2a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e2a4:	c1 e0 18             	shl    eax,0x18
c002e2a7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002e2aa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002e2ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e2b0:	52                   	push   edx
c002e2b1:	50                   	push   eax
c002e2b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e2b5:	e8 56 ff ff ff       	call   c002e210 <IOAPIC::write(int, int)>
c002e2ba:	83 c4 0c             	add    esp,0xc
c002e2bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e2c0:	50                   	push   eax
c002e2c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e2c4:	e8 39 fe ff ff       	call   c002e102 <IOAPIC::read(int)>
c002e2c9:	83 c4 08             	add    esp,0x8
c002e2cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002e2cf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002e2d6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002e2dd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002e2e4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002e2e8:	85 c0                	test   eax,eax
c002e2ea:	74 09                	je     c002e2f5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002e2ec:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002e2f3:	eb 07                	jmp    c002e2fc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002e2f5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002e2fc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002e300:	85 c0                	test   eax,eax
c002e302:	74 09                	je     c002e30d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002e304:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002e30b:	eb 07                	jmp    c002e314 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002e30d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002e314:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002e31b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002e31f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002e322:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002e325:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e328:	52                   	push   edx
c002e329:	50                   	push   eax
c002e32a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e32d:	e8 de fe ff ff       	call   c002e210 <IOAPIC::write(int, int)>
c002e332:	83 c4 0c             	add    esp,0xc
c002e335:	90                   	nop
c002e336:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e339:	c9                   	leave  
c002e33a:	c3                   	ret    
c002e33b:	90                   	nop

c002e33c <APICTimer::close(int, int, void*)>:
c002e33c:	b8 00 00 00 00       	mov    eax,0x0
c002e341:	c3                   	ret    
c002e342:	66 90                	xchg   ax,ax

c002e344 <apicTimerHandler(regs*, void*)>:
c002e344:	83 ec 0c             	sub    esp,0xc
c002e347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e34b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002e34d:	b8 10 27 00 00       	mov    eax,0x2710
c002e352:	ba 00 00 00 00       	mov    edx,0x0
c002e357:	f7 f1                	div    ecx
c002e359:	83 ec 0c             	sub    esp,0xc
c002e35c:	50                   	push   eax
c002e35d:	e8 12 ed fe ff       	call   c001d074 <timerHandler(unsigned int)>
c002e362:	83 c4 10             	add    esp,0x10
c002e365:	90                   	nop
c002e366:	83 c4 0c             	add    esp,0xc
c002e369:	c3                   	ret    
c002e36a:	66 90                	xchg   ax,ax

c002e36c <APICTimer::open(int, int, void*)>:
c002e36c:	83 ec 0c             	sub    esp,0xc
c002e36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e373:	8b 00                	mov    eax,DWORD PTR [eax]
c002e375:	83 c0 24             	add    eax,0x24
c002e378:	8b 00                	mov    eax,DWORD PTR [eax]
c002e37a:	83 ec 08             	sub    esp,0x8
c002e37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e385:	ff d0                	call   eax
c002e387:	83 c4 10             	add    esp,0x10
c002e38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e38e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e392:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e39c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e3a0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002e3a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e3aa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002e3b0:	83 ec 0c             	sub    esp,0xc
c002e3b3:	51                   	push   ecx
c002e3b4:	6a 01                	push   0x1
c002e3b6:	68 44 e3 02 c0       	push   0xc002e344
c002e3bb:	52                   	push   edx
c002e3bc:	50                   	push   eax
c002e3bd:	e8 ec d1 fe ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e3c2:	83 c4 20             	add    esp,0x20
c002e3c5:	89 c2                	mov    edx,eax
c002e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3cb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e3d1:	b8 00 00 00 00       	mov    eax,0x0
c002e3d6:	83 c4 0c             	add    esp,0xc
c002e3d9:	c3                   	ret    
c002e3da:	66 90                	xchg   ax,ax

c002e3dc <APICTimer::write(int)>:
c002e3dc:	83 ec 0c             	sub    esp,0xc
c002e3df:	83 ec 0c             	sub    esp,0xc
c002e3e2:	68 1c 43 03 c0       	push   0xc003431c
c002e3e7:	e8 92 23 ff ff       	call   c002077e <KePanic(char const*)>
c002e3ec:	83 c4 10             	add    esp,0x10
c002e3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e3f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e3f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e3fd:	90                   	nop
c002e3fe:	83 c4 0c             	add    esp,0xc
c002e401:	c3                   	ret    
c002e402:	66 90                	xchg   ax,ax

c002e404 <APICTimer::APICTimer()>:
c002e404:	83 ec 0c             	sub    esp,0xc
c002e407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e40b:	83 ec 08             	sub    esp,0x8
c002e40e:	68 2c 43 03 c0       	push   0xc003432c
c002e413:	50                   	push   eax
c002e414:	e8 8f eb fe ff       	call   c001cfa8 <Timer::Timer(char const*)>
c002e419:	83 c4 10             	add    esp,0x10
c002e41c:	ba 40 43 03 c0       	mov    edx,0xc0034340
c002e421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e425:	89 10                	mov    DWORD PTR [eax],edx
c002e427:	90                   	nop
c002e428:	83 c4 0c             	add    esp,0xc
c002e42b:	c3                   	ret    

c002e42c <PIT::write(int)>:
c002e42c:	83 ec 10             	sub    esp,0x10
c002e42f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e437:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e43d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e441:	a3 04 1c 04 c0       	mov    ds:0xc0041c04,eax
c002e446:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e44b:	89 c2                	mov    edx,eax
c002e44d:	c1 fa 1f             	sar    edx,0x1f
c002e450:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e454:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e458:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e45f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e464:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e468:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e46d:	ee                   	out    dx,al
c002e46e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e472:	0f b6 c0             	movzx  eax,al
c002e475:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e47c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e480:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e484:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e489:	ee                   	out    dx,al
c002e48a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e48e:	c1 f8 08             	sar    eax,0x8
c002e491:	0f b6 c0             	movzx  eax,al
c002e494:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e49b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e49f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e4a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e4a8:	ee                   	out    dx,al
c002e4a9:	90                   	nop
c002e4aa:	83 c4 10             	add    esp,0x10
c002e4ad:	c3                   	ret    
c002e4ae:	66 90                	xchg   ax,ax

c002e4b0 <pitHandler(regs*, void*)>:
c002e4b0:	83 ec 0c             	sub    esp,0xc
c002e4b3:	8b 0d 04 1c 04 c0    	mov    ecx,DWORD PTR ds:0xc0041c04
c002e4b9:	b8 10 27 00 00       	mov    eax,0x2710
c002e4be:	89 c2                	mov    edx,eax
c002e4c0:	c1 fa 1f             	sar    edx,0x1f
c002e4c3:	f7 f9                	idiv   ecx
c002e4c5:	83 ec 0c             	sub    esp,0xc
c002e4c8:	50                   	push   eax
c002e4c9:	e8 a6 eb fe ff       	call   c001d074 <timerHandler(unsigned int)>
c002e4ce:	83 c4 10             	add    esp,0x10
c002e4d1:	90                   	nop
c002e4d2:	83 c4 0c             	add    esp,0xc
c002e4d5:	c3                   	ret    
c002e4d6:	66 90                	xchg   ax,ax

c002e4d8 <PIT::open(int, int, void*)>:
c002e4d8:	83 ec 0c             	sub    esp,0xc
c002e4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e4df:	8b 00                	mov    eax,DWORD PTR [eax]
c002e4e1:	83 c0 24             	add    eax,0x24
c002e4e4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e4e6:	83 ec 08             	sub    esp,0x8
c002e4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e4f1:	ff d0                	call   eax
c002e4f3:	83 c4 10             	add    esp,0x10
c002e4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e4fa:	83 ec 0c             	sub    esp,0xc
c002e4fd:	6a 00                	push   0x0
c002e4ff:	6a 01                	push   0x1
c002e501:	68 b0 e4 02 c0       	push   0xc002e4b0
c002e506:	6a 00                	push   0x0
c002e508:	50                   	push   eax
c002e509:	e8 a0 d0 fe ff       	call   c001b5ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e50e:	83 c4 20             	add    esp,0x20
c002e511:	89 c2                	mov    edx,eax
c002e513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e517:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e51d:	b8 00 00 00 00       	mov    eax,0x0
c002e522:	83 c4 0c             	add    esp,0xc
c002e525:	c3                   	ret    
c002e526:	66 90                	xchg   ax,ax

c002e528 <PIT::close(int, int, void*)>:
c002e528:	83 ec 0c             	sub    esp,0xc
c002e52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e52f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e53d:	6a 01                	push   0x1
c002e53f:	68 b0 e4 02 c0       	push   0xc002e4b0
c002e544:	6a 00                	push   0x0
c002e546:	50                   	push   eax
c002e547:	e8 98 d0 fe ff       	call   c001b5e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e54c:	83 c4 10             	add    esp,0x10
c002e54f:	b8 00 00 00 00       	mov    eax,0x0
c002e554:	83 c4 0c             	add    esp,0xc
c002e557:	c3                   	ret    

c002e558 <PIT::PIT()>:
c002e558:	83 ec 0c             	sub    esp,0xc
c002e55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e55f:	83 ec 08             	sub    esp,0x8
c002e562:	68 68 43 03 c0       	push   0xc0034368
c002e567:	50                   	push   eax
c002e568:	e8 3b ea fe ff       	call   c001cfa8 <Timer::Timer(char const*)>
c002e56d:	83 c4 10             	add    esp,0x10
c002e570:	ba 90 43 03 c0       	mov    edx,0xc0034390
c002e575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e579:	89 10                	mov    DWORD PTR [eax],edx
c002e57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e57f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e585:	0f b6 d0             	movzx  edx,al
c002e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e58c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e597:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e59d:	0f b6 d0             	movzx  edx,al
c002e5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5a4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e5b3:	8d 50 01             	lea    edx,[eax+0x1]
c002e5b6:	88 d1                	mov    cl,dl
c002e5b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e5bc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e5c2:	0f b6 d0             	movzx  edx,al
c002e5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5c9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e5cd:	83 e1 3f             	and    ecx,0x3f
c002e5d0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e5d4:	90                   	nop
c002e5d5:	83 c4 0c             	add    esp,0xc
c002e5d8:	c3                   	ret    
c002e5d9:	66 90                	xchg   ax,ax
c002e5db:	66 90                	xchg   ax,ax
c002e5dd:	66 90                	xchg   ax,ax
c002e5df:	90                   	nop

c002e5e0 <avxDetect>:
c002e5e0:	b8 01 00 00 00       	mov    eax,0x1
c002e5e5:	0f a2                	cpuid  
c002e5e7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e5ed:	74 15                	je     c002e604 <avxDetect.noAVX>
c002e5ef:	b8 01 00 00 00       	mov    eax,0x1
c002e5f4:	0f a2                	cpuid  
c002e5f6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e5fc:	74 06                	je     c002e604 <avxDetect.noAVX>
c002e5fe:	b8 01 00 00 00       	mov    eax,0x1
c002e603:	c3                   	ret    

c002e604 <avxDetect.noAVX>:
c002e604:	b8 00 00 00 00       	mov    eax,0x0
c002e609:	c3                   	ret    

c002e60a <avxSave>:
c002e60a:	53                   	push   ebx
c002e60b:	52                   	push   edx
c002e60c:	31 c0                	xor    eax,eax
c002e60e:	48                   	dec    eax
c002e60f:	89 c2                	mov    edx,eax
c002e611:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e615:	0f ae 23             	xsave  [ebx]
c002e618:	5a                   	pop    edx
c002e619:	5b                   	pop    ebx
c002e61a:	c3                   	ret    

c002e61b <avxLoad>:
c002e61b:	53                   	push   ebx
c002e61c:	52                   	push   edx
c002e61d:	31 c0                	xor    eax,eax
c002e61f:	48                   	dec    eax
c002e620:	89 c2                	mov    edx,eax
c002e622:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e626:	0f ae 2b             	xrstor [ebx]
c002e629:	5a                   	pop    edx
c002e62a:	5b                   	pop    ebx
c002e62b:	c3                   	ret    

c002e62c <avxInit>:
c002e62c:	e8 47 03 00 00       	call   c002e978 <sseInit>
c002e631:	50                   	push   eax
c002e632:	51                   	push   ecx
c002e633:	0f 20 e0             	mov    eax,cr4
c002e636:	0d 00 00 04 00       	or     eax,0x40000
c002e63b:	0f 22 e0             	mov    cr4,eax
c002e63e:	31 c9                	xor    ecx,ecx
c002e640:	0f 01 d0             	xgetbv 
c002e643:	0d 07 00 00 00       	or     eax,0x7
c002e648:	0f 01 d1             	xsetbv 
c002e64b:	59                   	pop    ecx
c002e64c:	58                   	pop    eax
c002e64d:	c3                   	ret    

c002e64e <avxClose>:
c002e64e:	c3                   	ret    
c002e64f:	90                   	nop

c002e650 <isr0>:
c002e650:	fa                   	cli    
c002e651:	68 00 00 00 00       	push   0x0
c002e656:	68 00 00 00 00       	push   0x0
c002e65b:	e9 56 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e660 <isr1>:
c002e660:	fa                   	cli    
c002e661:	6a 00                	push   0x0
c002e663:	6a 01                	push   0x1
c002e665:	e9 4c 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e66a <isr2>:
c002e66a:	fa                   	cli    
c002e66b:	6a 00                	push   0x0
c002e66d:	6a 02                	push   0x2
c002e66f:	e9 42 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e674 <isr3>:
c002e674:	fa                   	cli    
c002e675:	6a 00                	push   0x0
c002e677:	6a 03                	push   0x3
c002e679:	e9 38 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e67e <isr4>:
c002e67e:	fa                   	cli    
c002e67f:	6a 00                	push   0x0
c002e681:	6a 04                	push   0x4
c002e683:	e9 2e 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e688 <isr5>:
c002e688:	fa                   	cli    
c002e689:	6a 00                	push   0x0
c002e68b:	6a 05                	push   0x5
c002e68d:	e9 24 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e692 <isr6>:
c002e692:	fa                   	cli    
c002e693:	6a 00                	push   0x0
c002e695:	6a 06                	push   0x6
c002e697:	e9 1a 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e69c <isr7>:
c002e69c:	fa                   	cli    
c002e69d:	6a 00                	push   0x0
c002e69f:	6a 07                	push   0x7
c002e6a1:	e9 10 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6a6 <isr8>:
c002e6a6:	fa                   	cli    
c002e6a7:	6a 08                	push   0x8
c002e6a9:	e9 08 01 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6ae <isr9>:
c002e6ae:	fa                   	cli    
c002e6af:	6a 00                	push   0x0
c002e6b1:	6a 09                	push   0x9
c002e6b3:	e9 fe 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6b8 <isr10>:
c002e6b8:	fa                   	cli    
c002e6b9:	6a 0a                	push   0xa
c002e6bb:	e9 f6 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6c0 <isr11>:
c002e6c0:	fa                   	cli    
c002e6c1:	6a 0b                	push   0xb
c002e6c3:	e9 ee 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6c8 <isr12>:
c002e6c8:	fa                   	cli    
c002e6c9:	6a 0c                	push   0xc
c002e6cb:	e9 e6 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6d0 <isr13>:
c002e6d0:	fa                   	cli    
c002e6d1:	6a 0d                	push   0xd
c002e6d3:	53                   	push   ebx
c002e6d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e6d8:	81 fb a6 e8 02 c0    	cmp    ebx,0xc002e8a6
c002e6de:	5b                   	pop    ebx
c002e6df:	0f 84 c3 01 00 00    	je     c002e8a8 <finishSignal2>
c002e6e5:	e9 cc 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6ea <isr14>:
c002e6ea:	fa                   	cli    
c002e6eb:	6a 0e                	push   0xe
c002e6ed:	e9 c4 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6f2 <isr15>:
c002e6f2:	fa                   	cli    
c002e6f3:	6a 00                	push   0x0
c002e6f5:	6a 0f                	push   0xf
c002e6f7:	e9 ba 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e6fc <isr16>:
c002e6fc:	fa                   	cli    
c002e6fd:	6a 00                	push   0x0
c002e6ff:	6a 10                	push   0x10
c002e701:	e9 b0 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e706 <isr17>:
c002e706:	fa                   	cli    
c002e707:	6a 00                	push   0x0
c002e709:	6a 11                	push   0x11
c002e70b:	e9 a6 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e710 <isr18>:
c002e710:	fa                   	cli    
c002e711:	6a 00                	push   0x0
c002e713:	6a 12                	push   0x12
c002e715:	e9 9c 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e71a <irq3>:
c002e71a:	fa                   	cli    
c002e71b:	6a 00                	push   0x0
c002e71d:	6a 23                	push   0x23
c002e71f:	e9 92 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e724 <irq4>:
c002e724:	fa                   	cli    
c002e725:	6a 00                	push   0x0
c002e727:	6a 24                	push   0x24
c002e729:	e9 88 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e72e <irq5>:
c002e72e:	fa                   	cli    
c002e72f:	6a 00                	push   0x0
c002e731:	6a 25                	push   0x25
c002e733:	e9 7e 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e738 <irq6>:
c002e738:	fa                   	cli    
c002e739:	6a 00                	push   0x0
c002e73b:	6a 26                	push   0x26
c002e73d:	e9 74 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e742 <irq7>:
c002e742:	fa                   	cli    
c002e743:	6a 00                	push   0x0
c002e745:	6a 27                	push   0x27
c002e747:	e9 6a 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e74c <irq8>:
c002e74c:	fa                   	cli    
c002e74d:	6a 00                	push   0x0
c002e74f:	6a 28                	push   0x28
c002e751:	e9 60 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e756 <irq9>:
c002e756:	fa                   	cli    
c002e757:	6a 00                	push   0x0
c002e759:	6a 29                	push   0x29
c002e75b:	e9 56 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e760 <irq10>:
c002e760:	fa                   	cli    
c002e761:	6a 00                	push   0x0
c002e763:	6a 2a                	push   0x2a
c002e765:	e9 4c 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e76a <irq11>:
c002e76a:	fa                   	cli    
c002e76b:	6a 00                	push   0x0
c002e76d:	6a 2b                	push   0x2b
c002e76f:	e9 42 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e774 <irq12>:
c002e774:	fa                   	cli    
c002e775:	6a 00                	push   0x0
c002e777:	6a 2c                	push   0x2c
c002e779:	e9 38 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e77e <irq13>:
c002e77e:	fa                   	cli    
c002e77f:	6a 00                	push   0x0
c002e781:	6a 2d                	push   0x2d
c002e783:	e9 2e 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e788 <irq14>:
c002e788:	fa                   	cli    
c002e789:	6a 00                	push   0x0
c002e78b:	6a 2e                	push   0x2e
c002e78d:	e9 24 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e792 <irq15>:
c002e792:	fa                   	cli    
c002e793:	6a 00                	push   0x0
c002e795:	6a 2f                	push   0x2f
c002e797:	e9 1a 00 00 00       	jmp    c002e7b6 <int_common_stub>

c002e79c <irq1>:
c002e79c:	fa                   	cli    
c002e79d:	6a 00                	push   0x0
c002e79f:	6a 21                	push   0x21
c002e7a1:	eb 13                	jmp    c002e7b6 <int_common_stub>

c002e7a3 <irq2>:
c002e7a3:	fa                   	cli    
c002e7a4:	6a 00                	push   0x0
c002e7a6:	6a 22                	push   0x22
c002e7a8:	eb 0c                	jmp    c002e7b6 <int_common_stub>

c002e7aa <isr96>:
c002e7aa:	6a 00                	push   0x0
c002e7ac:	6a 60                	push   0x60
c002e7ae:	fb                   	sti    
c002e7af:	eb 37                	jmp    c002e7e8 <syscall_common_stub>

c002e7b1 <irq0>:
c002e7b1:	fa                   	cli    
c002e7b2:	6a 00                	push   0x0
c002e7b4:	6a 20                	push   0x20

c002e7b6 <int_common_stub>:
c002e7b6:	60                   	pusha  
c002e7b7:	1e                   	push   ds
c002e7b8:	06                   	push   es
c002e7b9:	0f a0                	push   fs
c002e7bb:	0f a8                	push   gs
c002e7bd:	66 b8 10 00          	mov    ax,0x10
c002e7c1:	66 8e d8             	mov    ds,ax
c002e7c4:	66 8e c0             	mov    es,ax
c002e7c7:	66 8e e0             	mov    fs,ax
c002e7ca:	66 8e e8             	mov    gs,ax
c002e7cd:	54                   	push   esp
c002e7ce:	fc                   	cld    
c002e7cf:	e8 f0 d2 fe ff       	call   c001bac4 <int_handler>
c002e7d4:	81 c4 04 00 00 00    	add    esp,0x4
c002e7da:	0f a9                	pop    gs
c002e7dc:	0f a1                	pop    fs
c002e7de:	07                   	pop    es
c002e7df:	1f                   	pop    ds
c002e7e0:	61                   	popa   
c002e7e1:	81 c4 08 00 00 00    	add    esp,0x8
c002e7e7:	cf                   	iret   

c002e7e8 <syscall_common_stub>:
c002e7e8:	60                   	pusha  
c002e7e9:	1e                   	push   ds
c002e7ea:	06                   	push   es
c002e7eb:	0f a0                	push   fs
c002e7ed:	0f a8                	push   gs
c002e7ef:	66 b8 10 00          	mov    ax,0x10
c002e7f3:	66 8e d8             	mov    ds,ax
c002e7f6:	66 8e c0             	mov    es,ax
c002e7f9:	66 8e e0             	mov    fs,ax
c002e7fc:	66 8e e8             	mov    gs,ax
c002e7ff:	54                   	push   esp
c002e800:	fc                   	cld    
c002e801:	e8 be d2 fe ff       	call   c001bac4 <int_handler>
c002e806:	81 c4 04 00 00 00    	add    esp,0x4
c002e80c:	0f a9                	pop    gs
c002e80e:	0f a1                	pop    fs
c002e810:	07                   	pop    es
c002e811:	1f                   	pop    ds
c002e812:	e8 94 29 ff ff       	call   c00211ab <KiCheckSignalZ>
c002e817:	3d 00 00 00 00       	cmp    eax,0x0
c002e81c:	0f 84 c0 00 00 00    	je     c002e8e2 <skipSignals>
c002e822:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e827:	61                   	popa   
c002e828:	53                   	push   ebx
c002e829:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e82f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e832:	5b                   	pop    ebx
c002e833:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e838:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e83b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e83e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e841:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e844:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e847:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e84a:	81 c4 08 00 00 00    	add    esp,0x8
c002e850:	5e                   	pop    esi
c002e851:	5b                   	pop    ebx
c002e852:	59                   	pop    ecx
c002e853:	5a                   	pop    edx
c002e854:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e857:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e85a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e85d:	52                   	push   edx
c002e85e:	51                   	push   ecx
c002e85f:	53                   	push   ebx
c002e860:	56                   	push   esi
c002e861:	81 ec 08 00 00 00    	sub    esp,0x8
c002e867:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e86a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e86d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e870:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e873:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e876:	60                   	pusha  
c002e877:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e87d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e880:	89 e3                	mov    ebx,esp
c002e882:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e885:	52                   	push   edx
c002e886:	68 a6 e8 02 c0       	push   0xc002e8a6
c002e88b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e88e:	89 dc                	mov    esp,ebx
c002e890:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e893:	68 23 00 00 00       	push   0x23
c002e898:	51                   	push   ecx
c002e899:	68 02 02 00 00       	push   0x202
c002e89e:	68 1b 00 00 00       	push   0x1b
c002e8a3:	ff 36                	push   DWORD PTR [esi]
c002e8a5:	cf                   	iret   

c002e8a6 <finishSignal>:
c002e8a6:	cd 0f                	int    0xf

c002e8a8 <finishSignal2>:
c002e8a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e8ae:	e8 75 29 ff ff       	call   c0021228 <KiFinishSignalZ>
c002e8b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e8b9:	68 23 00 00 00       	push   0x23
c002e8be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e8c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e8c4:	68 1b 00 00 00       	push   0x1b
c002e8c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e8cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e8cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e8d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e8d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e8d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e8db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e8de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e8e1:	cf                   	iret   

c002e8e2 <skipSignals>:
c002e8e2:	61                   	popa   
c002e8e3:	81 c4 08 00 00 00    	add    esp,0x8
c002e8e9:	cf                   	iret   
c002e8ea:	90                   	nop
c002e8eb:	90                   	nop

c002e8ec <irq16>:
c002e8ec:	fa                   	cli    
c002e8ed:	6a 00                	push   0x0
c002e8ef:	6a 30                	push   0x30
c002e8f1:	e9 c0 fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e8f6 <irq17>:
c002e8f6:	fa                   	cli    
c002e8f7:	6a 00                	push   0x0
c002e8f9:	6a 31                	push   0x31
c002e8fb:	e9 b6 fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e900 <irq18>:
c002e900:	fa                   	cli    
c002e901:	6a 00                	push   0x0
c002e903:	6a 32                	push   0x32
c002e905:	e9 ac fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e90a <irq19>:
c002e90a:	fa                   	cli    
c002e90b:	6a 00                	push   0x0
c002e90d:	6a 33                	push   0x33
c002e90f:	e9 a2 fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e914 <irq20>:
c002e914:	fa                   	cli    
c002e915:	6a 00                	push   0x0
c002e917:	6a 34                	push   0x34
c002e919:	e9 98 fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e91e <irq21>:
c002e91e:	fa                   	cli    
c002e91f:	6a 00                	push   0x0
c002e921:	6a 35                	push   0x35
c002e923:	e9 8e fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e928 <irq22>:
c002e928:	fa                   	cli    
c002e929:	6a 00                	push   0x0
c002e92b:	6a 36                	push   0x36
c002e92d:	e9 84 fe ff ff       	jmp    c002e7b6 <int_common_stub>

c002e932 <irq23>:
c002e932:	fa                   	cli    
c002e933:	6a 00                	push   0x0
c002e935:	6a 37                	push   0x37
c002e937:	e9 7a fe ff ff       	jmp    c002e7b6 <int_common_stub>
c002e93c:	66 90                	xchg   ax,ax
c002e93e:	66 90                	xchg   ax,ax

c002e940 <i386GetRDRAND>:
c002e940:	b9 64 00 00 00       	mov    ecx,0x64

c002e945 <retry>:
c002e945:	0f c7 f0             	rdrand eax
c002e948:	72 05                	jb     c002e94f <retry.done>
c002e94a:	e2 f9                	loop   c002e945 <retry>

c002e94c <retry.fail>:
c002e94c:	31 c0                	xor    eax,eax
c002e94e:	c3                   	ret    

c002e94f <retry.done>:
c002e94f:	c3                   	ret    

c002e950 <sseDetect>:
c002e950:	b8 01 00 00 00       	mov    eax,0x1
c002e955:	0f a2                	cpuid  
c002e957:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e95d:	74 06                	je     c002e965 <sseDetect.noSSE>
c002e95f:	b8 01 00 00 00       	mov    eax,0x1
c002e964:	c3                   	ret    

c002e965 <sseDetect.noSSE>:
c002e965:	31 c0                	xor    eax,eax
c002e967:	c3                   	ret    

c002e968 <sseSave>:
c002e968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e96c:	0f ae 00             	fxsave [eax]
c002e96f:	c3                   	ret    

c002e970 <sseLoad>:
c002e970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e974:	0f ae 08             	fxrstor [eax]
c002e977:	c3                   	ret    

c002e978 <sseInit>:
c002e978:	e8 42 00 00 00       	call   c002e9bf <x87Init>
c002e97d:	0f 20 e0             	mov    eax,cr4
c002e980:	66 0d 00 06          	or     ax,0x600
c002e984:	0f 22 e0             	mov    cr4,eax
c002e987:	c3                   	ret    

c002e988 <sseClose>:
c002e988:	c3                   	ret    
c002e989:	66 90                	xchg   ax,ax
c002e98b:	66 90                	xchg   ax,ax
c002e98d:	66 90                	xchg   ax,ax
c002e98f:	90                   	nop

c002e990 <value_37F>:
c002e990:	7f 03                	jg     c002e995 <value_37A+0x1>

c002e992 <value_37E>:
c002e992:	7e 03                	jle    c002e997 <x87Detect+0x1>

c002e994 <value_37A>:
c002e994:	7a 03                	jp     c002e999 <x87Detect+0x3>

c002e996 <x87Detect>:
c002e996:	b8 01 00 00 00       	mov    eax,0x1
c002e99b:	0f a2                	cpuid  
c002e99d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e9a3:	74 06                	je     c002e9ab <x87Detect.nox87>
c002e9a5:	b8 01 00 00 00       	mov    eax,0x1
c002e9aa:	c3                   	ret    

c002e9ab <x87Detect.nox87>:
c002e9ab:	b8 00 00 00 00       	mov    eax,0x0
c002e9b0:	c3                   	ret    

c002e9b1 <x87Save>:
c002e9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9b5:	dd 30                	fnsave [eax]
c002e9b7:	c3                   	ret    

c002e9b8 <x87Load>:
c002e9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9bc:	dd 20                	frstor [eax]
c002e9be:	c3                   	ret    

c002e9bf <x87Init>:
c002e9bf:	0f 20 c0             	mov    eax,cr0
c002e9c2:	66 25 fb ff          	and    ax,0xfffb
c002e9c6:	66 0d 22 00          	or     ax,0x22
c002e9ca:	0f 22 c0             	mov    cr0,eax
c002e9cd:	db e3                	fninit 
c002e9cf:	0f 06                	clts   
c002e9d1:	d9 2d 94 e9 02 c0    	fldcw  WORD PTR ds:0xc002e994
c002e9d7:	c3                   	ret    

c002e9d8 <x87Close>:
c002e9d8:	c3                   	ret    
c002e9d9:	66 90                	xchg   ax,ax
c002e9db:	90                   	nop

c002e9dc <__do_global_ctors_aux>:
c002e9dc:	a1 90 f9 02 c0       	mov    eax,ds:0xc002f990
c002e9e1:	83 f8 ff             	cmp    eax,0xffffffff
c002e9e4:	74 1a                	je     c002ea00 <__do_global_ctors_aux+0x24>
c002e9e6:	55                   	push   ebp
c002e9e7:	89 e5                	mov    ebp,esp
c002e9e9:	53                   	push   ebx
c002e9ea:	52                   	push   edx
c002e9eb:	bb 90 f9 02 c0       	mov    ebx,0xc002f990
c002e9f0:	ff d0                	call   eax
c002e9f2:	83 eb 04             	sub    ebx,0x4
c002e9f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e9f7:	83 f8 ff             	cmp    eax,0xffffffff
c002e9fa:	75 f4                	jne    c002e9f0 <__do_global_ctors_aux+0x14>
c002e9fc:	58                   	pop    eax
c002e9fd:	5b                   	pop    ebx
c002e9fe:	5d                   	pop    ebp
c002e9ff:	c3                   	ret    
c002ea00:	c3                   	ret    
c002ea01:	66 90                	xchg   ax,ax
c002ea03:	90                   	nop

c002ea04 <__divdi3>:
c002ea04:	55                   	push   ebp
c002ea05:	57                   	push   edi
c002ea06:	56                   	push   esi
c002ea07:	53                   	push   ebx
c002ea08:	83 ec 1c             	sub    esp,0x1c
c002ea0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ea0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ea13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002ea16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002ea1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002ea1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002ea22:	85 db                	test   ebx,ebx
c002ea24:	0f 88 8e 00 00 00    	js     c002eab8 <__divdi3+0xb4>
c002ea2a:	89 dd                	mov    ebp,ebx
c002ea2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002ea34:	89 d3                	mov    ebx,edx
c002ea36:	85 d2                	test   edx,edx
c002ea38:	79 0d                	jns    c002ea47 <__divdi3+0x43>
c002ea3a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002ea3e:	f7 d8                	neg    eax
c002ea40:	83 d2 00             	adc    edx,0x0
c002ea43:	f7 da                	neg    edx
c002ea45:	89 d3                	mov    ebx,edx
c002ea47:	89 c7                	mov    edi,eax
c002ea49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ea4c:	85 db                	test   ebx,ebx
c002ea4e:	75 48                	jne    c002ea98 <__divdi3+0x94>
c002ea50:	39 ef                	cmp    edi,ebp
c002ea52:	76 24                	jbe    c002ea78 <__divdi3+0x74>
c002ea54:	89 ea                	mov    edx,ebp
c002ea56:	f7 f7                	div    edi
c002ea58:	89 c1                	mov    ecx,eax
c002ea5a:	31 f6                	xor    esi,esi
c002ea5c:	89 c8                	mov    eax,ecx
c002ea5e:	89 f2                	mov    edx,esi
c002ea60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ea64:	85 c9                	test   ecx,ecx
c002ea66:	74 07                	je     c002ea6f <__divdi3+0x6b>
c002ea68:	f7 d8                	neg    eax
c002ea6a:	83 d2 00             	adc    edx,0x0
c002ea6d:	f7 da                	neg    edx
c002ea6f:	83 c4 1c             	add    esp,0x1c
c002ea72:	5b                   	pop    ebx
c002ea73:	5e                   	pop    esi
c002ea74:	5f                   	pop    edi
c002ea75:	5d                   	pop    ebp
c002ea76:	c3                   	ret    
c002ea77:	90                   	nop
c002ea78:	85 ff                	test   edi,edi
c002ea7a:	75 0b                	jne    c002ea87 <__divdi3+0x83>
c002ea7c:	b8 01 00 00 00       	mov    eax,0x1
c002ea81:	31 d2                	xor    edx,edx
c002ea83:	f7 f3                	div    ebx
c002ea85:	89 c7                	mov    edi,eax
c002ea87:	31 d2                	xor    edx,edx
c002ea89:	89 e8                	mov    eax,ebp
c002ea8b:	f7 f7                	div    edi
c002ea8d:	89 c6                	mov    esi,eax
c002ea8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ea92:	f7 f7                	div    edi
c002ea94:	89 c1                	mov    ecx,eax
c002ea96:	eb c4                	jmp    c002ea5c <__divdi3+0x58>
c002ea98:	39 eb                	cmp    ebx,ebp
c002ea9a:	77 3c                	ja     c002ead8 <__divdi3+0xd4>
c002ea9c:	0f bd f3             	bsr    esi,ebx
c002ea9f:	83 f6 1f             	xor    esi,0x1f
c002eaa2:	75 40                	jne    c002eae4 <__divdi3+0xe0>
c002eaa4:	39 eb                	cmp    ebx,ebp
c002eaa6:	72 09                	jb     c002eab1 <__divdi3+0xad>
c002eaa8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002eaab:	0f 87 97 00 00 00    	ja     c002eb48 <__divdi3+0x144>
c002eab1:	b9 01 00 00 00       	mov    ecx,0x1
c002eab6:	eb a4                	jmp    c002ea5c <__divdi3+0x58>
c002eab8:	f7 d9                	neg    ecx
c002eaba:	83 d3 00             	adc    ebx,0x0
c002eabd:	f7 db                	neg    ebx
c002eabf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002eac2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002eac6:	89 dd                	mov    ebp,ebx
c002eac8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002ead0:	e9 5f ff ff ff       	jmp    c002ea34 <__divdi3+0x30>
c002ead5:	8d 76 00             	lea    esi,[esi+0x0]
c002ead8:	31 f6                	xor    esi,esi
c002eada:	31 c9                	xor    ecx,ecx
c002eadc:	e9 7b ff ff ff       	jmp    c002ea5c <__divdi3+0x58>
c002eae1:	8d 76 00             	lea    esi,[esi+0x0]
c002eae4:	b8 20 00 00 00       	mov    eax,0x20
c002eae9:	29 f0                	sub    eax,esi
c002eaeb:	89 f1                	mov    ecx,esi
c002eaed:	d3 e3                	shl    ebx,cl
c002eaef:	89 fa                	mov    edx,edi
c002eaf1:	88 c1                	mov    cl,al
c002eaf3:	d3 ea                	shr    edx,cl
c002eaf5:	09 da                	or     edx,ebx
c002eaf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002eafb:	89 f1                	mov    ecx,esi
c002eafd:	d3 e7                	shl    edi,cl
c002eaff:	89 eb                	mov    ebx,ebp
c002eb01:	88 c1                	mov    cl,al
c002eb03:	d3 eb                	shr    ebx,cl
c002eb05:	89 f1                	mov    ecx,esi
c002eb07:	d3 e5                	shl    ebp,cl
c002eb09:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002eb0c:	88 c1                	mov    cl,al
c002eb0e:	d3 ea                	shr    edx,cl
c002eb10:	09 d5                	or     ebp,edx
c002eb12:	89 e8                	mov    eax,ebp
c002eb14:	89 da                	mov    edx,ebx
c002eb16:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002eb1a:	89 d3                	mov    ebx,edx
c002eb1c:	89 c5                	mov    ebp,eax
c002eb1e:	f7 e7                	mul    edi
c002eb20:	39 d3                	cmp    ebx,edx
c002eb22:	72 18                	jb     c002eb3c <__divdi3+0x138>
c002eb24:	74 0a                	je     c002eb30 <__divdi3+0x12c>
c002eb26:	89 e9                	mov    ecx,ebp
c002eb28:	31 f6                	xor    esi,esi
c002eb2a:	e9 2d ff ff ff       	jmp    c002ea5c <__divdi3+0x58>
c002eb2f:	90                   	nop
c002eb30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002eb33:	89 f1                	mov    ecx,esi
c002eb35:	d3 e7                	shl    edi,cl
c002eb37:	39 c7                	cmp    edi,eax
c002eb39:	73 eb                	jae    c002eb26 <__divdi3+0x122>
c002eb3b:	90                   	nop
c002eb3c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002eb3f:	31 f6                	xor    esi,esi
c002eb41:	e9 16 ff ff ff       	jmp    c002ea5c <__divdi3+0x58>
c002eb46:	66 90                	xchg   ax,ax
c002eb48:	31 c9                	xor    ecx,ecx
c002eb4a:	e9 0d ff ff ff       	jmp    c002ea5c <__divdi3+0x58>
c002eb4f:	90                   	nop

c002eb50 <__moddi3>:
c002eb50:	55                   	push   ebp
c002eb51:	57                   	push   edi
c002eb52:	56                   	push   esi
c002eb53:	53                   	push   ebx
c002eb54:	83 ec 2c             	sub    esp,0x2c
c002eb57:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002eb5b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002eb5f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002eb63:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002eb67:	85 db                	test   ebx,ebx
c002eb69:	0f 88 85 00 00 00    	js     c002ebf4 <__moddi3+0xa4>
c002eb6f:	89 de                	mov    esi,ebx
c002eb71:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002eb79:	89 d7                	mov    edi,edx
c002eb7b:	85 d2                	test   edx,edx
c002eb7d:	79 09                	jns    c002eb88 <__moddi3+0x38>
c002eb7f:	f7 d8                	neg    eax
c002eb81:	83 d2 00             	adc    edx,0x0
c002eb84:	f7 da                	neg    edx
c002eb86:	89 d7                	mov    edi,edx
c002eb88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002eb8c:	89 cd                	mov    ebp,ecx
c002eb8e:	85 ff                	test   edi,edi
c002eb90:	75 52                	jne    c002ebe4 <__moddi3+0x94>
c002eb92:	89 c3                	mov    ebx,eax
c002eb94:	39 f0                	cmp    eax,esi
c002eb96:	76 24                	jbe    c002ebbc <__moddi3+0x6c>
c002eb98:	89 c8                	mov    eax,ecx
c002eb9a:	89 f2                	mov    edx,esi
c002eb9c:	f7 f3                	div    ebx
c002eb9e:	89 d6                	mov    esi,edx
c002eba0:	89 f0                	mov    eax,esi
c002eba2:	31 d2                	xor    edx,edx
c002eba4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002eba8:	85 c9                	test   ecx,ecx
c002ebaa:	74 07                	je     c002ebb3 <__moddi3+0x63>
c002ebac:	f7 d8                	neg    eax
c002ebae:	83 d2 00             	adc    edx,0x0
c002ebb1:	f7 da                	neg    edx
c002ebb3:	83 c4 2c             	add    esp,0x2c
c002ebb6:	5b                   	pop    ebx
c002ebb7:	5e                   	pop    esi
c002ebb8:	5f                   	pop    edi
c002ebb9:	5d                   	pop    ebp
c002ebba:	c3                   	ret    
c002ebbb:	90                   	nop
c002ebbc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002ebc0:	85 db                	test   ebx,ebx
c002ebc2:	75 0d                	jne    c002ebd1 <__moddi3+0x81>
c002ebc4:	b8 01 00 00 00       	mov    eax,0x1
c002ebc9:	31 d2                	xor    edx,edx
c002ebcb:	f7 f7                	div    edi
c002ebcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ebd1:	89 f0                	mov    eax,esi
c002ebd3:	31 d2                	xor    edx,edx
c002ebd5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002ebd9:	f7 f7                	div    edi
c002ebdb:	89 e8                	mov    eax,ebp
c002ebdd:	f7 f7                	div    edi
c002ebdf:	89 d6                	mov    esi,edx
c002ebe1:	eb bd                	jmp    c002eba0 <__moddi3+0x50>
c002ebe3:	90                   	nop
c002ebe4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002ebe8:	39 f7                	cmp    edi,esi
c002ebea:	76 20                	jbe    c002ec0c <__moddi3+0xbc>
c002ebec:	89 c8                	mov    eax,ecx
c002ebee:	89 f2                	mov    edx,esi
c002ebf0:	eb b2                	jmp    c002eba4 <__moddi3+0x54>
c002ebf2:	66 90                	xchg   ax,ax
c002ebf4:	f7 d9                	neg    ecx
c002ebf6:	83 d3 00             	adc    ebx,0x0
c002ebf9:	f7 db                	neg    ebx
c002ebfb:	89 de                	mov    esi,ebx
c002ebfd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002ec05:	e9 6f ff ff ff       	jmp    c002eb79 <__moddi3+0x29>
c002ec0a:	66 90                	xchg   ax,ax
c002ec0c:	0f bd c7             	bsr    eax,edi
c002ec0f:	83 f0 1f             	xor    eax,0x1f
c002ec12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002ec16:	75 24                	jne    c002ec3c <__moddi3+0xec>
c002ec18:	39 f7                	cmp    edi,esi
c002ec1a:	72 06                	jb     c002ec22 <__moddi3+0xd2>
c002ec1c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002ec20:	77 0c                	ja     c002ec2e <__moddi3+0xde>
c002ec22:	89 e9                	mov    ecx,ebp
c002ec24:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002ec28:	19 fe                	sbb    esi,edi
c002ec2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002ec2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002ec32:	89 f2                	mov    edx,esi
c002ec34:	e9 6b ff ff ff       	jmp    c002eba4 <__moddi3+0x54>
c002ec39:	8d 76 00             	lea    esi,[esi+0x0]
c002ec3c:	b8 20 00 00 00       	mov    eax,0x20
c002ec41:	89 c2                	mov    edx,eax
c002ec43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002ec47:	29 da                	sub    edx,ebx
c002ec49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ec4d:	88 d9                	mov    cl,bl
c002ec4f:	d3 e7                	shl    edi,cl
c002ec51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ec55:	88 d1                	mov    cl,dl
c002ec57:	d3 e8                	shr    eax,cl
c002ec59:	09 c7                	or     edi,eax
c002ec5b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002ec5f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002ec63:	89 d8                	mov    eax,ebx
c002ec65:	88 d9                	mov    cl,bl
c002ec67:	d3 e7                	shl    edi,cl
c002ec69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ec6d:	89 f3                	mov    ebx,esi
c002ec6f:	88 d1                	mov    cl,dl
c002ec71:	d3 eb                	shr    ebx,cl
c002ec73:	89 c7                	mov    edi,eax
c002ec75:	88 c1                	mov    cl,al
c002ec77:	d3 e6                	shl    esi,cl
c002ec79:	89 e8                	mov    eax,ebp
c002ec7b:	88 d1                	mov    cl,dl
c002ec7d:	d3 e8                	shr    eax,cl
c002ec7f:	09 f0                	or     eax,esi
c002ec81:	89 f9                	mov    ecx,edi
c002ec83:	d3 e5                	shl    ebp,cl
c002ec85:	89 da                	mov    edx,ebx
c002ec87:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002ec8b:	89 d3                	mov    ebx,edx
c002ec8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ec91:	89 c6                	mov    esi,eax
c002ec93:	89 d1                	mov    ecx,edx
c002ec95:	39 d3                	cmp    ebx,edx
c002ec97:	72 27                	jb     c002ecc0 <__moddi3+0x170>
c002ec99:	74 21                	je     c002ecbc <__moddi3+0x16c>
c002ec9b:	29 f5                	sub    ebp,esi
c002ec9d:	19 cb                	sbb    ebx,ecx
c002ec9f:	89 de                	mov    esi,ebx
c002eca1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002eca5:	d3 e6                	shl    esi,cl
c002eca7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002ecab:	89 f9                	mov    ecx,edi
c002ecad:	d3 ed                	shr    ebp,cl
c002ecaf:	09 ee                	or     esi,ebp
c002ecb1:	89 f0                	mov    eax,esi
c002ecb3:	d3 eb                	shr    ebx,cl
c002ecb5:	89 da                	mov    edx,ebx
c002ecb7:	e9 e8 fe ff ff       	jmp    c002eba4 <__moddi3+0x54>
c002ecbc:	39 c5                	cmp    ebp,eax
c002ecbe:	73 db                	jae    c002ec9b <__moddi3+0x14b>
c002ecc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002ecc4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002ecc8:	89 d1                	mov    ecx,edx
c002ecca:	89 c6                	mov    esi,eax
c002eccc:	eb cd                	jmp    c002ec9b <__moddi3+0x14b>
c002ecce:	66 90                	xchg   ax,ax

c002ecd0 <__udivdi3>:
c002ecd0:	55                   	push   ebp
c002ecd1:	57                   	push   edi
c002ecd2:	56                   	push   esi
c002ecd3:	53                   	push   ebx
c002ecd4:	83 ec 1c             	sub    esp,0x1c
c002ecd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002ecdb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002ecdf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002ece3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002ece7:	85 d2                	test   edx,edx
c002ece9:	75 41                	jne    c002ed2c <__udivdi3+0x5c>
c002eceb:	39 f7                	cmp    edi,esi
c002eced:	76 15                	jbe    c002ed04 <__udivdi3+0x34>
c002ecef:	89 e8                	mov    eax,ebp
c002ecf1:	89 f2                	mov    edx,esi
c002ecf3:	f7 f7                	div    edi
c002ecf5:	31 db                	xor    ebx,ebx
c002ecf7:	89 da                	mov    edx,ebx
c002ecf9:	83 c4 1c             	add    esp,0x1c
c002ecfc:	5b                   	pop    ebx
c002ecfd:	5e                   	pop    esi
c002ecfe:	5f                   	pop    edi
c002ecff:	5d                   	pop    ebp
c002ed00:	c3                   	ret    
c002ed01:	8d 76 00             	lea    esi,[esi+0x0]
c002ed04:	89 f9                	mov    ecx,edi
c002ed06:	85 ff                	test   edi,edi
c002ed08:	75 0b                	jne    c002ed15 <__udivdi3+0x45>
c002ed0a:	b8 01 00 00 00       	mov    eax,0x1
c002ed0f:	31 d2                	xor    edx,edx
c002ed11:	f7 f7                	div    edi
c002ed13:	89 c1                	mov    ecx,eax
c002ed15:	31 d2                	xor    edx,edx
c002ed17:	89 f0                	mov    eax,esi
c002ed19:	f7 f1                	div    ecx
c002ed1b:	89 c3                	mov    ebx,eax
c002ed1d:	89 e8                	mov    eax,ebp
c002ed1f:	f7 f1                	div    ecx
c002ed21:	89 da                	mov    edx,ebx
c002ed23:	83 c4 1c             	add    esp,0x1c
c002ed26:	5b                   	pop    ebx
c002ed27:	5e                   	pop    esi
c002ed28:	5f                   	pop    edi
c002ed29:	5d                   	pop    ebp
c002ed2a:	c3                   	ret    
c002ed2b:	90                   	nop
c002ed2c:	39 f2                	cmp    edx,esi
c002ed2e:	77 1c                	ja     c002ed4c <__udivdi3+0x7c>
c002ed30:	0f bd da             	bsr    ebx,edx
c002ed33:	83 f3 1f             	xor    ebx,0x1f
c002ed36:	75 24                	jne    c002ed5c <__udivdi3+0x8c>
c002ed38:	39 f2                	cmp    edx,esi
c002ed3a:	72 08                	jb     c002ed44 <__udivdi3+0x74>
c002ed3c:	39 ef                	cmp    edi,ebp
c002ed3e:	0f 87 84 00 00 00    	ja     c002edc8 <__udivdi3+0xf8>
c002ed44:	b8 01 00 00 00       	mov    eax,0x1
c002ed49:	eb ac                	jmp    c002ecf7 <__udivdi3+0x27>
c002ed4b:	90                   	nop
c002ed4c:	31 db                	xor    ebx,ebx
c002ed4e:	31 c0                	xor    eax,eax
c002ed50:	89 da                	mov    edx,ebx
c002ed52:	83 c4 1c             	add    esp,0x1c
c002ed55:	5b                   	pop    ebx
c002ed56:	5e                   	pop    esi
c002ed57:	5f                   	pop    edi
c002ed58:	5d                   	pop    ebp
c002ed59:	c3                   	ret    
c002ed5a:	66 90                	xchg   ax,ax
c002ed5c:	b8 20 00 00 00       	mov    eax,0x20
c002ed61:	29 d8                	sub    eax,ebx
c002ed63:	88 d9                	mov    cl,bl
c002ed65:	d3 e2                	shl    edx,cl
c002ed67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002ed6b:	89 fa                	mov    edx,edi
c002ed6d:	88 c1                	mov    cl,al
c002ed6f:	d3 ea                	shr    edx,cl
c002ed71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ed75:	09 d1                	or     ecx,edx
c002ed77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ed7b:	88 d9                	mov    cl,bl
c002ed7d:	d3 e7                	shl    edi,cl
c002ed7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ed83:	89 f7                	mov    edi,esi
c002ed85:	88 c1                	mov    cl,al
c002ed87:	d3 ef                	shr    edi,cl
c002ed89:	88 d9                	mov    cl,bl
c002ed8b:	d3 e6                	shl    esi,cl
c002ed8d:	89 ea                	mov    edx,ebp
c002ed8f:	88 c1                	mov    cl,al
c002ed91:	d3 ea                	shr    edx,cl
c002ed93:	09 d6                	or     esi,edx
c002ed95:	89 f0                	mov    eax,esi
c002ed97:	89 fa                	mov    edx,edi
c002ed99:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ed9d:	89 d7                	mov    edi,edx
c002ed9f:	89 c6                	mov    esi,eax
c002eda1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eda5:	39 d7                	cmp    edi,edx
c002eda7:	72 13                	jb     c002edbc <__udivdi3+0xec>
c002eda9:	74 09                	je     c002edb4 <__udivdi3+0xe4>
c002edab:	89 f0                	mov    eax,esi
c002edad:	31 db                	xor    ebx,ebx
c002edaf:	e9 43 ff ff ff       	jmp    c002ecf7 <__udivdi3+0x27>
c002edb4:	88 d9                	mov    cl,bl
c002edb6:	d3 e5                	shl    ebp,cl
c002edb8:	39 c5                	cmp    ebp,eax
c002edba:	73 ef                	jae    c002edab <__udivdi3+0xdb>
c002edbc:	8d 46 ff             	lea    eax,[esi-0x1]
c002edbf:	31 db                	xor    ebx,ebx
c002edc1:	e9 31 ff ff ff       	jmp    c002ecf7 <__udivdi3+0x27>
c002edc6:	66 90                	xchg   ax,ax
c002edc8:	31 c0                	xor    eax,eax
c002edca:	e9 28 ff ff ff       	jmp    c002ecf7 <__udivdi3+0x27>
c002edcf:	90                   	nop

c002edd0 <__umoddi3>:
c002edd0:	55                   	push   ebp
c002edd1:	57                   	push   edi
c002edd2:	56                   	push   esi
c002edd3:	53                   	push   ebx
c002edd4:	83 ec 1c             	sub    esp,0x1c
c002edd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002eddb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002eddf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002ede3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ede7:	89 da                	mov    edx,ebx
c002ede9:	85 c0                	test   eax,eax
c002edeb:	75 37                	jne    c002ee24 <__umoddi3+0x54>
c002eded:	39 df                	cmp    edi,ebx
c002edef:	76 13                	jbe    c002ee04 <__umoddi3+0x34>
c002edf1:	89 f0                	mov    eax,esi
c002edf3:	f7 f7                	div    edi
c002edf5:	89 d0                	mov    eax,edx
c002edf7:	31 d2                	xor    edx,edx
c002edf9:	83 c4 1c             	add    esp,0x1c
c002edfc:	5b                   	pop    ebx
c002edfd:	5e                   	pop    esi
c002edfe:	5f                   	pop    edi
c002edff:	5d                   	pop    ebp
c002ee00:	c3                   	ret    
c002ee01:	8d 76 00             	lea    esi,[esi+0x0]
c002ee04:	89 fd                	mov    ebp,edi
c002ee06:	85 ff                	test   edi,edi
c002ee08:	75 0b                	jne    c002ee15 <__umoddi3+0x45>
c002ee0a:	b8 01 00 00 00       	mov    eax,0x1
c002ee0f:	31 d2                	xor    edx,edx
c002ee11:	f7 f7                	div    edi
c002ee13:	89 c5                	mov    ebp,eax
c002ee15:	89 d8                	mov    eax,ebx
c002ee17:	31 d2                	xor    edx,edx
c002ee19:	f7 f5                	div    ebp
c002ee1b:	89 f0                	mov    eax,esi
c002ee1d:	f7 f5                	div    ebp
c002ee1f:	89 d0                	mov    eax,edx
c002ee21:	eb d4                	jmp    c002edf7 <__umoddi3+0x27>
c002ee23:	90                   	nop
c002ee24:	89 f1                	mov    ecx,esi
c002ee26:	39 d8                	cmp    eax,ebx
c002ee28:	76 0a                	jbe    c002ee34 <__umoddi3+0x64>
c002ee2a:	89 f0                	mov    eax,esi
c002ee2c:	83 c4 1c             	add    esp,0x1c
c002ee2f:	5b                   	pop    ebx
c002ee30:	5e                   	pop    esi
c002ee31:	5f                   	pop    edi
c002ee32:	5d                   	pop    ebp
c002ee33:	c3                   	ret    
c002ee34:	0f bd e8             	bsr    ebp,eax
c002ee37:	83 f5 1f             	xor    ebp,0x1f
c002ee3a:	75 1c                	jne    c002ee58 <__umoddi3+0x88>
c002ee3c:	39 d8                	cmp    eax,ebx
c002ee3e:	72 04                	jb     c002ee44 <__umoddi3+0x74>
c002ee40:	39 f7                	cmp    edi,esi
c002ee42:	77 08                	ja     c002ee4c <__umoddi3+0x7c>
c002ee44:	89 da                	mov    edx,ebx
c002ee46:	29 fe                	sub    esi,edi
c002ee48:	19 c2                	sbb    edx,eax
c002ee4a:	89 f1                	mov    ecx,esi
c002ee4c:	89 c8                	mov    eax,ecx
c002ee4e:	83 c4 1c             	add    esp,0x1c
c002ee51:	5b                   	pop    ebx
c002ee52:	5e                   	pop    esi
c002ee53:	5f                   	pop    edi
c002ee54:	5d                   	pop    ebp
c002ee55:	c3                   	ret    
c002ee56:	66 90                	xchg   ax,ax
c002ee58:	ba 20 00 00 00       	mov    edx,0x20
c002ee5d:	29 ea                	sub    edx,ebp
c002ee5f:	89 e9                	mov    ecx,ebp
c002ee61:	d3 e0                	shl    eax,cl
c002ee63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ee67:	89 f8                	mov    eax,edi
c002ee69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002ee6d:	88 d1                	mov    cl,dl
c002ee6f:	d3 e8                	shr    eax,cl
c002ee71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ee75:	09 c1                	or     ecx,eax
c002ee77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ee7b:	89 e9                	mov    ecx,ebp
c002ee7d:	d3 e7                	shl    edi,cl
c002ee7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ee83:	89 d8                	mov    eax,ebx
c002ee85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ee89:	88 d1                	mov    cl,dl
c002ee8b:	d3 e8                	shr    eax,cl
c002ee8d:	89 c7                	mov    edi,eax
c002ee8f:	89 e9                	mov    ecx,ebp
c002ee91:	d3 e3                	shl    ebx,cl
c002ee93:	89 f0                	mov    eax,esi
c002ee95:	88 d1                	mov    cl,dl
c002ee97:	d3 e8                	shr    eax,cl
c002ee99:	09 d8                	or     eax,ebx
c002ee9b:	89 e9                	mov    ecx,ebp
c002ee9d:	d3 e6                	shl    esi,cl
c002ee9f:	89 f3                	mov    ebx,esi
c002eea1:	89 fa                	mov    edx,edi
c002eea3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002eea7:	89 d1                	mov    ecx,edx
c002eea9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002eead:	89 c6                	mov    esi,eax
c002eeaf:	89 d7                	mov    edi,edx
c002eeb1:	39 d1                	cmp    ecx,edx
c002eeb3:	72 27                	jb     c002eedc <__umoddi3+0x10c>
c002eeb5:	74 21                	je     c002eed8 <__umoddi3+0x108>
c002eeb7:	89 ca                	mov    edx,ecx
c002eeb9:	29 f3                	sub    ebx,esi
c002eebb:	19 fa                	sbb    edx,edi
c002eebd:	89 d0                	mov    eax,edx
c002eebf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002eec3:	d3 e0                	shl    eax,cl
c002eec5:	89 e9                	mov    ecx,ebp
c002eec7:	d3 eb                	shr    ebx,cl
c002eec9:	09 d8                	or     eax,ebx
c002eecb:	d3 ea                	shr    edx,cl
c002eecd:	83 c4 1c             	add    esp,0x1c
c002eed0:	5b                   	pop    ebx
c002eed1:	5e                   	pop    esi
c002eed2:	5f                   	pop    edi
c002eed3:	5d                   	pop    ebp
c002eed4:	c3                   	ret    
c002eed5:	8d 76 00             	lea    esi,[esi+0x0]
c002eed8:	39 c3                	cmp    ebx,eax
c002eeda:	73 db                	jae    c002eeb7 <__umoddi3+0xe7>
c002eedc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eee0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002eee4:	89 d7                	mov    edi,edx
c002eee6:	89 c6                	mov    esi,eax
c002eee8:	eb cd                	jmp    c002eeb7 <__umoddi3+0xe7>

Disassembly of section .init:

c002eeea <_init>:
c002eeea:	55                   	push   ebp
c002eeeb:	89 e5                	mov    ebp,esp
c002eeed:	e8 02 12 fd ff       	call   c00000f4 <frame_dummy>
c002eef2:	e8 e5 fa ff ff       	call   c002e9dc <__do_global_ctors_aux>
c002eef7:	5d                   	pop    ebp
c002eef8:	c3                   	ret    

Disassembly of section .fini:

c002eef9 <_fini>:
c002eef9:	55                   	push   ebp
c002eefa:	89 e5                	mov    ebp,esp
c002eefc:	e8 83 11 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002ef01:	5d                   	pop    ebp
c002ef02:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002ef04 <Computer::~Computer()>:
c002ef04:	83 ec 0c             	sub    esp,0xc
c002ef07:	ba 54 17 03 c0       	mov    edx,0xc0031754
c002ef0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef10:	89 10                	mov    DWORD PTR [eax],edx
c002ef12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef16:	83 ec 0c             	sub    esp,0xc
c002ef19:	50                   	push   eax
c002ef1a:	e8 e5 c5 fe ff       	call   c001b504 <Device::~Device()>
c002ef1f:	83 c4 10             	add    esp,0x10
c002ef22:	90                   	nop
c002ef23:	83 c4 0c             	add    esp,0xc
c002ef26:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002ef28 <Computer::~Computer()>:
c002ef28:	83 ec 0c             	sub    esp,0xc
c002ef2b:	83 ec 0c             	sub    esp,0xc
c002ef2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef32:	e8 cd ff ff ff       	call   c002ef04 <Computer::~Computer()>
c002ef37:	83 c4 10             	add    esp,0x10
c002ef3a:	83 ec 08             	sub    esp,0x8
c002ef3d:	68 70 01 00 00       	push   0x170
c002ef42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef46:	e8 cd a3 fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002ef4b:	83 c4 10             	add    esp,0x10
c002ef4e:	83 c4 0c             	add    esp,0xc
c002ef51:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002ef52 <idleCommon()>:
c002ef52:	83 ec 0c             	sub    esp,0xc
c002ef55:	fa                   	cli    
c002ef56:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002ef5c:	e8 2b 68 ff ff       	call   c002578c <schedule()>
c002ef61:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002ef66:	48                   	dec    eax
c002ef67:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002ef6c:	75 01                	jne    c002ef6f <idleCommon()+0x1d>
c002ef6e:	fb                   	sti    
c002ef6f:	83 c4 0c             	add    esp,0xc
c002ef72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002ef74 <LinkedList<UnixFile>::~LinkedList()>:
c002ef74:	90                   	nop
c002ef75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002ef76 <LinkedList<UnixFile>::LinkedList()>:
c002ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002efa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efa4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002efaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002efb6:	90                   	nop
c002efb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002efb8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002efb8:	83 ec 0c             	sub    esp,0xc
c002efbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002efc0:	75 10                	jne    c002efd2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002efc2:	83 ec 0c             	sub    esp,0xc
c002efc5:	68 6c 19 03 c0       	push   0xc003196c
c002efca:	e8 af 17 ff ff       	call   c002077e <KePanic(char const*)>
c002efcf:	83 c4 10             	add    esp,0x10
c002efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd6:	8b 00                	mov    eax,DWORD PTR [eax]
c002efd8:	85 c0                	test   eax,eax
c002efda:	74 34                	je     c002f010 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efe3:	85 c0                	test   eax,eax
c002efe5:	74 29                	je     c002f010 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002efe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eff2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002effd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f007:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f00e:	eb 65                	jmp    c002f075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f014:	8b 00                	mov    eax,DWORD PTR [eax]
c002f016:	85 c0                	test   eax,eax
c002f018:	75 4b                	jne    c002f065 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f01e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f021:	85 c0                	test   eax,eax
c002f023:	75 40                	jne    c002f065 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002f025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f029:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f02d:	89 10                	mov    DWORD PTR [eax],edx
c002f02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f033:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f037:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f03e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f041:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f04c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f04f:	85 c0                	test   eax,eax
c002f051:	74 22                	je     c002f075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f053:	83 ec 0c             	sub    esp,0xc
c002f056:	68 8e 19 03 c0       	push   0xc003198e
c002f05b:	e8 1e 17 ff ff       	call   c002077e <KePanic(char const*)>
c002f060:	83 c4 10             	add    esp,0x10
c002f063:	eb 10                	jmp    c002f075 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f065:	83 ec 0c             	sub    esp,0xc
c002f068:	68 98 19 03 c0       	push   0xc0031998
c002f06d:	e8 0c 17 ff ff       	call   c002077e <KePanic(char const*)>
c002f072:	83 c4 10             	add    esp,0x10
c002f075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f079:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f07c:	8d 50 01             	lea    edx,[eax+0x1]
c002f07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f083:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f086:	90                   	nop
c002f087:	83 c4 0c             	add    esp,0xc
c002f08a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002f08c <LinkedList<UnixFile>::getFirstElement()>:
c002f08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f090:	8b 00                	mov    eax,DWORD PTR [eax]
c002f092:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002f094 <LinkedList<UnixFile>::removeFirst()>:
c002f094:	83 ec 0c             	sub    esp,0xc
c002f097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f09d:	85 c0                	test   eax,eax
c002f09f:	75 12                	jne    c002f0b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002f0a1:	83 ec 0c             	sub    esp,0xc
c002f0a4:	68 a4 19 03 c0       	push   0xc00319a4
c002f0a9:	e8 d0 16 ff ff       	call   c002077e <KePanic(char const*)>
c002f0ae:	83 c4 10             	add    esp,0x10
c002f0b1:	eb 7e                	jmp    c002f131 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002f0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f0ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0bd:	85 c0                	test   eax,eax
c002f0bf:	74 10                	je     c002f0d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002f0c1:	83 ec 0c             	sub    esp,0xc
c002f0c4:	68 ef 19 03 c0       	push   0xc00319ef
c002f0c9:	e8 b0 16 ff ff       	call   c002077e <KePanic(char const*)>
c002f0ce:	83 c4 10             	add    esp,0x10
c002f0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0d5:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0da:	85 c0                	test   eax,eax
c002f0dc:	75 33                	jne    c002f111 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002f0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0fa:	83 f8 01             	cmp    eax,0x1
c002f0fd:	74 21                	je     c002f120 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002f0ff:	83 ec 0c             	sub    esp,0xc
c002f102:	68 c8 19 03 c0       	push   0xc00319c8
c002f107:	e8 72 16 ff ff       	call   c002077e <KePanic(char const*)>
c002f10c:	83 c4 10             	add    esp,0x10
c002f10f:	eb 0f                	jmp    c002f120 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002f111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f115:	8b 00                	mov    eax,DWORD PTR [eax]
c002f117:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002f11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f11e:	89 10                	mov    DWORD PTR [eax],edx
c002f120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f124:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f127:	8d 50 ff             	lea    edx,[eax-0x1]
c002f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f12e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f131:	83 c4 0c             	add    esp,0xc
c002f134:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002f136 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002f136:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f13a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f13d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002f13e <DriverlessDevice::~DriverlessDevice()>:
c002f13e:	ba 48 27 03 c0       	mov    edx,0xc0032748
c002f143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f147:	89 10                	mov    DWORD PTR [eax],edx
c002f149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f14d:	50                   	push   eax
c002f14e:	e8 b1 c3 fe ff       	call   c001b504 <Device::~Device()>
c002f153:	83 c4 04             	add    esp,0x4
c002f156:	90                   	nop
c002f157:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002f158 <DriverlessDevice::~DriverlessDevice()>:
c002f158:	83 ec 0c             	sub    esp,0xc
c002f15b:	83 ec 0c             	sub    esp,0xc
c002f15e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f162:	e8 d7 ff ff ff       	call   c002f13e <DriverlessDevice::~DriverlessDevice()>
c002f167:	83 c4 10             	add    esp,0x10
c002f16a:	83 ec 08             	sub    esp,0x8
c002f16d:	68 58 01 00 00       	push   0x158
c002f172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f176:	e8 9d a1 fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f17b:	83 c4 10             	add    esp,0x10
c002f17e:	83 c4 0c             	add    esp,0xc
c002f181:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002f182 <LinkedList<Device>::addElement(Device*)>:
c002f182:	83 ec 0c             	sub    esp,0xc
c002f185:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f18a:	75 10                	jne    c002f19c <LinkedList<Device>::addElement(Device*)+0x1a>
c002f18c:	83 ec 0c             	sub    esp,0xc
c002f18f:	68 6c 19 03 c0       	push   0xc003196c
c002f194:	e8 e5 15 ff ff       	call   c002077e <KePanic(char const*)>
c002f199:	83 c4 10             	add    esp,0x10
c002f19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1a0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1a2:	85 c0                	test   eax,eax
c002f1a4:	74 3a                	je     c002f1e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1ad:	85 c0                	test   eax,eax
c002f1af:	74 2f                	je     c002f1e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002f1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f1de:	eb 68                	jmp    c002f248 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1e4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1e6:	85 c0                	test   eax,eax
c002f1e8:	75 4e                	jne    c002f238 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1f1:	85 c0                	test   eax,eax
c002f1f3:	75 43                	jne    c002f238 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1fd:	89 10                	mov    DWORD PTR [eax],edx
c002f1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f203:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f207:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f20e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f211:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f21b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f222:	85 c0                	test   eax,eax
c002f224:	74 22                	je     c002f248 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f226:	83 ec 0c             	sub    esp,0xc
c002f229:	68 8e 19 03 c0       	push   0xc003198e
c002f22e:	e8 4b 15 ff ff       	call   c002077e <KePanic(char const*)>
c002f233:	83 c4 10             	add    esp,0x10
c002f236:	eb 10                	jmp    c002f248 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f238:	83 ec 0c             	sub    esp,0xc
c002f23b:	68 98 19 03 c0       	push   0xc0031998
c002f240:	e8 39 15 ff ff       	call   c002077e <KePanic(char const*)>
c002f245:	83 c4 10             	add    esp,0x10
c002f248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f24c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f24f:	8d 50 01             	lea    edx,[eax+0x1]
c002f252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f256:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f259:	90                   	nop
c002f25a:	83 c4 0c             	add    esp,0xc
c002f25d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002f25e <LinkedList<Device>::LinkedList()>:
c002f25e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f262:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f26c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f277:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f282:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f28c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f297:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f29e:	90                   	nop
c002f29f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002f2a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002f2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2a4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2a6:	85 c0                	test   eax,eax
c002f2a8:	75 0e                	jne    c002f2b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f2aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f2b1:	85 c0                	test   eax,eax
c002f2b3:	75 03                	jne    c002f2b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f2b5:	b0 01                	mov    al,0x1
c002f2b7:	c3                   	ret    
c002f2b8:	b0 00                	mov    al,0x0
c002f2ba:	90                   	nop
c002f2bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002f2bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f2c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002f2c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002f2c4:	83 ec 0c             	sub    esp,0xc
c002f2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2cb:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2cd:	85 c0                	test   eax,eax
c002f2cf:	75 17                	jne    c002f2e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002f2d1:	83 ec 0c             	sub    esp,0xc
c002f2d4:	68 a4 19 03 c0       	push   0xc00319a4
c002f2d9:	e8 a0 14 ff ff       	call   c002077e <KePanic(char const*)>
c002f2de:	83 c4 10             	add    esp,0x10
c002f2e1:	e9 96 00 00 00       	jmp    c002f37c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002f2e6:	66 90                	xchg   ax,ax
c002f2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f2ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f2f2:	85 c0                	test   eax,eax
c002f2f4:	0f 95 c0             	setne  al
c002f2f7:	0f b6 c0             	movzx  eax,al
c002f2fa:	85 c0                	test   eax,eax
c002f2fc:	74 12                	je     c002f310 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002f2fe:	83 ec 0c             	sub    esp,0xc
c002f301:	68 ef 19 03 c0       	push   0xc00319ef
c002f306:	e8 73 14 ff ff       	call   c002077e <KePanic(char const*)>
c002f30b:	83 c4 10             	add    esp,0x10
c002f30e:	66 90                	xchg   ax,ax
c002f310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f314:	8b 00                	mov    eax,DWORD PTR [eax]
c002f316:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f319:	85 c0                	test   eax,eax
c002f31b:	0f 94 c0             	sete   al
c002f31e:	0f b6 c0             	movzx  eax,al
c002f321:	85 c0                	test   eax,eax
c002f323:	74 33                	je     c002f358 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002f325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f329:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f333:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f33e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f341:	83 f8 01             	cmp    eax,0x1
c002f344:	74 22                	je     c002f368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f346:	83 ec 0c             	sub    esp,0xc
c002f349:	68 c8 19 03 c0       	push   0xc00319c8
c002f34e:	e8 2b 14 ff ff       	call   c002077e <KePanic(char const*)>
c002f353:	83 c4 10             	add    esp,0x10
c002f356:	eb 10                	jmp    c002f368 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f35c:	8b 00                	mov    eax,DWORD PTR [eax]
c002f35e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002f361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f365:	89 10                	mov    DWORD PTR [eax],edx
c002f367:	90                   	nop
c002f368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f36c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f36f:	8d 50 ff             	lea    edx,[eax-0x1]
c002f372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f376:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f379:	8d 76 00             	lea    esi,[esi+0x0]
c002f37c:	83 c4 0c             	add    esp,0xc
c002f37f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002f380 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002f380:	83 ec 0c             	sub    esp,0xc
c002f383:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f388:	75 12                	jne    c002f39c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002f38a:	83 ec 0c             	sub    esp,0xc
c002f38d:	68 6c 19 03 c0       	push   0xc003196c
c002f392:	e8 e7 13 ff ff       	call   c002077e <KePanic(char const*)>
c002f397:	83 c4 10             	add    esp,0x10
c002f39a:	66 90                	xchg   ax,ax
c002f39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f3a2:	85 c0                	test   eax,eax
c002f3a4:	74 36                	je     c002f3dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3ad:	85 c0                	test   eax,eax
c002f3af:	74 2b                	je     c002f3dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002f3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f3d8:	eb 6a                	jmp    c002f444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f3da:	66 90                	xchg   ax,ax
c002f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3e0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f3e2:	85 c0                	test   eax,eax
c002f3e4:	75 4e                	jne    c002f434 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3ed:	85 c0                	test   eax,eax
c002f3ef:	75 43                	jne    c002f434 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3f9:	89 10                	mov    DWORD PTR [eax],edx
c002f3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f403:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f40a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f40d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f418:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f41b:	85 c0                	test   eax,eax
c002f41d:	74 25                	je     c002f444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f41f:	83 ec 0c             	sub    esp,0xc
c002f422:	68 8e 19 03 c0       	push   0xc003198e
c002f427:	e8 52 13 ff ff       	call   c002077e <KePanic(char const*)>
c002f42c:	83 c4 10             	add    esp,0x10
c002f42f:	eb 13                	jmp    c002f444 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f431:	8d 76 00             	lea    esi,[esi+0x0]
c002f434:	83 ec 0c             	sub    esp,0xc
c002f437:	68 98 19 03 c0       	push   0xc0031998
c002f43c:	e8 3d 13 ff ff       	call   c002077e <KePanic(char const*)>
c002f441:	83 c4 10             	add    esp,0x10
c002f444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f448:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f44b:	8d 50 01             	lea    edx,[eax+0x1]
c002f44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f452:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f455:	90                   	nop
c002f456:	83 c4 0c             	add    esp,0xc
c002f459:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f45c <ACPI::~ACPI()>:
c002f45c:	83 ec 0c             	sub    esp,0xc
c002f45f:	ba 00 2e 03 c0       	mov    edx,0xc0032e00
c002f464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f468:	89 10                	mov    DWORD PTR [eax],edx
c002f46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f46e:	83 ec 0c             	sub    esp,0xc
c002f471:	50                   	push   eax
c002f472:	e8 8d c0 fe ff       	call   c001b504 <Device::~Device()>
c002f477:	83 c4 10             	add    esp,0x10
c002f47a:	90                   	nop
c002f47b:	83 c4 0c             	add    esp,0xc
c002f47e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f480 <ACPI::~ACPI()>:
c002f480:	83 ec 0c             	sub    esp,0xc
c002f483:	83 ec 0c             	sub    esp,0xc
c002f486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f48a:	e8 cd ff ff ff       	call   c002f45c <ACPI::~ACPI()>
c002f48f:	83 c4 10             	add    esp,0x10
c002f492:	83 ec 08             	sub    esp,0x8
c002f495:	68 64 12 00 00       	push   0x1264
c002f49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f49e:	e8 75 9e fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f4a3:	83 c4 10             	add    esp,0x10
c002f4a6:	83 c4 0c             	add    esp,0xc
c002f4a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f4ac <LinkedList<Device>::~LinkedList()>:
c002f4ac:	90                   	nop
c002f4ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f4b0 <LinkedList<Device>::isEmpty()>:
c002f4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4b6:	85 c0                	test   eax,eax
c002f4b8:	75 0e                	jne    c002f4c8 <LinkedList<Device>::isEmpty()+0x18>
c002f4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f4c1:	85 c0                	test   eax,eax
c002f4c3:	75 03                	jne    c002f4c8 <LinkedList<Device>::isEmpty()+0x18>
c002f4c5:	b0 01                	mov    al,0x1
c002f4c7:	c3                   	ret    
c002f4c8:	b0 00                	mov    al,0x0
c002f4ca:	90                   	nop
c002f4cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f4cc <LinkedList<Device>::getFirstElement()>:
c002f4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f4d4 <LinkedList<Device>::removeFirst()>:
c002f4d4:	83 ec 0c             	sub    esp,0xc
c002f4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4db:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4dd:	85 c0                	test   eax,eax
c002f4df:	75 17                	jne    c002f4f8 <LinkedList<Device>::removeFirst()+0x24>
c002f4e1:	83 ec 0c             	sub    esp,0xc
c002f4e4:	68 a4 19 03 c0       	push   0xc00319a4
c002f4e9:	e8 90 12 ff ff       	call   c002077e <KePanic(char const*)>
c002f4ee:	83 c4 10             	add    esp,0x10
c002f4f1:	e9 92 00 00 00       	jmp    c002f588 <LinkedList<Device>::removeFirst()+0xb4>
c002f4f6:	66 90                	xchg   ax,ax
c002f4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f4ff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f505:	85 c0                	test   eax,eax
c002f507:	74 13                	je     c002f51c <LinkedList<Device>::removeFirst()+0x48>
c002f509:	83 ec 0c             	sub    esp,0xc
c002f50c:	68 ef 19 03 c0       	push   0xc00319ef
c002f511:	e8 68 12 ff ff       	call   c002077e <KePanic(char const*)>
c002f516:	83 c4 10             	add    esp,0x10
c002f519:	8d 76 00             	lea    esi,[esi+0x0]
c002f51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f520:	8b 00                	mov    eax,DWORD PTR [eax]
c002f522:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f528:	85 c0                	test   eax,eax
c002f52a:	75 34                	jne    c002f560 <LinkedList<Device>::removeFirst()+0x8c>
c002f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f530:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f53a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f545:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f548:	83 f8 01             	cmp    eax,0x1
c002f54b:	74 27                	je     c002f574 <LinkedList<Device>::removeFirst()+0xa0>
c002f54d:	83 ec 0c             	sub    esp,0xc
c002f550:	68 c8 19 03 c0       	push   0xc00319c8
c002f555:	e8 24 12 ff ff       	call   c002077e <KePanic(char const*)>
c002f55a:	83 c4 10             	add    esp,0x10
c002f55d:	eb 15                	jmp    c002f574 <LinkedList<Device>::removeFirst()+0xa0>
c002f55f:	90                   	nop
c002f560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f564:	8b 00                	mov    eax,DWORD PTR [eax]
c002f566:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f570:	89 10                	mov    DWORD PTR [eax],edx
c002f572:	66 90                	xchg   ax,ax
c002f574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f578:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f57b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f582:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f585:	8d 76 00             	lea    esi,[esi+0x0]
c002f588:	83 c4 0c             	add    esp,0xc
c002f58b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f58c <CPU::~CPU()>:
c002f58c:	83 ec 0c             	sub    esp,0xc
c002f58f:	ba a8 2f 03 c0       	mov    edx,0xc0032fa8
c002f594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f598:	89 10                	mov    DWORD PTR [eax],edx
c002f59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f59e:	83 ec 0c             	sub    esp,0xc
c002f5a1:	50                   	push   eax
c002f5a2:	e8 5d bf fe ff       	call   c001b504 <Device::~Device()>
c002f5a7:	83 c4 10             	add    esp,0x10
c002f5aa:	90                   	nop
c002f5ab:	83 c4 0c             	add    esp,0xc
c002f5ae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f5b0 <CPU::~CPU()>:
c002f5b0:	83 ec 0c             	sub    esp,0xc
c002f5b3:	83 ec 0c             	sub    esp,0xc
c002f5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5ba:	e8 cd ff ff ff       	call   c002f58c <CPU::~CPU()>
c002f5bf:	83 c4 10             	add    esp,0x10
c002f5c2:	83 ec 08             	sub    esp,0x8
c002f5c5:	68 94 11 00 00       	push   0x1194
c002f5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f5ce:	e8 45 9d fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f5d3:	83 c4 10             	add    esp,0x10
c002f5d6:	83 c4 0c             	add    esp,0xc
c002f5d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f5dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f5dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f5e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f5e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f5e4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f5e4:	90                   	nop
c002f5e5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f5e8 <ThreadControlBlock::ThreadControlBlock()>:
c002f5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f5ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f5f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f5fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f602:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f609:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f60d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f618:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f61f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f623:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f62b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f62f:	90                   	nop
c002f630:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f634 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f638:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f642:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f64d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f658:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f65e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f662:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f669:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f66d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f674:	90                   	nop
c002f675:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f676 <PCI::~PCI()>:
c002f676:	83 ec 0c             	sub    esp,0xc
c002f679:	ba 48 3f 03 c0       	mov    edx,0xc0033f48
c002f67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f682:	89 10                	mov    DWORD PTR [eax],edx
c002f684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f688:	83 ec 0c             	sub    esp,0xc
c002f68b:	50                   	push   eax
c002f68c:	e8 cf b7 fe ff       	call   c001ae60 <Bus::~Bus()>
c002f691:	83 c4 10             	add    esp,0x10
c002f694:	90                   	nop
c002f695:	83 c4 0c             	add    esp,0xc
c002f698:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f69a <PCI::~PCI()>:
c002f69a:	83 ec 0c             	sub    esp,0xc
c002f69d:	83 ec 0c             	sub    esp,0xc
c002f6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6a4:	e8 cd ff ff ff       	call   c002f676 <PCI::~PCI()>
c002f6a9:	83 c4 10             	add    esp,0x10
c002f6ac:	83 ec 08             	sub    esp,0x8
c002f6af:	68 5c 01 00 00       	push   0x15c
c002f6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6b8:	e8 5b 9c fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f6bd:	83 c4 10             	add    esp,0x10
c002f6c0:	83 c4 0c             	add    esp,0xc
c002f6c3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f6c4 <IDE::~IDE()>:
c002f6c4:	83 ec 0c             	sub    esp,0xc
c002f6c7:	ba fc 3f 03 c0       	mov    edx,0xc0033ffc
c002f6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6d0:	89 10                	mov    DWORD PTR [eax],edx
c002f6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6d6:	83 ec 0c             	sub    esp,0xc
c002f6d9:	50                   	push   eax
c002f6da:	e8 b5 c2 fe ff       	call   c001b994 <HardDiskController::~HardDiskController()>
c002f6df:	83 c4 10             	add    esp,0x10
c002f6e2:	90                   	nop
c002f6e3:	83 c4 0c             	add    esp,0xc
c002f6e6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f6e8 <IDE::~IDE()>:
c002f6e8:	83 ec 0c             	sub    esp,0xc
c002f6eb:	83 ec 0c             	sub    esp,0xc
c002f6ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f6f2:	e8 cd ff ff ff       	call   c002f6c4 <IDE::~IDE()>
c002f6f7:	83 c4 10             	add    esp,0x10
c002f6fa:	83 ec 08             	sub    esp,0x8
c002f6fd:	68 70 02 00 00       	push   0x270
c002f702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f706:	e8 0d 9c fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f70b:	83 c4 10             	add    esp,0x10
c002f70e:	83 c4 0c             	add    esp,0xc
c002f711:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f712 <SATABus::~SATABus()>:
c002f712:	83 ec 0c             	sub    esp,0xc
c002f715:	ba 4c 40 03 c0       	mov    edx,0xc003404c
c002f71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f71e:	89 10                	mov    DWORD PTR [eax],edx
c002f720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f724:	83 ec 0c             	sub    esp,0xc
c002f727:	50                   	push   eax
c002f728:	e8 67 c2 fe ff       	call   c001b994 <HardDiskController::~HardDiskController()>
c002f72d:	83 c4 10             	add    esp,0x10
c002f730:	90                   	nop
c002f731:	83 c4 0c             	add    esp,0xc
c002f734:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f736 <SATABus::~SATABus()>:
c002f736:	83 ec 0c             	sub    esp,0xc
c002f739:	83 ec 0c             	sub    esp,0xc
c002f73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f740:	e8 cd ff ff ff       	call   c002f712 <SATABus::~SATABus()>
c002f745:	83 c4 10             	add    esp,0x10
c002f748:	83 ec 08             	sub    esp,0x8
c002f74b:	68 64 01 00 00       	push   0x164
c002f750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f754:	e8 bf 9b fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f759:	83 c4 10             	add    esp,0x10
c002f75c:	83 c4 0c             	add    esp,0xc
c002f75f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f760 <ATA::~ATA()>:
c002f760:	83 ec 0c             	sub    esp,0xc
c002f763:	ba 8c 40 03 c0       	mov    edx,0xc003408c
c002f768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f76c:	89 10                	mov    DWORD PTR [eax],edx
c002f76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f772:	83 ec 0c             	sub    esp,0xc
c002f775:	50                   	push   eax
c002f776:	e8 fb c2 fe ff       	call   c001ba76 <PhysicalDisk::~PhysicalDisk()>
c002f77b:	83 c4 10             	add    esp,0x10
c002f77e:	90                   	nop
c002f77f:	83 c4 0c             	add    esp,0xc
c002f782:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f784 <ATA::~ATA()>:
c002f784:	83 ec 0c             	sub    esp,0xc
c002f787:	83 ec 0c             	sub    esp,0xc
c002f78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f78e:	e8 cd ff ff ff       	call   c002f760 <ATA::~ATA()>
c002f793:	83 c4 10             	add    esp,0x10
c002f796:	83 ec 08             	sub    esp,0x8
c002f799:	68 7c 01 00 00       	push   0x17c
c002f79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7a2:	e8 71 9b fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f7a7:	83 c4 10             	add    esp,0x10
c002f7aa:	83 c4 0c             	add    esp,0xc
c002f7ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f7ae <ATAPI::~ATAPI()>:
c002f7ae:	83 ec 0c             	sub    esp,0xc
c002f7b1:	ba d4 40 03 c0       	mov    edx,0xc00340d4
c002f7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7ba:	89 10                	mov    DWORD PTR [eax],edx
c002f7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f7c0:	83 ec 0c             	sub    esp,0xc
c002f7c3:	50                   	push   eax
c002f7c4:	e8 ad c2 fe ff       	call   c001ba76 <PhysicalDisk::~PhysicalDisk()>
c002f7c9:	83 c4 10             	add    esp,0x10
c002f7cc:	90                   	nop
c002f7cd:	83 c4 0c             	add    esp,0xc
c002f7d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f7d2 <ATAPI::~ATAPI()>:
c002f7d2:	83 ec 0c             	sub    esp,0xc
c002f7d5:	83 ec 0c             	sub    esp,0xc
c002f7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7dc:	e8 cd ff ff ff       	call   c002f7ae <ATAPI::~ATAPI()>
c002f7e1:	83 c4 10             	add    esp,0x10
c002f7e4:	83 ec 08             	sub    esp,0x8
c002f7e7:	68 84 01 00 00       	push   0x184
c002f7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7f0:	e8 23 9b fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f7f5:	83 c4 10             	add    esp,0x10
c002f7f8:	83 c4 0c             	add    esp,0xc
c002f7fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f7fc <SATA::~SATA()>:
c002f7fc:	83 ec 0c             	sub    esp,0xc
c002f7ff:	ba 94 41 03 c0       	mov    edx,0xc0034194
c002f804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f808:	89 10                	mov    DWORD PTR [eax],edx
c002f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f80e:	83 ec 0c             	sub    esp,0xc
c002f811:	50                   	push   eax
c002f812:	e8 5f c2 fe ff       	call   c001ba76 <PhysicalDisk::~PhysicalDisk()>
c002f817:	83 c4 10             	add    esp,0x10
c002f81a:	90                   	nop
c002f81b:	83 c4 0c             	add    esp,0xc
c002f81e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f820 <SATA::~SATA()>:
c002f820:	83 ec 0c             	sub    esp,0xc
c002f823:	83 ec 0c             	sub    esp,0xc
c002f826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f82a:	e8 cd ff ff ff       	call   c002f7fc <SATA::~SATA()>
c002f82f:	83 c4 10             	add    esp,0x10
c002f832:	83 ec 08             	sub    esp,0x8
c002f835:	68 7c 01 00 00       	push   0x17c
c002f83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f83e:	e8 d5 9a fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f843:	83 c4 10             	add    esp,0x10
c002f846:	83 c4 0c             	add    esp,0xc
c002f849:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f84a <SATAPI::~SATAPI()>:
c002f84a:	83 ec 0c             	sub    esp,0xc
c002f84d:	ba b8 42 03 c0       	mov    edx,0xc00342b8
c002f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f856:	89 10                	mov    DWORD PTR [eax],edx
c002f858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f85c:	83 ec 0c             	sub    esp,0xc
c002f85f:	50                   	push   eax
c002f860:	e8 11 c2 fe ff       	call   c001ba76 <PhysicalDisk::~PhysicalDisk()>
c002f865:	83 c4 10             	add    esp,0x10
c002f868:	90                   	nop
c002f869:	83 c4 0c             	add    esp,0xc
c002f86c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f86e <SATAPI::~SATAPI()>:
c002f86e:	83 ec 0c             	sub    esp,0xc
c002f871:	83 ec 0c             	sub    esp,0xc
c002f874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f878:	e8 cd ff ff ff       	call   c002f84a <SATAPI::~SATAPI()>
c002f87d:	83 c4 10             	add    esp,0x10
c002f880:	83 ec 08             	sub    esp,0x8
c002f883:	68 84 01 00 00       	push   0x184
c002f888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f88c:	e8 87 9a fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f891:	83 c4 10             	add    esp,0x10
c002f894:	83 c4 0c             	add    esp,0xc
c002f897:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f898 <IOAPIC::~IOAPIC()>:
c002f898:	83 ec 0c             	sub    esp,0xc
c002f89b:	ba f8 42 03 c0       	mov    edx,0xc00342f8
c002f8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8a4:	89 10                	mov    DWORD PTR [eax],edx
c002f8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8aa:	83 ec 0c             	sub    esp,0xc
c002f8ad:	50                   	push   eax
c002f8ae:	e8 51 bc fe ff       	call   c001b504 <Device::~Device()>
c002f8b3:	83 c4 10             	add    esp,0x10
c002f8b6:	90                   	nop
c002f8b7:	83 c4 0c             	add    esp,0xc
c002f8ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f8bc <IOAPIC::~IOAPIC()>:
c002f8bc:	83 ec 0c             	sub    esp,0xc
c002f8bf:	83 ec 0c             	sub    esp,0xc
c002f8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f8c6:	e8 cd ff ff ff       	call   c002f898 <IOAPIC::~IOAPIC()>
c002f8cb:	83 c4 10             	add    esp,0x10
c002f8ce:	83 ec 08             	sub    esp,0x8
c002f8d1:	68 68 01 00 00       	push   0x168
c002f8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f8da:	e8 39 9a fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f8df:	83 c4 10             	add    esp,0x10
c002f8e2:	83 c4 0c             	add    esp,0xc
c002f8e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f8e8 <APICTimer::~APICTimer()>:
c002f8e8:	83 ec 0c             	sub    esp,0xc
c002f8eb:	ba 40 43 03 c0       	mov    edx,0xc0034340
c002f8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8f4:	89 10                	mov    DWORD PTR [eax],edx
c002f8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8fa:	83 ec 0c             	sub    esp,0xc
c002f8fd:	50                   	push   eax
c002f8fe:	e8 dd d6 fe ff       	call   c001cfe0 <Timer::~Timer()>
c002f903:	83 c4 10             	add    esp,0x10
c002f906:	90                   	nop
c002f907:	83 c4 0c             	add    esp,0xc
c002f90a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f90c <APICTimer::~APICTimer()>:
c002f90c:	83 ec 0c             	sub    esp,0xc
c002f90f:	83 ec 0c             	sub    esp,0xc
c002f912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f916:	e8 cd ff ff ff       	call   c002f8e8 <APICTimer::~APICTimer()>
c002f91b:	83 c4 10             	add    esp,0x10
c002f91e:	83 ec 08             	sub    esp,0x8
c002f921:	68 60 01 00 00       	push   0x160
c002f926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f92a:	e8 e9 99 fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f92f:	83 c4 10             	add    esp,0x10
c002f932:	83 c4 0c             	add    esp,0xc
c002f935:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f938 <PIT::~PIT()>:
c002f938:	83 ec 0c             	sub    esp,0xc
c002f93b:	ba 90 43 03 c0       	mov    edx,0xc0034390
c002f940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f944:	89 10                	mov    DWORD PTR [eax],edx
c002f946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f94a:	83 ec 0c             	sub    esp,0xc
c002f94d:	50                   	push   eax
c002f94e:	e8 8d d6 fe ff       	call   c001cfe0 <Timer::~Timer()>
c002f953:	83 c4 10             	add    esp,0x10
c002f956:	90                   	nop
c002f957:	83 c4 0c             	add    esp,0xc
c002f95a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f95c <PIT::~PIT()>:
c002f95c:	83 ec 0c             	sub    esp,0xc
c002f95f:	83 ec 0c             	sub    esp,0xc
c002f962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f966:	e8 cd ff ff ff       	call   c002f938 <PIT::~PIT()>
c002f96b:	83 c4 10             	add    esp,0x10
c002f96e:	83 ec 08             	sub    esp,0x8
c002f971:	68 5c 01 00 00       	push   0x15c
c002f976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f97a:	e8 99 99 fe ff       	call   c0019318 <operator delete(void*, unsigned long)>
c002f97f:	83 c4 10             	add    esp,0x10
c002f982:	83 c4 0c             	add    esp,0xc
c002f985:	c3                   	ret    

Disassembly of section userkernel:

c0036000 <KiDefaultSignalHandlerAbort(int)>:
c0036000:	57                   	push   edi
c0036001:	b9 07 00 00 00       	mov    ecx,0x7
c0036006:	56                   	push   esi
c0036007:	be fb 30 03 c0       	mov    esi,0xc00330fb
c003600c:	83 ec 24             	sub    esp,0x24
c003600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0036013:	fc                   	cld    
c0036014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0036016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003601a:	50                   	push   eax
c003601b:	6a 00                	push   0x0
c003601d:	6a 38                	push   0x38
c003601f:	6a 01                	push   0x1
c0036021:	e8 2c 00 00 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0036026:	83 c4 34             	add    esp,0x34
c0036029:	5e                   	pop    esi
c003602a:	5f                   	pop    edi
c003602b:	c3                   	ret    

c003602c <KiDefaultSignalHandlerTerminate(int)>:
c003602c:	57                   	push   edi
c003602d:	b9 08 00 00 00       	mov    ecx,0x8
c0036032:	56                   	push   esi
c0036033:	be 17 31 03 c0       	mov    esi,0xc0033117
c0036038:	83 ec 24             	sub    esp,0x24
c003603b:	89 e7                	mov    edi,esp
c003603d:	fc                   	cld    
c003603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0036040:	54                   	push   esp
c0036041:	6a 00                	push   0x0
c0036043:	6a 37                	push   0x37
c0036045:	6a 01                	push   0x1
c0036047:	e8 06 00 00 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003604c:	83 c4 34             	add    esp,0x34
c003604f:	5e                   	pop    esi
c0036050:	5f                   	pop    edi
c0036051:	c3                   	ret    

c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0036052:	53                   	push   ebx
c0036053:	83 ec 10             	sub    esp,0x10
c0036056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0036062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0036066:	cd 60                	int    0x60
c0036068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0036070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0036074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0036078:	83 c4 10             	add    esp,0x10
c003607b:	5b                   	pop    ebx
c003607c:	c3                   	ret    

Disassembly of section align_previous:

c0037000 <DO_NOT_DELETE()>:
c0037000:	c3                   	ret    
